
#Область ПрограммныйИнтерфейс

// Формирует дерево значений с колонками Наименование, Оператор, Сдвиг.
//
// Возвращаемое значение:
//  ДеревоЗначений - Пустое дерево операторов с колонками:
//  * Наименование - Строка - Наименование оператора.
//  * Оператор - Строка - Оператор.
//  * Сдвиг - Число - Сдвиг оператора.
//
Функция ПолучитьПустоеДеревоОператоров() Экспорт
	
	Дерево = Новый ДеревоЗначений();
	Дерево.Колонки.Добавить("Наименование");
	Дерево.Колонки.Добавить("Оператор");
	Дерево.Колонки.Добавить("Сдвиг", Новый ОписаниеТипов("Число"));
	
	Возврат Дерево;
	
КонецФункции

// Формирует дерево значений с колонками Идентификатор, Представление.
//
// Возвращаемое значение:
//  ДеревоЗначений - Пустое дерево операндов с колонками:
//  * Идентификатор - Строка - Идентификатор операнда.
//  * Представление - Строка - Представление операнда.
//
Функция ПолучитьПустоеДеревоОперандов() Экспорт
	
	Дерево = Новый ДеревоЗначений();
	Дерево.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("Значение",      Новый ОписаниеТипов("Число"));
	
	Возврат Дерево;
	
КонецФункции

// Добавляет в дерево операторов группу операторов с переданным наименованием.
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево операторов. см. функцию ПолучитьПустоеДеревоОператоров().
//  Наименование - Строка - наименование группы дерева операторов.
//
// Возвращаемое значение:
//  СтрокаДереваЗначений - Добавленная группа операторов.
//
Функция ДобавитьГруппуОператоров(Дерево, Наименование) Экспорт
	
	НоваяГруппа = Дерево.Строки.Добавить();
	НоваяГруппа.Наименование = Наименование;
	
	Возврат НоваяГруппа;
	
КонецФункции

// Добавляет в дерево операторов группу операторов с переданным наименованием.
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево операторов. см. функцию ПолучитьПустоеДеревоОператоров().
//  Родитель     - СтрокаДереваЗначений - Группа операторов, в которую необходимо добавить оператор
//  Наименование - Строка - наименование группы дерева операторов
//  Оператор     - Строка - Представление оператора на встроенном языке
//  Сдвиг        - Число - необходим для определения позиции курсора.
//
// Возвращаемое значение:
//  СтрокаДереваЗначений - Добавленный оператор.
//
Функция ДобавитьОператор(Дерево, Родитель = Неопределено, Наименование, Оператор = Неопределено, Сдвиг = 0) Экспорт
	
	НоваяСтрока = ?(Родитель <> Неопределено, Родитель.Строки.Добавить(), Дерево.Строки.Добавить());
	НоваяСтрока.Наименование = Наименование;
	НоваяСтрока.Оператор = ?(ЗначениеЗаполнено(Оператор), Оператор, Наименование);
	НоваяСтрока.Сдвиг = Сдвиг;
	
	Возврат НоваяСтрока;
	
КонецФункции

// Добавляет в дерево операндов элемент с переданным идентификатором и представлением.
//
// Параметры:
//  Родитель		 - ДеревоЗначений, СтрокаДереваЗначений	 - Корень или группа операндов, в которую необходимо добавить элемент.
//  Идентификатор	 - Строка								 - Идентификатор элемента.
//  Представление	 - Строка								 - Представление элемента.
// 
// Возвращаемое значение:
//  СтрокаДереваЗначений - Добавленный операнд.
//
Функция ДобавитьОперанд(Родитель, Идентификатор, Представление = "", Значение = 0) Экспорт
	
	НовыйОперанд = Родитель.Строки.Добавить();
	НовыйОперанд.Идентификатор = Идентификатор;
	
	Если ПустаяСтрока(Представление) Тогда
		НовыйОперанд.Представление = Идентификатор;
	Иначе
		НовыйОперанд.Представление = Представление;
	КонецЕсли;
	
	НовыйОперанд.Значение = Значение;
	Возврат НовыйОперанд;
	
КонецФункции

// Формирует дерево со стандартными операторами "+", "-", "*", "/"
//
// Возвращаемое значение:
//  ДеревоЗначений - дерево операторов. см. функцию ПолучитьПустоеДеревоОператоров().
//
Функция ПолучитьСтандартноеДеревоОператоров() Экспорт
	
	Дерево = ПолучитьПустоеДеревоОператоров();
	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, "Операторы");
	ДобавитьОператор(Дерево, ГруппаОператоров, "+", " + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "-", " - ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "*", " * ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "/", " / ");
	
	Возврат Дерево;
	
КонецФункции

// Заполняет дерево операторов для конструктора формул.
//
// Параметры:
//  Параметры - Структура - содержит виды операторов, которые необходимо добавить в дерево.
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы, в которой выполняется действия, 
//                                                      необходим для корректного помещения во временное хранилище.
//
// Возвращаемое значение:
//  Строка - Адрес во временном хранилище.
//
Функция ПостроитьДеревоОператоров(Параметры, УникальныйИдентификатор) Экспорт
	
	Дерево = РаботаСФормулами.ПолучитьПустоеДеревоОператоров();
	
	Если Параметры.Свойство("СтандартныеОператоры") И Параметры.СтандартныеОператоры Тогда
		ДобавитьГруппуСтандартныхОператоров(Дерево);
	КонецЕсли;
	
	Если Параметры.Свойство("ЛогическиеОператоры") И Параметры.ЛогическиеОператоры Тогда
		ДобавитьГруппуЛогическихОператоров(Дерево);
	КонецЕсли;
	
	Если Параметры.Свойство("Функции") И Параметры.Функции Тогда
		ДобавитьГруппуФункции(Дерево);
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(Дерево, УникальныйИдентификатор);
	
КонецФункции

// Осуществляет проверку корректности формулы
//
// Параметры:
//   Формула                 - Строка - текст формулы
//   Операнды                - Массив - операнды формулы
//   Поле                    - Строка - имя поля, к которому необходимо привязать сообщение
//   СообщениеОбОшибке       - Строка - текст сообщения об ошибке
//   СтроковаяФормула        - Булево - признак строковой формулы
//   ПутьКДанным             - Строка - путь к данным, для выдачи сообщения об ошибке
//   ДополнительныеПараметры - Структура - поддерживаемые параметры:
//    * НеВыводитьСообщения - Булево - признак того что не нужно выводить сообщения пользователю, по умолчанию выводятся
//    * ТипРезультата       - ОписаниеТипов - возможные типы, возвращаемые формулой.
//
// Возвращаемое значение:
//  Булево - Ложь, если есть ошибки, иначе Истина.
//
Функция ПроверитьФормулу(Формула, Операнды, Знач Поле = "", Знач СообщениеОбОшибке = "", СтроковаяФормула = Ложь,
		ПутьКДанным = "", ДополнительныеПараметры = Неопределено) Экспорт
		
	Перем ТипРезультата, ФормулаДляВычисленияВЗапросе;
		
	Результат = Истина;
	
	ВыводитьСообщения = Истина;
	Если ДополнительныеПараметры <> Неопределено 
		И ДополнительныеПараметры.Свойство("НеВыводитьСообщения") 
		И ДополнительныеПараметры.НеВыводитьСообщения Тогда
		ВыводитьСообщения = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Формула) Тогда
		
		Если СтроковаяФормула Тогда
			ТекстРасчета = """Строка"" + " + Формула;
			ЗначениеЗамены = """1""";
		Иначе
			ТипРезультата = Неопределено;
			Если ДополнительныеПараметры <> Неопределено Тогда
				ДополнительныеПараметры.Свойство("ТипРезультата", ТипРезультата);
			КонецЕсли;
			Если ТипРезультата = Новый ОписаниеТипов("Дата") Тогда
				ЗначениеЗамены = ТекущаяДатаСеанса();
			Иначе
				ЗначениеЗамены = 1;
			КонецЕсли;
			ТекстРасчета = Формула;
		КонецЕсли;
		
		Для Каждого Операнд Из Операнды Цикл
			ТекстРасчета = СтрЗаменить(ТекстРасчета, РаботаСФормуламиКлиентСервер.ПолучитьТекстОперандаДляВставки(Операнд), ЗначениеЗамены);
		КонецЦикла;
		
		Попытка
			
				ФункцииИзОбщегоМодуля = Неопределено;
				Если ДополнительныеПараметры <> Неопределено 
					И ДополнительныеПараметры.Свойство("ФункцииИзОбщегоМодуля", ФункцииИзОбщегоМодуля) Тогда
					
					Для каждого ТекущаяСтрока Из ФункцииИзОбщегоМодуля Цикл
						ТекстРасчета = СтрЗаменить(ТекстРасчета, ТекущаяСтрока.Ключ, ТекущаяСтрока.Значение);
					КонецЦикла; 
					
				КонецЕсли;
				
				РезультатРасчета = ОбщегоНазначения.ВычислитьВБезопасномРежиме(ТекстРасчета);
			
			
			Если СтроковаяФормула 
				Или ДополнительныеПараметры <> Неопределено
				И ДополнительныеПараметры.Свойство("ВыбиратьОперандПлана")
				И ДополнительныеПараметры.ВыбиратьОперандПлана Тогда
				ТекстПроверки = СтрЗаменить(Формула, Символы.ПС, "");
				ТекстПроверки = СтрЗаменить(ТекстПроверки, " ", "");
				ОтсутствиеРазделителей = Найти(ТекстПроверки, "][")
					+ Найти(ТекстПроверки, """[")
					+ Найти(ТекстПроверки, "]""");
				Если ОтсутствиеРазделителей > 0 Тогда
					Если ВыводитьСообщения Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru='В формуле обнаружены ошибки. Между операндами должен присутствовать оператор или разделитель'"),
						,
						Поле,
						ПутьКДанным,);
					КонецЕсли;
					Результат = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ТипРезультата") Тогда
				
				ТипРезультатаРасчетаПравильный = Ложь;
				
				Для Каждого ДопустимыйТип Из ДополнительныеПараметры.ТипРезультата.Типы() Цикл
					Если ТипЗнч(РезультатРасчета) = ДопустимыйТип Тогда
						ТипРезультатаРасчетаПравильный = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Не ТипРезультатаРасчетаПравильный Тогда
					Если ВыводитьСообщения Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru='В формуле обнаружены ошибки. Результат расчета должен быть типа Булево'"),
						,
						Поле,
						ПутьКДанным,);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		
		Исключение
			
			Результат = Ложь;
			
			Если ВыводитьСообщения Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				?(ЗначениеЗаполнено(СообщениеОбОшибке) ,СообщениеОбОшибке, НСтр("ru='В формуле обнаружены ошибки. Проверьте формулу. Формулы должны составляться по правилам написания выражений на встроенном языке 1С:Предприятия.'")),
				,
				Поле,
				ПутьКДанным,);
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет в дерево операторов группу стандартных операторов (+,-,*,/)
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево операторов. см. функцию ПолучитьПустоеДеревоОператоров().
//
Процедура ДобавитьГруппуСтандартныхОператоров(Дерево)

	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru='Операторы'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "+", " + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "-", " - ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "*", " * ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "/", " / ");

КонецПроцедуры

// Добавляет в дерево операторов группу логических операторов
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево операторов. см. функцию ПолучитьПустоеДеревоОператоров().
//
Процедура ДобавитьГруппуЛогическихОператоров(Дерево)

	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru='Логические операторы и константы'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "<", " < ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, ">", " > ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "<=", " <= ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, ">=", " >= ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "=", " = ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "<>", " <> ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='И'"),      " " + НСтр("ru='И'")      + " ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='ИЛИ'"),    " " + НСтр("ru='ИЛИ'")    + " ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='НЕ'"),     " " + НСтр("ru='НЕ'")     + " ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='ИСТИНА'"), " " + НСтр("ru='ИСТИНА'") + " ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='ЛОЖЬ'"),   " " + НСтр("ru='ЛОЖЬ'")   + " ");

КонецПроцедуры

// Добавляет в дерево операторов группу функций
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево операторов. см. функцию ПолучитьПустоеДеревоОператоров().
//
Процедура ДобавитьГруппуФункции(Дерево)

	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru='Функции'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Максимум'"),    НСтр("ru='Макс(,)'"), 2);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Минимум'"),     НСтр("ru='Мин(,)'"),  2);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Округление'"),  НСтр("ru='Окр(,)'"),  2);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Целая часть'"), НСтр("ru='Цел()'"),   1);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Условие'"),     "?(,,)",              3);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Предопределенное значение'"), НСтр("ru='ПредопределенноеЗначение()'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Значение заполнено'"), НСтр("ru='ЗначениеЗаполнено()'"));

КонецПроцедуры

#КонецОбласти
