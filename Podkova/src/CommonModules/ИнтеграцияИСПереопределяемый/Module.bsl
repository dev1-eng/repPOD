// Универсальные механизмы интеграции ИС (ЕГАИС, ГИСМ, ВЕТИС, ...)

#Область ПрограммныйИнтерфейс

#Область ЗаполнениеИПроверкаЗаполнения

// Заполняет в табличной части служебные реквизиты, например: признак использования характеристик номенклатуры, артикул.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения, Неопределено - Форма.
//  ТабличнаяЧасть - ДанныеФормыКоллекция, ТаблицаЗначений - таблица для заполнения,
Процедура ЗаполнитьСлужебныеРеквизитыВКоллекции(Форма, ТабличнаяЧасть) Экспорт
	
	//++ НЕ ГОСИС
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	
	Если ТипЗнч(ТабличнаяЧасть) = Тип("ТаблицаЗначений") Тогда
		КолонкиРеквизитов = ТабличнаяЧасть.Колонки;
	Иначе
		КолонкиРеквизитов = ТабличнаяЧасть.Выгрузить(Новый Массив).Колонки;
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("Артикул")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакАртикул",
			Новый Структура("Номенклатура", "Артикул"));
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("Код")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакКод",
			Новый Структура("Номенклатура", "Код"));
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("ХарактеристикиИспользуются")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("ЕдиницаИзмерения")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакЕдиницаИзмерения",
			Новый Структура("Номенклатура", "ЕдиницаИзмерения"));
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("ТипНоменклатуры")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры",
			Новый Структура("Номенклатура", "ТипНоменклатуры"));
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		ТабличнаяЧасть, ПараметрыЗаполненияРеквизитов);
		
	Если КолонкиРеквизитов.Найти("НоваяХарактеристикаИспользуется")<> Неопределено Тогда
		ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("НоваяНоменклатура", "НоваяХарактеристикаИспользуется"));
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		ТабличнаяЧасть, ПараметрыЗаполненияРеквизитов);
		
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Обрабатывает строку табличной части в соостветствии с переданной структурой действий.
//
// Параметры:
//  СтрокаТабличнойЧасти - Структура, СтрокаТабличнойЧасти, ДокументСтрокаТабличнойЧасти - обрабатываемая строка.
//  СтруктураДействий - структура - структура выполняемых действий.
Процедура ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, СтруктураДействий) Экспорт
	
	//++ НЕ ГОСИС

	ТипСтрокиТабличнойЧасти = ТипЗнч(СтрокаТабличнойЧасти);
	
	Если ТипСтрокиТабличнойЧасти = Тип("Структура") Тогда
		СтрокаТабличнойЧастиСтруктурой = ОбщегоНазначения.СкопироватьРекурсивно(СтрокаТабличнойЧасти, Ложь);
	ИначеЕсли ТипСтрокиТабличнойЧасти = Тип("СтрокаТаблицыЗначений") Тогда
		СтрокаТабличнойЧастиСтруктурой = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТабличнойЧасти);
	ИначеЕсли Метаданные.НайтиПоТипу(ТипСтрокиТабличнойЧасти) <> Неопределено Тогда
		СтрокаТабличнойЧастиСтруктурой = Новый Структура();
		ПодстрокиИмени = СтрРазделить(Метаданные.НайтиПоТипу(ТипСтрокиТабличнойЧасти).ПолноеИмя(), ".");
		
		Если ПодстрокиИмени.Количество() = 4 Тогда
			РеквизитыСтроки = Метаданные.Документы[ПодстрокиИмени[1]].ТабличныеЧасти[ПодстрокиИмени[3]].Реквизиты;
			Для Каждого РеквизитСтроки Из РеквизитыСтроки Цикл
				СтрокаТабличнойЧастиСтруктурой.Вставить(РеквизитСтроки.Имя, СтрокаТабличнойЧасти[РеквизитСтроки.Имя]);
			КонецЦикла;
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

	СтрокаТабличнойЧастиСтруктурой.Вставить("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар);
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТабличнойЧастиСтруктурой, СтруктураДействий, Неопределено);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТабличнойЧастиСтруктурой);

	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Проверяет заполнение характеристик в таблице значений.
//
// Параметры:
//  ТаблицаТоваров - ТаблицаЗначений - таблица для проверки с колонками: Номенклатура, Характеристика.
//  Отказ - Булево - Истина - характеристики заполнены в требуемых строках, в противном случае - Ложь.
Процедура ПроверитьЗаполнениеХарактеристикВТаблицеЗначений(ТаблицаТоваров, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ СтрокиСОшибками
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|			ИЛИ ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|			ИЛИ ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаполненаХарактеристика
	|ИЗ
	|	СтрокиСОшибками КАК СтрокиСОшибками
	|ГДЕ
	|	ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик <> ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)";

	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НеЗаполненаХарактеристика Тогда
			Отказ = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Необходимо заполнить информацию о сертификатах номенклатуры в виде соответствия из массива структур со свойствами:
//    "ВидСертификации", "НомерСертификации" и "ДатаСертификации". Информацию по сертификатам следует добавить в соответствие
//     "СертификатыНоменклатуры".
// 
// Параметры:
//  Номенклатура - ОпределяемыйТип.Номенклатура - элемент номенклатура.
//  СертификатыНоменклатуры - Соответствие из Массив Структур, Ключ - номенклатура, свойство - структура:
//   * ВидСертификации - ПеречислениеСсылка.ВидыДокументовОбязательнойСертификацииИСМП - Вид сертификата.
//   * НомерСертификации - Строка - Идентификационный номер сертификата.
//   * ДатаСертификации - Дата - Дата начала действия сертификата.
Процедура ПриЗаполненииСертификатовНоменклатуры(СписокНоменклатуры, СертификатыНоменклатуры) Экспорт
	
	//++ НЕ ГОСИС
	ИспользоватьСертификатыНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСертификатыНоменклатуры");
	
	Если Не ИспользоватьСертификатыНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры
	|ПОМЕСТИТЬ ВидыНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В (&СписокНоменклатуры)
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура.ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбластиДействияСертификатовНоменклатуры.Номенклатура КАК Номенклатура,
	|	СертификатыНоменклатуры.Бессрочный                   КАК Бессрочный,
	|	СертификатыНоменклатуры.ДатаОкончанияСрокаДействия   КАК ДатаОкончанияСрокаДействия,
	|	СертификатыНоменклатуры.ДатаНачалаСрокаДействия      КАК ДатаСертификации,
	|	СертификатыНоменклатуры.ТипСертификата               КАК ТипСертификата,
	|	СертификатыНоменклатуры.Номер                        КАК НомерСертификации
	|ИЗ
	|	РегистрСведений.ОбластиДействияСертификатовНоменклатуры КАК ОбластиДействияСертификатовНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыНоменклатуры КАК СертификатыНоменклатуры
	|		ПО ОбластиДействияСертификатовНоменклатуры.СертификатНоменклатуры = СертификатыНоменклатуры.Ссылка
	|ГДЕ
	|	ОбластиДействияСертификатовНоменклатуры.Номенклатура В (&СписокНоменклатуры)
	|	ИЛИ ОбластиДействияСертификатовНоменклатуры.ВидНоменклатуры В
	|		(Выбрать
	|			ВидыНоменклатуры.ВидНоменклатуры
	|		Из
	|			ВидыНоменклатуры КАК ВидыНоменклатуры)
	|	И ОбластиДействияСертификатовНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|УПОРЯДОЧИТЬ ПО
	|	Бессрочный убыв,
	|	ДатаОкончанияСрокаДействия убыв";
	
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	
	ДанныеСертификатов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаДанных Из ДанныеСертификатов Цикл
		
		ВидСертификации = Неопределено;
		
		Если СтрокаДанных.ТипСертификата = "Сертификат соответствия" Тогда
			ВидСертификации = Перечисления.ВидыДокументовОбязательнойСертификацииИСМП.СертификатСоответствия;
		ИначеЕсли СтрокаДанных.ТипСертификата = "Декларация о соответствии" Тогда 
			ВидСертификации = Перечисления.ВидыДокументовОбязательнойСертификацииИСМП.ДекларацияСоответствия;
		КонецЕсли;
		
		Если ВидСертификации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИнформацияОСертификате = Новый Структура;
		ИнформацияОСертификате.Вставить("ВидСертификации",   ВидСертификации);
		ИнформацияОСертификате.Вставить("НомерСертификации", СтрокаДанных.НомерСертификации);
		ИнформацияОСертификате.Вставить("ДатаСертификации",  СтрокаДанных.ДатаСертификации);
		
		СертификатыЭлемента = СертификатыНоменклатуры.Получить(СтрокаДанных.Номенклатура);
		
		Если СертификатыЭлемента = Неопределено Тогда
			СертификатыЭлемента = Новый Массив;
			СертификатыЭлемента.Добавить(ИнформацияОСертификате);
			СертификатыНоменклатуры.Вставить(СтрокаДанных.Номенклатура, СертификатыЭлемента);
		Иначе
			СертификатыЭлемента.Добавить(ИнформацияОСертификате);
		КонецЕсли;
		
	КонецЦикла;
	
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Номенклатура

// В функции требуется определить право на регистрацию нового штрихкода для текущего пользователя.
//
// Параметры:
//  ДоступРазрешен - Булево - Истина, если есть право на регистрацию штрихкода. Ложь - в противном случае.
//
Процедура ПравоРегистрацииШтрихкодовНоменклатуры(ДоступРазрешен) Экспорт
	
	//++ НЕ ГОСИС
	ДоступРазрешен = ШтрихкодированиеНоменклатурыСервер.ПравоРегистрацииШтрихкодовНоменклатурыДоступно();
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре требуется определить признак использования характеристик 
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//  Использование - Булево - Признак использования характеристик (для номенклатуры или общий)
//  Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИспользованиеХарактеристик(Использование, Номенклатура) Экспорт
	
	//++ НЕ ГОСИС
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Использование = Ложь;
	ИначеЕсли Номенклатура = Неопределено Тогда
		Использование = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Использование = Ложь;
	Иначе
		Использование = Справочники.Номенклатура.ХарактеристикиИспользуются(Номенклатура);
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре требуется определить признак использования серий
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//  Использование - Булево - Признак использования серий (для номенклатуры или общий)
//  Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИспользованиеСерий(Использование, Номенклатура) Экспорт
	
	//++ НЕ ГОСИС
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Использование = Ложь;
	ИначеЕсли Номенклатура = Неопределено Тогда
		Использование = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Использование = Ложь;
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА
		|			Номенклатура.ВладелецСерий <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
		|		ТОГДА
		|			Номенклатура.ВладелецСерий.ИспользоватьСерии
		|		КОГДА
		|			Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
		|		ТОГДА
		|			Номенклатура.ВидНоменклатуры.ИспользоватьСерии
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ПризнакИспользованияСерий
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка = &Номенклатура";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Использование = Ложь;
		Если Выборка.Следующий() Тогда
			Использование = Выборка.ПризнакИспользованияСерий;
		КонецЕсли;
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре требуется определить признак использования упаковок для номенклатуры.
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//  Использование - Булево - Признак использования упаковок (для номенклатуры или общий)
//  Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИспользованиеУпаковок(Использование, Номенклатура) Экспорт
	
	//++ НЕ ГОСИС
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		Использование = Ложь;
	ИначеЕсли Номенклатура = Неопределено Тогда
		Использование = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Использование = Ложь;
	Иначе
		Использование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ИспользоватьУпаковки");
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре требуется определить признак использования видов номенклатуры.
//
// Параметры:
//  Использование - Булево - Признак использования видов номенклатуры в программе.
//
Процедура ИспользованиеВидовНоменклатуры(Использование) Экспорт
	
	//++ НЕ ГОСИС
	Использование = Истина;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#Область МаркируемаяПродукция

Процедура ПриЗаполненииТекстаЗапросаПризнакаМаркируемаяПродукцияПоНоменклатуре(ТекстЗапроса, ИмяТаблицыНоменклатура, ИмяПоляНоменклатура) Экспорт
	
	//++ НЕ ГОСИС
	ТекстЗапроса = СтрШаблон(
		"ВЫБРАТЬ
		|	Товары.%1 КАК Номенклатура,
		|	%3 КАК Маркируемый
		|ИЗ %2 КАК Товары",
		ИмяПоляНоменклатура,
		ИмяТаблицыНоменклатура,
		ИнтеграцияИСУТ.ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса(
			СтрШаблон("Товары.%1",ИмяПоляНоменклатура)));
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОрганизацииИКонтрагенты

// Проверяет использование подразделений в информационной базе.
// 
// Возвращаемое значение:
//  Булево - Подразделения используются.
//
Процедура ИспользованиеПодразделений(Использовать) Экспорт
	
	//++ НЕ ГОСИС
	Использовать = ИнтеграцияГИСМ_УТ.ИспользоватьПодразделения();
	//-- НЕ ГОСИС
	
КонецПроцедуры

// В процедуре нужно реализовать заполнение структуры данными из информационной базы.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - ссылка на собственную организацию или контрагента,
//  Сведения - Структура - структура с реквизитами организации, которые требуется заполнить,
//  ДатаСведений - Дата - дата, на которую требуется получить информацию.
//
Процедура ЗаполнитьСведенияОбОрганизации(Организация, Сведения, ДатаСведений = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	Если ДатаСведений = Неопределено Тогда
		ДатаСведений = ТекущаяДатаСеанса();
	КонецЕсли;
	
	СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Организация, ДатаСведений);
	ЗаполнитьЗначенияСвойств(Сведения, СведенияОбОрганизации);
	
	Если СведенияОбОрганизации.Свойство("ОфициальноеНаименование") Тогда
		Сведения.Вставить("Наименование", СведенияОбОрганизации.ОфициальноеНаименование);
	Иначе
		Сведения.Вставить("Наименование", СведенияОбОрганизации.Представление);
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре нужно реализовать заполнение структуры данными ИНН/КПП из информационной базы.
//
// Параметры:
//  Сведения    - Структура - структура с реквизитами организации/контрагента, которые требуется заполнить,
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС, ОпределяемыйТип.КонтрагентГосИС - ссылка на 
//                                                                                              собственную организацию или контрагента
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - ссылка на торговый объект для определения КПП.
Процедура ЗаполнитьИННКПППоОрганизацииКонтрагенту(Сведения, Организация, ТорговыйОбъект = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",         Организация);
	Запрос.УстановитьПараметр("ТорговыйОбъект", ТорговыйОбъект);
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Контрагенты") Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.ИНН КАК ИНН,
		|	Контрагенты.КПП КАК КПП
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = &Ссылка";
		
	ИначеЕсли ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") И Не ЗначениеЗаполнено(ТорговыйОбъект) Тогда 
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.ИНН КАК ИНН,
		|	Организации.КПП КАК КПП
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Ссылка";
		
	ИначеЕсли ТипЗнч(Организация) = Тип("СправочникСсылка.Организации")
		И ТипЗнч(ТорговыйОбъект) = Тип("СправочникСсылка.Склады") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Склады.Подразделение                         КАК Подразделение,
		|	ВЫРАЗИТЬ(&Ссылка КАК Справочник.Организации) КАК Организация
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка = &ТорговыйОбъект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(Данные.Организация.ИНН, """") КАК ИНН,
		|	ВЫБОР
		|		КОГДА РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане ЕСТЬ NULL
		|			ТОГДА ЕСТЬNULL(Данные.Организация.КПП, """")
		|		ИНАЧЕ ЕСТЬNULL(РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане.КПП, """")
		|	КОНЕЦ КАК КПП
		|ИЗ
		|	Данные КАК Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
		|		ПО Данные.Подразделение = РегистрацииВНалоговомОргане.Подразделение
		|		И Данные.Организация = РегистрацииВНалоговомОргане.Организация
		|";
		
	ИначеЕсли ТипЗнч(Организация) = Тип("СправочникСсылка.Организации")
		И ТипЗнч(ТорговыйОбъект) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫРАЗИТЬ(&ТорговыйОбъект КАК Справочник.СтруктураПредприятия) КАК Подразделение,
		|	ВЫРАЗИТЬ(&Ссылка КАК Справочник.Организации)                  КАК Организация
		|ПОМЕСТИТЬ Данные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(Данные.Организация.ИНН, """") КАК ИНН,
		|	ВЫБОР
		|		КОГДА РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане ЕСТЬ NULL
		|			ТОГДА ЕСТЬNULL(Данные.Организация.КПП, """")
		|		ИНАЧЕ ЕСТЬNULL(РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане.КПП, """")
		|	КОНЕЦ КАК КПП
		|ИЗ
		|	Данные КАК Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
		|		ПО Данные.Подразделение = РегистрацииВНалоговомОргане.Подразделение
		|		И Данные.Организация = РегистрацииВНалоговомОргане.Организация
		|";
	
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Сведения, Выборка);
	КонецЕсли;
	
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Заполняет представление руководителя организации.
//
// Параметры:
//  ПредставлениеРуководителя - (см. ИнтеграцияИС.ДанныеРуководителяОрганизации)
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - ссылка на собственную организацию или контрагента,
//  ДатаСведений - Дата - дата, на которую требуется получить информацию.
Процедура ОпределитьДанныеРуководителяОрганизации(ПредставлениеРуководителя, Организация, ДатаСведений) Экспорт
	
	//++ НЕ ГОСИС
	ДанныеРуководителя = ОтветственныеЛицаСервер.ПолучитьДанныеОтветственногоЛица(Организация, ДатаСведений);
	ПредставлениеРуководителя.Руководитель = Строка(ДанныеРуководителя.ФизическоеЛицо);
	ПредставлениеРуководителя.Должность = Строка(ДанныеРуководителя.Должность);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре нужно реализовать поиск организации предприятия по ИНН и/или КПП.
//
// Параметры:
//  ИНН - Строка - ИНН искомой организации,
//  КПП - Строка - КПП искомой организации.
//
// Возвращаемое значение:
//  ОпределяемыйТип.ОрганизацияКонтрагентГосИС - найденная организация,
//  Неопределено - организация не найдена.
Процедура ЗаполнитьОрганизациюПоИННКПП(Организация, ИНН, КПП) Экспорт
	
	//++ НЕ ГОСИС
	Организация = Неопределено;
	ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП("Организации", ИНН, КПП, Организация);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре нужно реализовать поиск контрагента по ИНН и/или КПП.
//
// Параметры:
//  ИНН - Строка - ИНН искомого контрагента,
//  КПП - Строка - КПП искомого контрагента.
//
// Возвращаемое значение:
//  ОпределяемыйТип.ОрганизацияКонтрагентГосИС, ОпределяемыйТип.КонтрагентГосИС - найденный контрагент,
//  Неопределено - контрагент не найден.
Процедура ЗаполнитьКонтрагентаПоИННКПП(Контрагент, ИНН, КПП) Экспорт
	
	//++ НЕ ГОСИС
	Контрагент = Неопределено;
	Если ПустаяСтрока(ИНН) И ПустаяСтрока(КПП) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПоиска = ПартнерыИКонтрагенты.ИННКППУжеИспользуетсяВИнформационнойБазе(ИНН, КПП);
	Если ЗначениеЗаполнено(РезультатПоиска) Тогда
		Контрагент = РезультатПоиска.Ссылка;
	КонецЕсли;
	
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре необходимо сформировать соответствие по коллекции ИНН. Ключ - ИНН, значение - Контрагент.
//
// Параметры:
//  КоллекцияИНН - Массив - Список ИНН.
//  Соответствие - Соответствие - Соответсвие вида:
//   * ИНН
//   * Контрагент
Процедура ЗаполнитьСоответствиеИННКонтрагентам(КоллекцияИНН, Соответствие) Экспорт
	
	//++ НЕ ГОСИС
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.Контрагенты) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.ИНН    КАК ИНН
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН В (&КоллекцияИНН)
	|");
	Запрос.УстановитьПараметр("КоллекцияИНН", КоллекцияИНН);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.ИНН, Выборка.Контрагент);
	КонецЦикла;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре необходимо сформировать соответствие по коллекции налоговых номеров. Ключ - налоговый номер, значение - Контрагент.
//
// Параметры:
//  КоллекцияНалоговыхНомеров - Массив - Список налоговых номеров юр.лиц за пределами РФ.
//  Соответствие - Соответствие - Соответсвие вида:
//   * Налоговый номер
//   * Контрагент
Процедура ПриОпределенииСоответствияНалоговыхНомеровКонтрагентам(КоллекцияНалоговыхНомеров, Соответствие) Экспорт
	
	//++ НЕ ГОСИС
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.Контрагенты) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.НалоговыйНомер КАК НалоговыйНомер
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.НалоговыйНомер В (&КоллекцияНалоговыхНомеров)");
	Запрос.УстановитьПараметр("КоллекцияНалоговыхНомеров", КоллекцияНалоговыхНомеров);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.НалоговыйНомер, Выборка.Контрагент);
	КонецЦикла;
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// В процедуре необходимо сформировать соответствие по коллекции ИНН. Ключ - ИНН, значение - Организация.
//
// Параметры:
//  КоллекцияИНН - Массив - Список ИНН.
//  Соответствие - Соответствие - Соответсвие вида:
//   * ИНН
//   * Организация
Процедура ЗаполнитьСоответствиеИННОрганизациям(КоллекцияИНН, Соответствие) Экспорт
	
	//++ НЕ ГОСИС
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.Организации) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация,
	|	Организации.ИНН    КАК ИНН
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ИНН В (&КоллекцияИНН)
	|");
	Запрос.УстановитьПараметр("КоллекцияИНН", КоллекцияИНН);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.ИНН, Выборка.Организация);
	КонецЦикла;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре нужно реализовать поиск организации в прикладном объекте.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - найденная организация
//  Объект      - Произвольный                - объект в котором производится поиск
//
Процедура ПриОпределенииОрганизацииИзПрикладногоОбъекта(Организация, Объект) Экспорт
	
	//++ НЕ ГОСИС
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.ПроизводственнаяОперацияВЕТИС") Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, "ХозяйствующийСубъект, Предприятие");
		
		ПредставленияСопоставлений = ИнтеграцияВЕТИСВызовСервера.ПредставленияСопоставлений(
			Реквизиты.ХозяйствующийСубъект, Реквизиты.Предприятие);
		
		Организация = ПредставленияСопоставлений.КонтрагентХозяйствующегоСубъекта.Ссылка;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПроизводственнаяОперацияВЕТИС") Тогда
		
		ПредставленияСопоставлений = ИнтеграцияВЕТИСВызовСервера.ПредставленияСопоставлений(
			Объект.ХозяйствующийСубъект, Объект.Предприятие);
		
		Организация = ПредставленияСопоставлений.КонтрагентХозяйствующегоСубъекта.Ссылка;
		
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Объект)) Тогда;
		
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "Организация");
		
	Иначе
		
		Организация = Объект.Организация;
		
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемоеОборудование

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой необходимо настроить подключаемое оборудование,
//  ПрефиксыЭлементовФормы - Строка - строка имен табличных частей, разделенных запятыми, в которых нужно настроить видимость команд.
Процедура НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы = "Товары") Экспорт
	
	//++ НЕ ГОСИС
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы);
	
	Если ЗначениеЗаполнено(ПрефиксыЭлементовФормы) Тогда
		МассивПрефиксыЭлементовФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПрефиксыЭлементовФормы, ",");
	Иначе
		МассивПрефиксыЭлементовФормы = Новый Массив;
		МассивПрефиксыЭлементовФормы.Добавить(ПрефиксыЭлементовФормы);
	КонецЕсли;
	
	Если Форма.ИмяФормы <> "Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ПроверкаИПодбор"
		И Форма.ИмяФормы <> "Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ПроверкаИПодбор"
		И Форма.ИмяФормы <> "Обработка.ПроверкаИПодборТабачнойПродукцииМОТП.Форма.ПроверкаИПодбор" Тогда
		
		Для Каждого Префикс Из МассивПрефиксыЭлементовФормы Цикл
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				Префикс + "ВыгрузитьДанныеВТСД",
				"Видимость",
				Ложь);
		КонецЦикла;
		
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ДлительныеОперации

//Особенности работы с длительными операциями в конкретном окружении
//
//Параметры:
//   Параметры - Структура - параметры фонового задания.
//   ПараметрыВыполнения - см. ДлительныеОперации.ПараметрыВыполненияВФоне - параметры выполнения фонового задания.
Процедура НастроитьДлительнуюОперацию(Параметры, ПараметрыВыполнения) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеПечатныхФорм

// Заполняет структуру параметров возможных получателей печатных форм при отправке по электронной почте.
//
// Параметры:
//  ПараметрыОтправки - Структура - содержит параметры отправки сформированных печатных форм
//  ДанныеОбъектовПечати - Массив,Соответствие - данные о печатаемых объектах
//  КоллекцияПечатныхФорм - ТаблицаЗначений - содержит информацию о формируемых печатных формах.
Процедура ЗаполнитьПараметрыОтправки(ПараметрыОтправки, ДанныеОбъектовПечати, КоллекцияПечатныхФорм)  Экспорт
	
	//++ НЕ ГОСИС
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыОтправки, ДанныеОбъектовПечати, КоллекцияПечатныхФорм);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбщегоНазначенияУТ

// (См ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании)
Процедура ПроверитьВозможностьВводаНаОсновании(Документ,
	                                           Статус = Неопределено,
	                                           ЕстьОшибкиПроведен = Ложь,
	                                           ЕстьОшибкиСтатус = Ложь,
	                                           МассивДопустимыхСтатусов = Неопределено,
	                                           СоглашениеДоступноВнешнемуПользователю = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Документ,
		Статус,
		ЕстьОшибкиПроведен,
		ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов,
		СоглашениеДоступноВнешнемуПользователю);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Возвращает представление объекта.
// 
// Параметры:
//  Представление - Строка - Исходящий параметр со значением представления.
//  ПараметрОбъект - Строка, Объект - Наименование типа объекта либо сам объект.
Процедура УстановитьПредставлениеОбъекта(Представление, ПараметрОбъект) Экспорт
	
	//++ НЕ ГОСИС
	Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(ПараметрОбъект);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Заполняет представление строки номенклатуры.
//
// Параметры:
//  Представление  - Строка                                     - представление для заполнения,
//  Номенклатура   - ОпределяемыйТип.Номенклатура               - ссылка на номенклатуру,
//  Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - ссылка на характеристику номенклатуры,
//  Упаковка       - ОпределяемыйТип.Упаковка                   - ссылка на упаковку.
//  Серия          - ОпределяемыйТип.СерияНоменклатуры          - ссылка на серию номенклатуры.
Процедура ЗаполнитьПредставлениеНоменклатуры(Представление, Номенклатура, Характеристика, Упаковка, Серия) Экспорт
	
	//++ НЕ ГОСИС
	Представление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
		СокрЛП(Номенклатура),
		СокрЛП(Характеристика),
		Упаковка,
		Серия);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ПраваДоступа

// Проверяет наличие права создания контрагента у текущего пользователя.
//
// Параметры:
//  ДоступРазрешен - Булево - Истина, если есть право создания контрагента, Ложь в обратном случае.
//
Процедура ПравоСозданияКонтрагента(ДоступРазрешен) Экспорт
	
	//++ НЕ ГОСИС
	ДоступРазрешен = ПравоДоступа("Добавление", Метаданные.Справочники.Контрагенты);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ВызовыИзБСП

// (См. ОбщийМодуль.ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту)
//
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	//++ НЕ ГОСИС
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область МенюОтчеты

// Добавляет команду отчета в список команд.
// 
// Параметры:
//  КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов.
Процедура ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Добавляет команду отчета в список команд.
// 
// Параметры:
//  КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов.
//
Процедура ДобавитьКомандуДвиженияДокумента(КомандыОтчетов) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область СерииНоменклатуры

// Заполняет имена реквизитов, от значений которых зависят параметры указания серий.
//
// Параметры:
//  ИменаРеквизитов - Строка           - Результат заполнения.
//  ТипОбъекта      - ОбъектМетаданных - Тип объекта коллекции объектов метаданных.
Процедура ЗаполнитьИменаРеквизитовДляЗаполненияПараметровУказанияСерий(ИменаРеквизитов, ТипОбъекта) Экспорт
	
	//++ НЕ ГОСИС
	Если ТипОбъекта = Метаданные.Документы.ТТНВходящаяЕГАИС Тогда
		ИменаРеквизитов = "Дата,ДокументОснование,ВидОперации,ТорговыйОбъект";
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС
		Или ТипОбъекта = Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС
		Или ТипОбъекта = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС
		Или ТипОбъекта = Метаданные.Документы.ЗапросСкладскогоЖурналаВЕТИС Тогда
		ИменаРеквизитов = "Дата,ТорговыйОбъект,Ссылка";
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПроизводственнаяОперацияВЕТИС Тогда
		ИменаРеквизитов = "Дата,ДокументОснование,ТорговыйОбъект,Ссылка";
	ИначеЕсли ТипОбъекта = Метаданные.Документы.МаркировкаТоваровГИСМ Тогда
		ИменаРеквизитов = "Склад,ОперацияМаркировки,Дата";
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПеремаркировкаТоваровГИСМ Тогда
		ИменаРеквизитов = "Склад,Дата";
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Заполняет параметры указания серий для товаров, указанных в объекте.
//
// Параметры:
//  Параметры  - Структура        - выходной, параметры указания серий, состав полей определен в функции
//                                  НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//  ТипОбъекта - ОбъектМетаданных - Тип объекта коллекции объектов метаданных.
//  Объект     - Структура        - Структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
Процедура ЗаполнитьПараметрыУказанияСерий(Параметры, ТипОбъекта, Объект) Экспорт
	
	//++ НЕ ГОСИС
	Если ТипОбъекта = Метаданные.Документы.ТТНИсходящаяЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийТТНИсходящаяЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ТТНВходящаяЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийТТНВходящаяЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ЧекЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийЧекЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ЧекЕГАИСВозврат Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийЧекЕГАИСВозврат(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.АктПостановкиНаБалансЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийАктПостановкиНаБалансЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.АктСписанияЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийАктСписанияЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПередачаВРегистр2ЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийПередачаВРегистр2ЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВозвратИзРегистра2ЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийВозвратИзРегистра2ЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Обработки.СопоставлениеКлассификаторовЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийСопоставлениеКлассификаторовЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Справочники.ШтрихкодыУпаковокТоваров Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийШтрихкодыУпаковокТоваров(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.РегистрыСведений.СоответствиеНоменклатурыЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийСоответствиеНоменклатурыЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ОстаткиЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСУТ.ПараметрыУказанияСерийОстаткиЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.РегистрыСведений.СоответствиеНоменклатурыВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУТ.ПараметрыУказанияСерийСоответствиеНоменклатурыВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУТ.ПараметрыУказанияСерийВходящаяТранспортнаяОперацияВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУТ.ПараметрыУказанияСерийИнвентаризацияПродукцииВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПроизводственнаяОперацияВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУТ.ПараметрыУказанияСерийПроизводственнаяОперацияВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ЗапросСкладскогоЖурналаВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУТ.ПараметрыУказанияСерийЗапросСкладскогоЖурналаВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУТ.ПараметрыУказанияСерийИсходящаяТранспортнаяОперацияВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.МаркировкаТоваровГИСМ Тогда
		
		Параметры = ИнтеграцияГИСМУТ.ПараметрыУказанияСерийМаркировкаТоваровГИСМ(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПеремаркировкаТоваровГИСМ Тогда
		
		Параметры = ИнтеграцияГИСМУТ.ПараметрыУказанияСерийПеремаркировкаТоваровГИСМ(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.МаркировкаТоваровИСМП Тогда
		
		Параметры = ИнтеграцияИСМПУТ.ПараметрыУказанияСерийМаркировкаТоваровИСМП(Объект);
	
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВыводИзОборотаИСМП Тогда
		
		Параметры = ИнтеграцияИСМПУТ.ПараметрыУказанияСерийВыводИзОборотаИСМП(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВозвратВОборотИСМП Тогда
		
		Параметры = ИнтеграцияИСМПУТ.ПараметрыУказанияСерийВозвратВОборотИСМП(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Обработки.ВиртуальнаяАгрегацияУпаковокИСМП Тогда
		
		Параметры = ИнтеграцияИСМПУТ.ПараметрыУказанияСерийВиртуальнаяАгрегацияУпаковокИСМП(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Обработки.ПроверкаИПодборПродукцииИСМП
		ИЛИ ТипОбъекта = Метаданные.Обработки.ПроверкаИПодборТабачнойПродукцииМОТП Тогда
		
		ИнтеграцияИСМПУТ.ДополнитьПараметрыУказанияСерийПроверкаИПодборПродукцииИСМП(Параметры, Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.СписаниеКодовМаркировкиИСМП Тогда
		
		Параметры = ИнтеграцияИСМПУТ.ПараметрыУказанияСерийСписаниеКодовМаркировки(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ОтгрузкаТоваровИСМП Тогда
		
		Параметры = ИнтеграцияИСМПУТ.ПараметрыУказанияСерийОтгрузкаТоваровИСМП(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПриемкаТоваровИСМП Тогда
		
		Параметры = ИнтеграцияИСМПУТ.ПараметрыУказанияСерийПриемкаТоваровИСМП(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ОтгрузкаТоваровИСМП Тогда
		
		Параметры = ИнтеграцияИСМПУТ.ПараметрыУказанияСерийОтгрузкаТоваровИСМП(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.ОбщиеФормы.УточнениеСоставаУпаковкиИС Тогда
		
		ИнтеграцияИСУТ.ДополнитьПараметрыУказанияСерийФормыУточнениеСоставаУпаковкиИС(Параметры, Объект);
	
	ИначеЕсли ТипОбъекта = Метаданные.ОбщиеФормы.ФормаУточненияДанныхИС Тогда
		
		ИнтеграцияИСУТ.ДополнитьПараметрыУказанияСерийФормыУточнениеДанныхИС(Параметры, Объект);
	
	КонецЕсли;
	
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Возвращает параметры указания серий для товаров, указанных в объекте.
//
// Параметры:
//  Параметры - Структура - выходной, особенности указания серий в объекте, состав полей определен в функции
//                          НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//  Объект    - Объект, ДанныеФормыСтруктура - Объект, для формы которого нужно сформировать параметры
//                                             указания серий.
//  МенеджерОбъекта - Менеджер - Менеджер объекта, для формы которого нужно сформировать параметры указания серий.
Процедура ЗаполнитьПараметрыУказанияСерийФормыОбъекта(Параметры, Объект, МенеджерОбъекта) Экспорт
	
	//++ НЕ ГОСИС
	Параметры = НоменклатураСервер.ПараметрыУказанияСерий(Объект, МенеджерОбъекта);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Извлекает из временного хранилища серии, указанные в форме редактирования серий, помещает эти строки в ТЧ "Серии" объекта,
//   перерасчитывает статусы указания серий строках товарной табличной части.
//
// Параметры:
//  Форма                       - ФормаКлиентскогоПриложения    - Источник вызова.
//  ПараметрыФормыУказанияСерий - Структура           - Состав полей определен в функции НоменклатураСервер.ПараметрыФормыУказанияСерий.
//  КэшированныеЗначения        - Структура           - Сохраненные значения параметров, используемых при обработке строки таблицы.
Процедура ОбработатьУказаниеСерий(Форма, ПараметрыФормыУказанияСерий, КэшированныеЗначения) Экспорт
	
	//++ НЕ ГОСИС
	ПараметрыУказанияСерий = Форма.ПараметрыУказанияСерий;
	Объект = Форма.Объект;
	
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект, ПараметрыУказанияСерий, ПараметрыФормыУказанияСерий, ,
		КэшированныеЗначения);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Процедура заполняет статусы указания серий в строках товарной табличной части.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура, ФормаКлиентскогоПриложения - Общая форма или основной реквизит формы объекта.
//  ПараметрыУказанияСерий - Произвольный - Параметры указания серий номенклатуры.
//
Процедура ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий) Экспорт
	
	//++ НЕ ГОСИС
	Если ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения")
			И Объект.ИмяФормы = "ОбщаяФорма.УточнениеСоставаУпаковкиИС" Тогда
		ДобавляемыеРеквизиты = Новый Массив;
		НовыйРеквизит = Новый РеквизитФормы("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"), "ДанныеДляУточнения");
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		НовыйРеквизит = Новый РеквизитФормы("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"), "ДанныеДляУточнения");
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		НовыйРеквизит = Новый РеквизитФормы("Количество", Новый ОписаниеТипов("Число"), "ДанныеДляУточнения");
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		Объект.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		Для Каждого СтрокаТаблицы Из Объект.ДанныеДляУточнения Цикл
			СтрокаТаблицы.Склад = Объект.Склад;
			СтрокаТаблицы.Количество = 1;
		КонецЦикла;
		ВременныеПараметры = Новый Структура("ИмяТЧТовары,ИмяТЧСерии,ИмяИсточникаЗначенийВФормеОбъекта");
		ЗаполнитьЗначенияСвойств(ВременныеПараметры, ПараметрыУказанияСерий);
		
		ПараметрыУказанияСерий.ИмяТЧТовары = "ДанныеДляУточнения";
		ПараметрыУказанияСерий.ИмяТЧСерии = ПараметрыУказанияСерий.ИмяТЧТовары;
		ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта = "ЭтаФорма";
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		ЗаполнитьЗначенияСвойств(ПараметрыУказанияСерий, ВременныеПараметры);
	Иначе
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

Процедура ЗаполнитьСтатусыУказанияСерийФормы(Форма, ИмяРеквизитаОбъект = "Объект", ИмяРеквизитаПараметрыУказанияСерий = "ПараметрыУказанияСерий") Экспорт
	
	//++ НЕ ГОСИС
	ЗаполнитьСтатусыУказанияСерий(Форма[ИмяРеквизитаОбъект], Форма[ИмяРеквизитаПараметрыУказанияСерий]);
	//-- НЕ ГОСИС
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыУказанияСерийФормы(Менеджер, Форма, ИмяРеквизитаОбъект = "Объект", ИмяРеквизитаПараметрыУказанияСерий = "ПараметрыУказанияСерий") Экспорт
	
	//++ НЕ ГОСИС
	ЗаполнитьПараметрыУказанияСерийФормыОбъекта(Форма[ИмяРеквизитаПараметрыУказанияСерий], Форма[ИмяРеквизитаОбъект], Менеджер);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Процедура пересчитывает статусы указания серий в строках товаров, если это необходимо, переподчиняет строки серий 
// другим строкам таблицы.
//
// Параметры:
//  Форма                      - ФормаКлиентскогоПриложения    - Источник вызова.
//  ПараметрыУказанияСерий     - Структура           - Состав полей определен в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//  ТекущаяСтрокаИдентификатор - Число               - Идентификатор текущей строки товаров в форме объекта.
//  КэшированныеЗначения       - Структура           - Сохраненные значения параметров, используемых при обработке строки таблицы.
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
	Форма,
	ПараметрыУказанияСерий = "",
	ТекущаяСтрокаИдентификатор,
	КэшированныеЗначения) Экспорт
	
	//++ НЕ ГОСИС
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Объект = Форма;
	КонецЕсли;
	
	Если (ПараметрыУказанияСерий = "") Тогда
		ПараметрыУказанияСерий = Форма.ПараметрыУказанияСерий;
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, ПараметрыУказанияСерий,
		ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Заполняет текст запроса заполнения статусов указания серий для товаров, указанных в документе.
//
// Параметры:
//  ТекстЗапроса           - Строка           - Текст запроса заполнения статусов указания серий.
//  ТипОбъекта             - ОбъектМетаданных - Тип документа коллекции объектов метаданных.
//  ПараметрыУказанияСерий - Структура        - Состав полей определен в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
Процедура ЗаполнитьТекстЗапросаЗаполненияСтатусовУказанияСерий(ТекстЗапроса, ТипОбъекта, ПараметрыУказанияСерий) Экспорт
	
	//++ НЕ ГОСИС
	Если ТипОбъекта = Метаданные.Справочники.ШтрихкодыУпаковокТоваров Тогда
		
		ТекстЗапроса = ИнтеграцияЕГАИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийШтрихкодыУпаковокТоваров(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.РегистрыСведений.СоответствиеНоменклатурыЕГАИС Тогда
		
		ТекстЗапроса = ИнтеграцияЕГАИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийСоответствиеНоменклатурыЕГАИС(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.РегистрыСведений.СоответствиеНоменклатурыВЕТИС Тогда
		
		ТекстЗапроса = ИнтеграцияВЕТИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийСоответствиеНоменклатурыВЕТИС(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ЗапросСкладскогоЖурналаВЕТИС Тогда
		
		ТекстЗапроса = ИнтеграцияВЕТИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийЗапросСкладскогоЖурналаВЕТИС(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
		
		ТекстЗапроса = ИнтеграцияВЕТИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийВходящаяТранспортнаяОперацияВЕТИС(
			ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
		
		ТекстЗапроса = ИнтеграцияВЕТИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийИсходящаяТранспортнаяОперацияВЕТИС();
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС Тогда
		
		ТекстЗапроса = ИнтеграцияВЕТИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийИнвентаризацияПродукцииВЕТИС(
			ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПроизводственнаяОперацияВЕТИС Тогда
		
		ТекстЗапроса = ИнтеграцияВЕТИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийПроизводственнаяОперацияВЕТИС(
			ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ТТНВходящаяЕГАИС Тогда
		
		ТекстЗапроса = ИнтеграцияЕГАИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийТТНВходящаяЕГАИС(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ТТНИсходящаяЕГАИС
		ИЛИ ТипОбъекта = Метаданные.Документы.ЧекЕГАИС
		ИЛИ ТипОбъекта = Метаданные.Документы.ЧекЕГАИСВозврат
		ИЛИ ТипОбъекта = Метаданные.Документы.АктПостановкиНаБалансЕГАИС
		ИЛИ ТипОбъекта = Метаданные.Документы.АктСписанияЕГАИС
		ИЛИ ТипОбъекта = Метаданные.Документы.ПередачаВРегистр2ЕГАИС
		ИЛИ ТипОбъекта = Метаданные.Документы.ВозвратИзРегистра2ЕГАИС
		ИЛИ ТипОбъекта = Метаданные.Документы.ОстаткиЕГАИС
		ИЛИ ТипОбъекта = Метаданные.Обработки.СопоставлениеКлассификаторовЕГАИС Тогда
		
		ТекстЗапроса = ИнтеграцияЕГАИСУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.МаркировкаТоваровГИСМ Тогда
		
		ТекстЗапроса = ИнтеграцияГИСМУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийМаркировкаТоваровГИСМ(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПеремаркировкаТоваровГИСМ Тогда
		
		ТекстЗапроса = ИнтеграцияГИСМУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийПеремаркировкаТоваровГИСМ(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.МаркировкаТоваровИСМП Тогда 
		
		ТекстЗапроса = ИнтеграцияИСМПУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийБезАнализаСклада(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Обработки.ВиртуальнаяАгрегацияУпаковокИСМП
		ИЛИ ТипОбъекта = Метаданные.Обработки.ПроверкаИПодборПродукцииИСМП
		ИЛИ ТипОбъекта = Метаданные.Обработки.ПроверкаИПодборТабачнойПродукцииМОТП Тогда
		
		ТекстЗапроса = ИнтеграцияИСМПУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийПроверкаИПодборПродукцииИСМП(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВыводИзОборотаИСМП Тогда 
		
		ПараметрыУказанияСерий.Вставить("ПроверяемыйДокумент", "ВыводИзОборотаИСМП");
		ТекстЗапроса = ИнтеграцияИСМПУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийБезАнализаСклада(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВозвратВОборотИСМП Тогда 
		
		ПараметрыУказанияСерий.Вставить("ПроверяемыйДокумент", "ВозвратВОборотИСМП");
		ТекстЗапроса = ИнтеграцияИСМПУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийБезАнализаСклада(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.СписаниеКодовМаркировкиИСМП Тогда
		
		ПараметрыУказанияСерий.Вставить("ПроверяемыйДокумент", "СписаниеКодовМаркировкиИСМП");
		ТекстЗапроса = ИнтеграцияИСМПУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийБезАнализаСклада(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ОтгрузкаТоваровИСМП Тогда 
		
		ПараметрыУказанияСерий.Вставить("ПроверяемыйДокумент", "ОтгрузкаТоваровИСМП");
		ТекстЗапроса = ИнтеграцияИСМПУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийБезАнализаСклада(ПараметрыУказанияСерий);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПриемкаТоваровИСМП Тогда 
		
		ПараметрыУказанияСерий.Вставить("ПроверяемыйДокумент", "ПриемкаТоваровИСМП");
		ТекстЗапроса = ИнтеграцияИСМПУТ.ТекстЗапросаЗаполненияСтатусовУказанияСерийБезАнализаСклада(ПараметрыУказанияСерий);
		
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Заполняет текст запроса проверки заполнения серий в документе.
//
// Параметры:
//  ТекстЗапроса           - Строка           - Текст запроса проверки заполнения серий.
//  ТипОбъекта             - ОбъектМетаданных - Тип документа коллекции объектов метаданных.
//  ПараметрыУказанияСерий - Структура        - Состав полей определен в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
Процедура ЗаполнитьТекстЗапросаПроверкиЗаполненияСерий(ТекстЗапроса, ТипОбъекта, ПараметрыУказанияСерий) Экспорт
	
	//++ НЕ ГОСИС
	Если ТипОбъекта = Метаданные.Документы.ПеремаркировкаТоваровГИСМ Тогда
		
		ТекстЗапроса = ИнтеграцияГИСМУТ.ТекстЗапросаПроверкиЗаполненияСерийПеремаркировкаТоваровГИСМ(ПараметрыУказанияСерий);
		
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Процедура формирования движений по регистру "Движения серий товаров".
//
// Параметры:
//  ДополнительныеСвойства - Структура - дополнительные свойства для записи движений 
//  Движения - КоллекцияДвижений - движения по которым двигается документ
//  Отказ - Булево - признак отказа от проведения документа
Процедура ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	СкладыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Локализация

Процедура ПриОпределенииМенеджераОбъектаПоПолномуИмени(МенеджерОбъекта, ПолноеИмя) Экспорт
	
	//++ НЕ ГОСИС
	МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(ПолноеИмя);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

Процедура ПриОпределенииМенеджераОбъектаПоСсылке(МенеджерОбъекта, Ссылка) Экспорт
	
	//++ НЕ ГОСИС
	МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(Ссылка.Метаданные().ПолноеИмя());
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти