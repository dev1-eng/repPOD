/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Механизм партионного учета версии 2.2
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Запуск расчета партий.
//
// Параметры:
//	ПараметрыЗапуска - Структура с ключами
//		Дата - Дата - период расчета
//		МассивОрганизаций - СправочникСсылка.Организации - рассчитывать только по указанной организации;
//			также будут пересчитаны партии по организациям, связанным по схеме Интеркампани с указанной
//					- Массив - массив организаций, по которым надо рассчитать партии, другие организации не рассчитываются
//		СхемаРасчета - ТаблицаЗначений - (см. РасчетСебестоимостиПрикладныеАлгоритмы.СхемаРасчетаПартий)
//			уже построенная схема расчета может быть получена из модуля ПартионныйУчет
//		МестоВызоваРасчета - Строка - откуда вызван расчет, для протокола
//		ВыполняетсяЗакрытиеМесяца - Булево - признак вызова расчета из механизма закрытия месяца
//	ПараметрыРасчета - Структура - параметры расчета, сформированные в вызывающем механизме.
//	ПараметрыОтладки - Структура - предназначена для переопределения одноименных свойств структуры ПараметрыРасчета.
//		Подробнее см. пояснения в коде РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьПараметрыРасчетаПартий() к параметру ПараметрыОтладки.
//
Процедура РассчитатьВсе(ПараметрыЗапуска, ПараметрыРасчета = Неопределено, ПараметрыОтладки = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыполняетсяЗакрытиеМесяца = ПараметрыЗапуска.Свойство("ВыполняетсяЗакрытиеМесяца");
	ИдентификаторРасчета = Новый УникальныйИдентификатор;
	
	Если ПараметрыЗапуска.Свойство("АвтоматическоеТестирование") И ПараметрыЗапуска.АвтоматическоеТестирование Тогда
		АвтоматическоеТестирование = Истина; // вызывается при тестировании
	Иначе
		АвтоматическоеТестирование = Ложь;
	КонецЕсли;
	
	Если РасчетСебестоимостиЛокализация.РассчитатьВсе(ПараметрыЗапуска.Дата, ПараметрыЗапуска.МассивОрганизаций, ВыполняетсяЗакрытиеМесяца, АвтоматическоеТестирование) Тогда
		Возврат;
	КонецЕсли;
	
	// Инициализируем параметры отладки.
	РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьПараметрыОтладки(ПараметрыОтладки, ПараметрыЗапуска);
	
	// Проверим, закончено ли обновление ИБ
	РасчетСебестоимостиПрикладныеАлгоритмы.ПроверитьБлокировкуДанныхПриОбновленииИБ(Ложь, Истина, ПараметрыОтладки);
	
	Если ПараметрыЗапуска.Свойство("АвтоматическоеТестирование") И ПараметрыЗапуска.АвтоматическоеТестирование Тогда
		АвтоматическоеТестирование = Истина; // вызывается при тестировании
	Иначе
		АвтоматическоеТестирование = Ложь;
	КонецЕсли;
	
	#Область СхемаРасчета

	// Определим по каким периодам и организациям требуется перерасчет
	Если ПараметрыЗапуска.Свойство("СхемаРасчета") Тогда
		
		СхемаРасчета = ПараметрыЗапуска.СхемаРасчета;
		
		Если ПараметрыЗапуска.Свойство("ВременныеТаблицы") Тогда
			ВременныеТаблицы = ПараметрыЗапуска.ВременныеТаблицы;
		Иначе
			ВременныеТаблицы = РасчетСебестоимостиПрикладныеАлгоритмы.СформироватьВТЗаданияДоРасчета(-1, Неопределено);
		КонецЕсли;
		
		НомерЗаданияДоРасчета = РегистрыСведений.ЗаданияКРасчетуСебестоимости.ПолучитьНомерЗадания();
		
	Иначе
		
		НомерЗаданияДоРасчета = РасчетСебестоимостиПрикладныеАлгоритмы.УвеличитьНомерЗаданияКРасчетуСебестоимости();
		
		НачатьТранзакцию();
		
		Попытка
			
			РасчетСебестоимостиПрикладныеАлгоритмы.ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета);
			
			СхемаРасчета = РасчетСебестоимостиПрикладныеАлгоритмы.СхемаРасчетаПартий(
				ПараметрыЗапуска.Дата,
				ПараметрыЗапуска.МассивОрганизаций);
				
			Если СхемаРасчета.Количество() > 0 Тогда
				ВременныеТаблицы = РасчетСебестоимостиПрикладныеАлгоритмы.СформироватьВТЗаданияДоРасчета(
					НомерЗаданияДоРасчета,
					СхемаРасчета[СхемаРасчета.Количество() - 1].Организации);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
		
	КонецЕсли;
	
	ВыполняетсяЗакрытиеМесяца = ПараметрыЗапуска.Свойство("ВыполняетсяЗакрытиеМесяца");
	
	ДатаПереходаНаПартионныйУчетВерсии22 = РасчетСебестоимостиПовтИсп.ДатаПереходаНаПартионныйУчетВерсии22();
	
	Если СхемаРасчета.Количество() > 0 И НачалоМесяца(СхемаРасчета[0].Дата) < ДатаПереходаНаПартионныйУчетВерсии22 Тогда
		
		// Некоторые периоды надо рассчитать в версии 2.1
		Для Каждого СтрокаСхемыРасчета Из СхемаРасчета Цикл
			Если КонецМесяца(СтрокаСхемыРасчета.Дата) + 1 = ДатаПереходаНаПартионныйУчетВерсии22 // последний месяц до перехода на ПУ 2.2
			 ИЛИ СтрокаСхемыРасчета = СхемаРасчета[СхемаРасчета.Количество() - 1] Тогда // последняя строка схемы расчета
				Прервать; // нашли строку схемы, по которую надо рассчитать партии в версии 2.1
			КонецЕсли;
		КонецЦикла;
		
		РасчетСебестоимостиЛокализация.РассчитатьВсе(СтрокаСхемыРасчета.Дата, СтрокаСхемыРасчета.Организации, ВыполняетсяЗакрытиеМесяца, АвтоматическоеТестирование);
		
		НомерЗаданияДоРасчета = РасчетСебестоимостиПрикладныеАлгоритмы.УвеличитьНомерЗаданияКРасчетуСебестоимости();
	
		НачатьТранзакцию();
		
		Попытка
			
			РасчетСебестоимостиПрикладныеАлгоритмы.ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета);
			
			// Обновим схему расчета
			СхемаРасчета = РасчетСебестоимостиПрикладныеАлгоритмы.СхемаРасчетаПартий(
				ПараметрыЗапуска.Дата,
				ПараметрыЗапуска.МассивОрганизаций);
			
			Если СхемаРасчета.Количество() > 0 Тогда
				ВременныеТаблицы = РасчетСебестоимостиПрикладныеАлгоритмы.СформироватьВТЗаданияДоРасчета(
					НомерЗаданияДоРасчета,
					СхемаРасчета[СхемаРасчета.Количество() - 1].Организации);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
		
	КонецЕсли;
	
	Если СхемаРасчета.Количество() = 0 Тогда
		// Расчет не требуется
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'За период ""%1"" по ""%2"" расчет партий версии 2.2 не требуется.'"),
			РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыЗапуска.Дата),
			РасчетСебестоимостиПрикладныеАлгоритмы.ПредставлениеОрганизаций(ПараметрыЗапуска.МассивОрганизаций, ", "));
		ЗаписьЖурналаРегистрации(
			РасчетСебестоимостиПрикладныеАлгоритмы.ИмяСобытияЖурналаРегистрации(
				Новый Структура("ЗапущенРасчетПартий", Истина),
				НСтр("ru='Расчет не требуется'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())),
			УровеньЖурналаРегистрации.Информация,,,
			Комментарий);
		Возврат;
	ИначеЕсли НачалоМесяца(СхемаРасчета[0].Дата) < ДатаПереходаНаПартионныйУчетВерсии22 Тогда
		// Расчет невозможен - по каким-то причинам не выполнен пересчет периодов в версии 2.1.
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'За период ""%1"" по ""%2"" расчет партий версии 2.2 невозможен - расчет партий версии 2.1 за предыдущие периоды выполнен с ошибками.'"),
			РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыЗапуска.Дата),
			РасчетСебестоимостиПрикладныеАлгоритмы.ПредставлениеОрганизаций(ПараметрыЗапуска.МассивОрганизаций, ", "));
		ЗаписьЖурналаРегистрации(
			РасчетСебестоимостиПрикладныеАлгоритмы.ИмяСобытияЖурналаРегистрации(
				Новый Структура("ЗапущенРасчетПартий", Истина),
				НСтр("ru='Расчет невозможен'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())),
			УровеньЖурналаРегистрации.Ошибка,,,
			Комментарий);
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	// Запомним состояние активности текущих итогов у обслуживаемых регистров
	СостояниеИтоговРегистров = РасчетСебестоимостиПрикладныеАлгоритмы.СостояниеИтоговРегистров();
	
	Для Каждого СтрокаСхемыРасчета Из СхемаРасчета Цикл
		
		Если НЕ ВыполняетсяЗакрытиеМесяца Тогда
			// Выполним операции механизма закрытия месяца, вызываемые до расчета этапа, если расчет вызван не в рамках закрытия месяца.
			// При закрытии месяца эти действия выполнит сам механизм закрытия месяца.
			Если НЕ РасчетСебестоимостиПрикладныеАлгоритмы.ВыполнитьОперацииЗакрытияМесяцаДляПодготовкиКРасчетуЭтапа(СтрокаСхемыРасчета, ИдентификаторРасчета) Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		// Инициализируем параметры расчета
		ПараметрыЗапускаРасчетаПериода = ИнициализироватьПараметрыЗапускаРасчетаПериода(СтрокаСхемыРасчета);
		
		ПараметрыЗапускаРасчетаПериода.Вставить("АвтоматическоеТестирование", АвтоматическоеТестирование);
		Если ПараметрыЗапуска.Свойство("МестоВызоваРасчета") Тогда
			ПараметрыЗапускаРасчетаПериода.Вставить("МестоВызоваРасчета", ПараметрыЗапуска.МестоВызоваРасчета);
		КонецЕсли;
		
		// Формирует временные таблицы:
		// - ВТУчетныеПолитикиОрганизаций (учетные политики рассчитываемых организаций)
		// - ВТУчетныеПолитикиПрошлогоПериода (аналогично, но за предыдущий месяц)
		// - ВТПравилаЗаполненияПоляТипЗаписи (правила проверки первичных записей регистра себестоимости)
		// - ВТОтборАналитикаПоПартнерам (ключи аналитики партнеров с рассчитываемыми организациями)
		// - ВТАналитикиУчетаПоПартнерамИзОтчетовДавальцам (ключи аналитики партнеров из документов "Отчет давальцу")
		// - ВТСтоимостьПартийТоваров (расширенный аналог регистра сведений СтоимостьТоваров с полями партий; пока пустая).
		РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьПараметрыРасчетаПартий(ПараметрыЗапускаРасчетаПериода, ПараметрыРасчета, ПараметрыОтладки);
		
		ПараметрыРасчета.Вставить("НомерЗаданияДоРасчета", 					НомерЗаданияДоРасчета);
		ПараметрыРасчета.Вставить("ИсходныеЗаданияКРасчетуСебестоимости", 	ВременныеТаблицы);
		ПараметрыРасчета.Вставить("ИдентификаторРасчетаДляЗакрытияМесяца", 	ИдентификаторРасчета);
		
		// Этап 0 - подготовка к расчету
		// - исправляет некорректные исходные данные
		// - выполняет проверку данных
		РасчетСебестоимостиПодготовкаДанных.ПодготовкаИсходныхДанныхКРасчету(ПараметрыРасчета);
		
		
		// Этап 8
		// Формирует движения по регистрам:
		// - СебестоимостьТоваров
		РасчетСебестоимостиЗаполнениеПартий.ЗаполнениеПартийВРегистреСебестоимостьТоваров(ПараметрыРасчета);
		
		
		// Этап 8а
		// Формирует движения по регистрам:
		// - ВыручкаИСебестоимостьПродаж
		РасчетСебестоимостиЗаполнениеПартий.ЗаполнениеПартийВРегистреВыручкаИСебестоимостьПродаж(ПараметрыРасчета);
		
		
		// Этап 9 (расчет предварительной стоимости)
		// Заполняет временные таблицы:
		// - ВТСтоимостьПартийТоваров
		// Формирует движения по регистрам:
		// - СтоимостьТоваров
		РасчетСебестоимостиКорректировкаСтоимости.РасчетСебестоимостиТоваров(ПараметрыРасчета, СтрокаСхемыРасчета, Истина);
		
		// Этап 10
		// Формирует движения по регистрам:
		// - СебестоимостьТоваров
		// - ПрочиеРасходы
		// - ПартииПрочихРасходов
		// - ДвиженияНоменклатураДоходыРасходы
		РасчетСебестоимостиПостатейныеЗатраты.РаспределениеДопРасходовМеждуПартиямиИТоварами(ПараметрыРасчета);
		
		// Этап 10.1
		// Формирует движения по регистрам:
		// - СебестоимостьТоваров
		// - ВыручкаИСебестоимостьПродаж
		// - ПрочиеРасходы
		Если ПараметрыРасчета.ФО.РаспределениеДопРасходовПоВыбывшимТоварам Тогда
			РасчетСебестоимостиПостатейныеЗатраты.СписаниеРасходовНаВыбытиеТоваровПрошлыхПериодов(ПараметрыРасчета);
		КонецЕсли;
		
		// Этап 11. Распределение партий НДС в локализованной версии.
		РасчетСебестоимостиЛокализация.РаспределениеПартийНДС(ПараметрыРасчета, СтрокаСхемыРасчета, 1);
		
		// Этап третьего предварительного расчета
		//   - для расчета доп расходов
		//   - для расчета упр. и регл. сумм с учетом включенного \ исключенного НДС
		// Заполняет временные таблицы:
		// - ВТСтоимостьПартийТоваров
		// Формирует движения по регистрам:
		// - СтоимостьТоваров
		РасчетСебестоимостиКорректировкаСтоимости.РасчетСебестоимостиТоваров(ПараметрыРасчета, СтрокаСхемыРасчета, Истина);
		
		
		// Этап 11.3. Распределение партий НДС в локализованной версии.
		РасчетСебестоимостиЛокализация.РаспределениеПартийНДС(ПараметрыРасчета, СтрокаСхемыРасчета, 2);
		
		// Этап 17 (расчет фактической себестоимости)
		// Перезаполняет временные таблицы:
		// - ВТСтоимостьПартийТоваров
		// Формирует движения по регистрам:
		// - см. РасчетСебестоимости.ИсходящиеДанныеМеханизма()
		РасчетСебестоимостиКорректировкаСтоимости.РасчетСебестоимостиТоваров(ПараметрыРасчета, СтрокаСхемыРасчета, Ложь);
		
		// Записываем сформированные движения и завершаем расчет периода
		РасчетСебестоимостиПрикладныеАлгоритмы.ЗаписатьСформированныеДвижения(
			ПараметрыРасчета,
			ПараметрыОтладки.ПротоколыРасчета);
		
		Если НЕ ВыполняетсяЗакрытиеМесяца Тогда
			// Выполним операции механизма закрытия месяца, вызываемые после расчета этапа, если расчет вызван не в рамках закрытия месяца.
			// При закрытии месяца эти действия выполнит сам механизм закрытия месяца.
			РасчетСебестоимостиПрикладныеАлгоритмы.ВыполнитьОперацииЗакрытияМесяцаДляЗавершенияРасчетаЭтапа(СтрокаСхемыРасчета, ИдентификаторРасчета);
		КонецЕсли;
		
	КонецЦикла;
	
	// Вернем признак активности текущих итогов в состояние, которое было до начала расчета.
	РасчетСебестоимостиПрикладныеАлгоритмы.ВернутьСостояниеИтоговРегистров(СостояниеИтоговРегистров);
	
КонецПроцедуры

// Обертка для запуска расчета - выполняет расчет в Попытке - Исключении
// Параметры аналогичны процедуре РассчитатьВсе().
//
// Возвращаемое значение:
//	Булево - признак успешного выполнения расчета.
//
Функция РассчитатьВсеВПопыткеИсключении(ПараметрыЗапуска, ПараметрыРасчета = Неопределено, ПараметрыОтладки = Неопределено) Экспорт
	
	Отказ = Ложь;
	
	Попытка
		РассчитатьВсе(ПараметрыЗапуска,	ПараметрыРасчета, ПараметрыОтладки);
	Исключение
		
		Если НЕ ЗначениеЗаполнено(ПараметрыРасчета) Тогда
			ПараметрыРасчета = РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОсновныеПараметрыРасчета(
				ПараметрыЗапуска.Дата,
				ПараметрыЗапуска.МассивОрганизаций,
				Истина,
				Истина);
		КонецЕсли;
		
		// Если расчет завершился аварийно, то надо сбросить признак выполнения расчета.
		Если ПараметрыРасчета.Свойство("ИдентификаторРасчетаДляЗакрытияМесяца") Тогда
			РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.УстановитьПризнакОкончанияРасчета(ПараметрыРасчета.ИдентификаторРасчетаДляЗакрытияМесяца);
		КонецЕсли;
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		РасчетСебестоимостиПрикладныеАлгоритмы.ОбработатьИсключениеВызоваРассчитатьВсе(
			ПараметрыРасчета,
			ИнформацияОбОшибке,
			Отказ);
		
	КонецПопытки;
	
	Возврат НЕ Отказ;
	
КонецФункции

// Запускает расчет в фоновом задании.
// 
// Параметры:
//	Период - Дата - период расчета
//	Организация - СправочникСсылка.Организации - организация, для которой выполняется расчет.
//
// Возвращаемое значение:
//	Булево - признак успешного запуска фонового задания.
//
Функция РассчитатьФоновымЗаданием(Период, Организация = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено
	 ИЛИ ФоновоеЗаданиеАктивно() Тогда
		Возврат Ложь; // расчет не запускался
	КонецЕсли;
	
	НаименованиеЗадания = НСтр("ru = 'Расчет партий и себестоимости'");
	
	ПараметрыЗапуска = Новый Структура;
	ПараметрыЗапуска.Вставить("Дата", 					    Период);
	ПараметрыЗапуска.Вставить("МассивОрганизаций",  	    Организация);
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыЗапуска);
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить("РасчетСебестоимости.РассчитатьВсеВПопыткеИсключении");
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	Ключ = ИмяФоновогоЗадания();
	
	ФоновыеЗадания.Выполнить("ОбщегоНазначения.ВыполнитьМетодКонфигурации", ПараметрыЗадания, Ключ, НаименованиеЗадания);
	
	Возврат Истина; // расчет запущен
	
КонецФункции

// Возвращает имя фонового предопределенного задания расчета партий.
//
// Возвращаемое значение:
//	Строка - наименование фонового задания
//
Функция ИмяФоновогоЗадания() Экспорт
	Возврат "ПартионныйУчет";
КонецФункции

// Выполняет проверку на активное задание расчета партий.
//
// Возвращаемое значение:
//	Булево - признак активности фонового задания
//
Функция ФоновоеЗаданиеАктивно() Экспорт
	
	КлючЗадания = ИмяФоновогоЗадания();
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", КлючЗадания);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если АктивныеЗадания.Количество() > 0 Тогда
		ФоновоеЗаданиеАктивно = Истина;
	Иначе
		ФоновоеЗаданиеАктивно = Ложь;
	КонецЕсли;
	
	Возврат ФоновоеЗаданиеАктивно;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Инициализация

// Инициализирует параметры запуска расчета периода.
//
Функция ИнициализироватьПараметрыЗапускаРасчетаПериода(СтрокаСхемыРасчета)
	
	ПараметрыЗапускаРасчетаПериода = Новый Структура;
	ПараметрыЗапускаРасчетаПериода.Вставить("Дата", 			   СтрокаСхемыРасчета.Дата);
	ПараметрыЗапускаРасчетаПериода.Вставить("МассивОрганизаций",  СтрокаСхемыРасчета.Организации);
	ПараметрыЗапускаРасчетаПериода.Вставить("ИзмененоДокументов", СтрокаСхемыРасчета.ИзмененоДокументов);
	
	Возврат ПараметрыЗапускаРасчетаПериода;
	
КонецФункции

#КонецОбласти

#Область УниверсальныеПроцедурыРаботыСДвижениями

// Для вызова из механизма партионного учета версии 2.2

// Добавляет новую строку в таблицу движений указанного регистра и заполняет служебные поля.
// Сделана экспортной для вызова из модуля универсальных механизмов расчетов.
//
Функция ДобавитьЗаписьВТаблицуДвижений(ПараметрыРасчета, ТаблицаПриемник, ДанныеДвижения,
			КопируемыеПоля = Неопределено, СлужебныеПоля = Неопределено) Экспорт
	
	Если ПараметрыРасчета.Движения.Свойство(ТаблицаПриемник) Тогда
		ОписаниеПриемника = ПараметрыРасчета.Движения[ТаблицаПриемник];
		ЭтоРегистрСебестоимости = (ОписаниеПриемника.ИмяРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя);
	Иначе
		ОписаниеПриемника = ПараметрыРасчета.ВспомогательныеВременныеТаблицы[ТаблицаПриемник];
	КонецЕсли;
	
	// Добавим запись универсальной процедурой, а потом дозаполним поля, относящиеся только к расчету партий.
	Запись = РасчетСебестоимостиПрикладныеАлгоритмы.ДобавитьЗаписьВТаблицуДвижений(
		ПараметрыРасчета,
		ОписаниеПриемника,
		ДанныеДвижения,
		КопируемыеПоля);
	
	Если ОписаниеПриемника.ЭтоОписаниеРегистра И ОписаниеПриемника.ЕстьРасчетНеЗавершен И ЗначениеЗаполнено(СлужебныеПоля) Тогда
		
		// Поле РасчетНеЗавершен формируется в РасчетСебестоимостиПрикладныеАлгоритмы.КэшироватьРаспределенныеПартии().
		ЗаполнитьЗначенияСвойств(Запись, СлужебныеПоля);
		
	КонецЕсли;
	
	Если ОписаниеПриемника.ЭтоОписаниеРегистра И ЭтоРегистрСебестоимости И ПараметрыРасчета.ЗаполняютсяПартииВСебестоимости Тогда
		
		// Заполним поле РасчетПартий для записи регистра СебестоимостьТоваров:
		// - на этапе заполнения партий себестоимости дозаполняются поля первичных движений документов
		//   для таких движений признак РасчетПартий остается равным Ложь
		// - на этом же этапе также формируются новые записи, которые являются расчетными (не первичными);
		//	 признак расчетной партии определяется следующими условиями (по ИЛИ)
		// 		= тип записи движений не используется в макете регистра себестоимости (т.е. движение точно не может быть первичным)
		// 		= для записи явно указано, что она является расчетной (установлен признак ЭтоТочноРасчетноеДвижение).
		
		Запись.РасчетПартий =
			ДанныеДвижения.ЭтоТочноРасчетноеДвижение
			ИЛИ РасчетСебестоимостиПовтИсп.ЭтоТолькоРасчетныйТипЗаписи(Запись.ТипЗаписи);
		
	КонецЕсли;
	
	// Если регистратор не заполнен, то запомним информацию об ошибке
	Если ОписаниеПриемника.ЭтоОписаниеРегистра И НЕ ЗначениеЗаполнено(Запись.Регистратор) Тогда
		
		Если НЕ ЗначениеЗаполнено(ДанныеДвижения.Регистратор) Тогда
			// Ошибка в запросах - не заполнено обязательное поле Регистратор.
			ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнено свойство Регистратор в данных для формирования движений по регистру ""%1""'"),
				ТаблицаПриемник);
		Иначе
			// Ошибка в метаданных - документ не является регистратором для данного регистра.
			ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документ ""%1"" не может иметь движений по регистру ""%2""'"),
				СокрЛП(ДанныеДвижения.Регистратор),
				ТаблицаПриемник);
		КонецЕсли;
		
		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
			ПараметрыРасчета,
			Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаФормированияДвиженийПоРегистрам,
			ТекстДляПротокола);
		
		Если ОписаниеПриемника.ЕстьОрганизация Тогда
			ОрганизацияСПроблемой = ДанныеДвижения.Организация;
		ИначеЕсли ОписаниеПриемника.ЕстьАналитикаПартнеров Тогда
			ОрганизацияСПроблемой = ПараметрыРасчета.ОрганизацияПоАналитикеПартнеров.Получить(ДанныеДвижения.АналитикаУчетаПоПартнерам);
		Иначе
			ОрганизацияСПроблемой = Неопределено;
		КонецЕсли;
		
		РасчетСебестоимостиПрикладныеАлгоритмы.ЗарегистрироватьПроблемуВыполненияРасчета(
			ПараметрыРасчета,
			ОрганизацияСПроблемой,
			НСтр("ru='При формировании движений диагностированы ошибки'"),
			ТекстДляПротокола,
			ДанныеДвижения.Регистратор);
		
	КонецЕсли;
	
	Возврат Запись;
	
КонецФункции

#КонецОбласти

#Область УниверсальныеПроцедурыОписанияДанныхМеханизма

// Возвращает перечень объектов метаданных, на основании данных которых выполняется расчет партий.
// В перечень не включаются объекты, которые являются одновременно и исходящими данными механизмов расчета партий и себестоимости.
//
// Параметры:
//	ВходящиеДанные - Соответствие - уже инициализированное хранилище для описания входящих данных
//	ТолькоТребующиеПерерасчета - Булево - если установлен, то будет возвращен перечень только тех данных,
//		изменение которых влечет за собой необходимость перерасчета партий и себестоимости
//		При изменении этих данных должна создаваться запись в регистре сведений ЗаданияКРасчетуСебестоимости.
//
// Возвращаемое значение:
//	Соответствие - Ключ - ОбъектМетаданных.
//
Функция ВходящиеДанныеМеханизма(ВходящиеДанные = Неопределено, ТолькоТребующиеПерерасчета = Ложь) Экспорт
	
	Если ВходящиеДанные = Неопределено Тогда
		ВходящиеДанные = Новый Соответствие;
	КонецЕсли;
	
	Если ТолькоТребующиеПерерасчета Тогда
		Значение = Истина; // чтобы можно было проверить вхождение объекта метаданных в это соответствие
	Иначе
		Значение = Неопределено;
	КонецЕсли;
	
	Если НЕ ТолькоТребующиеПерерасчета Тогда 
		
		ВходящиеДанные.Вставить(Метаданные.Документы.ЗаказНаПеремещение, Значение);
		ВходящиеДанные.Вставить(Метаданные.Документы.ЗаказНаСборку, Значение);
		ВходящиеДанные.Вставить(Метаданные.Документы.ЗаказПоставщику, Значение);
		
		ВходящиеДанные.Вставить(Метаданные.Документы.ВнутреннееПотреблениеТоваров, Значение);
		ВходящиеДанные.Вставить(Метаданные.Документы.ПередачаТоваровМеждуОрганизациями, Значение);
		ВходящиеДанные.Вставить(Метаданные.Документы.ПриобретениеТоваровУслуг, Значение);
		ВходящиеДанные.Вставить(Метаданные.Документы.ПрочееОприходованиеТоваров, Значение);
		ВходящиеДанные.Вставить(Метаданные.Документы.ТаможеннаяДекларацияИмпорт, Значение);
		
		
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.АналитикаУчетаНоменклатуры, Значение);
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ЦеныНоменклатуры, Значение);
		
		
		ВходящиеДанные.Вставить(Метаданные.ПланыВидовХарактеристик.СтатьиАктивовПассивов, Значение);
		ВходящиеДанные.Вставить(Метаданные.ПланыВидовХарактеристик.СтатьиРасходов, Значение);
		
		ВходящиеДанные.Вставить(Метаданные.Справочники.ВидыЗапасов, Значение);
		ВходящиеДанные.Вставить(Метаданные.Справочники.КлючиАналитикиУчетаНоменклатуры, Значение);
		ВходящиеДанные.Вставить(Метаданные.Справочники.КлючиАналитикиУчетаПартий, Значение);
		ВходящиеДанные.Вставить(Метаданные.Справочники.Назначения, Значение);
		ВходящиеДанные.Вставить(Метаданные.Справочники.Номенклатура, Значение);
		ВходящиеДанные.Вставить(Метаданные.Справочники.Склады, Значение);
		ВходящиеДанные.Вставить(Метаданные.Справочники.СтруктураПредприятия, Значение);
		
		
	КонецЕсли;
	
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ЗаказыНаПеремещение, Значение);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ЗаказыНаСборку, Значение);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ЗаказыПоставщикам, Значение);
	
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПартииПрочихРасходов, Значение);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПрочиеРасходы, Значение);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.СебестоимостьТоваров, Значение);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ТоварыОрганизаций, Значение);
	
	
	РасчетСебестоимостиЛокализация.ВходящиеДанныеМеханизма(ВходящиеДанные, ТолькоТребующиеПерерасчета);
	
	Возврат ВходящиеДанные;
	
КонецФункции

// Возвращает перечень регистров, обслуживаемых механизмом расчета партий.
//
// Возвращаемое значение:
//	Соответствие - Ключ - ОбъектМетаданных.
//
Функция ИсходящиеДанныеМеханизма(ИсходящиеДанные = Неопределено) Экспорт
	
	// Перечень метаданных регистров, по которым формируются движения по партиям.
	Если ИсходящиеДанные = Неопределено Тогда
		ИсходящиеДанные = Новый Соответствие;
	КонецЕсли;
	
	ИсходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы,		Истина);
	ИсходящиеДанные.Вставить(Метаданные.РегистрыНакопления.МатериалыИРаботыВПроизводстве, 			Истина);
	ИсходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПартииПрочихРасходов, 					Истина);
	ИсходящиеДанные.Вставить(Метаданные.РегистрыНакопления.СебестоимостьТоваров, 					Истина);
	ИсходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж, 			Истина);
	ИсходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПрочиеРасходы, 							Истина);
	
	РасчетСебестоимостиЛокализация.ИсходящиеДанныеМеханизма(ИсходящиеДанные);
	
	Возврат ИсходящиеДанные;
	
КонецФункции

// Возвращает название данного механизма и его номер версии.
//
Функция ТекущаяВерсияМеханизма() Экспорт
	Возврат НСтр("ru='Партионный учет, версия 2.2'");
КонецФункции

#КонецОбласти

#Область Тестирование

Функция ТестТекстОписание(ИмяМетода) Экспорт
	
	Если ИмяМетода = "ТекстОписаниеСебестоимостьТоваров" Тогда
	    Возврат РасчетСебестоимостиЗаполнениеПартий.ТекстОписаниеДанныхДляПартийТоваров();
	ИначеЕсли ИмяМетода = "ТекстОписаниеПартийПрочих" Тогда
		Возврат РасчетСебестоимостиПостатейныеЗатраты.ТекстОписаниеДанныхДляПартийПрочих();
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ТестДанныеДляПартий(ИмяМетода, НачалоПериода, КонецПериода, Организация = Неопределено) Экспорт
	Перем ПараметрыРасчета;
	Перем ПараметрыОтладки;
	Перем Таблица;
	
	// Инициализация параметров запуска
	МассивОрганизаций = РасчетСебестоимостиПрикладныеАлгоритмы.СвязиОрганизацийПоСхемеИнтеркампани(КонецПериода, Организация);
	ПараметрыЗапуска = Новый Структура("Дата, МассивОрганизаций", НачалоПериода, МассивОрганизаций);
	
	// Инициализация параметров отладки
	Отладка = Новый Структура("РасчетОдногоЭтапа", Ложь);
	ПараметрыОтладки = Новый Структура("Отладка, ПротоколыРасчета", Отладка);
	
	// Инициализация параметров расчета
	РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьПараметрыРасчетаПартий(ПараметрыЗапуска, ПараметрыРасчета, ПараметрыОтладки);
	
	// Получение контекстных данных
	Если ИмяМетода = "ДанныеДляПартийПрочих" Тогда
		РасчетСебестоимостиЗаполнениеПартий.ЗаполнениеПартийВРегистреСебестоимостьТоваров(ПараметрыРасчета);
		СтрокаСхемыРасчета = Новый Структура("Дата, Организации", НачалоПериода, МассивОрганизаций); 
		РасчетСебестоимостиКорректировкаСтоимости.РасчетСебестоимостиТоваров(ПараметрыРасчета, СтрокаСхемыРасчета, Истина);
		Таблица = РасчетСебестоимостиПостатейныеЗатраты.ПолучитьДанныеДляДопРасходов(ПараметрыРасчета);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если Таблица = Неопределено Тогда
		Таблица = РасчетСебестоимостиПрикладныеАлгоритмы.ВыгрузитьВременнуюТаблицу(ПараметрыРасчета, "Данные");
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

Процедура ЗагрузитьВоВременнуюТаблицу(ДанныеДляПартий, ПараметрыРасчета)
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ
	|	Данные
	|ИЗ
	|	&ДанныеДляПартий КАК ДД
	|ИНДЕКСИРОВАТЬ ПО
	|	ДД.К
	|");
	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДанныеДляПартий", ДанныеДляПартий);
	Запрос.Выполнить();
КонецПроцедуры

Функция ВыгрузитьИзВременнойТаблицы(МВТ)
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	Данные КАК ДД
	|");
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ТестРасчетныеПартии(ИмяМетода, НачалоПериода, КонецПериода, Организация, ДанныеДляПартий, ВнутренниеДанные = Неопределено) Экспорт
	Перем ПараметрыРасчета;
	Перем ПараметрыОтладки;
	
	// Инициализация параметров запуска
	МассивОрганизаций = РасчетСебестоимостиПрикладныеАлгоритмы.СвязиОрганизацийПоСхемеИнтеркампани(КонецПериода, Организация);
	ПараметрыЗапуска = Новый Структура("Дата, МассивОрганизаций", НачалоПериода, МассивОрганизаций);
	
	// Инициализация параметров отладки
	Отладка = Новый Структура("РасчетОдногоЭтапа", Истина);
	ПараметрыОтладки = Новый Структура("Отладка", Отладка);
	
	// Инициализация параметров расчета
	РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьПараметрыРасчетаПартий(ПараметрыЗапуска, ПараметрыРасчета, ПараметрыОтладки);
	
	ЗагрузитьВоВременнуюТаблицу(ДанныеДляПартий, ПараметрыРасчета);
	
	Если ИмяМетода = "РасчетныеПартииПрочих" Тогда
		РасчетныеПартии = РасчетСебестоимостиПостатейныеЗатраты.СформироватьПартииПрочихРасходов(ПараметрыРасчета, ДанныеДляПартий);
		Возврат РасчетныеПартии;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	// Все данные из РасчетныеПартии будут не только помещаться в таблицы регистров, но и накапливаться в ВсеРасчетныеПартии.
	// Если этого не делать, то в РасчетныеПартии по окончании расчета будет только последняя порция данных (в больших или в клиент-серверных базах).
	ПараметрыРасчета.РаспределениеПартий.Вставить(
		"ВсеРасчетныеПартии",
		ПараметрыРасчета.РаспределениеПартий.РасчетныеПартии.Скопировать());
	
	//ПостроитьЦепочкиДвижений(ПараметрыРасчета);
	//РассчитатьПартииПоЦепочкам(ПараметрыРасчета);
	
	РасчетСебестоимостиПрикладныеАлгоритмы.КэшироватьРаспределенныеПартии(ПараметрыРасчета, Ложь);
	
	ВнутренниеДанные = ПараметрыРасчета.МенеджерВременныхТаблиц;
	ДанныеДляПартий = ВыгрузитьИзВременнойТаблицы(ВнутренниеДанные);
	
	Возврат ПараметрыРасчета.РаспределениеПартий.ВсеРасчетныеПартии;
	
КонецФункции

Функция ЭтапыСРаспределениемПартий() Экспорт
	
	СписокЭтапов = Новый СписокЗначений;
	
	РасчетСебестоимостиЗаполнениеПартий.ДополнитьЭтапыСРаспределениемПартий(СписокЭтапов);
	РасчетСебестоимостиПостатейныеЗатраты.ДополнитьЭтапыСРаспределениемПартий(СписокЭтапов);
	РасчетСебестоимостиЛокализация.ДополнитьЭтапыСРаспределениемПартий(СписокЭтапов);
	
	Возврат СписокЭтапов;
	
КонецФункции

Функция ЭтапыСТрансляциейПартий() Экспорт
	
	СписокЭтапов = Новый СписокЗначений;
	
	РасчетСебестоимостиЗаполнениеПартий.ДополнитьЭтапыСТрансляциейПартий(СписокЭтапов);
	РасчетСебестоимостиПостатейныеЗатраты.ДополнитьЭтапыСТрансляциейПартий(СписокЭтапов);
	РасчетСебестоимостиЛокализация.ДополнитьЭтапыСТрансляциейПартий(СписокЭтапов);
	
	Возврат СписокЭтапов;
	
КонецФункции

Функция ТекстЗапросаДляРасчетаЭтапа(ИмяЭтапа, ПараметрыРасчета = Неопределено) Экспорт
	
	ТекстЗапроса = "";
	РасчетСебестоимостиЗаполнениеПартий.ТекстЗапросаДляРасчетаЭтапа(ИмяЭтапа, ПараметрыРасчета, ТекстЗапроса);
	РасчетСебестоимостиПостатейныеЗатраты.ТекстЗапросаДляРасчетаЭтапа(ИмяЭтапа, ПараметрыРасчета, ТекстЗапроса);
	РасчетСебестоимостиЛокализация.ТекстЗапросаДляРасчетаЭтапа(ИмяЭтапа, ПараметрыРасчета, ТекстЗапроса);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти