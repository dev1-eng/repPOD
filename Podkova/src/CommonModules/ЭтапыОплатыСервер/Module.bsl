
////////////////////////////////////////////////////////////////////////////////
// Модуль "ЭтапыОплатыСервер" содержит процедуры и функции для 
// работы с механизмом этапов оплаты,
// в первую очередь заполнение этапов оплаты различных объектов.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ЗаполнениеЭтаповОплаты

// Возвращает структуру с параметрами выбора реквизитов оплаты для передачи во внешние формы.
//
// Параметры:
// 		ОбъектМетаданных - ОбъектМетаданных - объект метаданных, по которому нужно определить параметры.
//
// Возвращаемое значение:
// 		Структура - использует в качестве ключа имя реквизита оплаты, а в значении содержит фиксированный массив с параметрами выбора.
//
Функция ПараметрыВыбораРеквизитовОплаты(ОбъектМетаданных) Экспорт
	
	РеквизитыОбъекта = ОбъектМетаданных.Реквизиты;
	ПараметрыВыбораРеквизитов = Новый Структура;
	
	ПараметрыВыбораРеквизитов.Вставить("ФормаОплаты", РеквизитыОбъекта.ФормаОплаты.ПараметрыВыбора);
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Касса", ОбъектМетаданных) Тогда
		ПараметрыВыбораРеквизитов.Вставить("Касса", РеквизитыОбъекта.Касса.ПараметрыВыбора);
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("БанковскийСчет", ОбъектМетаданных) Тогда
		ПараметрыВыбораРеквизитов.Вставить("БанковскийСчет", РеквизитыОбъекта.БанковскийСчет.ПараметрыВыбора);
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("БанковскийСчетОрганизации", ОбъектМетаданных) Тогда
		ПараметрыВыбораРеквизитов.Вставить("БанковскийСчет", РеквизитыОбъекта.БанковскийСчетОрганизации.ПараметрыВыбора);
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ГрафикОплаты", ОбъектМетаданных) Тогда
		ПараметрыВыбораРеквизитов.Вставить("ГрафикОплаты", РеквизитыОбъекта.ГрафикОплаты.ПараметрыВыбора);
	КонецЕсли;
	
	Возврат ПараметрыВыбораРеквизитов;
	
КонецФункции

//Возращает минимальную дату неоплаченного этапа графика исполнения договора.
//
// Параметры:
//
// 		ГрафикИсполненияДоговора - ДокументСсылка.ГрафикИсполненияДоговора - график договора.
// 		Дата - Дата - дата документа.
//
// Возвращаемое значение:
// 		Дата - Минимальная дата неоплаченного этапа графика.
Функция ДатаПервогоНеоплаченногоЭтапаГрафика(ГрафикИсполненияДоговора, Дата) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") И ЗначениеЗаполнено(ГрафикИсполненияДоговора) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ 
		|	МИНИМУМ(ПлановыеОплаты.ДатаПлановогоПогашения) КАК ДатаПлановогоПогашения
		|ИЗ
		|	(ВЫБРАТЬ
		|		РасчетыСКлиентамиПланОплатОстатки.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения
		|	ИЗ
		|		РегистрНакопления.РасчетыСКлиентамиПланОплат.Остатки КАК РасчетыСКлиентамиПланОплатОстатки
		|	ГДЕ
		|		РасчетыСКлиентамиПланОплатОстатки.ДокументПлан = &ДокументПлан
		|		И РасчетыСКлиентамиПланОплатОстатки.ДатаПлановогоПогашения >= &ДатаДокумента
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РасчетыСПоставщикамиПланОплат.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения
		|	ИЗ
		|		РегистрНакопления.РасчетыСПоставщикамиПланОплат.Остатки КАК РасчетыСПоставщикамиПланОплат
		|	ГДЕ
		|		РасчетыСПоставщикамиПланОплат.ДокументПлан = &ДокументПлан
		|		И РасчетыСПоставщикамиПланОплат.ДатаПлановогоПогашения >= &ДатаДокумента) КАК ПлановыеОплаты";
		Запрос.УстановитьПараметр("ДокументПлан", ГрафикИсполненияДоговора);
		Запрос.УстановитьПараметр("ДатаДокумента", Дата);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.ДатаПлановогоПогашения;
		Иначе
			Возврат Дата;
		КонецЕсли;
	Иначе
		Возврат Дата;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеДокументовПродажи

// Заполняет этапы графика оплаты или распределяет уже заполненную сумму в документах продажи.
//
// Параметры:
//
// 		Объект - ДокументОбъект - документ, для которого заполняются этапы графика оплаты
// 		ГрафикСоглашенияЗаполнен - Булево - флаг возможности заполнения по графику указанном в соглашении
// 		ГрафикЗаполнен - Булево - флаг возможности заполнения по шаблону графика оплаты, указанном в документе
// 		СуммаОплаты - Число - сумма, распределяющаяся по этапам графика оплаты (без залога за тару)
// 		СуммаЗалога - Число - сумма залога, распределяющаяся по этапам графика оплаты
// 		ЗаполнятьФормуОплаты - Булево - признак, указывающий на необходимость заполнения формы оплаты из соглашения или графика
// 		ЗаполнятьСНулевойСуммой - Булево - признак, позволяющий заполнить этапы, если не задана суммы к распределению.
//
Процедура ЗаполнитьЭтапыОплатыДокументаПродажи(Объект, ГрафикСоглашенияЗаполнен, ГрафикЗаполнен, СуммаОплаты,
	СуммаЗалога = 0, ЗаполнятьФормуОплаты = Ложь, ЗаполнятьСНулевойСуммой = Ложь, ТолькоРаспределять = Ложь) Экспорт
	
	Если ТолькоРаспределять И Объект.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
		ЭтапыОплатыКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(
			Объект.ЭтапыГрафикаОплаты,
			СуммаОплаты,
			СуммаЗалога);
	ИначеЕсли ГрафикСоглашенияЗаполнен Тогда
		ЗаполнитьЭтапыОплатыДокументаПродажиПоСоглашению(
			Объект,
			СуммаОплаты,
			СуммаЗалога,
			ЗаполнятьФормуОплаты,
			ЗаполнятьСНулевойСуммой);
	ИначеЕсли ГрафикЗаполнен Тогда
		ЗаполнитьЭтапыОплатыДокументаПродажиПоГрафикуОплаты(
			Объект,
			СуммаОплаты,
			СуммаЗалога,
			ЗаполнятьФормуОплаты,
			ЗаполнятьСНулевойСуммой);
	ИначеЕсли Объект.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
		ЭтапыОплатыКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(
			Объект.ЭтапыГрафикаОплаты,
			СуммаОплаты,
			СуммаЗалога);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет этапы графика оплаты в документе продажи по графику указанном в соглашении.
//
// Параметры:
// 		Объект - ДокументОбъект - документ, в котором необходимо заполнить этапы оплаты
// 		СуммаКРаспределениюОплаты - Число, сумма платежей, распределяющаяся по этапам графика оплаты
// 		СуммаКРаспределениюЗалога - Число, сумма залога за тару, распределяющаяся по этапам графика оплаты
// 		ЗаполнятьФормуОплаты - Булево - признак, указывающий на необходимость заполнения формы оплаты
// 			в документе формой оплаты по графику, указанной в соглашении.
//
Процедура ЗаполнитьЭтапыОплатыДокументаПродажиПоСоглашению(Объект,
	                                              Знач СуммаКРаспределениюОплаты,
	                                              Знач СуммаКРаспределениюЗалога = 0,
	                                              ЗаполнятьФормуОплаты = Ложь,
	                                              ЗаполнятьСНулевойСуммой = Ложь) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СоглашенияСКлиентамиЭтапыГрафикаОплаты.НомерСтроки КАК НомерСтроки,
	|	СоглашенияСКлиентамиЭтапыГрафикаОплаты.ВариантОплаты КАК ВариантОплаты,
	|	СоглашенияСКлиентамиЭтапыГрафикаОплаты.Сдвиг КАК Сдвиг,
	|	СоглашенияСКлиентамиЭтапыГрафикаОплаты.ПроцентПлатежа КАК ПроцентПлатежа,
	|	СоглашенияСКлиентамиЭтапыГрафикаОплаты.ПроцентЗалогаЗаТару КАК ПроцентЗалогаЗаТару,
	|	СоглашенияСКлиентамиЭтапыГрафикаОплаты.Ссылка.ФормаОплаты КАК ФормаОплаты,
	|	СоглашенияСКлиентамиЭтапыГрафикаОплаты.Ссылка.Календарь КАК Календарь
	|ИЗ
	|	Справочник.СоглашенияСКлиентами.ЭтапыГрафикаОплаты КАК СоглашенияСКлиентамиЭтапыГрафикаОплаты
	|ГДЕ
	|	СоглашенияСКлиентамиЭтапыГрафикаОплаты.Ссылка = &Соглашение
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
		
	Запрос.УстановитьПараметр("Соглашение", Объект.Соглашение);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка         = РезультатЗапроса.Выгрузить();
	
	Если (СуммаКРаспределениюОплаты = 0 И СуммаКРаспределениюЗалога = 0 И НЕ ЗаполнятьСНулевойСуммой)
		ИЛИ Выгрузка.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗаполнятьФормуОплаты Тогда
		
		ФормаОплаты = Выгрузка[0].ФормаОплаты;
		
		Если ЗначениеЗаполнено(ФормаОплаты) И Объект.ФормаОплаты <> ФормаОплаты Тогда
			Объект.ФормаОплаты = ФормаОплаты;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЭтапыОплатыДокументаПродажиПоШаблону(Объект,
		СуммаКРаспределениюОплаты,
		СуммаКРаспределениюЗалога,
		Выгрузка,
		Выгрузка[0].Календарь);
	
КонецПроцедуры

// Заполняет авансовые этапы графика оплаты в документе ЗаказКлиента
//
// Параметры:
//
// 		Объект - ДокументОбъект - документ, в котором необходимо заполнить этапы оплаты
// 		СуммаКРаспределениюОплаты - Число - сумма документа, в котором необходимо осуществить проверку
// 		СуммаКРаспределениюЗалога - Число - сумма залога по документу, в котором необходимо осуществить проверку
// 		ЗаполнятьФормуОплаты - Булево - признак, указывающий на необходимость заполнения формы оплаты
// 			в документе формой оплаты по графику.
//
Процедура ЗаполнитьЭтапыОплатыДокументаПродажиПоГрафикуОплаты(Объект,
	                                  Знач СуммаКРаспределениюОплаты,
	                                  Знач СуммаКРаспределениюЗалога = 0,
	                                  ЗаполнятьФормуОплаты = Ложь,
	                                  ЗаполнятьСНулевойСуммой = Ложь) Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ГрафикиОплатыЭтапы.НомерСтроки         КАК НомерСтроки,
		|	ГрафикиОплатыЭтапы.ВариантОплаты       КАК ВариантОплаты,
		|	ГрафикиОплатыЭтапы.Сдвиг               КАК Сдвиг,
		|	ГрафикиОплатыЭтапы.ПроцентПлатежа      КАК ПроцентПлатежа,
		|	ГрафикиОплатыЭтапы.ПроцентЗалогаЗаТару КАК ПроцентЗалогаЗаТару,
		|	ГрафикиОплатыЭтапы.Ссылка.Календарь    КАК Календарь,
		|	ГрафикиОплатыЭтапы.Ссылка.ФормаОплаты  КАК ФормаОплаты
		|ИЗ
		|	Справочник.ГрафикиОплаты.Этапы КАК ГрафикиОплатыЭтапы
		|ГДЕ
		|	ГрафикиОплатыЭтапы.Ссылка = &ГрафикОплаты
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|");
		
	Запрос.УстановитьПараметр("ГрафикОплаты",Объект.ГрафикОплаты);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка         = РезультатЗапроса.Выгрузить();
	
	Если Выгрузка.Количество() = 0 Тогда
		
		Объект.ЭтапыГрафикаОплаты.Очистить();
		Возврат;
		
	КонецЕсли;
	
	Если ЗаполнятьФормуОплаты Тогда
		
		ФормаОплаты = Выгрузка[0].ФормаОплаты;
		
		Если ЗначениеЗаполнено(ФормаОплаты) И Объект.ФормаОплаты <> ФормаОплаты Тогда
			Объект.ФормаОплаты = ФормаОплаты;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СуммаКРаспределениюОплаты = 0 И СуммаКРаспределениюЗалога = 0 И Не ЗаполнятьСНулевойСуммой Тогда
		
		Объект.ЭтапыГрафикаОплаты.Очистить();
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьЭтапыОплатыДокументаПродажиПоШаблону(
		Объект,
		СуммаКРаспределениюОплаты,
		СуммаКРаспределениюЗалога,
		Выгрузка,
		Выгрузка[0].Календарь);
	
КонецПроцедуры

// Заполняет этапы графика оплаты в документе продажи по таблице значений
//
// Параметры:
//		Объект - ДокументОбъект - документ,  в котором необходимо заполнить этапы оплаты
//		СуммаКРаспределениюОплаты - Число, сумма платежей, распределяющаяся по этапам графика оплаты
//		СуммаКРаспределениюЗалога - Число, сумма залога за тару, распределяющаяся по этапам графика оплаты
//		ШаблонГрафика - ТаблицаЗначений, по которой необходимо заполнить этапы графика оплаты
//		Календарь - СправочникСсылка.Календари, по которому вычисляются даты.
//
Процедура ЗаполнитьЭтапыОплатыДокументаПродажиПоШаблону(Объект,
	                                           Знач СуммаКРаспределениюОплаты,
	                                           Знач СуммаКРаспределениюЗалога,
	                                           ШаблонГрафика,
	                                           Знач Календарь) Экспорт
	
	ЭтапыГрафикаОплаты = Новый ТаблицаЗначений();
	
	ЭтапыГрафикаОплаты.Колонки.Добавить("ВариантОплаты");
	ЭтапыГрафикаОплаты.Колонки.Добавить("ДатаПлатежа");
	ЭтапыГрафикаОплаты.Колонки.Добавить("ПроцентПлатежа");
	ЭтапыГрафикаОплаты.Колонки.Добавить("СуммаПлатежа");
	ЭтапыГрафикаОплаты.Колонки.Добавить("ПроцентЗалогаЗаТару");
	ЭтапыГрафикаОплаты.Колонки.Добавить("СуммаЗалогаЗаТару");
	ЭтапыГрафикаОплаты.Колонки.Добавить("Сдвиг");

	РаспределеннаяСуммаОплаты = 0;
	РаспределеннаяСуммаЗалога = 0;
	ТекущийЭтап               = 0;
	ОдинДень                  = 86400;
	
	КоличествоЭтапов = ШаблонГрафика.Количество();
	
	ДатаДокумента = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());
	ЖелаемаяДатаОтгрузки = ?(ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Объект, "ЖелаемаяДатаОтгрузки"), 
		Объект.ЖелаемаяДатаОтгрузки, Неопределено);
	НеОтгружатьЧастями = ?(ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Объект, "НеОтгружатьЧастями"),Объект.НеОтгружатьЧастями,Ложь);
	ДатаРеализации = ?(ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Объект, "ДатаОтгрузки") И НеОтгружатьЧастями, 
		Объект.ДатаОтгрузки, ЖелаемаяДатаОтгрузки);
	ДатаРеализации = ?(ЗначениеЗаполнено(ЖелаемаяДатаОтгрузки), ЖелаемаяДатаОтгрузки, ДатаРеализации);
	
	// Определим календарную дату для каждого этапа графика оплаты
	УчитыватьКалендарь = Ложь;
	
	Если ЗначениеЗаполнено(Календарь) Тогда
		
		УчитыватьКалендарь = Истина;
		
		СдвигиАвансовыхЭтапов = Новый Массив();
		СдвигиКредитныхЭтапов = Новый Массив();
		МассивДатПоКалендарю  = Новый Массив();
		
		Для Каждого Этап Из ШаблонГрафика Цикл
			
			Если Этап.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки Или
				Этап.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения Тогда
				СдвигиАвансовыхЭтапов.Добавить(Этап.Сдвиг);
			Иначе
				СдвигиКредитныхЭтапов.Добавить(Этап.Сдвиг);
			КонецЕсли;
			
		КонецЦикла;
		
		Если СдвигиАвансовыхЭтапов.Количество() > 0 Тогда
			
			МассивДатПоКалендарюАвансовыхЭтапов = КалендарныеГрафики.ДатыПоКалендарю(Календарь, ДатаДокумента, СдвигиАвансовыхЭтапов);
			
			Для Каждого ДатаПоКалендарю Из МассивДатПоКалендарюАвансовыхЭтапов Цикл
				МассивДатПоКалендарю.Добавить(ДатаПоКалендарю);
			КонецЦикла;
			
		КонецЕсли;
		
		Если СдвигиКредитныхЭтапов.Количество() > 0 Тогда
			
			Если Не ЗначениеЗаполнено(ДатаРеализации) Тогда
				
				Если СдвигиАвансовыхЭтапов.Количество() > 0 Тогда
					Если МассивДатПоКалендарюАвансовыхЭтапов.Количество() > 0 Тогда
						ДатаРеализации = МассивДатПоКалендарюАвансовыхЭтапов[МассивДатПоКалендарюАвансовыхЭтапов.Количество()-1];
					КонецЕсли;
				Иначе
					ДатаРеализации = ДатаДокумента;
				КонецЕсли;
				
			КонецЕсли;
			
			МассивДатПоКалендарюКредитныхЭтапов = КалендарныеГрафики.ДатыПоКалендарю(Календарь, ДатаРеализации, СдвигиКредитныхЭтапов);
			
			Для Каждого ДатаПоКалендарю Из МассивДатПоКалендарюКредитныхЭтапов Цикл
				МассивДатПоКалендарю.Добавить(ДатаПоКалендарю);
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		Если Не ЗначениеЗаполнено(ДатаРеализации) Тогда
			
			МаксСдвигАванса = 0;
		
			Для Каждого ТекЭтап Из ШаблонГрафика Цикл
				
				Если ТекЭтап.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки Или
					ТекЭтап.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения Тогда
					
					МаксСдвигАванса = Макс(МаксСдвигАванса, ТекЭтап.Сдвиг);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ДатаРеализации = ДатаДокумента + МаксСдвигАванса * ОдинДень;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Определим последний незалоговый этап
	ПоследнийНезалоговыйЭтап = КоличествоЭтапов;
	Пока ПоследнийНезалоговыйЭтап <> 0 И ШаблонГрафика[ПоследнийНезалоговыйЭтап-1].ПроцентПлатежа = 0 Цикл
		ПоследнийНезалоговыйЭтап = ПоследнийНезалоговыйЭтап - 1;
	КонецЦикла;
	
	// Определим последний залоговый этап
	ПоследнийЗалоговыйЭтап = КоличествоЭтапов;
	Пока ПоследнийЗалоговыйЭтап <> 0 И ШаблонГрафика[ПоследнийЗалоговыйЭтап-1].ПроцентЗалогаЗаТару = 0 Цикл
		ПоследнийЗалоговыйЭтап = ПоследнийЗалоговыйЭтап - 1;
	КонецЦикла;
	
	// Заполним этапы в соответствии с графиком оплаты
	Объект.ЭтапыГрафикаОплаты.Очистить();
	Для Каждого Этап Из ШаблонГрафика Цикл
		
		ТекущийЭтап                     = ТекущийЭтап + 1;
		ЭтапГрафикаОплаты               = ЭтапыГрафикаОплаты.Добавить();
		ЭтапГрафикаОплаты.ВариантОплаты = Этап.ВариантОплаты;
		
		Если УчитыватьКалендарь Тогда
			ДатаПлатежа = МассивДатПоКалендарю[ТекущийЭтап-1];
		Иначе
			ДатаПлатежа = ?(ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки
							ИЛИ ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.КредитСдвиг, ДатаРеализации, ДатаДокумента) + Этап.Сдвиг * ОдинДень;
		КонецЕсли;
		
		Если (ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки
			Или ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения)
			И ЗначениеЗаполнено(ЖелаемаяДатаОтгрузки)
			И ДатаПлатежа > ЖелаемаяДатаОтгрузки Тогда
			ДатаПлатежа = ЖелаемаяДатаОтгрузки;
		КонецЕсли;
		
		Если ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.КредитСдвиг Тогда
			ЭтапГрафикаОплаты.Сдвиг           = Этап.Сдвиг;
		КонецЕсли;
		
		ЭтапГрафикаОплаты.ДатаПлатежа         = ДатаПлатежа;
		ЭтапГрафикаОплаты.ПроцентПлатежа      = Этап.ПроцентПлатежа;
		СуммаОплатыПоЭтапу                    = Окр(СуммаКРаспределениюОплаты * Этап.ПроцентПлатежа / 100, 2, РежимОкругления.Окр15как20);
		ЭтапГрафикаОплаты.СуммаПлатежа        = ?(ТекущийЭтап = ПоследнийНезалоговыйЭтап, СуммаКРаспределениюОплаты - РаспределеннаяСуммаОплаты, СуммаОплатыПоЭтапу);
		РаспределеннаяСуммаОплаты             = РаспределеннаяСуммаОплаты + ЭтапГрафикаОплаты.СуммаПлатежа;
		ЭтапГрафикаОплаты.ПроцентЗалогаЗаТару = Этап.ПроцентЗалогаЗаТару;
		СуммаЗалогаПоЭтапу                    = Окр(СуммаКРаспределениюЗалога * Этап.ПроцентЗалогаЗаТару / 100, 2, РежимОкругления.Окр15как20);
		ЭтапГрафикаОплаты.СуммаЗалогаЗаТару   = ?(ТекущийЭтап = ПоследнийЗалоговыйЭтап, СуммаКРаспределениюЗалога - РаспределеннаяСуммаЗалога, СуммаЗалогаПоЭтапу);
		РаспределеннаяСуммаЗалога             = РаспределеннаяСуммаЗалога + ЭтапГрафикаОплаты.СуммаЗалогаЗаТару;
		
	КонецЦикла;
	
	ЭтапыГрафикаОплаты.Сортировать("ДатаПлатежа");
	Объект.ЭтапыГрафикаОплаты.Загрузить(ЭтапыГрафикаОплаты);

КонецПроцедуры

// Заполняет дату платежа по условиям из соглашения или подставляет текущую дату сеанса.
//
// Параметры:
//		Объект - ДокументОбъект - документ, в котором необходимо заполнить дату платежа
//		ГрафикОплаты - СправочникСсылка.ГрафикиОплаты - график оплаты из условий продаж,
//                     если не задан, то определяется в функции по соглашению документа
//		ПерезаполнитьДату - Булево - заполнить дату, в независимости, заполнена ли она.
//
Процедура ЗаполнитьДатуПлатежаПоУмолчанию(Объект, ГрафикОплаты = Неопределено, ПерезаполнитьДату = Ложь) Экспорт
	
	ДатаПлатежаДоЗаполнения = Объект.ДатаПлатежа;
	
	Если (Не ЗначениеЗаполнено(Объект.ДатаПлатежа) Или ПерезаполнитьДату)
		И ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		
		ГрафикСоглашенияЗаполнен = ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
		
		ИспользоватьГрафикиОплаты = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты");
		Если ГрафикСоглашенияЗаполнен Или Не ИспользоватьГрафикиОплаты Тогда
			ГрафикОплаты = Неопределено;
		ИначеЕсли Не ЗначениеЗаполнено(ГрафикОплаты) Тогда
			ГрафикОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "ГрафикОплаты")
		КонецЕсли;
		
		Объект.ДатаПлатежа = ПродажиСервер.ПолучитьПоследнююДатуПоГрафику(
			Объект.Дата,
			ГрафикОплаты,
			Объект.Соглашение
		);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаПлатежа) Тогда
		Если ПерезаполнитьДату Тогда
			Объект.ДатаПлатежа = ДатаПлатежаДоЗаполнения;
		Иначе
			Объект.ДатаПлатежа = ТекущаяДатаСеанса();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дату платежа по условиям из соглашения или подставляет текущую дату сеанса.
//
// Параметры:
//		Объект - ДокументОбъект - документ, в котором необходимо заполнить дату платежа
//		ГрафикОплаты - СправочникСсылка.ГрафикиОплаты - график оплаты из условий продаж,
//			если не задан, то определяется в функции по соглашению документа
//		ПерезаполнитьДату - Булево - заполнить дату, в независимости, заполнена ли она.
//
Процедура ЗаполнитьДатуПлатежаВЗакупкахПоУмолчанию(Объект, ГрафикОплаты = Неопределено, ПерезаполнитьДату = Ложь) Экспорт
	
	ДатаПлатежаДоЗаполнения = Объект.ДатаПлатежа;
	
	Если (Не ЗначениеЗаполнено(Объект.ДатаПлатежа) Или ПерезаполнитьДату)
		И ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками") И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		
		Объект.ДатаПлатежа = ЗакупкиСервер.ПолучитьПоследнююДатуПоГрафику(
			Объект.Дата,
			Объект.Соглашение);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаПлатежа) Тогда
		Если ПерезаполнитьДату Тогда
			Объект.ДатаПлатежа = ДатаПлатежаДоЗаполнения;
		Иначе
			Объект.ДатаПлатежа = ТекущаяДатаСеанса();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет заполнение и корректность даты платежа в документе.
//
// Параметры:
//		ДатаПлатежа - Дата - дата платежа проверяемого документа
//		ДатаДокумента - Дата - дата проверяемого документа 
//		Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьЗаполнениеКорректностьДатыПлатежа(ДатаПлатежа, ДатаДокумента, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаПлатежа) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Дата платежа"" не заполнено'"),
			,
			"ДатаПлатежа",
			"Объект",
			Отказ);
		
	ИначеЕсли ДатаПлатежа < НачалоДня(ДатаДокумента) Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Дата платежа должна быть не меньше даты документа %1'"),
			Формат(ДатаДокумента, "ДЛФ=DD"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			"ДатаПлатежа",
			"Объект",
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура распределяет сумму отклонения мерных товаров по этапам графика оплаты.
Процедура РаспределитьСуммуОтклоненияПоЭтапамГрафикаОплаты(ЭтапыГрафикаОплаты, Знач СуммаОтклоненияКРаспределению) Экспорт
	
	РаспределеннаяСуммаОтклонения = 0;
	ТекущийЭтап                   = 0;
	КоличествоЭтапов              = ЭтапыГрафикаОплаты.Количество();
	СуммаОтклоненияКРаспределению = СуммаОтклоненияКРаспределению + ЭтапыГрафикаОплаты.Итог("СуммаОтклоненияМерныхТоваров");
	
	Если СуммаОтклоненияКРаспределению = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СуммаОплатыВсего              = ЭтапыГрафикаОплаты.Итог("СуммаПлатежа")+ЭтапыГрафикаОплаты.Итог("СуммаЗалогаЗаТару");
	
	Для Каждого ЭтапГрафикаОплаты Из ЭтапыГрафикаОплаты Цикл
		
		ТекущийЭтап = ТекущийЭтап + 1;
		
		КоэффициентОтОбщего    = (ЭтапГрафикаОплаты.СуммаПлатежа + ЭтапГрафикаОплаты.СуммаЗалогаЗаТару)/СуммаОплатыВсего;
		СуммаОтклоненияПоЭтапу = Окр(СуммаОтклоненияКРаспределению * КоэффициентОтОбщего, 2, РежимОкругления.Окр15как20);
		
		ЭтапГрафикаОплаты.СуммаОтклоненияМерныхТоваров  = ?(ТекущийЭтап = КоличествоЭтапов,
		                                                    СуммаОтклоненияКРаспределению - РаспределеннаяСуммаОтклонения,
		                                                    СуммаОтклоненияПоЭтапу);
		
		КоэффициентОтСтроки = ЭтапГрафикаОплаты.СуммаОтклоненияМерныхТоваров
		                      / (ЭтапГрафикаОплаты.СуммаПлатежа+ЭтапГрафикаОплаты.СуммаЗалогаЗаТару);
		
		ЧастьСуммыПлатежа   = Окр(ЭтапГрафикаОплаты.СуммаПлатежа * КоэффициентОтСтроки,2);
		ЭтапГрафикаОплаты.СуммаПлатежа      = ЭтапГрафикаОплаты.СуммаПлатежа - ЧастьСуммыПлатежа;
		
		ЭтапГрафикаОплаты.СуммаЗалогаЗаТару = ЭтапГрафикаОплаты.СуммаЗалогаЗаТару
		                                      - (ЭтапГрафикаОплаты.СуммаОтклоненияМерныхТоваров - ЧастьСуммыПлатежа);
		
		РаспределеннаяСуммаОтклонения = РаспределеннаяСуммаОтклонения + ЭтапГрафикаОплаты.СуммаОтклоненияМерныхТоваров;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру с параметрами заполнения этапов оплаты по заказам.
//
// Возвращаемое значение:
// 		Структура - Структура параметров со значениями по умолчанию.
//
Функция ПараметрыЗаполненияЭтаповОплатыПоЗаказам() Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ссылка",                     Неопределено);
	СтруктураПараметров.Вставить("Дата",                       Дата(1,1,1));
	СтруктураПараметров.Вставить("ЕстьТара",                   Ложь);
	СтруктураПараметров.Вставить("ТребуетсяЗалогЗаТару",       Ложь);
	СтруктураПараметров.Вставить("ВернутьМногооборотнуюТару",  Ложь);
	СтруктураПараметров.Вставить("ТабличнаяЧасть",             Неопределено);
	СтруктураПараметров.Вставить("ЭтапыГрафикаОплаты",         Неопределено);
	СтруктураПараметров.Вставить("ИмяПоляЗаказ",               "");
	СтруктураПараметров.Вставить("ПоЗаказам",                  Ложь);
	СтруктураПараметров.Вставить("УпрощеннаяСхема",            Ложь);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Процедура заполняет ТЧ ЭтапыГрафикаОплаты по переданной структуре параметров.
Процедура ЗаполнитьЭтапыОплатыДокументаПоЗаказам(Параметры) Экспорт
	
	Запрос   = Новый Запрос;
	Менеджер = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = Менеджер;
	
	СформироватьВТСуммЭтаповПоЗаказам(Запрос, Параметры);
	
	ТекстВТ = "
	|ВЫБРАТЬ
	|	ЗаказыКлиентов.Ссылка КАК Заказ,
	|	ЗаказыКлиентов.Сдвиг КАК Сдвиг,
	|	ЗаказыКлиентов.ВариантОплаты КАК ВариантОплаты,
	|	ЗаказыКлиентов.ДатаПлатежа КАК ДатаПлатежа,
	|	ЗаказыКлиентов.СуммаПлатежа КАК СуммаПлатежа,
	|	ЗаказыКлиентов.СуммаЗалогаЗаТару КАК СуммаЗалогаЗаТару,
	|	ЕСТЬNULL(ЗаказыКлиентов.Ссылка.Соглашение.ГрафикОплаты.Календарь,
	|		ЕСТЬNULL(ЗаказыКлиентов.Ссылка.Соглашение.Календарь, 
	|			ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка))) КАК Календарь
	|ПОМЕСТИТЬ ВтЭтапы
	|ИЗ
	|	Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ЗаказыКлиентов
	|ГДЕ
	|	ЗаказыКлиентов.Ссылка В (&СписокЗаказов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	Заявки.Ссылка КАК Заказ,
	|	Заявки.Сдвиг КАК Сдвиг,
	|	Заявки.ВариантОплаты КАК ВариантОплаты,
	|	Заявки.ДатаПлатежа КАК ДатаПлатежа,
	|	Заявки.СуммаПлатежа КАК СуммаПлатежа,
	|	Заявки.СуммаЗалогаЗаТару КАК СуммаЗалогаЗаТару,
	|	ЕСТЬNULL(Заявки.Ссылка.Соглашение.ГрафикОплаты.Календарь,
	|		ЕСТЬNULL(Заявки.Ссылка.Соглашение.Календарь, 
	|			ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка))) КАК Календарь
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЭтапыГрафикаОплаты КАК Заявки
	|ГДЕ
	|	Заявки.Ссылка В (&СписокЗаказов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ЗаказыПоставщикам.Ссылка КАК Заказ,
	|	ЗаказыПоставщикам.Сдвиг КАК Сдвиг,
	|	ЗаказыПоставщикам.ВариантОплаты КАК ВариантОплаты,
	|	ЗаказыПоставщикам.ДатаПлатежа КАК ДатаПлатежа,
	|	ЗаказыПоставщикам.СуммаПлатежа КАК СуммаПлатежа,
	|	ЗаказыПоставщикам.СуммаЗалогаЗаТару КАК СуммаЗалогаЗаТару,
	|	ЕСТЬNULL(ЗаказыПоставщикам.Ссылка.Соглашение.Календарь, 
	|		ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)) КАК Календарь
	|ИЗ
	|	Документ.ЗаказПоставщику.ЭтапыГрафикаОплаты КАК ЗаказыПоставщикам
	|ГДЕ
	|	ЗаказыПоставщикам.Ссылка В (&СписокЗаказов)";
	
	
	Запрос.Текст = ТекстВТ + "
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заказы.Заказ                                                      КАК Заказ,
	|	Заказы.СверхЗаказа                                                КАК СверхЗаказа,
	|	Заказы.СуммаПлатежа                                               КАК СуммаПлатежа,
	|	Заказы.СуммаВзаиморасчетов                                        КАК СуммаВзаиморасчетов,
	|	Заказы.СуммаЗалогаЗаТару                                          КАК СуммаЗалогаЗаТару,
	|	Заказы.СуммаВзаиморасчетовПоТаре                                  КАК СуммаВзаиморасчетовПоТаре,
	|	МАКСИМУМ(Этапы.Сдвиг)                                             КАК Сдвиг,
	|	МАКСИМУМ(ЕСТЬNULL(ВЫБОР КОГДА Этапы.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.КредитСдвиг)
	|								ИЛИ Этапы.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыПоставщику.КредитСдвиг)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ДатаОтгрузки, ДЕНЬ, Этапы.Сдвиг)
	|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
	|	КОНЕЦ, &ДатаОтгрузки))                                             КАК ДатаПлатежаСдвиг,
	|	МАКСИМУМ(ЕСТЬNULL(ВЫБОР КОГДА Этапы.ВариантОплаты <> ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.КредитСдвиг)
	|								И Этапы.ВариантОплаты <> ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыПоставщику.КредитСдвиг)
	|			ТОГДА ВЫБОР КОГДА Этапы.ДатаПлатежа < &ДатаОтгрузки ТОГДА &ДатаОтгрузки ИНАЧЕ Этапы.ДатаПлатежа КОНЕЦ
	|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1)
	|	КОНЕЦ, &ДатаОтгрузки))                                             КАК ДатаПлатежа,
	|	ЕСТЬNULL(Этапы.Календарь, Неопределено)                            КАК Календарь
	|ИЗ ВТЗаказы КАК Заказы
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтЭтапы КАК Этапы
	|		ПО Этапы.Заказ = Заказы.Заказ
	|			И (Этапы.СуммаПлатежа > 0 И Заказы.СуммаПлатежа > 0 
	|				ИЛИ Этапы.СуммаЗалогаЗаТару > 0 И Заказы.СуммаЗалогаЗаТару > 0)
	|ГДЕ
	|	Заказы.СуммаПлатежа <> 0 ИЛИ Заказы.СуммаЗалогаЗаТару <> 0
	|СГРУППИРОВАТЬ ПО
	|	Заказы.Заказ,
	|	Заказы.СуммаПлатежа,
	|	Заказы.СуммаВзаиморасчетов,
	|	Заказы.СуммаВзаиморасчетовПоТаре,
	|	Заказы.СуммаЗалогаЗаТару,
	|	Заказы.СверхЗаказа,
	|	ЕСТЬNULL(Этапы.Календарь, Неопределено)
	|УПОРЯДОЧИТЬ ПО
	|	МАКСИМУМ(Этапы.ДатаПлатежа)
	|";
	
	ДатаОтгрузки = ?(Параметры.Дата=Дата(1,1,1), ТекущаяДатаСеанса(), Параметры.Дата);
	Запрос.УстановитьПараметр("СписокЗаказов", Параметры.ТабличнаяЧасть.ВыгрузитьКолонку(Параметры.ИмяПоляЗаказ));
	Запрос.УстановитьПараметр("ДатаОтгрузки", ДатаОтгрузки);
	УстановитьПривилегированныйРежим(Истина);
	Заказы = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Параметры.ЭтапыГрафикаОплаты.Очистить();
	
	Для Каждого СтрокаЗаказа Из Заказы Цикл
		НовСтр = Параметры.ЭтапыГрафикаОплаты.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, СтрокаЗаказа);
		
		Если СтрокаЗаказа.ДатаПлатежаСдвиг > СтрокаЗаказа.ДатаПлатежа Тогда
			Если ЗначениеЗаполнено(СтрокаЗаказа.Календарь) Тогда
				НовСтр.ДатаПлатежа = КалендарныеГрафики.ДатаПоКалендарю(СтрокаЗаказа.Календарь, ДатаОтгрузки, СтрокаЗаказа.Сдвиг);
			Иначе
				НовСтр.ДатаПлатежа = СтрокаЗаказа.ДатаПлатежаСдвиг;
			КонецЕсли;
		КонецЕсли;
		
		Если НовСтр.ДатаПлатежа < НачалоДня(Параметры.Дата) Тогда
			НовСтр.ДатаПлатежа = Параметры.Дата;
		КонецЕсли;
		
		Если СтрокаЗаказа.ДатаПлатежаСдвиг > СтрокаЗаказа.ДатаПлатежа Тогда
			Если Параметры.ИмяПоляЗаказ = "ЗаказПоставщику" Тогда
				НовСтр.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.КредитСдвиг;
			Иначе
				НовСтр.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.КредитСдвиг;
			КонецЕсли;
		Иначе
			Если Параметры.ИмяПоляЗаказ = "ЗаказПоставщику" Тогда
				НовСтр.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления;
			Иначе
				НовСтр.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки;
			КонецЕсли;
			НовСтр.Сдвиг = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьПроцентыПоСуммам(Параметры);
	
КонецПроцедуры

//Распределяет суммы документа по процентам графика
Процедура РаспределитьСуммыЭтаповОплатыДокументаПоЗаказам(Параметры) Экспорт
	
	Запрос   = Новый Запрос;
	Менеджер = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = Менеджер;
	
	СформироватьВТСуммЭтаповПоЗаказам(Запрос, Параметры);
	
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Заказы.Заказ                                                      КАК Заказ,
	|	Заказы.СверхЗаказа                                                КАК СверхЗаказа,
	|	Заказы.СуммаПлатежа                                               КАК СуммаПлатежа,
	|	Заказы.СуммаВзаиморасчетов                                        КАК СуммаВзаиморасчетов,
	|	Заказы.СуммаЗалогаЗаТару                                          КАК СуммаЗалогаЗаТару,
	|	Заказы.СуммаВзаиморасчетовПоТаре                                  КАК СуммаВзаиморасчетовПоТаре
	|ИЗ ВТЗаказы КАК Заказы";
	
	Суммы = Запрос.Выполнить().Выгрузить();
	ТребуетсяПерезаполнение = Ложь;
	Для Каждого СтрокаЭтапов Из Параметры.ЭтапыГрафикаОплаты Цикл
		СтрокиСумм = Суммы.НайтиСтроки(Новый Структура("Заказ, СверхЗаказа", СтрокаЭтапов.Заказ, СтрокаЭтапов.СверхЗаказа));
		Если СтрокиСумм.Количество() = 0 Тогда
			ТребуетсяПерезаполнение = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаСумм Из Суммы Цикл
		СтрокиГрафика = Параметры.ЭтапыГрафикаОплаты.НайтиСтроки(Новый Структура("Заказ, СверхЗаказа", СтрокаСумм.Заказ, СтрокаСумм.СверхЗаказа));
		Если СтрокиГрафика.Количество() = 0 Тогда
			ТребуетсяПерезаполнение = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ТребуетсяПерезаполнение Тогда
		ЗаполнитьЭтапыОплатыДокументаПоЗаказам(Параметры);
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаСумм Из Суммы Цикл
		
		СтрокиГрафика = Параметры.ЭтапыГрафикаОплаты.НайтиСтроки(Новый Структура("Заказ, СверхЗаказа", СтрокаСумм.Заказ, СтрокаСумм.СверхЗаказа));
		
		СуммаПлатежа              = СтрокаСумм.СуммаПлатежа;
		СуммаВзаиморасчетов       = СтрокаСумм.СуммаВзаиморасчетов;
		СуммаЗалогаЗаТару         = СтрокаСумм.СуммаЗалогаЗаТару;
		СуммаВзаиморасчетовПоТаре = СтрокаСумм.СуммаВзаиморасчетовПоТаре;
		
		ВалютыСовпадают = СуммаПлатежа = СуммаВзаиморасчетов;
		
		СуммаПроцентовПлатежа = 0;
		СуммаПроцентовЗалога = 0;
		Для Каждого СтрокаГрафика Из СтрокиГрафика Цикл
			СуммаПроцентовПлатежа = СуммаПроцентовПлатежа + СтрокаГрафика.ПроцентПлатежа;
			Если Параметры.ЕстьТара Тогда
				СуммаПроцентовЗалога = СуммаПроцентовЗалога + СтрокаГрафика.ПроцентЗалогаЗаТару;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаГрафика Из СтрокиГрафика Цикл
			
			ЭтоПоследняяСтрока = СтрокаГрафика = СтрокиГрафика[СтрокиГрафика.Количество()-1];
			
			Если СуммаПлатежа <> 0 Тогда
				Если ЭтоПоследняяСтрока Тогда
					СтрокаГрафика.СуммаПлатежа = СуммаПлатежа;
				Иначе
					СтрокаГрафика.СуммаПлатежа = СтрокаГрафика.ПроцентПлатежа / СуммаПроцентовПлатежа * СуммаПлатежа;
				КонецЕсли;
				СуммаПлатежа = СуммаПлатежа - СтрокаГрафика.СуммаПлатежа;
			Иначе
				СтрокаГрафика.СуммаПлатежа = 0;
			КонецЕсли;
			
			Если СуммаВзаиморасчетов <> 0 Тогда
				Если ВалютыСовпадают Тогда
					СтрокаГрафика.СуммаВзаиморасчетов = СтрокаГрафика.СуммаПлатежа;
				ИначеЕсли ЭтоПоследняяСтрока Тогда
					СтрокаГрафика.СуммаВзаиморасчетов = СуммаВзаиморасчетов;
				Иначе
					СтрокаГрафика.СуммаВзаиморасчетов = СтрокаГрафика.СуммаПлатежа / СтрокаСумм.СуммаПлатежа * СуммаВзаиморасчетов;
				КонецЕсли;
				СуммаВзаиморасчетов = СуммаВзаиморасчетов - СтрокаГрафика.СуммаВзаиморасчетов;
			Иначе
				СтрокаГрафика.СуммаВзаиморасчетов = 0;
			КонецЕсли;
			
			Если СуммаЗалогаЗаТару <> 0 Тогда
				Если ЭтоПоследняяСтрока Тогда
					СтрокаГрафика.СуммаЗалогаЗаТару = СуммаЗалогаЗаТару;
				Иначе
					СтрокаГрафика.СуммаЗалогаЗаТару = СтрокаГрафика.ПроцентЗалогаЗаТару / СуммаПроцентовЗалога * СуммаЗалогаЗаТару;
				КонецЕсли;
				СуммаЗалогаЗаТару = СуммаЗалогаЗаТару - СтрокаГрафика.СуммаЗалогаЗаТару;
			ИначеЕсли Параметры.ЕстьТара Тогда
				СтрокаГрафика.СуммаЗалогаЗаТару = 0;
			КонецЕсли;
			
			Если СуммаВзаиморасчетовПоТаре <> 0 Тогда
				Если ВалютыСовпадают Тогда
					СтрокаГрафика.СуммаВзаиморасчетовПоТаре = СтрокаГрафика.СуммаЗалогаЗаТару;
				ИначеЕсли ЭтоПоследняяСтрока Тогда
					СтрокаГрафика.СуммаВзаиморасчетовПоТаре = СуммаВзаиморасчетовПоТаре;
				Иначе
					СтрокаГрафика.СуммаВзаиморасчетовПоТаре = СтрокаГрафика.СуммаЗалогаЗаТару / СтрокаСумм.СуммаЗалогаЗаТару * СуммаВзаиморасчетовПоТаре;
				КонецЕсли;
				СуммаВзаиморасчетовПоТаре = СуммаВзаиморасчетовПоТаре - СтрокаГрафика.СуммаВзаиморасчетовПоТаре;
			ИначеЕсли Параметры.ЕстьТара Тогда
				СтрокаГрафика.СуммаВзаиморасчетовПоТаре = 0;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

//Сворачивает табличную часть ЭтапыГрафикаОплаты по датам
Процедура СвернутьЭтапыОплаты(ЭтапыГрафикаОплаты, ЕстьПредоплата = Ложь) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЭтапыГрафикаОплаты.ДатаПлатежа КАК ДатаПлатежа,
	|	ЭтапыГрафикаОплаты.ВариантОплаты КАК ВариантОплаты,
	|	ЭтапыГрафикаОплаты.СуммаПлатежа КАК СуммаПлатежа,
	|	ЭтапыГрафикаОплаты.ПроцентПлатежа КАК ПроцентПлатежа,
	|	ЭтапыГрафикаОплаты.СуммаЗалогаЗаТару КАК СуммаЗалогаЗаТару,
	|	ЭтапыГрафикаОплаты.ПроцентЗалогаЗаТару КАК ПроцентЗалогаЗаТару,
	|	ЭтапыГрафикаОплаты.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ЭтапыГрафикаОплаты.СуммаВзаиморасчетовПоТаре КАК СуммаВзаиморасчетовПоТаре
	|ПОМЕСТИТЬ
	|	ЭтапыГрафикаОплаты
	|ИЗ
	|	&ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|;
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА &ЕстьПредоплата И ЭтапыГрафикаОплаты.ВариантОплаты В (ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения),
	|																	ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки)
	|		КОГДА &ЕстьПредоплата И ЭтапыГрафикаОплаты.ВариантОплаты В (ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыПоставщику.АвансДоПодтверждения),
	|																	ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыПоставщику.ПредоплатаДоПоступления))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыПоставщику.ПредоплатаДоПоступления)
	|		КОГДА ТИПЗНАЧЕНИЯ(ЭтапыГрафикаОплаты.ВариантОплаты) = ТИП(Перечисление.ВариантыОплатыКлиентом)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыПоставщику.КредитПослеПоступления)
	|	КОНЕЦ КАК ВариантОплаты,
	|	МАКСИМУМ(ЭтапыГрафикаОплаты.ДатаПлатежа) КАК ДатаПлатежа,
	|	СУММА(ЭтапыГрафикаОплаты.СуммаПлатежа) КАК СуммаПлатежа,
	|	СУММА(ЭтапыГрафикаОплаты.ПроцентПлатежа) КАК ПроцентПлатежа,
	|	СУММА(ЭтапыГрафикаОплаты.СуммаЗалогаЗаТару) КАК СуммаЗалогаЗаТару,
	|	СУММА(ЭтапыГрафикаОплаты.ПроцентЗалогаЗаТару) КАК ПроцентЗалогаЗаТару,
	|	СУММА(ЭтапыГрафикаОплаты.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ЭтапыГрафикаОплаты.СуммаВзаиморасчетовПоТаре) КАК СуммаВзаиморасчетовПоТаре
	|ИЗ
	|	ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА &ЕстьПредоплата И ЭтапыГрафикаОплаты.ВариантОплаты В (ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения),
	|																	ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки)
	|		КОГДА &ЕстьПредоплата И ЭтапыГрафикаОплаты.ВариантОплаты В (ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыПоставщику.АвансДоПодтверждения),
	|																	ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыПоставщику.ПредоплатаДоПоступления))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыПоставщику.ПредоплатаДоПоступления)
	|		КОГДА ТИПЗНАЧЕНИЯ(ЭтапыГрафикаОплаты.ВариантОплаты) = ТИП(Перечисление.ВариантыОплатыКлиентом)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыПоставщику.КредитПослеПоступления)
	|	КОНЕЦ
	|");
	
	Запрос.УстановитьПараметр("ЭтапыГрафикаОплаты", ?(ТипЗнч(ЭтапыГрафикаОплаты) = Тип("ТаблицаЗначений"), ЭтапыГрафикаОплаты, ЭтапыГрафикаОплаты.Выгрузить()));
	Запрос.УстановитьПараметр("ЕстьПредоплата", ЕстьПредоплата);
	Выгрузка = Запрос.Выполнить().Выгрузить();
	ЭтапыГрафикаОплаты.Загрузить(Выгрузка);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДокументовЗакупки

// Заполняет этапы графика оплаты или распределяет уже заполненную сумму в документах закупки.
//
// Параметры:
//
// 		Объект - ДокументОбъект - документ, для которого заполняются этапы графика оплаты
// 		ГрафикСоглашенияЗаполнен - Булево - флаг возможности заполнения по графику указанном в соглашении
// 		СуммаОплаты - Число - сумма, распределяющаяся по этапам графика оплаты
// 		СуммаЗалога - Число - сумма залога, распределяющаяся по этапам графика оплаты
// 		ЗаполнятьФормуОплаты - Булево - признак, указывающий на необходимость заполнения формы оплаты из соглашения или графика
// 		ШаблонГрафика - ТаблицаЗначений - таблица, по которой необходимо заполнить этапы графика оплаты.
//
Процедура ЗаполнитьЭтапыОплатыДокументаЗакупки(Объект, ГрафикСоглашенияЗаполнен, СуммаОплаты,
	СуммаЗалога = 0, ЗаполнятьФормуОплаты = Ложь, ШаблонГрафика = Неопределено, ТолькоРаспределять = Ложь) Экспорт
	
	Если ТолькоРаспределять И Объект.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
		ЭтапыОплатыКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(
			Объект.ЭтапыГрафикаОплаты,
			СуммаОплаты,
			СуммаЗалога);
	ИначеЕсли ГрафикСоглашенияЗаполнен Тогда
		ЗаполнитьЭтапыОплатыДокументаЗакупкиПоСоглашению(
			Объект,
			СуммаОплаты,
			СуммаЗалога,
			ЗаполнятьФормуОплаты);
	ИначеЕсли ЗначениеЗаполнено(ШаблонГрафика) Тогда
		ЗаполнитьЭтапыОплатыДокументаЗакупкиПоШаблону(
			Объект,
			СуммаОплаты,
			СуммаЗалога,
			ШаблонГрафика,
			Объект.Соглашение.Календарь);
	ИначеЕсли Объект.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
		ЭтапыОплатыКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(
			Объект.ЭтапыГрафикаОплаты,
			СуммаОплаты,
			СуммаЗалога);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет этапы графика оплаты в документе закупки по графику соглашения
//
// Параметры:
// 		Объект - ДокументОбъект - документ, в котором необходимо заполнить авансовые этапы оплаты
// 		СуммаОплатыКРаспределению - Число, сумма, распределяющаяся по этапам графика оплаты
// 		СуммаЗалогаКРаспределению - Число, сумма залога, распределяющаяся по этапам графика оплаты
// 		ЗаполнятьФормуОплаты - Булево - признак, указывающий на необходимость заполнения формы оплаты
// 			в документе формой оплаты по графику, указанной в соглашении.
//
Процедура ЗаполнитьЭтапыОплатыДокументаЗакупкиПоСоглашению(Объект,
	                                              Знач СуммаОплатыКРаспределению,
	                                              Знач СуммаЗалогаКРаспределению = 0,
	                                              ЗаполнятьФормуОплаты = Ложь) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.НомерСтроки КАК НомерСтроки,
	|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.ВариантОплаты КАК ВариантОплаты,
	|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.Сдвиг КАК Сдвиг,
	|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.ПроцентПлатежа КАК ПроцентПлатежа,
	|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.ПроцентЗалогаЗаТару КАК ПроцентЗалогаЗаТару,
	|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.Ссылка.ФормаОплаты КАК ФормаОплаты,
	|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.Ссылка.Календарь КАК Календарь
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками.ЭтапыГрафикаОплаты КАК СоглашенияСПоставщикамиЭтапыГрафикаОплаты
	|ГДЕ
	|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.Ссылка = &Соглашение
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
		
	Запрос.УстановитьПараметр("Соглашение", Объект.Соглашение);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка         = РезультатЗапроса.Выгрузить();
	
	Если (СуммаОплатыКРаспределению = 0 И СуммаЗалогаКРаспределению = 0) ИЛИ Выгрузка.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗаполнятьФормуОплаты Тогда
		
		ФормаОплаты = Выгрузка[0].ФормаОплаты;
		
		Если ЗначениеЗаполнено(ФормаОплаты) И Объект.ФормаОплаты <> ФормаОплаты Тогда
			Объект.ФормаОплаты = ФормаОплаты;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЭтапыОплатыДокументаЗакупкиПоШаблону(
		Объект,
		СуммаОплатыКРаспределению,
		СуммаЗалогаКРаспределению,
		Выгрузка,
		Выгрузка[0].Календарь);
	
КонецПроцедуры

// Заполняет этапы графика оплаты в документе закупки по таблице значений
//
// Параметры:
// 		Объект - ДокументОбъект - документ, в котором необходимо заполнить авансовые этапы оплаты
// 		СуммаОплатыКРаспределению - Число, сумма, распределяющаяся по этапам графика оплаты
// 		СуммаЗалогаКРаспределению - Число, сумма залога, распределяющаяся по этапам графика оплаты
// 		ШаблонГрафика - ТаблицаЗначений, по которой необходимо заполнить этапы графика оплаты
// 		Календарь - СправочникСсылка.Календари, по которому вычисляются даты.
//
Процедура ЗаполнитьЭтапыОплатыДокументаЗакупкиПоШаблону(Объект,
	                                  Знач СуммаОплатыКРаспределению,
	                                  Знач СуммаЗалогаКРаспределению,
	                                  ШаблонГрафика,
	                                  Знач Календарь) Экспорт
	
	ЭтапыГрафикаОплаты = Новый ТаблицаЗначений();
	
	ЭтапыГрафикаОплаты.Колонки.Добавить("ВариантОплаты");
	ЭтапыГрафикаОплаты.Колонки.Добавить("ДатаПлатежа");
	ЭтапыГрафикаОплаты.Колонки.Добавить("ПроцентПлатежа");
	ЭтапыГрафикаОплаты.Колонки.Добавить("СуммаПлатежа");
	ЭтапыГрафикаОплаты.Колонки.Добавить("ПроцентЗалогаЗаТару");
	ЭтапыГрафикаОплаты.Колонки.Добавить("СуммаЗалогаЗаТару");
	ЭтапыГрафикаОплаты.Колонки.Добавить("Сдвиг");
	
	РаспределеннаяСуммаОплаты = 0;
	РаспределеннаяСуммаЗалога = 0;
	ТекущийЭтап               = 0;
	ОдинДень                  = 86400;
	
	КоличествоЭтапов = ШаблонГрафика.Количество();

	ДатаДокумента = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());
	ЖелаемаяДатаПоступления = ?(ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Объект, "ЖелаемаяДатаПоступления"),
		Объект.ЖелаемаяДатаПоступления, Неопределено);
	ПоступлениеОднойДатой = ?(ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Объект, "ПоступлениеОднойДатой"),Объект.ПоступлениеОднойДатой,Ложь);
	ДатаПоступления = ?(ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Объект, "ДатаПоступления") И ПоступлениеОднойДатой, 
		Объект.ДатаПоступления, ЖелаемаяДатаПоступления);
	ДатаПоступления = ?(ЗначениеЗаполнено(ЖелаемаяДатаПоступления), ЖелаемаяДатаПоступления,ДатаПоступления);
	
	// Определим календарную дату для каждого этапа графика оплаты
	УчитыватьКалендарь = Ложь;
	
	Если ЗначениеЗаполнено(Календарь) Тогда
		
		УчитыватьКалендарь = Истина;
		
		СдвигиАвансовыхЭтапов = Новый Массив();
		СдвигиКредитныхЭтапов = Новый Массив();
		МассивДатПоКалендарю  = Новый Массив();
		
		Для Каждого Этап Из ШаблонГрафика Цикл
			
			Если Этап.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления Или
				Этап.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.АвансДоПодтверждения Тогда
				СдвигиАвансовыхЭтапов.Добавить(Этап.Сдвиг);
			Иначе
				СдвигиКредитныхЭтапов.Добавить(Этап.Сдвиг);
			КонецЕсли;
			
		КонецЦикла;
		
		Если СдвигиАвансовыхЭтапов.Количество() > 0 Тогда
			
			МассивДатПоКалендарюАвансовыхЭтапов = КалендарныеГрафики.ДатыПоКалендарю(Календарь, ДатаДокумента, СдвигиАвансовыхЭтапов);
			
			Для Каждого ДатаПоКалендарю Из МассивДатПоКалендарюАвансовыхЭтапов Цикл
				МассивДатПоКалендарю.Добавить(ДатаПоКалендарю);
			КонецЦикла;
			
		КонецЕсли;
		
		Если СдвигиКредитныхЭтапов.Количество() > 0 Тогда
			
			Если Не ЗначениеЗаполнено(ДатаПоступления) Тогда
				
				Если СдвигиАвансовыхЭтапов.Количество() > 0 Тогда
					Если МассивДатПоКалендарюАвансовыхЭтапов.Количество() > 0 Тогда
						ДатаПоступления = МассивДатПоКалендарюАвансовыхЭтапов[МассивДатПоКалендарюАвансовыхЭтапов.Количество()-1];
					КонецЕсли;
				Иначе
					ДатаПоступления = ДатаДокумента;
				КонецЕсли;
				
			КонецЕсли;
			
			МассивДатПоКалендарюКредитныхЭтапов = КалендарныеГрафики.ДатыПоКалендарю(Календарь, ДатаПоступления, СдвигиКредитныхЭтапов);
			
			Для Каждого ДатаПоКалендарю Из МассивДатПоКалендарюКредитныхЭтапов Цикл
				МассивДатПоКалендарю.Добавить(ДатаПоКалендарю);
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		Если Не ЗначениеЗаполнено(ДатаПоступления) Тогда
			
			МаксСдвигАванса = 0;
		
			Для Каждого ТекЭтап Из ШаблонГрафика Цикл
				
				Если ТекЭтап.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления Или
					ТекЭтап.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.АвансДоПодтверждения Тогда
					
					МаксСдвигАванса = Макс(МаксСдвигАванса, ТекЭтап.Сдвиг);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ДатаПоступления = ДатаДокумента + МаксСдвигАванса * ОдинДень;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Определим последний незалоговый этап
	ПоследнийНезалоговыйЭтап = КоличествоЭтапов;
	Пока ПоследнийНезалоговыйЭтап <> 0 И ШаблонГрафика[ПоследнийНезалоговыйЭтап-1].ПроцентПлатежа = 0 Цикл
		ПоследнийНезалоговыйЭтап = ПоследнийНезалоговыйЭтап - 1;
	КонецЦикла;
	
	// Определим последний залоговый этап
	ПоследнийЗалоговыйЭтап = КоличествоЭтапов;
	Пока ПоследнийЗалоговыйЭтап <> 0 И ШаблонГрафика[ПоследнийЗалоговыйЭтап-1].ПроцентЗалогаЗаТару = 0 Цикл
		ПоследнийЗалоговыйЭтап = ПоследнийЗалоговыйЭтап - 1;
	КонецЦикла;
	
	// Заполним этапы в соответствии с графиком оплаты	
	Объект.ЭтапыГрафикаОплаты.Очистить();
	Для Каждого Этап Из ШаблонГрафика Цикл
		
		ТекущийЭтап                     = ТекущийЭтап + 1;
		ЭтапГрафикаОплаты               = ЭтапыГрафикаОплаты.Добавить();
		ЭтапГрафикаОплаты.ВариантОплаты = Этап.ВариантОплаты;
		
		Если УчитыватьКалендарь Тогда
			ДатаПлатежа = МассивДатПоКалендарю[ТекущийЭтап-1];
		Иначе
			ДатаПлатежа = ?(ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления
				ИЛИ ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.КредитСдвиг, ДатаПоступления, ДатаДокумента) + Этап.Сдвиг * ОдинДень;
		КонецЕсли;
		
		Если (ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.АвансДоПодтверждения
			Или ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления)
			И ЗначениеЗаполнено(ЖелаемаяДатаПоступления)
			И ДатаПлатежа > ЖелаемаяДатаПоступления Тогда
			ДатаПлатежа = ЖелаемаяДатаПоступления;
		КонецЕсли;
		
		Если ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.КредитСдвиг Тогда
			ЭтапГрафикаОплаты.Сдвиг           = Этап.Сдвиг;
		КонецЕсли;
		
		ЭтапГрафикаОплаты.ДатаПлатежа         = ДатаПлатежа;
		СуммаЭтапаОплаты                      = Окр(СуммаОплатыКРаспределению * Этап.ПроцентПлатежа / 100, 2, РежимОкругления.Окр15как20);
		ЭтапГрафикаОплаты.СуммаПлатежа        = ?(ТекущийЭтап = ПоследнийНезалоговыйЭтап, СуммаОплатыКРаспределению - РаспределеннаяСуммаОплаты, СуммаЭтапаОплаты);
		ЭтапГрафикаОплаты.ПроцентПлатежа      = ?(СуммаЭтапаОплаты <> 0, Этап.ПроцентПлатежа, 0);
		РаспределеннаяСуммаОплаты             = РаспределеннаяСуммаОплаты + ЭтапГрафикаОплаты.СуммаПлатежа;
		СуммаЭтапаЗалога                      = Окр(СуммаЗалогаКРаспределению * Этап.ПроцентЗалогаЗаТару / 100, 2, РежимОкругления.Окр15как20);
		ЭтапГрафикаОплаты.СуммаЗалогаЗаТару   = ?(ТекущийЭтап = ПоследнийЗалоговыйЭтап, СуммаЗалогаКРаспределению - РаспределеннаяСуммаЗалога, СуммаЭтапаЗалога);
		ЭтапГрафикаОплаты.ПроцентЗалогаЗаТару = ?(Этап.ПроцентЗалогаЗаТару > 0,Этап.ПроцентЗалогаЗаТару, 
			?(СуммаЗалогаКРаспределению<>0 И ЭтапГрафикаОплаты.СуммаЗалогаЗаТару <> 0,
			(Окр(ЭтапГрафикаОплаты.СуммаЗалогаЗаТару/СуммаЗалогаКРаспределению,2,РежимОкругления.Окр15как20))*100,
			0));
		РаспределеннаяСуммаЗалога             = РаспределеннаяСуммаЗалога + ЭтапГрафикаОплаты.СуммаЗалогаЗаТару;
		
	КонецЦикла;
	
	ЭтапыГрафикаОплаты.Сортировать("ДатаПлатежа");
	Объект.ЭтапыГрафикаОплаты.Загрузить(ЭтапыГрафикаОплаты);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПроцентыПоСуммам(Параметры) Экспорт
	
	СуммаПлатежей            = Параметры.ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
	СуммаПлатежейПоЗалогу    = ?(Параметры.ЕстьТара, Параметры.ЭтапыГрафикаОплаты.Итог("СуммаЗалогаЗаТару"),0);
	
	ПоследняяСтрокаЗалога      = -1;
	
	СуммаПроцентов             = 100;
	СуммаПроцентовПоЗалогу     = ?(Параметры.ЕстьТара,100,0);
	
	Сч = 0;
	Пока Сч < Параметры.ЭтапыГрафикаОплаты.Количество() Цикл
		
		Если СуммаПлатежей > 0 Тогда
			Параметры.ЭтапыГрафикаОплаты[Сч].ПроцентПлатежа = ?(Сч = Параметры.ЭтапыГрафикаОплаты.Количество()-1,
																СуммаПроцентов,
																Параметры.ЭтапыГрафикаОплаты[Сч].СуммаПлатежа / СуммаПлатежей * 100);
			
			СуммаПроцентов = СуммаПроцентов - Параметры.ЭтапыГрафикаОплаты[Сч].ПроцентПлатежа;
		КонецЕсли;
	
		Если Параметры.ЕстьТара И Параметры.ЭтапыГрафикаОплаты[Сч].СуммаЗалогаЗаТару <> 0 Тогда
			Параметры.ЭтапыГрафикаОплаты[Сч].ПроцентЗалогаЗаТару = Параметры.ЭтапыГрафикаОплаты[Сч].СуммаЗалогаЗаТару/СуммаПлатежейПоЗалогу*100;
			СуммаПроцентовПоЗалогу = СуммаПроцентовПоЗалогу - Параметры.ЭтапыГрафикаОплаты[Сч].ПроцентЗалогаЗаТару;
			ПоследняяСтрокаЗалога = Сч;
		КонецЕсли;
		
		Сч = Сч + 1;
	КонецЦикла;
	
	Если ПоследняяСтрокаЗалога <> -1 Тогда
		Параметры.ЭтапыГрафикаОплаты[ПоследняяСтрокаЗалога].ПроцентЗалогаЗаТару = 
			Параметры.ЭтапыГрафикаОплаты[ПоследняяСтрокаЗалога].ПроцентЗалогаЗаТару + СуммаПроцентовПоЗалогу;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьВТСуммЭтаповПоЗаказам(Запрос, Параметры)
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Товары.%ИмяПоляЗаказ% КАК Заказ,
	|	Товары.СуммаСНДС           КАК Сумма,
	|	Товары.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	Товары.Номенклатура        КАК Номенклатура,
	|	Товары.КодСтроки           КАК КодСтроки
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ &Таблица КАК Товары
	|;
	|ВЫБРАТЬ 
	|	ВложенныйЗапрос.Заказ КАК Заказ,
	|	ВложенныйЗапрос.СверхЗаказа                      КАК СверхЗаказа,
	|	СУММА(ВложенныйЗапрос.СуммаПлатежа)              КАК СуммаПлатежа,
	|	СУММА(ВложенныйЗапрос.СуммаВзаиморасчетов)       КАК СуммаВзаиморасчетов,
	|	СУММА(ВложенныйЗапрос.СуммаЗалогаЗаТару)         КАК СуммаЗалогаЗаТару,
	|	СУММА(ВложенныйЗапрос.СуммаВзаиморасчетовПоТаре) КАК СуммаВзаиморасчетовПоТаре
	|ПОМЕСТИТЬ ВТЗаказы
	|ИЗ (ВЫБРАТЬ
	|		Товары.Заказ                      КАК Заказ,
	|		ЛОЖЬ                              КАК СверхЗаказа,
	|		ВЫБОР
	|			КОГДА Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|					ИЛИ НЕ &ВернутьМногооборотнуюТару
	|				ТОГДА Товары.Сумма
	|			ИНАЧЕ 0 
	|		КОНЕЦ                        КАК СуммаПлатежа,
	|		ВЫБОР
	|			КОГДА Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|					ИЛИ НЕ &ВернутьМногооборотнуюТару
	|				ТОГДА Товары.СуммаВзаиморасчетов
	|			ИНАЧЕ 0
	|		КОНЕЦ                            КАК СуммаВзаиморасчетов,
	|		ВЫБОР 
	|			КОГДА Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|				И &ТребуетсяЗалогЗаТару
	|				ТОГДА Товары.Сумма
	|			ИНАЧЕ 0 
	|		КОНЕЦ                            КАК СуммаЗалогаЗаТару,
	|		ВЫБОР 
	|			КОГДА Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|				И &ТребуетсяЗалогЗаТару
	|				ТОГДА Товары.СуммаВзаиморасчетов
	|			ИНАЧЕ 0 
	|		КОНЕЦ                            КАК СуммаВзаиморасчетовПоТаре
	|	ИЗ ВТТовары КАК Товары
	|	ГДЕ
	|		Товары.КодСтроки <> 0
	|		ИЛИ &ЭтоОтчетДавальцу
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Товары.Заказ                      КАК Заказ,
	|		&ПоЗаказам                        КАК СверхЗаказа,
	|		ВЫБОР
	|			КОГДА Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|					ИЛИ НЕ &ВернутьМногооборотнуюТару
	|				ТОГДА Товары.Сумма
	|			ИНАЧЕ 0 
	|		КОНЕЦ                        КАК СуммаПлатежа,
	|		ВЫБОР
	|			КОГДА Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|					ИЛИ НЕ &ВернутьМногооборотнуюТару
	|				ТОГДА Товары.СуммаВзаиморасчетов
	|			ИНАЧЕ 0
	|		КОНЕЦ                            КАК СуммаВзаиморасчетов,
	|		ВЫБОР 
	|			КОГДА Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|				И &ТребуетсяЗалогЗаТару
	|				ТОГДА Товары.Сумма
	|			ИНАЧЕ 0 
	|		КОНЕЦ                            КАК СуммаЗалогаЗаТару,
	|		ВЫБОР 
	|			КОГДА Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|				И &ТребуетсяЗалогЗаТару
	|				ТОГДА Товары.СуммаВзаиморасчетов
	|			ИНАЧЕ 0 
	|		КОНЕЦ                            КАК СуммаВзаиморасчетовПоТаре
	|	ИЗ ВТТовары КАК Товары
	|	ГДЕ
	|		Товары.КодСтроки = 0
	|		И НЕ &ЭтоОтчетДавальцу) КАК ВложенныйЗапрос
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Заказ,
	|	ВложенныйЗапрос.СверхЗаказа
	|;";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПоляЗаказ%", Параметры.ИмяПоляЗаказ);
	
	Запрос.УстановитьПараметр("ВернутьМногооборотнуюТару", ?(Параметры.ЕстьТара, Параметры.ВернутьМногооборотнуюТару, ЛОЖЬ));
	Запрос.УстановитьПараметр("ТребуетсяЗалогЗаТару", ?(Параметры.ЕстьТара, Параметры.ТребуетсяЗалогЗаТару, ЛОЖЬ));
	Запрос.УстановитьПараметр("Таблица", Параметры.ТабличнаяЧасть);
	Запрос.УстановитьПараметр("ПоЗаказам", Параметры.ПоЗаказам);
	Запрос.УстановитьПараметр("УпрощеннаяСхема", Параметры.УпрощеннаяСхема);
	Запрос.УстановитьПараметр("ЭтоОтчетДавальцу", Параметры.ИмяПоляЗаказ = "ЗаказДавальца");
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти
