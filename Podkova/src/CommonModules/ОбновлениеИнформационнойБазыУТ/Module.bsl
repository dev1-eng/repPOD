////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы библиотеки УправлениеТорговлей.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область СведенияОБиблиотекеИлиКонфигурации

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля
//                                    ПодсистемыКонфигурацииПереопределяемый.
//   * РежимВыполненияОтложенныхОбработчиков - Строка - "Последовательно" - отложенные обработчики обновления выполняются
//                                    последовательно в интервале от номера версии информационной базы до номера
//                                    версии конфигурации включительно или "Параллельно" - отложенный обработчик после
//                                    обработки первой порции данных передает управление следующему обработчику, а после
//                                    выполнения последнего обработчика цикл повторяется заново.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "УправлениеТорговлей" + ?(СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации(), "Базовая", "");
	Описание.Версия = "11.4.13.187";
	Описание.РежимВыполненияОтложенныхОбработчиков = "Параллельно";
	Описание.ИдентификаторИнтернетПоддержки = ?(СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации(), "TradeBase", "Trade");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
//  Обработчики - ТаблицаЗначений - См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления().
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Документы.АктВыполненныхРабот.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ВводОстатков.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ВозвратТоваровМеждуОрганизациями.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ВозвратТоваровОтКлиента.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.КорректировкаРегистров.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ОтчетКомитенту.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.РегистраторГрафикаДвиженияТоваров.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.СверкаВзаиморасчетов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.СчетФактураВыданный.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.СчетФактураВыданныйАванс.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.СчетФактураКомиссионеру.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.СчетФактураКомитента.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.СчетФактураНалоговыйАгент.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.СчетФактураПолученный.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.СчетФактураПолученныйНалоговыйАгент.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ТаможеннаяДекларацияИмпорт.ПриДобавленииОбработчиковОбновления(Обработчики);
	КоммерческиеПредложенияДокументыУТ.ПриДобавленииОбработчиковОбновления(Обработчики);
	ОбновлениеИнформационнойБазыУТ.ПриДобавленииОбработчиковОбновленияУТ(Обработчики);
	ПланыВидовХарактеристик.СтатьиРасходов.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ГрафикПоступленияТоваров.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ДвижениеТоваров.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ДенежныеСредстваВПути.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.МатериалыИРаботыВПроизводстве.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ОбеспечениеЗаказовРаботами.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ПартииПрочихРасходов.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ПрочиеАктивыПассивы.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ПрочиеРасходы.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.РасчетыПоФинансовымИнструментам.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.РасчетыПоЭквайрингу.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.РасчетыСКлиентами.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.РасчетыСПоставщиками.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ТоварыОрганизаций.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ВспомогательнаяИнформацияВзаиморасчетов.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ДанныеОснованийСчетовФактур.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ДоступныеОстаткиПланируемыхПоступлений.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.РеестрДокументов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ВидыНоменклатуры.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ДоговорыКонтрагентов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.КлассификаторТНВЭД.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.НастройкиХозяйственныхОпераций.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.Номенклатура.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ПравилаРаспределенияРасходов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.УчетныеПолитикиОрганизаций.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ХарактеристикиНоменклатуры.ПриДобавленииОбработчиковОбновления(Обработчики);
	ТМЦВЭксплуатации.ПриДобавленииОбработчиковОбновления(Обработчики);
	ЭлектронноеВзаимодействиеУТ.ПриДобавленииОбработчиковОбновления(Обработчики);

	ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.ПриДобавленииОбработчиковОбновления(Обработчики);
	
	Справочники.КатегорииЭксплуатации.ПриДобавленииОбработчиковОбновления(Обработчики);

КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - (возвращаемое значение) если установить Истина,
//                                то будет выведена форма с описанием обновлений. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	ВыводитьОписаниеОбновлений = НЕ ПолучитьФункциональнуюОпцию("УправлениеПредприятием");
	
	ПараметрЗапускаНаСервере = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");
	Если ПараметрЗапускаНаСервере<>Неопределено Тогда
		Если Найти(ПараметрЗапускаНаСервере,"Trade103Data")<>0 Тогда
			ВыводитьОписаниеОбновлений = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеТорговлейБазовая";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ПерейтиСБазовойВерсииНаПРОФ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеТорговлей";
	Обработчик.Процедура = "ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.ПереходСУправлениеТорговлей";
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	Если ПредыдущееИмяКонфигурации = "УправлениеТорговлейБазовая" Тогда
		Параметры.ОчиститьСведенияОПредыдущейКонфигурации = Ложь;
		Параметры.ВерсияКонфигурации = ПредыдущаяВерсияКонфигурации;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПереименованныеОбъектыМетаданных

// Заполняет переименования объектов метаданных (подсистемы и роли).
// Подробнее см. ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных().
// 
// Параметры:
//   Итог	- Структура - передается в процедуру подсистемой БазоваяФункциональность.
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	ОписаниеПодсистемы = Новый Структура("Имя, Версия, РежимВыполненияОтложенныхОбработчиков, ИдентификаторИнтернетПоддержки");
	ПриДобавленииПодсистемы(ОписаниеПодсистемы);
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"11.3.1.12",
		"Роль.ОтчетыИОбработкиСупервайзераТорговыхПредставлителей",
		"Роль.ОтчетыИОбработкиСупервайзераТорговыхПредставителей",
		ОписаниеПодсистемы.Имя);
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"11.3.1.13",
		"Роль.БазовыеПраваЕГАИС",
		"Роль.ВыполнениеСинхронизацииСЕГАИС",
		ОписаниеПодсистемы.Имя);
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"11.3.1.13",
		"Роль.РазделФинансовыйРезультатИКонтроллинг",
		"Роль.ПодсистемаФинансовыйРезультатИКонтроллинг",
		ОписаниеПодсистемы.Имя);
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"11.4.1.19",
		"Роль.ДобавлениеИзменениеАссортиментаИЦенПартнеров",
		"Роль.ДобавлениеИзменениеЦенПартнеров",
		ОписаниеПодсистемы.Имя);
		
КонецПроцедуры

#КонецОбласти

#Область УниверсальныеПроцедурыОбновления

// Используется для записи движений
//
// Параметры:
//   МенеджерРегистра                  - Менеджер регистра .
//   ИмяРегистра                       - Строка - имя регистра.
//   Ссылка                      	   - Ссылка - ссылка на документ.
//   ТаблицыДляДвижений                - Массив - массив, содержащий таблицы значений с движениями, которые необходимо записать.
//   РегистрироватьНаУзлахПлановОбмена - Булево - включает регистрацию на узлах планов обмена при записи объекта.
//
Процедура ЗаписатьНаборЗаписей(МенеджерРегистра, ИмяРегистра, Ссылка, ТаблицыДляДвижений = Неопределено, РегистрироватьНаУзлахПлановОбмена = Ложь) Экспорт

	НаборЗаписей = МенеджерРегистра[ИмяРегистра].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
	Если ТаблицыДляДвижений <> Неопределено Тогда
		НаборЗаписей.Загрузить(ТаблицыДляДвижений["Таблица" + ИмяРегистра]);
	КонецЕсли; 
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей, РегистрироватьНаУзлахПлановОбмена);
	
КонецПроцедуры

// Используется для записи движений
//
// Параметры:
//   МенеджерРегистров                 - Менеджер регистра .
//   ИменаРегистров                    - Массив - массив, содержащий имена регистров.
//   Ссылка                      	   - Ссылка - ссылка на документ.
//   ТаблицыДляДвижений                - Массив - массив, содержащий таблицы значений с движениями, которые необходимо записать.
//   РегистрироватьНаУзлахПлановОбмена - Булево - включает регистрацию на узлах планов обмена при записи объекта.
// 
Процедура ЗаписатьНаборыЗаписей(МенеджерРегистров, ИменаРегистров, Ссылка, ТаблицыДляДвижений = Неопределено, РегистрироватьНаУзлахПлановОбмена = Ложь) Экспорт

	Регистры = Новый Структура(ИменаРегистров);
	
	Для Каждого Регистр Из Регистры Цикл
		ЗаписатьНаборЗаписей(МенеджерРегистров, Регистр.Ключ, Ссылка, ТаблицыДляДвижений, РегистрироватьНаУзлахПлановОбмена);
	КонецЦикла;
	
КонецПроцедуры

/// Дополнительные параметры функции ПерезаписатьДвиженияИзОчереди()
// 
// Возвращаемое значение:
//  Структура - структура со свойствами:
//      * ЭтоНезависимыйРегистрСведений - Булево - в параметре Данные функции передана таблица со значениями измерений,
//                                                 по которым нужно обновлять данные, Значение по умолчанию - ЛОЖЬ
//      * ИмяИзмеренияДляОтбора - Строка - имя измерения независимого регистра сведений, по которому будет установлен
//                                          отбор для перезаписи набора записей по документу (аналог регистратора для
//                                          регистров, подчиненных регистраторам).
//      * ОбновляемыеДанные - ТаблицаЗначений - данные, которые необходимо обновить.
//
Функция ДополнительныеПараметрыПерезаписиДвиженийИзОчереди() Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений",Ложь);
	ДополнительныеПараметры.Вставить("ИмяИзмеренияДляОтбора","");
	ДополнительныеПараметры.Вставить("ПоляУпорядочивания", Новый Массив);
	ДополнительныеПараметры.Вставить("Менеджер", Неопределено);
	ДополнительныеПараметры.Вставить("НужнаДополнительнаяОбработкаЗаписей", Ложь);
	ДополнительныеПараметры.Вставить("ЗаписыватьВОднойТранзакции", Ложь);
	ДополнительныеПараметры.Вставить("ОбновляемыеДанные");
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

// На основе данных о необходимости переформирования движений перезаписывает движения документа.
//	Для работы функции необходимо, чтобы процедура ИнициализироватьДанныеДокумента модуля менеджера документа, поддерживала параметр Регистры.
//	см. например, Документ.ПриходныйОрдерНаТовары.ИнициализироватьДанныеДокумента.
//
// Параметры:
//  ПолноеИмяДокумента					 - Строка, Массив, Неопределено - имя документа, по которому нужно переформировать движения. Например, "Документ.ПриходныйОрдерНаТовары"
//																Если документов несколько, то нужно передать их имена в массиве.
//																При обработке независимого регистра сведений нужно передать Неопределено.
//  ПолныеИменаРегистров				 - Строка, Массив - имя регистра, по которому нужно переформировать движения. Например, "РегистрНакопления.ТоварыНаСкладах"
//																Если регистров несколько, то их имена нужно передать в массиве.
//  Очередь								 - Число - очередь отложенной обработки данных для контроля данных на предмет блокировки другими обработчиками
//  ДополнительныеПараметры	 - Структура - см. ОбновлениеИнформационнойБазыУТ.ДополнительныеПараметрыПерезаписиДвиженийИзОчереди().
// 
// Возвращаемое значение:
//  Булево - ИСТИНА, если обработка всех движений завершена.
//
Функция ПерезаписатьДвиженияИзОчереди(ПолныеИменаДокументов, ПолныеИменаРегистров, Очередь, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыПерезаписиДвиженийИзОчереди();
	КонецЕсли;
	
	ЕстьЕщеРабота = Ложь;
	ЭтоНезависимыйРегистрСведений = ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений;
	ОбновляемыеДанные = ДополнительныеПараметры.ОбновляемыеДанные;
	ЕстьОбновляемыеДанные = ОбновляемыеДанные <> Неопределено;
	ИмяПоляРегистратор = ?(ЭтоНезависимыйРегистрСведений, ДополнительныеПараметры.ИмяИзмеренияДляОтбора, "Регистратор");
	Регистры = ИменаРегистровВМассив(ПолныеИменаРегистров);
	СписокДокументов = ИменаДокументовВМассив(ПолныеИменаДокументов,
		ЭтоНезависимыйРегистрСведений,
		ЕстьОбновляемыеДанные);
	
	Для Каждого ПолноеИмяДокумента Из СписокДокументов Цикл
		Если Не ЭтоНезависимыйРегистрСведений И Не ЕстьОбновляемыеДанные Тогда
			Если ДополнительныеПараметры.Менеджер = Неопределено Тогда
				МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяДокумента);
			Иначе
				МенеджерДокумента = ДополнительныеПараметры.Менеджер;
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого ПолноеИмяРегистра Из Регистры Цикл
			ИмяРегистра = СтрРазделить(ПолноеИмяРегистра,".",Ложь)[1];
			МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяРегистра);
			
			Если ЕстьОбновляемыеДанные Тогда
				ВыборкаПоРегистраторам = Неопределено;
			Иначе
				ДополнительныеПараметрыДляОбработки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
				
				Если ЭтоНезависимыйРегистрСведений Тогда
					ДополнительныеИсточникиДанных = Новый Соответствие;
					ДополнительныеИсточникиДанных.Вставить(ИмяПоляРегистратор);
					ДополнительныеПараметрыДляОбработки.ДополнительныеИсточникиДанных = ДополнительныеИсточникиДанных;
					ДополнительныеПараметрыДляОбработки.ПоляУпорядочивания = ДополнительныеПараметры.ПоляУпорядочивания;
					ВыборкаПоРегистраторам = ОбновлениеИнформационнойБазы.ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(
						Очередь,
						ПолноеИмяРегистра,
						ДополнительныеПараметрыДляОбработки);
				Иначе
					Источники = МенеджерДокумента.ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра);
					ДополнительныеПараметрыДляОбработки.ДополнительныеИсточникиДанных = Источники;
					ВыборкаПоРегистраторам = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(
						Очередь,
						ПолноеИмяДокумента,
						ПолноеИмяРегистра,
						ДополнительныеПараметрыДляОбработки);
				КонецЕсли;
			КонецЕсли;
			
			Если ДополнительныеПараметры.ЗаписыватьВОднойТранзакции Тогда
				НачатьТранзакцию();
			КонецЕсли;
			
			ПараметрыВыборки = НовыеПараметрыВыборки();
			
			Пока СледующаяВыборкаИлиСтрокаТаблицыЗначений(ВыборкаПоРегистраторам, ОбновляемыеДанные, ПараметрыВыборки) Цикл
				
				Если Не ДополнительныеПараметры.ЗаписыватьВОднойТранзакции Тогда
					НачатьТранзакцию();
				КонецЕсли;
				
				Попытка
					
					// Устанавливаем управляемую блокировку, чтобы провести ответственное чтение объекта.
					Блокировка = Новый БлокировкаДанных;
					
					ЭлементБлокировки = Блокировка.Добавить(ВыборкаПоРегистраторам[ИмяПоляРегистратор].Метаданные().ПолноеИмя());
					ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаПоРегистраторам[ИмяПоляРегистратор]);
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
					
					Блокировка.Заблокировать();
					
					НаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор[ИмяПоляРегистратор].Установить(ВыборкаПоРегистраторам[ИмяПоляРегистратор]);
					
					Если ЭтоНезависимыйРегистрСведений Или ЕстьОбновляемыеДанные Тогда
						МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ВыборкаПоРегистраторам[ИмяПоляРегистратор]);
					КонецЕсли;
					
					Если ЭтоНезависимыйРегистрСведений Тогда
						ЗаписатьДвижения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаПоРегистраторам[ИмяПоляРегистратор], ИмяПоляРегистратор) <> Неопределено;
					Иначе
						ЗаписатьДвижения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаПоРегистраторам[ИмяПоляРегистратор], "Проведен"); //ответственное чтение реквизита "Проведен"
					КонецЕсли;
					
					Если ТипЗнч(ЗаписатьДвижения) <> Тип("Булево") Тогда
						ЗаписатьДвижения = Ложь;
					КонецЕсли;
					
					Если ЗаписатьДвижения Тогда
						ДопСвойства = Новый Структура;
						ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(ВыборкаПоРегистраторам[ИмяПоляРегистратор], ДопСвойства);
						МенеджерДокумента.ИнициализироватьДанныеДокумента(ВыборкаПоРегистраторам[ИмяПоляРегистратор], ДопСвойства, ИмяРегистра);
						
						ТаблицаДанных = ДопСвойства.ТаблицыДляДвижений["Таблица" + ИмяРегистра];
						
						Если ДополнительныеПараметры.НужнаДополнительнаяОбработкаЗаписей Тогда
							НаборЗаписей.ЗагрузитьСОбработкой(ТаблицаДанных);
						Иначе
							НаборЗаписей.Загрузить(ТаблицаДанных);
						КонецЕсли;
						
					КонецЕсли;
					
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
					
					Если Не ДополнительныеПараметры.ЗаписыватьВОднойТранзакции Тогда
						ЗафиксироватьТранзакцию();
					КонецЕсли;	
					
				Исключение
					
					ОтменитьТранзакцию();
					
					ТекстСообщения = НСтр("ru = 'Не удалось перезаписать движения в регистр %ИмяРегистра% по документу %Ссылка% по причине: %Причина%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ВыборкаПоРегистраторам[ИмяПоляРегистратор]);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРегистра%", ПолноеИмяРегистра);
					
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						ВыборкаПоРегистраторам[ИмяПоляРегистратор].Метаданные(), ВыборкаПоРегистраторам[ИмяПоляРегистратор], ТекстСообщения);
						
					Если ДополнительныеПараметры.ЗаписыватьВОднойТранзакции Тогда
						Возврат Ложь;
					КонецЕсли;
					
				КонецПопытки;
			
			КонецЦикла;
			
			Если ДополнительныеПараметры.ЗаписыватьВОднойТранзакции Тогда
				Попытка
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					
					ТекстСообщения = НСтр("ru = 'Не удалось зафиксировать транзакцию записи движения в регистр %ИмяРегистра% по причине: %Причина%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРегистра%", ПолноеИмяРегистра);
					
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
												УровеньЖурналаРегистрации.Предупреждение,
												Метаданные.НайтиПоПолномуИмени(ПолноеИмяРегистра),
												,
												ТекстСообщения);
						
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;	
			
			
			Если Не ЕстьЕщеРабота
				И ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Очередь, ПолноеИмяРегистра) Тогда 
				ЕстьЕщеРабота = Истина;
			КонецЕсли;
			Если ЭтоНезависимыйРегистрСведений Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	ВсеСделано = Не ЕстьЕщеРабота;
	Возврат ВсеСделано;
	
КонецФункции

// Адаптирует запрос механизма проведения для использования в функции ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения,
// делая его запросом для всех проведенных документов.
// Параметры:
//  ИзначальныйТекстЗапроса - Строка - текст запроса механизма проведения, который или формирует таблицу движений, или
//                                     создает временные таблицы,
//												используемые в запросах формирующих таблицы движений
//												Требования к тексту запроса:
//												- все объединяемые таблицы запроса, формирующего таблицу движений имеют один синоним;
//												- если есть соединения с другими таблицами, то оно реализовано таким образом, что будет
//													корректно работать, если не установлен отбор по ссылке;
//												- не используются временные таблицы;
//												- не используются вложенные запросы и группировки;
//												- нет упорядочивания;
//												- параметры запроса рассчитываются или по данным шапки, или являются значениями констант;
// 												- для всех полей непримитивных типов заполнены значения по умолчанию, как они хранятся в регистре.
//													Это или пустая ссылка типа, или НЕОПРЕДЕЛЕНО (для полей составного типа), то НЕ должно быть NULL
//												- параметр, устанавливающий отбор по ссылке называется &Ссылка
//												- в конце запроса не должно быть знака ";"
// 												- в тексте запроса, формирующим таблицу движения, должны выбираться только ЗНАЧИМЫЕ
//													для формирования движений поля (нет полей НомерСтроки, Порядок и т.д.);
//  ПолноеИмяДокумента				 - Строка - полное имя документа, как оно задается в языке запросов (например, Документ.ВводОстатков)
//  СинонимТаблицыДокумента			 - Строка - синоним таблицы документа, используемый в запросе
//  ПереопределениеРасчетаПараметров - Структура - по умолчанию все параметры, которые есть в запросе заменяются на <СинонимТаблицыДокумента>.Ссылка.<ИмяПараметра>
//  												Для параметра &Период по умолчанию подставляется <СинонимТаблицыДокумента>.Ссылка.Дата
//  												Если параметры рассчитываются иначе, то в этой структуре в ключе передается имя параметра, в значении
//													- выражение для его расчета
//  ТекстыЗапросаВременныхТаблиц     - Соответствие - тексты запросов временных таблиц, используемых в тексте запроса
//                                                    механизма проведения.
//													  Ключ соответствия - имя временной таблицы, Значение - текст запроса временной таблицы.
//													  Параметр необходимо использовать когда механизм формирования движений опирается не на
//													  физическую таблицу документа, а на предварительно созданную временную таблицу.
//													  Поля выборки временной таблицы должны содержать поле "Ссылка" - ссылку на физическую таблицу проводимого документа.
//													  Вложенные временные таблицы не поддерживаются.
//
// Возвращаемое значение:
//  ИзначальныйТекстЗапроса - строка - адаптированный текст запроса.
//
Функция АдаптироватьЗапросМеханизмаПроведения(Знач ИзначальныйТекстЗапроса,
														ПолноеИмяДокумента,
														СинонимТаблицыДокумента,
														ПереопределениеРасчетаПараметров = Неопределено,
														ТекстыЗапросаВременныхТаблиц = Неопределено) Экспорт
														
	Если ПереопределениеРасчетаПараметров = Неопределено Тогда
		ПереопределениеРасчетаПараметров = Новый Структура;
	КонецЕсли;
	
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,
										"ВЫБРАТЬ",
										"ВЫБРАТЬ
										|	ТаблицаДокументаОбновлениеИБ.Ссылка КАК Регистратор,");
				
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,
										"ГДЕ",
										"
										|ГДЕ
										|	ТаблицаДокументаОбновлениеИБ.Ссылка.Проведен
										|	И ");
	
	Если ТекстыЗапросаВременныхТаблиц <> Неопределено Тогда
		
		Для Каждого Элемент Из ТекстыЗапросаВременныхТаблиц Цикл
			
			Для Каждого ДругойЭлемент Из ТекстыЗапросаВременныхТаблиц Цикл
				
				Если Элемент.Ключ <> ДругойЭлемент.Ключ Тогда
					
					Если СтрНайти(ДругойЭлемент.Значение, Элемент.Ключ) <> 0 Тогда
						ВызватьИсключение НСтр("ru = 'Адаптированный текст запроса. Вложенные временные таблицы не поддерживаются.'");
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого Элемент Из ТекстыЗапросаВременныхТаблиц Цикл
			
			ПервыйСимвол = СтрНайти(Элемент.Значение, "ПОМЕСТИТЬ");
			ПоследнийСимвол = СтрНайти(Элемент.Значение, Элемент.Ключ, НаправлениеПоиска.СНачала, ПервыйСимвол) + СтрДлина(Элемент.Ключ);
			ПодстановкаПоиска = Сред(Элемент.Значение, ПервыйСимвол, ПоследнийСимвол - ПервыйСимвол);
			ПодстановкаВременнойТаблицы = СтрЗаменить(Элемент.Значение, ПодстановкаПоиска, "");
			ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса, Элемент.Ключ, "(" + ПодстановкаВременнойТаблицы + ")");
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,СинонимТаблицыДокумента,"ТаблицаДокументаОбновлениеИБ");
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,"ТаблицаДокументаОбновлениеИБ.Ссылка = &Ссылка","ИСТИНА");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ИзначальныйТекстЗапроса;
	
	// Параметры запроса нужно упорядочить по наименованию в обратном порядке,
	// т.к. их имена могут начинаться одинаково, например, "Номер", "НомерНаПечать".
	ПараметрыЗапроса = Новый СписокЗначений;
	Для каждого ПараметрЗапроса Из Запрос.НайтиПараметры() Цикл
		ПараметрыЗапроса.Добавить(ПараметрЗапроса.Имя);
	КонецЦикла; 
	ПараметрыЗапроса.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	МетаданныеДокумента = Метаданные.НайтиПоПолномуИмени(ПолноеИмяДокумента);
	
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		
		ТекстЗамены = Неопределено;
		
		Если ПереопределениеРасчетаПараметров.Свойство(Параметр.Значение) Тогда
			ТекстЗамены = ПереопределениеРасчетаПараметров[Параметр.Значение];
			ТекстЗамены = СтрЗаменить(ТекстЗамены, СинонимТаблицыДокумента, "ТаблицаДокументаОбновлениеИБ");
		ИначеЕсли Параметр.Значение = "Ссылка" Тогда
			ТекстЗамены = "ТаблицаДокументаОбновлениеИБ.Ссылка";
		ИначеЕсли Параметр.Значение = "Период" Тогда
			ТекстЗамены = "ТаблицаДокументаОбновлениеИБ.Ссылка.Дата";
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти(Параметр.Значение) <> Неопределено
			ИЛИ Параметр.Значение = "Проведен"
			ИЛИ Параметр.Значение = "ПометкаУдаления"
			ИЛИ Параметр.Значение = "Номер"
			ИЛИ Параметр.Значение = "Дата" Тогда
			ТекстЗамены = "ТаблицаДокументаОбновлениеИБ.Ссылка." + Параметр.Значение;
		КонецЕсли;	
		
		Если ТекстЗамены <> Неопределено Тогда
			ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,"&" + Параметр.Значение, ТекстЗамены);
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат ИзначальныйТекстЗапроса;
	
КонецФункции

// Адаптирует запрос механизма проведения по независимому регистру.
// Результат функции используется в ДанныеНезависимогоРегистраДляПерепроведения().
//
// Параметры:
//  ИзначальныйТекстЗапроса			 - Строка - текст запроса механизма проведения, который формирует таблицу движений.
//  ПолноеИмяДокумента				 - Строка - полное имя документа, как оно задается в языке запросов (например, Документ.ВводОстатков)
//  СинонимТаблицыДокумента			 - Строка - синоним таблицы документа, используемый в запросе
//  ВЗапросеЕстьИсточник			 - Булево - Истина, если в запросе описан источник
//  ПереопределениеРасчетаПараметров - Структура - по умолчанию все параметры, которые есть в запросе заменяются на <СинонимТаблицыДокумента>.Ссылка.<ИмяПараметра>
//  												Для параметра &Период по умолчанию подставляется <СинонимТаблицыДокумента>.Ссылка.Дата
//  												Если параметры рассчитываются иначе, то в этой структуре в ключе передается имя параметра, в значении - выражение для его расчета.
//  ТекстыЗапросаВременныхТаблиц     - Соответствие - тексты запросов временных таблиц, используемых в тексте запроса
//                                                    механизма проведения.
//													  Ключ соответствия - имя временной таблицы, Значение - текст запроса временной таблицы.
//													  Параметр необходимо использовать когда механизм формирования движений опирается не на
//													  физическую таблицу документа, а на предварительно созданную временную таблицу.
//													  Поля выборки временной таблицы должны содержать поле "Ссылка" - ссылку на физическую таблицу проводимого документа.
//													  Вложенные временные таблицы не поддерживаются.
// 
// Возвращаемое значение:
//  Строка - адаптированный текст запроса, который может выполняться для всех документов.
//
Функция АдаптироватьЗапросПроведенияПоНезависимомуРегистру(Знач ИзначальныйТекстЗапроса,
														ПолноеИмяДокумента,
														СинонимТаблицыДокумента,
														ВЗапросеЕстьИсточник,
														ПереопределениеРасчетаПараметров = Неопределено,
														ТекстыЗапросаВременныхТаблиц = Неопределено) Экспорт
	
	Если ПереопределениеРасчетаПараметров = Неопределено Тогда
		ПереопределениеРасчетаПараметров = Новый Структура;
	КонецЕсли;
	
	Если НЕ ВЗапросеЕстьИсточник Тогда                   
		
		ИзначальныйТекстЗапроса = ИзначальныйТекстЗапроса + "
		|ИЗ
		|	" + ПолноеИмяДокумента + " КАК ТаблицаДокументаОбновлениеИБ";
		
	КонецЕсли;
	
	Если ТекстыЗапросаВременныхТаблиц <> Неопределено Тогда
		
		Для Каждого Элемент Из ТекстыЗапросаВременныхТаблиц Цикл
			
			Для Каждого ДругойЭлемент Из ТекстыЗапросаВременныхТаблиц Цикл
				
				Если Элемент.Ключ <> ДругойЭлемент.Ключ Тогда
					
					Если СтрНайти(ДругойЭлемент.Значение, Элемент.Ключ) <> 0 Тогда
						ВызватьИсключение НСтр("ru = 'Адаптированный текст запроса. Вложенные временные таблицы не поддерживаются.'");
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого Элемент Из ТекстыЗапросаВременныхТаблиц Цикл
			ПервыйСимвол 				= СтрНайти(Элемент.Значение, "ПОМЕСТИТЬ");
			ПоследнийСимвол 			= СтрНайти(Элемент.Значение, Элемент.Ключ, НаправлениеПоиска.СНачала, ПервыйСимвол)
											+ СтрДлина(Элемент.Ключ);
			ПодстановкаПоиска 			= Сред(Элемент.Значение, ПервыйСимвол, ПоследнийСимвол - ПервыйСимвол);
			ПодстановкаВременнойТаблицы = СтрЗаменить(Элемент.Значение, ПодстановкаПоиска, "");
			ИзначальныйТекстЗапроса 	= СтрЗаменить(ИзначальныйТекстЗапроса,
														Элемент.Ключ,
														"(" + ПодстановкаВременнойТаблицы + ")");
		КонецЦикла;
		
	КонецЕсли;
	
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,СинонимТаблицыДокумента,"ТаблицаДокументаОбновлениеИБ");
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,"ТаблицаДокументаОбновлениеИБ.Ссылка = &Ссылка","ИСТИНА");
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,"ТаблицаДокументаОбновлениеИБ.Комментарий",
		"ВЫРАЗИТЬ(ТаблицаДокументаОбновлениеИБ.Ссылка.Комментарий КАК Строка (100))");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ИзначальныйТекстЗапроса;
	
	// Параметры запроса нужно упорядочить по наименованию в обратном порядке,
	// т.к. их имена могут начинаться одинаково, например, "Номер", "НомерНаПечать".
	ПараметрыЗапроса = Новый СписокЗначений;
	Для каждого ПараметрЗапроса Из Запрос.НайтиПараметры() Цикл
		ПараметрыЗапроса.Добавить(ПараметрЗапроса.Имя);
	КонецЦикла; 
	ПараметрыЗапроса.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	МетаданныеДокумента = Метаданные.НайтиПоПолномуИмени(ПолноеИмяДокумента);
	
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		
		ТекстЗамены = Неопределено;
		
		Если ПереопределениеРасчетаПараметров.Свойство(Параметр.Значение) Тогда
			ТекстЗамены = ПереопределениеРасчетаПараметров[Параметр.Значение];
			ТекстЗамены = СтрЗаменить(ТекстЗамены, СинонимТаблицыДокумента, "ТаблицаДокументаОбновлениеИБ");
		ИначеЕсли Параметр.Значение = "НомерНаПечать" Тогда
			ТекстЗамены = """""";
		ИначеЕсли Параметр.Значение = "Ссылка" Тогда
			ТекстЗамены = "ТаблицаДокументаОбновлениеИБ.Ссылка";
		ИначеЕсли Параметр.Значение = "Комментарий" Тогда
			ТекстЗамены = "ВЫРАЗИТЬ(ТаблицаДокументаОбновлениеИБ.Ссылка.Комментарий КАК Строка (100))";
		ИначеЕсли Параметр.Значение = "Период" Тогда
			ТекстЗамены = "ТаблицаДокументаОбновлениеИБ.Ссылка.Дата";
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти(Параметр.Значение) <> Неопределено 
			ИЛИ Параметр.Значение = "Проведен"
			ИЛИ Параметр.Значение = "ПометкаУдаления"
			ИЛИ Параметр.Значение = "Номер"
			ИЛИ Параметр.Значение = "Дата" Тогда
			ТекстЗамены = "ТаблицаДокументаОбновлениеИБ.Ссылка." + Параметр.Значение;
		КонецЕсли;	
		
		Если ТекстЗамены <> Неопределено Тогда
			ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,"&" + Параметр.Значение, ТекстЗамены);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИзначальныйТекстЗапроса;
	
КонецФункции

// Результат адаптации запроса для функции ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения.
// 
// Возвращаемое значение:
//  Структура - поля:
//	* ТекстЗапроса - Строка - должен быть объявлен обязательно, адаптированный текст запроса
//	* ЗначенияПараметров - Структура - значения параметров запроса, которые вычисляются из констант
//										(не зависят от конкретного документа).
//
Функция РезультатАдаптацииЗапроса() Экспорт
	
	РезультатАдаптацииЗапроса = Новый Структура;
	РезультатАдаптацииЗапроса.Вставить("ТекстЗапроса");
	РезультатАдаптацииЗапроса.Вставить("ЗначенияПараметров", Новый Структура);
	
	Возврат РезультатАдаптацииЗапроса;
КонецФункции

// Выбирает регистраторы, по которым движения записанные в регистр отличаются от тех, которые формируются запросом
// механизма проведения Параметры:
//  РезультатАдаптацииЗапроса - Структура - см. ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса 
// 												Требования к запросам:
// 												- текст не должен содержать обращения к временным таблицам
//												- все запросы должны быть адаптированы для выборки без отбора по ссылке.
//													это можно сделать  с помощью функции ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения, 
//													 если текст запроса удовлетворяет ее условиям. Если нет - можно попробовать адаптировать текст самостоятельно
// 												- в тексте запроса, формирующим таблицу движения, должны выбираться только ЗНАЧИМЫЕ
//													для формирования движений поля (нет полей НомерСтроки, Порядок и т.д.);
// 												- нет упорядочивания; 
// 												- есть поле "Регистратор"; 
//  ПолноеИмяРегистра				 - Строка - полное имя регистра, как оно задается в языке запросов (например, РегистрНакопления.ТоварыНаСкладах)
//  ПолноеИмяДокумента				 - Строка - полное имя документа, как оно задается в языке запросов (например, Документ.ВводОстатков).
//  НеиспользуемыеПоля				 - Массив - список полей, по которым не требуется проверять совпадение данных.
//
// Возвращаемое значение:
//  Регистраторы - Массив - массив ссылок на документы, по которым нужно переформировать движения по регистру.
//
Функция РегистраторыДляПерепроведения(РезультатАдаптацииЗапроса,
										ПолноеИмяРегистра,
										ПолноеИмяДокумента,
										НеиспользуемыеПоля = Неопределено) Экспорт
	
	Очередь = Неопределено;
	ТекстЗапросаФормированияДвижений = РезультатАдаптацииЗапроса.ТекстЗапроса;
	ЗначенияПараметров = РезультатАдаптацииЗапроса.ЗначенияПараметров;
	
	ТекстРезультирующегоЗапроса	= "";
	
	ЧастиИмениРегистра = СтрРазделить(ПолноеИмяРегистра, ".", Ложь);
	
	ТипРегистра = ЧастиИмениРегистра[0];
	ИмяРегистра = ЧастиИмениРегистра[1];
	
	Если ТипРегистра = "РегистрНакопления"
		Или ТипРегистра = "РегистрСведений" Тогда
		МетаданныеРегистра = Метаданные.НайтиПоПолномуИмени(ПолноеИмяРегистра);
	Иначе
		ТекстИсключения = НСтр("ru = 'Функция пока не поддерживает работу с регистрами типа %ТипРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ТипРегистра%", ТипРегистра);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
		
	ТекстРегистра = 
	"ВЫБРАТЬ";
	
	ТекстВыборкиСуммирующегоЗапроса =
	"ВЫБРАТЬ";
	ТекстГруппировкиСуммирующегоЗапроса = "
	|СГРУППИРОВАТЬ ПО";	
	ТекстУсловияСуммирующегоЗапроса = "
	|ИМЕЮЩИЕ
	|	ЛОЖЬ";	
	
	Если ТипРегистра = "РегистрСведений" Тогда
		ТекстЗапросаФормированияДвижений = СтрЗаменить(ТекстЗапросаФормированияДвижений,
											"ВЫБРАТЬ",
											"ВЫБРАТЬ
											|	1 КАК КонтрольноеПолеОбновлениеИБ,");
		ТекстРегистра = СтрЗаменить(ТекстРегистра,
											"ВЫБРАТЬ",
											"ВЫБРАТЬ
											|	-1,");
		ТекстВыборкиСуммирующегоЗапроса = СтрЗаменить(ТекстВыборкиСуммирующегоЗапроса,
											"ВЫБРАТЬ",
											"ВЫБРАТЬ
											|	СУММА(КонтрольноеПолеОбновлениеИБ) КАК КонтрольноеПолеОбновлениеИБ,");
		ТекстУсловияСуммирующегоЗапроса = ТекстУсловияСуммирующегоЗапроса + "
		| ИЛИ СУММА(КонтрольноеПолеОбновлениеИБ) <> 0";
	КонецЕсли;				
	
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапросаФормированияДвижений);
	
	Запрос = СхемаЗапроса.ПакетЗапросов[0];
	
	ВсеКолонки = Новый Массив;
	
	// Поля по которым не требуется проверять совпадение данных в ИБ с данными запроса.
	Если НеиспользуемыеПоля = Неопределено Тогда
		НеиспользуемыеПоля = Новый Массив;
	КонецЕсли; 
	
	Для каждого Колонка Из Запрос.Колонки Цикл
		
		ВсеКолонки.Добавить(Колонка.Псевдоним);
		
		Если ТипРегистра = "РегистрНакопления"
			И МетаданныеРегистра.Ресурсы.Найти(Колонка.Псевдоним) <> Неопределено Тогда		
			
			ТекстРегистра = ТекстРегистра + "
			|	-ТаблицаРегистра." + Колонка.Псевдоним + ",";
			
			Если НеиспользуемыеПоля.Найти(Колонка.Псевдоним) = Неопределено Тогда
				
				ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
				|	СУММА(ВложенныйЗапрос." + Колонка.Псевдоним + ") КАК " + Колонка.Псевдоним + ",";
				
				ТекстУсловияСуммирующегоЗапроса = ТекстУсловияСуммирующегоЗапроса + "
				|	ИЛИ СУММА(ВложенныйЗапрос." + Колонка.Псевдоним + ") <> 0";
				
			КонецЕсли;
			
		ИначеЕсли Не Колонка.Псевдоним = "КонтрольноеПолеОбновлениеИБ" Тогда
			
			ТекстРегистра = ТекстРегистра + "
			|	ТаблицаРегистра." + Колонка.Псевдоним + ",";
			
			Если НеиспользуемыеПоля.Найти(Колонка.Псевдоним) = Неопределено Тогда
				
				ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
				|	ВложенныйЗапрос." + Колонка.Псевдоним + " КАК " + Колонка.Псевдоним + ",";
				
				ТекстГруппировкиСуммирующегоЗапроса = ТекстГруппировкиСуммирующегоЗапроса + " 
				|	ВложенныйЗапрос." + Колонка.Псевдоним + ",";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстВставкиЗапросФормирующийДвижения = "";
	
	Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		
		Если ВсеКолонки.Найти(Измерение.Имя) <> Неопределено
			Или НеиспользуемыеПоля.Найти(Измерение.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстРегистра = ТекстРегистра + "
		|	ТаблицаРегистра." + Измерение.Имя + ",";
		
		ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
		|	ВложенныйЗапрос." + Измерение.Имя + " КАК " + Измерение.Имя + ",";
		
		ТекстГруппировкиСуммирующегоЗапроса = ТекстГруппировкиСуммирующегоЗапроса + " 
		|	ВложенныйЗапрос." + Измерение.Имя + ",";
		
		ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
		|	&ПустоеЗначение" + Измерение.Имя + " КАК " + Измерение.Имя + ",";
		
		ЗначенияПараметров.Вставить("ПустоеЗначение" + Измерение.Имя, Измерение.Тип.ПривестиЗначение());
		
	КонецЦикла;
	
	Для каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		
		Если ВсеКолонки.Найти(Ресурс.Имя) <> Неопределено
			Или НеиспользуемыеПоля.Найти(Ресурс.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипРегистра = "РегистрНакопления" Тогда
			ТекстРегистра = ТекстРегистра + "
			|	-ТаблицаРегистра." + Ресурс.Имя + ",";
			
			ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
			|	СУММА(ВложенныйЗапрос." + Ресурс.Имя + ") КАК " + Ресурс.Имя + ",";
			
			ТекстУсловияСуммирующегоЗапроса = ТекстУсловияСуммирующегоЗапроса + "
			|	ИЛИ СУММА(ВложенныйЗапрос." + Ресурс.Имя + ") <> 0";
			
			ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
			|	0 КАК " + Ресурс.Имя + ",";
		Иначе	
			ТекстРегистра = ТекстРегистра + "
			|	ТаблицаРегистра." + Ресурс.Имя + ",";
			
			ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
			|	ВложенныйЗапрос." + Ресурс.Имя + " КАК " + Ресурс.Имя + ",";
			
			ТекстГруппировкиСуммирующегоЗапроса = ТекстГруппировкиСуммирующегоЗапроса + " 
			|	ВложенныйЗапрос." + Ресурс.Имя + ",";
			
			ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
			|	&ПустоеЗначение" + Ресурс.Имя + " КАК " + Ресурс.Имя + ",";
			
			ЗначенияПараметров.Вставить("ПустоеЗначение" + Ресурс.Имя, Ресурс.Тип.ПривестиЗначение());
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
		
		Если ВсеКолонки.Найти(Реквизит.Имя) <> Неопределено
			Или НеиспользуемыеПоля.Найти(Реквизит.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстРегистра = ТекстРегистра + "
		|	ТаблицаРегистра." + Реквизит.Имя + ",";
		
		ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
		|	ВложенныйЗапрос." + Реквизит.Имя + " КАК " + Реквизит.Имя + ",";
		
		ТекстГруппировкиСуммирующегоЗапроса = ТекстГруппировкиСуммирующегоЗапроса + " 
		|	ВложенныйЗапрос." + Реквизит.Имя + ",";
		
		ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
		|	&ПустоеЗначение" + Реквизит.Имя + " КАК " + Реквизит.Имя + ",";
		
		ЗначенияПараметров.Вставить("ПустоеЗначение" + Реквизит.Имя, Реквизит.Тип.ПривестиЗначение());
		
	КонецЦикла;
	
	ТекстРегистра = Лев(ТекстРегистра, СтрДлина(ТекстРегистра) - 1);
	ТекстВыборкиСуммирующегоЗапроса = Лев(ТекстВыборкиСуммирующегоЗапроса, СтрДлина(ТекстВыборкиСуммирующегоЗапроса) - 1);
	ТекстГруппировкиСуммирующегоЗапроса = Лев(ТекстГруппировкиСуммирующегоЗапроса, СтрДлина(ТекстГруппировкиСуммирующегоЗапроса) - 1);
	
	Если Не ПустаяСтрока(ТекстВставкиЗапросФормирующийДвижения) Тогда
		ТекстВставкиЗапросФормирующийДвижения = Лев(ТекстВставкиЗапросФормирующийДвижения, СтрДлина(ТекстВставкиЗапросФормирующийДвижения) - 1);
		ТекстЗапросаФормированияДвижений = СтрЗаменить(ТекстЗапросаФормированияДвижений,
											"ИЗ",
											",
											|" +ТекстВставкиЗапросФормирующийДвижения + "
											|ИЗ");
	КонецЕсли;
			
	ТекстРегистра = ТекстРегистра + "
	|ИЗ
	|	" + ПолноеИмяРегистра + " КАК ТаблицаРегистра";
	
	Если Очередь <> Неопределено Тогда
		ТекстРегистра = ТекстРегистра + "
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ПолноеИмяРегистра + ".Изменения КАК РегистраторыКОбработке
		|		ПО ТаблицаРегистра.Регистратор = РегистраторыКОбработке.Регистратор
		|			И (РегистраторыКОбработке.Узел = &ТекущаяОчередь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокированоРегистратор КАК ВТЗаблокированоРегистратор
		|		ПО ТаблицаРегистра.Регистратор = ВТЗаблокированоРегистратор.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокированоСсылка КАК ВТЗаблокированоСсылка
		|		ПО ТаблицаРегистра.Регистратор = ВТЗаблокированоСсылка.Ссылка";
	КонецЕсли;
	
	ТекстРегистра = ТекстРегистра + "
	|ГДЕ
	|	ТаблицаРегистра.Регистратор ССЫЛКА " + ПолноеИмяДокумента;
	
	Если Очередь <> Неопределено Тогда
		ТекстРегистра = ТекстРегистра + "
		|	И ВТЗаблокированоРегистратор.Регистратор ЕСТЬ NULL 
		|	И ВТЗаблокированоСсылка.Ссылка ЕСТЬ NULL ";
	КонецЕсли;
	
	ТекстРезультирующегоЗапроса = ТекстРезультирующегоЗапроса + "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НеправильныеДвижения.Регистратор КАК Регистратор
	|ИЗ
	|(" + ТекстВыборкиСуммирующегоЗапроса + "
	|ИЗ
	|	("
	+ ТекстЗапросаФормированияДвижений 
	+ "
	|ОБЪЕДИНИТЬ ВСЕ
	|" 
	+ ТекстРегистра
	+ ") КАК ВложенныйЗапрос "
	+ ТекстГруппировкиСуммирующегоЗапроса
	+ ТекстУсловияСуммирующегоЗапроса + ") КАК НеправильныеДвижения";
	
	ЗапросВыборки = Новый Запрос;
	
	Для Каждого Параметр Из ЗначенияПараметров Цикл
		
		ЗапросВыборки.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
		
	КонецЦикла;
	
	Если Очередь <> Неопределено Тогда
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
		
		ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Очередь, ПолноеИмяДокумента, МенеджерВременныхТаблиц);
		ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Очередь, ПолноеИмяРегистра, МенеджерВременныхТаблиц);
	
		ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "ВТЗаблокированоРегистратор","ВТЗаблокировано" + ИмяРегистра);
		ТекстРезультирующегоЗапроса = СтрЗаменить(ТекстРезультирующегоЗапроса, "ВТЗаблокированоСсылка","ВТЗаблокировано" + СтрРазделить(ПолноеИмяДокумента,".")[1]);
	
		ЗапросВыборки.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		ЗапросВыборки.УстановитьПараметр("ТекущаяОчередь", ПланыОбмена.ОбновлениеИнформационнойБазы.УзелПоОчереди(Очередь));
		
	КонецЕсли;
	
	ЗапросВыборки.Текст = ТекстРезультирующегоЗапроса;
	
	Регистраторы = ЗапросВыборки.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	Возврат Регистраторы;
КонецФункции

// Выбирает документы, по которым движения записанные в регистр отличаются от тех, которые формируются запросом
// механизма проведения. Используется для независимых регистров сведений, например, РеестрДокументов, ДокументыПоОС, ДокументыПоНМА.
//
// Параметры:
//  РезультатАдаптацииЗапроса	 - Структура - см. ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса.
//  ПолноеИмяРегистра			 - Строка	 - полное имя регистра, как оно задается в языке запросов (например, РегистрНакопления.ТоварыНаСкладах)
//  ПолноеИмяДокумента			 - Строка	 - полное имя документа, как оно задается в языке запросов (например, Документ.ВводОстатков)
//  НеиспользуемыеПоля			 - Массив	 - Список полей, по которым не требуется проверять совпадение данных.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Содержит колонку "Ссылка".
//
Функция ДанныеНезависимогоРегистраДляПерепроведения(РезультатАдаптацииЗапроса, ПолноеИмяРегистра, ПолноеИмяДокумента, НеиспользуемыеПоля = Неопределено) Экспорт
	
	ЗапросВыборки = ЗапросРазличийОтраженияДокументовВНезависимомРегистре(РезультатАдаптацииЗапроса, ПолноеИмяРегистра, ПолноеИмяДокумента, НеиспользуемыеПоля);
	
	ТекстЗапроса = ЗапросВыборки.Текст;
	
	ТекстЗапроса = 
	"
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НеправильныеДвижения.Ссылка КАК Ссылка
	|ИЗ
	|(" + ТекстЗапроса + ") КАК НеправильныеДвижения";

	ЗапросВыборки.Текст = ТекстЗапроса;
	
	ДанныеРегистра = ЗапросВыборки.Выполнить().Выгрузить();
	
	Возврат ДанныеРегистра;

КонецФункции

// Сообщает пользователю, работа с формой временно ограничена, т.к. не завершен переход на новую версию программы.
//
Процедура СообщитьЧтоРаботаСФормойВременноОграничена() Экспорт

	ТекстСообщения = НСтр("ru = 'Работа с формой временно ограничена, так как выполняется переход на новую версию программы. Это плановый процесс, он не мешает работе в информационной базе и скоро завершится. Если у вас возникли сложности - обратитесь к администратору или в службу поддержки.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
	
КонецПроцедуры

// Сообщает пользователю, что работа с формой временно ограниченна, т.к. не завершены процедуры обновления ИБ по объекту
// метаданных.
//
// Параметры:
//  ПолноеИмяМетаданныхОбъекта	 - Строка	 - полное имя объекта метаданных, по которому обновление ИБ должно быть завершено. 
//
Процедура ПроверитьВозможностьОткрытияФормы(ПолноеИмяМетаданныхОбъекта) Экспорт
	
	Если ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, ПолноеИмяМетаданныхОбъекта) Тогда
		СообщитьЧтоРаботаСФормойВременноОграничена();
	КонецЕсли;

КонецПроцедуры

// Сообщает пользователю, что работа с журналом документов временно ограниченна, т.к. не завершена процедура обновления
// РС РеестрДокументов в разрезе используемых документов журнала.
//
// Параметры:
//  ТипыДокументов - Массив - список типов документов, по которым обновление РС должно быть завершено.
//
Процедура ПроверитьВозможностьОткрытияЖурналаДокументов(ТипыДокументов) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
		ЭтоПодчиненныйУзелРИБ = ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ();
		Если Не ЭтоПодчиненныйУзелРИБ Тогда
			Возврат;
		ИначеЕсли ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеВГлавномУзлеЗавершеноУспешно") Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.РеестрДокументов.Изменения КАК ТаблицаИзменений
		|ГДЕ
		|	ТаблицаИзменений.Узел ССЫЛКА ПланОбмена.ОбновлениеИнформационнойБазы
		|	И ТИПЗНАЧЕНИЯ(ТаблицаИзменений.Ссылка) В (&ТипыДокументов)");
	Запрос.УстановитьПараметр("ТипыДокументов", ТипыДокументов);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		СообщитьЧтоРаботаСФормойВременноОграничена();
	КонецЕсли;
	
КонецПроцедуры

// Записывает значения констант с помощью ОбновлениеИнформационнойБазы.ЗаписатьДанные().
//
// Параметры:
//  ЗначенияКонстант - Структура - Ключ описывает имя константы.
//
Процедура ЗаписатьЗначенияКонстант(ЗначенияКонстант) Экспорт

	Для Каждого КлючИЗначение Из ЗначенияКонстант Цикл
		
		МенеджерЗначения = Константы[КлючИЗначение.Ключ].СоздатьМенеджерЗначения();
		
		МенеджерЗначения.Значение = КлючИЗначение.Значение;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения, Ложь);
			
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Сообщить о неудачной обработке
//
// Параметры:
//  ИнформацияОбОшибке - ИнформацияОбОшибке - результат функции ИнформацияОбОшибке()
//  Ссылка - ЛюбаяСсылка - обрабатываемый объект.
//
Процедура СообщитьОНеудачнойОбработке(ИнформацияОбОшибке, Ссылка) Экспорт
	
	ТекстСообщения = НСтр("ru = 'Не удалось обработать объект: %Объект% по причине: %Причина%'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Ссылка);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ЗаписьЖурналаРегистрации(
		ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Предупреждение,
		Ссылка.Метаданные(),
		Ссылка,
		ТекстСообщения);
	
КонецПроцедуры

// Возвращает объект, полученный по переданной ссылке, если он не был изменен с момента получения ссылки
// 
// Параметры:
// 	Ссылка - ЛюбаяСсылка - ссылка, по которой необходимо получить объект
// 	ВерсияДанных - Строка - версия объекта на момент получения ссылки
// 	Очередь - Число - очередь отложенной обработки данных
// Возвращаемое значение:
// 	Неопределено, ЛюбойОбъект - полученный по ссылке объект
//
Функция ПроверитьПолучитьОбъект(Ссылка, ВерсияДанных, Очередь) Экспорт
	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Ссылка);
		Возврат Неопределено;
	КонецЕсли;
	Если Объект.ВерсияДанных <> ВерсияДанных Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Объект;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗапросРазличийОтраженияДокументовВНезависимомРегистре(РезультатАдаптацииЗапроса, ПолноеИмяРегистра, ПолноеИмяДокумента, НеиспользуемыеПоля = Неопределено) Экспорт

	ТекстЗапросаФормированияДвижений = РезультатАдаптацииЗапроса.ТекстЗапроса;
	ЗначенияПараметров = РезультатАдаптацииЗапроса.ЗначенияПараметров;
	
	ТекстРезультирующегоЗапроса	= "";
	
	МетаданныеРегистра = Метаданные.НайтиПоПолномуИмени(ПолноеИмяРегистра);
		
	ТекстРегистра = 
	"ВЫБРАТЬ";
	
	ТекстВыборкиСуммирующегоЗапроса =
	"ВЫБРАТЬ";
	ТекстГруппировкиСуммирующегоЗапроса = "
	|СГРУППИРОВАТЬ ПО";	
	ТекстУсловияСуммирующегоЗапроса = "
	|ИМЕЮЩИЕ
	|	ЛОЖЬ";	
	
	ТекстЗапросаФормированияДвижений = СтрЗаменить(ТекстЗапросаФормированияДвижений,
										"ВЫБРАТЬ",
										"ВЫБРАТЬ
										|	1 КАК КонтрольноеПолеОбновлениеИБ,");
	ТекстРегистра = СтрЗаменить(ТекстРегистра,
										"ВЫБРАТЬ",
										"ВЫБРАТЬ
										|	-1,");
	ТекстВыборкиСуммирующегоЗапроса = СтрЗаменить(ТекстВыборкиСуммирующегоЗапроса,
										"ВЫБРАТЬ",
										"ВЫБРАТЬ
										|	СУММА(КонтрольноеПолеОбновлениеИБ) КАК КонтрольноеПолеОбновлениеИБ,");
	ТекстУсловияСуммирующегоЗапроса = ТекстУсловияСуммирующегоЗапроса + "
	| ИЛИ СУММА(КонтрольноеПолеОбновлениеИБ) <> 0";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапросаФормированияДвижений);
	
	Запрос = СхемаЗапроса.ПакетЗапросов[0];
	
	ВсеКолонки = Новый Массив;
	
	// Поля по которым не требуется проверять совпадение данных в ИБ с данными запроса.
	Если НеиспользуемыеПоля = Неопределено Тогда
		НеиспользуемыеПоля = Новый Массив;
	КонецЕсли; 
	
	Для каждого Колонка Из Запрос.Колонки Цикл
		
		ВсеКолонки.Добавить(Колонка.Псевдоним);
		
		Если Колонка.Псевдоним = "КонтрольноеПолеОбновлениеИБ" Тогда
			Продолжить;
		КонецЕсли;
		
		Поле = МетаданныеРегистра.Измерения.Найти(Колонка.Псевдоним); 
		
		Если Поле <> Неопределено Тогда
			ДополнитьТекстРегистраПоМетаданнымПоля(ТекстРегистра, Поле);
		Иначе
			Поле = МетаданныеРегистра.Ресурсы.Найти(Колонка.Псевдоним); 
			Если Поле <> Неопределено Тогда
				ДополнитьТекстРегистраПоМетаданнымПоля(ТекстРегистра, Поле);
			Иначе
				Поле = МетаданныеРегистра.Реквизиты.Найти(Колонка.Псевдоним); 
				Если Поле <> Неопределено Тогда
					ДополнитьТекстРегистраПоМетаданнымПоля(ТекстРегистра, Поле);
				Иначе
					ТекстИсключения = НСтр("ru = 'В запросе выборки данных документа %ПолноеИмяДокумента% для формирования движений по регистру %ПолноеИмяРегистра% присутствует поле, которого нет в регистре.'");
					ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
					ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяРегистра%", ПолноеИмяРегистра);
					
					ВызватьИсключение ТекстИсключения;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НеиспользуемыеПоля.Найти(Колонка.Псевдоним) = Неопределено Тогда
			ДополнитьТекстТекстВыборкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстВыборкиСуммирующегоЗапроса, Поле);
			ДополнитьТекстГруппировкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстГруппировкиСуммирующегоЗапроса, Поле);
		КонецЕсли;
				
	КонецЦикла;
	
	ТекстВставкиЗапросФормирующийДвижения = "";
	
	Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл		
		
		ЗначенияПараметров.Вставить("ПустоеЗначение" + Измерение.Имя, Измерение.Тип.ПривестиЗначение());
		
		Если ВсеКолонки.Найти(Измерение.Имя) <> Неопределено
			ИЛИ НеиспользуемыеПоля.Найти(Измерение.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнитьТекстРегистраПоМетаданнымПоля(ТекстРегистра, Измерение);
		ДополнитьТекстТекстВыборкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстВыборкиСуммирующегоЗапроса, Измерение);
		ДополнитьТекстГруппировкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстГруппировкиСуммирующегоЗапроса, Измерение);
		
		ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
		|	&ПустоеЗначение" + Измерение.Имя + " КАК " + Измерение.Имя + ",";
		
	КонецЦикла;
	
	Для каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл		
		
		ЗначенияПараметров.Вставить("ПустоеЗначение" + Ресурс.Имя, Ресурс.Тип.ПривестиЗначение());
		
		Если ВсеКолонки.Найти(Ресурс.Имя) <> Неопределено
			ИЛИ НеиспользуемыеПоля.Найти(Ресурс.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнитьТекстРегистраПоМетаданнымПоля(ТекстРегистра, Ресурс);
		ДополнитьТекстТекстВыборкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстВыборкиСуммирующегоЗапроса, Ресурс);
		ДополнитьТекстГруппировкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстГруппировкиСуммирующегоЗапроса, Ресурс);
		
		ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
		|	&ПустоеЗначение" + Ресурс.Имя + " КАК " + Ресурс.Имя + ",";
		
	КонецЦикла;
	
	Для каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл		
		
		ЗначенияПараметров.Вставить("ПустоеЗначение" + Реквизит.Имя, Реквизит.Тип.ПривестиЗначение());
		
		Если ВсеКолонки.Найти(Реквизит.Имя) <> Неопределено
			ИЛИ НеиспользуемыеПоля.Найти(Реквизит.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнитьТекстРегистраПоМетаданнымПоля(ТекстРегистра, Реквизит);
		ДополнитьТекстТекстВыборкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстВыборкиСуммирующегоЗапроса, Реквизит);
		ДополнитьТекстГруппировкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстГруппировкиСуммирующегоЗапроса, Реквизит);
		
		ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
		|	&ПустоеЗначение" + Реквизит.Имя + " КАК " + Реквизит.Имя + ",";
		
	КонецЦикла;
	
	ТекстРегистра = Лев(ТекстРегистра, СтрДлина(ТекстРегистра) - 1);
	ТекстВыборкиСуммирующегоЗапроса = Лев(ТекстВыборкиСуммирующегоЗапроса, СтрДлина(ТекстВыборкиСуммирующегоЗапроса) - 1);
	ТекстГруппировкиСуммирующегоЗапроса = Лев(ТекстГруппировкиСуммирующегоЗапроса, СтрДлина(ТекстГруппировкиСуммирующегоЗапроса) - 1);
	
	Если Не ПустаяСтрока(ТекстВставкиЗапросФормирующийДвижения) Тогда
		ТекстВставкиЗапросФормирующийДвижения = Лев(ТекстВставкиЗапросФормирующийДвижения, СтрДлина(ТекстВставкиЗапросФормирующийДвижения) - 1);
		ТекстЗапросаФормированияДвижений = СтрЗаменить(ТекстЗапросаФормированияДвижений,
											"ИЗ",
											",
											|" +ТекстВставкиЗапросФормирующийДвижения + "
											|ИЗ");
	КонецЕсли;
			
	ТекстРегистра = ТекстРегистра + "
	|ИЗ
	|	" + ПолноеИмяРегистра + " КАК ТаблицаРегистра";
	
	
	ТекстРегистра = ТекстРегистра + "
	|ГДЕ
	|	ТаблицаРегистра.Ссылка ССЫЛКА " + ПолноеИмяДокумента;
	
	ТекстРезультирующегоЗапроса = ТекстРезультирующегоЗапроса + 
	ТекстВыборкиСуммирующегоЗапроса + "
	|ИЗ
	|	("
	+ ТекстЗапросаФормированияДвижений 
	+ "
	|ОБЪЕДИНИТЬ ВСЕ
	|" 
	+ ТекстРегистра
	+ ") КАК ВложенныйЗапрос "
	+ ТекстГруппировкиСуммирующегоЗапроса
	+ ТекстУсловияСуммирующегоЗапроса;
	
	ЗапросВыборки = Новый Запрос;
	
	Для Каждого Параметр Из ЗначенияПараметров Цикл
		
		ЗапросВыборки.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
		
	КонецЦикла;
	
	ЗапросВыборки.Текст = ТекстРезультирующегоЗапроса;
	
	Возврат ЗапросВыборки;
	
КонецФункции

Процедура ДополнитьТекстРегистраПоМетаданнымПоля(ТекстРегистра, Поле)
	
	Если Поле.Имя = "Комментарий" Тогда
		ТекстРегистра = ТекстРегистра + "
		|	ВЫРАЗИТЬ(ТаблицаРегистра." + Поле.Имя + " КАК Строка (1000)),";
	ИначеЕсли Поле.Тип.СодержитТип(Тип("СправочникСсылка.КлючиРеестраДокументов")) Тогда
		ТекстРегистра = ТекстРегистра + "
		|	ТаблицаРегистра." + Поле.Имя + ".Ключ,";
	Иначе	
		ТекстРегистра = ТекстРегистра + "
		|	ТаблицаРегистра." + Поле.Имя + ",";
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьТекстТекстВыборкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстВыборкиСуммирующегоЗапроса, Поле)
	
	ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
		|	ВЫБОР КОГДА ВложенныйЗапрос." + Поле.Имя + " ЕСТЬ NULL ИЛИ ВложенныйЗапрос." + Поле.Имя + " = НЕОПРЕДЕЛЕНО ТОГДА &ПустоеЗначение" + Поле.Имя + " ИНАЧЕ ВложенныйЗапрос." + Поле.Имя + " КОНЕЦ  КАК " + Поле.Имя + ",";
		
КонецПроцедуры

Процедура ДополнитьТекстГруппировкиСуммирующегоЗапросаПоМетаданнымПоля(ТекстГруппировкиСуммирующегоЗапроса, Поле)
	
	ТекстГруппировкиСуммирующегоЗапроса = ТекстГруппировкиСуммирующегоЗапроса + "
		|	ВЫБОР КОГДА ВложенныйЗапрос." + Поле.Имя + " ЕСТЬ NULL ИЛИ ВложенныйЗапрос." + Поле.Имя + " = НЕОПРЕДЕЛЕНО ТОГДА &ПустоеЗначение" + Поле.Имя + " ИНАЧЕ ВложенныйЗапрос." + Поле.Имя + " КОНЕЦ,";
		
КонецПроцедуры

#Область ЗаполненияПустойИБ

// Обработчик первого запуска УТ 11.
//
Процедура ПервыйЗапуск() Экспорт
	
	ЭтоПереходСБазовойВерсииНаПРОФ = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПереходСБазовойВерсииНаПРОФ","ЭтоПереходСБазовойВерсииНаПРОФ");
	Если ЭтоПереходСБазовойВерсииНаПРОФ <> Неопределено И ЭтоПереходСБазовойВерсииНаПРОФ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьВалютыПоУмолчанию();
	Справочники.УпаковкиЕдиницыИзмерения.ЗаполнитьЕдиницыИзмеренияИзКлассификатора("006,113,166,796,055,168");
	
	ЗаполнитьКонстантыПоУмолчанию();
	
	БизнесПроцессы.СогласованиеПродажи.ИнициализироватьРолиИсполнителей();
	БизнесПроцессы.СогласованиеЗакупки.ИнициализироватьРолиИсполнителей();
	БизнесПроцессы.СогласованиеЦенНоменклатуры.ИнициализироватьРолиИсполнителей();
	БизнесПроцессы.СогласованиеЗаявкиНаВозвратТоваровОтКлиента.ИнициализироватьРолиИсполнителей();
	
	Справочники.Партнеры.ЗаполнитьПредопределенныхПартнеров();
	Справочники.Контрагенты.ЗаполнитьПредопределенныхКонтрагентов();
	Справочники.Организации.ЗаполнитьПредопределеннуюОрганизацию();
	Справочники.СкидкиНаценки.ЗаполнитьПредопределенныеЭлементы();
	Справочники.СостоянияПроцессов.НачальноеЗаполнениеПоследовательностиЭтаповПроцессовПродаж();
	Справочники.СтатьиДвиженияДенежныхСредств.ЗаполнитьПредопределенныеСтатьиДвиженияДенежныхСредств();
	ЗаполнитьСвойстваВидовКонтактнойИнформации();
	Справочники.НастройкиХозяйственныхОпераций.ЗаполнитьПредопределенныеНастройкиХозяйственныхОпераций();
	Справочники.Приоритеты.СоздатьПриоритетыПоУмолчанию();
	Справочники.ПриоритетыОплаты.СоздатьПриоритетыПоУмолчанию();
	Справочники.ПричиныОтменыЗаказовПоставщикам.ЗаполнитьПредопределенныеЭлементы();
	Справочники.КодыВалютныхОпераций.ЗаполнитьПредопределенныеЭлементы();
	Справочники.ИнструкцииБанку.ЗаполнитьПредопределенныеЭлементы();
	
	АудитСостоянияСистемы.ЗаполнитьСправочникПроверокСостоянияСистемы();
	
	ПланыВидовХарактеристик.СтатьиДоходов.ЗаполнитьПредопределенныеСтатьиДоходов();
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПредопределенныеСтатьиРасходов();
	ПланыВидовХарактеристик.СтатьиАктивовПассивов.ЗаполнитьНастройкиПредопределенныхЭлементов();
	
	КалендарныеГрафики.ОбновитьИспользованиеНесколькихПроизводственныхКалендарей();
	Справочники.ВариантыКлассификацииЗадолженности.СоздатьВариантКлассификацииЗадолженностиПоУмолчаниюМонопольно();
	МониторингЦелевыхПоказателей.ЗаполнитьСтруктуруЦелейИВариантыАнализа();
	
	ПланыОбмена.МобильноеПриложениеТорговыйПредставитель.НачальноеЗаполнениеКодаУзлаЭтойИБ();
	
	РегистрыСведений.ШтрихкодыНоменклатуры.ЗаполнитьКонстантыПодсистемыШтрихкодирования();
	МенеджерОборудованияВызовСервераПереопределяемый.ОбновитьПоставляемыеДрайвера();
	
	ОбновлениеИнформационнойБазыУТ.ОтключитьНеиспользуемыеРегламентныеЗаданияБазовойВерсии();
	
КонецПроцедуры

// Процедура заполняет справочник валюты значениями по умолчанию.
//
Процедура ЗаполнитьВалютыПоУмолчанию() Экспорт
	
	Коды = Новый Массив;
	Коды.Добавить("643");
	РаботаСКурсамиВалют.ДобавитьВалютыПоКоду(Коды);
	
КонецПроцедуры // ЗаполнитьВалютыПоУмолчанию()

// Заполняет константы значениями по умолчанию.
// Вызывается при первоначальном заполнении ИБ после заполнения следующих данных
//	- Справочник.УпаковкиЕдиницыИзмерения.
//
Процедура ЗаполнитьКонстантыПоУмолчанию()
	
	УстановитьВалютуРегламентированногоУчета();
	УстановитьВалютуУправленческогоУчета();
	УстановитьЕдиницыИзмерения();
	
	ЗначенияКонстант = НастройкиСистемыПовтИсп.ПолучитьЗначенияКонстантПоУмолчанию();
	Для Каждого КлючИЗначение Из ЗначенияКонстант Цикл
		Константы[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
	КонецЦикла; 
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Заполняет служебные константы-идентификаторы конфигурации.
//
Процедура УстановитьСлужебныеКонстанты() Экспорт
	
	// Определим правильные значения служебных констант (функциональных опций).
	ЗначенияКонстант = Новый Структура("УправлениеТорговлей, КомплекснаяАвтоматизация, УправлениеПредприятием", Ложь, Ложь, Ложь);
	
	МодулиПодсистем = Новый Массив;
	ПодсистемыКонфигурацииПереопределяемый.ПриДобавленииПодсистем(МодулиПодсистем);
	
	МодулиПодсистем = ОбщегоНазначенияУТКлиентСервер.ПреобразоватьМассивВСтруктуруИлиСоответствие(МодулиПодсистем, Истина);
	
	Если МодулиПодсистем.Свойство("ОбновлениеИнформационнойБазыУП") Тогда
		ЗначенияКонстант.УправлениеПредприятием = Истина;
	ИначеЕсли МодулиПодсистем.Свойство("ОбновлениеИнформационнойБазыКА") Тогда
		ЗначенияКонстант.КомплекснаяАвтоматизация = Истина;
	ИначеЕсли МодулиПодсистем.Свойство("ОбновлениеИнформационнойБазыУТ") Тогда
		ЗначенияКонстант.УправлениеТорговлей = Истина;
	Иначе
		ВызватьИсключение НСтр("ru='Не удалось определить служебный идентификатор конфигурации.'");
	КонецЕсли;
	
	// Установим эти значения.
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого КлючИЗначение Из ЗначенияКонстант Цикл
		
		Если Константы[КлючИЗначение.Ключ].Получить() <> КлючИЗначение.Значение Тогда
			
			// Текущее значение константы в ИБ не соответствует правильному - исправим
			МенеджерЗначения = Константы[КлючИЗначение.Ключ].СоздатьМенеджерЗначения();
			
			МенеджерЗначения.Значение = КлючИЗначение.Значение;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения, Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Процедура устанавливает значение валюты регламентированного учета.
// Вызывается при первоначальном заполнении ИБ.
//
Процедура УстановитьВалютуРегламентированногоУчета()
	
	Если НЕ ЗначениеЗаполнено(Константы.ВалютаРегламентированногоУчета.Получить()) Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Валюты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Валюты КАК Валюты
			|ГДЕ
			|	НЕ Валюты.ПометкаУдаления
			|	И Валюты.Код = ""643""");
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Коды = Новый Массив;
			Коды.Добавить("643");
			РаботаСКурсамиВалют.ДобавитьВалютыПоКоду(Коды);
			УстановитьВалютуРегламентированногоУчета();
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Константы.ВалютаРегламентированногоУчета.Установить(Выборка.Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

// Процедура устанавливает значение валюты управленческого учета.
// Вызывается при первоначальном заполнении ИБ.
//
Процедура УстановитьВалютуУправленческогоУчета()
	
	Если НЕ ЗначениеЗаполнено(Константы.ВалютаУправленческогоУчета.Получить())
		И Не Константы.ИспользоватьНесколькоВалют.Получить()Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 2
			|	Валюты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Валюты КАК Валюты
			|ГДЕ
			|	НЕ Валюты.ПометкаУдаления");
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				
				Константы.ВалютаУправленческогоУчета.Установить(Выборка.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает значения констант, связанных с единицами измерения
//
Процедура УстановитьЕдиницыИзмерения()
	
	БазоваяЕдиницаИзмеренияДлины  = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("006");
	БазоваяЕдиницаИзмеренияВеса   = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("166");
	БазоваяЕдиницаИзмеренияОбъема = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("113");
	БазоваяЕдиницаИзмеренияПлощади = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("055");
	БазоваяЕдиницаИзмеренияШтук    = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("796");
	БазоваяЕдиницаИзмеренияРазливнойПродукции = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("112");
	
	Константы.ЕдиницаИзмеренияДлины.Установить(БазоваяЕдиницаИзмеренияДлины);
	Константы.ЕдиницаИзмеренияВеса.Установить(БазоваяЕдиницаИзмеренияВеса);
	Константы.ЕдиницаИзмеренияОбъема.Установить(БазоваяЕдиницаИзмеренияОбъема);
	Константы.ЕдиницаИзмеренияПлощади.Установить(БазоваяЕдиницаИзмеренияПлощади);
	Константы.ЕдиницаИзмеренияКоличестваШтук.Установить(БазоваяЕдиницаИзмеренияШтук);
	Константы.ЕдиницаИзмеренияРазливнойПродукции.Установить(БазоваяЕдиницаИзмеренияРазливнойПродукции);
	
КонецПроцедуры

// Для базовой версии отключает неиспользуемые регламентные задания.
//
Процедура ОтключитьНеиспользуемыеРегламентныеЗаданияБазовойВерсии() Экспорт
	
	Если НЕ СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации()
	 ИЛИ ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	НеиспользуемыеЗадания = Новый Структура(
		"ABCКлассификацияНоменклатуры,
		|ABCКлассификацияПартнеров,
		|АрхивированиеЧековККМ,
		|XYZКлассификацияНоменклатуры,
		|XYZКлассификацияПартнеров,
		|АрхивированиеЧековККМ,
		|ЗагрузкаКурсовВалют,
		|ЗапускДополнительныхОбработок,
		|ЗаполнениеДанныхДляОграниченияДоступа,
		|ИнтеграцияС1СДокументооборотВыполнитьОбменДанными,
		|ОбновлениеАгрегатов,
		|ОбновлениеДанныхОДоступностиТоваровДляВнешнихПользователей,
		|ОбновлениеКодовТоваровПодключаемогоОборудования,
		|ОбновлениеНоменклатурыПродаваемойСовместно,
		|ОбновлениеСтатусовДоставкиSMS,
		|ОтправкаSMS,
		|ОчисткаСегментов,
		|ПерестроениеАгрегатов,
		|ПолучениеИОтправкаЭлектронныхПисем,
		|ПроведениеПоРасчетамСПартнерами,
		|РасчетИсточниковДанныхВариантовАнализа,
		|РасчетПоказателейПрогнозаРасходаУпаковок,
		|СозданиеЗаданийНаОтбор,
		|СозданиеЗаданийНаПересчетТоваров,
		|СозданиеЗаданийНаПеремещение,
		|СозданиеРасходныхОрдеров,
		|УведомлениеИсполнителейОНовыхЗадачах,
		|УдалениеНеактуальнойИнформацииСинхронизации,
		|УдалениеОтложенныхЧековККМ,
		|ФормированиеСегментов");
	
	ПараметрыЗадания = Новый Структура("Использование", Истина);
	МассивЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыЗадания);
	
	ПараметрыЗадания = Новый Структура("Использование", Ложь);
	
	Для Каждого Задание Из МассивЗаданий Цикл
		
		Если НеиспользуемыеЗадания.Свойство(Задание.Метаданные.Имя) Тогда
			РегламентныеЗаданияСервер.ИзменитьЗадание(Задание.УникальныйИдентификатор, ПараметрыЗадания);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПереходНаВерсиюПроф

// Обработчик перехода на версию ПРОФ.
//
Процедура ПерейтиСБазовойВерсииНаПРОФ() Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ПереходСБазовойВерсииНаПРОФ","ЭтоПереходСБазовойВерсииНаПРОФ",Истина);
	
	БазоваяВерсия = СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	
	ЗначенияКонстант = Новый Структура;
	ЗначенияКонстант.Вставить("БазоваяВерсия",                   БазоваяВерсия);
	ЗначенияКонстант.Вставить("ИспользоватьУправлениеДоступом",  Не БазоваяВерсия);
	ЗначенияКонстант.Вставить("УправлениеТорговлей",             Истина);
	ЗначенияКонстант.Вставить("ОтветственныйВДокументах",        Не БазоваяВерсия);
	ЗначенияКонстант.Вставить("НеБазоваяВерсия",                 Не БазоваяВерсия);
	
	Для Каждого КлючИЗначение Из ЗначенияКонстант Цикл
		Константы[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
	КонецЦикла; 
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры
 
#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновленияУТ(Обработчики) Экспорт

#Область ДатаНачалаПримененияСводныхСправок_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ДатаНачалаПримененияСводныхСправок_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.4.9.9";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b8f8d074-2e07-431f-a641-ca2bed367821");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТ.ДатаНачалаПримененияСводныхСправок_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Установка константы ДатаНачалаПримененияСводныхСправок'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Константы.ДатаНачалаПримененияСводныхСправок.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Константы.ДатаНачалаПримененияСводныхСправок.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

#КонецОбласти

#Область ДополнитьПользовательскиеПрофилиРолямиСчетовФактур

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ДополнитьПользовательскиеПрофилиРолямиСчетовФактур";
	Обработчик.Версия = "11.4.8.16";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("51ce4c39-f98d-4c4c-8c78-468791f2e8b3");
	Обработчик.Комментарий = НСтр("ru = 'Дополняет пользовательские профили групп доступа новыми ролями для счетов-фактур.'");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ПрофилиГруппДоступа.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

#КонецОбласти

#Область ЗадатьНаименованияНаДругихЯзыкахВидовКонтактнойИнформации

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ЗадатьНаименованияНаДругихЯзыкахВидовКонтактнойИнформации";
	Обработчик.Версия = "11.4.8.36";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("40bd5124-9c00-45fd-8e50-a130b9137b72");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТ.ЗаполнитьСписокВидовКонтактнойИнформацииКОбработке";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Установка наименований видов КИ на других языках.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.ВидыКонтактнойИнформации.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ВидыКонтактнойИнформации.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.ВидыКонтактнойИнформации.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ВидыКонтактнойИнформации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ШаблоныСообщений.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

#КонецОбласти

#Область ПервыйЗапуск

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ПервыйЗапуск";
	Обработчик.Версия = "";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий = "";

#КонецОбласти

#Область УстановитьКонстантуИспользоватьУчетСебестоимости

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.УстановитьКонстантуИспользоватьУчетСебестоимости";
	Обработчик.Версия = "11.4.9.4";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("35962ec2-4e5c-4710-ae59-663d8bf04564");
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает значение константы ""Использовать учет себестоимости"".'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Константы.ИспользоватьУчетСебестоимости.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Константы.ИспользоватьУчетСебестоимости.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

#КонецОбласти

#Область УстановкаКонстант_ИспользоватьАктыРасхожденийКорректировкиИСМП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТ.ИспользоватьАктыРасхожденийКорректировки_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.4.13.78";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("429ad8b8-7129-4e3e-a152-21ddf2a1dfa5");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТ.ИспользоватьАктыРасхожденийКорректировки_ОбработатьДанныеДляПереходаНаНовуюВерсию_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Анализирует использование учета по маркируемой продукции и заполняется связанные константы для использования актов о расхождниях и корректировочных документов при отгрузке и поступлении'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеОтгрузкиПоРеализациям.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеПриемкиПоПриобретениям.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеОтгрузкиПоВозвратам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеПриемкиПоВозвратам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Константы.ИспользоватьКорректировкиПриобретений.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Константы.ИспользоватьКорректировкиРеализаций.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Константы.ВестиУчетМаркируемойПродукцииИСМП.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеОтгрузкиПоРеализациям.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеПриемкиПоПриобретениям.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеОтгрузкиПоВозвратам.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеПриемкиПоВозвратам.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Константы.ИспользоватьКорректировкиПриобретений.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Константы.ИспользоватьКорректировкиРеализаций.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеОтгрузкиПоРеализациям.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеПриемкиПоПриобретениям.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеОтгрузкиПоВозвратам.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеПриемкиПоВозвратам.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Константы.ИспользоватьКорректировкиПриобретений.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Константы.ИспользоватьКорректировкиРеализаций.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

#КонецОбласти

КонецПроцедуры

#Область УстановкаКонстанты_ДатаНачалаПримененияСводныхСправок

Процедура ДатаНачалаПримененияСводныхСправок_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Регистрация не требуется
	Возврат;
	
КонецПроцедуры

Процедура ДатаНачалаПримененияСводныхСправок_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МенеджерЗначения = Константы.ДатаНачалаПримененияСводныхСправок.СоздатьМенеджерЗначения();
	МенеджерЗначения.Значение = ДобавитьМесяц(НачалоКвартала(ТекущаяДатаСеанса()),3); // начало следующего квартала
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	Параметры.ОбработкаЗавершена = Истина
	
КонецПроцедуры

#КонецОбласти

Процедура ДополнитьПользовательскиеПрофилиРолямиСчетовФактур() Экспорт
	
	ЗаменяемыеРоли = Новый Соответствие;
	
	// Все роли предоставляющие доступ к счетам-фактурам
	ЗаменяемыеРоли.Вставить("ЧтениеАвансовыхОтчетов",                                          Новый Массив);
	ЗаменяемыеРоли.Вставить("ЧтениеАктовВыполненныхРабот",                                     Новый Массив);
	ЗаменяемыеРоли.Вставить("ЧтениеВозвратовТоваровОтКлиентов",                                Новый Массив);
	ЗаменяемыеРоли.Вставить("ЧтениеДокументовПередачиТоваровМеждуОрганизациями",               Новый Массив);
	ЗаменяемыеРоли.Вставить("ЧтениеДокументовПоУчетуНДС",                                      Новый Массив);
	ЗаменяемыеРоли.Вставить("ЧтениеКорректировокПриобретений",                                 Новый Массив);
	ЗаменяемыеРоли.Вставить("ЧтениеКорректировокРеализаций",                                   Новый Массив);
	ЗаменяемыеРоли.Вставить("ЧтениеОтчетовКомиссионеров",                                      Новый Массив);
	ЗаменяемыеРоли.Вставить("ЧтениеОтчетовКомитенту",                                          Новый Массив);
	ЗаменяемыеРоли.Вставить("ЧтениеПоступленийТоваровНаСклад",                                 Новый Массив);
	ЗаменяемыеРоли.Вставить("ЧтениеПриобретенийТоваровУслугВозвратовПоставщикам",              Новый Массив);
	ЗаменяемыеРоли.Вставить("ЧтениеПриобретенийУслугПрочихАктивов",                            Новый Массив);
	ЗаменяемыеРоли.Вставить("ЧтениеРеализацийТоваровУслуг",                                    Новый Массив);
	ЗаменяемыеРоли.Вставить("ЧтениеРеализацийУслугПрочихАктивов",                              Новый Массив);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеАвансовыхОтчетов",                             Новый Массив);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеАктовВыполненныхРабот",                        Новый Массив);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеВозвратовТоваровОтКлиентов",                   Новый Массив);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеДокументовПередачиТоваровМеждуОрганизациями",  Новый Массив);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеДокументовРегламентированногоУчета",           Новый Массив);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеКорректировокПриобретений",                    Новый Массив);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеКорректировокРеализаций",                      Новый Массив);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеОтчетовКомиссионеров",                         Новый Массив);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеОтчетовКомитенту",                             Новый Массив);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеПоступленийТоваровНаСклад",                    Новый Массив);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеПриобретенийТоваровУслугВозвратовПоставщикам", Новый Массив);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеПриобретенийУслугПрочихАктивов",               Новый Массив);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеРеализацийТоваровУслуг",                       Новый Массив);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеРеализацийУслугПрочихАктивов",                 Новый Массив);
	
	// Добавляем саму роль, чтобы не удалилась
	Для Каждого КлючИЗначение Из ЗаменяемыеРоли Цикл
		КлючИЗначение.Значение.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	#Область Доступ_к_счетам_фактурам_выданным
	ЗаменяемыеРоли["ЧтениеАктовВыполненныхРабот"                                    ].Добавить("ЧтениеСчетовФактурВыданных");
	ЗаменяемыеРоли["ЧтениеДокументовПередачиТоваровМеждуОрганизациями"              ].Добавить("ЧтениеСчетовФактурВыданных");
	ЗаменяемыеРоли["ЧтениеДокументовПоУчетуНДС"                                     ].Добавить("ЧтениеСчетовФактурВыданных");
	ЗаменяемыеРоли["ЧтениеКорректировокРеализаций"                                  ].Добавить("ЧтениеСчетовФактурВыданных");
	ЗаменяемыеРоли["ЧтениеОтчетовКомиссионеров"                                     ].Добавить("ЧтениеСчетовФактурВыданных");
	ЗаменяемыеРоли["ЧтениеОтчетовКомитенту"                                         ].Добавить("ЧтениеСчетовФактурВыданных");
	ЗаменяемыеРоли["ЧтениеПоступленийТоваровНаСклад"                                ].Добавить("ЧтениеСчетовФактурВыданных");
	ЗаменяемыеРоли["ЧтениеПриобретенийТоваровУслугВозвратовПоставщикам"             ].Добавить("ЧтениеСчетовФактурВыданных");
	ЗаменяемыеРоли["ЧтениеРеализацийТоваровУслуг"                                   ].Добавить("ЧтениеСчетовФактурВыданных");
	ЗаменяемыеРоли["ЧтениеРеализацийУслугПрочихАктивов"                             ].Добавить("ЧтениеСчетовФактурВыданных");
	ЗаменяемыеРоли["ДобавлениеИзменениеАктовВыполненныхРабот"                       ].Добавить("ДобавлениеИзменениеСчетовФактурВыданных");
	ЗаменяемыеРоли["ДобавлениеИзменениеДокументовПередачиТоваровМеждуОрганизациями" ].Добавить("ДобавлениеИзменениеСчетовФактурВыданных");
	ЗаменяемыеРоли["ДобавлениеИзменениеДокументовРегламентированногоУчета"          ].Добавить("ДобавлениеИзменениеСчетовФактурВыданных");
	ЗаменяемыеРоли["ДобавлениеИзменениеКорректировокРеализаций"                     ].Добавить("ДобавлениеИзменениеСчетовФактурВыданных");
	ЗаменяемыеРоли["ДобавлениеИзменениеОтчетовКомиссионеров"                        ].Добавить("ДобавлениеИзменениеСчетовФактурВыданных");
	ЗаменяемыеРоли["ДобавлениеИзменениеОтчетовКомитенту"                            ].Добавить("ДобавлениеИзменениеСчетовФактурВыданных");
	ЗаменяемыеРоли["ДобавлениеИзменениеПоступленийТоваровНаСклад"                   ].Добавить("ДобавлениеИзменениеСчетовФактурВыданных");
	ЗаменяемыеРоли["ДобавлениеИзменениеПриобретенийТоваровУслугВозвратовПоставщикам"].Добавить("ДобавлениеИзменениеСчетовФактурВыданных");
	ЗаменяемыеРоли["ДобавлениеИзменениеРеализацийТоваровУслуг"                      ].Добавить("ДобавлениеИзменениеСчетовФактурВыданных");
	ЗаменяемыеРоли["ДобавлениеИзменениеРеализацийУслугПрочихАктивов"                ].Добавить("ДобавлениеИзменениеСчетовФактурВыданных");
	#КонецОбласти
	
	#Область Доступ_к_счетам_фактурам_выданным_на_аванс
	ЗаменяемыеРоли["ЧтениеДокументовПоУчетуНДС"                           ].Добавить("ЧтениеСчетовФактурВыданныхНаАванс");
	ЗаменяемыеРоли["ДобавлениеИзменениеДокументовРегламентированногоУчета"].Добавить("ДобавлениеИзменениеСчетовФактурВыданныхНаАванс");
	#КонецОбласти
	
	#Область Доступ_к_счетам_фактурам_комиссионеру
	ЗаменяемыеРоли["ДобавлениеИзменениеОтчетовКомитенту"                           ].Добавить("ЧтениеСчетовФактурКомиссионеру");
	ЗаменяемыеРоли["ЧтениеДокументовПоУчетуНДС"                                    ].Добавить("ЧтениеСчетовФактурКомиссионеру");
	ЗаменяемыеРоли["ДобавлениеИзменениеДокументовПередачиТоваровМеждуОрганизациями"].Добавить("ДобавлениеИзменениеСчетовФактурКомиссионеру");
	ЗаменяемыеРоли["ДобавлениеИзменениеДокументовРегламентированногоУчета"         ].Добавить("ДобавлениеИзменениеСчетовФактурКомиссионеру");
	ЗаменяемыеРоли["ДобавлениеИзменениеОтчетовКомиссионеров"                       ].Добавить("ДобавлениеИзменениеСчетовФактурКомиссионеру");
	#КонецОбласти
	
	#Область Доступ_к_счетам_фактурам_комитента
	ЗаменяемыеРоли["ЧтениеДокументовПоУчетуНДС"                           ].Добавить("ЧтениеСчетовФактурКомитента");
	ЗаменяемыеРоли["ДобавлениеИзменениеДокументовРегламентированногоУчета"].Добавить("ДобавлениеИзменениеСчетовФактурКомитента");
	ЗаменяемыеРоли["ДобавлениеИзменениеОтчетовКомитенту"                  ].Добавить("ДобавлениеИзменениеСчетовФактурКомитента");
	#КонецОбласти
	
	#Область Доступ_к_счетам_фактурам_налогового_агента
	ЗаменяемыеРоли["ЧтениеДокументовПоУчетуНДС"                           ].Добавить("ЧтениеСчетовФактурНалоговогоАгента");
	ЗаменяемыеРоли["ДобавлениеИзменениеДокументовРегламентированногоУчета"].Добавить("ДобавлениеИзменениеСчетовФактурНалоговогоАгента");
	#КонецОбласти
	
	#Область Доступ_к_счетам_фактурам_на_неподтвержденную_реализацию_0
	ЗаменяемыеРоли["ЧтениеДокументовПоУчетуНДС"                           ].Добавить("ЧтениеСчетовФактурНаНеподтвержденнуюРеализацию0");
	ЗаменяемыеРоли["ДобавлениеИзменениеДокументовРегламентированногоУчета"].Добавить("ДобавлениеИзменениеСчетовФактурНаНеподтвержденнуюРеализацию0");
	#КонецОбласти
	
	#Область Доступ_к_счетам_фактурам_полученным
	ЗаменяемыеРоли["ЧтениеАвансовыхОтчетов"                                         ].Добавить("ЧтениеСчетовФактурПолученных");
	ЗаменяемыеРоли["ЧтениеВозвратовТоваровОтКлиентов"                               ].Добавить("ЧтениеСчетовФактурПолученных");
	ЗаменяемыеРоли["ЧтениеДокументовПередачиТоваровМеждуОрганизациями"              ].Добавить("ЧтениеСчетовФактурПолученных");
	ЗаменяемыеРоли["ЧтениеДокументовПоУчетуНДС"                                     ].Добавить("ЧтениеСчетовФактурПолученных");
	ЗаменяемыеРоли["ЧтениеКорректировокПриобретений"                                ].Добавить("ЧтениеСчетовФактурПолученных");
	ЗаменяемыеРоли["ЧтениеОтчетовКомиссионеров"                                     ].Добавить("ЧтениеСчетовФактурПолученных");
	ЗаменяемыеРоли["ЧтениеПоступленийТоваровНаСклад"                                ].Добавить("ЧтениеСчетовФактурПолученных");
	ЗаменяемыеРоли["ЧтениеПриобретенийТоваровУслугВозвратовПоставщикам"             ].Добавить("ЧтениеСчетовФактурПолученных");
	ЗаменяемыеРоли["ЧтениеПриобретенийУслугПрочихАктивов"                           ].Добавить("ЧтениеСчетовФактурПолученных");
	ЗаменяемыеРоли["ДобавлениеИзменениеАвансовыхОтчетов"                            ].Добавить("ДобавлениеИзменениеСчетовФактурПолученных");
	ЗаменяемыеРоли["ДобавлениеИзменениеВозвратовТоваровОтКлиентов"                  ].Добавить("ДобавлениеИзменениеСчетовФактурПолученных");
	ЗаменяемыеРоли["ДобавлениеИзменениеДокументовПередачиТоваровМеждуОрганизациями" ].Добавить("ДобавлениеИзменениеСчетовФактурПолученных");
	ЗаменяемыеРоли["ДобавлениеИзменениеДокументовРегламентированногоУчета"          ].Добавить("ДобавлениеИзменениеСчетовФактурПолученных");
	ЗаменяемыеРоли["ДобавлениеИзменениеКорректировокПриобретений"                   ].Добавить("ДобавлениеИзменениеСчетовФактурПолученных");
	ЗаменяемыеРоли["ДобавлениеИзменениеОтчетовКомиссионеров"                        ].Добавить("ДобавлениеИзменениеСчетовФактурПолученных");
	ЗаменяемыеРоли["ДобавлениеИзменениеПоступленийТоваровНаСклад"                   ].Добавить("ДобавлениеИзменениеСчетовФактурПолученных");
	ЗаменяемыеРоли["ДобавлениеИзменениеПриобретенийТоваровУслугВозвратовПоставщикам"].Добавить("ДобавлениеИзменениеСчетовФактурПолученных");
	ЗаменяемыеРоли["ДобавлениеИзменениеПриобретенийУслугПрочихАктивов"              ].Добавить("ДобавлениеИзменениеСчетовФактурПолученных");
	#КонецОбласти
	
	#Область Доступ_к_счетам_фактурам_полученным_на_аванс
	ЗаменяемыеРоли["ЧтениеДокументовПоУчетуНДС"                           ].Добавить("ЧтениеСчетовФактурПолученныхНаАванс");
	ЗаменяемыеРоли["ДобавлениеИзменениеДокументовРегламентированногоУчета"].Добавить("ДобавлениеИзменениеСчетовФактурПолученныхНаАванс");
	#КонецОбласти
	
	#Область Доступ_к_счетам_фактурам_полученным_от_налогового_агента
	ЗаменяемыеРоли["ЧтениеВозвратовТоваровОтКлиентов"                               ].Добавить("ЧтениеСчетовФактурПолученныхНалоговогоАгента");
	ЗаменяемыеРоли["ЧтениеКорректировокПриобретений"                                ].Добавить("ЧтениеСчетовФактурПолученныхНалоговогоАгента");
	ЗаменяемыеРоли["ДобавлениеИзменениеДокументовРегламентированногоУчета"          ].Добавить("ДобавлениеИзменениеСчетовФактурПолученныхНалоговогоАгента");
	ЗаменяемыеРоли["ДобавлениеИзменениеКорректировокПриобретений"                   ].Добавить("ДобавлениеИзменениеСчетовФактурПолученныхНалоговогоАгента");
	ЗаменяемыеРоли["ДобавлениеИзменениеПриобретенийТоваровУслугВозвратовПоставщикам"].Добавить("ДобавлениеИзменениеСчетовФактурПолученныхНалоговогоАгента");
	#КонецОбласти
	
	УправлениеДоступом.ЗаменитьРолиВПрофилях(ЗаменяемыеРоли);
	
КонецПроцедуры

Процедура ОбновитьКонтактнуюИнформациюДляСписков(Параметры) Экспорт
	
	ОбъектыМетаданных = МассивОбъектовМетаданныхДляОбработки();
	
	Для каждого Объект Из ОбъектыМетаданных Цикл
	
		Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, Объект.ПолноеИмя());
		
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
					
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(Объект.ПолноеИмя());
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
				Блокировка.Заблокировать();
								
				СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
				
				Если СпрОбъект = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформациюДляСписков(СпрОбъект);
				
				Если Объект = Метаданные.Справочники.Контрагенты 
					И СпрОбъект.СтранаРегистрации.Пустая()
					И НЕ СпрОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
					
					СпрОбъект.СтранаРегистрации = Справочники.СтраныМира.Россия;
					
				КонецЕсли;

				
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОбъект);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				ТекстСообщения = НСтр("ru = 'Не удалось заполнить вид контактной информации для списка у элемента: %Ссылка% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Объект,
				Выборка.Ссылка,
				ТекстСообщения);
				
			КонецПопытки;
			
		КонецЦикла;
	
	КонецЦикла;
	
	МассивИмен = Новый Массив;
	Для каждого Объект Из ОбъектыМетаданных Цикл
		МассивИмен.Добавить(Объект.ПолноеИмя());
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, МассивИмен);		
	
КонецПроцедуры

Функция МассивОбъектовМетаданныхДляОбработки()
	
	ОбъектыМетаданных = Новый Массив;
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.КонтактныеЛицаПартнеров);
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.Контрагенты);
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.Организации);
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.Партнеры);
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.Пользователи);
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.РегистрацииВНалоговомОргане);
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.Склады);
	ОбъектыМетаданных.Добавить(Метаданные.Справочники.ФизическиеЛица);
		
	Возврат ОбъектыМетаданных;
	
КонецФункции

// Заполняет пустое поле объекта значением реквизита по умолчанию. 
//
// Параметры:
//  Параметры			 - Структура - параметры обработчика обновления, передаваемые в обработчик при его запуске 
//  ПолноеИмяОбъекта	 - Строка - полное имя объекта, например, Документ.ПриходныйОрдерНаТовары 
//  ИмяРеквизита		 - Строка - имя заполняемого реквизита
//  ЗначениеРеквизита	 - Любой тип - значение заполняемого реквизита. При обработке проверяется - если значение реквизита в объекте
//							не равно пустому, то объект отмечается обработанным без изменения реквизита.
//
Процедура ЗаполнитьПустойРеквизитЗначениемПоУмолчанию(Параметры, ПолноеИмяОбъекта, ИмяРеквизита, ЗначениеРеквизита) Экспорт
	
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	ПустоеЗначение = МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита).Тип.ПривестиЗначение();
	
	ЗаменитьЗначениеРеквизита(Параметры, ПолноеИмяОбъекта, ИмяРеквизита, ПустоеЗначение, ЗначениеРеквизита);
	
КонецПроцедуры

// Регистрирует к обработке объекты с пустым значением реквизита
//
// Параметры:
//  Параметры			 - Структура - параметры обработчика обновления, передаваемые в обработчик при его запуске 
//  ПолноеИмяОбъекта	 - Строка - полное имя объекта, например, Документ.ПриходныйОрдерНаТовары 
//  ИмяРеквизита		 - Строка - имя заполняемого реквизита.
//
Процедура ЗаполнитьПустойРеквизитЗначениемПоУмолчаниюЗарегистрироватьДанныеКОбработке(Параметры, ПолноеИмяОбъекта, ИмяРеквизита) Экспорт
  
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	ПустоеЗначение = МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита).Тип.ПривестиЗначение();
	
	ЗаменитьЗначениеРеквизитаЗарегистрироватьДанныеКОбработке(Параметры, ПолноеИмяОбъекта, ИмяРеквизита, ПустоеЗначение);
КонецПроцедуры

// Заполняет пустое поле объекта значением реквизита по умолчанию. 
//
// Параметры:
//  Параметры			 - Структура - параметры обработчика обновления, передаваемые в обработчик при его запуске 
//  ПолноеИмяОбъекта	 - Строка - полное имя объекта, например, Документ.ПриходныйОрдерНаТовары 
//  ИмяРеквизита		 - Строка - имя заполняемого реквизита
//  ИсходноеЗначение	 - Любой тип - исходное значение реквизита. Если на момент обработки в объекте будет другое значение -
//										то он будет отмечен обработанным без изменения реквизита 
//  КонечноеЗначение	 - Любой тип - новое значение реквизита, которое будет присвоено при обработке.
//
Процедура ЗаменитьЗначениеРеквизита(Параметры, ПолноеИмяОбъекта, ИмяРеквизита, ИсходноеЗначение, КонечноеЗначение) Экспорт
	
	ОбъектыДляОбработки = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
			
	
	Пока ОбъектыДляОбработки.Следующий() Цикл
		НачатьТранзакцию();
		
		Попытка
			
			// Устанавливаем управляемую блокировку, чтобы провести ответственное чтение объекта.
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ОбъектыДляОбработки.Ссылка);
			
			Блокировка.Заблокировать();
			
			Объект = ОбъектыДляОбработки.Ссылка.ПолучитьОбъект();
			
			Если Объект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ОбъектыДляОбработки.Ссылка);
				Продолжить;
			КонецЕсли;
			
			Если Объект[ИмяРеквизита] <> ИсходноеЗначение Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Объект);
			Иначе
				Объект[ИмяРеквизита] = КонечноеЗначение;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
			КонецЕсли;
			
		    ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать %ИмяОбъекта%: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяОбъекта%", ПолноеИмяОбъекта);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ОбъектыДляОбработки.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
										УровеньЖурналаРегистрации.Предупреждение,
										МетаданныеОбъекта,
										ОбъектыДляОбработки.Ссылка,
										ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;	
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

// Регистрирует к обработке объекты, у которых реквизит имеет переданное значение.
//
// Параметры:
//  Параметры			 - Структура - параметры обработчика обновления, передаваемые в обработчик при его запуске 
//  ПолноеИмяОбъекта	 - Строка - полное имя объекта, например, Документ.ПриходныйОрдерНаТовары 
//  ИмяРеквизита		 - Строка - имя заполняемого реквизита
//  ИсходноеЗначение	 - Любой тип - к обработке будут отмечены реквизиты.
//
Процедура ЗаменитьЗначениеРеквизитаЗарегистрироватьДанныеКОбработке(Параметры, ПолноеИмяОбъекта, ИмяРеквизита, ИсходноеЗначение) Экспорт
  
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаОбъекта.Ссылка КАК Ссылка 
	|ИЗ
	|	#ПолноеИмяОбъекта КАК ТаблицаОбъекта
	|ГДЕ
	|	ТаблицаОбъекта.#ИмяРеквизита = &ИсходноеЗначение";
		
	Запрос.УстановитьПараметр("ИсходноеЗначение", ИсходноеЗначение);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПолноеИмяОбъекта", ПолноеИмяОбъекта);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяРеквизита", ИмяРеквизита);
	
	Запрос.Текст = ТекстЗапроса;
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

// Регистрация объектов для изменения
//
Процедура ЗаполнитьСписокВидовКонтактнойИнформацииКОбработке(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	ВидыКОбработке = РезультатЗапроса.ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ВидыКОбработке);
	
КонецПроцедуры

// Установка наименований видов КИ на других языках 
//
Процедура ЗадатьНаименованияНаДругихЯзыкахВидовКонтактнойИнформации(Параметры) Экспорт
	
	ВидКИ = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, "Справочник.ВидыКонтактнойИнформации");
	Наименования = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.НаименованияВидовКонтактнойИнформации();
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Пока ВидКИ.Следующий() Цикл
		Попытка
		
			ВидКИОбъект = ВидКИ.Ссылка.ПолучитьОбъект();
			
			Для каждого Язык Из Метаданные.Языки Цикл
				Если Язык = Метаданные.ОсновнойЯзык Тогда
					Продолжить;
				КонецЕсли;
				
				ИмяВида = ?(ЗначениеЗаполнено(ВидКИОбъект.ИмяПредопределенногоВида), ВидКИОбъект.ИмяПредопределенногоВида, ВидКИОбъект.ИмяПредопределенныхДанных);
				Представление = Наименования[Язык.КодЯзыка][ИмяВида];
				Если ЗначениеЗаполнено(Представление) Тогда
					
					Если ВидКИОбъект.Представления.Найти(Язык.КодЯзыка, "КодЯзыка") = Неопределено Тогда
						НоваяСтрока = ВидКИОбъект.Представления.Добавить();
						НоваяСтрока.КодЯзыка     = Язык.КодЯзыка;
						НоваяСтрока.Наименование = Представление;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВидКИОбъект);
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			// Если не удалось обработать страну мира, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать вид контактной информации: %1 по причине: %2'"),
					ВидКИ.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Справочники.ВидыКонтактнойИнформации, ВидКИ.Ссылка, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, "Справочник.ВидыКонтактнойИнформации");
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов <> 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ЗадатьНаименованияНаДругихЯзыкахВидовКонтактнойИнформации не удалось обработать некоторые виды контактной информации (пропущены): %1'"),
				ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Справочники.ВидыКонтактнойИнформации,,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Процедура ЗадатьНаименованияНаДругихЯзыкахВидовКонтактнойИнформации обработала очередную порцию видов КИ: %1'"),
					ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

Процедура СообщитьОНеудачнойБлокировке(Ссылка) Экспорт
	ТекстСообщения = НСтр("ru = 'Не удалось заблокировать объект: %Объект% по причине: %Причина%'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Ссылка);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
							УровеньЖурналаРегистрации.Предупреждение,
							Ссылка.Метаданные(),
							Ссылка,
							ТекстСообщения);
КонецПроцедуры

Процедура ЗаполнитьЗначениеРазделенияПоОбластямДанных() Экспорт
	
	Если Константы.НеИспользоватьРазделениеПоОбластямДанных.Получить() Тогда
		Константы.НеИспользоватьРазделениеПоОбластямДанныхИЭтоКА.Установить(Константы.КомплекснаяАвтоматизация.Получить());
		Константы.НеИспользоватьРазделениеПоОбластямДанныхИЭтоУТ.Установить(Константы.УправлениеТорговлей.Получить());
	Иначе
		Константы.НеИспользоватьРазделениеПоОбластямДанныхИЭтоКА.Установить(Ложь);
		Константы.НеИспользоватьРазделениеПоОбластямДанныхИЭтоУТ.Установить(Ложь);
	КонецЕсли;
	
КонецПроцедуры

#Область УстановкаКонстанты_ИспользоватьУчетСебестоимости

Процедура УстановитьКонстантуИспользоватьУчетСебестоимости() Экспорт
	
	Если Константы.ИспользоватьУчетСебестоимости.Получить() Тогда
		Возврат; // уже установлена
	КонецЕсли;
	Константы.ИспользоватьУчетСебестоимости.Установить(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаКонстант_ИспользоватьАктыРасхожденийКорректировки

Процедура ИспользоватьАктыРасхожденийКорректировки_ОбработатьДанныеДляПереходаНаНовуюВерсию_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Регистрация не требуется
	Возврат;
	
КонецПроцедуры

Процедура ИспользоватьАктыРасхожденийКорректировки_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИспользоватьАктыРасхожденийПослеОтгрузкиПоРеализациям.Значение  КАК ИспользоватьАктыПоРеализациям,
	|	ИспользоватьАктыРасхожденийПослеПриемкиПоПриобретениям.Значение КАК ИспользоватьАктыПоПриобретениям,
	|	ИспользоватьКорректировкиПриобретений.Значение                  КАК ИспользоватьКорректировкиПриобретений,
	|	ИспользоватьКорректировкиРеализаций.Значение                    КАК ИспользоватьКорректировкиРеализаций,
	|	ИспользоватьАктыРасхожденийПослеОтгрузкиПоВозвратам.Значение    КАК ИспользоватьАктыРасхожденийПоВозвратамПослеОтгрузки,
	|	ИспользоватьАктыРасхожденийПослеПриемкиПоВозвратам.Значение     КАК ИспользоватьАктыРасхожденийПоВозвратамПослеПриемки
	|ИЗ
	|	Константа.ИспользоватьАктыРасхожденийПослеОтгрузкиПоРеализациям КАК
	|		ИспользоватьАктыРасхожденийПослеОтгрузкиПоРеализациям,
	|	Константа.ВестиУчетМаркируемойПродукцииИСМП КАК ВестиУчетМаркируемойПродукцииИСМП,
	|	Константа.ИспользоватьАктыРасхожденийПослеПриемкиПоПриобретениям КАК
	|		ИспользоватьАктыРасхожденийПослеПриемкиПоПриобретениям,
	|	Константа.ИспользоватьКорректировкиПриобретений КАК ИспользоватьКорректировкиПриобретений,
	|	Константа.ИспользоватьКорректировкиРеализаций КАК ИспользоватьКорректировкиРеализаций,
	|	Константа.ИспользоватьАктыРасхожденийПослеОтгрузкиПоВозвратам КАК
	|		ИспользоватьАктыРасхожденийПослеОтгрузкиПоВозвратам,
	|	Константа.ИспользоватьАктыРасхожденийПослеПриемкиПоВозвратам КАК ИспользоватьАктыРасхожденийПослеПриемкиПоВозвратам
	|ГДЕ
	|	(ВестиУчетМаркируемойПродукцииИСМП.Значение)
	|	И НЕ (ИспользоватьАктыРасхожденийПослеОтгрузкиПоРеализациям.Значение
	|	И ИспользоватьАктыРасхожденийПослеПриемкиПоПриобретениям.Значение
	|	И ИспользоватьКорректировкиПриобретений.Значение
	|	И ИспользоватьКорректировкиРеализаций.Значение
	|	И ИспользоватьАктыРасхожденийПослеОтгрузкиПоВозвратам.Значение
	|	И ИспользоватьАктыРасхожденийПослеПриемкиПоВозвратам.Значение)";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		НачатьТранзакцию();
		Попытка
			
			Если Не Выборка.ИспользоватьАктыПоРеализациям Тогда
				МенеджерЗначения = Константы.ИспользоватьАктыРасхожденийПослеОтгрузкиПоРеализациям.СоздатьМенеджерЗначения();
				МенеджерЗначения.Значение = Истина;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
			КонецЕсли;
			
			Если Не Выборка.ИспользоватьАктыПоПриобретениям Тогда
				МенеджерЗначения = Константы.ИспользоватьАктыРасхожденийПослеПриемкиПоПриобретениям.СоздатьМенеджерЗначения();
				МенеджерЗначения.Значение = Истина;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
			КонецЕсли;
			
			Если Не Выборка.ИспользоватьАктыРасхожденийПоВозвратамПослеОтгрузки Тогда
				МенеджерЗначения = Константы.ИспользоватьАктыРасхожденийПослеОтгрузкиПоВозвратам.СоздатьМенеджерЗначения();
				МенеджерЗначения.Значение = Истина;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
			КонецЕсли;
			
			Если Не Выборка.ИспользоватьАктыРасхожденийПоВозвратамПослеПриемки Тогда
				МенеджерЗначения = Константы.ИспользоватьАктыРасхожденийПослеПриемкиПоВозвратам.СоздатьМенеджерЗначения();
				МенеджерЗначения.Значение = Истина;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
			КонецЕсли;
			
			Если Не Выборка.ИспользоватьКорректировкиПриобретений Тогда
				МенеджерЗначения = Константы.ИспользоватьКорректировкиПриобретений.СоздатьМенеджерЗначения();
				МенеджерЗначения.Значение = Истина;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
			КонецЕсли;
			
			Если Не Выборка.ИспользоватьКорректировкиРеализаций Тогда
				МенеджерЗначения = Константы.ИспользоватьКорректировкиРеализаций.СоздатьМенеджерЗначения();
				МенеджерЗначения.Значение = Истина;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось включить использование актов о расхождениях или корректировок при использовании маркируемой продукции: %Причина%'",
				ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,,,
				ТекстСообщения);
				
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформация

// Процедура обновления ИБ для справочника видов контактной информации.
//
// Инструкция:
// Для каждого объекта, владельца КИ, для каждого соответствующего ему вида КИ добавить 
// строчку вида: ОбновитьВидКИ(.....). При этом,
// важен порядок в котором будут осуществляться эти вызовы, чем раньше вызов для вида КИ,
// тем выше этот вид КИ будет располагаться на форме объекта.
//
// Параметры функции УправлениеКонтактнойИнформацией.ОбновитьВидКИ:
// 1. Вид КИ - Ссылка на предопределенный вид КИ.
// 2. Тип КИ - Ссылка на перечисление
// 3. МожноИзменятьСпособРедактирования  - Определяет, можно ли в режиме Предприятие изменить способ редактирования,
//                                         например, для адресов, которые попадают в регл. отчетность, нужно
//                                         запретить возможность изменения.
// 4. РедактированиеТолькоВДиалоге       - Если установить Истина, то будет значение вида КИ можно будет
//                                         редактировать только в форме ввода (имеет смысл только для
//                                         адресов, телефонов и факсов).
// 5. АдресТолькоРоссийский              - Если установить Истина, то для адресов можно будет ввести 
//                                         только российский адрес (имеет смысл только для адресов).
// 6. Порядок                            - Определяет порядок элемента, для сортировки относительно других
//
//
Процедура ЗаполнитьСвойстваВидовКонтактнойИнформации() Экспорт
	
	// СтандартныеПодсистемы 
	// СтандартныеПодсистемы.Пользователи
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailПользователя,
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, 	Истина, Ложь, Ложь, 1);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонПользователя,
		Перечисления.ТипыКонтактнойИнформации.Телефон,               	Истина, Ложь, Ложь, 2);
	// Конец СтандартныеПодсистемы.Пользователи
	
	// СтандартныеПодсистемы.Организации
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Адрес,                 	Истина, Ложь, Истина, 12);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Адрес,                 	Истина, Ложь,   Ложь, 13);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.МеждународныйАдресОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Адрес,                	Истина, Ложь,   Ложь, 14);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Телефон,               	Истина, Ложь,   Ложь, 15);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Факс,                  	Истина, Ложь,   Ложь, 16);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailОрганизации,
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, 	Истина, Ложь,   Ложь, 17);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Адрес,                 	Истина, Ложь,   Ложь, 18);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Другое,                	Истина, Ложь,   Ложь, 19);
	// Конец СтандартныеПодсистемы.Организации
	// Конец СтандартныеПодсистемы 
	
	// Справочник "Контрагенты"
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента,
		Перечисления.ТипыКонтактнойИнформации.Адрес, 					Истина, Ложь, Ложь, 3);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
		Перечисления.ТипыКонтактнойИнформации.Адрес, 					Истина, Ложь, Ложь, 4);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента,
		Перечисления.ТипыКонтактнойИнформации.Адрес, 					Истина, Ложь, Ложь, 5);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.МеждународныйАдресКонтрагента,
		Перечисления.ТипыКонтактнойИнформации.Адрес, 					Истина, Ложь, Ложь, 6);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,
		Перечисления.ТипыКонтактнойИнформации.Телефон, 					Истина, Ложь, Ложь, 7);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты,
		Перечисления.ТипыКонтактнойИнформации.Факс, 					Истина, Ложь, Ложь, 8);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailКонтрагента,
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, 	Истина, Ложь, Ложь, 9);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты,
		Перечисления.ТипыКонтактнойИнформации.Другое, 					Истина, Ложь, Ложь, 10);
	
	// Справочник "Партнеры"
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресПартнера,
		Перечисления.ТипыКонтактнойИнформации.Адрес,                 	Истина, Ложь, Ложь, 6);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонПартнера,
		Перечисления.ТипыКонтактнойИнформации.Телефон,               	Истина, Ложь, Ложь, 7);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailПартнера,
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, 	Истина, Ложь, Ложь, 8);
	
	// Справочник "Контактные лица партнеров"
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица,
		Перечисления.ТипыКонтактнойИнформации.Телефон,               	Истина, Ложь, Ложь, 9);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица,
		Перечисления.ТипыКонтактнойИнформации.Телефон,               	Истина, Ложь, Ложь, 10);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица,
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, 	Истина, Ложь, Ложь, 11);
	
	// Справочник "Физические лица"
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица,
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,	Истина, Ложь, Ложь, 19);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица,
		Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина, Ложь, Ложь, 20);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица,
		Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина, Ложь, Ложь, 22);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица,
		Перечисления.ТипыКонтактнойИнформации.Адрес,					Истина, Ложь, Ложь, 23);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица,
		Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина, Ложь, Ложь, 24);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица,
		Перечисления.ТипыКонтактнойИнформации.Адрес,					Истина, Ложь, Ложь, 25);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица,
		Перечисления.ТипыКонтактнойИнформации.Адрес,					Истина, Ложь, Ложь, 26);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица,
		Перечисления.ТипыКонтактнойИнформации.Адрес,					Истина, Ложь, Ложь, 27);
	
	// Справочник "Склады"
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресСклада,
		Перечисления.ТипыКонтактнойИнформации.Адрес,                   	Истина, Ложь, Ложь, 28);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонСклада,
		Перечисления.ТипыКонтактнойИнформации.Телефон,                 	Истина, Ложь, Ложь, 29);
	
	// Справочник "Регистрации в налоговом органе"
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресНалоговогоОргана,
		Перечисления.ТипыКонтактнойИнформации.Адрес, 					Истина, Ложь, Ложь, 30);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонНалоговогоОргана,
		Перечисления.ТипыКонтактнойИнформации.Телефон, 					Истина, Ложь, Ложь, 31);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ФактАдресОбособленногоПодразделения,
		Перечисления.ТипыКонтактнойИнформации.Адрес, 					Истина, Ложь, Ложь, 32);

	// Справочник "Торговые точки"
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресТорговойТочки,
		Перечисления.ТипыКонтактнойИнформации.Адрес,                    Истина, Ложь, Ложь, 33);
	
КонецПроцедуры

Процедура ОбновитьВидКИ(ВидКИ, Тип, МожноИзменятьСпособРедактирования, РедактированиеТолькоВДиалоге, АдресТолькоРоссийский, Порядок = Неопределено, МеждународныйФорматАдреса = Ложь)

	НастройкиПроверки = Новый Структура;
	НастройкиПроверки.Вставить("АдресТолькоРоссийский", 		АдресТолькоРоссийский);
	НастройкиПроверки.Вставить("ПроверятьКорректность", 		Ложь);
	НастройкиПроверки.Вставить("ЗапрещатьВводНекорректного", 	Ложь);
	НастройкиПроверки.Вставить("СкрыватьНеактуальныеАдреса", 	Ложь);
	НастройкиПроверки.Вставить("ВключатьСтрануВПредставление", 	Ложь);
	НастройкиПроверки.Вставить("ТелефонCДобавочнымНомером", 	Истина);
	НастройкиПроверки.Вставить("ВводитьНомерПоМаске", Ложь);
	НастройкиПроверки.Вставить("МаскаНомераТелефона", "");
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Тип);
	ПараметрыВида.Вид = ВидКИ;
	ПараметрыВида.Тип = Тип;
	ПараметрыВида.Порядок = Порядок;
	ПараметрыВида.МожноИзменятьСпособРедактирования = МожноИзменятьСпособРедактирования;
	ПараметрыВида.РедактированиеТолькоВДиалоге = РедактированиеТолькоВДиалоге;
	ПараметрыВида.ОбязательноеЗаполнение = Ложь;
	ПараметрыВида.НастройкиПроверки = НастройкиПроверки;
	ПараметрыВида.МеждународныйФорматАдреса = МеждународныйФорматАдреса;
	
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

#КонецОбласти

// Возвращает параметры выборки для СледующаяВыборкаИлиСтрокаТаблицыЗначений().
//
// Возвращаемое значение:
//  Структура - индексы для обхода таблиц с данными для обновления:
//   * ИндексПорции - Число - индекс строки в таблице порций;
//   * ИндексСтрокиВПорции - Число - индекс строки данных в порции.
//
Функция НовыеПараметрыВыборки()
	
	ПараметрыВыборки = Новый Структура;
	ПараметрыВыборки.Вставить("ИндексПорции", 0);
	ПараметрыВыборки.Вставить("ИндексСтрокиВПорции", 0);
	
	Возврат ПараметрыВыборки;
	
КонецФункции

// Итератор по выборке запроса или таблице значений.
//
// Если параметр Выборка имеет тип "ВыборкаИзРезультатаЗапроса", то в этом параметре будут данные из выборки.
// Иначе выборка выполняется из параметра Таблица, но данные для обработки все равно помещаются в параметр Выборка.
// Применим для выборки из запроса или таблицы значений в одном цикле.
//
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса - выборка запроса.
//          - СтрокаТаблицыЗначений - возвращаемое значение, если выборка выполняется из таблицы значений.
//  ОбновляемыеДанные - ТаблицаЗначений - (см. ОбновлениеИнформационнойБазыСлужебный.НовыйНаборДанныхДляОбновления()).
//                      Используется, если Выборка не задана (равна Неопределено).
//  ПараметрыВыборки - Структура - см. НовыеПараметрыВыборки().
//
// Возвращаемое значение:
//  Булево - Истина, если Выборка (возвращаемое значение) содержит данные для обработки.
//
Функция СледующаяВыборкаИлиСтрокаТаблицыЗначений(Выборка, ОбновляемыеДанные, ПараметрыВыборки)
	
	Если ТипЗнч(Выборка) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		Возврат Выборка.Следующий();
	Иначе
		ИндексПорции = ПараметрыВыборки.ИндексПорции;
		
		Если ИндексПорции >= ОбновляемыеДанные.НаборДанных.Количество() Или ИндексПорции < 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ИндексСтрокиВПорции = ПараметрыВыборки.ИндексСтрокиВПорции;
		Порция = ОбновляемыеДанные.НаборДанных[ИндексПорции].Данные;
		РазмерПорции = Порция.Количество();
		
		Если ИндексСтрокиВПорции >= РазмерПорции Или ИндексСтрокиВПорции < 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Выборка = Порция[ИндексСтрокиВПорции];
		ПараметрыВыборки.ИндексСтрокиВПорции = ПараметрыВыборки.ИндексСтрокиВПорции + 1;
		
		Если ПараметрыВыборки.ИндексСтрокиВПорции >= РазмерПорции Тогда
			ПараметрыВыборки.ИндексПорции = ПараметрыВыборки.ИндексПорции + 1;
			ПараметрыВыборки.ИндексСтрокиВПорции = 0;
		КонецЕсли;
		
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Получить имена документов в виде массива.
//
// Параметры:
//  ПолныеИменаДокументов - Строка, Массив, Неопределено - имя документа, по которому нужно переформировать движения.
//                          Например, "Документ.ПриходныйОрдерНаТовары".
//                          Если документов несколько, то нужно передать их имена в массиве.
//                          При обработке независимого регистра сведений нужно передать Неопределено.
//  ЭтоНезависимыйРегистрСведений - Булево - Истина, если документы проводятся по независимому регистру сведений.
//  ЕстьОбновляемыеДанные - Булево - Истина, если выборка данных сделана заранее (многопоточное обновление).
//
// Возвращаемое значение:
//  Массив - полные имена документов.
//
Функция ИменаДокументовВМассив(ПолныеИменаДокументов, ЭтоНезависимыйРегистрСведений, ЕстьОбновляемыеДанные = Ложь)
	
	Если ЕстьОбновляемыеДанные Тогда
		СписокДокументов = Новый Массив;
		СписокДокументов.Добавить(Неопределено);
	ИначеЕсли ТипЗнч(ПолныеИменаДокументов) = Тип("Строка") Тогда
		СписокДокументов = СтрРазделить(ПолныеИменаДокументов, ",", Ложь);
	ИначеЕсли ЭтоНезависимыйРегистрСведений Тогда
		СписокДокументов = Новый Массив;
		СписокДокументов.Добавить(Неопределено);
	Иначе
		СписокДокументов = ПолныеИменаДокументов;
	КонецЕсли;
	
	Возврат СписокДокументов;
	
КонецФункции

// Получить имена регистров в виде массива.
//
// Параметры:
//  ПолныеИменаРегистров - Строка, Массив - имя регистра, по которому нужно переформировать движения.
//                         Например, "РегистрНакопления.ТоварыНаСкладах".
//                         Если регистров несколько, то их имена нужно передать в массиве.
//
// Возвращаемое значение:
//  Массив - полные имена регистров.
//
Функция ИменаРегистровВМассив(ПолныеИменаРегистров)
	
	Если ТипЗнч(ПолныеИменаРегистров) = Тип("Строка") Тогда
		СписокРегистров = СтрРазделить(ПолныеИменаРегистров, ",", Ложь);
	Иначе
		СписокРегистров = ПолныеИменаРегистров;
	КонецЕсли;
	
	Возврат СписокРегистров;
	
КонецФункции

// Проверяет правильность заполнения первой цифры версии.
//
// Параметры:
//   ИтерацииОбновления     - Массив - массив структур, описывающих сведения об обновлении каждой
//                                     библиотеки и конфигурации, с ключами:
//       * Подсистема              - Строка - имя библиотеки или конфигурации.
//       * Версия                  - Строка - например, "2.1.3.39". Номер версии библиотеки (конфигурации).
//       * ЭтоОсновнаяКонфигурация - Булево - Истина, если это основная конфигурация, а не библиотека.
//       * Обработчики             - ТаблицаЗначений - все обработчики обновления библиотеки, описание колонок
//                                   см. в ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//       * ВыполненныеОбработчики  - ДеревоЗначений - выполненные обработчики обновления, сгруппированные по
//                                   библиотеке и номеру версии, описание колонок
//                                   см. в ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//       * ИмяОсновногоСерверногоМодуля - Строка - имя модуля библиотеки (конфигурации), который предоставляет
//                                        основные сведения о ней: имя, версия и т.д.
//       * ОсновнойСерверныйМодуль      - ОбщийМодуль - общий модуль библиотеки (конфигурации), который предоставляет
//                                        основные сведения о ней: имя, версия и т.д.
//       * ПредыдущаяВерсия             - Строка - например, "2.1.3.30". Номер версии библиотеки (конфигурации) до обновления.
//
Процедура ПроверитьНомераВерсий(ИтерацииОбновления) Экспорт
	
	Обработка = Обработки.ОписаниеОбработчиковОбновления.Создать();
	ОшибкиВерсии = Новый Массив;
	Для Каждого Подсистема Из Обработка.РазрабатываемыеПодсистемы() Цикл
		Для Каждого Итерация Из ИтерацииОбновления Цикл
			Если Подсистема <> Итерация.Подсистема Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрЧислоВхождений(Итерация.Версия, ".") = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ПерваяЦифраВерсии = СтрРазделить(Итерация.Версия,".")[0];
			Ошибки = Новый Массив;
			Для Каждого Обработчик Из Итерация.Обработчики Цикл
				Если СтрЧислоВхождений(Обработчик.Версия, ".") = 0 Тогда
					Продолжить;
				КонецЕсли;
				ПерваяЦифраОбработчика = СтрРазделить(Обработчик.Версия,".")[0];
				Если ПерваяЦифраОбработчика > ПерваяЦифраВерсии Тогда
					Ошибки.Добавить(Символы.Таб + Обработчик.Версия + " " + Обработчик.Процедура);
				КонецЕсли;
			КонецЦикла;
			Если Ошибки.Количество() > 0 Тогда
				ОшибкиВерсии.Добавить(Новый Структура("Подсистема, Ошибки", Подсистема + " " + Итерация.Версия, Ошибки));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ОшибкиВерсии.Количество() Тогда
		ТекстСообщения = 
			"Обнаружено не соответствие первой цифры номера версии у обработчиков.
			|Следующие обработчики никогда не выполнятся:" + Символы.ПС;
		Для Каждого Описание Из ОшибкиВерсии Цикл
			Текст = Описание.Подсистема + ":" + Символы.ПС;
			Текст = Текст + СтрСоединить(Описание.Ошибки, Символы.ПС);
			ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС) + Текст;
		КонецЦикла;
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
