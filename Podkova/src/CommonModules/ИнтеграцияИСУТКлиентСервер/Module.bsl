// Универсальные механизмы интеграции ИС (ЕГАИС, ГИСМ, ВЕТИС, ...)

#Область ПрограммныйИнтерфейс

//Определяет соответствие переданного документа проверяемому типу.
//
// Параметры:
//  Контекст - ФормаКлиентскогоПриложения, ДокументСсылка - Контекст для определения типа документа.
//  Имя      - Строка - имя объекта метаданного документа.
//
// Возвращаемое значение:
// 	Булево - это документ.
Функция ЭтоДокументПоНаименованию(Контекст, Имя) Экспорт

	Результат = Ложь;

	ТипКонтекста = ТипЗнч(Контекст);
	ТипДокумента = Тип(СтрШаблон("ДокументСсылка.%1", Имя));

	Если ТипКонтекста = Тип("ФормаКлиентскогоПриложения") Тогда
		Если СтрНачинаетсяС(Контекст.ИмяФормы, СтрШаблон("Документ.%1", Имя)) Тогда
			Результат = Истина;
		КонецЕсли;
	ИначеЕсли ТипКонтекста = ТипДокумента Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции

//Возвращает значение особености учета номенклатуры по переданному виду продукции ИС
//или вид продукции ИС по переданной особенности учета номенклатуры
// Параметры:
//  ОсобенностьУчетаИлиВидПродукции - ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры, ПеречислениеСсылка.ВидыПродукцииИС - особеннсоть учета номенклатуры или вид продукции ИС
// Возвращаемое значение:
//  ПеречислениеСсылка.ВидыПродукцииИС, ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры - вид продукции ИС или особенность учета номенклатуры
//
Функция ОсобенностьУчетаПоВидуПродукции(ОсобенностьУчетаИлиВидПродукции) Экспорт
	
	Если ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Шины") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Фотоаппараты") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Фотоаппараты");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Велосипеды") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Велосипеды");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.КреслаКоляски") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Духи") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.УпакованнаяВода") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Шины");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Фотоаппараты") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Фотоаппараты");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Велосипеды") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Велосипеды");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.КреслаКоляски");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Духи");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак");
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.УпакованнаяВода");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ЭтоВозвратТовараОтРозничногоКлиента(Контекст) Экспорт
	
	ХозяйственнаяОперация = ИнтеграцияИСМПСлужебныйКлиентСервер.ЗначениеСвойстваКонтекста(Контекст, "ХозяйственнаяОперация");
	Если ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Партнер = ИнтеграцияИСМПСлужебныйКлиентСервер.ЗначениеСвойстваКонтекста(Контекст, "Партнер");
	Если Партнер = ПредопределенноеЗначение("Справочник.Партнеры.РозничныйПокупатель") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ЭтоРеализацияТоваровРозничномуКлиенту(Контекст) Экспорт
	
	Партнер = ИнтеграцияИСМПСлужебныйКлиентСервер.ЗначениеСвойстваКонтекста(Контекст, "Партнер");
		
	Если Партнер = ПредопределенноеЗначение("Справочник.Партнеры.РозничныйПокупатель") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВключитьПоддержкуВидовПродукцииИС(Контекст, ПараметрыСканирования, ВидПродукции) Экспорт
	
	Если ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ЧекККМ") Тогда
		
		ЗаполнитьПараметрыСканированияЧекККМ(ПараметрыСканирования, Контекст, ВидПродукции, Ложь);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ЧекККМКоррекции") Тогда
		
		ЗаполнитьПараметрыСканированияЧекККМКоррекции(ПараметрыСканирования, Контекст, ВидПродукции, Ложь);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ЧекККМВозврат") Тогда
		
		ЗаполнитьПараметрыСканированияЧекККМВозврат(ПараметрыСканирования, Контекст, ВидПродукции, Ложь);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.РеализацияТоваровУслуг") Тогда
		
		ЗаполнитьПараметрыСканированияРеализацияТоваровУслуг(ПараметрыСканирования, Контекст, ВидПродукции);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.АктОРасхожденияхПослеОтгрузки") Тогда
		
		ЗаполнитьПараметрыСканированияАктОРасхожденияхПослеОтгрузки(ПараметрыСканирования, Контекст, ВидПродукции);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.КорректировкаПриобретения") Тогда
		
		ЗаполнитьПараметрыСканированияКорректировкаПриобретения(ПараметрыСканирования, Контекст, ВидПродукции);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ВозвратТоваровОтКлиента") Тогда
		
		ЗаполнитьПараметрыСканированияВозвратТоваровОтКлиента(ПараметрыСканирования, Контекст, ВидПродукции);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ПриобретениеТоваровУслуг") Тогда
		
		ЗаполнитьПараметрыСканированияПриобретениеТоваровУслуг(ПараметрыСканирования, Контекст, ВидПродукции);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ВозвратТоваровПоставщику") Тогда
		
		ЗаполнитьПараметрыСканированияВозвратТоваровПоставщику(ПараметрыСканирования, Контекст, ВидПродукции);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ПеремещениеТоваров") Тогда
		
		ЗаполнитьПараметрыСканированияПеремещениеТоваров(ПараметрыСканирования, Контекст, ВидПродукции);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.КорректировкаРеализации") Тогда
		
		ЗаполнитьПараметрыСканированияКорректировкаРеализации(ПараметрыСканирования, Контекст, ВидПродукции);
		
	КонецЕсли;
	
	ЗаполнитьБазовыеПараметрыСканирования(ПараметрыСканирования, Контекст);
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьПараметрыСканированияЧекККМКоррекции(ПараметрыСканирования, Контекст, ВидПродукции, ПроверкаКоличества = Неопределено)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок = "Продажа";
	Если Не ЗначениеЗаполнено(ВидПродукции) Тогда
		ПараметрыСканирования.ДопустимыеВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПустаяСсылка"));
	КонецЕсли;
	
	#Область ПоддержкаАлкогольнойПродукции
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст,"ИспользуетсяРегистрацияРозничныхПродажВЕГАИС")
		И ШтрихкодированиеЕГАИСКлиентСервер.ВключитьПоддержкуАлкогольнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
		
		ШтрихкодированиеЕГАИСКлиентСервер.ЗаполнитьБазовыеПараметрыСканирования(ПараметрыСканирования, Контекст);
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ВНаличии"));
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ПустаяСсылка"));
		
		ПараметрыСканирования.КонтрольАкцизныхМарок         = Истина;
		ПараметрыСканирования.Операция                      = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЧекККМ");
		ПараметрыСканирования.СоздаватьШтрихкодУпаковки     = Истина;
		
		Если ПроверкаКоличества = Истина Тогда
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Штрихкод");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Помещение");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("НоменклатураНабора");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("ХарактеристикаНабора");
		Иначе
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Цена");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("СтавкаНДС");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Штрихкод");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Продавец");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Помещение");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("НоменклатураНабора");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("ХарактеристикаНабора");
		КонецЕсли;
		
		ПараметрыСканирования.ОрганизацияЕГАИС = ИсточникДанных.ОрганизацияЕГАИС;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПоддержкаПродукцииИСМП
	
	Если ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаРозничнойПродажи(ПараметрыСканирования, ВидПродукции) Тогда
		
		ПараметрыСканирования.КонтролироватьОкончаниеСрокаГодности = Ложь;
		Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
			
			Реквизиты = Новый Структура("Склад", ИсточникДанных.Склад);
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсточникДанных, "Организация") Тогда
				Реквизиты.Вставить("Организация", ИсточникДанных.Организация);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ПараметрыСканирования, Реквизиты);
			
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияЧекККМ(ПараметрыСканирования, Контекст, ВидПродукции, ПроверкаКоличества = Неопределено)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок = "Продажа";
	ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции = Ложь;
	Если Не ЗначениеЗаполнено(ВидПродукции) Тогда
		ПараметрыСканирования.ДопустимыеВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПустаяСсылка"));
	КонецЕсли;
	
	#Область ПоддержкаАлкогольнойПродукции
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст,"ИспользуетсяРегистрацияРозничныхПродажВЕГАИС")
		И ШтрихкодированиеЕГАИСКлиентСервер.ВключитьПоддержкуАлкогольнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
		
		ШтрихкодированиеЕГАИСКлиентСервер.ЗаполнитьБазовыеПараметрыСканирования(ПараметрыСканирования, ИсточникДанных);
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ВНаличии"));
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ПустаяСсылка"));
		
		ПараметрыСканирования.КонтрольАкцизныхМарок              = Истина;
		ПараметрыСканирования.Операция                           = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЧекККМ");
		ПараметрыСканирования.СоздаватьШтрихкодУпаковки          = Истина;
		ПараметрыСканирования.РазрешенаОбработкаБезУказанияМарки = Истина;
		
		Если ПроверкаКоличества = Истина Тогда
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Штрихкод");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Помещение");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("НоменклатураНабора");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("ХарактеристикаНабора");
		Иначе
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Цена");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("СтавкаНДС");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Штрихкод");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Продавец");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Помещение");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("НоменклатураНабора");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("ХарактеристикаНабора");
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПоддержкаПродукцииИСМП
	
	Если ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаРозничнойПродажи(ПараметрыСканирования, ВидПродукции) Тогда
		
		Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
			
			Реквизиты = Новый Структура("Склад, ДатаДокумента", ИсточникДанных.Склад, ИсточникДанных.Дата);
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсточникДанных, "Организация") Тогда
				Реквизиты.Вставить("Организация", ИсточникДанных.Организация);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ПараметрыСканирования, Реквизиты);
			
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияЧекККМВозврат(ПараметрыСканирования, Контекст, ВидПродукции, ПроверкаКоличества = Неопределено)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок = "Возврат";
	Если Не ЗначениеЗаполнено(ВидПродукции) Тогда
		ПараметрыСканирования.ДопустимыеВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПустаяСсылка"));
	КонецЕсли;
	
	Если ШтрихкодированиеЕГАИСКлиентСервер.ВключитьПоддержкуАлкогольнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
		
		ШтрихкодированиеЕГАИСКлиентСервер.ЗаполнитьБазовыеПараметрыСканирования(ПараметрыСканирования, ИсточникДанных);
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.Реализована"));
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ПустаяСсылка"));
		
		ПараметрыСканирования.КонтрольАкцизныхМарок              = Истина;
		ПараметрыСканирования.Операция                           = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЧекККМ");
		ПараметрыСканирования.СоздаватьШтрихкодУпаковки          = Истина;
		ПараметрыСканирования.РазрешенаОбработкаБезУказанияМарки = Истина;
		
		Если ПроверкаКоличества = Истина Тогда
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Штрихкод");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Помещение");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("НоменклатураНабора");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("ХарактеристикаНабора");
		Иначе
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Цена");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("СтавкаНДС");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Штрихкод");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Продавец");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Помещение");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("НоменклатураНабора");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("ХарактеристикаНабора");
		КонецЕсли;
		
	КонецЕсли;
	
	#Область ПоддержкаПродукцииИСМП
	
	ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаРозничногоВозврата(ПараметрыСканирования, ВидПродукции);
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияРеализацияТоваровУслуг(ПараметрыСканирования, Контекст, ВидПродукции)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	#Область Метаданные
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки         = "ШтрихкодУпаковки";
	
	#КонецОбласти
	
	#Область ПоддержкаПродукцииИСМП
	
	Если ЭтоРеализацияТоваровРозничномуКлиенту(Контекст) Тогда
		
		ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаРозничнойПродажи(ПараметрыСканирования, ВидПродукции);
		
	Иначе
		
		ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаОптовойОтгрузки(ПараметрыСканирования, ВидПродукции);
		
	КонецЕсли;
	
	Реквизиты = Новый Структура("ДатаДокумента", ИсточникДанных.Дата);
	ЗаполнитьЗначенияСвойств(ПараметрыСканирования, Реквизиты);
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияАктОРасхожденияхПослеОтгрузки(ПараметрыСканирования, Контекст, ВидПродукции)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	#Область Метаданные
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки = "ШтрихкодУпаковки";
	
	#КонецОбласти
	
	#Область ПоддержкаПродукцииИСМП
	
	Реквизиты = Новый Структура("ДатаДокумента", ИсточникДанных.Дата);
	Если ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаОптовойОтгрузки(ПараметрыСканирования, ВидПродукции) Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыСканирования, Реквизиты);
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияКорректировкаПриобретения(ПараметрыСканирования, Контекст, ВидПродукции)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	#Область Метаданные
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки = "ШтрихкодУпаковки";
	
	#КонецОбласти
	
	#Область ПоддержкаПродукцииИСМП
	
	Реквизиты = Новый Структура("ДатаДокумента", ИсточникДанных.Дата);
	Если ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаОптовойОтгрузки(ПараметрыСканирования, ВидПродукции) Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыСканирования, Реквизиты);
	КонецЕсли;
	
	#КонецОбласти
	
	ПараметрыСканирования.СопоставлятьНоменклатуру  = Ложь;
	ПараметрыСканирования.СоздаватьШтрихкодУпаковки = Ложь;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияКорректировкаРеализации(ПараметрыСканирования, Контекст, ВидПродукции)
	
	#Область Метаданные
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки = "ШтрихкодУпаковки";
	
	#КонецОбласти
	
	#Область ПоддержкаПродукцииИСМП
	
	Если ЭтоРеализацияТоваровРозничномуКлиенту(Контекст) Тогда
		
		ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаРозничнойПродажи(ПараметрыСканирования, ВидПродукции);
		
	Иначе
		
		ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаОптовойОтгрузки(ПараметрыСканирования, ВидПродукции);
		
	КонецЕсли;
	
	НастройкиИСМП = Новый Структура;
	НастройкиИСМП.Вставить("КонтролироватьОкончаниеСрокаГодности", Ложь);
	НастройкиИСМП.Вставить("ЗапрашиватьСтатусыИСМП",               Ложь);
	НастройкиИСМП.Вставить("ДопустимыПроверкиСеройЗоныМОТП",       Ложь);
	
	ЗаполнитьЗначенияСвойств(ПараметрыСканирования, НастройкиИСМП);

	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияВозвратТоваровОтКлиента(ПараметрыСканирования, Контекст, ВидПродукции)
	
	#Область Метаданные
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки = "ШтрихкодУпаковки";
	
	#КонецОбласти
	
	#Область ПоддержкаПродукцииИСМП
	
	Если ЭтоВозвратТовараОтРозничногоКлиента(Контекст) Тогда
		
		ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаРозничногоВозврата(ПараметрыСканирования, ВидПродукции);
		
	Иначе
		
		ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаОптовогоВозврата(ПараметрыСканирования, ВидПродукции);
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияПриобретениеТоваровУслуг(ПараметрыСканирования, Контекст, ВидПродукции)

	#Область Метаданные
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки = "ШтрихкодУпаковки";
	
	#КонецОбласти
	
	#Область ПоддержкаПродукцииИСМП
	
	ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаЗакупки(ПараметрыСканирования, ВидПродукции);

	#КонецОбласти
	
	ПараметрыСканирования.СопоставлятьНоменклатуру  = Ложь;
	ПараметрыСканирования.СоздаватьШтрихкодУпаковки = Ложь;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияВозвратТоваровПоставщику(ПараметрыСканирования, Контекст, ВидПродукции)
	
	#Область Метаданные
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки = "ШтрихкодУпаковки";
	
	#КонецОбласти
	
	#Область ПоддержкаПродукциИСМП
	
	ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаОптовойОтгрузки(ПараметрыСканирования, ВидПродукции);
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияПеремещениеТоваров(ПараметрыСканирования, Контекст, ВидПродукции)
	
	#Область Метаданные
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки = "ШтрихкодУпаковки";
	
	#КонецОбласти
	
	#Область ПоддержкаПродукцииИСМП
	
	ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаОптовойОтгрузки(ПараметрыСканирования, ВидПродукции);
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьБазовыеПараметрыСканирования(ПараметрыСканирования, Контекст)
	
	Если ШтрихкодированиеИСКлиентСервер.ДопустимВидПродукции(ПараметрыСканирования, ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак"))
		Или ШтрихкодированиеИСКлиентСервер.ДопустимВидПродукции(ПараметрыСканирования, ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак")) Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект")
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст.Объект, "Организация") Тогда
			ПараметрыСканирования.Организация = Контекст.Объект.Организация;
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Организация") Тогда
			ПараметрыСканирования.Организация = Контекст.Организация;
		КонецЕсли;
		
		Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения")
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "ПараметрыУказанияСерий") Тогда
			ПараметрыСканирования.ПараметрыУказанияСерий = Контекст.ПараметрыУказанияСерий;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
