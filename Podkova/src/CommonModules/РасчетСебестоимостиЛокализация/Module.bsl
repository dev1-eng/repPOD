
#Область ПрограммныйИнтерфейс

// Выполняет локализованный расчет себестоимости.
//
// Параметры:
//	ПериодРасчета - Дата - начало периода (месяца), до которого надо выполнить расчет
//	МассивОрганизаций - Массив - организации, по которым надо выполнить расчет
//	ВыполняетсяЗакрытиеМесяца - Булево - признак выполнения фонового задания закрытия месяца.
//	АвтоматическоеТестирование - Булево - признак выполнения автоматического тестирования себестоимости
//
// Возвращаемое значение:
//	Булево - признак выполнения локализованного расчета себестоимости.
//
Функция РассчитатьВсе(Знач ПериодРасчета, МассивОрганизаций, ВыполняетсяЗакрытиеМесяца, АвтоматическоеТестирование) Экспорт
	ВыполненЛокализованныйРасчет = Ложь;
	//++ Локализация
	Если НЕ РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22(ПериодРасчета) Тогда
		// Расчет будет выполнен в версии 2.1
		ПартионныйУчет.РассчитатьВсе(ПериодРасчета, МассивОрганизаций, ВыполняетсяЗакрытиеМесяца, АвтоматическоеТестирование);
		ВыполненЛокализованныйРасчет = Истина;
	КонецЕсли;
	//-- Локализация
	Возврат ВыполненЛокализованныйРасчет;
КонецФункции

// Обновления стоимости товаров регламентным заданием.
// //
// Параметры:
//	Период - Дата - дата начала расчета.
//
// Возвращаемое значение:
//	Булево - признак выполнения локализованного расчета себестоимости.
//
Функция ПредварительныйРасчетСебестоимости(Период = Неопределено) Экспорт
	ВыполненЛокализованныйРасчет = Ложь;
	//++ Локализация
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.РасчетСебестоимости); // проверка возможности запуска задания
	
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		Дата = ТекущаяДатаСеанса();
	Иначе
		Дата = Период;
	КонецЕсли;
	НачалоПериода = НачалоМесяца(Дата);
	КонецПериода  = КонецМесяца(Дата);
	
	Если НЕ РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22(НачалоПериода) Тогда
		Если РасчетСебестоимостиПовтИсп.ПартионныйУчетНеИспользуется(НачалоПериода) Тогда
			ПартионныйУчет.ТестРассчитать("РассчитатьПартииПроизводства", НачалоПериода, КонецПериода);
			ПартионныйУчет.ТестРассчитать("РассчитатьСебестоимостьПроизводства", НачалоПериода, КонецПериода);
		ИначеЕсли РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии21(НачалоПериода) Тогда
			ПартионныйУчет.ТестРассчитать("РассчитатьПартииТоваров", НачалоПериода, КонецПериода);
			ПартионныйУчет.ТестРассчитать("РассчитатьПартииПроизводства", НачалоПериода, КонецПериода);
			ПартионныйУчет.ТестРассчитать("РассчитатьСебестоимостьПроизводства", НачалоПериода, КонецПериода);
		КонецЕсли;
		
		ПараметрыЗапускаРасчетаСебестоимости = Новый Структура;
		ПараметрыЗапускаРасчетаСебестоимости.Вставить("Дата", 					Дата);
		ПараметрыЗапускаРасчетаСебестоимости.Вставить("ПредварительныйРасчет", 	Истина);
		ПараметрыЗапускаРасчетаСебестоимости.Вставить("МассивОрганизаций", 		Неопределено);
		ПараметрыЗапускаРасчетаСебестоимости.Вставить("РегламентноеЗадание", 	Истина);
		ПараметрыЗапускаРасчетаСебестоимости.Вставить("МестоВызоваРасчета", 	"РасчетСебестоимостиКорректировкаСтоимости.ПредварительныйРасчетСебестоимости");
		
		СебестоимостьРассчитана = РасчетСебестоимостиКорректировкаСтоимости.РассчитатьВсеВПопыткеИсключении(ПараметрыЗапускаРасчетаСебестоимости);
		ВыполненЛокализованныйРасчет = Истина;
	КонецЕсли;
	//-- Локализация
	Возврат ВыполненЛокализованныйРасчет;
КонецФункции

#Область ЭтапыРасчета

// Вызов процедур локализованного расчета себестоимости.
//
// Параметры:
//	ПараметрыРасчета - Структура - Параметры операций закрытия месяца.
//
// Возвращаемое значение:
//	Булево - выполнен локализованный расчет себестоимости
//
Функция РассчитатьСебестоимость(ПараметрыРасчета) Экспорт
	ВыполненЛокализованныйРасчет = Ложь;
	//++ Локализация
	ФИФОСкользящаяОценкаВерсии21 = НЕ ПараметрыРасчета.ПредварительныйРасчет И НЕ ПараметрыРасчета.ПартионныйУчетВерсии22
	 	И ПараметрыРасчета.МетодОценки = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка;
	Если ФИФОСкользящаяОценкаВерсии21 Тогда
		РасчетСебестоимостиПартионныйУчет21.РасчетСебестоимости_ФИФОСкользящаяОценкаВерсии21(ПараметрыРасчета);
		ВыполненЛокализованныйРасчет = Истина;
	КонецЕсли;
	//-- Локализация
	Возврат ВыполненЛокализованныйРасчет;
КонецФункции

// Вызов процедур распределения материальных затрат в локализованной версии.
//
// Параметры:
//	ПараметрыРасчета - Структура - Параметры операций закрытия месяца
//
Процедура РаспределениеМатериальныхЗатрат(ПараметрыРасчета) Экспорт
	//++ Локализация
	//-- Локализация
	Возврат;
КонецПроцедуры

// Вызов процедур распределения партий НДС в локализованной версии.
//
// Параметры:
//	ПараметрыРасчета - Структура - Параметры операций закрытия месяца
//	СтрокаСхемыРасчета - Структура - Параметры текущего расчета 
//	НомерЭтапа - Число - Номер этапа распределения партий НДС
//
Процедура РаспределениеПартийНДС(ПараметрыРасчета, СтрокаСхемыРасчета, НомерЭтапа) Экспорт
	//++ Локализация
	
	Если НомерЭтапа = 1 Тогда
		
		// Этап 11
		// Формирует движения по регистрам:
		// - ДетализацияПартийТоваровДляНДСиУСН
		РасчетСебестоимостиНДС.ПодготовкаДанныхДляУчетаНДСиУСН(ПараметрыРасчета);
		
		// Этап второго предварительного расчета
		//   - для расчета регл. сумм без учета корректировок стоимости
		// Заполняет временные таблицы:
		// - ВТСтоимостьПартийТоваров
		// Формирует движения по регистрам:
		// - СтоимостьТоваров
		Если ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии24.ИспользуютВТекущемПериоде.Количество() > 0 Тогда
			РасчетСебестоимостиКорректировкаСтоимости.РасчетСебестоимостиТоваров(ПараметрыРасчета, СтрокаСхемыРасчета, Истина, Ложь);
		КонецЕсли;
		
		// Этап 11.2
		// Формирует движения по регистрам:
		// - ДетализацияПартийТоваровДляНДСиУСН2_4
		РасчетСебестоимостиНДС.ПодготовкаДанныхДляУчетаНДСиУСН2_4(ПараметрыРасчета);
	ИначеЕсли НомерЭтапа = 2 Тогда
		
		
		// Этап 12.2
		// Формирует движения по регистрам:
		// - ПартииНДСКРаспределению
		РасчетСебестоимостиНДС.ПодготовкаДанныхДляПартийНДСКРаспределению(ПараметрыРасчета);
		
		// Этап 13
		// Формирует документы РаспределениеНДС с движениями по регистрам:
		// - ПартииПрочихРасходов
		// - ПрочиеАктивыПассивы
		// - ПрочиеРасходы.
		РасчетСебестоимостиНДС.РаспределениеНДСПоВидамНалогообложения(ПараметрыРасчета);
	КонецЕсли;

	//-- Локализация
	Возврат;
КонецПроцедуры

#КонецОбласти

#Область Инициализация

// Инициализирует общие параметры расчета, описывающие обслуживаемые механизмом расчета регистры.
//
// Параметры:
//	ПараметрыРасчета - Структура - параметры расчета себестоимости
//	
Процедура ИнициализироватьОбслуживаемыеРегистры(ПараметрыРасчета) Экспорт
	
	//++ Локализация
	РасчетСебестоимостиНДС.ИнициализироватьОбслуживаемыеРегистры(ПараметрыРасчета);
	//-- Локализация
	
КонецПроцедуры

// Дополняет перечень документов, которые могут иметь движения в разных месяцах или по нескольким организациям.
//
// Параметры:
//	РазныеПериоды - Булево - добавлять в результат документы с движениями в разных периодах
//	РазныеОрганизации - Булево - добавлять в результат документы с движениями по нескольким организациям
//	ИмяРегистра - Строка - имя регистра накопления, для которого нужно получить перечень документов;
//		пустое значение - перечень документов для всех регистров.
//	ОписаниеДокументов - Соответствие - Ключ - ОбъектМетаданных.
//
Процедура ДополнитьДокументыСРазнымиПериодамиИлиОрганизациямиВДвижениях(РазныеПериоды, РазныеОрганизации, ИмяРегистра, ОписаниеДокументов) Экспорт
	//++ Локализация
	Значение = Истина;
	Если ИмяРегистра = ""
	 ИЛИ ИмяРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя Тогда
		
		Если РазныеПериоды Тогда
		КонецЕсли; 
	КонецЕсли;
	
	РасчетСебестоимостиНДС.ДополнитьДокументыСРазнымиПериодамиИлиОрганизациямиВДвижениях(РазныеПериоды, РазныеОрганизации, ИмяРегистра, ОписаниеДокументов);
	//-- Локализация
	
КонецПроцедуры

// Формирует общие временные таблицы для отбора данных в запросах.
//
Процедура ИнициализироватьВременныеТаблицыДляОтборов(ПараметрыРасчета) Экспорт
	//++ Локализация
	РасчетСебестоимостиНДС.ИнициализироватьВременныеТаблицыДляОтборов(ПараметрыРасчета);
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


#Область ПроцедурыЭтапа_ЗаполнениеПартийВРегистреСебестоимостьТоваров

Функция ТекстЗапросаДляПартийТоваров() Экспорт
	
	ТекстЗапроса = ""
		//++ Локализация
		+ РасчетСебестоимостиПартионныйУчет21.ТекстЗапросаДляПартийТоваров()
		//-- Локализация
		+ "";
	Возврат ТекстЗапроса;	
	
КонецФункции

#КонецОбласти

#Область ПроцедурыЭтапа10_РаспределениеДопРасходовМеждуПартиямиИТоварами

Функция ТекстТаможенныеДекларацииИПоступления() Экспорт // вт Декларации, КоличествоДеклараций
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НЕОПРЕДЕЛЕНО КАК Ссылка,
		|	НЕОПРЕДЕЛЕНО КАК Поступление
		|ПОМЕСТИТЬ
		|	Декларации
		|;
		|ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК Поступление,
		|	1 КАК Количество
		|ПОМЕСТИТЬ
		|	КоличествоДеклараций
		|";
	//++ Локализация
	ТекстЗапроса = РасчетСебестоимостиПартионныйУчет21.ТекстТаможенныеДекларацииИПоступления();
	//-- Локализация
	Возврат ТекстЗапроса;
КонецФункции

#КонецОбласти


#Область ПроцедурыЭтапов_Контекстные

// Используется для всех вызовов заполнения расчетной партии.
//
Процедура ЗаполнитьРасчетнуюПартию(ПараметрыРасчета, Контекст, РасчетнаяПартия, Расход, Приход, ПартияЗаполнена) Экспорт
	
	Если ПартияЗаполнена Тогда
		Возврат;
	КонецЕсли;
	
	//++ Локализация
	//++ Устарело_Производство21
	//-- Устарело_Производство21
	РасчетСебестоимостиНДС.ЗаполнитьРасчетнуюПартию(ПараметрыРасчета, Контекст, РасчетнаяПартия, Расход, Приход, ПартияЗаполнена);
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ВключитьИсключитьНДСВСтоимость

Процедура ВключитьИсключитьНДСВСтоимость(ПараметрыРасчета) Экспорт
	
	//++ Локализация
	
	// Формирует движения по регистрам:
	// - СебестоимостьТоваров
	// - ПрочиеРасходы
	РасчетСебестоимостиНДС.ВключитьИсключитьНДСВСтоимость(ПараметрыРасчета);
	РасчетСебестоимостиНДС.ВключитьИсключитьНДСВСтоимость24(ПараметрыРасчета);
	
	//-- Локализация
	
КонецПроцедуры

Процедура ВключитьИсключитьНДСВСтоимостьПродаж(ПараметрыРасчета) Экспорт
	
	//++ Локализация
	
	// Формирует движения по регистрам:
	// - ВыручкаИСебестоимостьПродаж
	// - ПрочиеРасходы
	// - ДвиженияНоменклатураДоходыРасходы
	РасчетСебестоимостиНДС.ВключитьИсключитьНДСВСтоимостьПродаж(ПараметрыРасчета);
	РасчетСебестоимостиНДС.ВключитьИсключитьНДСВСтоимостьПродаж24(ПараметрыРасчета);
	
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область СписаниеОшибокОкругления

Процедура СписатьОшибкиОкругленияРасчетаСебестоимости(ПараметрыРасчета) Экспорт
	
	//++ Локализация
	
	// Формирует движения по регистрам:
	// - ДетализацияПартийТоваровДляНДСиУСН2_4
	РасчетСебестоимостиНДС.СписатьОшибкиОкругленияРасчетаСебестоимости(ПараметрыРасчета);
	
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти


#Область ВосстановленияДвижений

Функция ВосстановитьДвиженияДокументовПоРегиструНакопления(Регистратор) Экспорт
	ВыполненоВосстановлениеДвижений = Ложь;
	//++ Локализация
	
	ЭтоРегламентнаяОперация = Ложь;
	
	Если ЭтоРегламентнаяОперация
	 ИЛИ ТипЗнч(Регистратор) = Тип("ДокументСсылка.РаспределениеНДС") Тогда
		
		// Для этих документов частичное проведение по регистрам не поддерживается.
		ДокументОперации = Регистратор.ПолучитьОбъект();
		
		ДокументОперации.ДополнительныеСвойства.Вставить(РасчетСебестоимостиПрикладныеАлгоритмы.ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);
		
		ДокументОперации.Записать(РежимЗаписиДокумента.Проведение);
		ВыполненоВосстановлениеДвижений = Истина;
		
	ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.КорректировкаРегистров")
		ИЛИ ТипЗнч(Регистратор) = Тип("ДокументСсылка.РасчетСебестоимостиТоваров") Тогда
		// Для этих документов проведение не предусматривается.
		ВыполненоВосстановлениеДвижений = Истина;
	КонецЕсли;
	//-- Локализация
	Возврат ВыполненоВосстановлениеДвижений;
КонецФункции


#КонецОбласти

#Область УниверсальныеПроцедурыОписанияДанныхМеханизма

// Возвращает перечень объектов метаданных, на основании данных которых выполняется расчет партий.
// В перечень не включаются объекты, которые являются одновременно и исходящими данными механизмов расчета партий и себестоимости.
//
// Параметры:
//	ВходящиеДанные - Соответствие - уже инициализированное хранилище для описания входящих данных
//	ТолькоТребующиеПерерасчета - Булево - если установлен, то будет возвращен перечень только тех данных,
//		изменение которых влечет за собой необходимость перерасчета партий и себестоимости
//		При изменении этих данных должна создаваться запись в регистре сведений ЗаданияКРасчетуСебестоимости.
//
// Возвращаемое значение:
//	Соответствие - Ключ - ОбъектМетаданных.
//
Процедура ВходящиеДанныеМеханизма(ВходящиеДанные, ТолькоТребующиеПерерасчета) Экспорт
	
	//++ Локализация
	Если РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22() Тогда
		Если ТолькоТребующиеПерерасчета Тогда
			Значение = Истина; // чтобы можно было проверить вхождение объекта метаданных в это соответствие
		Иначе
			Значение = Неопределено;
		КонецЕсли;
		
		ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН, Значение);
		ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4, Значение);
		
		
		//++ НЕ ПУ21
		РасчетСебестоимостиПартионныйУчет21.ВходящиеДанныеМеханизма(ВходящиеДанные, ТолькоТребующиеПерерасчета);
		// Добавим регистры партионного учета версии 2.1 (используются для формирования начальных остатков для версии 2.2).
		РасчетСебестоимостиПартионныйУчет21.НеиспользуемыеДанныеМеханизмаВерсии21(ВходящиеДанные, Значение);
		//-- НЕ ПУ21
	Иначе
		ПартионныйУчет.ВходящиеДанныеМеханизма(ВходящиеДанные, Истина);
	КонецЕсли;
	
	Если НЕ ТолькоТребующиеПерерасчета Тогда 
		ВходящиеДанные.Вставить(Метаданные.Справочники.КатегорииЭксплуатации, Значение);
		ВходящиеДанные.Вставить(Метаданные.Справочники.ПартииТМЦВЭксплуатации, Значение);
	КонецЕсли;
	//-- Локализация

КонецПроцедуры

// Возвращает перечень регистров, обслуживаемых механизмом расчета партий.
//
// Возвращаемое значение:
//	Соответствие - Ключ - ОбъектМетаданных.
//
Процедура ИсходящиеДанныеМеханизма(ИсходящиеДанные) Экспорт
	
	//++ Локализация
	Если РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22() Тогда
		ИсходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН, 		Истина);
		ИсходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4,	Истина);
		ИсходящиеДанные.Вставить(Метаданные.РегистрыНакопления.НДСПредъявленный, 						Истина);
		ИсходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПартииНДСКРаспределению, 				Истина);
	Иначе
		ПартионныйУчет.ИсходящиеДанныеМеханизма(ИсходящиеДанные);
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Возвращает перечень регистров, рассчитываемых механизмом партионного учета версии 2.2, и используемых при расчете себестоимости.
//
Процедура ИспользуемыеКэшиРегистровПартионногоУчета(ВходящиеДанные) Экспорт
	
	// Здесь перечислены регистры, которые (по И)
	// - рассчитываются механизмом партионного учета версии 2.2
	// - не рассчитываются механизмом расчета себестоимости
	// - являются входящими данными для механизма расчета себестоимости (используются кэши данных регистров)
	//
	// В случае, если выполняется отдельный запуск расчета себестоимости (не из партионного учета версии 2.2),
	// эти регистры не будут инициализированы - к их кэшам обращаться нельзя.
	//
	// Для этого делается следующее:
	// - перед началом расчета себестоимости "принудительно" инициализируются эти регистры (для того, чтобы сформировались их расчетные кэши)
	// - перед записью движений эти регистры удаляются из параметров расчета (записывать их не надо - движения по ним не формировались)
	
	//++ Локализация
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН, 	  Истина);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4,  Истина);
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейсКорректировки

// Дополняет перечень регистров накопления, для которых предусмотрены корректировки.
//
// Параметры:
//	Корректировками - Массив - массив имен метаданных регистров с корректировками
//
Процедура ДополнитьРегистрыСКорректировкамиНачальныхОстатков(РегистрыСКорректировками) Экспорт
	//++ Локализация
	РегистрыСКорректировками.Добавить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН.ПолноеИмя());
	РегистрыСКорректировками.Добавить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4.ПолноеИмя());
	РегистрыСКорректировками.Добавить(Метаданные.РегистрыНакопления.НДСПредъявленный.ПолноеИмя());
	//-- Локализация
КонецПроцедуры

// Дополняет описание корректировок регистров накопления.
//
// Параметры:
//	ТаблицаВидовКорректировок - ТаблицаЗначений - таблица с описанием корректировок регистров
//
Процедура ДополнитьОписаниеКорректировокНачальныхОстатков(ТаблицаВидовКорректировок) Экспорт
	//++ Локализация
	НоваяСтрока = ТаблицаВидовКорректировок.Добавить();
	НоваяСтрока.Корректировка = Перечисления.ТипыЗаписейПартий.СлужебноеВключитьУправленческийУчетПоПравиламМФУ;
	НоваяСтрока.ИмяКонстантыВключения = Метаданные.Константы.ВестиУправленческийУчетОрганизаций.Имя;
	НоваяСтрока.ИмяКонстантыДатыНачалаДействия = Метаданные.Константы.ДатаНачалаВеденияУправленческогоУчетаОрганизаций.Имя;
	
	НоваяСтрока = ТаблицаВидовКорректировок.Добавить();
	НоваяСтрока.Корректировка = Перечисления.ТипыЗаписейПартий.СлужебноеВключитьУчетПоВидамЗапасов;
	
	НоваяСтрока = ТаблицаВидовКорректировок.Добавить();
	НоваяСтрока.Корректировка = Перечисления.ТипыЗаписейПартий.СлужебноеИзменениеПартнераВАналитикеУчетаНоменклатуры;
	
	НоваяСтрока = ТаблицаВидовКорректировок.Добавить();
	НоваяСтрока.Корректировка = Перечисления.ТипыЗаписейПартий.СлужебноеДозаполнениеАналитикиУчетаПартийНДСиУСН2_4;
	
	НоваяСтрока = ТаблицаВидовКорректировок.Добавить();
	НоваяСтрока.Корректировка = Перечисления.ТипыЗаписейПартий.СлужебноеОтключитьУправленческийУчетПоПравиламМФУ;
	НоваяСтрока.РодительскаяКорректировка = Перечисления.ТипыЗаписейПартий.СлужебноеВключитьУправленческийУчетПоПравиламМФУ;
	
	НоваяСтрока = ТаблицаВидовКорректировок.Добавить();
	НоваяСтрока.Корректировка = Перечисления.ТипыЗаписейПартий.СлужебноеПереходНаПартионныйУчет22;
	НоваяСтрока.ИмяКонстантыВключения = Метаданные.Константы.ПартионныйУчетВерсии22.Имя;
	НоваяСтрока.ИмяКонстантыДатыНачалаДействия = Метаданные.Константы.ДатаПереходаНаПартионныйУчетВерсии22.Имя;
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область УчетСебестоимости

// Дополняет перечень регистров, которые не используются при отключенном учете себестоимости.
//
// Параметры:
//	ПереченьРегистров - Соответствие - перечень регистров, которые не используются при отключенном учете себестоимости.
//
Процедура ДополнитьРегистрыНеИспользуемыеПриВыключенномУчетеСебестоимости(ПереченьРегистров) Экспорт
	//++ Локализация
	ПереченьРегистров.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН, Истина);
	ПереченьРегистров.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4, Истина);
	ПереченьРегистров.Вставить(Метаданные.РегистрыНакопления.ПартииЗатратНаВыпуск, Истина);
	ПереченьРегистров.Вставить(Метаданные.РегистрыНакопления.ПартииПроизводственныхЗатрат, Истина);
	ПереченьРегистров.Вставить(Метаданные.РегистрыНакопления.ПартииРасходовНаСебестоимостьТоваров, Истина);
	ПереченьРегистров.Вставить(Метаданные.РегистрыНакопления.ПартииТоваровОрганизаций, Истина);
	ПереченьРегистров.Вставить(Метаданные.РегистрыНакопления.ПартииТоваровПереданныеНаКомиссию, Истина);
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область Тестирование

Процедура ДополнитьЭтапыСРаспределениемПартий(СписокЭтапов) Экспорт
	
	//++ Локализация
	РасчетСебестоимостиНДС.ДополнитьЭтапыСРаспределениемПартий(СписокЭтапов);
	//-- Локализация
	
КонецПроцедуры

Процедура ДополнитьЭтапыСТрансляциейПартий(СписокЭтапов) Экспорт
	
	//++ Локализация
	РасчетСебестоимостиНДС.ДополнитьЭтапыСТрансляциейПартий(СписокЭтапов);
	//-- Локализация
	
КонецПроцедуры

Процедура ТекстЗапросаДляРасчетаЭтапа(ИмяЭтапа, ПараметрыРасчета, ТекстЗапроса) Экспорт
	
	//++ Локализация
	РасчетСебестоимостиНДС.ТекстЗапросаДляРасчетаЭтапа(ИмяЭтапа, ПараметрыРасчета, ТекстЗапроса);
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьДвижений

// Вызывается перед началом записи сформированных движений.
//
Процедура ПередЗаписьюСформированныхДвижений(ПараметрыРасчета, ПротоколыРасчета) Экспорт
	
	//++ Локализация
	РасчетСебестоимостиНДС.ПодготовитьДанныеДляФормированияЗаданийДляМеханизмовУчетаНДСПартионныйУчет22(ПараметрыРасчета);
	//-- Локализация
	
КонецПроцедуры

// Записывает сформированные новые движения.
//
Процедура ЗаписатьСформированныеДвижения(ПараметрыРасчета, ПротоколыРасчета) Экспорт
	
	//++ Локализация
	РасчетСебестоимостиНДС.СформироватьЗаданияДляМеханизмовУчетаНДСПартионныйУчет22(ПараметрыРасчета);
	
	//-- Локализация
	
КонецПроцедуры

//++ Локализация
//-- Локализация


#КонецОбласти

#Область КэшированиеДанныхРегистров

// Добавляет имена регистров в массив.
//
// Параметры:
//	Регистры - Массив
//
Процедура ДополнитьРегистрыСЗаписямиКонвертацииДанных(Регистры) Экспорт
	
	//++ Локализация
	Регистры.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН.Имя);
	Регистры.Вставить(Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4.Имя);
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ЗаданияКРасчетуСебестоимости

// Добавляет описания регистров для их подключения к механизму дат запрета изменения.
//
Процедура ОписаниеРегистровДляКонтроляДатЗапретаИзменения(ИсточникиДанных) Экспорт
	
	//++ Локализация
	РасчетСебестоимостиПартионныйУчет21.ОписаниеРегистровДляКонтроляДатЗапретаИзменения(ИсточникиДанных);
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЭтаповЗакрытияМесяца

Процедура Использование_РасчетПартийИСебестоимости(ПараметрыОбработчика) Экспорт
	
	//++ Локализация
	РасчетСебестоимостиНДС.Использование_РасчетПартийИСебестоимости(ПараметрыОбработчика);
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область РежимыПартионногоУчета

// Определяет, используется ли партионный учет версии 2.2 на указанную дату.
//
// Параметры:
//	Дата - Дата - дата, для которой надо определить режим партионного учета.
//
// Возвращаемое значение:
//	Булево - признак использования партионного учета версии 2.2 на указанную дату
//	Если дата не указана, то определяется сам факт использования партионного учета версии 2.2.
//
Функция ПартионныйУчетВерсии22(Дата) Экспорт
	
	ВключенПартионныйУчетВерсии22 = Истина;
	//++ Локализация
	Если НЕ ПолучитьФункциональнуюОпцию("ПартионныйУчетВерсии22") Тогда
		Возврат Ложь; // партионный учет 2.2 выключен
	ИначеЕсли НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПартионныйУчет") Тогда
		ВызватьИсключение НСтр("ru='Некорректно установлены функциональные опции партионного учета'"); // такого быть не должно - обе опции включаются синхронно
	КонецЕсли;
	
	ВключенПартионныйУчетВерсии22 =
		(Дата = Неопределено ИЛИ Дата >= ДатаПереходаНаПартионныйУчетВерсии22());
	
	//-- Локализация
	Возврат ВключенПартионныйУчетВерсии22;
	
КонецФункции

// Определяет "старый" режим партионного учета, до перехода на партионный учет версии 2.2.
//
// Параметры:
//	Дата - Дата - дата, для которой надо определить режим партионного учета.
//
// Возвращаемое значение:
//	Булево, Неопределено - признак использования партионного учета на указанную дату
// 		Если параметр Дата не передан, или Дата находится в периоде действия партионного учета версии 2.2,
//		то возвращается значение Неопределено - в такой проверке нет смысла.
//
Функция ИспользовалсяПартионныйУчетДоПереходаНаВерсию22(Дата) Экспорт
	
	БылВключенПартионныйУчет = Ложь;
	//++ Локализация
	Если НЕ ПолучитьФункциональнуюОпцию("ПартионныйУчетВерсии22") Тогда
		Возврат ПолучитьФункциональнуюОпцию("ИспользоватьПартионныйУчет"); // перехода на версию 2.2 не было - проверяем стандартно
	ИначеЕсли НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПартионныйУчет") Тогда
		ВызватьИсключение НСтр("ru='Некорректно установлены функциональные опции партионного учета'"); // такого быть не должно - обе опции включаются синхронно
	ИначеЕсли Дата = Неопределено ИЛИ Дата >= РасчетСебестоимостиПовтИсп.ДатаПереходаНаПартионныйУчетВерсии22() Тогда
		Возврат Неопределено; // нет смысла проверять режим "старого" партионного учета, т.к. используется партионный учет версии 2.2
	КонецЕсли;
	
	// До даты перехода на версию 2.2 партионный учет версии 2.1 мог быть как включен, так и выключен.
	// Информация об этом не сохранилась, т.к. константа ИспользоватьПартионныйУчет при переходе установилась в значение Истина.
	// Наиболее достоверный способ узнать "старый" режим партионного учета - определить его по данным ИБ.
	// Например, если партионный учет не использовался, то не должно быть движений по регистру партий товаров.
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК БылВключенПартионныйУчет
	|ИЗ
	|	РегистрНакопления.ПартииТоваровОрганизаций КАК Т";
	
	БылВключенПартионныйУчет = НЕ Запрос.Выполнить().Пустой();
	//-- Локализация
	Возврат БылВключенПартионныйУчет;
	
КонецФункции

// Возвращает дату перехода на партионный учет версии 2.2.
// Дата может быть пустой - значит партионный учет версии 2.2 включен для всех периодов.
//
// Возвращаемое значение:
//	Дата - начало месяца перехода на партионный учет версии 2.2.
//
Функция ДатаПереходаНаПартионныйУчетВерсии22() Экспорт
	
	ДатаПереходаНаПартионныйУчетВерсии22 = Дата(1,1,1);
	//++ Локализация
	ДатаПереходаНаПартионныйУчетВерсии22 = НачалоМесяца(Константы.ДатаПереходаНаПартионныйУчетВерсии22.Получить());
	//-- Локализация
	Возврат ДатаПереходаНаПартионныйУчетВерсии22;
	
КонецФункции

#КонецОбласти

#Область УправленческийУчетОрганизаций

// Определяет, включен ли управленческий учет организаций на указанную дату.
//
// Параметры:
//	Дата - Дата - дата, для которой надо определить ведение управленческого учета организаций.
//
// Возвращаемое значение:
//	Булево - признак использования управленческого учета организаций на указанную дату
//	Если дата не указана, то определяется сам факт включения партионного учета организаций.
//
Функция УправленческийУчетОрганизаций(Дата) Экспорт
	
	ВключенУправленческийУчетОрганизаций = Истина;
	//++ Локализация
	ВключенУправленческийУчетОрганизаций = ПолучитьФункциональнуюОпцию("ВестиУправленческийУчетОрганизаций")
		И ПартионныйУчетВерсии22(Дата)
		И (Дата = Неопределено
			ИЛИ Дата >= ДатаНачалаВеденияУправленческогоУчетаОрганизаций());
	//-- Локализация
	Возврат ВключенУправленческийУчетОрганизаций;
	
КонецФункции

// Возвращает дату начала ведения управленческого учета организаций.
// Дата может быть пустой - значит управленческий учет организаций включен для всех периодов.
//
// Возвращаемое значение:
//	Дата - начало месяца ведения управленческого учета организаций
//
Функция ДатаНачалаВеденияУправленческогоУчетаОрганизаций() Экспорт
	
	ДатаНачалаВеденияУправленческогоУчетаОрганизаций = Дата(1,1,1);
	//++ Локализация
	ДатаНачалаВеденияУправленческогоУчетаОрганизаций = НачалоМесяца(Константы.ДатаНачалаВеденияУправленческогоУчетаОрганизаций.Получить());
	//-- Локализация
	Возврат ДатаНачалаВеденияУправленческогоУчетаОрганизаций;
	
КонецФункции

#КонецОбласти

#Область ПроверкаДанных

// Дополняет список проверок, которые необходимо выполнить после выполнения расчета.
//
// Параметры:
//	ВыполняемыеПроверки - Структура - идентификаторы проверок
//
Процедура ДополнитьСписокПроверокПослеРасчета(ВыполняемыеПроверки) Экспорт
	//++ Локализация
	ВыполняемыеПроверки.Вставить("СоответствиеРегистровСебестоимостиИПартийНДС");
	//-- Локализация
КонецПроцедуры

#КонецОбласти

// Дополняет имена функциональных опций в строку.
//
// Параметры:
//	ИменаФО - Строка - строка с перечислением имен функциональных опций
//
Процедура ДополнитьИменаФункциональныхОпций(ИменаФО) Экспорт
	//++ Локализация
	ИменаФО = ИменаФО + ",
	|ИспользоватьПартионныйУчет,
	|ПартионныйУчетВерсии22,
	|ДатаПереходаНаПартионныйУчетВерсии22";
	//-- Локализация
КонецПроцедуры

// Дополняет параметры расчета партий и себестоимости.
//
// Параметры:
//	ПараметрыРасчета - Структура - параметры, используемые при расчете партий и себестоимости
//
Процедура ДополнитьПараметрыРасчета(ПараметрыРасчета) Экспорт
	//++ Локализация
	
	#Область ОрганизацииИПолитики
	
	// Организации и их учетные политики.
	ПараметрыРасчета.УчетныеПолитики.Вставить("УСН", 	   	   			   Новый Структура);
	ПараметрыРасчета.УчетныеПолитики.УСН.Вставить(
		"ИспользуютВТекущемПериоде",
		Новый Массив);
	
	ПараметрыРасчета.УчетныеПолитики.Вставить("УчетПартийНДСВерсии22", 	   Новый Структура);
	ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии22.Вставить(
		"ИспользуютВТекущемПериоде",
		Новый Массив);
	ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии22.Вставить(
		"ИспользовалиВПрошломПериоде",
		Новый Массив);
	
	ПараметрыРасчета.УчетныеПолитики.Вставить("УчетПартийНДСВерсии24", 	   Новый Структура);
	ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии24.Вставить(
		"ИспользуютВТекущемПериоде",
		Новый Массив);
	ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии24.Вставить(
		"ИспользовалиВПрошломПериоде",
		Новый Массив);
	
	ПараметрыРасчета.УчетныеПолитики.Вставить("УчетПартийНДСНеВедется",    Новый Структура);
	ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСНеВедется.Вставить(
		"ИспользуютВТекущемПериоде",
		Новый Массив);
	ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСНеВедется.Вставить(
		"ИспользовалиВПрошломПериоде",
		Новый Массив);
	
	ПараметрыРасчета.УчетныеПолитики.Вставить("РаздельныйУчетПостатейныхЗатрат", Новый Структура);
	ПараметрыРасчета.УчетныеПолитики.РаздельныйУчетПостатейныхЗатрат.Вставить(
		"ИспользуютВТекущемПериоде",
		Новый Массив);
		
	#КонецОбласти
		
	//-- Локализация
КонецПроцедуры

// Дополняет свойства запроса.
//
// Параметры:
//	Запрос - Запрос - Запрос для которого устанавливаются параметры
//	ПараметрыРасчета - Структура - параметры, используемые при расчете партий и себестоимости
//
Процедура ДополнитьСвойстваЗапроса(Запрос, ПараметрыРасчета) Экспорт
	//++ Локализация
	
	УчетныеПолитики = РегистрыСведений.УчетнаяПолитикаОрганизаций.УчетныеПолитикиОрганизаций(
		ПараметрыРасчета.МассивОрганизаций,
		ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
	УчетныеПолитикиПрошлогоПериода = РегистрыСведений.УчетнаяПолитикаОрганизаций.УчетныеПолитикиОрганизаций(
		ПараметрыРасчета.МассивОрганизаций,
		ПараметрыРасчета.РасчетныйПериод.НачалоПредыдущегоПериода);
	
	Для Каждого ПараметрыУчетнойПолитики Из УчетныеПолитики Цикл
		
		ПараметрУчетнойПолитикиПрошлогоПериода = УчетныеПолитикиПрошлогоПериода.Найти(
			ПараметрыУчетнойПолитики.Организация,
			"Организация");
		
		ПараметрыРасчета.УчетныеПолитики.МетодыОценкиСтоимости.Вставить(
			ПараметрыУчетнойПолитики.Организация,
			ПараметрыУчетнойПолитики.МетодОценкиСтоимостиТоваров);
		
		// УСН
		Если ПараметрыУчетнойПолитики.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
			ПараметрыРасчета.УчетныеПолитики.УСН.ИспользуютВТекущемПериоде.Добавить(ПараметрыУчетнойПолитики.Организация);
		КонецЕсли;
		
		// УчетПартийНДС...
		Если ПараметрыРасчета.ПартионныйУчетВерсии22 И ПараметрыУчетнойПолитики.РаздельныйУчетТоваров Тогда
			
			Если ПараметрыУчетнойПолитики.МетодОценкиСтоимостиТоваров = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка Тогда
				ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии24.ИспользуютВТекущемПериоде.Добавить(ПараметрыУчетнойПолитики.Организация);
			Иначе
				ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии22.ИспользуютВТекущемПериоде.Добавить(ПараметрыУчетнойПолитики.Организация);
			КонецЕсли;
			
		Иначе
			ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСНеВедется.ИспользуютВТекущемПериоде.Добавить(ПараметрыУчетнойПолитики.Организация);
		КонецЕсли;
		
		Если ПараметрыРасчета.ПартионныйУчетВерсии22 И ПараметрУчетнойПолитикиПрошлогоПериода.РаздельныйУчетТоваров Тогда
			
			Если ПараметрУчетнойПолитикиПрошлогоПериода.МетодОценкиСтоимостиТоваров = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка Тогда
				ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии24.ИспользовалиВПрошломПериоде.Добавить(ПараметрыУчетнойПолитики.Организация);
			Иначе
				ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии22.ИспользовалиВПрошломПериоде.Добавить(ПараметрыУчетнойПолитики.Организация);
			КонецЕсли;
			
		Иначе
			ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСНеВедется.ИспользовалиВПрошломПериоде.Добавить(ПараметрыУчетнойПолитики.Организация);
		КонецЕсли;
		
		Если ПараметрыУчетнойПолитики.РаздельныйУчетПостатейныхПроизводственныхЗатратПоНалогообложениюНДС Тогда
			ПараметрыРасчета.УчетныеПолитики.РаздельныйУчетПостатейныхЗатрат.ИспользуютВТекущемПериоде.Добавить(ПараметрыУчетнойПолитики.Организация);
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ОрганизацииНаУСН", 									 ПараметрыРасчета.УчетныеПолитики.УСН.ИспользуютВТекущемПериоде);
	Запрос.УстановитьПараметр("ОрганизацииСУчетомПартийНДСВерсии22", 				 ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии22.ИспользуютВТекущемПериоде);
	Запрос.УстановитьПараметр("ОрганизацииСУчетомПартийНДСВерсии24", 				 ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии24.ИспользуютВТекущемПериоде);
	Запрос.УстановитьПараметр("ОрганизацииСУчетомПартийНДСВерсии22ВПрошломПериоде",  ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии22.ИспользовалиВПрошломПериоде);
	Запрос.УстановитьПараметр("ОрганизацииСУчетомПартийНДСВерсии24ВПрошломПериоде",  ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСВерсии24.ИспользовалиВПрошломПериоде);
	Запрос.УстановитьПараметр("ОрганизацииБезУчетаПартийНДС",  						 ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСНеВедется.ИспользуютВТекущемПериоде);
	Запрос.УстановитьПараметр("ОрганизацииБезУчетаПартийНДСВПрошломПериоде",  		 ПараметрыРасчета.УчетныеПолитики.УчетПартийНДСНеВедется.ИспользовалиВПрошломПериоде);
	Запрос.УстановитьПараметр("ОрганизацииСРаздельнымУчетомПостатейныхЗатрат",       ПараметрыРасчета.УчетныеПолитики.РаздельныйУчетПостатейныхЗатрат.ИспользуютВТекущемПериоде);
	Запрос.УстановитьПараметр("ДатаВозможностиВычетаПриОказанииУслугНеВРФ",          УчетНДСУП.НастройкиУчета().ДатаВозможностиВычетаПриОказанииУслугНеВРФ);
	
	//-- Локализация
КонецПроцедуры

// Дополняет параметры запроса для проведения документов.
//
// Параметры:
//	Реквизиты - Произвольный - реквизиты документа для определения параметров партионного учета
//	Период - Дата - период, в которых документ формирует движения
//	СтруктураПараметров - Структура - перечень параметров с установленными значениями
//
Процедура ДополнитьПараметрыЗапросаДляПроведения(Реквизиты, Период, СтруктураПараметров) Экспорт
	
	// Инициализация локализованных параметров значениями по умолчанию.
	СтруктураПараметров.Вставить("РаздельныйУчетТоваров", Ложь);
	СтруктураПараметров.Вставить("РаздельныйУчетПостатейныхПроизводственныхЗатратПоНалогообложениюНДС", Ложь);
	СтруктураПараметров.Вставить("СтатьяРасходовСписаниеНДС", Неопределено);
	СтруктураПараметров.Вставить("АналитикаРасходовСписаниеНДС", Неопределено);
	
	//++ Локализация
	Организация = Неопределено;
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Реквизиты, "ОрганизацияПолучатель")
	 И ЗначениеЗаполнено(Реквизиты.ОрганизацияПолучатель) Тогда
		Организация = Реквизиты.ОрганизацияПолучатель;
	ИначеЕсли ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Реквизиты, "Организация") Тогда
		Организация = Реквизиты.Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
	
		ПараметрыУчетнойПолитики = ЗначениеНастроекПовтИсп.ПараметрыУчетнойПолитики(Организация, Период); 
		
		СтруктураПараметров.Вставить("РаздельныйУчетТоваров", ПараметрыУчетнойПолитики <> Неопределено
				И ПараметрыУчетнойПолитики.РаздельныйУчетТоваров);
		СтруктураПараметров.Вставить("РаздельныйУчетПостатейныхПроизводственныхЗатратПоНалогообложениюНДС",
			ПараметрыУчетнойПолитики <> Неопределено 
				И ПараметрыУчетнойПолитики.РаздельныйУчетПостатейныхПроизводственныхЗатратПоНалогообложениюНДС);
		СтруктураПараметров.Вставить("СтатьяРасходовСписаниеНДС", ?(ПараметрыУчетнойПолитики <> Неопределено, 
			ПараметрыУчетнойПолитики.СтатьяРасходовСписаниеНДС, ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка()));
		СтруктураПараметров.Вставить("АналитикаРасходовСписаниеНДС", ?(ПараметрыУчетнойПолитики <> Неопределено,
				ПараметрыУчетнойПолитики.АналитикаРасходовСписаниеНДС, ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка()));
		
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

#КонецОбласти
