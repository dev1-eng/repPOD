///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Партионный учет (универсальные алгоритмы)
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область РаспределениеМетодомУменьшаемогоОстатка

#Область ОписаниеАлгоритмаРаспределения
	
// Рассмотрим на примере задачи заполнения видов запасов в регистре себестоимости,
// когда учет себестоимости изначально велся без учета видов запасов, а с некоторого периода возникла необходимость
// учета себестоимости с детализацией до вида запасов номенклатуры.
// Остатки с пустыми видами запасов находится в регистре СебестоимостьТоваров.
// Остатки с заполненными видами запасов находится в регистре ТоварыОрганизаций.
// Необходимо остатки по каждой учетной позиции регистра себестоимости разделить по имеющимся видам запасов товаров организаций пропорционально количеству остатка.
// Количество полей в таблицах сократим – не влияющие на логику распределения поля не указываем.

// ИСХОДНЫЕ ДАННЫЕ ДЛЯ РАСПРЕДЕЛЕНИЯ
// 1. Таблица-источник (ТИ). Эти данные необходимо распределить (скорректировать).
// 2. Таблица-база распределения (ТБ). Эти данные используются для увеличения детализации данных из ТИ.
// 3. Описание полей ТИ и ББ:
// Поля связи – общие поля ТИ и ТБ, по которым будет выполняться сопоставление данных этих таблиц
// - Организация
// - АналитикаУчетаНоменклатуры
// Поле базиса ТИ – имя поля для хранения уменьшаемого остатка в ТИ
// - Количество
// Поле базиса ТБ – аналогичное поле в ТБ
// - Количество
// Ресурсы ТИ – суммовые поля ТИ, распределяемые пропорционально остатку
// - Стоимость
// - ДопРасходы
// Прочие поля ТИ – поля ТИ, непосредственно не участвующие в распределении, но необходимые в таблице-результате (ТР) распределения
// - Партия (также здесь будут АналитикаУчетаПартий, РазделУчета, ВидДеятельностиНДС…)
// - количество таких полей может быть любым;
// - важен порядок перечисления этих полей – будет использован для сортировки ТИ
// Прочие поля ТБ – аналогичные поля в ТБ
// - ВидЗапасов
// Правила заполнения прочих полей в результате распределения: указываем какое поле из какой таблицы брать (только для полей, присутствующих и в ТИ, и в ТБ)
// - всегда из ТИ
// - всегда из ТБ
// - из ТИ если заполнено, потом из ТБ
// - из ТБ если заполнено, потом из ТИ

// ОПИСАНИЕ АЛГОРИТМА РАСПРЕДЕЛЕНИЯ
// 1. Нумерация данных
// 1.1. Выберем все РАЗЛИЧНЫЕ значения полей связи ТИ и ТБ, упорядочим по <Поля связи> и пронумеруем.
// Получим таблицу ВТКлючиПолейСвязи

// 1.2. Упорядочим ТИ по <Поля связи> + <Прочие поля ТИ> и пронумеруем, при этом
// - добавим поля вида Цена<Имя ресурса> = < Имя ресурса > / (положительное количество) 
// - поле Количество приведем к положительному значению, а его изначальный знак (+1 или -1) поместим в поле ЗнакБазиса
// - наложим отбор Количество <> 0
// Получим таблицу ВТИсходнаяТИ

// 1.3. Упорядочим ТБ по <Поля связи> + <Прочие поля ТБ> и пронумеруем, при этом
// - поле Количество приведем к положительному значению
// - при этом наложим отбор Количество <> 0
// Получим таблицу ВТИсходнаяТБ

// 1.4. Выберем из ВТИсходнаяТИ только те поля, которые нужны для распределения.
// Получим таблицу ВТОстаткиТИ1

// 1.5. Выберем из ВТИсходнаяТБ только нужные для распределения поля.
// Получим таблицу ВТОстаткиТБ1

// 2. Распределение данных (итерационный алгоритм)

// Присваиваем НомерИтерации = 0
// - на каждой итерации для каждого ключа связи будет списываться (по ИЛИ)
// 	- одна строка из ТИ
// 	- одна строка из ТБ
// 	- одна строка из ТИ и одна строка из ТБ
// - максимально возможное количество итераций будет равно МАКСИМУМ(Количество(КлючТИ) + Количество(КлючТБ)) - 1 для каждого ключа связи

// 2.1. Определяем строки ТИ для распределения на текущем шаге
// - для каждого ключа связи найдем минимальный номер строки – «что распределяем для данного ключ»
// Если таких строк нет, то распределения закончено.
// Получаем ВТСтрокиТИ< НомерИтерации >

// 2.2. Определяем строки ТБ, на которые можно распределить ВТСтрокиТИ_< НомерИтерации >
// - для каждого ключа связи найдем минимальный номер строки – «на что распределяем данный ключ»
// Если таких строк нет, то распределения закончено.
// Получаем ВТСтрокиТБ< НомерИтерации >

// 2.3. Рассчитываем количество списания текущей итерации:
// - соединяем ВТСтрокиТИ_< НомерИтерации > и ВТСтрокиТБ_< НомерИтерации > и определяем меньшее значение поля Количество – уменьшение остатка на текущей итерации
// 	- каждой строке ВТСтрокиТИ_< НомерИтерации > будет соответствовать 0 или 1 строка из ВТСтрокиТБ_< НомерИтерации >
// 	- фиксируем признак наличия строки ТБ для каждой строки ТИ – если такой строки нет, то для данного значения поля КлючСвязи распределение закончено
// Получаем ВТСписание< НомерИтерации >

// 2.4. Формируем результат списания текущей итерации:
// - соединяем ВТСписание< НомерИтерации > с ВТСтрокиТИ_< НомерИтерации >
// 	- если КоличествоКСписанию=КоличествоТИ, то списываем все остатки ресурсов полностью, иначе списание каждого ресурса рассчитываем: КоличествоКСписанию * Цена_<Имя ресурса>
// Получаем ВТРезультатСписания< НомерИтерации >

// 2.5. Уменьшаем остатки ТИ
// - вычитаем из ВТОстаткиТИ< НомерИтерации > таблицу ВТРезультатСписания< НомерИтерации >
// 	- из результата исключаем строки с Количество = 0 (распределение этой строки ТИ закончено)
// 	- из результата исключаем строки с теми значениями поля КлючСвязи, для которых в ВТРезультатСписания< НомерИтерации > значение поля ЕстьСтрокаТБ = ЛОЖЬ (для данных строк ТИ больше нет базы для распределения)
// Получаем ВТОстаткиТИ< НомерИтерации +1 >
// Если таблица пустая, то распределения закончено.

// 2.6. Уменьшаем остатки ТБ
// - вычитаем из ВТОстаткиТБ< НомерИтерации > таблицу ВТРезультатСписания< НомерИтерации >
// 	- из результата исключаем строки с Количество = 0 (распределение этой строки ТБ закончено)
// 	- из результата исключаем строки с теми значениями поля КлючСвязи, для которых нет строк в ВТСтрокиТИ_< НомерИтерации > (для данных строк ТБ больше нет источников, которые могли бы их списать на следующих итерациях)
// Получаем ВТОстаткиТБ< НомерИтерации +1 >

// 2.7. Возвращаемся к шагу 2.1, но перед этим
// - удаляем ненужные таблицы текущей итерации (оставляем только таблицу ВТРезультатСписания< НомерИтерации >)
// - увеличиваем НомерИтерации на 1

// 3. Окончание распределения

// 3.1. Получаем общую таблицу результатов распределения
// - Объединяем все таблицы вида ВТРезультатСписания<Номер итерации>
// Получаем ВТРезультатыСписания

// 3.2. Формируем окончательную таблицу сформированных корректировок 
// - соединяем ВТРезультатыСписания с ВТИсходнаяТИ и ВТИсходнаяТБ
// 	- количество берем из ВТРезультатыСписания и умножаем на ЗнакБазиса из ВТИсходнаяТИ
// 	- ресурсы берем из ВТРезультатыСписания (знак у них уже правильный)
// 	- поля связи берем из ВТИсходнаяТИ
// 	- прочие поля берем из ВТИсходнаяТИ или ВТИсходнаяТБ по указанным правилам
// 	- если корректируется регистр, то добавляем колонки Период, ВидДвижения = Приход, Регистратор, ТипЗаписи
// - если корректируется регистр, то добавляем в результат такие же записи (для сторно остатков), но
// 	- с отрицательным количеством и ресурсами
// 	- с прочими полями, взятыми только из ВТИсходнаяТИ (если поля в ВТИсходнаяТИ нет, то пишем в него пустое значение соответствующего тип)
// - если корректируется регистр, то колонки, которых нет в корректируемом регистре, отбрасываются.
// Получаем ВТРезультатРаспределения

// 3.3. Диагностируем ошибки распределения
// - вычитаем из ВТИсходнаяТИ таблицу ВТРезультатыСписания
// 	- если для ключа связи нет ни одной строки в ВТРезультатыСписания («нет данных в базе распределения»)
// 	- если есть строки, где Количество <> 0 («не хватает данных в базе распределения»)
// - вычитаем из ВТИсходнаяТБ таблицу ВТРезультатыСписания
// 	- если для ключа связи нет ни одной строки в ВТРезультатыСписания («нет данных в ТИ для распределения»)
// 	- если есть строки, где Количество <> 0 («не хватает данных в ТИ для распределения»)

// 3.4. Удаляем все оставшиеся ненужные таблицы, сформированные при расчете
// – оставляем только ВТРезультатРаспределения, ВТНераспределенныеДанныеИсточника, ВТНераспределенныеДанныеБазы

#КонецОбласти 

#Область ИнициализацияРаспределения

// Инициализирует основные параметры распределения.
// Обязательная.
//
// Параметры:
//	ИмяТаблицыИсточника - Строка - имя временной таблицы, содержащей данные для распределения.
//	ИмяТаблицыБазыРаспределения - Строка - имя временной таблицы, содержащей базу, по которой будут распределены данные из ИмяТаблицыИсточника.
//	ПоляСвязи - Строка - перечень полей (через запятую), по которым данные таблицы ИмяТаблицыИсточника будут сопоставляться с данными таблицы ИмяТаблицыБазыРаспределения;
//		имена полей этих таблиц должны совпадать;
//		сопоставление выполняется по условию "ИмяТаблицыИсточника.ПолеСвязи1 = ИмяТаблицыБазыРаспределения.ПолеСвязи1 И ИмяТаблицыИсточника.ПолеСвязи2 = ИмяТаблицыБазыРаспределения.ПолеСвязи2 И ..."
//	УдалятьИсточникПослеРаспределения - Булево - определяет необходимость удаления таблицы ИмяТаблицыИсточника после окончания распределения.
//	УдалятьБазуПослеРаспределения - Булево - определяет необходимость удаления таблицы ИмяТаблицыБазыРаспределения после окончания распределения.
//
//	Возвращаемое значение:
//		Структура - параметры распределения.
//
Функция ИнициализироватьПараметрыРаспределенияМетодомУменьшаемогоОстатка(
			ИмяТаблицыИсточника, ИмяТаблицыБазыРаспределения, ПоляСвязи,
			УдалятьИсточникПослеРаспределения = Ложь, УдалятьБазуПослеРаспределения = Ложь) Экспорт
	
	ПараметрыРаспределения = Новый Структура;
	// Описание источников и приемников данных распределения
	ПараметрыРаспределения.Вставить("ИмяТаблицыИсточника", 				 ИмяТаблицыИсточника);
	ПараметрыРаспределения.Вставить("УдалятьИсточникПослеРаспределения", УдалятьИсточникПослеРаспределения);
	ПараметрыРаспределения.Вставить("ИмяТаблицыБазыРаспределения", 		 ИмяТаблицыБазыРаспределения);
	ПараметрыРаспределения.Вставить("УдалятьБазуПослеРаспределения", 	 УдалятьБазуПослеРаспределения);
	// Описание полей связи
	ПараметрыРаспределения.Вставить("ПоляСвязи",			ПоляСвязи);
	// Описание числовых полей
	ПараметрыРаспределения.Вставить("ПравилаРаспределения",	Новый Массив); // содержит структуры с полями РесурсыИсточника, ПолеБазисаИсточника, ПолеБазисаБазы
	// Описание прочих полей
	ПараметрыРаспределения.Вставить("ПрочиеПоляИсточника",	"");
	ПараметрыРаспределения.Вставить("ПрочиеПоляБазы",		"");
	// Описание заполнения полей
	ПараметрыРаспределения.Вставить("НеВключатьПоляИсточника", 		"");
	ПараметрыРаспределения.Вставить("НеВключатьПоляБазы", 			"");
	ПараметрыРаспределения.Вставить("ПравилаЗаполненияПрочихПолей",	Новый Структура);
	
	// Описание результирующих таблиц.
	ИнициализироватьТаблицыРезультатовРаспределения(ПараметрыРаспределения,
		"ВТРезультатРаспределения",
		"ВТНераспределенныеДанныеИсточника",
		"ВТНераспределенныеДанныеБазы");
	
	// Шаблоны полей запросов
	ПараметрыРаспределения.Вставить("Шаблоны", Новый Структура);
	ПараметрыРаспределения.Шаблоны.Вставить("РазделительСтрок", "," + Символы.ПС + Символы.Таб);
	ПараметрыРаспределения.Шаблоны.Вставить("СоединениеСтрокИ", Символы.ПС + Символы.Таб + "И ");
	ПараметрыРаспределения.Шаблоны.Вставить("СоединениеСтрокИЛИ", Символы.ПС + Символы.Таб + "ИЛИ ");
	
	ПоляСвязиИменованные   = "";
	ПоляСвязиНеИменованные = "";
	ПоляСвязиСоединение    = "";
	
	Для Каждого ИмяПоля Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляСвязи, ",", Истина, Истина) Цикл
		ДополнитьСтроку(ПоляСвязиИменованные,   "%1." + ИмяПоля + " КАК " + ИмяПоля,,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок);
		ДополнитьСтроку(ПоляСвязиНеИменованные, "%1." + ИмяПоля ,,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок);
		ДополнитьСтроку(ПоляСвязиСоединение, "%1." + ИмяПоля + " = %2." + ИмяПоля,,,, ПараметрыРаспределения.Шаблоны.СоединениеСтрокИ);
	КонецЦикла;
	
	ПараметрыРаспределения.Шаблоны.Вставить("ПоляСвязиИменованные",   	  ПоляСвязиИменованные);
	ПараметрыРаспределения.Шаблоны.Вставить("ПоляСвязиНеИменованные", 	  ПоляСвязиНеИменованные);
	ПараметрыРаспределения.Шаблоны.Вставить("ПоляСвязиСоединение",    	  ПоляСвязиСоединение);
	ПараметрыРаспределения.Шаблоны.Вставить("ПоляИсточникаИменованные",   "");
	ПараметрыРаспределения.Шаблоны.Вставить("ПоляИсточникаНеИменованные", "");
	ПараметрыРаспределения.Шаблоны.Вставить("ПоляБазыИменованные",   	  "");
	ПараметрыРаспределения.Шаблоны.Вставить("ПоляБазыНеИменованные", 	  "");
	ПараметрыРаспределения.Шаблоны.Вставить("ПоляБазыДополнение", 	 	  "");
	ПараметрыРаспределения.Шаблоны.Вставить("ПравилаВыбораПолей", 		  "");
	
	Возврат ПараметрыРаспределения;
	
КонецФункции

// Инициализирует описание таблиц, в которые помещаются результаты распределения.
// Необязательная.
//
// Параметры:
//	ПараметрыРаспределения - Структура - результат функции ИнициализироватьПараметрыРаспределенияМетодомУменьшаемогоОстатка()
//	ИмяТаблицыРезультата - Строка - имя временной таблицы, в которую помещается результат распределения.
//	ИмяТаблицыНераспределенныхДанныхИсточника - Строка - имя временной таблицы, в которую помещается данные источника, не распределенные по базе;
//		если указана пустая строка, то таблица формироваться не будет.
//	ИмяТаблицыНераспределенныхДанныхБазы - Строка - имя временной таблицы, в которую помещается данные базы, для которых нет данных в источнике;
//		если указана пустая строка, то таблица формироваться не будет.
//
//	Возвращаемое значение:
//		Структура - параметры распределения.
//
Функция ИнициализироватьТаблицыРезультатовРаспределения(ПараметрыРаспределения,
			ИмяТаблицыРезультата,
			ИмяТаблицыНераспределенныхДанныхИсточника = "",
			ИмяТаблицыНераспределенныхДанныхБазы = "") Экспорт
	
	ПараметрыРаспределения.Вставить("ИмяТаблицыРезультата", 					 ИмяТаблицыРезультата);
	ПараметрыРаспределения.Вставить("ИмяТаблицыНераспределенныхДанныхИсточника", ИмяТаблицыНераспределенныхДанныхИсточника);
	ПараметрыРаспределения.Вставить("ИмяТаблицыНераспределенныхДанныхБазы", 	 ИмяТаблицыНераспределенныхДанныхБазы);
	
КонецФункции

// Инициализирует описание числовых полей таблиц, которые подлежат распределению.
// Обязательная. Возможен вызов несколько раз.
// Возможны ситуации, когда распределение разных ресурсов таблицы-источника необходимо выполнить по разным базисам.
// Например, ресурс Ресурс1 необходимо распределить по полю Базис1, а ресурс Ресурс2 - по полю Базис2.
// В этом случае необходимо вызывать процедуру два раза:
// ИнициализироватьЧисловыеПоляРаспределенияМетодомУменьшаемогоОстатка(ПараметрыРаспределения, "Ресурс1", "Базис1", "Базис1");
// ИнициализироватьЧисловыеПоляРаспределенияМетодомУменьшаемогоОстатка(ПараметрыРаспределения, "Ресурс2", "Базис2", "Базис2");
//
// Параметры:
//	ПараметрыРаспределения - Структура - результат функции ИнициализироватьПараметрыРаспределенияМетодомУменьшаемогоОстатка()
//	РесурсыИсточника - Строка - перечень распределяемых числовых полей таблицы-источника (через запятую).
//	ПолеБазисаИсточника - Строка - имя поля базиса таблицы-источника, по которому необходимо выполнить распределение ресурсов.
//	ПолеБазисаБазы - Строка - имя поля базиса таблицы-базы, по которому необходимо выполнить распределение ресурсов; может не совпадать с ПолеБазисаИсточника.
//
//	Возвращаемое значение:
//		Структура - дополненные параметры распределения.
//
Процедура ИнициализироватьЧисловыеПоляРаспределенияМетодомУменьшаемогоОстатка(ПараметрыРаспределения,
			РесурсыИсточника = "", ПолеБазисаИсточника = "Количество", ПолеБазисаБазы = "Количество") Экспорт
			
	ПравилоРаспределения = Новый Структура;
	ПравилоРаспределения.Вставить("РесурсыИсточника",		РесурсыИсточника);
	ПравилоРаспределения.Вставить("ПолеБазисаИсточника",	ПолеБазисаИсточника);
	ПравилоРаспределения.Вставить("ПолеБазисаБазы",			ПолеБазисаБазы);
	
	// Шаблоны полей запросов
	ПравилоРаспределения.Вставить("Шаблоны",				Новый Структура);
	
	БазисИсточника 			  	 = "%1." + ПолеБазисаИсточника;
	БазисИсточникаИменованный 	 = "%1." + ПолеБазисаИсточника + " КАК " + ПолеБазисаИсточника;
	БазисБазы 			 	  	 = "%1." + ПолеБазисаБазы;
	БазисБазыИменованный 	     = "%1." + ПолеБазисаБазы + " КАК " + ПолеБазисаБазы;
	ОтборНенулевойБазисИсточника = БазисИсточника + " <> 0";
	ОтборНенулевойБазисБазы 	 = БазисБазы + " <> 0";
	
	РасчетБазисаКСписанию =
		"ВЫБОР КОГДА %2." + ПолеБазисаБазы + " ЕСТЬ NULL
		|			ТОГДА 0
		|		КОГДА %3." + ПолеБазисаИсточника + " < %2." + ПолеБазисаБазы + "
		|			ТОГДА %3." + ПолеБазисаИсточника + "
		|		ИНАЧЕ %2." + ПолеБазисаБазы + "
		|	КОНЕЦ КАК БазисКСписанию";
	
	РасчетЕстьСтрокаТБ = "ВЫБОР КОГДА %2." + ПолеБазисаБазы + " ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК ЕстьСтрокаТБ";
	БазисКСписанию = "%1.БазисКСписанию КАК " + ПолеБазисаИсточника;
	НулевойБазисИсточника = "0 КАК " + ПолеБазисаИсточника;
	УменьшениеБазисаИсточника = "%1." + ПолеБазисаИсточника + " - ЕСТЬNULL(%4." + ПолеБазисаИсточника + ", 0) КАК " + ПолеБазисаИсточника;
	УменьшениеБазисаБазы = "%1." + ПолеБазисаБазы + " - ЕСТЬNULL(%4." + ПолеБазисаИсточника + ", 0) КАК " + ПолеБазисаБазы;
	ОтборУменьшениеБазисаИсточника = "%1." + ПолеБазисаИсточника + " - ЕСТЬNULL(%4." + ПолеБазисаИсточника + ", 0) > 0 ";
	ОтборУменьшениеБазисаБазы = "%1." + ПолеБазисаБазы + " - ЕСТЬNULL(%4." + ПолеБазисаИсточника + ", 0) > 0 ";
	
	БазисИсточникаПоложительный = "СУММА(ВЫБОР КОГДА %1." + ПолеБазисаИсточника + " < 0 ТОГДА -%1." + ПолеБазисаИсточника + " ИНАЧЕ %1." + ПолеБазисаИсточника + " КОНЕЦ)";
	БазисБазыПоложительный      = "СУММА(ВЫБОР КОГДА %1." + ПолеБазисаБазы + " < 0 ТОГДА -%1." + ПолеБазисаБазы + " ИНАЧЕ %1." + ПолеБазисаБазы + " КОНЕЦ)";
	
	СуммаБазисовИсточника = "СУММА(%1." + ПолеБазисаИсточника + ") КАК " + ПолеБазисаИсточника;
	СуммаБазисовБазы = "СУММА(%1." + ПолеБазисаБазы + ") КАК " + ПолеБазисаБазы;
	НенулеваяСуммаРаспределенныхБазисовИсточника = "СУММА(%1." + ПолеБазисаИсточника + ") <> 0";
	НенулеваяСуммаРаспределенныхБазисовБазы = "СУММА(%1." + ПолеБазисаБазы + ") <> 0";
	
	БазисИсточникаПоложительныйИменованный = БазисИсточникаПоложительный + " КАК " + ПолеБазисаИсточника;
	БазисБазыПоложительныйИменованный      = БазисБазыПоложительный + " КАК " + ПолеБазисаБазы;
	
	ЗнакБазисаИсточника 			 = "ВЫБОР КОГДА %1." + ПолеБазисаИсточника + " < 0 ТОГДА -1 ИНАЧЕ 1 КОНЕЦ КАК Знак" + ПолеБазисаИсточника;
	ЗнакБазисаИсточникаНеИменованный = "ВЫБОР КОГДА %1." + ПолеБазисаИсточника + " < 0 ТОГДА -1 ИНАЧЕ 1 КОНЕЦ";
	ЗнакБазисаБазы      			 = "ВЫБОР КОГДА " + ПолеБазисаБазы + " < 0 ТОГДА -1 ИНАЧЕ 1 КОНЕЦ КАК Знак" + ПолеБазисаБазы;
	ЗнакБазисаБазыНеИменованный		 = "ВЫБОР КОГДА " + ПолеБазисаБазы + " < 0 ТОГДА -1 ИНАЧЕ 1 КОНЕЦ";
	БазисИсточникаСИсходнымЗнаком 	 = "%1." + ПолеБазисаИсточника + " * %3.Знак" + ПолеБазисаИсточника + " КАК " + ПолеБазисаИсточника;
	БазисБазыСИсходнымЗнаком 	 	 = "%1." + ПолеБазисаБазы + " * %2.Знак" + ПолеБазисаБазы + " КАК " + ПолеБазисаБазы;
	
	ОтборНенулеваяСуммаБазисовИсточника = БазисИсточникаПоложительный + " <> 0";
	ОтборНенулеваяСуммаБазисовБазы = БазисБазыПоложительный + " <> 0";
	
	РесурсыИменованные = "";
	СуммыРесурсовИменованные = "";
	ЦеныРесурсовИменованные = "";
	ЦеныСуммРесурсовИменованные  = "";
	РесурсыКСписанию = "";
	НулевыеРесурсыИсточника = "";
	УменьшениеРесурсовИсточника = "";
	СуммаРесурсовИсточника = "";
	НенулеваяСуммаРаспределенныхРесурсовИсточника = "";
	
	Для Каждого ИмяПоля Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РесурсыИсточника, ",", Истина, Истина) Цикл
		
		ДополнитьСтроку(РесурсыИменованные, "%1." + ИмяПоля + " КАК " + ИмяПоля);
		ДополнитьСтроку(СуммыРесурсовИменованные, "СУММА(%1." + ИмяПоля + ") КАК " + ИмяПоля);
		
		ДополнитьСтроку(ЦеныРесурсовИменованные,  "%1.Цена" + ИмяПоля + " КАК Цена" + ИмяПоля);
		ДополнитьСтроку(ЦеныСуммРесурсовИменованные,  "СУММА(%1." + ИмяПоля + ") / " + БазисИсточникаПоложительный + " КАК Цена" + ИмяПоля);
		
		ДополнитьСтроку(РесурсыКСписанию, "
			|	ВЫРАЗИТЬ(ВЫБОР КОГДА НЕ %1.ЕстьСтрокаТБ
			|			ТОГДА 0
			|		КОГДА %1.БазисКСписанию = %3." + ПолеБазисаИсточника + "
			|			ТОГДА %3." + ИмяПоля + " 
			|		ИНАЧЕ %1.БазисКСписанию * %3.Цена" + ИмяПоля + "
			|	КОНЕЦ КАК ЧИСЛО (31,2)) КАК " + ИмяПоля);
		
		ДополнитьСтроку(НулевыеРесурсыИсточника, "0 КАК " + ИмяПоля);
		ДополнитьСтроку(УменьшениеРесурсовИсточника, "%1." + ИмяПоля + " - ЕСТЬNULL(%4." + ИмяПоля + ", 0) КАК " + ИмяПоля);
		
		ДополнитьСтроку(СуммаРесурсовИсточника, "СУММА(%1." + ИмяПоля + ") КАК " + ИмяПоля);
		ДополнитьСтроку(НенулеваяСуммаРаспределенныхРесурсовИсточника, "СУММА(%1." + ИмяПоля + ") <> 0",,,, ПараметрыРаспределения.Шаблоны.СоединениеСтрокИЛИ);
		
	КонецЦикла;
	
	ПравилоРаспределения.Шаблоны.Вставить("БазисИсточника", 						БазисИсточника);
	ПравилоРаспределения.Шаблоны.Вставить("БазисИсточникаИменованный", 				БазисИсточникаИменованный);
	ПравилоРаспределения.Шаблоны.Вставить("БазисБазы", 								БазисБазы);
	ПравилоРаспределения.Шаблоны.Вставить("БазисБазыИменованный", 					БазисБазыИменованный);
	ПравилоРаспределения.Шаблоны.Вставить("ОтборНенулевойБазисИсточника", 			ОтборНенулевойБазисИсточника);
	ПравилоРаспределения.Шаблоны.Вставить("ОтборНенулевойБазисБазы", 				ОтборНенулевойБазисБазы);
	ПравилоРаспределения.Шаблоны.Вставить("БазисИсточникаПоложительныйИменованный", БазисИсточникаПоложительныйИменованный);
	ПравилоРаспределения.Шаблоны.Вставить("БазисБазыПоложительныйИменованный", 		БазисБазыПоложительныйИменованный);
	ПравилоРаспределения.Шаблоны.Вставить("ЗнакБазисаИсточника", 					ЗнакБазисаИсточника);
	ПравилоРаспределения.Шаблоны.Вставить("ЗнакБазисаБазы", 						ЗнакБазисаБазы);
	ПравилоРаспределения.Шаблоны.Вставить("ЗнакБазисаИсточникаНеИменованный", 		ЗнакБазисаИсточникаНеИменованный);
	ПравилоРаспределения.Шаблоны.Вставить("ЗнакБазисаБазыНеИменованный", 			ЗнакБазисаБазыНеИменованный);
	ПравилоРаспределения.Шаблоны.Вставить("ОтборНенулеваяСуммаБазисовИсточника", 	ОтборНенулеваяСуммаБазисовИсточника);
	ПравилоРаспределения.Шаблоны.Вставить("ОтборНенулеваяСуммаБазисовБазы",			ОтборНенулеваяСуммаБазисовБазы);
	ПравилоРаспределения.Шаблоны.Вставить("РесурсыИменованные",						РесурсыИменованные);
	ПравилоРаспределения.Шаблоны.Вставить("СуммыРесурсовИменованные",				СуммыРесурсовИменованные);
	ПравилоРаспределения.Шаблоны.Вставить("ЦеныРесурсовИменованные",				ЦеныРесурсовИменованные);
	ПравилоРаспределения.Шаблоны.Вставить("ЦеныСуммРесурсовИменованные",			ЦеныСуммРесурсовИменованные);
	ПравилоРаспределения.Шаблоны.Вставить("РесурсыКСписанию",						РесурсыКСписанию);
	
	ПравилоРаспределения.Шаблоны.Вставить("РасчетБазисаКСписанию",					РасчетБазисаКСписанию);
	ПравилоРаспределения.Шаблоны.Вставить("РасчетЕстьСтрокаТБ",						РасчетЕстьСтрокаТБ);
	ПравилоРаспределения.Шаблоны.Вставить("БазисКСписанию",							БазисКСписанию);
	ПравилоРаспределения.Шаблоны.Вставить("НулевойБазисИсточника",					НулевойБазисИсточника);
	ПравилоРаспределения.Шаблоны.Вставить("НулевыеРесурсыИсточника",				НулевыеРесурсыИсточника);
	ПравилоРаспределения.Шаблоны.Вставить("УменьшениеБазисаИсточника",				УменьшениеБазисаИсточника);
	ПравилоРаспределения.Шаблоны.Вставить("УменьшениеБазисаБазы",					УменьшениеБазисаБазы);
	ПравилоРаспределения.Шаблоны.Вставить("УменьшениеРесурсовИсточника",			УменьшениеРесурсовИсточника);
	ПравилоРаспределения.Шаблоны.Вставить("ОтборУменьшениеБазисаИсточника",			ОтборУменьшениеБазисаИсточника);
	ПравилоРаспределения.Шаблоны.Вставить("ОтборУменьшениеБазисаБазы",				ОтборУменьшениеБазисаБазы);
	
	Если ПараметрыРаспределения.ПравилаРаспределения.Количество() = 0 Тогда
		ПараметрыРаспределения.Шаблоны.Вставить("ВсеБазисыИсточника", 					  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("ВсеРесурсыИсточника", 					  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("БазисИсточника", 						  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("БазисИсточникаИменованный", 			  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("БазисБазы", 							  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("БазисБазыИменованный", 				  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("БазисИсточникаПоложительныйИменованный", 		"");
		ПараметрыРаспределения.Шаблоны.Вставить("БазисБазыПоложительныйИменованный", 	  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("ЗнакБазисаИсточника", 					  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("ЗнакБазисаБазы", 						  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("ЗнакБазисаИсточникаНеИменованный", 			"");
		ПараметрыРаспределения.Шаблоны.Вставить("ЗнакБазисаБазыНеИменованный", 					"");
		ПараметрыРаспределения.Шаблоны.Вставить("ОтборНенулеваяСуммаБазисовИсточника", 	  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("ОтборНенулеваяСуммаБазисовБазы", 		  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("РесурсыИменованные", 			  		  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("СуммыРесурсовИменованные", 			  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("ЦеныРесурсовИменованные", 			  	  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("ЦеныСуммРесурсовИменованные", 			  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("НулевыеБазисыИсточников",				  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("НулевыеРесурсыИсточников",				  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("БазисИсточникаСИсходнымЗнаком",		  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("БазисБазыСИсходнымЗнаком",		  				"");
		ПараметрыРаспределения.Шаблоны.Вставить("СуммаЧисловыхПолейИсточника",		  		  	"");
		ПараметрыРаспределения.Шаблоны.Вставить("НенулеваяСуммаЧисловыхПолейИсточника",			"");
		ПараметрыРаспределения.Шаблоны.Вставить("СуммаБазисовБазы",		  				  		"");
		ПараметрыРаспределения.Шаблоны.Вставить("НенулеваяСуммаРаспределенныхБазисовБазы",	   	"");
		
	КонецЕсли;
	
	ПараметрыРаспределения.Шаблоны.Вставить("ВсеБазисыИсточника",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.ВсеБазисыИсточника, ПолеБазисаИсточника,,,, ","));
	ПараметрыРаспределения.Шаблоны.Вставить("ВсеРесурсыИсточника",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.ВсеРесурсыИсточника, РесурсыИсточника,,,, ","));
	ПараметрыРаспределения.Шаблоны.Вставить("БазисИсточника",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.БазисИсточника, БазисИсточника,,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок));
	ПараметрыРаспределения.Шаблоны.Вставить("БазисИсточникаИменованный",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.БазисИсточникаИменованный, БазисИсточникаИменованный,,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок));
	ПараметрыРаспределения.Шаблоны.Вставить("БазисБазы",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.БазисБазы, БазисБазы,,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок));
	ПараметрыРаспределения.Шаблоны.Вставить("БазисБазыИменованный",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.БазисБазыИменованный, БазисБазыИменованный,,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок));
	ПараметрыРаспределения.Шаблоны.Вставить("БазисИсточникаПоложительныйИменованный",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.БазисИсточникаПоложительныйИменованный, БазисИсточникаПоложительныйИменованный,,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок));
	ПараметрыРаспределения.Шаблоны.Вставить("БазисБазыПоложительныйИменованный",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.БазисБазыПоложительныйИменованный, БазисБазыПоложительныйИменованный,,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок));
	ПараметрыРаспределения.Шаблоны.Вставить("ЗнакБазисаИсточника",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.ЗнакБазисаИсточника, ЗнакБазисаИсточника,,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок));
	ПараметрыРаспределения.Шаблоны.Вставить("ЗнакБазисаБазы",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.ЗнакБазисаБазы, ЗнакБазисаБазы,,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок));
	ПараметрыРаспределения.Шаблоны.Вставить("ЗнакБазисаИсточникаНеИменованный",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.ЗнакБазисаИсточникаНеИменованный, ЗнакБазисаИсточникаНеИменованный,,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок));
	ПараметрыРаспределения.Шаблоны.Вставить("ЗнакБазисаБазыНеИменованный",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.ЗнакБазисаБазыНеИменованный, ЗнакБазисаБазыНеИменованный,,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок));
	ПараметрыРаспределения.Шаблоны.Вставить("ОтборНенулеваяСуммаБазисовИсточника",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.ОтборНенулеваяСуммаБазисовИсточника, ОтборНенулеваяСуммаБазисовИсточника,,,, ПараметрыРаспределения.Шаблоны.СоединениеСтрокИЛИ));
	ПараметрыРаспределения.Шаблоны.Вставить("ОтборНенулеваяСуммаБазисовБазы",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.ОтборНенулеваяСуммаБазисовБазы, ОтборНенулеваяСуммаБазисовБазы,,,, ПараметрыРаспределения.Шаблоны.СоединениеСтрокИЛИ));
	ПараметрыРаспределения.Шаблоны.Вставить("РесурсыИменованные",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.РесурсыИменованные, РесурсыИменованные,,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок));
	ПараметрыРаспределения.Шаблоны.Вставить("СуммыРесурсовИменованные",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.СуммыРесурсовИменованные, СуммыРесурсовИменованные,,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок));
	ПараметрыРаспределения.Шаблоны.Вставить("ЦеныРесурсовИменованные",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.ЦеныРесурсовИменованные, ЦеныРесурсовИменованные,,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок));
	ПараметрыРаспределения.Шаблоны.Вставить("ЦеныСуммРесурсовИменованные",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.ЦеныСуммРесурсовИменованные, ЦеныСуммРесурсовИменованные,,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок));
	ПараметрыРаспределения.Шаблоны.Вставить("НулевыеБазисыИсточников",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.НулевыеБазисыИсточников, НулевойБазисИсточника,,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок));
	ПараметрыРаспределения.Шаблоны.Вставить("НулевыеРесурсыИсточников",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.НулевыеРесурсыИсточников, НулевыеРесурсыИсточника,,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок));
	ПараметрыРаспределения.Шаблоны.Вставить("БазисИсточникаСИсходнымЗнаком",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.БазисИсточникаСИсходнымЗнаком, БазисИсточникаСИсходнымЗнаком,,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок));
	ПараметрыРаспределения.Шаблоны.Вставить("БазисБазыСИсходнымЗнаком",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.БазисБазыСИсходнымЗнаком, БазисБазыСИсходнымЗнаком,,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок));
	ПараметрыРаспределения.Шаблоны.Вставить("СуммаЧисловыхПолейИсточника",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.СуммаЧисловыхПолейИсточника, СуммаБазисовИсточника, СуммаРесурсовИсточника,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок));
	ПараметрыРаспределения.Шаблоны.Вставить("НенулеваяСуммаЧисловыхПолейИсточника",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.НенулеваяСуммаЧисловыхПолейИсточника, НенулеваяСуммаРаспределенныхБазисовИсточника, НенулеваяСуммаРаспределенныхРесурсовИсточника,,, ПараметрыРаспределения.Шаблоны.СоединениеСтрокИЛИ));
	ПараметрыРаспределения.Шаблоны.Вставить("СуммаБазисовБазы",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.СуммаБазисовБазы, СуммаБазисовБазы,,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок));
	ПараметрыРаспределения.Шаблоны.Вставить("НенулеваяСуммаРаспределенныхБазисовБазы",
		СоединитьСтроки(ПараметрыРаспределения.Шаблоны.НенулеваяСуммаРаспределенныхБазисовБазы, НенулеваяСуммаРаспределенныхБазисовБазы,,,, ПараметрыРаспределения.Шаблоны.СоединениеСтрокИЛИ));
	
	ПараметрыРаспределения.ПравилаРаспределения.Добавить(ПравилоРаспределения);
	
	Для Каждого ТекущееПравило Из ПараметрыРаспределения.ПравилаРаспределения Цикл
		
		ДругиеНулевыеБазисы = "";
		ДругиеНулевыеРесурсы = "";
		
		Для Каждого ДругиеПравила Из ПараметрыРаспределения.ПравилаРаспределения Цикл
			
			Если ТекущееПравило = ДругиеПравила Тогда
				Продолжить;
			КонецЕсли;
			
			ДополнитьСтроку(ДругиеНулевыеБазисы, ДругиеПравила.Шаблоны.НулевойБазисИсточника,,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок);
			ДополнитьСтроку(ДругиеНулевыеРесурсы, ДругиеПравила.Шаблоны.НулевыеРесурсыИсточника,,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок);
			
		КонецЦикла;
		
		ТекущееПравило.Шаблоны.Вставить("ДругиеНулевыеБазисы",  ДругиеНулевыеБазисы);
		ТекущееПравило.Шаблоны.Вставить("ДругиеНулевыеРесурсы", ДругиеНулевыеРесурсы);
		
	КонецЦикла;
	
КонецПроцедуры

// Инициализирует описание прочих полей таблиц, которые необходимо включить в результат распределения.
// Необязательная.
// Прочие поля источника/базы, присутствующие в полях связи, будут исключены из списка прочих полей.
//
// Параметры:
//	ПараметрыРаспределения - Структура - результат функции ИнициализироватьПараметрыРаспределенияМетодомУменьшаемогоОстатка()
//	ПрочиеПоляИсточника - Строка - перечень прочих полей таблицы-источника (через запятую);
//		по этим полям будет выполнено упорядочивание данных таблицы-источника перед распределением.
//	ПрочиеПоляБазы - Строка - перечень прочих полей таблицы-базы (через запятую);
//		по этим полям будет выполнено упорядочивание данных таблицы-базы перед распределением.
//	НеВключатьПоляИсточника - Строка - перечень полей (через запятую) таблицы-источника, которые необходимы для упорядочивания данных, но не нужны в результате распределения.
//	НеВключатьПоляБазы - Строка - перечень полей (через запятую) таблицы-базы, которые необходимы для упорядочивания данных, но не нужны в результате распределения.
//
//	Возвращаемое значение:
//		Структура - дополненные параметры распределения.
//
Процедура ИнициализироватьПрочиеПоляРаспределенияМетодомУменьшаемогоОстатка(ПараметрыРаспределения,
			ПрочиеПоляИсточника = "", ПрочиеПоляБазы = "", НеВключатьПоляИсточника = "", НеВключатьПоляБазы = "") Экспорт
	
	// Шаблоны полей запросов
	ПоляИсточника = "";
	ПоляБазы = "";
	ПоляИсточникаИменованные = "";
	ПоляИсточникаНеИменованные = "";
	СтруктураПоляСвязи = Новый Структура(ПараметрыРаспределения.ПоляСвязи);
	
	ИсключаемыеПоля = Новый Структура(НеВключатьПоляИсточника);
	
	Для Каждого ИмяПоля Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПрочиеПоляИсточника, ",", Истина, Истина) Цикл
		
		Если ИсключаемыеПоля.Свойство(ИмяПоля) ИЛИ СтруктураПоляСвязи.Свойство(ИмяПоля) Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнитьСтроку(ПоляИсточника, ИмяПоля);
		ДополнитьСтроку(ПоляИсточникаИменованные,   "%1." + ИмяПоля + " КАК " + ИмяПоля,,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок);
		ДополнитьСтроку(ПоляИсточникаНеИменованные, "%1." + ИмяПоля ,,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок);
		
		ПараметрыРаспределения.ПравилаЗаполненияПрочихПолей.Вставить(ИмяПоля, 1);
		
	КонецЦикла;
	
	ПараметрыРаспределения.Шаблоны.Вставить("ПоляИсточникаИменованные",   ПоляИсточникаИменованные);
	ПараметрыРаспределения.Шаблоны.Вставить("ПоляИсточникаНеИменованные", ПоляИсточникаНеИменованные);
	
	ПоляБазыИменованные = "";
	ПоляБазыНеИменованные = "";
	ПоляБазыДополнение = "";
	
	ИсключаемыеПоля = Новый Структура(НеВключатьПоляБазы);
	
	Для Каждого ИмяПоля Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПрочиеПоляБазы, ",", Истина, Истина) Цикл
		
		Если ИсключаемыеПоля.Свойство(ИмяПоля) ИЛИ СтруктураПоляСвязи.Свойство(ИмяПоля) Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнитьСтроку(ПоляБазы, ИмяПоля);
		ДополнитьСтроку(ПоляБазыИменованные,   "%1." + ИмяПоля + " КАК " + ИмяПоля,,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок);
		ДополнитьСтроку(ПоляБазыНеИменованные, "%1." + ИмяПоля ,,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок);
		
		Если НЕ ПараметрыРаспределения.ПравилаЗаполненияПрочихПолей.Свойство(ИмяПоля) Тогда
			
			// Поля с таким именем нет в источнике - возьмем его из базы.
			ПараметрыРаспределения.ПравилаЗаполненияПрочихПолей.Вставить(ИмяПоля, 2);
			
			ДополнитьСтроку(ПоляБазыДополнение, "&ПустоеЗначениеБазы_" + ИмяПоля + " КАК " + ИмяПоля,,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок);
			
		Иначе
			
			// Поля, которые есть в источнике и в базе возьмем с приоритетом базы.
			ПараметрыРаспределения.ПравилаЗаполненияПрочихПолей.Вставить(ИмяПоля, 4);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыРаспределения.Шаблоны.Вставить("ПоляБазыИменованные",   ПоляБазыИменованные);
	ПараметрыРаспределения.Шаблоны.Вставить("ПоляБазыНеИменованные", ПоляБазыНеИменованные);
	ПараметрыРаспределения.Шаблоны.Вставить("ПоляБазыДополнение", 	 ПоляБазыДополнение);
	
	ПараметрыРаспределения.Вставить("ПрочиеПоляИсточника", 			 ПоляИсточника);
	ПараметрыРаспределения.Вставить("НеВключатьПоляИсточника", 		 НеВключатьПоляИсточника);
	ПараметрыРаспределения.Вставить("НеВключатьПоляБазы", 			 НеВключатьПоляБазы);
	ПараметрыРаспределения.Вставить("ПрочиеПоляБазы", 				 ПоляБазы);
	
	ИнициализироватьПравилаЗаполненияПрочихПолейРаспределенияМетодомУменьшаемогоОстатка(ПараметрыРаспределения);
	
КонецПроцедуры

// Инициализирует правила заполнения прочих полей таблиц в результате распределения.
// Необязательная.
//
// Параметры:
//	ПараметрыРаспределения - Структура - результат функции ИнициализироватьПараметрыРаспределенияМетодомУменьшаемогоОстатка()
//	ПоляДляЗаполненияИзИсточника - Строка - перечень прочих полей таблицы-источника (через запятую), которые должны быть безусловно перенесены в результат распределения.
//		необходимо указывать только поля, присутствующие и в таблице-источнике, и в таблице-базе.
//	ПоляДляЗаполненияИзБазы - Строка - перечень прочих полей таблицы-базы (через запятую), которые должны быть безусловно перенесены в результат распределения.
//		необходимо указывать только поля, присутствующие и в таблице-источнике, и в таблице-базе.
//	ПоляСПриоритетомИсточника - Строка - перечень прочих полей таблицы-источника (через запятую), которые должны быть перенесены в результат распределения
//		в том случае, если значение поля в источнике заполнено; если значение поля в источнике не заполнено, то в результат будет перенесено значение поля из базы.
//		необходимо указывать только поля, присутствующие и в таблице-источнике, и в таблице-базе.
//	ПоляСПриоритетомБазы - Строка - перечень прочих полей таблицы-базы (через запятую), которые должны быть перенесены в результат распределения
//		в том случае, если значение поля в базе заполнено; если значение поля в базе не заполнено, то в результат будет перенесено значение поля из источника.
//		необходимо указывать только поля, присутствующие и в таблице-источнике, и в таблице-базе.
//
//	Возвращаемое значение:
//		Структура - дополненные параметры распределения.
//
Процедура ИнициализироватьПравилаЗаполненияПрочихПолейРаспределенияМетодомУменьшаемогоОстатка(ПараметрыРаспределения,
			ПоляДляЗаполненияИзИсточника = "", ПоляДляЗаполненияИзБазы = "",
			ПоляСПриоритетомИсточника = "", ПоляСПриоритетомБазы = "") Экспорт
	
	Для Каждого КлючИЗначение Из Новый Структура(ПоляДляЗаполненияИзИсточника) Цикл
		ПараметрыРаспределения.ПравилаЗаполненияПрочихПолей.Вставить(КлючИЗначение.Ключ, 1);
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из Новый Структура(ПоляДляЗаполненияИзБазы) Цикл
		ПараметрыРаспределения.ПравилаЗаполненияПрочихПолей.Вставить(КлючИЗначение.Ключ, 2);
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из Новый Структура(ПоляСПриоритетомИсточника) Цикл
		ПараметрыРаспределения.ПравилаЗаполненияПрочихПолей.Вставить(КлючИЗначение.Ключ, 3);
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из Новый Структура(ПоляСПриоритетомБазы) Цикл
		ПараметрыРаспределения.ПравилаЗаполненияПрочихПолей.Вставить(КлючИЗначение.Ключ, 4);
	КонецЦикла;
	
	// Шаблоны полей запросов
	ПравилаВыбораПолей = "";

	Для Каждого КлючИЗначение Из ПараметрыРаспределения.ПравилаЗаполненияПрочихПолей Цикл
		
		ПрочееПоле = "";
		
		Если КлючИЗначение.Значение = 1 Тогда
			ПрочееПоле = "%3." + КлючИЗначение.Ключ + " КАК " + КлючИЗначение.Ключ;
		ИначеЕсли КлючИЗначение.Значение = 2 Тогда
			ПрочееПоле = "%2." + КлючИЗначение.Ключ + " КАК " + КлючИЗначение.Ключ;
		ИначеЕсли КлючИЗначение.Значение = 3 Тогда
			ПрочееПоле = "ВЫБОР КОГДА %3." + КлючИЗначение.Ключ + " = &ПустоеЗначениеИсточника_" + КлючИЗначение.Ключ + "
				|		ТОГДА %2." + КлючИЗначение.Ключ + " ИНАЧЕ %3." + КлючИЗначение.Ключ + "
				|	КОНЕЦ КАК " + КлючИЗначение.Ключ;
		Иначе
			ПрочееПоле = "ВЫБОР КОГДА %2." + КлючИЗначение.Ключ + " = &ПустоеЗначениеБазы_" + КлючИЗначение.Ключ + "
				|		ТОГДА %3." + КлючИЗначение.Ключ + " ИНАЧЕ %2." + КлючИЗначение.Ключ + "
				|	КОНЕЦ КАК " + КлючИЗначение.Ключ;
		КонецЕсли;
		
		ДополнитьСтроку(ПравилаВыбораПолей, ПрочееПоле,,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок);
		
	КонецЦикла;
	
	ПараметрыРаспределения.Шаблоны.Вставить("ПравилаВыбораПолей", ПравилаВыбораПолей);
	
КонецПроцедуры

#КонецОбласти

#Область ЗапускРаспределения

// Выполняет распределение данных временных таблиц методом уменьшаемого остатка.
// В результате будут сформированы следующие временные таблицы:
//	ВТРезультатРаспределения - результат распределения;
//		содержит поля ПоляСвязи + (все РесурсыИсточника + ПолеБазисаИсточника) + (ПрочиеПоляИсточника без НеВключатьПоляИсточника)
//		также содержит служебные поля "КлючТИ" и "КлючТБ"
//	ВТНераспределенныеДанныеИсточника - данные из ИмяТаблицыИсточника, для которых не хватило данных в базе распределения;
//		содержит те же поля, что и ВТРезультатРаспределения за исключением служебных полей;
//		также содержит служебное поле ЕстьБаза с типом Булево:
//			- если равно Истина, то для данной записи источника была база, но количества в поле базиса таблицы-базы не хватило для полного распределения данных таблицы-источника;
//				числовые поля содержат нераспределенные остатки; прочие поля заполнены из таблицы-источника.
//			- если равно Ложь, то для данной записи источника не было базы распределения;
//				числовые поля содержат исходные значения из таблицы-источника; прочие поля заполнены из таблицы-источника.
//	ВТНераспределенныеДанныеБазы - данные из ИмяТаблицыБазыРаспределения, для которых не хватило данных в источнике.
//		содержит поля ПоляСвязи + (все ПолеБазисаБазы) + (ПрочиеПоляБазы без НеВключатьПоляБазы)
//		также содержит служебное поле ЕстьИсточник с типом Булево:
//			- если равно Истина, то для данной записи базы были сопоставлены поля источника, но значение в поле базиса таблицы-базы превысило базис таблицы-источника;
//				числовые поля содержат нераспределенные остатки; прочие поля заполнены из таблицы-базы.
//			- если равно Ложь, то для данной записи базы не были сопоставлены поля источника;
//				числовые поля содержат исходные значения из таблицы-базы; прочие поля заполнены из таблицы-базы.
// Имена таблиц результатов можно переопределить в процедуре ИнициализироватьТаблицыРезультатовРаспределения().
//
// Также в ПараметрыРаспределения будет добавлен ключ РезультатыРаспределения с типом Структура, в которую будут добавлены следующие данные (Ключ - Значение):
//	КоличествоИтераций - общее количество итераций распределения
//	ВремяРасчета - общее время расчета в секундах
//	РазмерИсточника - количество записей в таблице ИмяТаблицыИсточника
//	РазмерБазы - количество записей в таблице ИмяТаблицыБазыРаспределения
//	РазмерРезультата - количество записей в таблице ВТРезультатРаспределения
//	РазмерНераспределенныхЗаписейИсточника - количество записей в таблице ВТНераспределенныеДанныеИсточника
//	РазмерНераспределенныхЗаписейБазы - количество записей в таблице ВТНераспределенныеДанныеБазы
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц, содержащий таблицы ИмяТаблицыИсточника и ИмяТаблицыБазыРаспределения.
//	ПараметрыРаспределения - Структура - результат функции ИнициализироватьПараметрыРаспределенияМетодомУменьшаемогоОстатка()
//
Процедура РаспределитьМетодомУменьшаемогоОстатка(МенеджерВременныхТаблиц, ПараметрыРаспределения) Экспорт
	
	#Область ВспомогательныеДанные
	
	// Подготовим вспомогательные данные
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ПараметрыРаспределения.Вставить("РезультатыРаспределения", Новый Структура);
	
	ПараметрыУниверсальныхМеханизмов = ИнициализироватьПараметрыИспользованияУниверсальныхМеханизмов(МенеджерВременныхТаблиц);
	
	РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(
		МенеджерВременныхТаблиц,
		СоединитьСтроки(
			ПараметрыРаспределения.ИмяТаблицыРезультата,
			ПараметрыРаспределения.ИмяТаблицыНераспределенныхДанныхИсточника,
			ПараметрыРаспределения.ИмяТаблицыНераспределенныхДанныхБазы)); // результаты прошлого распределения
	
	СуществующиеВТ = РасчетСебестоимостиПрикладныеАлгоритмы.ПолучитьПереченьСуществующихВременныхТаблиц(МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ПоляИсточникаДляУпорядочивания = "";
	ПоляБазыДляУпорядочивания = "";
	
	// Получим типы пустых значений всех прочих полей источника и базы
	// Значения этих типов поместим в параметры запроса чтобы использовать их для определения заполнения полей при выборе значений полей по правилам
	Если ЗначениеЗаполнено(ПараметрыРаспределения.Шаблоны.ПоляИсточникаИменованные) Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	%ПоляИсточникаИменованные%
		|ИЗ
		|	%ИмяТаблицыИсточника% КАК Т";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляИсточникаИменованные%", ПараметрыРаспределения.Шаблоны.ПоляИсточникаИменованные);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяТаблицыИсточника%", ПараметрыРаспределения.ИмяТаблицыИсточника);
		
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, "Т");
		
		Колонки = Запрос.Выполнить().Выгрузить().Колонки;
		
		Для Каждого ТекущаяКолонка Из Колонки Цикл
			
			ТипЗначенияКолонки = ОписанияТиповБезТипаNull(ТекущаяКолонка.ТипЗначения);
			
			Запрос.УстановитьПараметр(
				"ПустоеЗначениеИсточника_" + ТекущаяКолонка.Имя,
				ТипЗначенияКолонки.ПривестиЗначение(Неопределено));
			
			ДополнитьСтроку(
				ПоляИсточникаДляУпорядочивания,
				ТекущаяКолонка.Имя + ?(ЭтоОписаниеТиповДокументов(ТипЗначенияКолонки), ".МоментВремени", ""));
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыРаспределения.Шаблоны.ПоляБазыИменованные) Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	%ПоляБазыИменованные%
		|ИЗ
		|	%ИмяТаблицыБазыРаспределения% КАК Т";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляБазыИменованные%", ПараметрыРаспределения.Шаблоны.ПоляБазыИменованные);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяТаблицыБазыРаспределения%", ПараметрыРаспределения.ИмяТаблицыБазыРаспределения);
		
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, "Т");
		
		Колонки = Запрос.Выполнить().Выгрузить().Колонки;
		
		Для Каждого ТекущаяКолонка Из Колонки Цикл
			
			ТипЗначенияКолонки = ОписанияТиповБезТипаNull(ТекущаяКолонка.ТипЗначения);
			
			Запрос.УстановитьПараметр(
				"ПустоеЗначениеБазы_" + ТекущаяКолонка.Имя,
				ТипЗначенияКолонки.ПривестиЗначение(Неопределено));
			
			ДополнитьСтроку(
				ПоляБазыДляУпорядочивания,
				ТекущаяКолонка.Имя + ?(ЭтоОписаниеТиповДокументов(ТипЗначенияКолонки), ".МоментВремени", ""));
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти 
	
	#Область ПодготовкаДанных
	
	// 1.1
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	%ПоляСвязи%
	|ПОМЕСТИТЬ ВТВсеПоляСвязи
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		%ПоляСвязи%
	|	ИЗ
	|		%ИмяТаблицыИсточника% КАК Т
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		%ПоляСвязи%
	|	ИЗ
	|		%ИмяТаблицыБазыРаспределения% КАК Т) КАК Т";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяТаблицыИсточника%", 		  ПараметрыРаспределения.ИмяТаблицыИсточника);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяТаблицыБазыРаспределения%", ПараметрыРаспределения.ИмяТаблицыБазыРаспределения);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляСвязи%",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаспределения.Шаблоны.ПоляСвязиИменованные, "Т"));
	
	Запрос.Выполнить();
	
	ПараметрыНумерации = РасчетСебестоимостиПрикладныеАлгоритмы.СформироватьПараметрыНумерацииСтрокВременнойТаблицы(
		"",
		"",
		ПараметрыРаспределения.ПоляСвязи, // упорядочивание
		"КлючСвязи"); // номер строки
		
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьНомераСтрокВременнойТаблицы(
		ПараметрыУниверсальныхМеханизмов,
		ПараметрыНумерации,
		"ВТВсеПоляСвязи",
		"ВТКлючиПолейСвязи");
	
	// 1.2
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Ключи.КлючСвязи КАК КлючСвязи,
	|	%ВсеПоляИсточника%
	|ПОМЕСТИТЬ ВТИсходнаяТИБезНумерации
	|ИЗ
	|	%ИмяТаблицыИсточника% КАК Т
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТКлючиПолейСвязи КАК Ключи
	|	ПО %ПоляСвязиСоединение%
	|СГРУППИРОВАТЬ ПО
	|	Ключи.КлючСвязи,
	|	%ПоляГруппировки%
	|ИМЕЮЩИЕ
	|	%ОтборНенулеваяСуммаБазисовИсточника%";
	
	ЧисловыеПоля = СоединитьСтроки(
		ПараметрыРаспределения.Шаблоны.БазисИсточникаПоложительныйИменованный,
		ПараметрыРаспределения.Шаблоны.ЗнакБазисаИсточника,
		ПараметрыРаспределения.Шаблоны.СуммыРесурсовИменованные,
		ПараметрыРаспределения.Шаблоны.ЦеныСуммРесурсовИменованные,,
		ПараметрыРаспределения.Шаблоны.РазделительСтрок);
	
	ВсеПоля = СоединитьСтроки(
		ПараметрыРаспределения.Шаблоны.ПоляСвязиИменованные,
		ПараметрыРаспределения.Шаблоны.ПоляИсточникаИменованные,
		ЧисловыеПоля,,,
		ПараметрыРаспределения.Шаблоны.РазделительСтрок);
		
	ПоляГруппировки = СоединитьСтроки(
		ПараметрыРаспределения.Шаблоны.ПоляСвязиНеИменованные,
		ПараметрыРаспределения.Шаблоны.ПоляИсточникаНеИменованные,
		ПараметрыРаспределения.Шаблоны.ЗнакБазисаИсточникаНеИменованный,,,
		ПараметрыРаспределения.Шаблоны.РазделительСтрок);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяТаблицыИсточника%", 				  ПараметрыРаспределения.ИмяТаблицыИсточника);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВсеПоляИсточника%",    				  ВсеПоля);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляСвязиСоединение%", 				  ПараметрыРаспределения.Шаблоны.ПоляСвязиСоединение);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляГруппировки%", 	  				  ПоляГруппировки);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборНенулеваяСуммаБазисовИсточника%", ПараметрыРаспределения.Шаблоны.ОтборНенулеваяСуммаБазисовИсточника);
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, "Т", "Ключи");
	
	Запрос.Выполнить();
	
	ПараметрыНумерации = РасчетСебестоимостиПрикладныеАлгоритмы.СформироватьПараметрыНумерацииСтрокВременнойТаблицы(
		"",
		"",
		СоединитьСтроки(ПараметрыРаспределения.ПоляСвязи, ПоляИсточникаДляУпорядочивания), // упорядочивание
		"КлючТИ", // колонка номера
		"КлючСвязи, КлючТИ"); // индекс
		
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьНомераСтрокВременнойТаблицы(
		ПараметрыУниверсальныхМеханизмов,
		ПараметрыНумерации,
		"ВТИсходнаяТИБезНумерации",
		"ВТИсходнаяТИ");
	
	// 1.3
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Ключи.КлючСвязи КАК КлючСвязи,
	|	%ВсеПоляБазы%
	|ПОМЕСТИТЬ ВТИсходнаяТББезНумерации
	|ИЗ
	|	%ИмяТаблицыБазыРаспределения% КАК Т
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТКлючиПолейСвязи КАК Ключи
	|	ПО %ПоляСвязиСоединение%
	|СГРУППИРОВАТЬ ПО
	|	Ключи.КлючСвязи,
	|	%ПоляГруппировки%
	|ИМЕЮЩИЕ
	|	%ОтборНенулеваяСуммаБазисовБазы%";
	
	ВсеПоля = СоединитьСтроки(
		ПараметрыРаспределения.Шаблоны.ПоляСвязиИменованные,
		ПараметрыРаспределения.Шаблоны.ПоляБазыИменованные,
		ПараметрыРаспределения.Шаблоны.БазисБазыПоложительныйИменованный,
		ПараметрыРаспределения.Шаблоны.ЗнакБазисаБазы,,
		ПараметрыРаспределения.Шаблоны.РазделительСтрок);
	
	ПоляГруппировки = СоединитьСтроки(
		ПараметрыРаспределения.Шаблоны.ПоляСвязиНеИменованные,
		ПараметрыРаспределения.Шаблоны.ПоляБазыНеИменованные,
		ПараметрыРаспределения.Шаблоны.ЗнакБазисаБазыНеИменованный,,,
		ПараметрыРаспределения.Шаблоны.РазделительСтрок);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяТаблицыБазыРаспределения%", 	 ПараметрыРаспределения.ИмяТаблицыБазыРаспределения);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВсеПоляБазы%",    				 ВсеПоля);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляСвязиСоединение%", 			 ПараметрыРаспределения.Шаблоны.ПоляСвязиСоединение);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляГруппировки%", 	  			 ПоляГруппировки);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборНенулеваяСуммаБазисовБазы%", ПараметрыРаспределения.Шаблоны.ОтборНенулеваяСуммаБазисовБазы);
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, "Т", "Ключи");
	
	Запрос.Выполнить();
	
	ПараметрыНумерации = РасчетСебестоимостиПрикладныеАлгоритмы.СформироватьПараметрыНумерацииСтрокВременнойТаблицы(
		"",
		"",
		СоединитьСтроки(ПараметрыРаспределения.ПоляСвязи, ПоляБазыДляУпорядочивания), // упорядочивание
		"КлючТБ", // колонка номера
		"КлючСвязи, КлючТБ"); // индекс
		
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьНомераСтрокВременнойТаблицы(
		ПараметрыУниверсальныхМеханизмов,
		ПараметрыНумерации,
		"ВТИсходнаяТББезНумерации",
		"ВТИсходнаяТБ");
		
	// Уничтожим ненужные ВТ
	РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц,
		"ВТВсеПоляСвязи, ВТИсходнаяТИБезНумерации, ВТИсходнаяТББезНумерации");
	
	#КонецОбласти
	
	#Область Распределение_Базисы
	
	ИменаТаблицРезультатов = "";
	НомерПравила = 0;
	ОбщееКоличествоИтераций = 0;
	
	Для Каждого ПравилоРаспределения Из ПараметрыРаспределения.ПравилаРаспределения Цикл // по базисам распределения
		
		НомерПравила   = НомерПравила + 1;
		НомерИтерации  = 0;
		РасчетЗавершен = Ложь;
		
		// 1.4, 1.5
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.КлючСвязи КАК КлючСвязи,
		|	Т.КлючТИ КАК КлючТИ,
		|	%ВсеПоляИсточника%
		|ПОМЕСТИТЬ ВТОстаткиТИ%НомерИтерации%
		|ИЗ
		|	ВТИсходнаяТИ КАК Т
		|ГДЕ
		|	%ОтборНенулевойБазисИсточника%
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.КлючСвязи КАК КлючСвязи,
		|	Т.КлючТБ КАК КлючТБ,
		|	%БазисБазыИменованный%
		|ПОМЕСТИТЬ ВТОстаткиТБ%НомерИтерации%
		|ИЗ
		|	ВТИсходнаяТБ КАК Т
		|ГДЕ
		|	%ОтборНенулевойБазисБазы%
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Т.КлючСвязи,
		|	СУММА(Т.КлючейТИ + Т.КлючейТБ) КАК КоличествоИтераций
		|ИЗ
		|	(ВЫБРАТЬ
		|		Т.КлючСвязи КАК КлючСвязи,
		|		СУММА(ВЫРАЗИТЬ(1 КАК ЧИСЛО (15,0))) КАК КлючейТИ,
		|		0 КАК КлючейТБ
		|	ИЗ
		|		ВТОстаткиТИ%НомерИтерации% КАК Т
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Т.КлючСвязи
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Т.КлючСвязи,
		|		0,
		|		СУММА(ВЫРАЗИТЬ(1 КАК ЧИСЛО (15,0)))
		|	ИЗ
		|		ВТОстаткиТБ%НомерИтерации% КАК Т
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Т.КлючСвязи) КАК Т
		|СГРУППИРОВАТЬ ПО
		|	Т.КлючСвязи
		|	
		|УПОРЯДОЧИТЬ ПО
		|	КоличествоИтераций УБЫВ,
		|	КлючСвязи";
		
		ВсеПоляИсточника = СоединитьСтроки(
			ПравилоРаспределения.Шаблоны.БазисИсточникаИменованный,
			ПравилоРаспределения.Шаблоны.РесурсыИменованные,
			ПравилоРаспределения.Шаблоны.ЦеныРесурсовИменованные,,,
			ПараметрыРаспределения.Шаблоны.РазделительСтрок);
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%НомерИтерации%",    		   	   ЧислоВСтрокуБезПробелов(НомерИтерации + 1));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВсеПоляИсточника%",    		   ВсеПоляИсточника);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборНенулевойБазисИсточника%", ПравилоРаспределения.Шаблоны.ОтборНенулевойБазисИсточника);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%БазисБазыИменованный%", 		   ПравилоРаспределения.Шаблоны.БазисБазыИменованный);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборНенулевойБазисБазы%", 	   ПравилоРаспределения.Шаблоны.ОтборНенулевойБазисБазы);
		
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, "Т");
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			МаксимальноеКоличествоИтераций = Выборка.КоличествоИтераций;
		Иначе
			МаксимальноеКоличествоИтераций = 1;
		КонецЕсли;
		
		#Область Распределение_Итерации
		
		// 2.
		Пока НЕ РасчетЗавершен И НомерИтерации <= МаксимальноеКоличествоИтераций Цикл // итерации распределения
			
			ОбщееКоличествоИтераций = ОбщееКоличествоИтераций + 1;
			НомерИтерации  = НомерИтерации + 1;
			
			Запрос.Текст =
			// 2.1
			"ВЫБРАТЬ
			|	Т.КлючСвязи,
			|	МИНИМУМ(Т.КлючТИ) КАК КлючТИ
			|ПОМЕСТИТЬ ВТКлючиТИКРасчету%НомерИтерации%
			|ИЗ
			|	ВТОстаткиТИ%НомерИтерации% КАК Т
			|СГРУППИРОВАТЬ ПО
			|	Т.КлючСвязи
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Т.КлючСвязи,
			|	Ключи.КлючТИ КАК КлючТИ,
			|	%ВсеПоляИсточника%
			|ПОМЕСТИТЬ ВТСтрокиТИ%НомерИтерации%
			|ИЗ
			|	ВТОстаткиТИ%НомерИтерации% КАК Т
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКлючиТИКРасчету%НомерИтерации% КАК Ключи
			|		ПО Т.КлючТИ = Ключи.КлючТИ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			// 2.2
			|ВЫБРАТЬ
			|	Т.КлючСвязи,
			|	МИНИМУМ(Т.КлючТБ) КАК КлючТБ
			|ПОМЕСТИТЬ ВТКлючиТБКРасчету%НомерИтерации%
			|ИЗ
			|	ВТОстаткиТБ%НомерИтерации% КАК Т
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКлючиТИКРасчету%НомерИтерации% КАК КлючиТИ
			|		ПО Т.КлючСвязи = КлючиТИ.КлючСвязи
			|СГРУППИРОВАТЬ ПО
			|	Т.КлючСвязи
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Т.КлючСвязи,
			|	Ключи.КлючТБ КАК КлючТБ,
			|	%БазисБазыИменованный%
			|ПОМЕСТИТЬ ВТСтрокиТБ%НомерИтерации%
			|ИЗ
			|	ВТОстаткиТБ%НомерИтерации% КАК Т
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКлючиТБКРасчету%НомерИтерации% КАК Ключи
			|		ПО Т.КлючТБ = Ключи.КлючТБ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			// Проверка завершения расчета
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Т.КлючТБ
			|ИЗ
			|	ВТСтрокиТБ%НомерИтерации% КАК Т
			|";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%НомерИтерации%", 	   ЧислоВСтрокуБезПробелов(НомерИтерации));
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВсеПоляИсточника%",	   ВсеПоляИсточника);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%БазисБазыИменованный%", ПравилоРаспределения.Шаблоны.БазисБазыИменованный);
			
			Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, "Т");
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если РезультатЗапроса.Пустой() Тогда
				
				РасчетЗавершен = Истина; // больше нет данных для распределения
				
			Иначе
				
				Запрос.Текст =
				// 2.3
				"ВЫБРАТЬ
				|	СтрокиТИ.КлючСвязи,
				|	СтрокиТИ.КлючТИ,
				|	ЕСТЬNULL(СтрокиТБ.КлючТБ, -1) КАК КлючТБ,
				|	%РасчетБазисаКСписанию%,
				|	%РасчетЕстьСтрокаТБ%
				|ПОМЕСТИТЬ ВТСписание%НомерИтерации%
				|ИЗ
				|	ВТСтрокиТИ%НомерИтерации% КАК СтрокиТИ
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтрокиТБ%НомерИтерации% КАК СтрокиТБ
				|		ПО СтрокиТИ.КлючСвязи = СтрокиТБ.КлючСвязи
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				// 2.4
				|ВЫБРАТЬ
				|	Т.КлючСвязи,
				|	Т.КлючТИ,
				|	Т.КлючТБ,
				|	Т.ЕстьСтрокаТБ,
				|	%ПоляВТРезультатСписания%
				|ПОМЕСТИТЬ ВТРезультатСписания_НомерПравила_%НомерИтерации%
				|ИЗ
				|	ВТСписание%НомерИтерации% КАК Т
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтрокиТИ%НомерИтерации% КАК СтрокиТИ
				|		ПО Т.КлючТИ = СтрокиТИ.КлючТИ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				// 2.5
				|ВЫБРАТЬ
				|	Т.КлючСвязи КАК КлючСвязи,
				|	Т.КлючТИ КАК КлючТИ,
				|	%ПоляВТОстаткиТИ%
				|ПОМЕСТИТЬ ВТОстаткиТИ%СледующийНомерИтерации%
				|ИЗ
				|	ВТОстаткиТИ%НомерИтерации% КАК Т
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРезультатСписания_НомерПравила_%НомерИтерации% КАК СписаниеСтрок
				|		ПО Т.КлючТИ = СписаниеСтрок.КлючТИ
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРезультатСписания_НомерПравила_%НомерИтерации% КАК СписаниеКлючейСвязи
				|		ПО Т.КлючСвязи = СписаниеКлючейСвязи.КлючСвязи
				|ГДЕ
				|	СписаниеКлючейСвязи.ЕстьСтрокаТБ
				|	И (СписаниеСтрок.КлючТИ ЕСТЬ NULL
				|		ИЛИ %ОтборУменьшениеБазисаИсточника%)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				// 2.6
				|ВЫБРАТЬ
				|	Т.КлючСвязи КАК КлючСвязи,
				|	Т.КлючТБ КАК КлючТБ,
				|	%УменьшениеБазисаБазы%
				|ПОМЕСТИТЬ ВТОстаткиТБ%СледующийНомерИтерации%
				|ИЗ
				|	ВТОстаткиТБ%НомерИтерации% КАК Т
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРезультатСписания_НомерПравила_%НомерИтерации% КАК СписаниеСтрок
				|		ПО Т.КлючТБ = СписаниеСтрок.КлючТБ
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРезультатСписания_НомерПравила_%НомерИтерации% КАК СписаниеКлючейСвязи
				|		ПО Т.КлючСвязи = СписаниеКлючейСвязи.КлючСвязи
				|ГДЕ
				|	СписаниеСтрок.КлючТБ ЕСТЬ NULL
				|		ИЛИ %ОтборУменьшениеБазисаБазы%
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				// Проверка завершения расчета
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|	Т.КлючТИ
				|ИЗ
				|	ВТОстаткиТИ%СледующийНомерИтерации% КАК Т
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|	Т.КлючТБ
				|ИЗ
				|	ВТОстаткиТБ%СледующийНомерИтерации% КАК Т
				|";
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "_НомерПравила", 		   	   ЧислоВСтрокуБезПробелов(НомерПравила));
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%СледующийНомерИтерации%",   ЧислоВСтрокуБезПробелов(НомерИтерации + 1));
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%НомерИтерации%", 		   ЧислоВСтрокуБезПробелов(НомерИтерации));
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%РасчетБазисаКСписанию%", ПравилоРаспределения.Шаблоны.РасчетБазисаКСписанию);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%РасчетЕстьСтрокаТБ%", ПравилоРаспределения.Шаблоны.РасчетЕстьСтрокаТБ);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляВТРезультатСписания%",
					СоединитьСтроки(ПравилоРаспределения.Шаблоны.БазисКСписанию, ПравилоРаспределения.Шаблоны.РесурсыКСписанию,
						ПравилоРаспределения.Шаблоны.ДругиеНулевыеБазисы, ПравилоРаспределения.Шаблоны.ДругиеНулевыеРесурсы,, ПараметрыРаспределения.Шаблоны.РазделительСтрок));
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляВТОстаткиТИ%",
					СоединитьСтроки(ПравилоРаспределения.Шаблоны.УменьшениеРесурсовИсточника, ПравилоРаспределения.Шаблоны.ЦеныРесурсовИменованные,
						ПравилоРаспределения.Шаблоны.УменьшениеБазисаИсточника,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок));
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборУменьшениеБазисаИсточника%", ПравилоРаспределения.Шаблоны.ОтборУменьшениеБазисаИсточника);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УменьшениеБазисаБазы%", ПравилоРаспределения.Шаблоны.УменьшениеБазисаБазы);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборУменьшениеБазисаБазы%", ПравилоРаспределения.Шаблоны.ОтборУменьшениеБазисаБазы);
						
				Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, "Т", "СтрокиТБ", "СтрокиТИ", "СписаниеСтрок");
				
				ДополнитьСтроку(ИменаТаблицРезультатов, "ВТРезультатСписания" + ЧислоВСтрокуБезПробелов(НомерПравила) + "_" + ЧислоВСтрокуБезПробелов(НомерИтерации));
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				РасчетЗавершен = (Выборка.Количество() < 2);
				
			КонецЕсли;
			
			// 2.7
			// Уничтожим промежуточные ВТ
			ИменаТаблиц = РасчетСебестоимостиПрикладныеАлгоритмы.ПолучитьПереченьСуществующихВременныхТаблиц(
				МенеджерВременныхТаблиц,
				СоединитьСтроки(СуществующиеВТ, ИменаТаблицРезультатов, "ВТИсходнаяТИ, ВТИсходнаяТБ",
					"ВТОстаткиТИ" + ЧислоВСтрокуБезПробелов(НомерИтерации + 1) + ", ВТОстаткиТБ" + ЧислоВСтрокуБезПробелов(НомерИтерации + 1)));
				
			РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц, ИменаТаблиц);
			
		КонецЦикла; // итерации распределения
		
		#КонецОбласти
		
		// Уничтожим промежуточные ВТ
		ИменаТаблиц = РасчетСебестоимостиПрикладныеАлгоритмы.ПолучитьПереченьСуществующихВременныхТаблиц(
			МенеджерВременныхТаблиц,
			СоединитьСтроки(СуществующиеВТ, ИменаТаблицРезультатов, "ВТИсходнаяТИ, ВТИсходнаяТБ"));
			
		РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц, ИменаТаблиц);
		
		Если НЕ РасчетЗавершен Тогда
			ВызватьИсключение НСтр("ru='Ошибка алгоритма распределения: превышено максимальное расчетное количество итераций'", ОбщегоНазначения.КодОсновногоЯзыка());
		КонецЕсли;
		
	КонецЦикла; // базисы распределения
	
	#КонецОбласти
	
	#Область РезультатыРаспределения
	
	// 3.1
	Если НЕ ПустаяСтрока(ИменаТаблицРезультатов) Тогда
		
		РасчетСебестоимостиПрикладныеАлгоритмы.ОбъединитьВременныеТаблицы(
			МенеджерВременныхТаблиц,
			ИменаТаблицРезультатов,
			"ВТРезультатыСписания",
			СоединитьСтроки("КлючСвязи, КлючТИ, КлючТБ", ПараметрыРаспределения.Шаблоны.ВсеБазисыИсточника, ПараметрыРаспределения.Шаблоны.ВсеРесурсыИсточника),
			СоединитьСтроки(ПараметрыРаспределения.Шаблоны.ВсеБазисыИсточника, ПараметрыРаспределения.Шаблоны.ВсеРесурсыИсточника),
			,
			Истина);
		
		Запрос.Текст = "";
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	0 КАК КлючСвязи,
		|	0 КАК КлючТИ,
		|	0 КАК КлючТБ,
		|	%ПоляВТРезультатСписания%
		|ПОМЕСТИТЬ ВТРезультатыСписания";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляВТРезультатСписания%",
			СоединитьСтроки(ПараметрыРаспределения.Шаблоны.НулевыеБазисыИсточников, ПараметрыРаспределения.Шаблоны.НулевыеРесурсыИсточников,,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок));
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	// 3.2
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.КлючТИ,
	|	Т.КлючТБ,
	|	%ПоляВТРезультатСписания%
	|ПОМЕСТИТЬ %ИмяТаблицыРезультата%
	|ИЗ
	|	ВТРезультатыСписания КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсходнаяТИ КАК СтрокиТИ
	|		ПО Т.КлючТИ = СтрокиТИ.КлючТИ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсходнаяТБ КАК СтрокиТБ
	|		ПО Т.КлючТБ = СтрокиТБ.КлючТБ
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяТаблицыРезультата%", ПараметрыРаспределения.ИмяТаблицыРезультата);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляВТРезультатСписания%",
		СоединитьСтроки(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаспределения.Шаблоны.ПоляСвязиИменованные, "СтрокиТИ"),
			ПараметрыРаспределения.Шаблоны.ПравилаВыбораПолей,
			ПараметрыРаспределения.Шаблоны.БазисИсточникаСИсходнымЗнаком,
			ПараметрыРаспределения.Шаблоны.РесурсыИменованные,,
			ПараметрыРаспределения.Шаблоны.РазделительСтрок));
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, "Т", "СтрокиТБ", "СтрокиТИ");
	
	Запрос.Выполнить();
	
	// 3.3
	Запрос.Текст = "";
	
	Если ЗначениеЗаполнено(ПараметрыРаспределения.ИмяТаблицыНераспределенныхДанныхИсточника) Тогда
		
		Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ
		|	Т.КлючТИ,
		|	%СуммаЧисловыхПолейИсточника%
		|ПОМЕСТИТЬ ВТОстаткиЧисловыхПолейИсточника
		|ИЗ
		|	(ВЫБРАТЬ
		|		Т.КлючТИ,
		|		%ПоляИсточникаЧисловые%
		|	ИЗ
		|		ВТИсходнаяТИ КАК Т
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Т.КлючТИ,
		|		%ПоляИсточникаЧисловыеИзРезультата%
		|	ИЗ
		|		%ИмяТаблицыРезультата% КАК Т
		|	) КАК Т
		|СГРУППИРОВАТЬ ПО
		|	Т.КлючТИ
		|ИМЕЮЩИЕ
		|	%НенулеваяСуммаЧисловыхПолейИсточника%
		|ИНДЕКСИРОВАТЬ ПО
		|	КлючТИ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	%ПоляИсточникаНечисловые%,
		|	%ПоляОстатковИсточникаЧисловые%
		|ПОМЕСТИТЬ %ИмяТаблицыНераспределенныхДанныхИсточника%
		|ИЗ
		|	ВТИсходнаяТИ КАК Т
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОстаткиЧисловыхПолейИсточника КАК Остатки
		|		ПО Т.КлючТИ = Остатки.КлючТИ
		|";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыРаспределения.ИмяТаблицыНераспределенныхДанныхБазы) Тогда
		
		Если ЗначениеЗаполнено(Запрос.Текст) Тогда
			Запрос.Текст = Запрос.Текст + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ
		|	%ПоляБазыНечисловые%,
		|	МАКСИМУМ(Т.ЕстьИсточник) КАК ЕстьИсточник,
		|	%СуммаБазисовБазы%
		|ПОМЕСТИТЬ %ИмяТаблицыНераспределенныхДанныхБазы%
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЛОЖЬ КАК ЕстьИсточник,
		|		%ПоляБазыНечисловые%,
		|		%ПоляБазыЧисловые%
		|	ИЗ
		|		ВТИсходнаяТБ КАК Т
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ИСТИНА,
		|		%ПоляБазыНечисловыеИзРезультата%,
		|		%ПоляБазыЧисловыеИзРезультата%
		|	ИЗ
		|		%ИмяТаблицыРезультата% КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсходнаяТБ КАК СтрокиТБ
		|			ПО Т.КлючТБ = СтрокиТБ.КлючТБ) КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	%ПоляГруппировкиБазы%
		|
		|ИМЕЮЩИЕ
		|	(МАКСИМУМ(Т.ЕстьИсточник) = ЛОЖЬ
		|		ИЛИ %НенулеваяСуммаРаспределенныхБазисовБазы%)";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяТаблицыРезультата%", ПараметрыРаспределения.ИмяТаблицыРезультата);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяТаблицыНераспределенныхДанныхИсточника%", ПараметрыРаспределения.ИмяТаблицыНераспределенныхДанныхИсточника);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяТаблицыНераспределенныхДанныхБазы%", ПараметрыРаспределения.ИмяТаблицыНераспределенныхДанныхБазы);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляИсточникаНечисловыеСДополнением%",
			СоединитьСтроки(ПараметрыРаспределения.Шаблоны.ПоляСвязиИменованные, ПараметрыРаспределения.Шаблоны.ПоляИсточникаИменованные, ПараметрыРаспределения.Шаблоны.ПоляБазыДополнение,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляИсточникаНечисловые%",
			СоединитьСтроки(ПараметрыРаспределения.Шаблоны.ПоляСвязиИменованные, ПараметрыРаспределения.Шаблоны.ПоляИсточникаИменованные,,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляИсточникаНечисловыеИзРезультата%",
			СоединитьСтроки(ПараметрыРаспределения.Шаблоны.ПоляСвязиИменованные,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаспределения.Шаблоны.ПоляИсточникаИменованные, "СтрокиТИ"),,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляИсточникаЧисловые%",
			СоединитьСтроки(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаспределения.Шаблоны.БазисИсточникаСИсходнымЗнаком, "Т", "", "Т"),
				ПараметрыРаспределения.Шаблоны.РесурсыИменованные,,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляОстатковИсточникаЧисловые%",
			СоединитьСтроки(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаспределения.Шаблоны.БазисИсточникаСИсходнымЗнаком, "Остатки", "", "Т"),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаспределения.Шаблоны.РесурсыИменованные, "Остатки")
				,,,,
				ПараметрыРаспределения.Шаблоны.РазделительСтрок));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляИсточникаЧисловыеИзРезультата%",
			СоединитьСтроки(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаспределения.Шаблоны.БазисИсточника, "-Т"),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаспределения.Шаблоны.РесурсыИменованные, "-Т"),,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляГруппировкиИсточника%",
			СоединитьСтроки(ПараметрыРаспределения.Шаблоны.ПоляСвязиНеИменованные, ПараметрыРаспределения.Шаблоны.ПоляИсточникаНеИменованные,,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок));
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляБазыНечисловые%",
			СоединитьСтроки(ПараметрыРаспределения.Шаблоны.ПоляСвязиИменованные, ПараметрыРаспределения.Шаблоны.ПоляБазыИменованные,,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляБазыНечисловыеИзРезультата%",
			СоединитьСтроки(ПараметрыРаспределения.Шаблоны.ПоляСвязиИменованные,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаспределения.Шаблоны.ПоляБазыИменованные, "СтрокиТБ"),,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляБазыЧисловые%", ПараметрыРаспределения.Шаблоны.БазисБазы);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляБазыЧисловыеИзРезультата%",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ПараметрыРаспределения.Шаблоны.БазисБазыСИсходнымЗнаком, "-Т"));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляГруппировкиБазы%",
			СоединитьСтроки(ПараметрыРаспределения.Шаблоны.ПоляСвязиНеИменованные, ПараметрыРаспределения.Шаблоны.ПоляБазыНеИменованные,,,, ПараметрыРаспределения.Шаблоны.РазделительСтрок));
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%СуммаЧисловыхПолейИсточника%", ПараметрыРаспределения.Шаблоны.СуммаЧисловыхПолейИсточника);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%НенулеваяСуммаЧисловыхПолейИсточника%", ПараметрыРаспределения.Шаблоны.НенулеваяСуммаЧисловыхПолейИсточника);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%СуммаБазисовБазы%", ПараметрыРаспределения.Шаблоны.СуммаБазисовБазы);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%НенулеваяСуммаРаспределенныхБазисовБазы%", ПараметрыРаспределения.Шаблоны.НенулеваяСуммаРаспределенныхБазисовБазы);
		
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, "Т", "СтрокиТБ", "СтрокиТИ");
		
		Запрос.Выполнить();
		
		РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц, "ВТОстаткиЧисловыхПолейИсточника");
		
	КонецЕсли;
	
	// 3.4
	// Уничтожим ненужные ВТ
	ИменаТаблиц = РасчетСебестоимостиПрикладныеАлгоритмы.ПолучитьПереченьСуществующихВременныхТаблиц(
		МенеджерВременныхТаблиц,
		СоединитьСтроки(
			СуществующиеВТ,
			ПараметрыРаспределения.ИмяТаблицыРезультата,
			ПараметрыРаспределения.ИмяТаблицыНераспределенныхДанныхИсточника,
			ПараметрыРаспределения.ИмяТаблицыНераспределенныхДанныхБазы)); // результаты прошлого распределения
	
	РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц, ИменаТаблиц);
	
	// Заполним справочные показатели результата распределения.
	ПараметрыРаспределения.РезультатыРаспределения.Вставить("КоличествоИтераций",
		ОбщееКоличествоИтераций);
	ПараметрыРаспределения.РезультатыРаспределения.Вставить("ВремяРасчета",
		(ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала) / 1000);
	ПараметрыРаспределения.РезультатыРаспределения.Вставить("РазмерИсточника",
		РасчетСебестоимостиПрикладныеАлгоритмы.РазмерВременнойТаблицы(Запрос, ПараметрыРаспределения.ИмяТаблицыИсточника));
	ПараметрыРаспределения.РезультатыРаспределения.Вставить("РазмерБазы",
		РасчетСебестоимостиПрикладныеАлгоритмы.РазмерВременнойТаблицы(Запрос, ПараметрыРаспределения.ИмяТаблицыБазыРаспределения));
	ПараметрыРаспределения.РезультатыРаспределения.Вставить("РазмерРезультата",
		РасчетСебестоимостиПрикладныеАлгоритмы.РазмерВременнойТаблицы(Запрос, ПараметрыРаспределения.ИмяТаблицыРезультата));
	
	Если ЗначениеЗаполнено(ПараметрыРаспределения.ИмяТаблицыНераспределенныхДанныхИсточника) Тогда
		ПараметрыРаспределения.РезультатыРаспределения.Вставить("РазмерНераспределенныхЗаписейИсточника",
			РасчетСебестоимостиПрикладныеАлгоритмы.РазмерВременнойТаблицы(Запрос, ПараметрыРаспределения.ИмяТаблицыНераспределенныхДанныхИсточника));
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ПараметрыРаспределения.ИмяТаблицыНераспределенныхДанныхБазы) Тогда
		ПараметрыРаспределения.РезультатыРаспределения.Вставить("РазмерНераспределенныхЗаписейБазы",
			РасчетСебестоимостиПрикладныеАлгоритмы.РазмерВременнойТаблицы(Запрос, ПараметрыРаспределения.ИмяТаблицыНераспределенныхДанныхБазы));
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СтроковыеФункции

Функция СоединитьСтроки(Строка1 = "", Строка2 = "", Строка3 = "", Строка4 = "", Строка5 = "", Разделитель = ", ") Экспорт
	
	МассивСтрок = Новый Массив;
	
	Если НЕ ПустаяСтрока(Строка1) Тогда
		МассивСтрок.Добавить(Строка1);
	КонецЕсли;
	Если НЕ ПустаяСтрока(Строка2) Тогда
		МассивСтрок.Добавить(Строка2);
	КонецЕсли;
	Если НЕ ПустаяСтрока(Строка3) Тогда
		МассивСтрок.Добавить(Строка3);
	КонецЕсли;
	Если НЕ ПустаяСтрока(Строка4) Тогда
		МассивСтрок.Добавить(Строка4);
	КонецЕсли;
	Если НЕ ПустаяСтрока(Строка5) Тогда
		МассивСтрок.Добавить(Строка5);
	КонецЕсли;
	
	Возврат СтрСоединить(МассивСтрок, Разделитель);;
	
КонецФункции

Процедура ДополнитьСтроку(СтрокаПриемник = "", Строка2 = "", Строка3 = "", Строка4 = "", Строка5 = "", Разделитель = ", ") Экспорт
	
	СтрокаПриемник = СоединитьСтроки(
		СтрокаПриемник,
		Строка2,
		Строка3,
		Строка4,
		Строка5,
		Разделитель);
	
КонецПроцедуры

Функция ЧислоВСтрокуБезПробелов(ЧисловоеЗначение) Экспорт
	
	Возврат Формат(ЧисловоеЗначение, "ЧГ=");
	
КонецФункции

Функция УдалитьЭлементыИзСтрокиШаблона(СтрокаШаблона, УдаляемыеЭлементы) Экспорт
	
	МассивСтрок 	= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаШаблона, ",", Истина, Истина);
	МассивУдаляемых = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(УдаляемыеЭлементы, ",", Истина, Истина);
	
	Для Каждого УдаляемыйЭлемент Из МассивУдаляемых Цикл
		
		ИсходныйЭлемент = МассивСтрок.Найти(УдаляемыйЭлемент);
		
		Если ИсходныйЭлемент <> Неопределено Тогда
			МассивСтрок.Удалить(ИсходныйЭлемент);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрок, ", ");
	
КонецФункции

#КонецОбласти

#Область ОперацииСТипамиЗначений

Функция ЭтоОписаниеТиповДокументов(ТипПоля)
	
	ОписаниеТиповПоля 		   = ОписанияТиповБезТипаNull(ТипПоля);
	ТипыДокументов 			   = Документы.ТипВсеСсылки();
	ТипСодержитТолькоДокументы = (ОписаниеТиповПоля.Типы().Количество() > 0);
	
	Для Каждого ТекущийТип Из ОписаниеТиповПоля.Типы() Цикл
		
		Если НЕ ТипыДокументов.СодержитТип(ТекущийТип) Тогда
			ТипСодержитТолькоДокументы = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТипСодержитТолькоДокументы;
	
КонецФункции

Функция ОписанияТиповБезТипаNull(ИсходныеТипы) Экспорт
	
	Если ТипЗнч(ИсходныеТипы) = Тип("Тип") ИЛИ ТипЗнч(ИсходныеТипы) = Тип("Строка") Тогда
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ИсходныеТипы);
		Описание = Новый ОписаниеТипов(МассивТипов);
		
	ИначеЕсли ТипЗнч(ИсходныеТипы) = Тип("Массив") Тогда
		
		Описание = Новый ОписаниеТипов(ИсходныеТипы);
		
	Иначе // это ОписаниеТипов
		
		Описание = ИсходныеТипы;
		
	КонецЕсли;
	
	Возврат Новый ОписаниеТипов(Описание,, "NULL");
	
КонецФункции
	
#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Временная, до переноса в этот модуль алгоритмов модуля РасчетСебестоимостиПрикладныеАлгоритмы:
//		- ЗаполнитьНомераСтрокВременнойТаблицы
Функция ИнициализироватьПараметрыИспользованияУниверсальныхМеханизмов(МенеджерВременныхТаблиц)
	
	Параметры = Новый Структура;
	Параметры.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	Параметры.Вставить("ВерсияПлатформыНеНиже8_3_13", РасчетСебестоимостиПрикладныеАлгоритмы.ВерсияПлатформыНеНижеУказанной("8.3.13.0"));
	
	РасчетСебестоимостиПрикладныеАлгоритмы.УстановитьТехнологическиеПараметрыРасчета(Параметры);
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти
