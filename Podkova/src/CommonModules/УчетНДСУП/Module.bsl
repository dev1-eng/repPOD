
#Область ПрограммныйИнтерфейс

#Область ПолучениеНастроекИПараметровУчетаНДС

// Возвращает настройки учета НДС.
//
// Возвращаемое значение:
// 	 Структура - Параметры учета НДС:
// 	   * ИспользоватьУчетНДС - Булево - Значение опции использования учета НДС
// 	   * ОсновноеНалогообложениеНДСПродажи - ПеречислениеСсылка.ТипыНалогообложенияНДС - Основное налогообложение НДС организации.
// 	   * ОсновнойВидДеятельностиНДСЗакупки - ПеречислениеСсылка.ТипыНалогообложенияНДС - Основной вид деятельности НДС закупки товаров.
// 	   * РаздельныйУчетНДС - Булево - Признак наличия в ИБ организаций, использующих раздельный учет НДС по налогообложению.
// 	   * ИспользоватьЗаполнениеРаздела7ДекларацииПоНДС - Булево - Признак использования Раздела 7 в декларации.
// 	   * ПродажиНаЭкспорт - Булево - Применения экспортных операций.
// 	   * ЭкспортНесырьевыхТоваров - Булево - Признак того, что осуществляется экспорт несырьевых товаров.
// 	   * ЭкспортСырьевыхТоваровУслуг - Булево - Признак того, что осуществляется экспорт сырьевых товаров, работ или услуг. 
// 	   * ДатаРазделенияЭкспорта - Дата - Дата начала применения 150-ФЗ, разделение экспорта на сырьевой и несырьевой.
// 	   * ПродажаТоваровОблагаемыхНДСУПокупателя - Булево - Признак того, что осуществляется реализация товаров с обратным обложением НДС. 
// 	                                                       При реализации таких товаров НДС начисляет не продавец, а покупатель (налоговый агент).
// 	   * ПокупкаТоваровОблагаемыхНДСУПокупателя - Булево - Признак того, что осуществляется приобретение товаров с обратным обложением НДС. 
// 	   * ДатаНачалаУчетаНДСПоНаправлениямДеятельности - Дата - Дата, начиная с которой ведется учет входящего НДС в разрезе направлений деятельности.
//
Функция НастройкиУчета() Экспорт
	
	НастройкиУчета = Новый Структура();
	НастройкиУчета.Вставить("ИспользоватьУчетНДС", ПолучитьФункциональнуюОпцию("ИспользоватьУчетНДС"));
	НастройкиУчета.Вставить("ОсновноеНалогообложениеНДСПродажи",
		?(ПолучитьФункциональнуюОпцию("ИспользоватьУчетНДС"),
			Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС,
			Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС));
	НастройкиУчета.Вставить("ОсновнойВидДеятельностиНДСЗакупки",
		?(ПолучитьФункциональнуюОпцию("ИспользоватьУчетНДС"),
			Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС,
			Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС));
	НастройкиУчета.Вставить("РаздельныйУчетНДС",                             ПолучитьФункциональнуюОпцию("ИспользоватьРаздельныйУчетПоНалогообложению"));
	НастройкиУчета.Вставить("ИспользоватьЗаполнениеРаздела7ДекларацииПоНДС", Ложь);
	НастройкиУчета.Вставить("ПродажиНаЭкспорт",                              Ложь);
	НастройкиУчета.Вставить("ЭкспортНесырьевыхТоваров",                      Ложь);
	НастройкиУчета.Вставить("ЭкспортСырьевыхТоваровУслуг",                   Ложь);
	НастройкиУчета.Вставить("ДатаРазделенияЭкспорта",                        Дата(1,1,1));
	НастройкиУчета.Вставить("ПродажаТоваровОблагаемыхНДСУПокупателя",        Ложь);
	НастройкиУчета.Вставить("ПокупкаТоваровОблагаемыхНДСУПокупателя",        Ложь);
	НастройкиУчета.Вставить("ДатаНачалаУчетаНДСПоНаправлениямДеятельности",  Дата(1,1,1));
	НастройкиУчета.Вставить("ДатаОтраженияВозвратовКорректировочнымиСФ",     Дата(1,1,1));
	
	УчетНДСЛокализация.ДополнитьНастройкиУчета(НастройкиУчета);
	
	Возврат НастройкиУчета;
	
КонецФункции

// Возвращает параметры учета НДС, установленные для организации в заданном периоде.
//
// Параметры:
// 	Организация - СправочникСсылка.Организации - Организация, для которой необходимо получить параметры.
// 	ДатаУчета - Дата - Дата, на которую необходимо получить параметры учета.
// 	Склад - СправочникСсылка.Склады - Необязательный параметр. Склад, для которого необходимо определить применение EНВД.
// 	Подразделение - СправочникСсылка.СтруктураПредприятия - Подразделение организации, для которого необходимо определить применение ПСН.
//
// Возвращаемое значение:
// 	 Структура - Параметры учета НДС по организации
// 		* ОсновноеНалогообложениеНДСПродажи - ПеречислениеСсылка.ТипыНалогообложенияНДС - Основное налогообложение НДС организации.
// 		* ОсновнойВидДеятельностиНДСЗакупки - ПеречислениеСсылка.ТипыНалогообложенияНДС - Основной вид деятельности НДС закупки товаров.
// 		* НалогообложениеНДСРозничнойПродажи - ПеречислениеСсылка.ТипыНалогообложенияНДС - Налогообложение НДС розничной торговли. 
// 		                                                                                   Значение получается с учетом переданного склада.
// 		* РаздельныйУчетНДС - Булево - Признак использование раздельного учета НДС.
// 		* ОсобыйПорядокУчетаНДСПриПроизводствеДЦ - Булево - Признак того, что организация учитывает НДС относящийся к производству продукции с 
// 							длительным циклом производства особым образом.
// 		* ВариантУчетаНДСПриИзмененииВидаДеятельностиНаНеоблагаемую - ПеречислениеСсылка.ВариантыУчетаНДСПриИзмененииВидаДеятельностиНаНеоблагаемую 
// 		                    - Определяет порядок учета НДС при изменении деятельности на необлагаемую.
// 		* СтатьяРасходов_НеОблагаетсяНДС - ПланВидовХарактеристикСсылка.СтатьиРасходов - Статья списания НДС при изменении деятельности на необлагаемую НДС.
// 		* АналитикаРасходов_НеОблагаетсяНДС - Характеристика.СтатьиРасходов - Аналитика списания НДС при изменении деятельности на необлагаемую НДС.
// 		* СтатьяРасходов_ОблагаетсяЕНВД - ПланВидовХарактеристикСсылка.СтатьиРасходов - Статья списания НДС при изменении деятельности на облагаемую ЕНВД.
// 		* АналитикаРасходов_ОблагаетсяЕНВД - Характеристика.СтатьиРасходов - Аналитика списания НДС при изменении деятельности на облагаемую ЕНВД.
//
Функция ПараметрыУчетаПоОрганизации(Знач Организация, Знач ДатаУчета, Знач Склад = Неопределено, Знач Подразделение = Неопределено) Экспорт
	
	ПараметрыУчета = Новый Структура();
	
	ОсновноеНалогообложениеИБ = ?(ПолучитьФункциональнуюОпцию("ИспользоватьУчетНДС"),
			Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС,
			Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
	
	ПараметрыУчета.Вставить("ОсновноеНалогообложениеНДСПродажи",  ОсновноеНалогообложениеИБ);
	ПараметрыУчета.Вставить("ОсновнойВидДеятельностиНДСЗакупки",  ОсновноеНалогообложениеИБ);
	ПараметрыУчета.Вставить("НалогообложениеНДСРозничнойПродажи", ОсновноеНалогообложениеИБ);
	ПараметрыУчета.Вставить("РаздельныйУчетНДС", Ложь);
	
	ПараметрыУчета.Вставить("ОсобыйПорядокУчетаНДСПриПроизводствеДЦ", Ложь);
	ПараметрыУчета.Вставить("ВариантУчетаНДСПриИзмененииВидаДеятельностиНаНеоблагаемую", Перечисления.ВариантыУчетаНДСПриИзмененииВидаДеятельностиНаНеоблагаемую.ПустаяСсылка());
	ПараметрыУчета.Вставить("СтатьяРасходов_НеОблагаетсяНДС", ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка());
	ПараметрыУчета.Вставить("АналитикаРасходов_НеОблагаетсяНДС", Неопределено);
	ПараметрыУчета.Вставить("СтатьяРасходов_ОблагаетсяЕНВД", ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка());
	ПараметрыУчета.Вставить("АналитикаРасходов_ОблагаетсяЕНВД", Неопределено);
	
	УчетНДСЛокализация.ДополнитьПараметрыУчетаОрганизации(ПараметрыУчета, Организация, ДатаУчета, Склад, Подразделение);
	
	Возврат ПараметрыУчета;
	
КонецФункции

// Возвращает список типов налогообложения, НДС по которым никогда не принимается к возмещению.
//
// Возвращаемое значение:
// 	Массив - Виды деятельности НДС, по которым НДС включается в стоимость.
//
Функция ВидыДеятельностиНДСУчитываетсяВСтоимости() Экспорт
	
	Результат = Новый Массив();
	Результат.Добавить(Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
	УчетНДСЛокализация.ДополнитьВидыДеятельностиНДСУчитываетсяВСтоимости(Результат);
	
	Возврат Результат;
	
КонецФункции

// Возвращает список видов деятельности, НДС по которым принимается к возмещению:
// - в полном объеме или частично
// - по общим или особым правилам
//
// Возвращаемое значение:
// 	Массив - Виды деятельности НДС, по которым НДС принимается к вычету.
//
Функция ВидыДеятельностиНДСПринимаетсяКВозмещению() Экспорт
	
	Результат = Новый Массив();
	Результат.Добавить(Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
	УчетНДСЛокализация.ДополнитьВидыДеятельностНДСПринимаетсяКВозмещению(Результат);
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив типов налогообложения.
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ТипыНалогообложенияНДС - массив типов налогообложения
Функция ТипыНалогообложенияНДСНеоблагаемые() Экспорт
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
	УчетНДСЛокализация.ДополнитьТипыНалогообложенияНДСНеоблагаемые(МассивТипов);
	
	Возврат МассивТипов;
	
КонецФункции

#КонецОбласти

#Область СтавкиНДС

// Возвращает значение ставки НДС по умолчанию.
//
// Параметры:
//  Дата - Дата - дата на которую необходимо получить ставку НДС по умолчанию,
//               если дата пустая, то будет получена ставка НДС на текущую дату.
//  РасчетнаяСтавка - Булево - указывает необходимость получения расчетной ставки НДС X/(100 + X).
//   НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Налогообложение НДС, для которого необходимо получить ставку.
//   			Если Неопределено, то ставка получается для налогообложения ПродажаОблгаетсяНДС.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтавкиНДС - значение ставки НДС.
//
Функция СтавкаНДСПоУмолчанию(Дата = Неопределено, РасчетнаяСтавка = Ложь, НалогообложениеНДС = Неопределено) Экспорт
	
	ДатаПолучения = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	
	Если ДатаПолучения >= '20190101' Тогда
		Возврат ?(РасчетнаяСтавка, Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20);
	Иначе
		Возврат ?(РасчетнаяСтавка, Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18);
	КонецЕсли;
	
КонецФункции

// Заменяет переданную ставку НДС на актуальную на указанную дату.
//
// Параметры:
//  СтавкаНДС - ПеречислениеСсылка.СтавкиНДС - значение ставки НДС, которое необходимо скорректировать
//  Дата - Дата - дата на которую необходимо получить актуальную ставку НДС.
//
// Возвращаемое значение:
//  Булево - Истина, если значение ставки НДС было заменено.
//
Функция СкорректироватьСтавкуНДС(СтавкаНДС, Дата) Экспорт
	
	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Или СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118
		Или СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Или СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
		СтавкаНДСПоУмолчанию = УчетНДСУП.СтавкаНДСПоУмолчанию(Дата, СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118
			Или СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120);
		Если СтавкаНДС <> СтавкаНДСПоУмолчанию Тогда
			СтавкаНДС = СтавкаНДСПоУмолчанию;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Заменяет ставки НДС в табличной части документа на актуальную на дату документа,
// а также пересчитывает соответствующие суммы НДС.
//
// Параметры:
//  Документ - ДокуменОбъект - объект документа, в табличной части которого необходимо заменить ставки НДС
//  ТабличнаяЧасть - ДокументТабличнаяЧасть - табличная часть документа
//  СтруктураПересчетаСуммы - Структура - см. ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ().
//
Процедура СкорректироватьСтавкуНДСВТЧДокумента(Документ, ТабличнаяЧасть, СтруктураПересчетаСуммы = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ТабличнаяЧасть) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураПересчетаСуммы = Неопределено Тогда
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Документ);
	КонецЕсли;
	НалогообложениеНДС = Неопределено;
	СтруктураПересчетаСуммы.Свойство("НалогообложениеНДС", НалогообложениеНДС);
	ДатаАктуальности = ?(ЗначениеЗаполнено(Документ.Дата), Документ.Дата, ТекущаяДатаСеанса());
	
	ЕстьСуммаПродажи = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТабличнаяЧасть[0], "СуммаПродажи");
	
	ПоляНДС = Новый Структура("СуммаНДС, СуммаСНДС, СуммаПродажиНДС, СуммаВознаграждения, СуммаНДСВознаграждения");
	Для каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
		Если СкорректироватьСтавкуНДС(СтрокаТЧ.СтавкаНДС, ДатаАктуальности) Тогда
			ПроцентНДС = УчетНДСУПКлиентСервер.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС);
			
			ПоляНДС.СуммаНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(СтрокаТЧ.Сумма, ПроцентНДС,
				СтруктураПересчетаСуммы.ЦенаВключаетНДС, НалогообложениеНДС);
			ПоляНДС.СуммаСНДС = СтрокаТЧ.Сумма + ?(СтруктураПересчетаСуммы.ЦенаВключаетНДС, 0, ПоляНДС.СуммаНДС);
			Если ЕстьСуммаПродажи Тогда
				ПоляНДС.СуммаПродажиНДС = Окр(СтрокаТЧ.СуммаПродажи * ПроцентНДС / (100 + ПроцентНДС), 2, РежимОкругления.Окр15как20);
			Иначе
				ПоляНДС.СуммаПродажиНДС = 0;
			КонецЕсли;
			ПоляНДС.СуммаВознаграждения = 0;
			ПоляНДС.СуммаНДСВознаграждения = 0;
			
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, ПоляНДС);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает список незначащих ставок НДС (процент = 0)
//
// Возвращаемое значение:
//  СписокЗначений - СписокЗначений - Список ставок НДС с процентной ставкой 0
//
Функция СписокНезначащихСтавок() Экспорт
	
	СписокЗначений = новый СписокЗначений;
	
	СписокЗначений.Добавить(Перечисления.СтавкиНДС.ПустаяСсылка());
	СписокЗначений.Добавить(Перечисления.СтавкиНДС.НДС0);
	СписокЗначений.Добавить(Перечисления.СтавкиНДС.БезНДС);
	
	Возврат СписокЗначений;
	
КонецФункции

// Определяет является ли ставка незначащей (Процент = 0)
//
//Параметры:
//  СтавкаНДС - ПеречислениеСсылка.СтавкиНДС - Значение ставки НДС.
//
// Возвращаемое значение:
//  Булево -
//
Функция НезначащаяСтавка(СтавкаНДС) Экспорт
	
	СписокСтавокСЧислителем0 = СписокНезначащихСтавок();
	
	ВходитВСписокНезначащихСтавок = Не СписокСтавокСЧислителем0.НайтиПоЗначению(СтавкаНДС) = Неопределено;
	
	Возврат ВходитВСписокНезначащихСтавок;
	
КонецФункции

// Устанавливает значение параметра СтавкаНДСНаЭкспорт исходя из налогообложения ПродажаНаЭкспорт
//
// Параметры:
//  ПараметрыЗапроса - Структура - Параметры запроса получения данных, в котором есть параметр СтавкаНДСНаЭкспорт.
//
Процедура УстановитьПараметрЗапросаСтавкаНДСНаЭкспорт(ПараметрыЗапроса) Экспорт
	
	Если ПараметрыЗапроса.Свойство("СтавкаНДСНаЭкспорт") Тогда
		Возврат;
	КонецЕсли;
	ПараметрыЗапроса.Вставить("СтавкаНДСНаЭкспорт", Перечисления.СтавкиНДС.НДС0);
	
КонецПроцедуры

// Устанавливаем список выбора для ставки НДС по налогообложению закупки.
//
// Параметры:
//  Форма - Форма - Содержит данную форму
//  НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - налогообложение закупки
//  ИмяПоляВводаСтавкиНДС - Строка - Наименование элемента формы, содержащего ставку НДС,
//                                   если оно отличается от "ТоварыСтавкаНДС"
//
Процедура УстановитьСписокВыбораСтавокНДСПоНалогообложению(Форма, НалогообложениеНДС, ИмяПоляВводаСтавкиНДС = "ТоварыСтавкаНДС") Экспорт
	
	//++ Локализация
	ЭлементФормыСтавкаНДС = Форма.Элементы.Найти(ИмяПоляВводаСтавкиНДС);
	Если ЭлементФормыСтавкаНДС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ЭлектронныеУслуги Тогда
		ЭлементФормыСтавкаНДС.РежимВыбораИзСписка = Истина;
		ЭлементФормыСтавкаНДС.СписокВыбора.Очистить();
		ЭлементФормыСтавкаНДС.СписокВыбора.Добавить(Перечисления.СтавкиНДС.НДС20_120, НСтр("ru = '16,67%'"));
		ЭлементФормыСтавкаНДС.СписокВыбора.Добавить(Перечисления.СтавкиНДС.НДС18_118, НСтр("ru = '15,25%'"));
		ЭлементФормыСтавкаНДС.СписокВыбора.Добавить(Перечисления.СтавкиНДС.БезНДС,    НСтр("ru = 'Без НДС'"));
	Иначе
		ЭлементФормыСтавкаНДС.РежимВыбораИзСписка = Ложь;
		ЭлементФормыСтавкаНДС.СписокВыбора.Очистить();
	КонецЕсли;
	//-- Локализация

КонецПроцедуры

// Заполняет ставку НДС в строке табличной части
//
// Параметры:
//   ТекущаяСтрока	- Структура - данные обрабатываемой строки.
//   СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//   КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке.
//
Процедура ЗаполнитьСтавкуНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	//++ Локализация
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДС", СтруктураПараметровДействия) Тогда
		
		Если НЕ КэшированныеЗначения.Свойство("РеквизитыНоменклатуры") Тогда
			КэшированныеЗначения.Вставить("РеквизитыНоменклатуры", Новый Соответствие);
		КонецЕсли;
		
		НалогообложениеНДС = СтруктураПараметровДействия.НалогообложениеНДС;
		
		Если (НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС
			ИЛИ НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПроизводствоСДЦ)
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Номенклатура") Тогда
			
			Реквизиты = КэшированныеЗначения.РеквизитыНоменклатуры.Получить(ТекущаяСтрока.Номенклатура);
			Если Реквизиты = Неопределено Тогда
				Реквизиты = Справочники.Номенклатура.ЗначенияРеквизитовНоменклатуры(ТекущаяСтрока.Номенклатура);
				КэшированныеЗначения.РеквизитыНоменклатуры.Вставить(ТекущаяСтрока.Номенклатура, Реквизиты);
			КонецЕсли;
			СтавкаНДС = Реквизиты.СтавкаНДС;
			СкорректироватьСтавкуНДС(СтавкаНДС, СтруктураПараметровДействия.Дата);
			
		ИначеЕсли НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда
			СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			
		ИначеЕсли НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.РеализацияРаботУслугНаЭкспорт Тогда
			СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			
		ИначеЕсли НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Номенклатура") Тогда
			СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
			Реквизиты = КэшированныеЗначения.РеквизитыНоменклатуры.Получить(ТекущаяСтрока.Номенклатура);
			Если Реквизиты = Неопределено Тогда
				Реквизиты = Справочники.Номенклатура.ЗначенияРеквизитовНоменклатуры(ТекущаяСтрока.Номенклатура);
				КэшированныеЗначения.РеквизитыНоменклатуры.Вставить(ТекущаяСтрока.Номенклатура, Реквизиты);
			КонецЕсли;
			Если Реквизиты.ПодакцизныйТовар Тогда
				СтавкаНДС = Реквизиты.СтавкаНДС;
				СкорректироватьСтавкуНДС(СтавкаНДС, СтруктураПараметровДействия.Дата);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтавкаНДС) Тогда
				СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			КонецЕсли;
			
		ИначеЕсли НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНаЭкспорт
			ИЛИ НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров
			ИЛИ НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг Тогда
			СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
			
		ИначеЕсли НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя
			ИЛИ НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ЭлектронныеУслуги Тогда
			СтавкаНДС = СтавкаНДСПоУмолчанию(СтруктураПараметровДействия.Дата, Истина);
			
		ИначеЕсли НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
			СтавкаНДС = СтавкаНДСПоУмолчанию(СтруктураПараметровДействия.Дата);
			
		Иначе
			СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			
		КонецЕсли;
		
		ТекущаяСтрока.СтавкаНДС = СтавкаНДС;
		
	КонецЕсли;
	//-- Локализация

КонецПроцедуры

// Рассчитывает сумму НДС в строке табличной части
// 
// Параметры:
//  ТекущаяСтрока		 - Структура - данные обрабатываемой строки.
//  СтруктураПараметровДействия - Структура - параметры действия.
//	Используются следующие значения:
//		* ЦенаВключаетНДС - обязательное
//		* НалогообложениеНДС
//		* СтавкаНДС
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке.
//
Процедура ПересчитатьСуммуНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураПараметровДействия, КэшированныеЗначения) Экспорт
	
	//++ Локализация
	Перем СтавкаНДС;
	
	НалогообложениеНДС = Неопределено;
	СтруктураПараметровДействия.Свойство("НалогообложениеНДС", НалогообложениеНДС);
	
	Если НЕ (СтруктураПараметровДействия <> Неопределено И СтруктураПараметровДействия.Свойство("СтавкаНДС", СтавкаНДС)) Тогда
		СтавкаНДС = ТекущаяСтрока.СтавкаНДС;
	КонецЕсли;
	
	Если КэшированныеЗначения.Свойство("ПроцентыСтавокНДС") Тогда
		ТекПроцентНДС = КэшированныеЗначения.ПроцентыСтавокНДС[СтавкаНДС];
	Иначе
		КэшированныеЗначения.Вставить("ПроцентыСтавокНДС", Новый Соответствие);
		ТекПроцентНДС = Неопределено;
	КонецЕсли;
	
	Если ТекПроцентНДС = Неопределено Тогда
		
		ТекПроцентНДС = УчетНДСУПКлиентСервер.ПолучитьСтавкуНДС(СтавкаНДС);
		КэшированныеЗначения.ПроцентыСтавокНДС.Вставить(СтавкаНДС, ТекПроцентНДС);
		
	КонецЕсли;
	
	ТекущаяСтрока.СуммаНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(ТекущаяСтрока.Сумма,
																	ТекПроцентНДС,
																	СтруктураПараметровДействия.ЦенаВключаетНДС,
																	НалогообложениеНДС);
	//-- Локализация
	
КонецПроцедуры

// Рассчитывает сумму НДС в строке табличной части
// 
// Параметры:
//  ТекущаяСтрока		 - Структура - данные обрабатываемой строки.
//  СтруктураПараметровДействия - Структура - параметры действия.
//	Используются следующие значения:
//		* ЦенаВключаетНДС - обязательное
//		* НалогообложениеНДС
//		* СтавкаНДС
//		* НДСпоСтавкам4и2
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке.
//
Процедура ПересчитатьСуммуНДССуффиксВСтрокеТЧ(ТекущаяСтрока, СтруктураПараметровДействия, КэшированныеЗначения) Экспорт
	
	//++ Локализация
	Перем СтавкаНДС;
	
	НалогообложениеНДС = Неопределено;
	СтруктураПараметровДействия.Свойство("НалогообложениеНДС", НалогообложениеНДС);
	
	Если Не (СтруктураПараметровДействия <> Неопределено
			И СтруктураПараметровДействия.Свойство("СтавкаНДС", СтавкаНДС)) Тогда
		
		СтавкаНДС = ТекущаяСтрока.СтавкаНДС;
		
	КонецЕсли;
	
	Если КэшированныеЗначения.Свойство("ПроцентыСтавокНДС") Тогда
		ТекПроцентНДС = КэшированныеЗначения.ПроцентыСтавокНДС[СтавкаНДС];
	Иначе
		ТекПроцентНДС = Неопределено;
		
		КэшированныеЗначения.Вставить("ПроцентыСтавокНДС", Новый Соответствие);
	КонецЕсли;
	
	Если ТекПроцентНДС = Неопределено Тогда
		
		ТекПроцентНДС = УчетНДСУПКлиентСервер.ПолучитьСтавкуНДС(СтавкаНДС);
		КэшированныеЗначения.ПроцентыСтавокНДС.Вставить(СтавкаНДС, ТекПроцентНДС);
		
	КонецЕсли;
	
	Суффикс = "";
	
	Если СтруктураПараметровДействия.Свойство("Суффикс", Суффикс)
		И Не ЗначениеЗаполнено(Суффикс) Тогда
		Суффикс = "";
	КонецЕсли;
	
	ТекущаяСтрока["СуммаНДС" + Суффикс] = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(
		ТекущаяСтрока["Сумма" + Суффикс],
		ТекПроцентНДС,
		СтруктураПараметровДействия.ЦенаВключаетНДС,
		НалогообложениеНДС);
	//-- Локализация
	
КонецПроцедуры

#Область ПроверкаЗаполненияДокументовПродажи

Процедура СформироватьЗапросыКорректностиУчетаНДСПродажи(ТекЭлемент, ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи) Экспорт

	//++ Локализация
	Если ТекЭлемент = "КорректностьУказанияПодакцизногоТовараВТабличнойЧастиТовары" Тогда
		
		УчетНДСУПСлужебный.СформироватьЗапросКорректностьУказанияПодакцизногоТовараВТабличнойЧастиТовары(ТекстЗапроса);
		
	ИначеЕсли ТекЭлемент = "КорректностьУказанияТовараСОбратнымОбложениемНДСВТабличнойЧастиТовары" Тогда
		
		УчетНДСУПСлужебный.СформироватьЗапросКорректностьУказанияТовараСОбратнымОбложениемНДСВТабличнойЧастиТовары(ТекстЗапроса);
		
	ИначеЕсли ТекЭлемент = "КорректностьУказанияСтавкиНДС" Тогда
		
		УчетНДСУПСлужебный.СформироватьЗапросКорректностьУказанияСтавкиНДСПродажи(ТекстЗапроса);
		
	ИначеЕсли ТекЭлемент = "КорректностьСуммыНДС" Тогда
		
		УчетНДСУПСлужебный.СформироватьЗапросКорректностьСуммыНДС(ТекстЗапроса);
		
	ИначеЕсли ТекЭлемент = "КорректностьСуммыИСуммыНДС" Тогда
		
		УчетНДСУПСлужебный.СформироватьЗапросКорректностьСуммыИСуммыНДС(ТекстЗапроса);
		
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Выводит сообщения об ошибках в учете НДС
//
// Параметры:
// ИмяПроверки     - имя выполняемой проверки
// Выборка         - Выборка из результата запроса
// ОписаниеДокументаЗакупки - Структура - описание документа 
// с полями:
// 		ДокументПродажи - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// 		ИмяТЧ - имя табличной части документа
// 		ПредставлениеТЧ - представление табличной части
// Отказ           - Булево - Флаг отказа от проведения документа.
Процедура СообщитьОбОшибкахКорректностиУчетаНДСПродажи(ИмяПроверки, Выборка, ОписаниеДокументаПродажи, Отказ) Экспорт

	//++ Локализация
	Если ИмяПроверки = "КорректностьУказанияПодакцизногоТовараВТабличнойЧастиТовары" Тогда
		
		УчетНДСУПСлужебный.СообщитьОбОшибкахКорректностьУказанияПодакцизногоТовараВТабличнойЧастиТовары(Выборка, ОписаниеДокументаПродажи.ДокументПродажи, Отказ);
		
	ИначеЕсли ИмяПроверки = "КорректностьУказанияТовараСОбратнымОбложениемНДСВТабличнойЧастиТовары" Тогда
		
		УчетНДСУПСлужебный.СообщитьОбОшибкахКорректностьУказанияТовараСОбратнымОбложениемНДСВТабличнойЧастиТовары(Выборка, ОписаниеДокументаПродажи.ДокументПродажи, Отказ);
		
	ИначеЕсли ИмяПроверки= "КорректностьУказанияСтавкиНДС" Тогда
		
		УчетНДСУПСлужебный.СообщитьОбОшибкахКорректностьУказанияСтавкиНДСПродажи(Выборка, ОписаниеДокументаПродажи, Отказ);
		
	ИначеЕсли ИмяПроверки = "КорректностьСуммыНДС" Тогда 
		
		УчетНДСУПСлужебный.СообщитьОбОшибкахКорректностьСуммыНДС(Выборка, ОписаниеДокументаПродажи, Отказ);
		
	ИначеЕсли ИмяПроверки = "КорректностьСуммыИСуммыНДС" Тогда
		
		УчетНДСУПСлужебный.СообщитьОбОшибкахКорректностьСуммыИСуммыНДС(Выборка, ОписаниеДокументаПродажи, Отказ);
		
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаЗаполненияДокументовЗакупки

Процедура СформироватьЗапросыКорректностиУчетаНДСЗакупки(ТекЭлемент, ТекстЗапроса, ПараметрыЗапроса, ДокументЗакупки) Экспорт

	//++ Локализация
	Если ТекЭлемент = "КорректностьУказанияСтавкиНДС" Тогда
		
		УчетНДСУПСлужебный.СформироватьЗапросКорректностьУказанияСтавкиНДСЗакупки(ТекстЗапроса);
		
	ИначеЕсли ТекЭлемент = "КорректностьСуммыИСуммыНДС" Тогда
		
		УчетНДСУПСлужебный.СформироватьЗапросКорректностьСуммыИСуммыНДСЗакупки(ТекстЗапроса, ПараметрыЗапроса);
		
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Выводит сообщения об ошибках в учете НДС
//
// Параметры:
// ИмяПроверки     - имя выполняемой проверки
// Выборка         - Выборка из результата запроса
// ОписаниеДокументаЗакупки - Структура - описание документа 
// с полями:
// 		ДокументПродажи - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// 		ИмяТЧ - имя табличной части документа
// 		ПредставлениеТЧ - представление табличной части
// Отказ           - Булево - Флаг отказа от проведения документа.
Процедура СообщитьОбОшибкахКорректностиУчетаНДСЗакупки(ИмяПроверки, Выборка, ОписаниеДокументаЗакупки, Отказ) Экспорт

	//++ Локализация
	Если ИмяПроверки= "КорректностьУказанияСтавкиНДС" Тогда
		
		УчетНДСУПСлужебный.СообщитьОбОшибкахКорректностьУказанияСтавкиНДСЗакупки(Выборка, ОписаниеДокументаЗакупки, Отказ);
		
	ИначеЕсли ИмяПроверки = "КорректностьСуммыИСуммыНДС" Тогда
		
		УчетНДСУПСлужебный.СообщитьОбОшибкахКорректностьСуммыИСуммыНДСЗакупки(Выборка, ОписаниеДокументаЗакупки, Отказ);
		
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти

#Область УчетВходящегоНДС

#Область ЗаполнениеНалогообложенияНДСЗакупки

// Проверяет соответствие указанного в документе закупки Налогообложения НДС операции документа. 
// Если переданное значение не заполнено или некорректное, 
// то оно заполняется значением из договора закупки или значением по умолчанию.
//
// Параметры:
// 	НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Налогообложения НДС документа закупки.
// 	ПараметрыЗаполнения - Структура - см. УчетНДСУПКлиентСервер.ПараметрыЗаполненияНалогообложенияНДСЗакупки().
// 	КэшированныеЗначенияПараметров - Произвольный - Значение реквизита кэшированных значений параметров учета НДС.
//
Процедура ЗаполнитьНалогообложениеНДСЗакупки(НалогообложениеНДС, ПараметрыЗаполнения, КэшированныеЗначенияПараметров = Неопределено) Экспорт
	
	ИзмененныеПараметры = УчетНДСУПСлужебный.ИзмененныеПараметры("ПараметрыЗаполненияНалогообложенияНДСЗакупки", ПараметрыЗаполнения, КэшированныеЗначенияПараметров);
	УчетНДСУПСлужебный.ОбновитьКэшированныеЗначенияПараметров("ПараметрыЗаполненияНалогообложенияНДСЗакупки", ПараметрыЗаполнения, КэшированныеЗначенияПараметров);
	
	ТолькоЕслиПустоеИлиНекорректное = Истина;
	Если ИзмененныеПараметры.Свойство("Договор") Тогда
		ТолькоЕслиПустоеИлиНекорректное = Ложь;
	КонецЕсли;
	
	МассивДоступных = УчетНДСУПСлужебный.ДоступныеНалогообложенияНДСЗакупки(ПараметрыЗаполнения);
	
	Если ТолькоЕслиПустоеИлиНекорректное Тогда
		Если ЗначениеЗаполнено(НалогообложениеНДС) 
		     И МассивДоступных.Найти(НалогообложениеНДС) <> Неопределено Тогда
		    Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.Договор) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.НалогообложениеНДС КАК НалогообложениеНДС
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка = &Договор
		|	И НЕ ДоговорыКонтрагентов.НалогообложениеНДСОпределяетсяВДокументе
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДоговорыМеждуОрганизациями.НалогообложениеНДС КАК НалогообложениеНДС
		|ИЗ
		|	Справочник.ДоговорыМеждуОрганизациями КАК ДоговорыМеждуОрганизациями
		|ГДЕ
		|	ДоговорыМеждуОрганизациями.Ссылка = &Договор
		|	И НЕ ДоговорыМеждуОрганизациями.НалогообложениеНДСОпределяетсяВДокументе
		|";
		Запрос.УстановитьПараметр("Договор", ПараметрыЗаполнения.Договор);
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		Если Выборка.Следующий() Тогда
			НалогообложениеНДС = Выборка.НалогообложениеНДС;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НалогообложениеНДС) ИЛИ МассивДоступных.Найти(НалогообложениеНДС) = Неопределено Тогда
		Если МассивДоступных.Количество() = 1 Тогда
			НалогообложениеНДС = МассивДоступных[0];
		Иначе
			НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список доступных для выбора значений налогообложения НДС исходя из операции документа.
// 
// Параметры:
// 	ЭлементНалогообложениеНДС - ПолеФормы - Элемент формы, в котором указывается налогообложение НДС.
// 	НалогообложениеНДС - ПеречислениеСсылка.ТипНалогообложенияНДС - Выбранное в документе значение налогообложения НДС.
// 	ПараметрыЗаполнения - Структура - см. УчетНДСУПКлиентСервер.ПараметрыЗаполненияНалогообложенияНДСЗакупки().
// 	КэшированныеЗначенияПараметров - Произвольный - Значение реквизита кэшированных значений параметров учета НДС.
//
Процедура ЗаполнитьСписокВыбораНалогообложенияНДСЗакупки(ЭлементНалогообложениеНДС, НалогообложениеНДС, ПараметрыЗаполнения, КэшированныеЗначенияПараметров = Неопределено) Экспорт
	
	Если ПараметрыЗаполнения.ВозвратТоваровКомитенту
		 ИЛИ ПараметрыЗаполнения.ПриемНаКомиссию Тогда
		ЭлементНалогообложениеНДС.Заголовок = НСтр("ru = 'Налогообложение комитента'");
	Иначе
		ЭлементНалогообложениеНДС.Заголовок = НСтр("ru = 'Налогообложение'");
	КонецЕсли;
	
	ПрименяемыеТипыНалогообложенияЗакупки = УчетНДСУПСлужебный.ПрименяемыеТипыНалогообложенияНДС(Ложь, Истина);
	// Переопределим представление по операции документа
	Для каждого Элемент Из ПрименяемыеТипыНалогообложенияЗакупки Цикл
		Если Элемент.Значение = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
			Если ПараметрыЗаполнения.ВозвратТоваровКомитенту ИЛИ ПараметрыЗаполнения.ПриемНаКомиссию Тогда
				Элемент.Представление = НСтр("ru = 'Продажа облагается НДС'");
			ИначеЕсли ПараметрыЗаполнения.ВозвратТоваровПоставщику Тогда
				Элемент.Представление = НСтр("ru = 'Возврат товаров облагается НДС'");
			КонецЕсли;
		ИначеЕсли Элемент.Значение = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда
			Если ПараметрыЗаполнения.ВозвратТоваровКомитенту ИЛИ ПараметрыЗаполнения.ПриемНаКомиссию Тогда
				Элемент.Представление = НСтр("ru = 'Продажа не облагается НДС'");
			ИначеЕсли ПараметрыЗаполнения.ВозвратТоваровПоставщику Тогда
				Элемент.Представление = НСтр("ru = 'Возврат товаров не облагается НДС'");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДоступныеТипыНалогообложенияЗакупки = УчетНДСУПСлужебный.ДоступныеНалогообложенияНДСЗакупки(ПараметрыЗаполнения);
	Если ЗначениеЗаполнено(НалогообложениеНДС) И ДоступныеТипыНалогообложенияЗакупки.Найти(НалогообложениеНДС) = Неопределено Тогда
		ДоступныеТипыНалогообложенияЗакупки.Добавить(НалогообложениеНДС);
	КонецЕсли;
	ЭлементНалогообложениеНДС.СписокВыбора.Очистить();
	
	Для каждого Значение Из ДоступныеТипыНалогообложенияЗакупки Цикл
		ЭлементСписка = ПрименяемыеТипыНалогообложенияЗакупки.НайтиПоЗначению(Значение);
		Если ЭлементСписка <> Неопределено Тогда
			ЭлементНалогообложениеНДС.СписокВыбора.Добавить(Значение, ЭлементСписка.Представление);
		Иначе
			ЭлементНалогообложениеНДС.СписокВыбора.Добавить(Значение);
		КонецЕсли;
	КонецЦикла;
	
	ЭлементНалогообложениеНДС.Видимость = (ЭлементНалогообложениеНДС.СписокВыбора.Количество() <> 1); 
	
	УчетНДСУПСлужебный.ОбновитьКэшированныеЗначенияПараметров("ПараметрыЗаполненияНалогообложенияНДСЗакупки", ПараметрыЗаполнения, КэшированныеЗначенияПараметров);
	
КонецПроцедуры

// Проверяет возможность проведения документа с указанным налогообложением НДС. 
//
// Параметры:
//	Объект - ДокументОбъект - Данные документа закупки.
// 	НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Налогообложения НДС документа закупки.
// 	ПараметрыПроверки - Структура - См. УчетНДСУП.ПараметрыПроверкиЗаполнениеДокументаЗакупкиПоНалогообложениюНДС().
// 	Отказ - Булево - Признак отказа проведения документа.
//
Процедура ПроверитьЗаполнениеДокументаЗакупкиПоНалогообложениюНДС(Объект, НалогообложениеНДС, ПараметрыПроверки, Отказ) Экспорт
	
	УчетНДСЛокализация.ПроверитьЗаполнениеДокументаЗакупкиПоНалогообложениюНДС(Объект, НалогообложениеНДС, ПараметрыПроверки, Отказ);
	
КонецПроцедуры

// Возвращает структуру параметров для проверки заполнения документа закупки по налогообложению НДС.
//
// Возвращаемое значение:
//	ПараметрыПроверки - Структура - Структура с полями
//	         * ИмяТабличнойЧасти - Строка - Имя табличной части закупаемых ценностей.
//	         * ИмяРеквизитаСтатьяРасходов - Строка - Имя реквизита табличной части, в которой указывается статья отражения расходов.
//	         * ИмяРеквизитаАналитикаРасходов - Строка - Имя реквизита табличной части, в которой указывается аналитика отражения расходов.
//
Функция ПараметрыПроверкиЗаполнениеДокументаПоНалогообложениюНДСЗакупки() Экспорт
	
	ПараметрыПроверки = Новый Структура();
	ПараметрыПроверки.Вставить("ИмяТабличнойЧасти",             "");
	ПараметрыПроверки.Вставить("ИмяРеквизитаСтатьяРасходов",    "");
	ПараметрыПроверки.Вставить("ИмяРеквизитаАналитикаРасходов", "");
	
	Возврат ПараметрыПроверки;
	
КонецФункции

// Устанавливаем условное оформление для ставки НДС, суммы НДС, суммы с НДС по налогообложению закупки.
//
// Параметры:
//  Форма - Форма - Содержит данную форму
//  ИмяПоляВводаСтавкиНДС - Строка - Наименование элемента формы, содержащего ставку НДС,
//                                   если оно отличается от "ТоварыСтавкаНДС"
//  ИмяПоляВводаСуммыНДС - Строка - Наименование элемента формы, содержащего сумму НДС,
//                                  если оно отличается от "ТоварыСуммаНДС"
//  ИмяПоляВводаСуммыСНДС - Строка - Наименование элемента формы, содержащего сумму с НДС,
//                                   если оно отличается от "ТоварыСуммаСНДС"
//
Процедура УстановитьУсловноеОформлениеСуммНДСПоНалогообложениюЗакупки(Форма,
	                                          ИмяПоляВводаСтавкиНДС = "ТоварыСтавкаНДС",
	                                          ИмяПоляВводаСуммыНДС  = "ТоварыСуммаНДС",
	                                          ИмяПоляВводаСуммыСНДС = "ТоварыСуммаСНДС") Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаСтавкиНДС].Имя);

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаСуммыНДС].Имя);

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаСуммыСНДС].Имя);
	
	
	СписокНалогообложений = Новый СписокЗначений();
	СписокНалогообложений.ЗагрузитьЗначения(УчетНДСУПКлиентСервер.ТипыНалогообложенияСкрывающиеРеквизитыНДС());
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НалогообложениеНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокНалогообложений;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	УчетНДСЛокализация.ДополнитьУсловноеОформлениеСуммНДСПоНалогообложениюЗакупки(
		Форма, ИмяПоляВводаСтавкиНДС, ИмяПоляВводаСуммыНДС, ИмяПоляВводаСуммыСНДС);

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеВидаДеятельностиНДС

// Заполняет вид деятельности раздельного учета НДС по переданным параметрам заполнения.
// Параметры:
// 	ВидДеятельностиНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Реквизит документа приобретения.
// 	ПараметрыЗаполнения - Структура - см. УчетНДСУПКлиентСервер.ПараметрыЗаполненияВидаДеятельностиНДС().
// 	КэшированныеЗначенияПараметров - Произвольный - Значение реквизита кэшированных значений параметров учета НДС.
//
Процедура ЗаполнитьВидДеятельностиНДС(ВидДеятельностиНДС, ПараметрыЗаполнения, КэшированныеЗначенияПараметров = Неопределено) Экспорт
	
	Если ПараметрыЗаполнения.Организация = Справочники.Организации.ПустаяСсылка() Тогда
		// Организация для объекта задается, но не указана.
		// В этом случае нет смысла заполнять/проверять вид деятельности НДС, 
		// т.к. нет возможности получить учетную политику.
		Возврат;
	КонецЕсли;
	
	ИзмененныеПараметры = УчетНДСУПСлужебный.ИзмененныеПараметры("ПараметрыЗаполненияВидаДеятельностиНДС", ПараметрыЗаполнения, КэшированныеЗначенияПараметров);
	УчетНДСУПСлужебный.ОбновитьКэшированныеЗначенияПараметров("ПараметрыЗаполненияВидаДеятельностиНДС", ПараметрыЗаполнения, КэшированныеЗначенияПараметров);
	
	ТолькоЕслиПустоеИлиНекорректное = Истина;
	Если ИзмененныеПараметры.Свойство("Договор")
		ИЛИ ИзмененныеПараметры.Свойство("НаправлениеДеятельности")
		ИЛИ ИзмененныеПараметры.Свойство("Организация")
		ИЛИ ИзмененныеПараметры.Свойство("Склад") Тогда
		ТолькоЕслиПустоеИлиНекорректное = Ложь;
	КонецЕсли;

	МассивДоступных = УчетНДСУПСлужебный.ДоступныеВидыДеятельностиНДС(ПараметрыЗаполнения);
	
	Если ТолькоЕслиПустоеИлиНекорректное Тогда
		Если МассивДоступных.Найти(ВидДеятельностиНДС) <> Неопределено Тогда
		    Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйВидДеятельностиНДС = ВидДеятельностиНДС;
	
	//++ Локализация
	Если НЕ ЗначениеЗаполнено(НовыйВидДеятельностиНДС) И МассивДоступных.Найти(Перечисления.ТипыНалогообложенияНДС.ПродажаПоПатенту) <> Неопределено Тогда
		НовыйВидДеятельностиНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаПоПатенту;
	КонецЕсли;
	//-- Локализация
	
	ЗаполненоПоДоговоруИлиНапралениюДеятельности = Ложь;
	Если (ИзмененныеПараметры.Свойство("Договор") 
			И ЗначениеЗаполнено(ПараметрыЗаполнения.Договор))
		ИЛИ (ИзмененныеПараметры.Свойство("НаправлениеДеятельности") 
			И ЗначениеЗаполнено(ПараметрыЗаполнения.НаправлениеДеятельности))  Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	1 КАК Приоритет,
		|	ДоговорыКонтрагентов.ЗакупкаПодДеятельность КАК ВидДеятельностиНДС
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка = &Договор
		|	И НЕ ДоговорыКонтрагентов.ЗакупкаПодДеятельностьОпределяетсяВДокументе
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	1 КАК Приоритет,
		|	ДоговорыМеждуОрганизациями.ЗакупкаПодДеятельность КАК ВидДеятельностиНДС
		|ИЗ
		|	Справочник.ДоговорыМеждуОрганизациями КАК ДоговорыМеждуОрганизациями
		|ГДЕ
		|	ДоговорыМеждуОрганизациями.Ссылка = &Договор
		|	И НЕ ДоговорыМеждуОрганизациями.ЗакупкаПодДеятельностьОпределяетсяВДокументе
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2 КАК Приоритет,
		|	НаправленияДеятельности.НалогообложениеНДС КАК ВидДеятельностиНДС
		|ИЗ
		|	Справочник.НаправленияДеятельности КАК НаправленияДеятельности
		|ГДЕ
		|	НаправленияДеятельности.Ссылка = &НаправлениеДеятельности
		|	И НЕ НаправленияДеятельности.НалогообложениеНДСОпределяетсяВДокументе
		|	И (НаправленияДеятельности.УчетДоходов
		|		ИЛИ НаправленияДеятельности.УчетЗатрат)
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		Запрос.УстановитьПараметр("Договор", ПараметрыЗаполнения.Договор);
		Запрос.УстановитьПараметр("НаправлениеДеятельности", ПараметрыЗаполнения.НаправлениеДеятельности);
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		Если Выборка.Следующий() Тогда
			НовыйВидДеятельностиНДС = Выборка.ВидДеятельностиНДС;
			ЗаполненоПоДоговоруИлиНапралениюДеятельности = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если МассивДоступных.Найти(НовыйВидДеятельностиНДС) = Неопределено Тогда
		НовыйВидДеятельностиНДС = Неопределено;
	КонецЕсли;
	
	Если МассивДоступных.Найти(Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка()) <> Неопределено Тогда
		НовыйВидДеятельностиНДС = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
	КонецЕсли;
	
	Если (Не ЗаполненоПоДоговоруИлиНапралениюДеятельности
			И (ИзмененныеПараметры.Свойство("Организация") И ЗначениеЗаполнено(ПараметрыЗаполнения.Организация))
				ИЛИ (ИзмененныеПараметры.Свойство("Склад") И ЗначениеЗаполнено(ПараметрыЗаполнения.Склад)))
			ИЛИ НовыйВидДеятельностиНДС = Неопределено Тогда
		УчетНДСЛокализация.ЗаполнитьВидДеятельностиНДСПоПараметрам(НовыйВидДеятельностиНДС, ВидДеятельностиНДС, ПараметрыЗаполнения);
	КонецЕсли;
	
	Если НовыйВидДеятельностиНДС = Неопределено Тогда
		ПараметрыУчетаПоОрганизации = ПараметрыУчетаПоОрганизации(
				ПараметрыЗаполнения.Организация,
				ПараметрыЗаполнения.Дата,
				ПараметрыЗаполнения.Склад,
				ПараметрыЗаполнения.Подразделение);
		НовыйВидДеятельностиНДС = ПараметрыУчетаПоОрганизации.ОсновноеНалогообложениеНДСПродажи;
	КонецЕсли;
	
	ВидДеятельностиНДС = НовыйВидДеятельностиНДС;
	
КонецПроцедуры

// Заполняет список доступных для выбора видов деятельности раздельного учета НДС исходя учетной политики и операций документа.
//
// Параметры:
// 	ЭлементВидДеятельностиНДС - ПолеФормы - Элемент формы, в котором указывается вид деятельности НДС.
// 	ВидДеятельностиНДС - ПеречислениеСсылка.ТипНалогообложенияНДС - Выбранное в документе значение вида деятельности раздельного учета НДС.
// 	ПараметрыЗаполнения - Структура - см. УчетНДСУПКлиентСервер.ПараметрыЗаполненияВидаДеятельностиНДС().
// 	КэшированныеЗначенияПараметров - Произвольный - Значение реквизита кэшированных значений параметров учета НДС.
//
Процедура ЗаполнитьСписокВыбораВидаДеятельностиНДС(ЭлементВидДеятельностиНДС, ВидДеятельностиНДС, ПараметрыЗаполнения, КэшированныеЗначенияПараметров = Неопределено) Экспорт
	
	Представления = УчетНДСУПСлужебный.ПрименяемыеВидыДеятельностиНДС();
	МассивДоступных = УчетНДСУПСлужебный.ДоступныеВидыДеятельностиНДС(ПараметрыЗаполнения);
	
	Если ЗначениеЗаполнено(ВидДеятельностиНДС) И МассивДоступных.Найти(ВидДеятельностиНДС) = Неопределено Тогда
		МассивДоступных.Добавить(ВидДеятельностиНДС);
	КонецЕсли;
	
	ЭлементВидДеятельностиНДС.СписокВыбора.Очистить();
	Для каждого Значение Из МассивДоступных Цикл
		ЭлементПредставления = Представления.НайтиПоЗначению(Значение);
		Если ЭлементПредставления <> Неопределено Тогда 
			ЭлементВидДеятельностиНДС.СписокВыбора.Добавить(Значение, ЭлементПредставления.Представление);
		Иначе
			ЭлементВидДеятельностиНДС.СписокВыбора.Добавить(Значение);
		КонецЕсли;
	КонецЦикла;
	ЭлементВидДеятельностиНДС.Видимость = (ЭлементВидДеятельностиНДС.СписокВыбора.Количество() > 1);
	
	УчетНДСУПСлужебный.ОбновитьКэшированныеЗначенияПараметров("ПараметрыЗаполненияВидаДеятельностиНДС", ПараметрыЗаполнения, КэшированныеЗначенияПараметров);
	
КонецПроцедуры

// Проверяет возможность проведения документа с указанным видом деятельности раздельного учета НДС.
//
// Параметры:
// 	Объект - ДокументОбъект - Данные документа.
// 	ВидДеятельностиНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Вид деятельности раздельного учета НДС.
// 	ПараметрыПроверки - Структура - См. УчетНДСУП.ПараметрыПроверкиЗаполнениеДокументаПоВидуДеятельностиНДС()
// 	Отказ - Булево - Признак отказа проведения документа.
//
// Проверяет возможность проведения документа с указанным видом деятельности раздельного учета НДС.
//
// Параметры:
// 	Объект - ДокументОбъект - Данные документа.
// 	ВидДеятельностиНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Вид деятельности раздельного учета НДС.
// 	ПараметрыПроверки - Структура - См. УчетНДСУП.ПараметрыПроверкиЗаполненияДокументаПоВидуДеятельностиНДС()
// 	Отказ - Булево - Признак отказа проведения документа.
//
Процедура ПроверитьЗаполнениеДокументаПоВидуДеятельностиНДС(Объект, ВидДеятельностиНДС, ПараметрыПроверки, Отказ) Экспорт
	
 	УчетНДСЛокализация.ПроверитьЗаполнениеДокументаПоВидуДеятельностиНДС(Объект, ВидДеятельностиНДС, ПараметрыПроверки, Отказ)
	
КонецПроцедуры

// Возвращает структуру параметров для проверки заполнения документа по виду деятельности раздельного учета НДС.
//
// Возвращаемое значение:
// ПараметрыПроверки - Структура - Структура с ключами
// 			* ИмяТабличнойЧасти - Строка - Имя табличной части, в которой указываются ценности.
// 			* ИмяРеквизитаСтатьяРасходов - Строка - Имя реквизита табличной части, в которой указывается статья отражения расходов (необязательный).
// 			* ИмяРеквизитаАналитикаРасходов - Строка - Имя реквизита табличной части, в которой указывается аналитика отражения расходов (необязательный).
// 			* ИмяРеквизитаСтатьяАктивовПассивов - Строка - Имя реквизита табличной части, в которой указывается статья отражения прочих активов (необязательный).
// 			* ИмяРеквизитаАналитикаАктивовПассивов Строка - Имя реквизита табличной части, в которой указывается аналитика отражения прочих активов (необязательный).
//
Функция ПараметрыПроверкиЗаполненияДокументаПоВидуДеятельностиНДС() Экспорт

	ПараметрыПроверки = Новый Структура();
	ПараметрыПроверки.Вставить("ИмяТабличнойЧасти", "");
	ПараметрыПроверки.Вставить("ИмяРеквизитаСтатьяРасходов", "");
	ПараметрыПроверки.Вставить("ИмяРеквизитаАналитикаРасходов", "");
	ПараметрыПроверки.Вставить("ИмяРеквизитаСтатьяАктивовПассивов", "");
	ПараметрыПроверки.Вставить("ИмяРеквизитаАналитикаАктивовПассивов", "");
	
	Возврат ПараметрыПроверки;
	
КонецФункции

#КонецОбласти

#Область РегистрацияСчетовФактурПолученных

// Возвращает коллекцию свойств, описывающих счета-фактуры/заявления о ввозе товаров, зарегистрированные на основании документа закупки или возврата
//
// Параметры:
// 	ПараметрыРегистрации - Структура - См. УчетНДСУПКлиентСервер.ПараметрыРегистрацииСчетовФактурПолученных()
// 
// Возвращаемое значение:
// 	Результат - Структура - Структура с ключами
//		* Представление - Строка, ФорматированнаяСтрока - описание документов, зарегистрированных на основании документа закупки или возврата.
//		* СчетаФактуры - Массив - ДокументСсылка.СчетФактураПолученный, ДокументСсылка.СчетФактураПолученныйНалоговыйАгент, ДокументСсылка.ЗаявлениеОВвозеТоваров - ссылки на счет-фактуру/заявление о ввозе товаров.
//		* ДокументПоОснованиюТребуется - Булево - признак необходимости ввода хотя бы одного документа по основанию
//		* ЕстьПравоИнтерактивногоДобавленияДокументаПоОснованию - Булево - признак наличия права для интерактивного добавления документа по основанию
Функция СчетаФактурыПолученныеНаОсновании(ПараметрыРегистрации) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Представление", "");
	Результат.Вставить("СчетаФактуры",  Новый Массив);
	Результат.Вставить("ДокументПоОснованиюТребуется",  Ложь);
	Результат.Вставить("ЕстьПравоИнтерактивногоДобавленияДокументаПоОснованию",  Ложь);
	Результат.Вставить("ЕстьРасхождения", Ложь);
	
	//++ Локализация
	Результат = УчетНДСРФ.СчетаФактурыПолученныеНаОсновании(ПараметрыРегистрации);
	//-- Локализация
	
	Возврат Результат;

КонецФункции

// Вызывается в обработчике ПередЗаписью() документа закупки.
// Отменяет проведение счета-фактуры, если отменяется проведение документа закупки или его реквизиты не соответствуют параметрам регистрации.
// Помечает на удаление счета-фактуры, если помечается на удаление документ закупки.
//
// Параметры:
// 	ПараметрыРегистрации - Структура - См. УчетНДСУПКлиентСевер.ПараметрыРегистрацииСчетовФактурПолученных().
// 	РежимЗаписи - РежимЗаписиДокумента - Режим записи документа.
// 	ПометкаУдаления - Булево - Пометка удаления документа закупки.
// 	Проведен - Булево - Пометка проведения документа.
//
Процедура АктуализироватьСчетаФактурыПолученныеПередЗаписью(ПараметрыРегистрации, Знач РежимЗаписи, Знач ПометкаУдаления, Знач Проведен) Экспорт
	
	//++ Локализация
	УчетНДСРФ.АктуализироватьСчетаФактурыПолученныеПередЗаписью(ПараметрыРегистрации, РежимЗаписи, ПометкаУдаления, Проведен);
	//-- Локализация
	
КонецПроцедуры

// Вызывается в обработчике ОбработкаПроведения() документа закупки.
// Выполняет проведение счетов-фактур по данным документа закупки.
//
// Параметры:
// 	ПараметрыРегистрации - Структура - См. УчетНДСУПКлиентСевер.ПараметрыРегистрацииСчетовФактурПолученных().
// 	
Процедура АктуализироватьСчетаФактурыПолученныеПриПроведении(ПараметрыРегистрации) Экспорт
	
	//++ Локализация
	УчетНДСРФ.АктуализироватьСчетаФактурыПолученныеПриПроведении(ПараметрыРегистрации);
	//-- Локализация
	
КонецПроцедуры

// Вызывается в обработчике ОбработкаУдаленияПроведения() документа закупки после записи движений.
//
// Параметры:
// 	ПараметрыРегистрации - Структура - См. УчетНДСУПКлиентСевер.ПараметрыРегистрацииСчетовФактурПолученных().
//
Процедура АктуализироватьСчетаФактурыПолученныеПриУдаленииПроведения(ПараметрыРегистрации) Экспорт
	
	//++ Локализация
	УчетНДСРФ.АктуализироватьСчетаФактурыПолученныеПриУдаленииПроведения(ПараметрыРегистрации);
	//-- Локализация
	
КонецПроцедуры

// Возвращает счета-фактуры полученные, зарегистрированные на основании документов.
//
// Параметры:
// 	ДокументыОснования - ДокументСсылка, Массив - Документ или массив документов-оснований счетов-фактур полученных.
// 	ТолькоПроведенные - Булево - Признак того, что нужно вернуть только проведенные документы.
//
// Возвращаемое значение:
// 	СчетаФактуры - ТаблицаЗначений - Таблица счетов-фактур зарегистрированных на основании, содержащая колонки
// 	                   * ДокументОснование - ДокументСсылка - Ссылка на документ-основание, у которого есть счет-фактура.
// 	                   * Ссылка - ДокументСсылка.СчетФактураПолученный - Ссылка на счет-фактуру.
// 	                   * РучнаяКорректировкаСуммДокумента - Булево - Истина, если суммы счета-фактуры были изменены вручную пользователем.
//
Функция СчетаФактурыПолученныеПоДокументамОснованиям(ДокументыОснования, ТолькоПроведенные = Истина) Экспорт
	
	СчетаФактуры = Новый ТаблицаЗначений();
	СчетаФактуры.Колонки.Добавить("ДокументОснование");
	СчетаФактуры.Колонки.Добавить("Ссылка");
	СчетаФактуры.Колонки.Добавить("РучнаяКорректировкаСуммДокумента", Новый ОписаниеТипов("Булево"));
	
	//++ Локализация
	СчетаФактуры = УчетНДСРФ.СчетаФактурыПолученныеПоДокументамОснованиям(ДокументыОснования, ТолькоПроведенные);
	//-- Локализация
		
	Возврат СчетаФактуры;

КонецФункции

#КонецОбласти

// Проверяет возможность списания НДС на прочие расходы для указанной смены налогообложения.
//
// Параметры:
//	СтароеНалогообложение - ПеречислениеСсылка.ТипыНалогообложенияНДС
//	НовоеНалогообложение  - ПеречислениеСсылка.ТипыНалогообложенияНДС
//
// Возвращаемое значение:
//	Булево - признак того, что при такой смене налогообложения НДС может быть списан на прочие расходы,
//	 (если это предусмотрено учетной политикой организации).
//
Функция ВозможноСписаниеНДС(СтароеНалогообложение, НовоеНалогообложение) Экспорт
	
	ВидыДеятельностиНДСВСтоимости = ВидыДеятельностиНДСУчитываетсяВСтоимости();
	ВидыДеятельностиНДСКВозмещению = ВидыДеятельностиНДСПринимаетсяКВозмещению();
	
	Возврат (ВидыДеятельностиНДСКВозмещению.Найти(СтароеНалогообложение) <> Неопределено
					И ВидыДеятельностиНДСВСтоимости.Найти(НовоеНалогообложение) <> Неопределено);
	
КонецФункции

#КонецОбласти

#Область УчетИсходящегоНДС

#Область ЗаполнениеНалогообложенияНДСПродажи

// Проверяет соответствие указанного в документе продажи Налогообложения НДС настройкам учета НДС и операции документа. 
// Если переданное значение не заполнено или некорректное, то оно заполняется значением из НСИ.
//
// Параметры:
// 	НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Налогообложения НДС документа продажи.
// 	ПараметрыЗаполнения - Структура - см. УчетНДСУПКлиентСервер.ПараметрыЗаполненияНалогообложенияНДСПродажи().
// 	КэшированныеЗначенияПараметров - Произвольный - Значение реквизита кэшированных значений параметров учета НДС.
//
Процедура ЗаполнитьНалогообложениеНДСПродажи(НалогообложениеНДС, ПараметрыЗаполнения, КэшированныеЗначенияПараметров = Неопределено) Экспорт
	
	Если ПараметрыЗаполнения.Организация = Справочники.Организации.ПустаяСсылка() Тогда
		// Организация для объекта в принципе задается, но не указана.
		// В этом случае нет смысла заполнять/проверять налогообложение, 
		// т.к. нет возможности получить учетную политику.
		Возврат;
	КонецЕсли;
	
	ИзмененныеПараметры = УчетНДСУПСлужебный.ИзмененныеПараметры("ПараметрыЗаполненияНалогообложенияНДСПродажи",
								ПараметрыЗаполнения,
								КэшированныеЗначенияПараметров);
								
	УчетНДСУПСлужебный.ОбновитьКэшированныеЗначенияПараметров("ПараметрыЗаполненияНалогообложенияНДСПродажи",
								ПараметрыЗаполнения,
								КэшированныеЗначенияПараметров);

	ТолькоЕслиПустоеИлиНекорректное = Истина;
	Если ИзмененныеПараметры.Свойство("Договор")
		ИЛИ ИзмененныеПараметры.Свойство("НаправлениеДеятельности")
		ИЛИ ИзмененныеПараметры.Свойство("Организация")
		ИЛИ ИзмененныеПараметры.Свойство("Склад") Тогда
		ТолькоЕслиПустоеИлиНекорректное = Ложь;
	КонецЕсли;
	
	МассивДоступных = УчетНДСУПСлужебный.ДоступныеНалогообложенияНДСПродажи(ПараметрыЗаполнения);
	Если ТолькоЕслиПустоеИлиНекорректное Тогда
		Если ЗначениеЗаполнено(НалогообложениеНДС) И МассивДоступных.Найти(НалогообложениеНДС) <> Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовоеНалогообложениеНДС = НалогообложениеНДС;
	
	//++ Локализация
	Если МассивДоступных.Найти(Перечисления.ТипыНалогообложенияНДС.ПродажаПоПатенту) <> Неопределено Тогда
		НовоеНалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаПоПатенту;
	КонецЕсли;
	//-- Локализация
	
	НалогообложениеДоговора = Неопределено;
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.Договор) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.НалогообложениеНДС КАК НалогообложениеНДС
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка = &Договор
		|	И НЕ ДоговорыКонтрагентов.НалогообложениеНДСОпределяетсяВДокументе
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДоговорыМеждуОрганизациями.НалогообложениеНДС КАК НалогообложениеНДС
		|ИЗ
		|	Справочник.ДоговорыМеждуОрганизациями КАК ДоговорыМеждуОрганизациями
		|ГДЕ
		|	ДоговорыМеждуОрганизациями.Ссылка = &Договор
		|	И НЕ ДоговорыМеждуОрганизациями.НалогообложениеНДСОпределяетсяВДокументе
		|";
		Запрос.УстановитьПараметр("Договор", ПараметрыЗаполнения.Договор);
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		Если Выборка.Следующий() Тогда
			НалогообложениеДоговора = Выборка.НалогообложениеНДС;
		КонецЕсли;
	КонецЕсли;
	
	НалогообложениеНаправленияДеятельности = Неопределено;
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.НаправлениеДеятельности) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	2 КАК Приоритет,
		|	НаправленияДеятельности.НалогообложениеНДС КАК НалогообложениеНДС
		|ИЗ
		|	Справочник.НаправленияДеятельности КАК НаправленияДеятельности
		|ГДЕ
		|	НаправленияДеятельности.Ссылка = &НаправлениеДеятельности
		|	И НЕ НаправленияДеятельности.НалогообложениеНДСОпределяетсяВДокументе
		|	И НаправленияДеятельности.УчетДоходов
		|";
		Запрос.УстановитьПараметр("НаправлениеДеятельности", ПараметрыЗаполнения.НаправлениеДеятельности);
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		Если Выборка.Следующий() Тогда
			НалогообложениеНаправленияДеятельности = Выборка.НалогообложениеНДС;
		КонецЕсли;
	КонецЕсли;
	
	Если (ИзмененныеПараметры.Свойство("Договор") И ЗначениеЗаполнено(ПараметрыЗаполнения.Договор))
			ИЛИ (ИзмененныеПараметры.Свойство("НаправлениеДеятельности") И ЗначениеЗаполнено(ПараметрыЗаполнения.НаправлениеДеятельности)) Тогда
		
		Если ЗначениеЗаполнено(НалогообложениеДоговора) Тогда
			НовоеНалогообложениеНДС = НалогообложениеДоговора;
		ИначеЕсли ЗначениеЗаполнено(НалогообложениеНаправленияДеятельности) Тогда
			НовоеНалогообложениеНДС = НалогообложениеНаправленияДеятельности;
		КонецЕсли;
		
	КонецЕсли;
	
	ИзменилисьОрганизацияИлиСклад = 
		(ИзмененныеПараметры.Свойство("Организация") И ЗначениеЗаполнено(ПараметрыЗаполнения.Организация))
			ИЛИ (ИзмененныеПараметры.Свойство("Склад") И ЗначениеЗаполнено(ПараметрыЗаполнения.Склад));
	
	Если (ИзменилисьОрганизацияИлиСклад И НалогообложениеДоговора = Неопределено И НалогообложениеНаправленияДеятельности = Неопределено)
			ИЛИ МассивДоступных.Найти(НовоеНалогообложениеНДС) = Неопределено Тогда
		УчетНДСЛокализация.ЗаполнитьНалогообложениеНДСПродажиПоПараметрам(НовоеНалогообложениеНДС, НалогообложениеНДС, ПараметрыЗаполнения);
	КонецЕсли;
	
	Если НовоеНалогообложениеНДС = Неопределено Тогда
		ПараметрыУчетаОрганизации = ПараметрыУчетаПоОрганизации(ПараметрыЗаполнения.Организация,
			ПараметрыЗаполнения.Дата,
			ПараметрыЗаполнения.Склад,
			ПараметрыЗаполнения.Подразделение);
		
		Если ПараметрыЗаполнения.РозничнаяПродажа = Истина Тогда
			НовоеНалогообложениеНДС = ПараметрыУчетаОрганизации.НалогообложениеНДСРозничнойПродажи;
		Иначе
			НовоеНалогообложениеНДС = ПараметрыУчетаОрганизации.ОсновноеНалогообложениеНДСПродажи;
		КонецЕсли;
	КонецЕсли;
	
	НалогообложениеНДС = НовоеНалогообложениеНДС;
	
КонецПроцедуры

// Заполняет список доступных для выбора значений налогообложения НДС исходя из настроек учета НДС операции документа.
//
// Параметры:
// 	ЭлементНалогообложениеНДС - ПолеФормы - Элемент формы, в котором указывается налогообложение НДС.
// 	НалогообложениеНДС - ПеречислениеСсылка.ТипНалогообложенияНДС - Выбранное в документе значение налогообложения НДС.
// 	ПараметрыЗаполнения - Структура - см. УчетНДСУПКлиентСервер.ПараметрыЗаполненияНалогообложенияНДСПродажи().
// 	КэшированныеЗначенияПараметров - Произвольный - Значение реквизита кэшированных значений параметров учета НДС.
//
Процедура ЗаполнитьСписокВыбораНалогообложенияНДСПродажи(ЭлементНалогообложениеНДС, НалогообложениеНДС, ПараметрыЗаполнения, КэшированныеЗначенияПараметров = Неопределено) Экспорт
	
	ПрименяемыеТипыНалогообложенияПродажи = УчетНДСУПСлужебный.ПрименяемыеТипыНалогообложенияНДС(Истина, Ложь);
	Для каждого Элемент Из ПрименяемыеТипыНалогообложенияПродажи Цикл
		Если Элемент.Значение = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
			Если ПараметрыЗаполнения.ВозвратТоваровОтКлиента ИЛИ ПараметрыЗаполнения.ВозвратТоваровОтКомиссионера Тогда
				Элемент.Представление = НСтр("ru = 'Возврат облагается НДС'");
			КонецЕсли;
		КонецЕсли;
		Если Элемент.Значение = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда
			Если ПараметрыЗаполнения.ВозвратТоваровОтКлиента ИЛИ ПараметрыЗаполнения.ВозвратТоваровОтКомиссионера Тогда
				Элемент.Представление = НСтр("ru = 'Возврат не облагается НДС'");
			КонецЕсли;
		КонецЕсли;
		Если Элемент.Значение = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
			Если ПараметрыЗаполнения.ВозвратТоваровОтКлиента ИЛИ ПараметрыЗаполнения.ВозвратТоваровОтКомиссионера Тогда
				Элемент.Представление = НСтр("ru = 'Возврат облагается ЕНВД'");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	ДоступныеНалогообложенияПродажи = УчетНДСУПСлужебный.ДоступныеНалогообложенияНДСПродажи(ПараметрыЗаполнения);
	Если ЗначениеЗаполнено(НалогообложениеНДС) И ДоступныеНалогообложенияПродажи.Найти(НалогообложениеНДС) = Неопределено Тогда
		ДоступныеНалогообложенияПродажи.Добавить(НалогообложениеНДС);
	КонецЕсли;
	ЭлементНалогообложениеНДС.СписокВыбора.Очистить();
	
	Для каждого Значение Из ДоступныеНалогообложенияПродажи Цикл
		ЭлементСписка = ПрименяемыеТипыНалогообложенияПродажи.НайтиПоЗначению(Значение);
		Если ЭлементСписка <> Неопределено Тогда
			ЭлементНалогообложениеНДС.СписокВыбора.Добавить(Значение, ЭлементСписка.Представление);
		Иначе
			ЭлементНалогообложениеНДС.СписокВыбора.Добавить(Значение);
		КонецЕсли;
	КонецЦикла;
	
	ЭлементНалогообложениеНДС.Видимость = (ЭлементНалогообложениеНДС.СписокВыбора.Количество() <> 1); 
	УчетНДСУПСлужебный.ОбновитьКэшированныеЗначенияПараметров("ПараметрыЗаполненияНалогообложенияНДСПродажи", ПараметрыЗаполнения, КэшированныеЗначенияПараметров);

КонецПроцедуры

// Устанавливает ограничения на типы запасов, которые можно продавать по указанному налогообложению
// 
// Параметры:
//   ОтборыВидовЗапасов - Структура - см. Справочники.ВидыЗапасов.ПараметрыОтбораВидовЗапасов
//   НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - налогообложение реализации
//
Процедура ПараметрыЗаполненияВидовЗапасовПоНалогообложению(ОтборыВидовЗапасов, Организация, Дата, НалогообложениеНДС = Неопределено) Экспорт
	
	УчетНДСЛокализация.ДополнитьПараметрыЗаполненияВидовЗапасовПоНалогообложению(ОтборыВидовЗапасов, Организация, Дата, НалогообложениеНДС);
	
КонецПроцедуры

// Устанавливаем условное оформление поля "Код ТН ВЭД" по налогообложению продажи.
//
// Параметры:
//  Форма - Форма - Содержит данную форму
//  ИмяТЧ - Строка - Наименование табличной части документа, если оно отличается от "Товары".
//                   В табличной части должно присутствовать поле ТипНоменклатуры.
//
Процедура УстановитьУсловноеОформлениеКодаТНВЭДПоНалогообложениюПродажи(Форма, ИмяТЧ = "Товары", ЕстьНоменклатура = Истина) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(
		Элемент.Поля,
		ЭлементыФормы[ИмяТЧ + "КодТНВЭД"].Имя);
	
	СписокНалогообложенийЭкспорта = Новый СписокЗначений();
	СписокНалогообложенийЭкспорта.ЗагрузитьЗначения(УчетНДСУПСлужебный.НалогообложенияНДСПродажиНаЭкспорт());
	
	Если ЕстьНоменклатура Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
			Элемент.Отбор,
			"Объект.НалогообложениеНДС",
			СписокНалогообложенийЭкспорта,
			ВидСравненияКомпоновкиДанных.НеВСписке);
	Иначе
		ГруппаОтбора = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
			Элемент.Отбор.Элементы,
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
		
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
			ГруппаОтбора, 
			"Объект.ХозяйственнаяОперация",
			Перечисления.ХозяйственныеОперации.РеализацияВнеоборотныхАктивов,
			ВидСравненияКомпоновкиДанных.НеРавно);
			
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
			ГруппаОтбора, 
			"Объект.НалогообложениеНДС",
			СписокНалогообложенийЭкспорта,
			ВидСравненияКомпоновкиДанных.НеВСписке);
	КонецЕсли;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	///////
	
	Если ЕстьНоменклатура Тогда
		
		СписокТиповНоменклатуры = Новый СписокЗначений();
		СписокТиповНоменклатуры.ЗагрузитьЗначения(УчетНДСУПСлужебный.ТипыНоменклатурыТовар());
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(
			Элемент.Поля,
			ЭлементыФормы[ИмяТЧ + "КодТНВЭД"].Имя);
		
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
			Элемент.Отбор,
			"Объект." + ИмяТЧ + ".ТипНоменклатуры",
			СписокТиповНоменклатуры,
			ВидСравненияКомпоновкиДанных.НеВСписке);
	
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<для товаров>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливаем условное оформление для ставки НДС, суммы НДС, суммы с НДС по налогообложению продажи.
//
// Параметры:
//  Форма - Форма - Содержит данную форму
//  ИмяПоляВводаСтавкиНДС - Строка - Наименование элемента формы, содержащего ставку НДС,
//                                   если оно отличается от "ТоварыСтавкаНДС"
//  ИмяПоляВводаСуммыНДС - Строка - Наименование элемента формы, содержащего сумму НДС,
//                                  если оно отличается от "ТоварыСуммаНДС"
//  ИмяПоляВводаСуммыСНДС - Строка - Наименование элемента формы, содержащего сумму с НДС,
//                                   если оно отличается от "ТоварыСуммаСНДС"
//
Процедура УстановитьУсловноеОформлениеСуммНДСПоНалогообложениюПродажи(Форма,
	                                          ИмяПоляВводаСтавкиНДС = "ТоварыСтавкаНДС",
	                                          ИмяПоляВводаСуммыНДС  = "ТоварыСуммаНДС",
	                                          ИмяПоляВводаСуммыСНДС = "ТоварыСуммаСНДС") Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаСтавкиНДС].Имя);

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаСуммыНДС].Имя);

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаСуммыСНДС].Имя);
	
	СписокНалогообложений = Новый СписокЗначений();
	СписокНалогообложений.ЗагрузитьЗначения(УчетНДСУПКлиентСервер.ТипыНалогообложенияСкрывающиеРеквизитыНДС());
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НалогообложениеНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокНалогообложений;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	УчетНДСЛокализация.ДополнитьУсловноеОформлениеСуммНДСПоНалогообложениюПродажи(Форма, ИмяПоляВводаСтавкиНДС, ИмяПоляВводаСуммыНДС, ИмяПоляВводаСуммыСНДС);
	
КонецПроцедуры

// Определяет вид деятельности раздельного учета НДС исходя из налогообложения НДС продажи.
//
// Параметры:
//	НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС
//
// Возвращаемое значение:
//	НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС
//
Функция ВидДеятельностиПоНалогообложениюНДС(НалогообложениеНДС) Экспорт
	
	ВидДеятельностиНДС = Неопределено;
	УчетНДСЛокализация.УстановитьВидДеятельностиПоНалогообложениюНДС(ВидДеятельностиНДС, НалогообложениеНДС);
	Если ВидДеятельностиНДС = Неопределено Тогда
		ВидДеятельностиНДС = НалогообложениеНДС;
	КонецЕсли;
	
	Возврат ВидДеятельностиНДС;
		
КонецФункции

// Возвращает текст запроса проверки корректности выбора номенклатуры по налогообложению НДС в документе продажи
//
// Параметры:
//	ПараметрыЗапроса - Структура - Параметры запроса контроля, который могут быть дополнены
//
// Возвращаемое значение:
// 	Строка - Текст запроса
//
Функция ТекстЗапросаКорректностьВыбораНоменклатурыПоНалогообложениюНДСПродажи(ПараметрыЗапроса) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ ИСТИНА КАК Результат;";
	УчетНДСЛокализация.ДополнитьТекстЗапросаКорректностьВыбораНоменклатурыПоНалогообложениюНДСПродажи(ТекстЗапроса, ПараметрыЗапроса);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Обрабатывает результат выполнения контроля корректности выбора номенклатуры по налогообложению НДС в документе продажи
//
// Параметры:
//	Выборка - ВыборкаИзРезультатаЗапроса - Результат запроса контроля
//	ДокументПродажи - ДокументСсылка - Документ, по которому выполнялся контроль
//	ИмяТЧ - Строка - Имя табличной части для формирования сообщения об ошибке
//	ПредставлениеТЧ - Строка - Представление табличной части для формирования сообщения об ошибке
//	Отказ - Булево - Флаг отказа, который надо установить в случае наличия проблем.
//
Процедура СообщитьОбОшибкахКорректностьВыбораНоменклатурыПоНалогообложениюНДСПродажи(Знач Выборка, Знач ДокументПродажи, Знач ИмяТЧ, Знач ПредставлениеТЧ, Отказ) Экспорт
	
	УчетНДСЛокализация.СообщитьОбОшибкахКорректностьВыбораНоменклатурыПоНалогообложениюНДСПродажи(Выборка, ДокументПродажи, ИмяТЧ, ПредставлениеТЧ, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеСчетовФактурВыданных

// Возвращает 
// - текст отображения счетов-фактур, зарегистрированных на основании документа продажи.
// - ссылки данные счета-фактуры.
//
// Параметры:
// 	ПараметрыРегистрации - Структура - См. УчетНДСУПКлиентСервер.ПараметрыРегистрацииСчетовФактурВыданных()
// 
// ВозвращаемоеЗначение:
// 	Результат - Структура - Структура с ключами
//		* Представление - Форматированная строка - Строка представления счетов-фактур в документе продажи.
// 		* СчетаФактуры - Массив - Массив счетов-фактур, зарегистрированных на основании документа продажи.
//
Функция СчетаФактурыВыданныеНаОсновании(ПараметрыРегистрации) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Представление", Новый ФорматированнаяСтрока(""));
	Результат.Вставить("СчетаФактуры",  Новый Массив);
	Результат.Вставить("ДокументПоОснованиюТребуется",  Ложь);
	Результат.Вставить("ЕстьПравоИнтерактивногоДобавленияДокументаПоОснованию",  Ложь);
	
	//++ Локализация
	Результат = УчетНДСРФ.СчетаФактурыВыданныеНаОсновании(ПараметрыРегистрации);
	//-- Локализация
	
	Возврат Результат;

КонецФункции

// Возвращает 
// - текст отображения счетов-фактур, зарегистрированных на основании документа продажи.
// - ссылки данные счета-фактуры.
//
// Параметры:
// 	ПараметрыРегистрацииВыданныхСФ - Структура - См. УчетНДСУПКлиентСервер.ПараметрыРегистрацииСчетовФактурВыданных()
// 	ПараметрыРегистрацииПолученныхСФ - Структура - См. УчетНДСУПКлиентСервер.ПараметрыРегистрацииСчетовФактурПолученных()
// 
// ВозвращаемоеЗначение:
// 	Результат - Структура - Структура с ключами
//		* Представление - Форматированная строка - Строка представления счетов-фактур в документе продажи.
// 		* СчетаФактуры - Массив - Массив счетов-фактур, зарегистрированных на основании документа продажи.
//
Функция СчетаФактурыОбщиеНаОсновании(ПараметрыРегистрацииВыданныхСФ, ПараметрыРегистрацииПолученныхСФ) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Представление", Новый ФорматированнаяСтрока(""));
	Результат.Вставить("СчетаФактуры",  Новый Массив);
	Результат.Вставить("ДокументПоОснованиюТребуется", Ложь);
	Результат.Вставить("ЕстьПравоИнтерактивногоДобавленияДокументаПоОснованию", Ложь);
	
	РезультатВыданные = СчетаФактурыВыданныеНаОсновании(ПараметрыРегистрацииВыданныхСФ);
	РезультатПолученные = СчетаФактурыПолученныеНаОсновании(ПараметрыРегистрацииПолученныхСФ);
	
	Результат.Представление = РезультатВыданные.Представление;
	Результат.ДокументПоОснованиюТребуется = РезультатВыданные.ДокументПоОснованиюТребуется;
	Результат.ЕстьПравоИнтерактивногоДобавленияДокументаПоОснованию = 
		РезультатВыданные.ЕстьПравоИнтерактивногоДобавленияДокументаПоОснованию;
	Если РезультатВыданные.СчетаФактуры.Количество() > 0 Тогда
		Результат.СчетаФактуры = РезультатВыданные.СчетаФактуры;
	ИначеЕсли РезультатПолученные.СчетаФактуры.Количество() > 0 Тогда
		Результат.СчетаФактуры = РезультатПолученные.СчетаФактуры;
		Результат.Представление = РезультатПолученные.Представление;
		Результат.ДокументПоОснованиюТребуется = РезультатПолученные.ДокументПоОснованиюТребуется;
		Результат.ЕстьПравоИнтерактивногоДобавленияДокументаПоОснованию = 
			РезультатПолученные.ЕстьПравоИнтерактивногоДобавленияДокументаПоОснованию;
	ИначеЕсли РезультатПолученные.ДокументПоОснованиюТребуется Тогда
		Результат.Представление = РезультатПолученные.Представление;
		Результат.ДокументПоОснованиюТребуется = РезультатПолученные.ДокументПоОснованиюТребуется;
		Результат.ЕстьПравоИнтерактивногоДобавленияДокументаПоОснованию = 
			РезультатПолученные.ЕстьПравоИнтерактивногоДобавленияДокументаПоОснованию;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Вызывается в обработчике ПередЗаписью() документа продажи.
// Отменяет проведение счетов-фактур, если отменяется проведение документа продажи или его реквизиты не соответствуют параметрам регистрации.
// Помечает на удаление счета-фактуры, если документ продажи помечается на удаление.
//
// Параметры:
// 	ПараметрыРегистрации - Структура - См. УчетНДСУПКлиентСевер.ПараметрыРегистрацииСчетовФактурВыданных().
// 	РежимЗаписи - РежимЗаписиДокумента - Режим записи документа.
// 	ПометкаУдаления - Булево - Пометка удаления документа продажи.
// 	Проведен - Булево - Пометка проведения документа.
//
Процедура АктуализироватьСчетаФактурыВыданныеПередЗаписью(ПараметрыРегистрации, Знач РежимЗаписи, Знач ПометкаУдаления, Знач Проведен) Экспорт
	
	//++ Локализация
	УчетНДСРФ.АктуализироватьСчетаФактурыВыданныеПередЗаписью(ПараметрыРегистрации, РежимЗаписи, ПометкаУдаления, Проведен);
	//-- Локализация
	
КонецПроцедуры

// Вызывается в обработчике ОбработкаПроведения() документа продажи.
// Выполняет проведение счетов-фактур по данным документа продажи.
//
// Параметры:
// 	ПараметрыРегистрации - Структура - См. УчетНДСУПКлиентСевер.ПараметрыРегистрацииСчетовФактурВыданных().
//
Процедура АктуализироватьСчетаФактурыВыданныеПриПроведении(ПараметрыРегистрации) Экспорт
	
	//++ Локализация
	УчетНДСРФ.АктуализироватьСчетаФактурыВыданныеПриПроведении(ПараметрыРегистрации);
	//-- Локализация
	
КонецПроцедуры

// Вызывается в обработчике ОбработкаУдаленияПроведения() документа продажи после записи движений.
//
// Параметры:
// 	ПараметрыРегистрации - Структура - См. УчетНДСУПКлиентСевер.ПараметрыРегистрацииСчетовФактурВыданных().
//
Процедура АктуализироватьСчетаФактурыВыданныеПриУдаленииПроведения(ПараметрыРегистрации) Экспорт
	
	//++ Локализация
	УчетНДСРФ.АктуализироватьСчетаФактурыВыданныеПриУдаленииПроведения(ПараметрыРегистрации);
	//-- Локализация
	
КонецПроцедуры

// Возвращает счета-фактуры выданные, сформированные на основании документов продажи.
//
// Параметры:
// 	ДокументыОснования - ДокументСсылка, Массив - Документ или массив документов-оснований счетов-фактур выданных.
// 	ТолькоПроведенные - Булево - Признак того, что нужно вернуть только проведенные счета-фактуры.
//
// Возвращаемое значение:
// 	СчетаФактуры - ТаблицаЗначений - Таблица счетов-фактур зарегистрированных на основании, содержащая колонки
// 	                   * ДокументОснование - ДокументСсылка - Ссылка на документ-основание, у которого есть счет-фактура.
// 	                   * Ссылка - ДокументСсылка.СчетФактураВыданный - Ссылка на счет-фактуру.
// 	                   * Корректировочный - Булево - признак Корректировочный счета-фактуры.
// 	                   * Исправление - Булево - признак Исправление счета-фактуры.
//
Функция СчетаФактурыВыданныеПоДокументамОснованиям(ДокументыОснования, ТолькоПроведенные = Истина) Экспорт
	
	СчетаФактуры = Новый ТаблицаЗначений();
	СчетаФактуры.Колонки.Добавить("ДокументОснование");
	СчетаФактуры.Колонки.Добавить("Ссылка");
	СчетаФактуры.Колонки.Добавить("РучнаяКорректировкаСуммДокумента", Новый ОписаниеТипов("Булево"));
	
	//++ Локализация
	СчетаФактуры = УчетНДСРФ.СчетаФактурыВыданныеПоДокументамОснованиям(ДокументыОснования, ТолькоПроведенные);
	//-- Локализация
	
	Возврат СчетаФактуры;

КонецФункции

// Возвращает полное наименование документа СчетФактураВыданный
//
Функция ПолноеИмяСчетФактурыВыданный() Экспорт
	
	Результат = Неопределено;
	//++ Локализация
	Результат = "Документ.СчетФактураВыданный";
	//-- Локализация
	Возврат Результат;
	
КонецФункции

// Заполняет Счет-фактуру выданный по переданным параметрам регистрации, выполняет проведение документа.
// Если провести документ не удалось, то выполняет запись документа.
//
// Параметры:
//  СчетФактура - ДокументОбъект.СчетФактураВыданный, ДокументСсылка.СчетФактураВыданный - объект или ссылка счет-фактуры выданный
//  ПараметрыРегистрации - Структура - Значения реквизитов счет-фактуры. см. УчетНДСУПКлиентСервер.ПараметрыРегистрацииСчетовФактурВыданных()
//
// Возвращаемое значение:
// 	Результат - Структура - Возвращается
// 					* Проведен - Булево - Если удалось провести документ, то Истина. Иначе - Ложь.
// 					* СообщениеОбОшибке - Строка - Сообщение об ошибке, если документ провести не удалось.
//
Функция ЗаполнитьСчетФактураВыданный(СчетФактура, ПараметрыРегистрации) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Проведен", Истина);
	Результат.Вставить("СообщениеОбОшибке", "");
	
	//++ Локализация
	Результат = УчетНДСРФ.ЗаполнитьСчетФактураВыданный(СчетФактура, ПараметрыРегистрации);
	//-- Локализация
	
	Возврат Результат;
	
КонецФункции

// Формирует исправительные счета-фактуры выданные по измененным документам-основаниям.
//
// Параметры:
//  ТаблицаИзмененныхДокументов	 - ТаблицаЗначений	 - Измененные документы продажи и их реквизиты.
//  	Колонки таблицы:
//  	* Документ - ОписаниеТипов.ОснованиеСчетФактураВыданный - Документ-основание.
//  	* Организация - СправочникСсылка.Организация - Организация документа-основания.
//  	* Дата - Дата - Дата документа-основания.
//  	* Ответственный - СправочникСсылка.Пользователи - Ответственный за документ-основание.
// 
// Возвращаемое значение:
//  Массив - Массив документов типа ДокументСсылка
//
Функция СформироватьИсправительныеСчетаФактурыПоИзмененнымДокументам(ТаблицаИзмененныхДокументов) Экспорт
	
	СформированныеДокументы = Новый Массив;
	
	//++ Локализация
	СформированныеДокументы = УчетНДСРФ.СформироватьИсправительныеСчетаФактурыПоИзмененнымДокументам(ТаблицаИзмененныхДокументов);
	//-- Локализация
	
	Возврат СформированныеДокументы;
	
КонецФункции

#КонецОбласти

#Область ФормированиеСчетовФактурКомиссионеру
	
// Возвращает 
// - текст отображения счетов-фактур, зарегистрированных на основании отчета по комиссии.
// - ссылки данные счета-фактуры.
//
// Параметры:
// 	ПараметрыРегистрации - Структура - См. УчетНДСУПКлиентСервер.ПараметрыРегистрацииСчетовФактурКомиссионеру()
// 
// ВозвращаемоеЗначение:
// 	Результат - Структура - Структура с ключами
//		* Представление - Форматированная строка - Строка представления счетов-фактур в отчета комиссионеру.
// 		* СчетаФактуры - Массив - Массив счетов-фактур, зарегистрированных на основании отчета комиссионера.
//
Функция СчетаФактурыКомиссионеруНаОсновании(ПараметрыРегистрации) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Представление", Новый ФорматированнаяСтрока(""));
	Результат.Вставить("СчетаФактуры",  Новый Массив);
	
	//++ Локализация
	Результат = УчетНДСРФ.СчетаФактурыКомиссионеруНаОсновании(ПараметрыРегистрации);
	//-- Локализация
	
	Возврат Результат;
	
КонецФункции

// Вызывается в обработчике ПередЗаписью() отчета комиссионера.
// Отменяет проведение счетов-фактур, если отменяется проведение отчета комиссионера или его реквизиты не соответствуют параметрам регистрации.
// Помечает на удаление счета-фактуры, если помечается на удаление отчет комиссионера.
//
// Параметры:
// 	ПараметрыРегистрации - Структура - См. УчетНДСУПКлиентСевер.ПараметрыРегистрацииСчетовФактурКомиссионеру()
// 	РежимЗаписи - РежимЗаписиДокумента - Режим записи документа
// 	ПометкаУдаления - Булево - Пометка удаления отчета комиссионера.
// 	Проведен - Булево - Пометка проведения документа.
//
Процедура АктуализироватьСчетаФактурыКомиссионеруПередЗаписью(ПараметрыРегистрации, Знач РежимЗаписи, Знач ПометкаУдаления, Знач Проведен) Экспорт
	
	//++ Локализация
	УчетНДСРФ.АктуализироватьСчетаФактурыКомиссионеруПередЗаписью(ПараметрыРегистрации, РежимЗаписи, ПометкаУдаления, Проведен);
	//-- Локализация
	
КонецПроцедуры

// Вызывается в обработчике ОбработкаПроведения() отчета комиссионера.
// Выполняет проведение счетов-фактур по данным отчета комиссионера.
//
// Параметры:
// 	ПараметрыРегистрации - Структура - См. УчетНДСУПКлиентСевер.ПараметрыРегистрацииСчетовФактурКомиссионеру()
//
Процедура АктуализироватьСчетаФактурыКомиссионеруПриПроведении(ПараметрыРегистрации) Экспорт
	
	//++ Локализация
	УчетНДСРФ.АктуализироватьСчетаФактурыКомиссионеруПриПроведении(ПараметрыРегистрации);
	//-- Локализация
	
КонецПроцедуры

// Вызывается в обработчике ОбработкаУдаленияПроведения() отчета комиссионера после записи движений.
// Выполняет обновление распоряжений на оформление счетов-фактур комиссионеру. 
//
// Параметры:
// 	ПараметрыРегистрации - Структура - См. УчетНДСУПКлиентСевер.ПараметрыРегистрацииСчетовФактурКомиссионеру()
//
Процедура АктуализироватьСчетаФактурыКомиссионеруПриУдаленииПроведения(ПараметрыРегистрации) Экспорт
	
	//++ Локализация
	УчетНДСРФ.АктуализироватьСчетаФактурыКомиссионеруПриУдаленииПроведения(ПараметрыРегистрации);
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область РегистрацияСчетовФактурКомитента

// Вызывается в обработчике ОбработкаПроведения() отчета комитенту.
// Выполняет обновление распоряжений на регистрацию счетов-фактур комитента. 
//
// Параметры:
// 	СчетаФактурыВыданныеПокупателям - Массив - Счета-фактуры, выданные покупателям, параметры которых сообщили комитенту.
//
Процедура АктуализироватьСчетаФактурыКомитентаПриПроведении(СчетаФактурыВыданныеПокупателям) Экспорт
	
	//++ Локализация
	УчетНДСРФ.АктуализироватьСчетаФактурыКомитентаПриПроведении(СчетаФактурыВыданныеПокупателям);
	//-- Локализация
	
КонецПроцедуры

// Вызывается в обработчике ОбработкаУдаленияПроведения() отчета комитента после вызова записи движений.
// Выполняет обновление распоряжений на регистрацию счетов-фактур комитента. 
//
// Параметры:
// 	СчетаФактурыВыданныеПокупателям - Массив - Счета-фактуры, выданные покупателям, параметры которых сообщили комитенту.
//
Процедура АктуализироватьСчетаФактурыКомитентаПриУдаленииПроведения(СчетаФактурыВыданныеПокупателям) Экспорт
	
	//++ Локализация
	УчетНДСРФ.АктуализироватьСчетаФактурыКомитентаПриУдаленииПроведения(СчетаФактурыВыданныеПокупателям);
	//-- Локализация
	
КонецПроцедуры

// Дополняет временную таблицу товаров к оформлению отчета комитенту колонкой "СчетФактура".
// Данная колонка заполняется подобранными по параметрам счетами-фактурами, выданным покупателю комиссионных товаров.
// Исходная временная таблица должна содержать колонки, по которым осуществляется подбор счетов-фактур:
// 	* Покупатель - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Покупатель комиссионных товаров.
// 	* ДокументРеализации - ДокументСсылка - Документ реализации комиссионных товаров.
// 	* ДатаСчетаФактуры - Дата - Дата выставления счета-фактуры.
// 	* НомерСчетаФактуры - Строка - Номер счета-фактуры. 
//
// Параметры:
// 	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц, содержащий таблицу товаров к оформлению.
// 	ИмяТаблицы - Строка - Имя временной таблицы товаров к оформлению отчета комитенту.
//
Процедура ДополнитьТаблицуДаннымиСчетовФактурВыданныхПокупателям(МенеджерВременныхТаблиц, ИмяТаблицы) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&ПоляТаблицы,
	|	ИмяТаблицы.Покупатель КАК Покупатель,
	|	ИмяТаблицы.ДокументРеализации КАК ДокументРеализации,
	|	ИмяТаблицы.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
	|	ИмяТаблицы.НомерСчетаФактуры КАК НомерСчетаФактуры,
	|	""""  КАК СчетФактура
	|ПОМЕСТИТЬ ИмяТаблицыПредварительная
	|ИЗ
	|	ИмяТаблицы КАК ИмяТаблицы
	|;
	|
	|/////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИмяТаблицы
	|;
	|
	|/////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ИмяТаблицы
	|ИЗ
	|	ИмяТаблицыПредварительная";
	//++ Локализация
	ТекстЗапроса = УчетНДСРФ.ТекстЗапросаСчетовФактурВыданныхПокупателямДляОтчетаКомитенту();
	//-- Локализация
	
	ВременнаяТаблица = МенеджерВременныхТаблиц.Таблицы.Найти(ИмяТаблицы);
	ПоляВыборки = Новый Массив;
	Для каждого Колонка Из ВременнаяТаблица.Колонки Цикл
		Если Колонка.Имя <>"Покупатель"
				И Колонка.Имя <>"ДокументРеализации"
				И Колонка.Имя <>"ДатаСчетаФактуры"
				И Колонка.Имя <>"НомерСчетаФактуры" Тогда
			ПолеВыборки = СтрШаблон("	%1.%2 КАК %2", ИмяТаблицы, Колонка.Имя);
			ПоляВыборки.Добавить(ПолеВыборки);
		КонецЕсли;
	КонецЦикла;
	Разделитель = ",
		|";
	СтрокаПоляВыборки = СтрСоединить(ПоляВыборки, Разделитель);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляТаблицы", СтрокаПоляВыборки);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицы", ИмяТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПеречислениеНДСВБюджетПоОтдельнымОперациям

// Возвращает пустую таблицу счетов-фактур для регистрации действий по оплате НДС в бюджет.
//
// Возвращаемое значение:
// 	ТаблицаЗначений - таблица с колонками:
//		* СчетФактура - ДокументСсылка - Документ, требующий оплаты НДС
//		* СуммаОплаты - Число - Сумма НДС к оплате
//		Могут быть добавленные доп. колонки.
//
Функция НоваяТаблицаСчетовФактур() Экспорт
	
	СчетаФактуры = Новый ТаблицаЗначений;
	// Общие свойства.
	СчетаФактуры.Колонки.Добавить("СчетФактура", Документы.ТипВсеСсылки());
	СчетаФактуры.Колонки.Добавить("СуммаОплаты", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	//++ Локализация
	СчетаФактуры.Колонки.Добавить("ВидАгентскогоДоговора", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыАгентскихДоговоров"));
	СчетаФактуры.Колонки.Добавить("ОплатаЧерезЕдиныйЛицевойСчет", Новый ОписаниеТипов("Булево"));
	//-- Локализация
	
	Возврат СчетаФактуры;
	
КонецФункции

// Регистрирует документы начисления НДС к оплате.
// При этом формируются записи регистра ПодтверждениеОплатыНДСВБюджет с состоянием ОжидаетОплаты.
// Параметры:
// 	СчетаФактуры - ТаблицаЗначений - Таблица сумм НДС к оплате по счетам-фактурам.	
// 	Колонки таблицы:
//			* СчетФактура - Документ, требующий оплаты НДС
//			* СуммаОплаты - Сумма НДС к оплате
//			* ВидАгентскогоДоговора - ПеречислениеСсылка.ВидыАгентскихДоговоров - для счетов-фактур налогового агента 
// 	ДокументРегистратор - ДокументСсылка - Документ-регистратор операции.
// 	Проведен - Булево - Признак проведения документа-регистратора.
Процедура ЗарегистрироватьСчетаФактурыОжидаетОплатыНДС(СчетаФактуры, ДокументРегистратор, Проведен) Экспорт

	//++ Локализация
	УчетНДСРФ.ЗарегистрироватьСчетаФактурыОжидаетОплатыНДС(СчетаФактуры, ДокументРегистратор, Проведен);
	//-- Локализация

КонецПроцедуры

// Регистрирует запланированную оплату НДС по документам.
// При этом в записи регистра ПодтверждениеОплатыНДСВБюджет с состоянием ОжидаетОплаты добавляется ссылка на заявку.
// Параметры:
// 	СчетаФактуры - ТаблицаЗначений - Таблица сумм НДС к оплате по счетам-фактурам.	
// 	Колонки таблицы:
//			* СчетФактура - Документ, требующий оплаты НДС
//			* СуммаОплаты - Сумма НДС к оплате
// 	ТипНалога - ПеречислениеСсылка.ТипыНалогов - тип уплачиваемого налога (налоговый агент, ввоз из ЕАЭС и т.п.)
// 	ДокументРегистратор - ДокументСсылка - Документ-регистратор операции.
// 	Проведен - Булево - Признак проведения документа-регистратора.
Процедура ЗарегистрироватьПланированиеОплатыНДСПоСчетамФактурам(СчетаФактуры, ТипНалога, ДокументРегистратор, Проведен) Экспорт

	//++ Локализация
	УчетНДСРФ.ЗарегистрироватьПланированиеОплатыНДСПоСчетамФактурам(СчетаФактуры, ТипНалога, ДокументРегистратор, Проведен);
	//-- Локализация

КонецПроцедуры

// Регистрирует фактическую оплату НДС по документам.
// При этом формируются записи регистра ПодтверждениеОплатыНДСВБюджет с состояние Оплачено.
// Параметры:
// 	СчетаФактуры - ТаблицаЗначений - Таблица сумм НДС к оплате по счетам-фактурам.	
// 	Колонки таблицы:
//			* СчетФактура - Документ, требующий оплаты НДС
//			* СуммаОплаты - Сумма НДС к оплате
// 	ДокументРегистратор - ДокументСсылка - Документ-регистратор операции.
// 	РеквизитыДокументаОплаты - Структура - Структура реквизитов документа оплаты 
// 	Состав полей:
// 			* ДатаПеречисленияВБюджет - Дата - дата фактического перечисления НДС в бюджет.
// 			* ТипНалога - ПеречислениеСсылка.ТипыНалогов - тип уплачиваемого налога (налоговый агент, ввоз из ЕАЭС и т.п.)
//			* НомерДокумента - Строка - номер документа перечисления налога
//			* ДатаДокумента - Дата - дата документа перечисления налога
// 	Проведен - Булево - Признак проведения документа-регистратора.
Процедура ЗарегистрироватьОплатуНДСПоСчетамФактурам(СчетаФактуры, ДокументРегистратор, РеквизитыДокументаОплаты, Проведен) Экспорт

	//++ Локализация
	УчетНДСРФ.ЗарегистрироватьОплатуНДСПоСчетамФактурам(СчетаФактуры, ДокументРегистратор, РеквизитыДокументаОплаты, Проведен);
	//-- Локализация

КонецПроцедуры

// Обновляет заголовок команды просмотра состояния оплаты НДС по документу при возникновении 
// события ИзменениеСостоянияОплатыНДСПоСчетуФактуре.
// 
// Параметры:
// 	СчетФактура - ОпределяемыйТип.СчетФактура - Документ, требующий оплаты НДС.
// 	КомандаСостояния - КнопкаФормы - Элемент команды просмотра состояния.
// 	ОплатаЧерезЕдиныйЛицевойСчет - Булева - признак оплаты таможенных платежей через единый лицевой счет
Процедура УстановитьЗаголовокСостоянияОплатыНДСПоСчетуФактуре(СчетФактура, КомандаСостояния, ОплатаЧерезЕдиныйЛицевойСчет = Ложь) Экспорт
	
	Заголовок = Неопределено;
	//++ Локализация
	УчетНДСРФ.ПолучитьЗаголовокСостоянияОплатыНДСПоСчетуФактуре(Заголовок, СчетФактура);
	//-- Локализация
	
	Если Заголовок = Неопределено Или ОплатаЧерезЕдиныйЛицевойСчет Тогда
		КомандаСостояния.Видимость = Ложь;
	Иначе
		КомандаСостояния.Видимость = Истина;
		КомандаСостояния.Заголовок = Заголовок;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Проведение

// Процедура формирования движений по регистрам учета НДС
//
// Параметры:
//	ДополнительныеСвойства - Структура - дополнительные значения, связанные с документом.
//	Движения - КоллекцияДвижений,Структура - коллекция наборов записей движений документа.
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура СформироватьДвиженияВРегистры(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	//++ Локализация
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
#Область НДСЗаписиКнигиПродаж
	
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаНДСЗаписиКнигиПродаж") Тогда
		
		ТаблицаДвижений = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНДСЗаписиКнигиПродаж;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Движения, "НДСЗаписиКнигиПродаж")
			 ИЛИ ТаблицаДвижений.Количество() > 0 Тогда
			Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;
			Движения.НДСЗаписиКнигиПродаж.Загрузить(ТаблицаДвижений);
			Движения.НДСЗаписиКнигиПродаж.УстановитьАктивность(Истина);
		КонецЕсли;
	
	КонецЕсли;
	
#КонецОбласти

#Область НДСЗаписиКнигиПокупок
	
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаНДСЗаписиКнигиПокупок") Тогда
		
		ТаблицаДвижений = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНДСЗаписиКнигиПокупок;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Движения, "НДСЗаписиКнигиПокупок")
			 ИЛИ ТаблицаДвижений.Количество() > 0 Тогда
			Движения.НДСЗаписиКнигиПокупок.Записывать = Истина;
			Движения.НДСЗаписиКнигиПокупок.Загрузить(ТаблицаДвижений);
			Движения.НДСЗаписиКнигиПокупок.УстановитьАктивность(Истина);
		КонецЕсли;
	КонецЕсли;
	
#КонецОбласти

#Область НДСПредъявленный
	
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаНДСПредъявленный") Тогда
		
		ТаблицаДвижений = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНДСПредъявленный;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Движения, "НДСПредъявленный")
			 ИЛИ ТаблицаДвижений.Количество() > 0 Тогда
			Движения.НДСПредъявленный.Записывать = Истина;
			Движения.НДСПредъявленный.Загрузить(ТаблицаДвижений);
			Движения.НДСПредъявленный.УстановитьАктивность(Истина);
		КонецЕсли;
		
	КонецЕсли;
	
#КонецОбласти

#Область ЖурналУчетаСчетовФактур
	
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаЖурналУчетаСчетовФактур") Тогда
		
		ТаблицаДвижений = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЖурналУчетаСчетовФактур;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Движения, "ЖурналУчетаСчетовФактур")
			 ИЛИ ТаблицаДвижений.Количество() > 0 Тогда
			Движения.ЖурналУчетаСчетовФактур.Записывать = Истина;
			Движения.ЖурналУчетаСчетовФактур.Загрузить(ТаблицаДвижений);
		КонецЕсли;
		
	КонецЕсли;
	
#КонецОбласти

#Область НДССостояниеРеализации0
	
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаНДССостояниеРеализации0") Тогда
		
		ТаблицаДвижений = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНДССостояниеРеализации0;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Движения, "НДССостояниеРеализации0")
			 ИЛИ ТаблицаДвижений.Количество() > 0 Тогда
			Движения.НДССостояниеРеализации0.Записывать = Истина;
			Движения.НДССостояниеРеализации0.Загрузить(ТаблицаДвижений);
		КонецЕсли;
		
	КонецЕсли;
	
#КонецОбласти

#Область ДанныеОснованийСчетовФактур
	
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаДанныеОснованийСчетовФактур") Тогда
	
		ТаблицаДвижений = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДанныеОснованийСчетовФактур;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Движения, "ДанныеОснованийСчетовФактур")
			 ИЛИ ТаблицаДвижений.Количество() > 0 Тогда
			Движения.ДанныеОснованийСчетовФактур.Записывать = Истина;
			Движения.ДанныеОснованийСчетовФактур.Загрузить(ТаблицаДвижений);
		КонецЕсли;
	
	КонецЕсли;
	
#КонецОбласти
	
#Область ТоварыКОформлениюЗаявленийОВвозе

	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаТоварыКОформлениюЗаявленийОВвозе") Тогда
	
		ТаблицаДвижений = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТоварыКОформлениюЗаявленийОВвозе;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Движения, "ТоварыКОформлениюЗаявленийОВвозе")
			 ИЛИ ТаблицаДвижений.Количество() > 0 Тогда
			Движения.ТоварыКОформлениюЗаявленийОВвозе.Записывать = Истина;
			Движения.ТоварыКОформлениюЗаявленийОВвозе.Загрузить(ТаблицаДвижений);
		КонецЕсли;
	КонецЕсли;
	
#КонецОбласти
	
#Область ПартииНДСКРаспределению

	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаПартииНДСКРаспределению") Тогда
	
		ТаблицаДвижений = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПартииНДСКРаспределению;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Движения, "ПартииНДСКРаспределению")
			 ИЛИ ТаблицаДвижений.Количество() > 0 Тогда
			Движения.ПартииНДСКРаспределению.Записывать = Истина;
			Движения.ПартииНДСКРаспределению.Загрузить(ТаблицаДвижений);
		КонецЕсли;
	КонецЕсли;
	
#КонецОбласти
	
	//-- Локализация
	
КонецПроцедуры

// Дополняет тексты запроса проведения документа текстами отражения остатков собственных товаров в учете входящего НДС.
// Операция формирует движения по регистрам НДСПредъявленный, ДанныеОснованийСчетовФактур.
//
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстТовары - Строка - Текст запроса получения данных документа приобретения.
// 	     [Реквизиты ввода остатки товаров]
// 	     * Период - Дата - Дата отражения ввода остатков.
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	     * ВводОстатков22 - Булево - Признак того, что документ создан на версии 2.2 или ранее.
// 	     * Организация - СправочникСсылка.Организации - Организация, в которой вводятся остатки товаров.
// 	     * Подразделение - СправочникСсылка.СтруктураПредприятия - Подразделение, в которое вводятся остатки товаров.
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Поставщик товаров.
// 	     * ПартияПриобретенияТоваров - ОпределяемыйТип.СчетаФактуры - Ссылка на документ-партию приобретения товаров.
// 	     * ВидДеятельностиНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Вид деятельности раздельного учета НДС под который вводятся остатки товаров.
// 	     [Сведения об остатках товаров]
// 	     * Номенклатура - СправочникСсылка.Номенклатура - Товар.
// 	     * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика товара.
// 	     * СтавкаНДС - ПеречислениеСсылка.СтавкиНДС - Ставка НДС товара.
// 	     * ВидЗапасов - СправочникСсылка.ВидыЗапасов - Вид запасов остатков товара.
// 	     * НомерГТД - СправочникСсылка.НомераГТД - Номер ГТД, по которой ввозился товар.
// 	     * СуммаБезНДСРегл - Число - Сумма без НДС остатка товара в валюте регл. учета.
// 	     * СуммаНДСРегл - Число - Сумма НДС остатка товара в валюте регл. учета. 
// 	     * СуммаНДСУпр - Число - Сумма НДС остатка товара в валюте упр. учета.
// 	     * ИдентификаторСтроки - Строка, УникальныйИдентификатор - Идентификатор строки документа ввода остатков.
//
Процедура ОтразитьВводОстатковСобственныхТоваров(Запрос, ТекстыЗапроса, Регистры, ТекстТовары) Экспорт
	
	#Область НДСПредъявленный
	
	Запрос.УстановитьПараметр("УправленческийУчетОрганизацийВключен", РасчетСебестоимостиПовтИсп.УправленческийУчетОрганизаций());
	Запрос.УстановитьПараметр("ДатаНачалаВеденияУправленческогоУчетаОрганизаций", РасчетСебестоимостиПовтИсп.ДатаНачалаВеденияУправленческогоУчетаОрганизаций());

	ТекстЗапросаНДСПредъявленный = 
	"ВЫБРАТЬ
	|	Товары.Ссылка КАК Регистратор,
	|	Товары.Период КАК Период,
	|	Товары.Организация КАК Организация,
	|	Товары.ПартияПриобретенияТоваров КАК СчетФактура,
	|	Товары.Контрагент КАК Поставщик,
	|	ЕСТЬNULL(СпрНоменклатура.ГруппаФинансовогоУчета.ВидЦенностиНДС,
	|							ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Товары)) КАК ВидЦенности,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО КАК ИсправленныйСчетФактура,
	|	НЕОПРЕДЕЛЕНО КАК РеализацияЭкспорт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|
	|	Товары.СуммаБезНДСРегл КАК СуммаБезНДС,
	|	Товары.СуммаНДСРегл    КАК НДС,
	|	ВЫБОР
	|		КОГДА &УправленческийУчетОрганизацийВключен
	|			И Товары.Период >= &ДатаНачалаВеденияУправленческогоУчетаОрганизаций
	|			ТОГДА Товары.СуммаНДСУпр
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НДСУпр,
	|
	|	ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.ПустаяСсылка) КАК Событие,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК КорВидДеятельностиНДС,
	|	Товары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ЛОЖЬ КАК РегламентнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК КорНаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка) КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаРасходов
	|ИЗ
	|	#Товары КАК Товары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Номенклатура КАК СпрНоменклатура
	|	ПО
	|		Товары.Номенклатура = СпрНоменклатура.Ссылка
	|ГДЕ
	|	Товары.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	И ((&ВводОстатков22 И Товары.ВидДеятельностиНДС В (
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ВводОСВЭксплуатацию)))
	|	   ИЛИ Товары.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПоФактическомуИспользованию))
	|";
	
	#КонецОбласти

	ТекстЗапросаНДСПредъявленный = СтрЗаменить(ТекстЗапросаНДСПредъявленный, "&ВводОстатков22", "Товары.ВводОстатков22");

	ТекстыШаблоновОтражения = Новый Структура();
	Если ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений("НДСПредъявленный", Регистры) Тогда
		ТекстыШаблоновОтражения.Вставить("НДСПредъявленный", ТекстЗапросаНДСПредъявленный);
	КонецЕсли;
	
	ТекстыЗапросовДанныхДокумента = Новый Структура("Товары", ТекстТовары);
	ПроведениеСерверУТ.ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента);
	
	УчетНДСЛокализация.ОтразитьВводОстатковСобственныхТоваров(Запрос, ТекстыЗапроса, Регистры, ТекстТовары);
	
КонецПроцедуры

// Дополняет тексты запроса проведения документа текстами отражения приобретения товаров, работ, услуг, прочих активов в учете входящего НДС.
// Операция формирует движения по регистрам НДСПредъявленный, ПартииНДСКРаспределению (в случае если НДС подлежит распределению по базе), ДанныеОснованийСчетовФактур.
// 
// В модуле менеджера документа должна быть реализована экспортная процедура  ИнициализироватьВтСуммыДокументовВВалютахУчета(Запрос, ТекстыЗапросов),
// которая дополняет запрос отражения текстом инициализации ВтСуммыДокументовВВалютахУчета (См. РегистрыСведений.СуммыДокументовВВалютеРегл.ИнициализироватьВтСуммыДокументовВВалютахУчета()).
// 
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстЦенности - Строка - Текст запроса получения данных документа приобретения.
// 	     Запрос должен возвращать выборку с полями
// 	     [Реквизиты операции]
// 	     * Период - Дата - Дата отражения операции.
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	     * Организация - СправочникСсылка.Организации - Организация, в которой отражается приобретение.
// 	     * Подразделение - СправочникСсылка.СтруктураПредприятия - Подразделение, от имени которого регистрируется документ приобретения.
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Поставщик ценностей.
// 	     * Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор приобретения ценностей.
// 	     * Грузоотправитель - СправочникСсылка.Контрагенты - Грузоотправитель ценностей.
// 	     * ДокументПриобретения - ОпределяемыйТип.СчетаФактуры - Ссылка на документ приобретения.
// 	     * ИсправлениеОшибок - Булево - Признак того, что выполняется исправление документа приобретения.
// 	     * КорректировкаПоСогласованиюСторон - Булево - Признак того, что выполняется корректировка документа приобретения по соглашению сторон.
// 	     * ДокументКорректировкиПриобретения - ДокументСсылка.КорректировкаПриобретения - Ссылка на документ корректировки приобретения. 
// 	                                           Заполняется если ИсправлениеОшибок или КорректировкаПоСогласованиюСторон.
// 	     * НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Налогообложение НДС документа приобретения.
// 	     * ВидДеятельностиНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Вид деятельности раздельного учета НДС документа приобретения.
// 	                            Определяет порядок учета входящего НДС, если не удалось определить по Назначению или по Статье расходов.
// 	     [Приобретаемые товары]
// 	     * Номенклатура - СправочникСсылка.Номенклатура - Приобретаемый товар, работа или услуга.
// 	     * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика приобретаемого товара, работы или услуги.
// 	     * СтавкаНДС - ПеречислениеСсылка.СтавкиНДС - Ставка НДС приобретаемых ценностей.
// 	     * ВидЗапасов - СправочникСсылка.ВидыЗапасов - Вид запасов приобретаемых товаров.
// 	     * НомерГТД - СправочникСсылка.НомераГТД - Номер ГТД, по которой ввозился приобретаемый товар.
// 	     * ИдентификаторСтроки - Строка, УникальныйИдентификатор - Идентификатор строки документа приобретения для получения 
// 	                                                              сумм документа в валюте управленческого или регламентированного учета.
// 	     [Аналитика учета приобретаемых товаров, работ, услуг, прочих активов]
// 	     * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности, под которое отражается приобретение.
// 	     * СтатьяРасходов - ПланВидовХарактеристикСсылка.СтатьиРасходов - Статья расходов, на которую списываются приобретаемые ценности.
// 	     * АналитикаРасходов - Характеристика.СтатьиРасходов - Аналитика отражения расходов.
// 	     * СтатьяПрочихАктивов - ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов - Статья отражения приобретения прочего актива.
// 	     * АналитикаПрочихАктивов - Характеристика.СтатьиАктивовПассивов - Аналитика отражения прочего актива.
// 	     * Назначение - СправочникСсылка.Назначения - В случае приобретения под обособленную потребность определяет вид деятельности раздельного учета НДС.
// 	     * ПодразделениеУчета - СправочникСсылка.СтруктураПредприятия - Подразделение, в котором учитываются приобретаемые товары, работы услуги, активы.
//
Процедура ОтразитьПриобретениеУПоставщика(Запрос, ТекстыЗапроса, Регистры, ТекстЦенности) Экспорт
	
	Запрос.УстановитьПараметр("ТипыНалогообложенияНДСУчитываетсяВСтоимости", ВидыДеятельностиНДСУчитываетсяВСтоимости());
	Запрос.УстановитьПараметр("ТипыНоменклатурыТовар", УчетНДСУПСлужебный.ТипыНоменклатурыТовар());
	Запрос.УстановитьПараметр("ДатаНачалаУчетаНДСПоНаправлениямДеятельности", НастройкиУчета().ДатаНачалаУчетаНДСПоНаправлениямДеятельности);
	Запрос.УстановитьПараметр("УправленческийУчетОрганизацийВключен", РасчетСебестоимостиПовтИсп.УправленческийУчетОрганизаций());
	Запрос.УстановитьПараметр("ДатаНачалаВеденияУправленческогоУчетаОрганизаций", РасчетСебестоимостиПовтИсп.ДатаНачалаВеденияУправленческогоУчетаОрганизаций());
	
#Область НДСПредъявленный
	
	ТекстЗапросаНДСПредъявленный = 
	"ВЫБРАТЬ
	|	Ценности.Ссылка КАК Регистратор,
	|	Ценности.Период КАК Период,
	|	Ценности.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА Ценности.КорректировкаПоСогласованиюСторон
	|			ТОГДА Ценности.ДокументКорректировкиПриобретения
	|		ИНАЧЕ Ценности.ДокументПриобретения
	|	КОНЕЦ КАК СчетФактура,
	|	Ценности.Контрагент КАК Поставщик,
	|	ВЫБОР
	|		КОГДА Ценности.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭлектронныеУслуги)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ЭлектронныеУслуги)
	|		КОГДА ЕСТЬNULL(СпрНоменклатура.ТипНоменклатуры, НЕОПРЕДЕЛЕНО) В (&ТипыНоменклатурыТовар)
	|			ТОГДА ЕСТЬNULL(СпрНоменклатура.ГруппаФинансовогоУчета.ВидЦенностиНДС, ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Товары))
	|		КОГДА НЕ СтатьиРасходов.Ссылка ЕСТЬ NULL
	|			ТОГДА СтатьиРасходов.ВидЦенностиНДС
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПрочиеРаботыИУслуги)
	|	КОНЕЦ                                                             КАК ВидЦенности,
	|	Ценности.СтавкаНДС                                                КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СпрНоменклатура.ТипНоменклатуры, НЕОПРЕДЕЛЕНО) В (&ТипыНоменклатурыТовар, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА ЕСТЬNULL(Назначения.ВидДеятельностиНДС, ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|						ТОГДА Назначения.ВидДеятельностиНДС
	|					КОГДА Ценности.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПоФактическомуИспользованию)
	|						И Ценности.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.НалоговыйАгентПоНДС)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|					ИНАЧЕ Ценности.ВидДеятельностиНДС
	|				КОНЕЦ 
	|		КОГДА НЕ СтатьиРасходов.Ссылка ЕСТЬ NULL И СтатьиРасходов.ВариантРаспределенияРасходовРегл <> ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров) 
	|			ТОГДА 
	|				ВЫБОР
	|					КОГДА ЕСТЬNULL(СтатьиРасходов.ВидЦенностиНДС, НЕОПРЕДЕЛЕНО) В (ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОС),
	|						                                                           ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НМА))
	|						  И ЕСТЬNULL(СтатьиРасходов.ВариантРаспределенияРасходовРегл, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|						  И ЕСТЬNULL(СтатьиРасходов.ВариантРаздельногоУчетаНДС, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ВариантыРаздельногоУчетаНДС.Распределение)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ВводОСВЭксплуатацию)
	|					КОГДА ЕСТЬNULL(СтатьиРасходов.ВариантРаздельногоУчетаНДС, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ВариантыРаздельногоУчетаНДС.Распределение)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|					КОГДА Ценности.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.НалоговыйАгентПоНДС)
	|					      И Ценности.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПоФактическомуИспользованию)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|					ИНАЧЕ Ценности.ВидДеятельностиНДС
	|				КОНЕЦ
	|		ИНАЧЕ 
	|			ВЫБОР
	|				КОГДА Ценности.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПоФактическомуИспользованию)
	|					  И Ценности.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.НалоговыйАгентПоНДС)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|				ИНАЧЕ Ценности.ВидДеятельностиНДС
	|			КОНЕЦ
	|	КОНЕЦ КАК ВидДеятельностиНДС,
	|	ВЫБОР
	|		КОГДА Ценности.ИсправлениеОшибок 
	|			ТОГДА Ценности.ДокументКорректировкиПриобретения
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ИсправленныйСчетФактура,
	|	НЕОПРЕДЕЛЕНО КАК РеализацияЭкспорт,
	|	ВЫБОР
	|		КОГДА Ценности.Период >= &ДатаНачалаУчетаНДСПоНаправлениямДеятельности
	|			ТОГДА ВЫБОР КОГДА ЕСТЬNULL(Назначения.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|					ТОГДА Назначения.НаправлениеДеятельности
	|				КОГДА ЕСТЬNULL(СпрНоменклатура.ТипНоменклатуры, НЕОПРЕДЕЛЕНО) В (&ТипыНоменклатурыТовар, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|					ТОГДА ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|					ИНАЧЕ Ценности.НаправлениеДеятельности
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|
	|	ВЫБОР
	|		КОГДА Ценности.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭлектронныеУслуги)
	|			ТОГДА СуммыДокументов.СуммаБезНДСРегл
	|		КОГДА СуммыДокументов.БазаНДСРегл <> 0
	|			ТОГДА СуммыДокументов.БазаНДСРегл
	|		ИНАЧЕ СуммыДокументов.СуммаБезНДСРегл
	|	КОНЕЦ КАК СуммаБезНДС,
	|	СуммыДокументов.СуммаНДСРегл КАК НДС,
	|	ВЫБОР
	|		КОГДА &УправленческийУчетОрганизацийВключен
	|			И Ценности.Период >= &ДатаНачалаВеденияУправленческогоУчетаОрганизаций
	|			ТОГДА СуммыДокументов.СуммаНДСУпр
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НДСУпр,
	|
	|	ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.ПустаяСсылка) КАК Событие,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК КорВидДеятельностиНДС,
	|	Ценности.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ЛОЖЬ КАК РегламентнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК КорНаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка) КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаРасходов
	|ИЗ
	|	#Ценности КАК Ценности
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		Справочник.Номенклатура КАК СпрНоменклатура
	|	ПО 
	|		Ценности.Номенклатура = СпрНоменклатура.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|	ПО
	|		Ценности.СтатьяРасходов = СтатьиРасходов.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПланВидовХарактеристик.СтатьиАктивовПассивов КАК СтатьиАктивовПассивов
	|	ПО
	|		Ценности.СтатьяПрочихАктивов = СтатьиАктивовПассивов.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ВидыЗапасов КАК СпрВидыЗапасов
	|	ПО
	|		Ценности.Номенклатура = СпрВидыЗапасов.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Назначения КАК Назначения
	|	ПО
	|		Ценности.Назначение = Назначения.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВтСуммыДокументовВВалютахУчета КАК СуммыДокументов
	|	ПО
	|		Ценности.Ссылка = СуммыДокументов.Ссылка
	|		И Ценности.ИдентификаторСтроки = СуммыДокументов.ИдентификаторСтроки
	|
	|ГДЕ
	|	Ценности.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	И НЕ ВЫБОР
	|		КОГДА ЕСТЬNULL(СпрНоменклатура.ТипНоменклатуры, НЕОПРЕДЕЛЕНО) В (&ТипыНоменклатурыТовар, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА ЕСТЬNULL(Назначения.ВидДеятельностиНДС, ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|						ТОГДА Назначения.ВидДеятельностиНДС
	|					КОГДА Ценности.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПоФактическомуИспользованию)
	|						И Ценности.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.НалоговыйАгентПоНДС)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|					ИНАЧЕ Ценности.ВидДеятельностиНДС
	|				КОНЕЦ
	|		КОГДА НЕ СтатьиРасходов.Ссылка ЕСТЬ NULL И СтатьиРасходов.ВариантРаспределенияРасходовРегл <> ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА ЕСТЬNULL(СтатьиРасходов.ВидЦенностиНДС, НЕОПРЕДЕЛЕНО) В (ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОС),
	|						                                                           ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НМА))
	|						  И ЕСТЬNULL(СтатьиРасходов.ВариантРаспределенияРасходовРегл, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|						  И ЕСТЬNULL(СтатьиРасходов.ВариантРаздельногоУчетаНДС, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ВариантыРаздельногоУчетаНДС.Распределение)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ВводОСВЭксплуатацию)
	|					КОГДА ЕСТЬNULL(СтатьиРасходов.ВариантРаздельногоУчетаНДС, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ВариантыРаздельногоУчетаНДС.Распределение)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|					КОГДА Ценности.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.НалоговыйАгентПоНДС)
	|					      И Ценности.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПоФактическомуИспользованию)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|					ИНАЧЕ Ценности.ВидДеятельностиНДС
	|				КОНЕЦ
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА Ценности.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПоФактическомуИспользованию)
	|					  И Ценности.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.НалоговыйАгентПоНДС)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|				ИНАЧЕ Ценности.ВидДеятельностиНДС
	|			КОНЕЦ
	|	КОНЕЦ В (&ТипыНалогообложенияНДСУчитываетсяВСтоимости)
	|	И ЕСТЬNULL(СуммыДокументов.СуммаНДСРегл, 0) <> 0
	|";
	
#КонецОбласти
	
	ТекстыШаблоновОтражения = Новый Структура();
	Если ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений("НДСПредъявленный", Регистры) Тогда
		ТекстыШаблоновОтражения.Вставить("НДСПредъявленный", ТекстЗапросаНДСПредъявленный);
	КонецЕсли;
	Если ТекстыШаблоновОтражения.Количество() > 0 Тогда
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Запрос.Параметры.Ссылка);
		МенеджерДокумента.ИнициализироватьВтСуммыДокументовВВалютахУчета(Запрос, ТекстыЗапроса);
	КонецЕсли;
	ТекстыЗапросовДанныхДокумента = Новый Структура("Ценности", ТекстЦенности);
	ПроведениеСерверУТ.ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента);
	
	УчетНДСЛокализация.ОтразитьПриобретениеУПоставщика(Запрос, ТекстыЗапроса, Регистры, ТекстЦенности);
	
КонецПроцедуры

// Дополняет тексты запроса отражения документа текстами отражения возврата товаров от покупателя.
// Операция формирует движения по регистрам НДСПредъявленный, НДСЗаписиКнигиПокупок, ДанныеОснованийСчетовФактур.
//
/// В модуле менеджера документа должна быть реализована экспортная процедура  ИнициализироватьВтСуммыДокументовВВалютахУчета(Запрос, ТекстыЗапросов),
// которая дополняет запрос отражения текстом инициализации ВтСуммыДокументовВВалютахУчета (См. РегистрыСведений.СуммыДокументовВВалютеРегл.ИнициализироватьВтСуммыДокументовВВалютахУчета()).
//
// // Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстЦенности - Строка - Текст запроса получения из документа возврата.
// 	     Запрос должен возвращать выборку полей
// 	     [Реквизиты операции]
// 	     * Период - Дата - Дата отражения операции.
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	     * Организация - СправочникСсылка.Организации - Организация, в которой отражается возврат.
// 	     * Подразделение - СправочникСсылка.СтруктураПредприятия - Подразделение, в котором отражается возврат.
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Покупатель, возвращающий товары.
// 	     * Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор с покупателем.
// 	     * Грузоотправитель - СправочникСсылка.Контрагенты - Грузоотправитель возвращаемых товаров.
// 	     * ПокупательНеПлательщикНДС - Булево - Признак того, что покупатель возвращающий товары не является плательщиком НДС и счет-фактура от него не ожидается.
// 	     * РозничныйПокупатель - Булево - Признак того, что товар возвращает розничный покупатель.
// 	     * ДенежныеСредстваРозничномуПокупателюВозвращены - Булево - Признак того, что розничному покупателю возвращены денежные средства.
// 	     * НомерДокументаВозвратаДСРозничномуПокупателю - Строка - Номер документа возврата денежных средств розничному покупателю.
// 	     * ДатаДокументаВозвратаДСРозничномуПокупателю - Дата - Дата документа возврата денежных средств розничному покупателю.
// 	     * ДокументВозврата - ОпределяемыйТип.СчетаФактуры - Документ возврата товаров.
// 	     * ДокументРеализации - ОпределяемыйТип.СчетаФактуры - Ссылка на документ продажи, по которому оформляется возврат. 
// 	     *                                                     Если возврат от неплательщика НДС, то заполнение документа реализации обязательно.
// 	     * НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Налогообложение НДС возврата в случае возврата от плательщика НДС. 
// 	                                                                        Если покупатель не плательщик НДС, то налогообложение реализации.
// 	     * ВидДеятельностиНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Вид деятельности раздельного учета НДС, на который относится входящий НДС.
// 	     [Возвращаемые товары]
// 	     * Номенклатура - СправочникСсылка.Номенклатура - Возвращаемый товар.
// 	     * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика возвращаемого товара.
// 	     * НоменклатураНабора - СправочникСсылка.Номенклатура - Возвращаемый набор.
// 	     * ХарактеристикаНабора - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика возвращаемого набора.
// 	     * Количество - Число - количество возвращаемых товаров
// 	     * ЕдиницаИзмерения - СправочникСсылка.УпаковкиЕдиницыИзмерения - Единица измерения возвращаемого товара.
// 	     * СтавкаНДС - СправочникСсылка.Номенклатура - Ставка НДС возвращаемых ценностей.
// 	     * ВидЗапасов - СправочникСсылка.ВидыЗапасов - Вид запасов возвращаемого товара.
// 	     * КодТНВЭД - СправочникСсылка.КлассификаторТНВЭД - Код ТН ВЭД возвращаемого товара.
// 	     * НомерГТД - СправочникСсылка.НомераГТД - Номер ГТД возвращаемого товара.
// 	     * ИдентификаторСтроки - Строка, УникальныйИдентификатор - Идентификатор строки документа возврата.
// 	     [Аналитика учета возвращаемых товаров]
// 	     * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности, под которое отражается возврат.
// 	     * Назначение - СправочникСсылка.Назначения - Обособленная потребность, обеспечиваемая возвратом.
//
Процедура ОтразитьВозвратТоваровОтПокупателя(Запрос, ТекстыЗапроса, Регистры, ТекстЦенности) Экспорт
	
	НастройкиУчета = НастройкиУчета();
	
	Запрос.УстановитьПараметр("ТипыНалогообложенияНДСУчитываетсяВСтоимости", ВидыДеятельностиНДСУчитываетсяВСтоимости());
	Запрос.УстановитьПараметр("ТипыЗапасовСобственные", УчетНДСУПСлужебный.ТипыЗапасовСобственные());
	Запрос.УстановитьПараметр("ДатаНачалаУчетаНДСПоНаправлениямДеятельности", НастройкиУчета.ДатаНачалаУчетаНДСПоНаправлениямДеятельности);
	Запрос.УстановитьПараметр("ДатаОтраженияВозвратовКорректировочнымиСФ", НастройкиУчета.ДатаОтраженияВозвратовКорректировочнымиСФ);
	Запрос.УстановитьПараметр("УправленческийУчетОрганизацийВключен", РасчетСебестоимостиПовтИсп.УправленческийУчетОрганизаций());
	Запрос.УстановитьПараметр("ДатаНачалаВеденияУправленческогоУчетаОрганизаций", РасчетСебестоимостиПовтИсп.ДатаНачалаВеденияУправленческогоУчетаОрганизаций());
	
#Область НДСПредъявленный
	
	ТекстЗапросаНДСПредъявленный = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	Ценности.Ссылка                        КАК Регистратор,
	|	Ценности.Период                        КАК Период,
	|	Ценности.Организация                   КАК Организация,
	|	ВЫБОР
	|		КОГДА Ценности.ПокупательНеПлательщикНДС 
	|			ТОГДА Ценности.ДокументРеализации
	|		ИНАЧЕ Ценности.ДокументВозврата
	|	КОНЕЦ                                  КАК СчетФактура,
	|	ВЫБОР
	|		КОГДА Ценности.ПокупательНеПлательщикНДС 
	|			ТОГДА Ценности.Организация 
	|		ИНАЧЕ Ценности.Контрагент
	|	КОНЕЦ                                  КАК Поставщик,
	|	ЕСТЬNULL(СпрНоменклатура.ГруппаФинансовогоУчета.ВидЦенностиНДС, 
	|		ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Товары)) КАК ВидЦенности,
	|	Ценности.СтавкаНДС                     КАК СтавкаНДС,
	|	ВЫБОР 
	|		КОГДА Ценности.ПокупательНеПлательщикНДС
	|			ТОГДА Ценности.НалогообложениеНДС
	|		КОГДА ЕСТЬNULL(Назначения.ВидДеятельностиНДС,
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|			ТОГДА Назначения.ВидДеятельностиНДС
	|		ИНАЧЕ Ценности.ВидДеятельностиНДС
	|	КОНЕЦ                                  КАК ВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО                           КАК ИсправленныйСчетФактура,
	|	НЕОПРЕДЕЛЕНО                           КАК РеализацияЭкспорт,
	|	ВЫБОР
	|		КОГДА Ценности.Период >= &ДатаНачалаУчетаНДСПоНаправлениямДеятельности
	|			ТОГДА ВЫБОР КОГДА ЕСТЬNULL(Назначения.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|					ТОГДА Назначения.НаправлениеДеятельности
	|					ИНАЧЕ Ценности.НаправлениеДеятельности
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|	
	|	ВЫБОР
	|		КОГДА СуммыДокументов.БазаНДСРегл > 0
	|			ТОГДА -СуммыДокументов.БазаНДСРегл
	|		КОГДА СуммыДокументов.БазаНДСРегл < 0
	|			ТОГДА СуммыДокументов.БазаНДСРегл
	|		КОГДА СуммыДокументов.СуммаБезНДСРегл > 0
	|			ТОГДА -СуммыДокументов.СуммаБезНДСРегл
	|		ИНАЧЕ СуммыДокументов.СуммаБезНДСРегл
	|	КОНЕЦ                                  КАК СуммаБезНДС,
	|	ВЫБОР
	|		КОГДА СуммыДокументов.СуммаНДСРегл > 0
	|			ТОГДА -СуммыДокументов.СуммаНДСРегл
	|		ИНАЧЕ СуммыДокументов.СуммаНДСРегл
	|	КОНЕЦ                                  КАК НДС,
	|	ВЫБОР
	|		КОГДА &УправленческийУчетОрганизацийВключен
	|			  И Ценности.Период >= &ДатаНачалаВеденияУправленческогоУчетаОрганизаций
	|			ТОГДА 
	|				ВЫБОР
	|					КОГДА СуммыДокументов.СуммаНДСУпр > 0
	|				ТОГДА -СуммыДокументов.СуммаНДСУпр
	|					ИНАЧЕ СуммыДокументов.СуммаНДСУпр
	|				КОНЕЦ
	|			ИНАЧЕ 0
	|	КОНЕЦ                                  КАК НДСУпр,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.ПустаяСсылка)       КАК Событие,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)        КАК КорВидДеятельностиНДС,
	|	Ценности.ИдентификаторСтроки                                      КАК ИдентификаторСтроки,
	|	ЛОЖЬ                                                              КАК РегламентнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)            КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)         КАК КорНаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)      КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО                                                      КАК АналитикаРасходов
	|
	|ИЗ
	|	#Ценности КАК Ценности
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Номенклатура КАК СпрНоменклатура
	|	ПО
	|		Ценности.Номенклатура = СпрНоменклатура.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ВидыЗапасов КАК СпрВидыЗапасов
	|	ПО
	|		Ценности.ВидЗапасов = СпрВидыЗапасов.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Назначения КАК Назначения
	|	ПО
	|		Ценности.Назначение = Назначения.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВтСуммыДокументовВВалютахУчета КАК СуммыДокументов
	|	ПО
	|		Ценности.Ссылка = СуммыДокументов.Ссылка
	|		И Ценности.ИдентификаторСтроки = СуммыДокументов.ИдентификаторСтроки
	|
	|ГДЕ
	|	Ценности.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	И СпрВидыЗапасов.ТипЗапасов В (&ТипыЗапасовСобственные)
	|	И ВЫБОР 
	|		КОГДА Ценности.Период < &ДатаОтраженияВозвратовКорректировочнымиСФ И (Ценности.ПокупательНеПлательщикНДС ИЛИ Ценности.РозничныйПокупатель)
	|			ТОГДА Ценности.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|		ИНАЧЕ
	|			НЕ (ВЫБОР
	|					КОГДА ЕСТЬNULL(Назначения.ВидДеятельностиНДС,
	|							ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|						ТОГДА Назначения.ВидДеятельностиНДС
	|					ИНАЧЕ Ценности.ВидДеятельностиНДС
	|				КОНЕЦ) В (&ТипыНалогообложенияНДСУчитываетсяВСтоимости)
	|			И Ценности.Период < &ДатаОтраженияВозвратовКорректировочнымиСФ
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	Ценности.Ссылка                        КАК Регистратор,
	|	Ценности.Период                        КАК Период,
	|	Ценности.Организация                   КАК Организация,
	|	ВЫБОР
	|		КОГДА Ценности.ПокупательНеПлательщикНДС
	|			ТОГДА Ценности.ДокументРеализации
	|		ИНАЧЕ Ценности.ДокументВозврата
	|	КОНЕЦ                                  КАК СчетФактура,
	|	ВЫБОР
	|		КОГДА Ценности.ПокупательНеПлательщикНДС 
	|			ТОГДА Ценности.Организация 
	|		ИНАЧЕ Ценности.Контрагент
	|	КОНЕЦ                                  КАК Поставщик,
	|	ЕСТЬNULL(СпрНоменклатура.ГруппаФинансовогоУчета.ВидЦенностиНДС, ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Товары)) КАК ВидЦенности,
	|	Ценности.СтавкаНДС                     КАК СтавкаНДС,
	|	ВЫБОР 
	|		КОГДА Ценности.ПокупательНеПлательщикНДС
	|			ТОГДА Ценности.НалогообложениеНДС
	|		КОГДА ЕСТЬNULL(Назначения.ВидДеятельностиНДС,
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|			ТОГДА Назначения.ВидДеятельностиНДС
	|		ИНАЧЕ Ценности.ВидДеятельностиНДС
	|	КОНЕЦ                                  КАК ВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО                           КАК ИсправленныйСчетФактура,
	|	НЕОПРЕДЕЛЕНО                           КАК РеализацияЭкспорт,
	|	ВЫБОР
	|		КОГДА Ценности.Период >= &ДатаНачалаУчетаНДСПоНаправлениямДеятельности
	|			ТОГДА ВЫБОР КОГДА ЕСТЬNULL(Назначения.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|					ТОГДА Назначения.НаправлениеДеятельности
	|					ИНАЧЕ Ценности.НаправлениеДеятельности
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|
	|	ВЫБОР
	|		КОГДА СуммыДокументов.БазаНДСРегл > 0
	|			ТОГДА СуммыДокументов.БазаНДСРегл
	|		КОГДА СуммыДокументов.БазаНДСРегл < 0
	|			ТОГДА -СуммыДокументов.БазаНДСРегл
	|		КОГДА СуммыДокументов.СуммаБезНДСРегл > 0
	|			ТОГДА СуммыДокументов.СуммаБезНДСРегл
	|		ИНАЧЕ -СуммыДокументов.СуммаБезНДСРегл
	|	КОНЕЦ                                  КАК СуммаБезНДС,
	|	ВЫБОР
	|		КОГДА СуммыДокументов.СуммаНДСРегл > 0
	|			ТОГДА СуммыДокументов.СуммаНДСРегл
	|		ИНАЧЕ -СуммыДокументов.СуммаНДСРегл
	|	КОНЕЦ                                  КАК НДС,
	|	ВЫБОР
	|		КОГДА &УправленческийУчетОрганизацийВключен
	|			  И Ценности.Период >= &ДатаНачалаВеденияУправленческогоУчетаОрганизаций
	|			ТОГДА 
	|				ВЫБОР
	|					КОГДА СуммыДокументов.СуммаНДСУпр > 0
	|				ТОГДА СуммыДокументов.СуммаНДСУпр
	|					ИНАЧЕ -СуммыДокументов.СуммаНДСУпр
	|				КОНЕЦ
	|			ИНАЧЕ 0
	|	КОНЕЦ                                  КАК НДСУпр,
	|
	|	ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.НДСПринятКВычету)   КАК Событие,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)        КАК КорВидДеятельностиНДС,
	|	Ценности.ИдентификаторСтроки                                      КАК ИдентификаторСтроки,
	|	ЛОЖЬ                                                              КАК РегламентнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)            КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)         КАК КорНаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)      КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО                                                      КАК АналитикаРасходов
	|
	|ИЗ
	|	#Ценности КАК Ценности
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Номенклатура КАК СпрНоменклатура
	|	ПО
	|		Ценности.Номенклатура = СпрНоменклатура.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Назначения КАК Назначения
	|	ПО
	|		Ценности.Назначение = Назначения.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВтСуммыДокументовВВалютахУчета КАК СуммыДокументов
	|	ПО
	|		Ценности.Ссылка = СуммыДокументов.Ссылка
	|		И Ценности.ИдентификаторСтроки = СуммыДокументов.ИдентификаторСтроки
	|
	|ГДЕ
	|	ВЫБОР 
	|		КОГДА Ценности.Период >= &ДатаОтраженияВозвратовКорректировочнымиСФ
	|			ТОГДА ЛОЖЬ
	|		КОГДА Ценности.ПокупательНеПлательщикНДС 
	|			ТОГДА Ценности.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|		КОГДА Ценности.РозничныйПокупатель
	|			ТОГДА Ценности.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|					И Ценности.ДенежныеСредстваРозничномуПокупателюВозвращены
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|	И Ценности.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	И Ценности.ВидЗапасов.ТипЗапасов В (&ТипыЗапасовСобственные)
	|";
	
#КонецОбласти

	ТекстыШаблоновОтражения = Новый Структура();
	Если ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений("НДСПредъявленный", Регистры) Тогда 
		ТекстыШаблоновОтражения.Вставить("НДСПредъявленный", ТекстЗапросаНДСПредъявленный);
	КонецЕсли;
	Если ТекстыШаблоновОтражения.Количество() > 0 Тогда
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Запрос.Параметры.Ссылка);
		МенеджерДокумента.ИнициализироватьВтСуммыДокументовВВалютахУчета(Запрос, ТекстыЗапроса);
	КонецЕсли;
	ТекстыЗапросовДанныхДокумента = Новый Структура("Ценности", ТекстЦенности);
	ПроведениеСерверУТ.ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента);
	
	УчетНДСЛокализация.ОтразитьВозвратТоваровОтПокупателя(Запрос, ТекстыЗапроса, Регистры, ТекстЦенности);
	
КонецПроцедуры

// Дополняет запрос отражения документа отражением регистрации ввоза товаров из Таможенного союза.
// Операция формирует движения по регистру ТоварыКОформлениюЗаявленийОВвозе.
//
// В модуле менеджера документа должна быть реализована экспортная процедура  ИнициализироватьВтСуммыДокументовВВалютахУчета(Запрос, ТекстыЗапросов),
// которая дополняет запрос отражения текстом инициализации ВтСуммыДокументовВВалютахУчета (См. РегистрыСведений.СуммыДокументовВВалютеРегл.ИнициализироватьВтСуммыДокументовВВалютахУчета()).
//
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстТовары - Строка - Текст запроса получения из документа приобретения.
// 	     Запрос должен возвращать выборку полей
// 	     [Реквизиты операции]
// 	     * Период - Дата - Дата отражения операции.
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	     * Организация - СправочникСсылка.Организации - Организация, в которой отражается ввоз товаров из таможенного союза.
// 	     * Контрагент - СправочникСсылка.Контрагенты - Контрагент-поставщик товаров.
// 	     * ДокументПриобретения - ОпределяемыйТип.ОснованиеСчетФактураПолученный - Ссылка на документ приобретения товаров.
// 	     [Ввозимые товары]
// 	     * Номенклатура - СправочникСсылка.Номенклатура - Ввозимая номенклатурная позиция.
// 	     * Характеристика - СправочникСсылка.Характеристики - Характеристика ввозимой номенклатурной позиции.
// 	     * Серия - СправочникСсылка.Характеристики - Серия ввозимой номенклатурной позиции.
// 	     * Количество - Число - Количество ввозимого товара.
// 	     * ИдентификаторСтроки - Строка, УникальныйИдентификатор - Идентификатор строки документа приобретения.
// 	     [Аналитика учета ввозимых товаров]
// 	     * Склад - Справочники.Склады - Склад, на который приобретаются товары.
// 	     * АналитикаУчетаНоменклатуры - СправочникСсылка.КлючиАналитикиУчетаНоменклатуры - Ключ аналитика учета товара.
//
Процедура ОтразитьВвозТоваровИзТаможенногоСоюза(Запрос, ТекстыЗапроса, Регистры, ТекстТовары) Экспорт
	
	УчетНДСЛокализация.ОтразитьВвозТоваровИзТаможенногоСоюза(Запрос, ТекстыЗапроса, Регистры, ТекстТовары);
	
КонецПроцедуры

// Дополняет тексты запроса проведения документа текстами отражения реализации товаров, услуг, работ или прочих активов в учете НДС.
// Операция формирует движения по регистрам НДСЗаписиКнигиПродаж, НДССостояниеРеализации0 (в случае реализации на экспорт), ДанныеОснованийСчетовФактур.
//
// В модуле менеджера документа должна быть реализована экспортная процедура  ИнициализироватьВтСуммыДокументовВВалютахУчета(Запрос, ТекстыЗапросов),
// которая дополняет запрос отражения текстом инициализации ВтСуммыДокументовВВалютахУчета (См. РегистрыСведений.СуммыДокументовВВалютеРегл.ИнициализироватьВтСуммыДокументовВВалютахУчета()).
// 
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстЦенности - Строка - Текст запроса получения данных документа.
// 	     Запрос должен возвращать выборку полей
// 	     [Реквизиты операции]
// 	     * Период - Дата - Дата отражения операции.
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	     * Организация - СправочникСсылка.Организации - Организация, от имени которой отражается реализация.
// 	     * Подразделение - СправочникСсылка.СтруктураПредприятия - Подразделение, от имени которого отражается реализация.
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Покупатель ценностей.
// 	     * Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор реализации.
// 	     * Грузоотправитель - СправочникСсылка.Контрагенты - Грузоотправитель товаров.
// 	     * Грузополучатель - СправочникСсылка.Контрагенты - Грузополучатель товаров.
// 	     * РеализацияВРозницу - Булево - Признак того, что товар реализуется в розницу.
// 	     * ДокументРеализации - ОпределяемыйТип.ОснованиеСчетФактураВыданный - Ссылка на документ реализации.
// 	     * ИсправлениеОшибок - Булево - Признак, того что отражается исправление ошибок в документе реализации.
// 	     * КорректировкаПоСогласованиюСторон - Булево - Признак, того что отражается корректировка реализации по соглашению сторон.
// 	     * ДокументКорректировкаРеализации - Неопределено, ДокументСсылка.КорректировкаРеализации - Ссылка на документ корректировки реализации.
// 	                                              Заполняется в случае, если отражается ИсправлениеОшибок или КорректировкаПоСогласованиюСторон. 
// 	     * НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Налогообложение НДС документа реализации.
// 	     [Реализуемая номенклатура]
// 	     * Номенклатура - СправочникСсылка.Номенклатура - Товар, работа или услуга.
// 	     * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика реализуемой номенклатуры.
// 	     * НоменклатураНабора - СправочникСсылка.Номенклатура - реализуемый набор.
// 	     * ХарактеристикаНабора - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика набора.
// 	     * Количество - Число - количество реализуемой номенклатуры
// 	     * ЕдиницаИзмерения - СправочникСсылка.УпаковкиЕдиницыИзмерения - Единица измерения номенклатуры.
// 	     * Содержание - Строка(1000) - описанние оказанных услуг
// 	     * СтавкаНДС - ПеречислениеСсылка.СтавкиНДС - Ставка НДС, по которой облагается реализация.
// 	     * КодТНВЭД - СправочникСсылка.КлассификаторТНВЭД - Код ТН ВЭД реализуемого товара.
// 	     * НомерГТД - СправочникСсылка.НомераГТД - Номер ГТД реализуемого товара.
// 	     * ВидЗапасов - СправочникСсылка.ВидыЗапасов - Вид запасов реализуемых товаров.
// 	     * ИдентификаторСтроки - Строка, УникальныйИдентификатор - Уникальный идентификатор строки документа реализации.
//
Процедура ОтразитьРеализациюКлиенту(Запрос, ТекстыЗапроса, Регистры, ТекстЦенности) Экспорт
	
	УчетНДСЛокализация.ОтразитьРеализациюКлиенту(Запрос, ТекстыЗапроса, Регистры, ТекстЦенности);
	
КонецПроцедуры

// Дополняет тексты запроса проведения документа текстами отражения возврата товаров поставщику в учете НДС.
// Запрос формируют таблицу движений по регистру НДСЗаписиКнигиПродаж, ДанныеОснованийСчетовФактур.
//
// В модуле менеджера документа должна быть реализована экспортная процедура  ИнициализироватьВтСуммыДокументовВВалютахУчета(Запрос, ТекстыЗапросов),
// которая дополняет запрос отражения текстом инициализации ВтСуммыДокументовВВалютахУчета (См. РегистрыСведений.СуммыДокументовВВалютеРегл.ИнициализироватьВтСуммыДокументовВВалютахУчета()).
// 
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстТовары - Строка - Текст запроса получения данных документа приобретения.
// 	     Запрос должен возвращать выборку полей
// 	     [Реквизиты операции]
// 	     * Период - Дата - Дата отражения операции.
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	     * Организация - СправочникСсылка.Организации - Организация, от имени которой отражается возврат.
// 	     * Подразделение - СправочникСсылка.СтруктураПредприятия - Подразделение, от имени которого отражается возврат.
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Поставщик товаров.
// 	     * Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор реализации.
// 	     * Грузоотправитель - СправочникСсылка.Контрагенты - Грузоотправитель возвращаемых товаров.
// 	     * Грузополучатель - СправочникСсылка.Контрагенты - Грузополучатель возвращаемых товаров.
// 	     * ПокупательНеПлательщикНДС - Булево - Признак того, что покупатель возвращающий товары не является плательщиком НДС и счет-фактура от него не ожидается.
// 	     * ДокументВозврата - ОпределяемыйТип.ОснованиеСчетФактураВыданный - Ссылка на документ возврата.
// 	     * НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Налогообложение НДС документа возврата.
// 	     * ДокументПоступления - ОпределяемыйТип.ОснованиеСчетФактураПолученный - Ссылка на документ поступления товаров, по которому осуществляется возврат.
// 	     * ВидДеятельностиНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Вид деятельности раздельного учета НДС документа приобретения.
// 	     [Возвращаемая номенклатура]
// 	     * Номенклатура - СправочникСсылка.Номенклатура - Возвращаемый товар.
// 	     * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика возвращаемого товара.
// 	     * СтавкаНДС - ПеречислениеСсылка.СтавкиНДС - Ставка НДС возвращаемых товаров.
// 	     * ВидЗапасов - СправочникСсылка.ВидыЗапасов - Вид запасов возвращаемого товара.
// 	     * Назначение - СправочникСсылка.Назначения - В случае приобретения под обособленную потребность определяет вид деятельности раздельного учета НДС.
// 	     * ИдентификаторСтроки - Строка, УникальныйИдентификатор - Уникальный идентификатор строки документа возврата.
//
Процедура ОтразитьВозвратТоваровПоставщику(Запрос, ТекстыЗапроса, Регистры, ТекстТовары) Экспорт

	УчетНДСЛокализация.ОтразитьВозвратТоваровПоставщику(Запрос, ТекстыЗапроса, Регистры, ТекстТовары);
	
КонецПроцедуры

// Дополняет тексты запроса проведения документа текстами отражения отчета комиссионера в учете НДС.
// Операция формирует движения по регистрам ДанныеОснованийСчетовФактур.
// На основании данных движений регистрируются распоряжения на оформление счетов-фактур комиссионеру.
//
// В модуле менеджера документа должна быть реализована экспортная процедура  ИнициализироватьВтСуммыДокументовВВалютахУчета(Запрос, ТекстыЗапросов),
// которая дополняет запрос отражения текстом инициализации ВтСуммыДокументовВВалютахУчета (См. РегистрыСведений.СуммыДокументовВВалютеРегл.ИнициализироватьВтСуммыДокументовВВалютахУчета()).
// 
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстТовары - Строка - Текст запроса получения данных документа.
// 	     Запрос должен возвращать выборку полей
// 	     [Реквизиты операции]
// 	     * Период - Дата - Дата отражения операции.
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	     * Организация - СправочникСсылка.Организации - Организация, от имени которой отражается отчет комиссионера.
// 	     * Подразделение - СправочникСсылка.СтруктураПредприятия - Подразделение, от имени которого оформляется отчет комиссионера.
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Комиссионер.
// 	     * Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор комиссии.
// 	     * Грузоотправитель - СправочникСсылка.Контрагенты - Грузоотправитель товаров.
// 	     * ОтчетКомиссионера - ОпределяемыйТип.ОснованиеСчетФактураКомиссионеру - Отчета комиссионера.
// 	     * НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Налогообложение НДС отчета комиссионера.
// 	     [Реализованная номенклатура, информация о счетах-фактурах, выставленных покупателям]
// 	     * Номенклатура - СправочникСсылка.Номенклатура - Товар или услуга, реализуемая через посредника.
// 	     * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика реализуемой номенклатуры.
// 	     * СтавкаНДС - ПеречислениеСсылка.СтавкиНДС - Ставка НДС, по которой облагается реализация комиссионных товаров.
// 	     * ВидЗапасов - СправочникСсылка.ВидыЗапасов - Вид запасов реализуемых товаров.
// 	     * ДатаСчетаФактурыКомиссионера - Дата - Дата выставления счета-фактуры комиссионером покупателю.
// 	     * НомерСчетаФактурыКомиссионера - Дата - Номер счета-фактуры, выставленного комиссионером покупателю.
// 	     * ПокупательКомиссионногоТовара - СправочникСсылка.Контрагент - Покупатель товаров, услуг.
// 	     * ИдентификаторСтроки - Строка, УникальныйИдентификатор - Уникальный идентификатор строки отчета комиссионеру.
//
Процедура ОтразитьОтчетКомиссионера(Запрос, ТекстыЗапроса, Регистры, ТекстТовары) Экспорт
	
	УчетНДСЛокализация.ОтразитьОтчетКомиссионера(Запрос, ТекстыЗапроса, Регистры, ТекстТовары);
	
КонецПроцедуры

// Дополняет тексты запроса проведения документа текстами отражения отчета комитенту в учете НДС.
// Операция формирует движения по регистрам ДанныеОснованийСчетовФактур.
// На основании данных движений формируются распоряжения на регистрацию счетов-фактур от комитента.
//
// В модуле менеджера документа должна быть реализована экспортная процедура  ИнициализироватьВтСуммыДокументовВВалютахУчета(Запрос, ТекстыЗапросов),
// которая дополняет запрос отражения текстом инициализации ВтСуммыДокументовВВалютахУчета (См. РегистрыСведений.СуммыДокументовВВалютеРегл.ИнициализироватьВтСуммыДокументовВВалютахУчета()).
// 
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстТовары - Строка - Текст запроса получения данных документа.
// 	     Запрос должен возвращать выборку полей
// 	     [Реквизиты операции]
// 	     * Период - Дата - Дата отражения операции.
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	     * Организация - СправочникСсылка.Организации - Организация, от имени которой отражается отчет комитенту.
// 	     * Подразделение - СправочникСсылка.СтруктураПредприятия - Подразделение, от имени которого оформляется отчет комитенту.
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Комитент.
// 	     * Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор c комитентом.
// 	     * ОтчетКомитенту - ОпределяемыйТип.ОснованиеСчетФактураВыданный - Отчета комитенту.
// 	     * НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Налогообложение НДС отчета комитенту.
// 	     [Реализованная номенклатура, счета-фактуры, выставленные покупателям]
// 	     * Номенклатура - СправочникСсылка.Номенклатура - Реализованный товар или услуга.
// 	     * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика реализованной номенклатуры.
// 	     * СтавкаНДС - ПеречислениеСсылка.СтавкиНДС - Ставка НДС, по которой облагается реализация комиссионных товаров.
// 	     * ВидЗапасов - СправочникСсылка.ВидыЗапасов - Вид запасов реализуемых товаров.
// 	     * ДатаСчетаФактурыВыданногоПокупателю - Дата - Дата счета-фактуры, выставленного покупателю.
// 	     * ПокупательКомиссионногоТовара - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Покупатель комиссионного товара.
// 	     * СчетФактураВыданныйПокупателю - ДокументСсылка.СчетФактураВыданный, ДокументСсылка.СчетФактураКомиссионеру 
// 	                                        - Ссылка на счет-фактуру, выставленный покупателю или субкомиссионеру.
// 	     * ИдентификаторСтроки - Строка, УникальныйИдентификатор - Уникальный идентификатор строки отчета комитенту.
//
Процедура ОтразитьОтчетКомитенту(Запрос, ТекстыЗапроса, Регистры, ТекстТовары) Экспорт
	
	УчетНДСЛокализация.ОтразитьОтчетКомитенту(Запрос, ТекстыЗапроса, Регистры, ТекстТовары);
	
КонецПроцедуры

// Дополняет тексты запроса проведения документа текстами отражения списания сумм из контура учета входящего НДС.
// Операция формирует движения по регистру НДСПредъявленный.
// 
// В модуле менеджера документа должна быть реализована экспортная процедура  ИнициализироватьВтСуммыДокументовВВалютахУчета(Запрос, ТекстыЗапросов),
// которая дополняет запрос отражения текстом инициализации ВтСуммыДокументовВВалютахУчета (См. РегистрыСведений.СуммыДокументовВВалютеРегл.ИнициализироватьВтСуммыДокументовВВалютахУчета()).
// 
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 	ТекстЦенности - Строка - Текст запроса получения данных документа приобретения.
// 	     Запрос должен возвращать выборку с полями
// 	     * Период - Дата - Дата отражения операции.
// 	     * Ссылка - ДокументСсылка - Документ-регистратор операции.
// 	     * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	     * Организация - СправочникСсылка.Организации - Организация, в которой отражается приобретение.
// 	     * Контрагент - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Поставщик ценностей.
// 	     * СчетФактура - ОпределяемыйТип.СчетаФактуры - Ссылка на документ приобретения.
// 	     * ВидДеятельностиНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Вид деятельности раздельного учета НДС документа приобретения.
// 	     * СтавкаНДС - ПеречислениеСсылка.СтавкиНДС - Ставка НДС приобретаемых ценностей.
// 	     * ИдентификаторСтроки - Строка, УникальныйИдентификатор - Идентификатор строки документа приобретения для получения 
// 	                                                              сумм документа в валюте управленческого или регламентированного учета.
// 	     * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности, под которое отражается приобретение.
// 	     * ПодразделениеУчета - СправочникСсылка.СтруктураПредприятия - Подразделение, в котором учитываются приобретаемые товары, работы услуги, активы.
//
Процедура ОтразитьСписаниеНДСНаРасходы(Запрос, ТекстыЗапроса, Регистры, ТекстЦенности) Экспорт
	
	Запрос.УстановитьПараметр("УправленческийУчетОрганизацийВключен", РасчетСебестоимостиПовтИсп.УправленческийУчетОрганизаций());
	Запрос.УстановитьПараметр("ДатаНачалаВеденияУправленческогоУчетаОрганизаций", РасчетСебестоимостиПовтИсп.ДатаНачалаВеденияУправленческогоУчетаОрганизаций());
	
#Область НДСПредъявленный
	
	ТекстЗапросаНДСПредъявленный = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	Ценности.Ссылка КАК Регистратор,
	|	Ценности.Период КАК Период,
	|	Ценности.Организация КАК Организация,
	|	Ценности.СчетФактура КАК СчетФактура,
	|	Ценности.Контрагент КАК Поставщик,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПрочиеРаботыИУслуги) КАК ВидЦенности,
	|	Ценности.СтавкаНДС КАК СтавкаНДС,
	|	Ценности.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО КАК ИсправленныйСчетФактура,
	|	НЕОПРЕДЕЛЕНО КАК РеализацияЭкспорт,
	|	Ценности.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|
	|	ВЫБОР
	|		КОГДА СуммыДокументов.БазаНДСРегл <> 0
	|			ТОГДА СуммыДокументов.БазаНДСРегл
	|		ИНАЧЕ СуммыДокументов.СуммаБезНДСРегл
	|	КОНЕЦ КАК СуммаБезНДС,
	|	СуммыДокументов.СуммаНДСРегл КАК НДС,
	|	ВЫБОР
	|		КОГДА &УправленческийУчетОрганизацийВключен
	|			  И Ценности.Период >= &ДатаНачалаВеденияУправленческогоУчетаОрганизаций
	|			ТОГДА СуммыДокументов.СуммаНДСУпр
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НДСУпр,
	|
	|	ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.СписаниеНДСНаРасходы) КАК Событие,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК КорВидДеятельностиНДС,
	|	Ценности.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ЛОЖЬ КАК РегламентнаяОперация,
	|	Ценности.ПодразделениеУчета КАК Подразделение,
	|	Ценности.НаправлениеДеятельности КАК КорНаправлениеДеятельности,
	|	&СтатьяРасходовСписаниеНДС КАК СтатьяРасходов,
	|	&АналитикаРасходовСписаниеНДС КАК АналитикаРасходов
	|ИЗ
	|	#Ценности КАК Ценности
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВтСуммыДокументовВВалютахУчета КАК СуммыДокументов
	|	ПО
	|		Ценности.Ссылка = СуммыДокументов.Ссылка
	|		И Ценности.ИдентификаторСтроки = СуммыДокументов.ИдентификаторСтроки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|	ПО
	|		Ценности.СтатьяРасходов = СтатьиРасходов.Ссылка
	|
	|ГДЕ
	|	Ценности.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	И ЕСТЬNULL(СуммыДокументов.СуммаНДСРегл, 0) <> 0
	|";
	
#КонецОбласти
	
	ТекстыШаблоновОтражения = Новый Структура();
	Если ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений("НДСПредъявленный", Регистры) Тогда
		ТекстыШаблоновОтражения.Вставить("НДСПредъявленный", ТекстЗапросаНДСПредъявленный);
	КонецЕсли;
	
	ТекстыЗапросовДанныхДокумента = Новый Структура("Ценности", ТекстЦенности);
	ПроведениеСерверУТ.ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента);
	
КонецПроцедуры

#КонецОбласти

#Область ПрочийПрограммныйИнтерфейс

#Область ОписаниеЭтаповЗакрытияМесяца

//++ Локализация
#Область РаспределениеНДС

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - ТаблицаЗначений - См. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца
// 	ТекущийРодитель - Строка - Идентификатор группы
//
Процедура ДобавитьЭтап_РаспределениеНДС(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.РаспределениеНДС,,,,
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости);
	НоваяСтрока.ТекстВыполнить = НСтр("ru='Распределить'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"УчетНДСУП.Использование_РаспределениеНДС");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"УчетНДСУП.Выполнить_РаспределениеНДС");
	НоваяСтрока.ДействиеПодробнее = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.РаспределениеНДС.Формы.ФормаСписка.ПолноеИмя());
	
КонецПроцедуры

// Обработчики этапа.

#Область ОбработчикиЭтапа

Процедура Использование_РаспределениеНДС(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Ложь);
	УчетНДСРФ.ПроверитьКорректностьПримененияПравила5Процентов(ПараметрыОбработчика);
	
	Если ЗакрытиеМесяцаСервер.СостояниеЭтапаОпределено(ПараметрыОбработчика.ДанныеЭтапа)
	 И ЗакрытиеМесяцаСервер.ТребуетсяПересчетЭтапа(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрытиеМесяцаСервер.ПроверитьНаличиеРегламентногоДокументаЭтапаЗакрытияМесяца(
		ПараметрыОбработчика,
		Метаданные.Документы.РаспределениеНДС.Имя);
	
КонецПроцедуры

Процедура Выполнить_РаспределениеНДС(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	НачалоПериода = НачалоМесяца(ПараметрыРасчета.ПериодРегистрации);
	КонецПериода  = КонецМесяца(ПараметрыРасчета.ПериодРегистрации);
	
	НомерЗаданияДоРасчета = ЗакрытиеМесяцаСервер.УвеличитьНомерЗадания();
	
	НачатьТранзакцию();
	
	Попытка
		
		ЗакрытиеМесяцаСервер.ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета, ПараметрыРасчета.МассивОрганизаций, ПараметрыОбработчика.ДанныеЭтапа.Код);
		
		ДанныеКРаспределению = ЗакрытиеМесяцаСервер.ЗаданияКРасчетуЗаМесяц(
			НачалоПериода,
			КонецПериода,
			НомерЗаданияДоРасчета,
			ПараметрыРасчета.МассивОрганизаций,
			ПараметрыОбработчика.ДанныеЭтапа.Код);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='При выполнении расчета за период %1 произошла ошибка:
				|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
			РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
			ПараметрыОбработчика,
			ТекстОшибки,
			ПараметрыРасчета.МассивОрганизаций,
			ПараметрыРасчета.ПериодРегистрации);
		
	КонецПопытки;
	
	РезультатРаспределенияНДС = Документы.РаспределениеНДС.РаспределитьНДС(
		ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации, 
		ДанныеКРаспределению.Организация);
	
	Если РезультатРаспределенияНДС.РассчитанныеОрганизации.Количество() > 0 Тогда
		
		НачатьТранзакцию();
		
		Попытка
			
			ЗакрытиеМесяцаСервер.ЗаблокироватьРегистрЗаданий(
				НомерЗаданияДоРасчета,
				ПараметрыРасчета.МассивОрганизаций,
				ПараметрыОбработчика.ДанныеЭтапа.Код);
			
			ЗакрытиеМесяцаСервер.ЗафиксироватьРасчет(
				Неопределено,
				НомерЗаданияДоРасчета,
				ПараметрыОбработчика.ДанныеЭтапа.Код,
				ДанныеКРаспределению);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='При выполнении расчета за период %1 произошла ошибка:
					|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(НачалоПериода),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ТекстОшибки,
				ПараметрыРасчета.МассивОрганизаций,
				ПараметрыРасчета.ПериодРегистрации);
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

//-- Локализация

#Область ФормированиеДвиженийПоНДС

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - ТаблицаЗначений - См. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_ФормированиеДвиженийПоНДС(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоНДС,
		Истина, Ложь, Ложь);
	НоваяСтрока.ТекстВыполнить = НСтр("ru='Сформировать'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"УчетНДСУП.Использование_ФормированиеДвиженийПоНДС");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"УчетНДСУП.Выполнить_ФормированиеДвиженийПоНДС");
		
КонецПроцедуры

#Область ОбработчикиЭтапа

Процедура Использование_ФормированиеДвиженийПоНДС(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ДанныеРегистра.Период) КАК ДатаОкончания,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.Регистратор) КАК Количество
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.РегламентнаяОперация
	|	И ДанныеРегистра.Период <= &КонецПериода
	|	И (ДанныеРегистра.Организация В (&МассивОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ДанныеРегистра.Регистратор) > 0
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ДанныеРегистра.Месяц) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.СчетФактура) КАК Количество
	|ИЗ
	|	РегистрСведений.ЗаданияКФормированиюДвиженийПоНДС КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.Месяц <= &КонецПериода
	|	И (ДанныеРегистра.Организация В (&МассивОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ДанныеРегистра.СчетФактура) > 0
	|";
	
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", Ложь);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика,
		МассивРезультатов[0].Выгрузить().Количество()
		+ МассивРезультатов[1].Выгрузить().Количество());
	
	ЕстьОтраженныеВУчете                = НЕ МассивРезультатов[0].Пустой();
	ЕстьОжидающиеОтражения              = НЕ МассивРезультатов[1].Пустой();
	
	Если ЕстьОжидающиеОтражения Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ожидает отражения в учете НДС: %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
				СокрЛП(МассивРезультатов[1].Выгрузить()[0].Количество)));
		
	КонецЕсли;
	
	Если НЕ ЕстьОжидающиеОтражения И НЕ ЕстьОтраженныеВУчете Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Нет документов для обработки.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Выполнить_ФормированиеДвиженийПоНДС(ПараметрыОбработчика) Экспорт
	
	ВыполнитьФормированиеДвиженийПоНДС( 
		КонецМесяца(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации),
		ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ФормированиеЗаданийПоУчетуНДС

// Создает записи регистра по данным документов, влияющих на учет НДС
//
// Параметры:
//   МассивДокументов - Массив - ссылки на документы.
//
Процедура СформироватьЗаданияПоДокументам(МассивДокументов) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// В РИБ данный регистр обрабатывается только в главном узле.
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	УчетНДСЛокализация.СформироватьЗаданияПоДокументам(МассивДокументов);
	
КонецПроцедуры

// Выполняет формирование заданий по учету НДС по результатам изменения партионных регистров.
//
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер, который содержит временную таблицу ВтИзменениеПартий
//	   ВтИзменениеПартий должна содержать поля: 
//	   * Период - Дата - Период движения партии.
//	   * Организация - СправочникСсылка.Организации - Организация учета партии.
//	   * КорВидДеятельностиНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Новый вид деятельности раздельного учета НДС 
//
Процедура СформироватьЗаданияДляРаспределенияНДС(МенеджерВременныхТаблиц) Экспорт
	
	//++ Локализация
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Партии.Месяц 		КАК Месяц,
	|	Партии.Организация	КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.РаспределениеНДС) КАК Операция
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(Партии.Период, КВАРТАЛ), МЕСЯЦ) КАК Месяц,
	|		Партии.Организация                                         КАК Организация
	|	ИЗ
	|		ВтИзменениеПартий КАК Партии
	|	ГДЕ
	|		Партии.КорВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(Партии.Период, КВАРТАЛ), МЕСЯЦ) КАК Месяц,
	|		Партии.Организация                                         КАК Организация
	|	ИЗ
	|		ВтИзменениеПартий КАК Партии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Документ.РаспределениеНДС КАК РаспределениеНДС
	|		ПО
	|			КОНЕЦПЕРИОДА(Партии.Период, МЕСЯЦ) = КОНЕЦПЕРИОДА(РаспределениеНДС.Дата, МЕСЯЦ)
	|			И Партии.Организация = РаспределениеНДС.Организация
	|			И РаспределениеНДС.Проведен
	|	ГДЕ
	|		Партии.КорВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПоФактическомуИспользованию)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(Партии.Период, МЕСЯЦ)                        КАК Месяц,
	|		Партии.Организация                                         КАК Организация
	|	ИЗ
	|		ВтИзменениеПартий КАК Партии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Документ.РаспределениеНДС КАК РаспределениеНДС
	|		ПО
	|			КОНЕЦПЕРИОДА(Партии.Период, МЕСЯЦ) = КОНЕЦПЕРИОДА(РаспределениеНДС.Дата, МЕСЯЦ)
	|			И Партии.Организация = РаспределениеНДС.Организация
	|			И РаспределениеНДС.Проведен
	|	ГДЕ
	|		Партии.КорВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ВводОСВЭксплуатацию)
	|	) КАК Партии
	|";
	
	РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьЗаписиРегистраПоДаннымВыборки(Запрос.Выполнить().Выбрать());
	//-- Локализация
	
КонецПроцедуры

// Выполняет формирование заданий по учету НДС по результатам изменения партионных регистров.
//
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер, который содержит временную таблицу ВтИзменениеПартий
//	   ВтИзменениеПартий должна содержать поля: 
//	   * Период - Дата - Период движения партии.
//	   * Организация - СправочникСсылка.Организации - Организация учета партии.
//	   * СчетФактура - ОпределяемыйТип.СчетФактура - Документ приобретения (документ учета входящего НДС).
//	   * ВидДеятельностиНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Исходный вид деятельности раздельного учета НДС
//	   * КорВидДеятельностиНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Новый вид деятельности раздельного учета НДС 
//
Процедура СформироватьЗаданияДляФормированияКнигиПокупокПродаж(МенеджерВременныхТаблиц) Экспорт
	
	//++ Локализация
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Партии.Период, МЕСЯЦ)     КАК Месяц,
	|	Партии.Организация                      КАК Организация,
	|	Партии.СчетФактура                      КАК СчетФактура
	|ИЗ
	|	ВтИзменениеПартий КАК Партии
	|ГДЕ
	|	Партии.КорВидДеятельностиНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|	И (Партии.КорВидДеятельностиНДС <> Партии.ВидДеятельностиНДС
	|		ИЛИ Партии.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПроизводствоСДЦ)
	|		ИЛИ Партии.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт)
	|		ИЛИ Партии.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров)
	|		ИЛИ Партии.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг))
	|";
	
	РегистрыСведений.ЗаданияКФормированиюДвиженийПоНДС.СоздатьЗаписиРегистраПоДаннымВыборки(Запрос.Выполнить().Выбрать());
	//-- Локализация
	
КонецПроцедуры


// Возвращает таблицу описания изменений расчетов для формирования заданий на отражение в учете НДС
//
// Возвращаемое значение:
//   ТаблицаЗначений   - таблица значений с колонками:
//     * Документ - документ оплаты, расчетный документ, по которому оформлен счет-фактура
//     * Период - Дата - период изменений состояния расчетов по документу
//     * Контрагент - СправочникСсылка.Контрагенты - контрагент, по которому изменились расчеты.
//     * Организация - СправочникСсылка.Организации - организация, по которой изменились расчеты.
//
Функция НоваяТаблицаИзмененийРасчетов() Экспорт
	
	ТаблицаИзменений = Новый ТаблицаЗначений;
	ТаблицаИзменений.Колонки.Добавить("Документ", Документы.ТипВсеСсылки());
	ТаблицаИзменений.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаИзменений.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаИзменений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	Возврат ТаблицаИзменений;
	
КонецФункции // НоваяТаблицаИзмененийРасчетов()

// Выполняет отражение в учете НДС изменение состояния взаиморасчетов с поставщиками.
//
// Параметры:
// 	ТаблицаИзменений - таблица значений с колонками
//		* Документ - документ, по которому изменилось состояние взаиморасчетов
//		* Период - период изменения
//
Процедура ОтразитьВУчетеНДСИзменениеРасчетовСПоставщиками(ТаблицаИзменений) Экспорт
	
	УчетНДСЛокализация.ОтразитьВУчетеНДСИзменениеРасчетовСПоставщиками(ТаблицаИзменений);
	
КонецПроцедуры

// Выполняет отражение в учете НДС изменение состояния взаиморасчетов с клиентами.
//
// Параметры:
// 	ТаблицаИзменений - таблица значений с колонками
//		* Документ - документ, по которому изменилось состояние взаиморасчетов
//		* Период - период изменения
//
Процедура ОтразитьВУчетеНДСИзменениеРасчетовСКлиентами(ТаблицаИзменений) Экспорт
	
	
	УчетНДСЛокализация.ОтразитьВУчетеНДСИзменениеРасчетовСКлиентами(ТаблицаИзменений);
	
КонецПроцедуры

// Возвращает текст запроса формирования заданий по учету НДС при изменении движений регистре учета выручки (доходов).
//
// Параметры:
// 	ИмяТаблицыИзмененийРегистра - Строка - Имя временной таблицы изменений контрольного регистра.
// 	          Временная таблица должна содержать колонки:
// 	          * Период - Дата - Период изменения выручки.
// 	          * Организация - СправочникСсылка.Организации - Организация, в которой изменилась выручка.
// 	          * Регистратор - ДокументСсылка - Документ-регистратор движений
// 
// Возвращаемое значение:
// 	ТекстЗапроса - Строка - Текст запроса формирования заданий по учету НДС.
//
Функция ТекстЗапросаФормированияЗаданийПриИзмененииВыручки(ИмяТаблицыИзмененийРегистра) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДАТАВРЕМЯ(1,1,1) КАК Месяц,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ПустаяСсылка) КАК Операция,
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Документ
	|ГДЕ
	|	ЛОЖЬ
	|";
	
	//++ Локализация
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Таблица.Период, МЕСЯЦ) КАК Месяц,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.РаспределениеНДС) КАК Операция,
	|	Таблица.Организация КАК Организация,
	|	Таблица.Регистратор КАК Документ
	|ИЗ
	|	#ИмяТаблицыИзмененийРегистра КАК Таблица
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.РаспределениеНДС КАК РаспределениеНДС
	|	ПО
	|		КОНЕЦПЕРИОДА(Таблица.Период, МЕСЯЦ) = КОНЕЦПЕРИОДА(РаспределениеНДС.Дата, МЕСЯЦ)
	|		И Таблица.Организация = РаспределениеНДС.Организация
	|		И РаспределениеНДС.Проведен
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(Таблица.Период, КВАРТАЛ), МЕСЯЦ) КАК Месяц,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.РаспределениеНДС) КАК Операция,
	|	Таблица.Организация КАК Организация,
	|	Таблица.Регистратор КАК Документ
	|ИЗ
	|	#ИмяТаблицыИзмененийРегистра КАК Таблица
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.РаспределениеНДС КАК РаспределениеНДС
	|	ПО
	|		КОНЕЦПЕРИОДА(Таблица.Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(РаспределениеНДС.Дата, МЕСЯЦ)
	|		И Таблица.Организация = РаспределениеНДС.Организация
	|		И РаспределениеНДС.Проведен
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Таблица.Период, МЕСЯЦ) КАК Месяц,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ФормированиеСводныхСправокНДС) КАК Операция,
	|	Таблица.Организация КАК Организация,
	|	Таблица.Регистратор КАК Документ
	|ИЗ
	|	#ИмяТаблицыИзмененийРегистра КАК Таблица
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СводнаяСправкаНДС КАК СводнаяСправкаНДС
	|	ПО
	|		КОНЕЦПЕРИОДА(Таблица.Период, МЕСЯЦ) = КОНЕЦПЕРИОДА(СводнаяСправкаНДС.Дата, МЕСЯЦ)
	|		И СводнаяСправкаНДС.Проведен
	|		И НЕ СводнаяСправкаНДС.Исправление
	|		И НЕ СводнаяСправкаНДС.Корректировочная
	|";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяТаблицыИзмененийРегистра", ИмяТаблицыИзмененийРегистра);
	//-- Локализация
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса формирования заданий по учету НДС при принятии к учету или модернизации ВНА.
//
// Параметры:
// 	ИмяТаблицыИзмененийРегистра - Строка - Имя временной таблицы изменений контрольного регистра.
// 	          Временная таблица должна содержать колонки:
// 	          * Период - Дата - Период принятия к учету или модернизации ВНА.
// 	          * Организация - СправочникСсылка.Организации - Организация, в которой отражается операция.
// 	          * Регистратор - ДокументСсылка - Документ-регистратор движений
// 
// Возвращаемое значение:
// 	ТекстЗапроса - Строка - Текст запроса формирования заданий по учету НДС.
//
Функция ТекстЗапросаФормированияЗаданийПриПринятииКУчетуИлиМодернизацииВНА(ИмяТаблицыИзмененийРегистра) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДАТАВРЕМЯ(1,1,1) КАК Месяц,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ПустаяСсылка) КАК Операция,
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Документ
	|ГДЕ
	|	ЛОЖЬ
	|";
	
	//++ Локализация
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Таблица.Период, МЕСЯЦ) КАК Месяц,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.РаспределениеНДС) КАК Операция,
	|	Таблица.Организация КАК Организация,
	|	Таблица.Регистратор КАК Документ
	|ИЗ
	|	%ИмяТаблицыИзмененийРегистра КАК Таблица
	|
	|";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицыИзмененийРегистра", ИмяТаблицыИзмененийРегистра);
	//-- Локализация
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса формирования заданий по учету НДС при регистрации партий НДС к распределению.
//
// Параметры:
// 	ИмяТаблицыИзмененийРегистра - Строка - Имя временной таблицы изменений контрольного регистра.
// 	          Временная таблица должна содержать колонки:
// 	          * Период - Дата - Период регистрации партий.
// 	          * Организация - СправочникСсылка.Организации - Организация, в которой регистрируются партии.
// 	          * Регистратор - ДокументСсылка - Документ-регистратор движений
// 
// Возвращаемое значение:
// 	ТекстЗапроса - Строка - Текст запроса формирования заданий по учету НДС.
//
Функция ТекстЗапросаФормированияЗаданийПриЗаписиПартийНДСКРаспределению(ИмяТаблицыИзмененийРегистра) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДАТАВРЕМЯ(1,1,1) КАК Месяц,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ПустаяСсылка) КАК Операция,
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Документ
	|ГДЕ
	|	ЛОЖЬ
	|";
	//++ Локализация
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(Таблица.Период, КВАРТАЛ), МЕСЯЦ) КАК Месяц,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.РаспределениеНДС) КАК Операция,
	|	Таблица.Организация КАК Организация,
	|	Таблица.Регистратор КАК Документ
	|ИЗ
	|	%ИмяТаблицыИзмененийРегистра КАК Таблица
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОНЕЦПЕРИОДА(Таблица.Период, МЕСЯЦ) КАК Месяц,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.РаспределениеНДС) КАК Операция,
	|	Таблица.Организация КАК Организация,
	|	Таблица.Регистратор КАК Документ
	|ИЗ
	|	%ИмяТаблицыИзмененийРегистра КАК Таблица
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.РаспределениеНДС КАК РаспределениеНДС
	|	ПО
	|		КОНЕЦПЕРИОДА(Таблица.Период, МЕСЯЦ) = КОНЕЦПЕРИОДА(РаспределениеНДС.Дата, МЕСЯЦ)
	|		И Таблица.Организация = РаспределениеНДС.Организация
	|		И РаспределениеНДС.Проведен
	|";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицыИзмененийРегистра", ИмяТаблицыИзмененийРегистра);
	//-- Локализация
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса формирования заданий по учету НДС при регистрации данных оснований счетов-фактур.
//
// Параметры:
// 	ИмяТаблицыИзмененийРегистра - Строка - Имя временной таблицы изменений контрольного регистра.
// 	          Временная таблица должна содержать колонки:
// 	          * Период - Дата - Период регистрации партий.
// 	          * Организация - СправочникСсылка.Организации - Организация, в которой регистрируются партии.
// 	          * Регистратор - ДокументСсылка - Документ-регистратор движений
// 	          * ТипСчетаФактуры - СправочникСсылка.ИдентификаторыОбъектовМетаданных - тип счета-фактуры/сводной справки НДС.
// 
// Возвращаемое значение:
// 	ТекстЗапроса - Строка - Текст запроса формирования заданий по учету НДС.
//
Функция ТекстЗапросаФормированияЗаданийПриЗаписиДанныхОснованийСчетовФактур(ИмяТаблицыИзмененийРегистра) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДАТАВРЕМЯ(1,1,1) КАК Месяц,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ПустаяСсылка) КАК Операция,
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Документ
	|ГДЕ
	|	ЛОЖЬ
	|";
	//++ Локализация
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(Таблица.Период, КВАРТАЛ), МЕСЯЦ) КАК Месяц,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ФормированиеСводныхСправокНДС) КАК Операция,
	|	Таблица.Организация КАК Организация,
	|	Таблица.Регистратор КАК Документ
	|ИЗ
	|	#ИмяТаблицыИзмененийРегистра КАК Таблица
	|ГДЕ
	|	Таблица.ТипСчетаФактуры = &ИдентификаторСводнаяСправкаНДС
	|";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяТаблицыИзмененийРегистра", ИмяТаблицыИзмененийРегистра);
	//-- Локализация
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует записи в регистр заданий по учету НДС при проведении документа.
//
// Параметры:
// 	Документы - ДокументСсылка - Ссылка на проводимый документ
// 	ДополнительныеСвойства - Структура - Дополнительные свойства документа-объекта, сформированные для проведения.
// 	                                     см. ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения().
// 	                                     В доп. свойствах содержатся временные таблицы с изменениями в контрольных регистрах для учета НДС.
// 
Процедура ОтразитьЗаписиРегистраЗаданий(Документ, ДополнительныеСвойства) Экспорт
	
	//++ Локализация
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // задания устанавливаются только в главном узле.
		Возврат;
	КонецЕсли;
	
	КонтрольныеВременныеТаблицы = Новый Массив();
	КонтрольныеВременныеТаблицы.Добавить("НДСПредъявленныйЗадания");
	КонтрольныеВременныеТаблицы.Добавить("СостоянияБлокировкиВычетаНДСПоСчетамФактурамЗадания");
	КонтрольныеВременныеТаблицы.Добавить("НДССостояниеРеализации0Задания");
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	ВременныеТаблицы = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	ШаблонЗапросаВыборки = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Месяц        КАК Месяц,
	|	Таблица.Организация  КАК Организация,
	|	Таблица.СчетФактура  КАК СчетФактура
	|ИЗ
	|	&ВременнаяТаблица КАК Таблица
	|";
	
	МассивЗапросовВыборкиЗаданий = Новый Массив;
	МассивЗапросовУничтоженияВт = Новый Массив;	
	Для Каждого ВременнаяТаблица Из КонтрольныеВременныеТаблицы Цикл
		Если ВременныеТаблицы.Таблицы.Найти(ВременнаяТаблица) <> Неопределено Тогда
			ТекстЗапроса = СтрЗаменить(ШаблонЗапросаВыборки, "&ВременнаяТаблица", ВременнаяТаблица);
			МассивЗапросовВыборкиЗаданий.Добавить(ТекстЗапроса);
			
			ТекстЗапросаУничтожения = СтрЗаменить("УНИЧТОЖИТЬ &ВременнаяТаблица", "&ВременнаяТаблица", ВременнаяТаблица);
			МассивЗапросовУничтоженияВт.Добавить(ТекстЗапросаУничтожения);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивЗапросовВыборкиЗаданий.Количество() > 0 Тогда
		
		ТекстЗапросаВыборки = СтрСоединить(МассивЗапросовВыборкиЗаданий, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
		ТекстЗапросаУничтоженияВт = СтрСоединить(МассивЗапросовУничтоженияВт, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
		
		МассивТекстовЗапроса = Новый Массив;
		МассивТекстовЗапроса.Добавить(ТекстЗапросаВыборки);
		МассивТекстовЗапроса.Добавить(ТекстЗапросаУничтоженияВт);
		Запрос.Текст = СтрСоединить(МассивТекстовЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат; // нет данных к записи
		КонецЕсли;
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			РегистрыСведений.ЗаданияКФормированиюДвиженийПоНДС.СоздатьЗаписьРегистра(
				Выборка.Месяц,
				Выборка.СчетФактура,
				Выборка.Организация);
		КонецЦикла;
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Выполняет доп. обработку заданий к закрытию месяца перед записью.
//
// Параметры
// 	Месяц - Дата - Месяц, на который формируется задание.
// 	Операция - ПеречислениеСсылка.ОперацииЗакрытияМесяца - Операция закрытия месяца, на выполнение которой формируется задание.
// 	Организация - СправочникСсылка.Организации - Организация, по которой формируется задание.
// 	Документ - ДокументСсылка - Документ, проведение которого инициирует задание.
//
Процедура ПередЗаписьюЗаданийКЗакрытиюМесяца(Месяц, Операция, Организация, Документ) Экспорт
	
	//++ Локализация
	//-- Локализация
		
КонецПроцедуры

#КонецОбласти
#Область ВыполнениеРегламентныхОпераций

// Выполняет отражение документов в учете НДС.
// 
// Параметры:
// 	 КонецПериода - Дата - Период, по который необходимо выполнить отражение.
// 	 МассивСсылок - Массив - Документы, которые необходимо отразить в учете НДС.
//
Процедура ОтразитьДокументыВУчетеНДС(Знач КонецПериода, Знач МассивСсылок) Экспорт
	
	СчетаФактуры = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаФактуры, МассивСсылок);
	
	УчетНДСЛокализация.ДополнитьСчетаФактурыКОтражениюВУчетеНДС(СчетаФактуры, МассивСсылок);
	
	Если СчетаФактуры.Количество() > 0 Тогда
		УчетНДСУПСлужебный.ВыполнитьЗаданияКФормированиюДвиженийПоНДС(КонецМесяца(КонецПериода), Неопределено, СчетаФактуры);
	КонецЕсли;
	
КонецПроцедуры

// Отражает документы в учете НДС, если есть задания.
//
// Параметры:
// 	КонецПериода - Дата - Период, по который необходимо выполнить задания.
// 	Организация - Организация, Массив - Организация или массив организаций для отбора заданий.
// 	СчетаФактуры - ДокументСсылка, Массив - Документ учета НДС или массив документов, по которым необходимо выполнить задания.
//
Процедура ВыполнитьФормированиеДвиженийПоНДС(КонецПериода, Организация = Неопределено, СчетаФактуры = Неопределено) Экспорт
	
	Если Организация <> Неопределено Тогда
		МассивОрганизаций = ОбщегоНазначенияУТКлиентСервер.Массив(Организация);
	Иначе
		МассивОрганизаций = Неопределено;
	КонецЕсли;
	
	Если СчетаФактуры <> Неопределено Тогда
		МассивСчетовФактур = ОбщегоНазначенияУТКлиентСервер.Массив(СчетаФактуры);
	Иначе
		МассивСчетовФактур = Неопределено;
	КонецЕсли;
	
	УчетНДСУПСлужебный.ВыполнитьЗаданияКФормированиюДвиженийПоНДС(КонецПериода, МассивОрганизаций, МассивСчетовФактур);
	
КонецПроцедуры

#КонецОбласти

#Область ОписаниеДокументовДляЖурналов

// Добавляет в переданную таблицу хозяйственные операции и документы учета НДС
// для журнала документов Закупи
//
// Параметры:
//  ХозяйственныеОперацииИДокументы - ТаблицаЗначений - Состав колонок см. ОбщегоНазначенияУТ.НоваяТаблицаХозяйственныеОперацииИДокументы()
//
Процедура ОписаниеОперацийИТиповДокументовДляЖурналаДокументовЗакупки(ХозяйственныеОперацииИДокументы) Экспорт
	
	УчетНДСЛокализация.ДополнитьОписаниеОперацийИТиповДокументовДляЖурналаДокументовЗакупки(ХозяйственныеОперацииИДокументы);
	
КонецПроцедуры

// Добавляет в переданную таблицу хозяйственные операции и документы учета НДС
// для журнала документов Продажи
//
// Параметры:
//  ТЗХозОперацииИТипыДокументов - ТаблицаЗначений - Состав колонок см. Обработка.ЖурналДокументовПродажи.Форма.СписокДокументов.ХозяйственныеОперацииИДокументы
//
Процедура ОписаниеОперацийИТиповДокументовДляЖурналаДокументовПродажи(ТЗХозОперацииИТипыДокументов) Экспорт
	
	УчетНДСЛокализация.ДополнитьОписаниеОперацийИТиповДокументовДляЖурналаДокументовПродажи(ТЗХозОперацииИТипыДокументов);

КонецПроцедуры

// Добавляет в переданную таблицу хозяйственные операции и документы учета НДС
// для журнала документов Переработки
//
// Параметры:
//  ТЗХозОперацииИТипыДокументов - ТаблицаЗначений - Состав колонок см. Обработка.ЖурналДокументовПереработки.Форма.СписокДокументов.ХозяйственныеОперацииИДокументы
//
Процедура ОписаниеОперацийИТиповДокументовДляЖурналаДокументовПереработки(ТЗХозОперацииИТипыДокументов) Экспорт
	
	//++ Локализация
	// СчетФактураВыданный
	
	Строка = ТЗХозОперацииИТипыДокументов.Добавить();
	Строка.КлючНазначенияИспользования	= "ДокументыПередачиВПереработку";
	Строка.ХозяйственнаяОперация		= Перечисления.ХозяйственныеОперации.ПроизводствоУПереработчика;
	Строка.ДобавитьКнопкуСоздать		= Истина;
	Строка.ТипДокумента					= Тип("ДокументСсылка.СчетФактураПолученный");
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.СчетФактураПолученный.ПолноеИмя();
	Строка.ЗаголовокРабочегоМеста		= НСтр("ru = 'Документы передачи в переработку (все)'");
	Строка.Порядок						= 24;
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область ПодключениеКБСП

// Дополняет профиль ролями доступа к метаданным подсистемы учета НДС.
//
// Параметры:
//	ОписаниеПрофиля - Структура - Описание профиля. 
//                                Состав свойств структуры см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа.
//
Процедура ДобавитьПолныйДоступКУчетуНДС(ОписаниеПрофиля) Экспорт
	
	//++ Локализация
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеКорректировокВидовДеятельностиНДС");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеНДССостояниеРеализации0");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеТаможенныхДекларацийИмпорта");
	
	ОписаниеПрофиля.Роли.Добавить("ЧтениеКорректировокВидовДеятельностиНДС");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеРегистровНДС");
	
	ДобавитьДобавлениеИзменениеСчетовФактурВыданных(ОписаниеПрофиля);
	ДобавитьДобавлениеИзменениеСчетовФактурВыданныхНаАванс(ОписаниеПрофиля);
	ДобавитьДобавлениеИзменениеСчетовФактурКомиссионеру(ОписаниеПрофиля);
	ДобавитьДобавлениеИзменениеСчетовФактурКомитента(ОписаниеПрофиля);
	ДобавитьДобавлениеИзменениеСчетовФактурНалоговогоАгента(ОписаниеПрофиля);
	ДобавитьДобавлениеИзменениеСчетовФактурНаНеподтвержденнуюРеализацию0(ОписаниеПрофиля);
	ДобавитьДобавлениеИзменениеСчетовФактурПолученных(ОписаниеПрофиля);
	ДобавитьДобавлениеИзменениеСчетовФактурПолученныхНаАванс(ОписаниеПрофиля);
	ДобавитьДобавлениеИзменениеСчетовФактурПолученныхНалоговогоАгента(ОписаниеПрофиля);
	ДобавитьДобавлениеИзменениеЗаявленийОВвозеТоваров(ОписаниеПрофиля);
	ДобавитьЧтениеТоваровКОформлениюТаможенныхДеклараций(ОписаниеПрофиля);
	ДобавитьЧтениеДокументовПоУчетуНДС(ОписаниеПрофиля);
	//-- Локализация
	
КонецПроцедуры

// Дополняет профиль ролями доступа к метаданным подсистемы учета НДС.
//
// Параметры:
//	ОписаниеПрофиля - Структура - Описание профиля. 
//                                Состав свойств структуры см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа.
//
Процедура ДобавитьЧтениеТаможенныхДекларацийИмпорта(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ЧтениеТаможенныхДекларацийИмпорта");
	
КонецПроцедуры

// Дополняет профиль ролями доступа к метаданным подсистемы учета НДС.
//
// Параметры:
//	ОписаниеПрофиля - Структура - Описание профиля. 
//                                Состав свойств структуры см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа.
//
Процедура ДобавитьДобавлениеИзменениеТаможенныхДекларацийИмпорта(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеТаможенныхДекларацийИмпорта");
	
КонецПроцедуры

// Дополняет профиль ролями доступа к метаданным подсистемы учета НДС.
//
// Параметры:
//	ОписаниеПрофиля - Структура - Описание профиля. 
//                                Состав свойств структуры см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа.
//
Процедура ДобавитьЧтениеТоваровКОформлениюТаможенныхДеклараций(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ЧтениеТоваровКОформлениюТаможенныхДеклараций");
	
КонецПроцедуры

// Дополняет профиль ролями доступа к метаданным подсистемы учета НДС.
//
// Параметры:
//	ОписаниеПрофиля - Структура - Описание профиля. 
//                                Состав свойств структуры см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа.
//
Процедура ДобавитьЧтениеДокументовПоУчетуНДС(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ЧтениеДокументовПоУчетуНДС");
	
КонецПроцедуры

// Дополняет профиль ролями доступа к метаданным подсистемы учета НДС.
//
// Параметры:
//	ОписаниеПрофиля - Структура - Описание профиля. 
//                                Состав свойств структуры см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа.
//
Процедура ДобавитьДобавлениеИзменениеЗаявленийОВвозеТоваров(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЗаявленийОВвозеТоваров");
	
КонецПроцедуры


// См. ОбщийМодуль.ВариантыОтчетовПереопределяемый.ОпределитьОбъектыСКомандамиОтчетов()
//
Процедура ОпределитьОбъектыСКомандамиОтчетов(Объекты) Экспорт
	
	Объекты.Добавить(Метаданные.Документы.СписаниеНДСНаРасходы);
	Объекты.Добавить(Метаданные.Документы.ТаможеннаяДекларацияИмпорт);
	
	УчетНДСЛокализация.ОпределитьОбъектыСКомандамиОтчетов(Объекты);

КонецПроцедуры

// См. ОбщийМодуль.ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов()
// 
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	УчетНДСЛокализация.НастроитьВариантыОтчетов(Настройки);
	
КонецПроцедуры

// См. ОбщийМодуль.ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения()
//
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт

	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.СписаниеНДСНаРасходы", "Дата", "РегламентныеОперации", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ТаможеннаяДекларацияИмпорт", "Дата", "ЗакупкиВозвратыПоставщикамПеремещенияСборки", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.НДСПредъявленный", "Период", "РегламентныеОперации", "Организация");
	
	УчетНДСЛокализация.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);

КонецПроцедуры

// См. ОбщийМодуль.ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту()
//	
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	УчетНДСЛокализация.ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды);
	
КонецПроцедуры

// См. ОбщийМодуль.СозданиеНаОснованииПереопределяемый.ПриОпределенииОбъектовСКомандамиСозданияНаОсновании()
//   
Процедура ПриОпределенииОбъектовСКомандамиСозданияНаОсновании(Объекты) Экспорт
	
	Объекты.Добавить(Метаданные.Документы.ТаможеннаяДекларацияИмпорт);

	УчетНДСЛокализация.ПриОпределенииОбъектовСКомандамиСозданияНаОсновании(Объекты)
	
КонецПроцедуры

// Определяет объекты конфигурации, в модулях менеджеров которых размещена процедура ДобавитьКомандыПечати,
// формирующая список команд печати, предоставляемых этим объектом.
// Синтаксис процедуры ДобавитьКомандыПечати см. в документации к подсистеме.
//
// Параметры:
//  СписокОбъектов - Массив - менеджеры объектов с процедурой ДобавитьКомандыПечати.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.ТаможеннаяДекларацияИмпорт);

	УчетНДСЛокализация.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	
КонецПроцедуры

// Переопределяет список команд печати, получаемый функцией УправлениеПечатью.КомандыПечатиФормы.
// Используется для общих форм, у которых нет модуля менеджера для размещения в нем процедуры ДобавитьКомандыПечати,
// для случаев, когда штатных средств добавления команд в такие формы недостаточно. Например, если нужны свои команды,
// которых нет в других объектах.
// 
// Параметры:
//  ИмяФормы             - Строка - полное имя формы, в которой добавляются команды печати;
//  КомандыПечати        - ТаблицаЗначений - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати;
//  СтандартнаяОбработка - Булево - при установке значения Ложь не будет автоматически заполняться коллекция КомандыПечати.
//
Процедура ПередДобавлениемКомандПечати(ИмяФормы, КомандыПечати, СтандартнаяОбработка) Экспорт
	
	УчетНДСЛокализация.ПередДобавлениемКомандПечати(ИмяФормы, КомандыПечати, СтандартнаяОбработка);
	
КонецПроцедуры

// См. ОбщийМодуль.УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа()
//
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Документы.СписаниеНДСНаРасходы, Истина);
	Списки.Вставить(Метаданные.Документы.ТаможеннаяДекларацияИмпорт, Истина);
	Списки.Вставить(Метаданные.Справочники.ТаможеннаяДекларацияИмпортПрисоединенныеФайлы, Истина);
		
	УчетНДСЛокализация.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	
КонецПроцедуры

// Дополняет профиль ролями доступа к метаданным подсистемы учета НДС.
//
// Параметры:
//	ОписаниеПрофиля - Структура - Описание профиля. 
//                                Состав свойств структуры см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа.
//
Процедура ДобавитьЧтениеСчетовФактурВыданных(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ЧтениеСчетовФактурВыданных");
	
КонецПроцедуры

// Дополняет профиль ролями доступа к метаданным подсистемы учета НДС.
//
// Параметры:
//	ОписаниеПрофиля - Структура - Описание профиля. 
//                                Состав свойств структуры см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа.
//
Процедура ДобавитьДобавлениеИзменениеСчетовФактурВыданных(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеСчетовФактурВыданных");
	
КонецПроцедуры

// Дополняет профиль ролями доступа к метаданным подсистемы учета НДС.
//
// Параметры:
//	ОписаниеПрофиля - Структура - Описание профиля. 
//                                Состав свойств структуры см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа.
//
Процедура ДобавитьЧтениеСчетовФактурКомиссионеру(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ЧтениеСчетовФактурКомиссионеру");
	
КонецПроцедуры

// Дополняет профиль ролями доступа к метаданным подсистемы учета НДС.
//
// Параметры:
//	ОписаниеПрофиля - Структура - Описание профиля. 
//                                Состав свойств структуры см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа.
//
Процедура ДобавитьДобавлениеИзменениеСчетовФактурКомиссионеру(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеСчетовФактурКомиссионеру");
	
КонецПроцедуры

// Дополняет профиль ролями доступа к метаданным подсистемы учета НДС.
//
// Параметры:
//	ОписаниеПрофиля - Структура - Описание профиля. 
//                                Состав свойств структуры см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа.
//
Процедура ДобавитьЧтениеСчетовФактурКомитента(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ЧтениеСчетовФактурКомитента");
	
КонецПроцедуры

// Дополняет профиль ролями доступа к метаданным подсистемы учета НДС.
//
// Параметры:
//	ОписаниеПрофиля - Структура - Описание профиля. 
//                                Состав свойств структуры см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа.
//
Процедура ДобавитьДобавлениеИзменениеСчетовФактурКомитента(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеСчетовФактурКомитента");
	
КонецПроцедуры

// Дополняет профиль ролями доступа к метаданным подсистемы учета НДС.
//
// Параметры:
//	ОписаниеПрофиля - Структура - Описание профиля. 
//                                Состав свойств структуры см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа.
//
Процедура ДобавитьЧтениеСчетовФактурНалоговогоАгента(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ЧтениеСчетовФактурНалоговогоАгента");
	
КонецПроцедуры

// Дополняет профиль ролями доступа к метаданным подсистемы учета НДС.
//
// Параметры:
//	ОписаниеПрофиля - Структура - Описание профиля. 
//                                Состав свойств структуры см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа.
//
Процедура ДобавитьДобавлениеИзменениеСчетовФактурНалоговогоАгента(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеСчетовФактурНалоговогоАгента");
	
КонецПроцедуры

// Дополняет профиль ролями доступа к метаданным подсистемы учета НДС.
//
// Параметры:
//	ОписаниеПрофиля - Структура - Описание профиля. 
//                                Состав свойств структуры см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа.
//
Процедура ДобавитьЧтениеСчетовФактурПолученных(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ЧтениеСчетовФактурПолученных");
	
КонецПроцедуры

// Дополняет профиль ролями доступа к метаданным подсистемы учета НДС.
//
// Параметры:
//	ОписаниеПрофиля - Структура - Описание профиля. 
//                                Состав свойств структуры см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа.
//
Процедура ДобавитьДобавлениеИзменениеСчетовФактурПолученных(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеСчетовФактурПолученных");
	
КонецПроцедуры

// Дополняет профиль ролями доступа к метаданным подсистемы учета НДС.
//
// Параметры:
//	ОписаниеПрофиля - Структура - Описание профиля. 
//                                Состав свойств структуры см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа.
//
Процедура ДобавитьЧтениеСчетовФактурПолученныхНалоговогоАгента(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ЧтениеСчетовФактурПолученныхНалоговогоАгента");
	
КонецПроцедуры

// Дополняет профиль ролями доступа к метаданным подсистемы учета НДС.
//
// Параметры:
//	ОписаниеПрофиля - Структура - Описание профиля. 
//                                Состав свойств структуры см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа.
//
Процедура ДобавитьДобавлениеИзменениеСчетовФактурПолученныхНалоговогоАгента(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеСчетовФактурПолученныхНалоговогоАгента");
	
КонецПроцедуры

// Дополняет профиль ролями доступа к метаданным подсистемы учета НДС.
//
// Параметры:
//	ОписаниеПрофиля - Структура - Описание профиля. 
//                                Состав свойств структуры см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа.
//
Процедура ДобавитьЧтениеСчетовФактурВыданныхНаАванс(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ЧтениеСчетовФактурВыданныхНаАванс");
	
КонецПроцедуры

// Дополняет профиль ролями доступа к метаданным подсистемы учета НДС.
//
// Параметры:
//	ОписаниеПрофиля - Структура - Описание профиля. 
//                                Состав свойств структуры см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа.
//
Процедура ДобавитьДобавлениеИзменениеСчетовФактурВыданныхНаАванс(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеСчетовФактурВыданныхНаАванс");
	
КонецПроцедуры

// Дополняет профиль ролями доступа к метаданным подсистемы учета НДС.
//
// Параметры:
//	ОписаниеПрофиля - Структура - Описание профиля. 
//                                Состав свойств структуры см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа.
//
Процедура ДобавитьЧтениеСчетовФактурПолученныхНаАванс(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ЧтениеСчетовФактурПолученныхНаАванс");
	
КонецПроцедуры

// Дополняет профиль ролями доступа к метаданным подсистемы учета НДС.
//
// Параметры:
//	ОписаниеПрофиля - Структура - Описание профиля. 
//                                Состав свойств структуры см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа.
//
Процедура ДобавитьДобавлениеИзменениеСчетовФактурПолученныхНаАванс(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеСчетовФактурПолученныхНаАванс");
	
КонецПроцедуры

// Дополняет профиль ролями доступа к метаданным подсистемы учета НДС.
//
// Параметры:
//	ОписаниеПрофиля - Структура - Описание профиля. 
//                                Состав свойств структуры см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа.
//
Процедура ДобавитьЧтениеСчетовФактурНаНеподтвержденнуюРеализацию0(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ЧтениеСчетовФактурНаНеподтвержденнуюРеализацию0");
	
КонецПроцедуры

// Дополняет профиль ролями доступа к метаданным подсистемы учета НДС.
//
// Параметры:
//	ОписаниеПрофиля - Структура - Описание профиля. 
//                                Состав свойств структуры см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа.
//
Процедура ДобавитьДобавлениеИзменениеСчетовФактурНаНеподтвержденнуюРеализацию0(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеСчетовФактурНаНеподтвержденнуюРеализацию0");
	
КонецПроцедуры


#КонецОбласти

// Возвращает список типов налогообложения НДС, по которым НДС не учитывается в стоимости, 
// а подлежит принятию к вычету (при выполнении условий).
//
// Возвращаемое значение:
//	Массив - элементы перечисления ТипыНалогообложенияНДС.
//
Функция ТипыНалогообложенияНДСНеУчитываетсяВСтоимости() Экспорт

	Возврат ВидыДеятельностиНДСПринимаетсяКВозмещению();
	
КонецФункции

// Возвращает структуру регистров учета НДС
// 
// Параметры:
// 	РегистрыНДС - Структура - Структура регистров НДС, где
// 	                             Ключ - Имя регистра
// 	                             Значение - Набор записей регистра.
//
Функция РегистрыУчетаНДС() Экспорт
	
	РегистрыНДС = Новый Структура();
	РегистрыНДС.Вставить("НДСПредъявленный",            РегистрыНакопления.НДСПредъявленный.СоздатьНаборЗаписей());
	//++ Локализация
	РегистрыНДС.Вставить("НДСЗаписиКнигиПродаж",        РегистрыНакопления.НДСЗаписиКнигиПродаж.СоздатьНаборЗаписей());
	РегистрыНДС.Вставить("НДСЗаписиКнигиПокупок",       РегистрыНакопления.НДСЗаписиКнигиПокупок.СоздатьНаборЗаписей());
	РегистрыНДС.Вставить("ЖурналУчетаСчетовФактур",     РегистрыСведений.ЖурналУчетаСчетовФактур.СоздатьНаборЗаписей());
	РегистрыНДС.Вставить("ДанныеОснованийСчетовФактур", РегистрыСведений.ДанныеОснованийСчетовФактур.СоздатьНаборЗаписей());
	//-- Локализация
	Возврат РегистрыНДС;
	
КонецФункции


// Возвращает отбор для списка подбора номенклатуры в соответствии с налогообложением операции 
// 
// Параметры:
// 	НалогообложениеНДС - Перечисление.ТипыНалогообложенияНДС - налогообложение операции, в рамках которой производится подбор
// 
// Возвращаемое значение:
// 	Массив - массив структур отбора для справочника Номенклатура
//
Функция ОграничениеТоваровПоНалогообложению(НалогообложениеНДС) Экспорт
	
	Ограничения = Новый Массив;
	
	УчетНДСЛокализация.ДополнитьОграничениеТоваровПоНалогообложению(Ограничения, НалогообложениеНДС);
	
	Возврат Ограничения;
	
КонецФункции

#КонецОбласти


#КонецОбласти



