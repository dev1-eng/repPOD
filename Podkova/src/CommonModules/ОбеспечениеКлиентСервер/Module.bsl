////////////////////////////////////////////////////////////////////////////////
// Модуль "ОбеспечениеКлиентСервер", содержит вспомогательные процедуры
// и функции для интерактивной работы пользователей с обеспечением потребностей.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область МеханизмыОбеспечения

// Возвращает массив значений перечисления "Варианты обеспечения", с учетом типа номенклатуры.
//
// Параметры:
// ТипНоменклатуры 				- ПеречислениеСсылка.ТипыНоменклатуры - тип номенклатуры.
// ДоступныеВариантыОбеспечения - СписокЗначений - список доступных вариантов.
//
// Возвращаемое значение:
// Массив - массив значений перечисления "Варианты обеспечения".
//
Функция ПереченьВариантовОбеспечения(ТипНоменклатуры = Неопределено, ДоступныеВариантыОбеспечения = Неопределено) Экспорт

	УдаляемыеВарианты = Новый Массив();
	Если ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда

		УдаляемыеВарианты.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада"));
		УдаляемыеВарианты.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ИзЗаказов"));
		УдаляемыеВарианты.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Требуется"));

	ИначеЕсли ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда

		УдаляемыеВарианты.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада"));
		УдаляемыеВарианты.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ИзЗаказов"));
		УдаляемыеВарианты.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Требуется"));

		УдаляемыеВарианты.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно"));
		УдаляемыеВарианты.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Обособленно"));

	КонецЕсли;

	Если ДоступныеВариантыОбеспечения = Неопределено Тогда
		ВариантыОбеспечения = Новый СписокЗначений;
		ВариантыОбеспечения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно"));
		ВариантыОбеспечения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить"));
		ВариантыОбеспечения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада"));
		ВариантыОбеспечения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ИзЗаказов"));
		ВариантыОбеспечения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Обособленно"));
		ВариантыОбеспечения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Требуется"));
		ВариантыОбеспечения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется"));
	Иначе
		ВариантыОбеспечения = ДоступныеВариантыОбеспечения;
	КонецЕсли; 

	Для Каждого Элемент Из УдаляемыеВарианты Цикл

		Вариант = ВариантыОбеспечения.НайтиПоЗначению(Элемент);

		Если Вариант <> Неопределено Тогда
			ВариантыОбеспечения.Удалить(Вариант);
		КонецЕсли;

	КонецЦикла;

	Возврат ВариантыОбеспечения;

КонецФункции

// Возвращает параметры для открытия формы Перечисление.ВариантыОбеспечения.Форма.ИсполнениеЗаказа.
// 
// Параметры:
//   ИдентификаторНастройки - Строка - идентификатор настройки, используется для сохранения выбранных вариантов обеспечения
//   ТабличнаяЧасть - ДанныеФормыКоллекция - таблица с полем "ТипНоменклатуры" для заполнения доступных вариантов обеспечения
//   ВыделенныеСтроки - Массив - идентификаторы строк табличной части.
// 
// Возвращаемое значение:
//   Структура - структура параметров.
//
Функция ПараметрыФормыИсполнениеЗаказа(ИдентификаторНастройки, ТабличнаяЧасть = Неопределено, ВыделенныеСтроки = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура();
	
	ПараметрыФормы.Вставить("Тип", ИдентификаторНастройки);
	ПараметрыФормы.Вставить("СписокВыбора", ПереченьВариантовОбеспеченияПоТабличнойЧасти(ТабличнаяЧасть, ВыделенныеСтроки));
	
	ПараметрыФормы.Вставить("ЗаголовокФормы");
	ПараметрыФормы.Вставить("ЗаголовокКомандыЗаполнить");
	ПараметрыФормы.Вставить("ПроверятьЗаполнение", Истина);
	ПараметрыФормы.Вставить("РазрешитьКонтрольЦелостностиУпаковок", Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

#КонецОбласти

#Область СтруктурыДанных

// Возвращает структуру, содержащую значения реквизитов объекта формы.
// Используется для задания вопроса при переносе в документ строк с учетом дат отгрузки.
//  Возвращаемое значение:
//   Структура - структура инициализированная значениями по умолчанию. Содержит поля:
//    * ДатаОтгрузки
//    * ЖелаемаяДатаОтгрузки
//    * НеОтгружатьЧастями
Функция ЗначенияРеквизитовДокументаДляВопросаОбОтгрузкеОднойДатой() Экспорт
	
	Результат = Новый Структура("ДатаОтгрузки, ЖелаемаяДатаОтгрузки, НеОтгружатьЧастями", '00010101', '00010101', Ложь);
	Возврат Результат;
	
КонецФункции

// Возвращает структуру варианта обеспечения.
// 
// Возвращаемое значение:
//   Структура - структура с полями, которые используются для заполнения обеспечения в заказах. Состав полей:
//     * ВариантОбеспечения - ПеречислениеСсылка.ВариантыОбеспечения - соответствует полю "Вариант обеспечения" заказа.
//     * ДатаОтгрузки       - Дата                                   - соответствует полю "Дата отгрузки" заказа.
//     * Склад              - СправочникСсылка.Склады                - соответствует полю "Склад" заказа.
//     * Количество         - Число                                  - соответствует полю "Количество" заказа.
//     * Серия              - СправочникСсылка.СерииНоменклатуры     - соответствует полю "Серия" заказа.
//
Функция СтруктураВариантаОбеспечения() Экспорт

	Возврат Новый Структура("ВариантОбеспечения, ДатаОтгрузки, Склад, Количество, Серия");

КонецФункции

// Возвращает структуру заполнения варианта обеспечения
// 
// Параметры:
//   Объект       - ДокументОбъект, ДанныеФормыСтруктура - данные связанные с заказом.
//   ДатаОтгрузки - Дата                                 - значение поля даты отгрузки заказа.
//
// Возвращаемое значение:
//   Структура - структура с полями:
//    * Объект             - ДокументОбъект, ДанныеФормыСтруктура - данные связанные с заказом.
//    * ДатаОтгрузки       - Дата                                 - значение поля даты отгрузки заказа.
//    * ИмяПоляВШапке      - Строка                               - имя поля даты отгрузки в шапке заказа.
//    * ИмяТипНоменклатуры - Строка, Неопределено                 - имя поля реквизита формы содержащего тип номенклатуры.
//                                                                  Если в документе регистрируются только товары, то Неопределено.
//
Функция СтруктураЗаполненияВариантаОбеспечения(Объект, ДатаОтгрузки) Экспорт

	Результат = Новый Структура("Объект, ДатаОтгрузки, ИмяПоляВШапке, ИмяТипНоменклатуры", Объект, ДатаОтгрузки);

	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказКлиента") Или
		ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		Если Объект.НеОтгружатьЧастями Тогда
			Результат.Вставить("ИмяПоляВШапке", "ДатаОтгрузки");
		КонецЕсли;
		Результат.Вставить("ИмяТипНоменклатуры", "ТипНоменклатуры");

	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление") Тогда
		Если Объект.НеОтгружатьЧастями Тогда
			Результат.Вставить("ИмяПоляВШапке", "ДатаОтгрузки");
		КонецЕсли;
		Результат.Вставить("ИмяТипНоменклатуры", "ТипНоменклатуры");
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказНаСборку") Тогда
		Результат.Вставить("ИмяПоляВШапке", "НачалоСборкиРазборки");
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает варианты обеспечения по умолчанию для каждого типа номенклатуры, в зависимости от стратегии обеспечения.
// Структура вариантов обеспечения нужно инициализировать в документах только если необходимо полностью переопределить
// правила, используемые при заполнении варианта обеспечения по умолчанию. В случае если известен и жестко задан вариант
// обеспечения для каждого типа номенклатуры.
// 
// Параметры:
//  ЗаполнятьОбособленно - Булево - признак использования обособленной стратегии обеспечения.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   *Товар,
//   *МногооборотнаяТара,
//   *Работа,
//   *Услуга.
//   Значение свойства - ПеречислениеСсылка.ВариантыОбеспечения - Вариант обеспечения, используемый по умолчанию для
//   данного типа номенклатуры.
//
Функция ВариантыОбеспеченияПоУмолчанию(ЗаполнятьОбособленно) Экспорт
	
	КОбеспечению   = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Требуется");
	НеОбеспечивать = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется");
	Обособленно    = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Обособленно");
	
	ВариантыОбеспечения = Новый Структура();
	ВариантыОбеспечения.Вставить("Товар",              КОбеспечению);
	ВариантыОбеспечения.Вставить("Тара",               КОбеспечению);
	ВариантыОбеспечения.Вставить("Работа",             НеОбеспечивать);
	ВариантыОбеспечения.Вставить("Услуга",             НеОбеспечивать);
	
	Если ЗаполнятьОбособленно Тогда
		
		ВариантыОбеспечения.Товар  = Обособленно;
		ВариантыОбеспечения.Работа = Обособленно;
		
	КонецЕсли;
		
	Возврат ВариантыОбеспечения;
	
КонецФункции

// Возвращает строковое значение типа номенклатуры используемое в подсистеме обеспечения.
// 
// Параметры:
//  ТипНоменклатуры - ПеречислениеСсылка.ТипаНоменклатуры
//
// Возвращаемое значение:
//  Строка
//
Функция ТипНоменклатурыСтрокой(ТипНоменклатуры) Экспорт
	
	Если ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар") Тогда
		Возврат "Товар";
	ИначеЕсли ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара") Тогда
		Возврат "Тара";
	ИначеЕсли ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
		Возврат "Работа";
	ИначеЕсли ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
		Возврат "Услуга";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СостояниеОбеспеченияЗаказов

// Создает описание типов всех заказов, которые могут обеспечиваться
//
// Возвращаемое значение:
//  ОписаниеТипов - описание типов заказов.
//
Функция ОписаниеТиповЗаказыКОбеспечению() Экспорт

	ОписаниеТипов = Новый ОписаниеТипов(
		"ДокументСсылка.ЗаказКлиента,
		|ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента,
		|ДокументСсылка.ЗаказНаПеремещение,
		|ДокументСсылка.ЗаказНаСборку,
		|ДокументСсылка.ЗаказНаВнутреннееПотребление");

	Возврат ОписаниеТипов;

КонецФункции

// Возвращает структуру параметров для передачи в форму обработки Состояние обеспечение заказов.
// 
//  Возвращаемое значение:
//   Структура - структура с полями:
//               ВызовИзФормыЗаказа          - Булево    - признак, что форма открывается из формы, содержащей список товаров.
//               РеквизитыЗаказа             - Структура - содержит ключевые реквизиты - параметры обеспечения,
//                   относящиеся ко всем товарам списка (например, желаемая дата отгрузки).
//               АдресТаблицыТовары          - Строка    - адрес во временном хранилище, для передачи в форму обработки
//                                                         списка товаров.
//               ПараметрыВыполненияДействий - Структура - содержит параметры, необходимые для выполнения рекомендаций
//                                                         по обеспечению из открываемой формы обработки.
//               НастройкаЭлементовФормы     - Структура - содержит настройки отображения открываемой формы, с полями:
//                                                         Заголовок                      - Строка, Неопределено -
//                                                                                          заголовок формы.
//                                                         ТекстКомандыПеренестиВДокумент - Строка, Неопределено -
//                                                             заголовок команды "Перенести в документ".
//
Функция ПараметрыФормыСостояниеОбеспеченияЗаказов() Экспорт
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ВызовИзФормыЗаказа");
	ПараметрыФормы.Вставить("РеквизитыЗаказа");
	ПараметрыФормы.Вставить("АдресТаблицыТовары");
	ПараметрыФормы.Вставить("ПараметрыВыполненияДействий");
	ПараметрыФормы.Вставить("СторнируемыеДокументы", Новый СписокЗначений());
	
	НастройкаЭлементовФормы = Новый Структура();
	НастройкаЭлементовФормы.Вставить("Заголовок");
	НастройкаЭлементовФормы.Вставить("ТекстКомандыПеренестиВДокумент");
	
	ПараметрыФормы.Вставить("НастройкаЭлементовФормы", НастройкаЭлементовФормы);
	
	Возврат ПараметрыФормы;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеОбеспечения

// Предназначена для описания того, каким образом производить проверку заполнения полей перед выполнением команды по
// заполнению обеспечения в документах.
//
// Параметры:
//  Синоним - Строка, Неопределено - имя списка в котором производится проверка, если не указано, то список "Товары"
//  Синоним - Строка, Неопределено - наименование списка в котором производится проверка, если не указано, то список "Товары".
//
// Возвращаемое значение:
//  Структура - структура с полями: "Поля" и "Тексты" используемая в функции проверки заполнения (см. функцию ОбеспечениеКлиентСервер.ПроверитьЗаполнение).
//
Функция ИнициализироватьПараметрыПроверкиЗаполнения(ИмяТабличнойЧасти = Неопределено, Синоним = Неопределено) Экспорт

	Поля = Новый Структура();
	Поля.Вставить("Номенклатура",   "Объект.Товары[%1].Номенклатура");
	Поля.Вставить("Характеристика", "Объект.Товары[%1].Характеристика");
	Поля.Вставить("Склад",          "Объект.Склад");
	Поля.Вставить("Подразделение",  "Объект.Подразделение");
	Поля.Вставить("Количество",     "Объект.Товары[%1].КоличествоУпаковок");
	Поля.Вставить("КоличествоУпаковок", "Объект.Товары[%1].КоличествоУпаковок");

	Тексты = Новый Структура();
	Тексты.Вставить("Номенклатура",   НСтр("ru = 'Не заполнена колонка ""Номенклатура"" в строке %1 списка ""Товары""'"));
	Тексты.Вставить("Характеристика", НСтр("ru = 'Не заполнена колонка ""Характеристика"" в строке %1 списка ""Товары""'"));
	Тексты.Вставить("Склад",          НСтр("ru = 'Поле ""Склад"" не заполнено'"));
	Тексты.Вставить("Подразделение",  НСтр("ru = 'Поле ""Подразделение"" не заполнено (необходимо для обеспечения работ)'"));
	Тексты.Вставить("Количество",     НСтр("ru = 'Не заполнена колонка ""Количество"" в строке %1 списка ""Товары""'"));
	Тексты.Вставить("КоличествоУпаковок", НСтр("ru = 'Обнаружено нулевое количество при пересчете в единицу хранения в строке %1 списка ""Товары""'"));

	Если ИмяТабличнойЧасти <> Неопределено Тогда

		Для Каждого Поле Из Поля Цикл

			Поля[Поле.Ключ]   = СтрЗаменить(Поля[Поле.Ключ],   "Товары", ИмяТабличнойЧасти);
			Тексты[Поле.Ключ] = СтрЗаменить(Тексты[Поле.Ключ], "Товары", ?(Синоним <> Неопределено, Синоним, ИмяТабличнойЧасти));

		КонецЦикла;

	КонецЕсли;

	Возврат Новый Структура("Поля, Тексты", Поля, Тексты);

КонецФункции

// Возвращает структуру, содержащую необходимые данные для генерации сообщения об ошибках пользователю,
// используется при выборе и заполнении обеспечения.
//
// Параметры:
// ДанныеЗаполнения - Массив - массив, содержащий структуры данных аналитики каждой ошибки.
//
// Возвращаемое значение:
//   Структура - Содержит необходимые данные для генерации сообщения об ошибках пользователю.
//
Функция ОшибкиКонтроляОтгрузкиИОбеспечения(ДанныеЗаполнения, ИмяСписка, СинонимСписка) Экспорт

	Ошибки = Неопределено;
	Для Каждого РеквизитыОшибки Из ДанныеЗаполнения Цикл

		Если РеквизитыОшибки.Регистр = "Заказы" Тогда

			ШаблонСообщенияСоСкладом = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика%, склад %Склад%. По строке %НомерСтроки% списка ""%СинонимСписка%"" уже оформлена накладная в количестве большем, чем указано в документе, на %Количество% %Единица%'");
		
			ШаблонСообщенияБезСклада = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика%. По строке %НомерСтроки% списка ""%СинонимСписка%"" уже оформлена накладная в количестве большем, чем указано в документе, на %Количество% %Единица%'");

			ШаблонСообщения = ?(ЗначениеЗаполнено(РеквизитыОшибки.Склад), ШаблонСообщенияСоСкладом, ШаблонСообщенияБезСклада);
			Поле = СтрЗаменить("Объект.ИмяСписка[%НомерСтроки%].НомерСтроки", "ИмяСписка", ИмяСписка);
			Поле = СтрЗаменить(Поле, "%НомерСтроки%", РеквизитыОшибки.НомерСтроки - 1);

		ИначеЕсли РеквизитыОшибки.Регистр = "ТоварыКОтгрузке" Тогда

			ШаблонСообщения = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика% %Назначение%. Отгружено со склада %Склад% больше, чем указано в документе, на %Количество% %Единица%'");
			Поле = Неопределено;

		КонецЕсли;

		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
			НоменклатураКлиентСервер.ПредставлениеНоменклатуры(РеквизитыОшибки.Номенклатура, РеквизитыОшибки.Характеристика));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%",  Строка(РеквизитыОшибки.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Строка(РеквизитыОшибки.НомерСтроки));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СинонимСписка%",   Строка(СинонимСписка));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",     Строка(РеквизитыОшибки.ЕдиницаИзмерения));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%",       Строка(РеквизитыОшибки.Склад));
		Если РеквизитыОшибки.Регистр = "ТоварыКОтгрузке" Тогда
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Назначение%",  Строка(РеквизитыОшибки.Назначение));
		КонецЕсли;

		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, Поле, ТекстСообщения, Неопределено);

	КонецЦикла;

	Возврат Ошибки;

КонецФункции

// Предназначена для подсчета изменений элементов коллекций.
// Используется для подсчета изменений в строках при заполнении обеспечения в табличной части заказа.
// 
// Параметры:
//   Счетчик        - Число - количество изменений. Значение параметра увеличивается на единицу если изменения есть.
//   СтарыеЗначения - ДанныеФормыЭлементКоллекции, Структура, СтрокаТаблицыЗначений - строка, содержащая значения
//                                                                                    реквизитов до изменения.
//   НовыеЗначения  - ДанныеФормыЭлементКоллекции, Структура, СтрокаТаблицыЗначений - строка, содержащая измененные
//                                                                                    значения реквизитов.
//
Процедура СчетИзменений(Счетчик, СтарыеЗначения, НовыеЗначения) Экспорт
	
	Если СтарыеЗначения.КодСтроки             <> НовыеЗначения.КодСтроки
		Или СтарыеЗначения.Количество         <> НовыеЗначения.Количество
		Или СтарыеЗначения.ВариантОбеспечения <> НовыеЗначения.ВариантОбеспечения
		Или СтарыеЗначения.Склад              <> НовыеЗначения.Склад
		Или СтарыеЗначения.ДатаОтгрузки       <> НовыеЗначения.ДатаОтгрузки Тогда
		
		Счетчик = Счетчик + 1;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текст "Заполнение обеспечения"
//
// Возвращаемое значение:
//   Строка - текст "Заполнение обеспечения".
//
Функция ТекстЗаполнениеОбеспечения() Экспорт
	Возврат НСтр("ru = 'Заполнение обеспечения'");
КонецФункции

// Возвращает текст "Обработано строк".
// 
// Параметры:
//   Количество - Число - количество отработанных строк.
//
// Возвращаемое значение:
//   Строка - текст "Обработано строк: количество".
//
Функция ТекстОбработаноСтрок(Количество) Экспорт
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Обработано строк: %1'"), Количество);
КонецФункции

#КонецОбласти

#Область Автозаказ

// Создает структуру данных, содержащую параметры объединения таблиц
//
// Возвращаемое значение:
//  Структура - структура данных, содержащая параметры объединения таблиц.
//
Функция ПараметрыОбъединенияТаблиц() Экспорт

	Результат = Новый Структура();
	Результат.Вставить("ОбновлятьСтроки",  Истина);
	Результат.Вставить("ДобавлятьСтроки",  Ложь);
	Результат.Вставить("НовыеСтроки",      Неопределено);
	Результат.Вставить("ИзмененныеСтроки", Неопределено);
	Результат.Вставить("Умолчания",        Неопределено);
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область Прочее

// Формирует структуру, используемую при выполнении служебного действия обработки табличный частей "ЗаполнитьОбеспечениеВДокументеПродажи".
//
// Параметры:
//  ВариантыОбеспечения  - Соответствие - содержит приоритетные варианты обеспечения для использования.
//  ЖелаемаяДатаОтгрузки - Дата - желаемая дата отгрузки, установленная в документе. Неопределено, если расчет даты
//                                отгрузки выполнять не нужно.
//
// Возвращаемое значение:
//  Структура - структура с полями "ВариантыОбеспечения", "ЖелаемаяДатаОтгрузки", "Склад".
//
Функция ПараметрыДействияПроверитьЗаполнитьОбеспечение(ВариантыОбеспечения, ЖелаемаяДатаОтгрузки = Неопределено) Экспорт
	
	ПараметрыДействия = Новый Структура();
	ПараметрыДействия.Вставить("ВариантыОбеспечения",  ВариантыОбеспечения);
	ПараметрыДействия.Вставить("ЖелаемаяДатаОтгрузки", ЖелаемаяДатаОтгрузки);
	ПараметрыДействия.Вставить("Склад",                Неопределено); // дозаполняется построчно.
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Возвращает параметры, используемые для заполнения варианта обеспечения по умолчанию
// Используется в ОбеспечениеКлиентСервер.ВариантОбеспеченияПоУмолчанию.
// 
// Возвращаемое значение:
//   Структура - структура следующего состава:
//     * ТипНоменклатуры                              - ПеречислениеСсылка.ТипыНоменклатуры - тип номенклатуры в строке заказа.
//     * ЗаполнитьОбособленно                         - Булево                              - признак необходимости
//         заполнять действием обособленно.
//     * ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента - Булево                              - значение соответствующей ФО.
//     * СтатусЗаказаКлиента                          - ПеречислениеСсылка.СтатусыЗаказовКлиентов,
//         ПеречислениеСсылка.СтатусыЗаявокНаВозвратТоваровОтКлиентов - статус заказа.
//
Функция ПараметрыЗаполненияВариантаОбеспеченияПоУмолчанию() Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("ТипНоменклатуры");
	Параметры.Вставить("ЗаполнитьОбособленно");
	Параметры.Вставить("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента");
	Параметры.Вставить("СтатусЗаказаКлиента");
	Возврат Параметры;
	
КонецФункции

// Возвращает вариант обеспечения используемый по умолчанию в заказах для номенклатуры.
// Функция используется, например, при заполнении варианта обеспечения для строки, добавляемой в заказ,
// при копировании заказов, создании заказов на основании других заказов.
//
// Параметры:
// ПараметрыЗаполнения - Структура - см. ПараметрыЗаполненияВариантаОбеспеченияПоУмолчанию(), содержит ключи:
//	ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры - Тип номенклатуры, для которой
//                   необходимо получить вариант обеспечения по умолчанию,
//	ЗаполнитьОбособленно - Булево - Признак, что для номенклатуры предпочтительно использовать обособленное обеспечение.
//	ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента - признак использования соответствующей ФО
//	СтатусЗаказаКлиента - статус заполняемого заказа клиента, используется при отключенной ФО ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента.
//
// Возвращаемое значение:
// ПеречислениеСсылка.ВариантыОбеспечения - Вариант обеспечения по умолчанию.
//
Функция ВариантОбеспеченияПоУмолчанию(ПараметрыЗаполнения) Экспорт
	
	ТипНоменклатуры = ПараметрыЗаполнения.ТипНоменклатуры;
	ЗаполнитьОбособленно = ПараметрыЗаполнения.ЗаполнитьОбособленно;
	Статус = ПараметрыЗаполнения.СтатусЗаказаКлиента;
	ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента = ПараметрыЗаполнения.ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента;
	
	// Особое заполнение для Заказов клиента (в т.ч. Заявок на возврат) в случае, когда не используется построчная отгрузка.
	СтатусыОтгрузить = Новый Массив;
	СтатусыОтгрузить.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.КОтгрузке"));
	СтатусыОтгрузить.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.Закрыт"));
	СтатусыОтгрузить.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке"));
	СтатусыОтгрузить.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена"));
	
	СтатусыСоСклада = Новый Массив;
	СтатусыСоСклада.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.КОбеспечению"));
	СтатусыСоСклада.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению"));
	
	СтатусыНеТребуется = Новый Массив;
	СтатусыНеТребуется.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.НеСогласован"));
	СтатусыНеТребуется.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована"));
	СтатусыНеТребуется.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату"));
	СтатусыНеТребуется.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена"));
	
	Если Не ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента
		И СтатусыОтгрузить.Найти(Статус) <> Неопределено Тогда
		
		ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить");
		
	ИначеЕсли Не ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента
		И СтатусыСоСклада.Найти(Статус) <> Неопределено Тогда
		
		Если ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа")
				Или ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
			
			ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется");
			
		Иначе
			
			ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада");
			
		КонецЕсли;
		
	ИначеЕсли Не ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента
		И СтатусыНеТребуется.Найти(Статус) <> Неопределено Тогда
		
		ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется");
		
		
	ИначеЕсли ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда

		ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется");

	ИначеЕсли ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда

		ВариантОбеспечения = ?(ЗаполнитьОбособленно = Истина,
		                     ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Обособленно"),
		                     ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется"));

	ИначеЕсли ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара") Тогда

		ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Требуется");

	Иначе //товар

		ВариантОбеспечения = ?(ЗаполнитьОбособленно = Истина,
		                     ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Обособленно"),
		                     ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Требуется"));

	КонецЕсли;
	
	Возврат ВариантОбеспечения;

КонецФункции

// Дополняет структуру свойствами и их значениями из другой структуры
//
// Параметры:
//  Структура - Структура - исходная структура, в которую необходимо вставить свойства
//  СтруктураЗаполнения - Структура - структура, содержащая свойства и значения которые необходимо вставить.
//
Процедура ВставитьПоля(Структура, СтруктураЗаполнения) Экспорт

	Для Каждого Свойство Из СтруктураЗаполнения Цикл

		Структура.Вставить(Свойство.Ключ, Свойство.Значение);

	КонецЦикла;

КонецПроцедуры

// Проверяет ключ на изменение.
//
// Параметры:
//   Ключ              - Структура                                                     - содержит ранее установленные
//                                                                                       значения ключа.
//   ПроверяемаяСтрока - ДанныеФормыЭлементКоллекции, СтрокаТаблицыЗначений, Структура - данные содержащие текущие
//                                                                                       значения ключа.
// 
// Возвращаемое значение:
//   Булево - признак, что ключ изменился.
//
Функция ИзменилсяКлюч(Ключ, ПроверяемаяСтрока) Экспорт

	Для Каждого Свойство Из Ключ Цикл

		Если ПроверяемаяСтрока[Свойство.Ключ] <> Свойство.Значение Тогда
			Возврат Истина;
		КонецЕсли;

	КонецЦикла;

	Возврат Ложь;

КонецФункции

// Предназначена для получения структуры, содержащей поля необходимые для заполнения обеспечения в заказах.
// 
// Возвращаемое значение:
//   Структура - структура с полями:
//    * КодСтроки          - Число                                  - соответствует полю "Код строки" заказа.
//    * Количество         - Число                                  - соответствует полю "Количество" заказа.
//    * ВариантОбеспечения - ПеречисленияСсылка.ВариантыОбеспечения - соответствует полю "ВариантОбеспечения" заказа.
//    * Склад              - СправочникСсылка.Склады                - соответствует полю "Склад" заказа.
//    * ДатаОтгрузки       - Дата                                   - соответствует полю "Дата отгрузки" заказа.
//
Функция КлючОбеспечения() Экспорт
	Возврат Новый Структура("КодСтроки, Количество, ВариантОбеспечения, Склад, ДатаОтгрузки");
КонецФункции

// Возвращает массив имен функциональных опций, определяющих использование статусов в заказах на отгрузку/.
// 
// Возвращаемое значение:
//  Массив - Массив элементов типа Строка, содержит имена функциональных опций.
//
Функция ИменаФункциональныхОпцийСтатусовЗаказовНаОтгрузку() Экспорт

	ИменаФункциональныхОпций = Новый Массив();
	ИменаФункциональныхОпций.Добавить("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
	ИменаФункциональныхОпций.Добавить("ИспользоватьСтатусыЗаказовНаВнутреннееПотребление");
	ИменаФункциональныхОпций.Добавить("ИспользоватьСтатусыЗаказовНаПеремещение");
	ИменаФункциональныхОпций.Добавить("ИспользоватьСтатусыЗаказовНаСборку");
	Возврат ИменаФункциональныхОпций;

КонецФункции

// Заполняет служебные реквизиты "ДатаОтгрузкиОбязательна" и "СкладОбязателен" в шапке документа.
//
//  Параметры:
//   Товары - ДанныеФормыКоллекция - таблица формы.
//   ДатаОтгрузкиОбязательна - РеквизитФормы - служебный реквизит формы, заполняемый, исходя из итогов одноименного
//                                             реквизита таблицы формы.
//   СкладОбязателен - РеквизитФормы - служебный реквизит формы, заполняемый, исходя из итогов одноименного реквизита
//                                     таблицы формы.
//
Процедура ЗаполнитьСлужебныеРеквизиты(Товары, ДатаОтгрузкиОбязательна = Неопределено, СкладОбязателен = Неопределено) Экспорт
	
	ДатаОтгрузкиОбязательна  = ?(Товары.Итог("ДатаОтгрузкиОбязательна") = 0, 0, 1);
	СкладОбязателен          = ?(Товары.Итог("СкладОбязателен") = 0, 0, 1);
	
КонецПроцедуры

// Определяет общие правила проверки заполнения даты отгрузки в строке.
//
// Параметры:
//  ТекущаяСтрока		 - ДанныеФормыСтруктура, СтрокаТабличнойЧасти - строка для которой требуется определить необходимость заполнения даты отгрузки.
//  ДоступноОбеспечение	 - Булево - нужно передать Ложь, если в текущем состоянии документ не формирует потребность (например, если документ не согласован).
//  ЕстьОтменено		 - Булево - определяет наличие признака Отменено в строке.
// 
// Возвращаемое значение:
//  Булево - Истина, если требуется заполнение даты отгрузки.
//
Функция ДатаОтгрузкиОбязательна(ТекущаяСтрока, ДоступноОбеспечение, ЕстьОтменено) Экспорт

	Отменено = ЕстьОтменено И ТекущаяСтрока.Отменено;

	ДатаОтгрузкиОбязательна = Не Отменено
								И ТекущаяСтрока.ВариантОбеспечения <> ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется")
								И (ДоступноОбеспечение
									ИЛИ ТекущаяСтрока.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ИзЗаказов")
									ИЛИ ТекущаяСтрока.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада")
									ИЛИ ТекущаяСтрока.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно")
									ИЛИ ТекущаяСтрока.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить"));

	Возврат ДатаОтгрузкиОбязательна;
		
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныйПрограммныйИнтерфейс

Функция ФильтрыСостоянияОбеспечения() Экспорт

	Возврат Новый Структура("Номенклатура");

КонецФункции

Процедура ИнициализироватьПараметрыПолученияСостоянияОбеспечения(Параметры, ДанныеДляОбеспечения) Экспорт

	ЗаполнитьЗначенияСвойств(Параметры, ДанныеДляОбеспечения.ПараметрыОбеспечения);
	ЗаполнитьЗначенияСвойств(Параметры, ДанныеДляОбеспечения.ПараметрыОтгрузки);
	ЗаполнитьЗначенияСвойств(Параметры, ДанныеДляОбеспечения.Модификация);
	Параметры.СпособКорректировкиОбособленныхОстатков = "НеКорректировать";

КонецПроцедуры

Процедура ИнициализироватьФильтрыСостоянияОбеспечения(Фильтры, ЕстьФильтрПоНоменклатуре) Экспорт

	Фильтры.Номенклатура = ЕстьФильтрПоНоменклатуре;

КонецПроцедуры

Функция ПроверитьПересечениеНастроек(КомпоновщикНастроек) Экспорт

	Для Каждого Элемент Из КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы Цикл

		ПолеСклад = Новый ПолеКомпоновкиДанных("Склад");
		Если Элемент.ЛевоеЗначение = ПолеСклад И ПолеИспользуется(КомпоновщикНастроек, ПолеСклад) Тогда

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Недопустимые условия отбора. Отбор по складу уже установлен в основной форме обработки.'"));
			Возврат Ложь;

		КонецЕсли;

		ПолеНоменклатура = Новый ПолеКомпоновкиДанных("Номенклатура");
		Если Элемент.ЛевоеЗначение = ПолеНоменклатура И ПолеИспользуется(КомпоновщикНастроек, ПолеНоменклатура) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Недопустимые условия отбора. Отбор по номенклатуре уже установлен в основной форме обработки.'"));
			Возврат Ложь;

		КонецЕсли;

		ПолеПодразделение = Новый ПолеКомпоновкиДанных("Подразделение");
		Если Элемент.ЛевоеЗначение = ПолеПодразделение И ПолеИспользуется(КомпоновщикНастроек, ПолеПодразделение) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Недопустимые условия отбора. Отбор по подразделению уже установлен в основной форме обработки.'"));
			Возврат Ложь;

		КонецЕсли;

		ПолеМенеджер = Новый ПолеКомпоновкиДанных("Менеджер");
		Если Элемент.ЛевоеЗначение = ПолеМенеджер И ПолеИспользуется(КомпоновщикНастроек, ПолеМенеджер) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Недопустимые условия отбора. Отбор по менеджеру/ответственному уже установлен в основной форме обработки.'"));
			Возврат Ложь;

		КонецЕсли;

	КонецЦикла;

	Возврат Истина;

КонецФункции

Функция ПроверитьНаличиеНастройки(КомпоновщикНастроек, Поле, ТекстСообщения) Экспорт

	Если ПолеИспользуется(КомпоновщикНастроек, Поле, ТекстСообщения = "") Тогда

		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
		КонецЕсли;
		Возврат Ложь;

	КонецЕсли;

	Возврат Истина;

КонецФункции

Процедура СтруктураДействийВставитьПриИзмененииНазначения(СтруктураДействий) Экспорт
	
	СтруктураДействий.Вставить("ПриИзмененииНазначения");
	
КонецПроцедуры

Функция КлючиПотребностей(ВидПотребности) Экспорт

	Результат = Новый Структура("");

	Результат.Вставить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Результат.Вставить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));

	Если ВидПотребности = "Товар" Тогда

		Результат.Вставить("Склад",      Новый ОписаниеТипов("СправочникСсылка.Склады"));

	ИначеЕсли ВидПотребности = "ТоварОбособленный" Тогда

		Результат.Вставить("Склад",      Новый ОписаниеТипов("СправочникСсылка.Склады"));
		Результат.Вставить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));

	ИначеЕсли ВидПотребности = "Работа" Тогда

		Результат.Вставить("Подразделение",  Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
		Результат.Вставить("Назначение",     Новый ОписаниеТипов("СправочникСсылка.Назначения"));

	КонецЕсли;

	Возврат Результат;

КонецФункции

Процедура ЗаполнитьЗначенияСвойствСРазличиемИмен(Приемник, Источник, СоответствиеИмен) Экспорт

	ЗаполнитьЗначенияСвойств(Приемник, Источник);
	Для Каждого Свойство Из СоответствиеИмен Цикл

		Если Свойство.Ключ = "Данные" Тогда // свойство Данные - служебное, используется для заполнения полей из внешней структуры данных
			Продолжить;
		КонецЕсли;

		Приемник[Свойство.Ключ] = Источник[Свойство.Значение];

	КонецЦикла;

	// Если в результате заполнения по реквизитам табличной части Назначение осталось пустым, нужно снова взять его из
	// реквизитов шапки.
	Если Источник.Свойство("НазначениеШапки")
		И Не ЗначениеЗаполнено(Приемник.Назначение)
		И ЗначениеЗаполнено(Источник.НазначениеШапки) Тогда
		Приемник.Назначение = Источник.НазначениеШапки;
	КонецЕсли;

КонецПроцедуры

Функция ДействияСЗаказом() Экспорт
	
	ДействияСЗаказом = Новый Структура();
	
	ДействияСЗаказом.Вставить("Исправить",                Ложь);
	ДействияСЗаказом.Вставить("СнятьРезервы",             Ложь);
	ДействияСЗаказом.Вставить("СнятьРезервыСоСклада",     Ложь);
	ДействияСЗаказом.Вставить("Ускорить",                 Ложь);
	ДействияСЗаказом.Вставить("ОтгружатьЧастями",         Ложь);
	ДействияСЗаказом.Вставить("ЕстьОтгружатьЧастями",     Ложь);
	ДействияСЗаказом.Вставить("ЗапланироватьПеремещение", Ложь);
	Возврат ДействияСЗаказом;
	
КонецФункции

Функция КлючНоменклатураХарактеристикаСклад() Экспорт

	Возврат Новый Структура(
		"Номенклатура,
		|Характеристика,
		|Склад");

КонецФункции

Функция КлючНоменклатураХарактеристикаСкладНазначение() Экспорт

	Возврат Новый Структура(
		"Номенклатура,
		|Характеристика,
		|Склад,
		|Назначение");

КонецФункции

Функция КлючНоменклатураХарактеристикаПодразделениеНазначение() Экспорт

	Возврат Новый Структура(
		"Номенклатура,
		|Характеристика,
		|Подразделение,
		|Назначение");

КонецФункции

Функция КлючНоменклатураХарактеристикаПодразделениеНазначениеСклад() Экспорт

	Возврат Новый Структура(
		"Номенклатура,
		|Характеристика,
		|Подразделение,
		|Назначение,
		|Склад");

КонецФункции

Функция КлючНоменклатураХарактеристика() Экспорт

	Возврат Новый Структура(
		"Номенклатура,
		|Характеристика");

КонецФункции

Функция ОписаниеНастройки(Период, КоличествоПериодов, Подпериод = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КоличествоПериодов) Или Не ЗначениеЗаполнено(Период) Тогда
		
		Возврат НСтр("ru = '<период не указан>'");
		
	КонецЕсли;
	
	ПараметрыПредметаИсчисления = "";
	
	Если Период = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
		
		ПараметрыПредметаИсчисления = НСтр("ru = 'предыдущий день, предыдущих дня, предыдущих дней, м,,,,, 0'");
		
	ИначеЕсли Период = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
		
		ПараметрыПредметаИсчисления = НСтр("ru = 'предыдущая неделя, предыдущие недели, предыдущих недель, ж,,,,, 0'");
		
	ИначеЕсли Период = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
		
		ПараметрыПредметаИсчисления = НСтр("ru = 'предыдущая декада, предыдущие декады, предыдущих декад, ж,,,,, 0'");
		
	ИначеЕсли Период = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		
		ПараметрыПредметаИсчисления = НСтр("ru = 'предыдущий месяц, предыдущих месяца, предыдущих месяцев, м,,,,, 0'");
		
	ИначеЕсли Период = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
		
		ПараметрыПредметаИсчисления = НСтр("ru = 'предыдущий квартал, предыдущих квартала, предыдущих кварталов, м,,,,, 0'");
		
	ИначеЕсли Период = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
		
		ПараметрыПредметаИсчисления = НСтр("ru = 'предыдущее полугодие, предыдущих полугодия, предыдущих полугодий, с,,,,, 0'");
		
	ИначеЕсли Период = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		
		ПараметрыПредметаИсчисления = НСтр("ru = 'предыдущий год, предыдущих года, предыдущих лет, м,,,,, 0'");
		
	Иначе
		
		ПараметрыПредметаИсчисления = "";
		
	КонецЕсли;
	
	ПредставлениеНастройки = НРег(ЧислоПрописью(КоличествоПериодов,, ПараметрыПредметаИсчисления));
	
	Если ЗначениеЗаполнено(Подпериод) Тогда
		
		Если Подпериод = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
			
			ПредставлениеНастройки = ПредставлениеНастройки + " " + НСтр("ru = '(по дням)'");
			
		ИначеЕсли Подпериод = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
			
			ПредставлениеНастройки = ПредставлениеНастройки + " " + НСтр("ru = '(по неделям)'");
			
		ИначеЕсли Подпериод = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
			
			ПредставлениеНастройки = ПредставлениеНастройки + " " + НСтр("ru = '(по декадам)'");
			
		ИначеЕсли Подпериод = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
			
			ПредставлениеНастройки = ПредставлениеНастройки + " " + НСтр("ru = '(по месяцам)'");
			
		ИначеЕсли Подпериод = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
			
			ПредставлениеНастройки = ПредставлениеНастройки + " " + НСтр("ru = '(по кварталам)'");
			
		ИначеЕсли Подпериод = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
			
			ПредставлениеНастройки = ПредставлениеНастройки + " " + НСтр("ru = '(по полугодиям)'");
			
		ИначеЕсли Подпериод = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
			
			ПредставлениеНастройки = ПредставлениеНастройки + " " + НСтр("ru = '(по годам)'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПредставлениеНастройки;
	
КонецФункции

#КонецОбласти

#Область Прочие

Функция ПолеИспользуется(КомпоновщикНастроек, Поле, ПроверятьРеквизиты = Ложь, ЭлементСтруктуры = Неопределено)

	Если ЭлементСтруктуры = Неопределено Тогда
		ЭлементСтруктуры = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	КонецЕсли;

	Для Каждого Элемент Из ЭлементСтруктуры Цикл

		Если ТипЗнч(Элемент) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда

			Если Элемент.Использование Тогда
				НайденноеПоле = НайтиПолеВНастройках(КомпоновщикНастроек, Элемент);
				Если НайденноеПоле <> Неопределено Тогда
					Если НайденноеПоле = Поле Тогда
						Возврат Истина;
					КонецЕсли;
				ИначеЕсли Элемент.ЛевоеЗначение = Поле
					Или ПроверятьРеквизиты И Лев(Элемент.ЛевоеЗначение, СтрДлина(Поле)) = Строка(Поле) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;

		ИначеЕсли ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда

			Если Элемент.Использование И ПолеИспользуется(КомпоновщикНастроек, Поле, ПроверятьРеквизиты, Элемент.Элементы) Тогда
				Возврат Истина;
			КонецЕсли;

		ИначеЕсли ТипЗнч(Элемент) = Тип("ОтборКомпоновкиДанных") Тогда

			Если ПолеИспользуется(КомпоновщикНастроек, Поле, ПроверятьРеквизиты, Элемент.Элементы) Тогда
				Возврат Истина;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Возврат Ложь;

КонецФункции

Функция НайтиПолеВНастройках(КомпоновщикНастроек, ИскомыйЭлемент)

	Для Каждого Элемент Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл

		Если Элемент.ИдентификаторПользовательскойНастройки = ИскомыйЭлемент.ИдентификаторПользовательскойНастройки Тогда
			Возврат Элемент.ЛевоеЗначение;
		КонецЕсли;

	КонецЦикла;
	Возврат Неопределено;

КонецФункции

Функция ПереченьВариантовОбеспеченияПоТабличнойЧасти(ТабличнаяЧасть, ВыделенныеСтроки)
	
	ТипОграничитель = Неопределено;
	Если ЗначениеЗаполнено(ВыделенныеСтроки) Тогда
		ТипОграничитель = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга");
		Для каждого Идентификатор Из ВыделенныеСтроки Цикл
			Строка = ТабличнаяЧасть.НайтиПоИдентификатору(Идентификатор);
			Если Строка.ТипНоменклатуры <> ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга")
				И Строка.ТипНоменклатуры <> ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
				ТипОграничитель = Неопределено;
				Прервать;
			ИначеЕсли Строка.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
				ТипОграничитель = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПереченьВариантовОбеспечения(ТипОграничитель);
	
КонецФункции

#КонецОбласти

#Область Прочее

// Формирует структуру, используемую при выполнении служебного действия обработки табличный частей "ЗаполнитьОбеспечениеВДокументеПродажи".
//
// Параметры:
//  ЗаполнитьОбособленно - Булево - если признак установлен, то безусловно необходимо заполнять вариант обеспечения
//                                  значением "Обеспечивать обособленно"
//  Статус - ПеречислениеСсылка.СтатусыЗаказовКлиентов, Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов - статус
//      установленный в документе
//  ЖелаемаяДатаОтгрузки - Дата - желаемая дата отгрузки, установленная в документе.
//
// Возвращаемое значение:
//  Структура - структура с полями "ПродажаОбособленаПоСоглашению", "ВариантОбеспеченияПоСтатусу",
//              "ЖелаемаяДатаОтгрузки", "Склад".
//
Функция ПараметрыДействияПроверитьЗаполнитьОбеспечениеВДокументеПродажи(ЗаполнитьОбособленно, Статус, ЖелаемаяДатаОтгрузки) Экспорт
	
	ПараметрыДействия = Новый Структура("ПродажаОбособленаПоСоглашению, ВариантОбеспеченияПоСтатусу, ЖелаемаяДатаОтгрузки, Склад");
	
	ПараметрыДействия.ПродажаОбособленаПоСоглашению = ЗаполнитьОбособленно;
	ПараметрыДействия.ЖелаемаяДатаОтгрузки = ЖелаемаяДатаОтгрузки;
	
	СтатусыОтгрузить = Новый Массив;
	СтатусыОтгрузить.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.КОтгрузке"));
	СтатусыОтгрузить.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.Закрыт"));
	СтатусыОтгрузить.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке"));
	СтатусыОтгрузить.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена"));
	
	СтатусыСоСклада = Новый Массив;
	СтатусыСоСклада.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.КОбеспечению"));
	СтатусыСоСклада.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению"));
	
	СтатусыНеТребуется = Новый Массив;
	СтатусыНеТребуется.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.НеСогласован"));
	СтатусыНеТребуется.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована"));
	СтатусыНеТребуется.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату"));
	СтатусыНеТребуется.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена"));
	
	Если СтатусыОтгрузить.Найти(Статус) <> Неопределено Тогда
		
		ВариантОбеспеченияПоСтатусу = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить");
		
	ИначеЕсли СтатусыСоСклада.Найти(Статус) <> Неопределено Тогда
		
		ВариантОбеспеченияПоСтатусу = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада");
		
	ИначеЕсли СтатусыНеТребуется.Найти(Статус) <> Неопределено Тогда
		
		ВариантОбеспеченияПоСтатусу = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется");
		
	КонецЕсли;
	
	ПараметрыДействия.ВариантОбеспеченияПоСтатусу = ВариантОбеспеченияПоСтатусу;
	Возврат ПараметрыДействия;
	
КонецФункции

#КонецОбласти

#КонецОбласти