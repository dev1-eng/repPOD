////////////////////////////////////////////////////////////////////////////////
// ОбменСКонтрагентамиПереопределяемый: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Заполняет коллекцию актуальных видов электронных документов для прикладного решения.
// Для добавления актуального вида электронного документа в коллекцию необходимо
// использовать процедуру (см. ОбменСКонтрагентами.ДобавитьАктуальныйВидЭД).
//
// Параметры:
//  АктуальныеВидыЭД - Соответствие - виды актуальных ЭД.
//
Процедура ПолучитьАктуальныеВидыЭД(АктуальныеВидыЭД) Экспорт
	
	//++ НЕ ГОСИС
	ОбменСконтрагентами.ДобавитьАктуальныйВидЭД(АктуальныеВидыЭД, Перечисления.ВидыЭД.ТОРГ12Продавец);
	ОбменСконтрагентами.ДобавитьАктуальныйВидЭД(АктуальныеВидыЭД, Перечисления.ВидыЭД.ТОРГ12Покупатель);
	ОбменСконтрагентами.ДобавитьАктуальныйВидЭД(АктуальныеВидыЭД, Перечисления.ВидыЭД.АктИсполнитель);
	ОбменСконтрагентами.ДобавитьАктуальныйВидЭД(АктуальныеВидыЭД, Перечисления.ВидыЭД.АктЗаказчик);
	ОбменСконтрагентами.ДобавитьАктуальныйВидЭД(АктуальныеВидыЭД, Перечисления.ВидыЭД.АктНаПередачуПрав);
	ОбменСконтрагентами.ДобавитьАктуальныйВидЭД(АктуальныеВидыЭД, Перечисления.ВидыЭД.СчетФактура);
	ОбменСконтрагентами.ДобавитьАктуальныйВидЭД(АктуальныеВидыЭД, Перечисления.ВидыЭД.КорректировочныйСчетФактура);
	ОбменСконтрагентами.ДобавитьАктуальныйВидЭД(АктуальныеВидыЭД, Перечисления.ВидыЭД.СчетНаОплату);
	ОбменСконтрагентами.ДобавитьАктуальныйВидЭД(АктуальныеВидыЭД, Перечисления.ВидыЭД.ПрайсЛист);
	ОбменСконтрагентами.ДобавитьАктуальныйВидЭД(АктуальныеВидыЭД, Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара);
	ОбменСконтрагентами.ДобавитьАктуальныйВидЭД(АктуальныеВидыЭД, Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара);
	ОбменСконтрагентами.ДобавитьАктуальныйВидЭД(АктуальныеВидыЭД, Перечисления.ВидыЭД.ОтветНаЗаказ);
	ОбменСконтрагентами.ДобавитьАктуальныйВидЭД(АктуальныеВидыЭД, Перечисления.ВидыЭД.ЗаказТовара);
	ОбменСконтрагентами.ДобавитьАктуальныйВидЭД(АктуальныеВидыЭД, Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями);
	ОбменСконтрагентами.ДобавитьАктуальныйВидЭД(АктуальныеВидыЭД, Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями);
	ОбменСконтрагентами.ДобавитьАктуальныйВидЭД(АктуальныеВидыЭД, Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	ОбменСконтрагентами.ДобавитьАктуальныйВидЭД(АктуальныеВидыЭД, Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
	ОбменСКонтрагентами.ДобавитьАктуальныйВидЭД(АктуальныеВидыЭД, Перечисления.ВидыЭД.УПД);
	ОбменСКонтрагентами.ДобавитьАктуальныйВидЭД(АктуальныеВидыЭД, Перечисления.ВидыЭД.УКД);
	ОбменСКонтрагентами.ДобавитьАктуальныйВидЭД(АктуальныеВидыЭД, Перечисления.ВидыЭД.АктОРасхождениях);
	ОбменСКонтрагентами.ДобавитьАктуальныйВидЭД(АктуальныеВидыЭД, Перечисления.ВидыЭД.КаталогТоваров);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Определяет параметры электронного документа по типу владельца.
//
// Параметры:
//  Источник - Объект, ЛюбаяСсылка - документ или справочник источника.
//  ПараметрыЭД - Структура - параметры источника, необходимых для определения
//                настроек обмена ЭД. Обязательные параметры: НаправлениеЭД, ВидЭД,
//                Контрагент, СоглашениеЭД или Организация.
//  ФорматCML - Булево - если истина, то для формирования ЭД будут использоваться схемы CML (не ФНС),
//    в параметрах должны быть указаны соответствующие виды ЭД.
//
Процедура ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД, ФорматCML = Ложь) Экспорт
	Перем ВидЭД, НаправлениеЭД, Организация, Контрагент;
	
	//++ НЕ ГОСИС
	УстановитьПривилегированныйРежим(Истина);
	
	Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	
	ТипИсточника = ТипЗнч(Источник);
	ЭтоСсылка = ОбщегоНазначения.ЭтоСсылка(ТипИсточника);
	
	Если ТипИсточника = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		
		Если ФорматCML Тогда
			ВидЭД = Перечисления.ВидыЭД.ТОРГ12;
		ИначеЕсли Источник.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав Тогда
			ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав;
		Иначе			
			ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
		КонецЕсли;
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.АктВыполненныхРабот")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.АктВыполненныхРабот") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПриобретениеТоваровУслуг") Тогда
		
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПриобретениеУслугПрочихАктивов") Тогда
		
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПередачаТоваровМеждуОрганизациями") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями;
		НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, ОрганизацияПолучатель, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.ОрганизацияПолучатель;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.ОрганизацияПолучатель;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ВозвратТоваровМеждуОрганизациями") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями;
		НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, ОрганизацияПолучатель, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.ОрганизацияПолучатель;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.ОрганизацияПолучатель;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураВыданный")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
		
		Если ЭлектронноеВзаимодействиеУТ.ЭтоКорректировочныйДокумент(Источник) Тогда
			ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		Иначе
			ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		КонецЕсли;
		
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, ДокументОснование");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент  = ЗначенияРеквизитов.Контрагент;
			ДокументОснование = ЗначенияРеквизитов.ДокументОснование;
		Иначе
			Организация = Источник.Организация;
			Контрагент  = Источник.Контрагент;
			ДокументОснование = Источник.ДокументОснование;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументОснование)
			И ОбщегоНазначения.ЕстьРеквизитОбъекта("Договор", ДокументОснование.Метаданные()) Тогда
			
			Договор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Договор");
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураКомиссионеру")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураКомиссионеру") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Комиссионер, ДокументОснование");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент  = ЗначенияРеквизитов.Комиссионер;
			ДокументОснование = ЗначенияРеквизитов.ДокументОснование;
		Иначе
			Организация = Источник.Организация;
			Контрагент  = Источник.Комиссионер;
			ДокументОснование = Источник.ДокументОснование;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументОснование)
			И ОбщегоНазначения.ЕстьРеквизитОбъекта("Договор", ДокументОснование.Метаданные()) Тогда
			Договор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Договор");
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураВыданныйАванс")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураВыданныйАванс") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент  = ЗначенияРеквизитов.Контрагент;
		Иначе
			Организация = Источник.Организация;
			Контрагент  = Источник.Контрагент;
		КонецЕсли;

	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураПолученный")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураПолученный") Тогда
		
		Если ЭлектронноеВзаимодействиеУТ.ЭтоКорректировочныйДокумент(Источник) Тогда
			ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		Иначе
			ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		КонецЕсли;
		НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		
		Если ЭтоСсылка Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СчетФактураПолученный.Организация КАК Организация
			|ИЗ
			|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
			|ГДЕ
			|	СчетФактураПолученный.Ссылка = &Источник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СчетФактураПолученныйДокументыОснования.ДокументОснование КАК ДокументОснование
			|ИЗ
			|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
			|ГДЕ
			|	СчетФактураПолученныйДокументыОснования.Ссылка = &Источник";
			Запрос.УстановитьПараметр("Источник", Источник);
			РезультатыЗапроса = Запрос.ВыполнитьПакет();
			Реквизиты = РезультатыЗапроса[0].Выбрать();
			Реквизиты.Следующий();
			
			Организация = Реквизиты.Организация;
			ДокументыОснования = РезультатыЗапроса[1].Выгрузить();
		Иначе
			Организация = Источник.Организация;
			ДокументыОснования = Источник.ДокументыОснования;
		КонецЕсли;
		
		Для Каждого Строка Из ДокументыОснования Цикл
			Если ЗначениеЗаполнено(Строка.ДокументОснование) Тогда
				
				РеквизитыОснования = Новый Структура("Контрагент");
				Если Строка.ДокументОснование.Метаданные().Реквизиты.Найти("Договор") <> Неопределено Тогда
					РеквизитыОснования.Вставить("Договор");
				КонецЕсли;
				ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.ДокументОснование, РеквизитыОснования);
				Контрагент = ЗначенияРеквизитов.Контрагент;
				Если ЗначенияРеквизитов.Свойство("Договор") Тогда
					Договор = ЗначенияРеквизитов.Договор;
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураПолученныйНалоговыйАгент")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураПолученныйНалоговыйАгент") Тогда
		
		Если ЭлектронноеВзаимодействиеУТ.ЭтоКорректировочныйДокумент(Источник) Тогда
			ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		Иначе
			ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		КонецЕсли;
		НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		
		Если ЭтоСсылка Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СчетФактураПолученный.Организация КАК Организация
			|ИЗ
			|	Документ.СчетФактураПолученныйНалоговыйАгент КАК СчетФактураПолученный
			|ГДЕ
			|	СчетФактураПолученный.Ссылка = &Источник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СчетФактураПолученныйДокументыОснования.ДокументОснование КАК ДокументОснование
			|ИЗ
			|	Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
			|ГДЕ
			|	СчетФактураПолученныйДокументыОснования.Ссылка = &Источник";
			Запрос.УстановитьПараметр("Источник", Источник);
			РезультатыЗапроса = Запрос.ВыполнитьПакет();
			Реквизиты = РезультатыЗапроса[0].Выбрать();
			Реквизиты.Следующий();
			
			Организация = Реквизиты.Организация;
			ДокументыОснования = РезультатыЗапроса[1].Выгрузить();
		Иначе
			Организация = Источник.Организация;
			ДокументыОснования = Источник.ДокументыОснования;
		КонецЕсли;
		
		Для Каждого Строка Из ДокументыОснования Цикл
			Если ЗначениеЗаполнено(Строка.ДокументОснование) Тогда
				
				РеквизитыОснования = Новый Структура("Контрагент");
				Если Строка.ДокументОснование.Метаданные().Реквизиты.Найти("Договор") <> Неопределено Тогда
					РеквизитыОснования.Вставить("Договор");
				КонецЕсли;
				ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.ДокументОснование, РеквизитыОснования);
				Контрагент = ЗначенияРеквизитов.Контрагент;
				Если ЗначенияРеквизитов.Свойство("Договор") Тогда
					Договор = ЗначенияРеквизитов.Договор;
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураКомитента")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураКомитента") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Комитент");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент  = ЗначенияРеквизитов.Комитент;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Комитент;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураПолученныйАванс")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураПолученныйАванс") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент  = ЗначенияРеквизитов.Контрагент;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
		КонецЕсли;
	
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЗаказПоставщику")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЗаказПоставщику") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ЗаказТовара;
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЗаказКлиента")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЗаказКлиента") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ;
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетНаОплатуКлиенту")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетНаОплатуКлиенту") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.СчетНаОплату;
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент; 
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.СчетНаОплату;
		НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.РегистрацияЦенНоменклатурыПоставщика")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.РегистрацияЦенНоменклатурыПоставщика") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ПрайсЛист;
		НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.КоммерческоеПредложениеКлиенту") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ПрайсЛист;
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			Реквизиты = Новый Структура("Организация, Контрагент", "Организация", "Соглашение.Контрагент");
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, Реквизиты);
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
		Иначе
			Организация = Источник.Организация;
			Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Соглашение, "Контрагент");
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ОтчетКомитенту")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ОтчетКомитенту") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара;
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ОтчетКомиссионера")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ОтчетКомиссионера") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара;
		НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ОтчетКомитентуОСписании")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ОтчетКомитентуОСписании") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара;
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.КорректировкаРеализации")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.КорректировкаРеализации") Тогда
		
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, 
				"ВидКорректировки, Организация, Контрагент, Договор");
			ХозяйственнаяОперация = ЗначенияРеквизитов.ВидКорректировки;
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			ХозяйственнаяОперация = Источник.ВидКорректировки;
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон Тогда
			ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель;
		ИначеЕсли ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
			ВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
		ИначеЕсли ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
					И Источник.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав Тогда
			ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав;
		ИначеЕсли ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
		КонецЕсли;
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.КорректировкаПриобретения")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.КорректировкаПриобретения") Тогда
		
		НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.АктОРасхожденияхПослеПриемки")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.АктОРасхожденияхПослеПриемки") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.АктОРасхождениях;
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.АктОРасхожденияхПослеОтгрузки")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.АктОРасхожденияхПослеОтгрузки") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.АктОРасхождениях;
		НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
	
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.АвансовыйОтчет")
		ИЛИ ТипИсточника = Тип("ДокументСсылка.ИнвентаризационнаяОпись")
		ИЛИ ТипИсточника = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров")
		ИЛИ ТипИсточника = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров")
		ИЛИ ТипИсточника = Тип("ДокументСсылка.ПеремещениеТоваров")
		ИЛИ ТипИсточника = Тип("ДокументСсылка.ПересортицаТоваров")
		ИЛИ ТипИсточника = Тип("ДокументСсылка.СписаниеНедостачТоваров")
		ИЛИ ТипИсточника = Тип("ДокументСсылка.ЛистКассовойКниги")
		ИЛИ ТипИсточника = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
		ИЛИ ТипИсточника = Тип("ДокументСсылка.РасходныйКассовыйОрдер")
		ИЛИ ТипИсточника = Тип("ДокументСсылка.ДоверенностьВыданная")
		ИЛИ ТипИсточника = Тип("ДокументСсылка.ИнвентаризацияНаличныхДенежныхСредств")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ИнвентаризационнаяОпись")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ОприходованиеИзлишковТоваров")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ВнутреннееПотреблениеТоваров")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПеремещениеТоваров")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПересортицаТоваров")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СписаниеНедостачТоваров")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЛистКассовойКниги")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПриходныйКассовыйОрдер")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.РасходныйКассовыйОрдер")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ДоверенностьВыданная")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ИнвентаризацияНаличныхДенежныхСредств")
		Тогда
		
		Реквизиты = "Организация";
		
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, Реквизиты);
		Иначе
			ЗначенияРеквизитов = Новый Структура(Реквизиты);
			ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, Источник);
		КонецЕсли;
		
		ВидЭД = Перечисления.ВидыЭД.Внутренний;
		НаправлениеЭД = Перечисления.НаправленияЭД.Внутренний;
		Организация   = ЗначенияРеквизитов.Организация;
		
	КонецЕсли;
	
	ПараметрыЭД.ВидЭД = ВидЭД;
	ПараметрыЭД.НаправлениеЭД = НаправлениеЭД;
	ПараметрыЭД.Организация = Организация;
	ПараметрыЭД.Контрагент = Контрагент;
	ПараметрыЭД.ДоговорКонтрагента = Договор;
	//-- НЕ ГОСИС

КонецПроцедуры

// Определяет является ли документ информационной базы счет-фактурой.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ информационной базы.
//  Результат - Булево - является ли документ счет-фактурой.
//
Процедура ОпределитьДокументЯвляетсяСчетомФактурой(ДокументСсылка, Результат) Экспорт
	
	//++ НЕ ГОСИС
	ТипДокумента = ТипЗнч(ДокументСсылка);
	Если ТипДокумента = Тип("ДокументСсылка.СчетФактураВыданный")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.СчетФактураПолученный")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.СчетФактураПолученныйНалоговыйАгент")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.СчетФактураВыданныйАванс")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.СчетФактураПолученныйАванс")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.СчетФактураКомиссионеру")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.СчетФактураКомитента")
		Тогда
		
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Определение соответствий объектов библиотеки ЭД и прикладного решения.

// Определяет имя реквизита владельца справочника НоменклатураКонтрагента.
//
// Параметры:
//  ИмяРеквизитаВладельца - строка - имя реквизита владельца.
//
Процедура ОпределитьИмяРеквизитаВладельцаНоменклатурыПоставщиков(ИмяРеквизитаВладельца) Экспорт
	
	//++ НЕ ГОСИС
	Владелец = Справочники.НоменклатураКонтрагентов.ПустаяСсылка().Владелец;
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяРеквизитаВладельца = "Контрагент";
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Партнеры") Тогда
		ИмяРеквизитаВладельца = "Партнер";
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Получает значение перечисления по имени объектов метаданных.
// 
// Параметры:
//  СоответствиеПеречислений - Соответствие - соответствие библиотечных и прикладных перечислений.
//
Процедура ПолучитьСоответствиеПеречислений(СоответствиеПеречислений) Экспорт
	
	//++ НЕ ГОСИС
	СоответствиеПеречислений.Вставить("НДС", "СтавкиНДС");
	СоответствиеПеречислений.Вставить("ЮрФизЛицо", "ЮрФизЛицо");
	СоответствиеПеречислений.Вставить("ВариантыОплатыКлиентом", "ВариантыОплатыКлиентом");
	СоответствиеПеречислений.Вставить("ВариантыОплатыПоставщику", "ВариантыОплатыПоставщику");
	СоответствиеПеречислений.Вставить("ФормыОплаты", "ФормыОплаты");
	СоответствиеПеречислений.Вставить("СпособРасчета", "СпособыРасчетаКомиссионногоВознаграждения");
	//-- НЕ ГОСИС
	
КонецПроцедуры

// В процедуре указывается соответствие строковых представлений ставок НДС (используемые в БЭД)
// с прикладными значениями этих ставок.
//
// Параметры:
//   Соответствие - Соответствие - заполняемое соответствие ставок НДС.
//
// Пример:
//   Соответствие.Вставить("0",                                  Перечисления.СтавкиНДС.НДС0);
//   Соответствие.Вставить("10",                                 Перечисления.СтавкиНДС.НДС10);
//   Соответствие.Вставить("18",                                 Перечисления.СтавкиНДС.НДС18);
//   Соответствие.Вставить("10/110",                             Перечисления.СтавкиНДС.НДС10_110);
//   Соответствие.Вставить("18/118",                             Перечисления.СтавкиНДС.НДС18_118);
//   Соответствие.Вставить("20",                                 Перечисления.СтавкиНДС.НДС20);
//   Соответствие.Вставить("20/120",                             Перечисления.СтавкиНДС.НДС20_120);
//   Соответствие.Вставить("без НДС",                            Перечисления.СтавкиНДС.БезНДС);
//   Соответствие.Вставить("НДС исчисляется налоговым агентом"", "НДС исчисляется налоговым агентом"");
//
Процедура ЗаполнитьСоответствиеСтавокНДС(Соответствие) Экспорт
	
	//++ НЕ ГОСИС
	Соответствие.Вставить("0",       Перечисления.СтавкиНДС.НДС0);
	Соответствие.Вставить("10",      Перечисления.СтавкиНДС.НДС10);
	Соответствие.Вставить("18",      Перечисления.СтавкиНДС.НДС18);
	Соответствие.Вставить("20",      Перечисления.СтавкиНДС.НДС20);
	Соответствие.Вставить("10/110",  Перечисления.СтавкиНДС.НДС10_110);
	Соответствие.Вставить("18/118",  Перечисления.СтавкиНДС.НДС18_118);
	Соответствие.Вставить("20/120",  Перечисления.СтавкиНДС.НДС20_120);
	Соответствие.Вставить("без НДС", Перечисления.СтавкиНДС.БезНДС);
	Соответствие.Вставить("НДС исчисляется налоговым агентом", "НДС исчисляется налоговым агентом");
	//-- НЕ ГОСИС
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Настройка обмена ЭД.

// Процедура возвращает признак использования справочника Партнеров в качестве
// дополнительной аналитики к справочнику Контрагенты.
//
// Параметры:
//  ИспользуетсяСправочникПартнеры - Булево - флаг использования в библиотеке справочника Партнеры.
//
Процедура ДополнительнаяАналитикаКонтрагентовСправочникПартнеры(ИспользуетсяСправочникПартнеры) Экспорт
	
	//++ НЕ ГОСИС
	ИспользуетсяСправочникПартнеры = Истина;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Процедура возвращает признак использования справочника "Характеристики номенклатуры" в качестве
// дополнительной аналитики к справочнику Номенклатура.
//
// Параметры:
//  ИспользуетсяСправочникХарактеристикиНоменклатуры - Булево - флаг использования справочника "Характеристики номенклатуры".
//
Процедура ДополнительнаяАналитикаСправочникХарактеристикиНоменклатуры(ИспользуетсяСправочникХарактеристикиНоменклатуры) Экспорт
	
	//++ НЕ ГОСИС
	ИспользуетсяСправочникХарактеристикиНоменклатуры = Истина;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Процедура возвращает признак использования справочника "Упаковка номенклатуры" в качестве
// дополнительной аналитики к справочнику Номенклатура.
//
// Параметры:
//  ИспользуетсяСправочникУпаковкиНоменклатуры - Булево - флаг использования справочника "Упаковки номенклатуры".
//
Процедура ДополнительнаяАналитикаСправочникУпаковкиНоменклатуры(ИспользуетсяСправочникУпаковкиНоменклатуры) Экспорт
	
	//++ НЕ ГОСИС
	ИспользуетсяСправочникУпаковкиНоменклатуры = Истина;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Заполняет список команд ЭДО в прикладном решении.
// 
// Параметры:
//  СоставКомандЭДО - Структура - структура состава команд ЭДО.
//    Исходящие - Массив - состав объектов, например "Документ.РеализацияТоваровУслуг".
//    Входящие - Массив - состав объектов.
//    БезПодписи - Массив - состав объектов для обмена без ЭП.
//    Интеркампани - Массив - состав объектов Интеркампани.
//
Процедура ПодготовитьСтруктуруОбъектовКомандЭДО(СоставКомандЭДО) Экспорт
	
	//++ НЕ ГОСИС
	СоставКомандЭДО.Исходящие.Добавить("Документ.РеализацияТоваровУслуг");
	СоставКомандЭДО.Исходящие.Добавить("Документ.АктВыполненныхРабот");
	СоставКомандЭДО.Исходящие.Добавить("Документ.СчетФактураВыданный");
	СоставКомандЭДО.Исходящие.Добавить("Документ.СчетФактураВыданныйАванс");
	СоставКомандЭДО.Исходящие.Добавить("Документ.СчетФактураКомиссионеру");
	СоставКомандЭДО.Исходящие.Добавить("Документ.ЗаказПоставщику");
	СоставКомандЭДО.Исходящие.Добавить("Документ.ЗаказКлиента");
	СоставКомандЭДО.Исходящие.Добавить("Документ.СчетНаОплатуКлиенту");
	СоставКомандЭДО.Исходящие.Добавить("Документ.КоммерческоеПредложениеКлиенту");
	СоставКомандЭДО.Исходящие.Добавить("ЖурналДокументов.ОтчетыКомитентам");
	СоставКомандЭДО.Исходящие.Добавить("Документ.ОтчетКомитенту");
	СоставКомандЭДО.Исходящие.Добавить("Документ.ОтчетКомитентуОСписании");
	СоставКомандЭДО.Исходящие.Добавить("Документ.КорректировкаРеализации");
	СоставКомандЭДО.Исходящие.Добавить("Обработка.ЖурналДокументовЗакупки");	
	СоставКомандЭДО.Исходящие.Добавить("Обработка.ЖурналДокументовПродажи");
	СоставКомандЭДО.Исходящие.Добавить("Обработка.ЖурналДокументовНДС");
	СоставКомандЭДО.Исходящие.Добавить("Документ.АктОРасхожденияхПослеПриемки");
	СоставКомандЭДО.Исходящие.Добавить("Документ.ВозвратТоваровПоставщику");
	
	СоставКомандЭДО.Входящие.Добавить("Документ.ПриобретениеТоваровУслуг");
	СоставКомандЭДО.Входящие.Добавить("Документ.ПриобретениеУслугПрочихАктивов");
	СоставКомандЭДО.Входящие.Добавить("Документ.ВозвратТоваровОтКлиента");
	СоставКомандЭДО.Входящие.Добавить("Документ.СчетФактураПолученный");
	СоставКомандЭДО.Входящие.Добавить("Документ.СчетФактураПолученныйАванс");
	СоставКомандЭДО.Входящие.Добавить("Документ.СчетФактураКомитента");
	СоставКомандЭДО.Входящие.Добавить("Документ.ЗаказПоставщику");
	СоставКомандЭДО.Входящие.Добавить("Документ.ЗаказКлиента");
	СоставКомандЭДО.Входящие.Добавить("Документ.ЗаявкаНаРасходованиеДенежныхСредств");
	СоставКомандЭДО.Входящие.Добавить("Документ.РегистрацияЦенНоменклатурыПоставщика");
	СоставКомандЭДО.Входящие.Добавить("ЖурналДокументов.ОтчетыКомиссионеров");
	СоставКомандЭДО.Входящие.Добавить("Документ.ОтчетКомиссионера");
	СоставКомандЭДО.Входящие.Добавить("Документ.ОтчетКомиссионераОСписании");
	СоставКомандЭДО.Входящие.Добавить("Документ.КорректировкаПриобретения");
	СоставКомандЭДО.Входящие.Добавить("Обработка.ЖурналДокументовЗакупки");
 	СоставКомандЭДО.Входящие.Добавить("Обработка.ЖурналДокументовНДС");
	СоставКомандЭДО.Входящие.Добавить("Документ.АктОРасхожденияхПослеОтгрузки");
   		
	СоставКомандЭДО.Интеркампани.Добавить("Документ.ПередачаТоваровМеждуОрганизациями");
	СоставКомандЭДО.Интеркампани.Добавить("Документ.ВозвратТоваровМеждуОрганизациями");
	
	СоставКомандЭДО.БезПодписи.Добавить("Документ.РеализацияТоваровУслуг");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.АктВыполненныхРабот");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ЗаказПоставщику");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ЗаказКлиента");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.СчетНаОплатуКлиенту");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.КоммерческоеПредложениеКлиенту");
	СоставКомандЭДО.БезПодписи.Добавить("ЖурналДокументов.ОтчетыКомитентам");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ОтчетКомитенту");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ОтчетКомитентуОСписании");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.КорректировкаРеализации");
	СоставКомандЭДО.БезПодписи.Добавить("Обработка.ЖурналДокументовПродажи");
	
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ПриобретениеТоваровУслуг");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ПриобретениеУслугПрочихАктивов");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ЗаявкаНаРасходованиеДенежныхСредств");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.РегистрацияЦенНоменклатурыПоставщика");
	СоставКомандЭДО.БезПодписи.Добавить("ЖурналДокументов.ОтчетыКомиссионеров");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ОтчетКомиссионера");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ОтчетКомиссионераОСписании");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.КорректировкаПриобретения");
	СоставКомандЭДО.БезПодписи.Добавить("Обработка.ЖурналДокументовЗакупки");
	
	СоставКомандЭДО.Внутренние.Добавить("Документ.ИнвентаризационнаяОпись");
	СоставКомандЭДО.Внутренние.Добавить("Документ.ОприходованиеИзлишковТоваров");
	СоставКомандЭДО.Внутренние.Добавить("Документ.ВнутреннееПотреблениеТоваров");
	СоставКомандЭДО.Внутренние.Добавить("Документ.ПеремещениеТоваров");
	СоставКомандЭДО.Внутренние.Добавить("Документ.ПересортицаТоваров");
	СоставКомандЭДО.Внутренние.Добавить("Документ.СписаниеНедостачТоваров");
	СоставКомандЭДО.Внутренние.Добавить("Документ.ЛистКассовойКниги");
	СоставКомандЭДО.Внутренние.Добавить("Документ.ПриходныйКассовыйОрдер");
	СоставКомандЭДО.Внутренние.Добавить("Документ.РасходныйКассовыйОрдер");
	СоставКомандЭДО.Внутренние.Добавить("Документ.АвансовыйОтчет");
	СоставКомандЭДО.Внутренние.Добавить("Документ.ДоверенностьВыданная");
	СоставКомандЭДО.Внутренние.Добавить("Документ.ИнвентаризацияНаличныхДенежныхСредств");
	
	ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	Если ИспользоватьПартнеровКакКонтрагентов Тогда	
		СоставКомандЭДО.Контрагенты.Добавить("Справочник.Партнеры");
	Иначе	
		СоставКомандЭДО.Контрагенты.Добавить("Справочник.Контрагенты");
	КонецЕсли;
	СоставКомандЭДО.Организации.Добавить("Справочник.Организации");
	СоставКомандЭДО.Договоры.Добавить("Справочник.ДоговорыКонтрагентов");
	//-- НЕ ГОСИС
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Формирование данных для электронных документов.

// Работа с деревом данных ФНС.

// Подготавливает данные для электронного документа типа УПД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо 
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеДляУПДИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СсылкаНаОбъект, "НалогообложениеНДС") Тогда
		ТипыБезНДС = Перечисления.ТипыНалогообложенияНДС.ТипыБезНДС();
		Если ТипыБезНДС.Найти(СсылкаНаОбъект.НалогообложениеНДС) <> Неопределено И СтруктураЭД.Функция = "СЧФДОП" Тогда
			СтруктураЭД.Функция = "ДОП";
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураЭД.Функция <> "ДОП" Тогда
		Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураВыданный") 
				или ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураКомиссионеру") 
				или ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураВыданныйАванс") Тогда
			СчетФактура = СсылкаНаОбъект;
		Иначе
			МассивОбъектов = Новый Массив;
			МассивОбъектов.Добавить(СсылкаНаОбъект);		
			РезультатАнализа = Документы.СчетФактураВыданный.ПолучитьСчетаФактурыНаПечать(МассивОбъектов);
			МассивСчетовФактур = РезультатАнализа.СчетаФактурыНаПечать;
			Если МассивСчетовФактур.Количество() = 0 Тогда
				НоваяСчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();
				ЗаполнитьЗначенияСвойств(НоваяСчетФактура, СсылкаНаОбъект);
				СтрокаОснований = НоваяСчетфактура.ДокументыОснования.Добавить();
				
				НоваяСчетФактура.ДокументОснование 	= СсылкаНаОбъект.Ссылка;
				СтрокаОснований.ДокументОснование 	= СсылкаНаОбъект.Ссылка;
				НоваяСчетФактура.КодВидаОперации 	= НоваяСчетФактура.КодВидаОперации(СсылкаНаОбъект.Ссылка);
				НоваяСчетФактура.Дата 				= ТекущаяДатаСеанса();
				НоваяСчетФактура.ДатаВыставления 	= ТекущаяДатаСеанса();
				НоваяСчетФактура.УстановитьНовыйНомер();
				НоваяСчетФактура.ЗаполнитьПараметрыСчетаФактурыПоОснованию();
				
				НоваяСчетФактура.Записать(РежимЗаписиДокумента.Проведение);
				МассивСчетовФактур.Добавить(НоваяСчетФактура.Ссылка);
				
				//Запись в Реестр документов
				ДополнительныеСвойства = Новый Структура;
				РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(НоваяСчетФактура.Ссылка, ДополнительныеСвойства, Ложь);
			КонецЕсли;
			СчетФактура = МассивСчетовФактур[0];
		КонецЕсли;
		
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(СчетФактура);
		ПараметрыПечати = Новый Структура();
		
		Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураВыданныйАванс") Тогда
			СтруктураДанных = Документы.СчетФактураВыданныйАванс.ПолучитьДанныеДляПечатнойФормыСчетФактура(ПараметрыПечати, МассивОбъектов);
		Иначе
			СтруктураДанных = Документы[СчетФактура.Метаданные().Имя].ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати, МассивОбъектов);
		КонецЕсли;	
		
		ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеСчетаФактурыУПД(СтруктураДанных, СтруктураЭД, ДеревоДанных, Отказ);		
		ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеПервичногоДокументаУПД(СтруктураДанных, СтруктураЭД, ДеревоДанных, Отказ);
	Иначе
		ЗаполнитьДанныеДляДОПИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ);
	КонецЕсли;
	//-- НЕ ГОСИС

КонецПроцедуры

// Подготавливает данные для электронного документа типа УПД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо 
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеДляДОПИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	ПараметрыПечати = Новый Структура();
	
	Если СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот ИЛИ СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			СтруктураДанных = КорректировкаРеализацииЛокализация.ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати, МассивОбъектов);
		Иначе
			СтруктураДанных = АктВыполненныхРаботЛокализация.ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати, МассивОбъектов);
		КонецЕсли;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		ИмяОбъекта = СсылкаНаОбъект.Метаданные().Имя;
		МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(ИмяОбъекта);
		Если МенеджерОбъекта = Неопределено Тогда
			МенеджерОбъекта = Документы[ИмяОбъекта];
		КонецЕсли;
		СтруктураДанных = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати, МассивОбъектов);
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеПервичногоДокументаУПД(СтруктураДанных, СтруктураЭД, ДеревоДанных, Отказ)
	//-- НЕ ГОСИС

КонецПроцедуры

// Подготавливает данные для электронного документа типа УПД (информация покупателя).
//
// Параметры:
//  СсылкаНаЭД - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеДляУПДИнформацииПокупателяФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВладелецЭД", СтруктураЭД.ВладелецЭД);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование) = ТИП(Документ.ПриобретениеТоваровУслуг)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Порядок
	|ПОМЕСТИТЬ ВТОснование
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
	|ГДЕ
	|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка = &ВладелецЭД
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриобретениеТоваровУслуг.Дата КАК Дата,
	|	ПриобретениеТоваровУслуг.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	ПриобретениеТоваровУслуг.Организация.ИНН КАК ОрганизацияИНН,
	|	ПриобретениеТоваровУслуг.Организация.КПП КАК ОрганизацияКПП,
	|	&Принял КАК Принял,
	|	&Должность КАК ПринялДолжность
	|ИЗ
	|	&ТипДокумента КАК ПриобретениеТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОснование КАК ВТОснование
	|		ПО ПриобретениеТоваровУслуг.Ссылка = ВТОснование.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураПолученный.Дата КАК Дата,
	|	СчетФактураПолученный.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	СчетФактураПолученный.Организация.ИНН КАК ОрганизацияИНН,
	|	СчетФактураПолученный.Организация.КПП КАК ОрганизацияКПП	
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОснование КАК ВТОснование
	|		ПО СчетФактураПолученный.Ссылка = ВТОснование.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриобретениеТоваровУслугТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОснование КАК ВТОснование
	|		ПО ПриобретениеТоваровУслугТовары.Ссылка = ВТОснование.ДокументОснование
	|ГДЕ
	|	ПриобретениеТоваровУслугТовары.Номенклатура.ТипНоменклатуры = Значение(Перечисление.ТипыНоменклатуры.Товар)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриобретениеТоваровУслугТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОснование КАК ВТОснование
	|		ПО ПриобретениеТоваровУслугТовары.Ссылка = ВТОснование.ДокументОснование
	|ГДЕ			
	|	ПриобретениеТоваровУслугТовары.Номенклатура.ТипНоменклатуры = Значение(Перечисление.ТипыНоменклатуры.Услуга)
	|";
	
	Если ЗначениеЗаполнено(СтруктураЭД.ВладелецЭД.ДокументыОснования) И 
				ТипЗнч(СтруктураЭД.ВладелецЭД.ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда
		ОснованиеАкт = Истина;
	Иначе
		ОснованиеАкт = Ложь;
	КонецЕсли;	
		
	Если ОснованиеАкт Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТипДокумента", "Документ.ПриобретениеУслугПрочихАктивов");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Принял", "Неопределено");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Должность", "Неопределено");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТипДокумента", "Документ.ПриобретениеТоваровУслуг");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Принял", "ПриобретениеТоваровУслуг.Принял");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Должность", "ПриобретениеТоваровУслуг.ПринялДолжность");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	СодержаниеОперации =			 "-";
	ДатаПолученияТоваров =			 ТекущаяДатаСеанса();
	ОрганизацияНаименованиеПолное =	 "-";
	ТоварПринял = "";
	ТоварПринялДолжность = "";
	ЕстьДокументыУчета = Истина;
	
	Если Не РезультатЗапроса[1].Пустой() Тогда // В основаниях есть документ поступления
		
		Выборка = РезультатЗапроса[1].Выбрать();
		Выборка.Следующий();
		ДатаПолученияТоваров 		  =	Выборка.Дата;
		ОрганизацияНаименованиеПолное =	Выборка.ОрганизацияНаименованиеПолное;
		Если Не ОснованиеАкт Тогда
			ТоварПринял 				  = Выборка.Принял;
			ТоварПринялДолжность 		  = Выборка.ПринялДолжность;
		КонецЕсли;
		
	ИначеЕсли Не РезультатЗапроса[2].Пустой() Тогда // основание - СФ
		
		Выборка = РезультатЗапроса[2].Выбрать();
		Выборка.Следующий();
		ДатаПолученияТоваров =			 Выборка.Дата;
		ОрганизацияНаименованиеПолное =	 Выборка.ОрганизацияНаименованиеПолное;
		
	ИначеЕсли РезультатЗапроса[1].Пустой() и РезультатЗапроса[2].Пустой() Тогда
		
		ЕстьДокументыУчета = Ложь;
		ДатаПолученияТоваров =			 СтруктураЭД.ДатаЭД;
		ОрганизацияСсылка = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(СтруктураЭД.Организация);
		ОрганизацияНаименованиеПолное = ?(ЗначениеЗаполнено(ОрганизацияСсылка.НаименованиеПолное), ОрганизацияСсылка.НаименованиеПолное, ОрганизацияСсылка.Наименование);
		
	КонецЕсли;
	
	СоставСодержания = Новый Массив;
	Если Не РезультатЗапроса[3].Пустой() ИЛИ Не ЕстьДокументыУчета  Тогда
		СоставСодержания.Добавить(НСтр("ru = 'Товары принял без претензий.'"));
	КонецЕсли;
	Если Не РезультатЗапроса[4].Пустой() Или ОснованиеАкт Тогда
		СоставСодержания.Добавить(НСтр("ru = 'Услуги получены, претензий нет.'"));
	КонецЕсли;
	Если СоставСодержания.Количество() Тогда
		СодержаниеОперации  = СтрСоединить(СоставСодержания, " ");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОрганизацияНаименованиеПолное) И Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		ОрганизацияСсылка = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию();
		ОрганизацияНаименованиеПолное = ?(ЗначениеЗаполнено(ОрганизацияСсылка.НаименованиеПолное), ОрганизацияСсылка.НаименованиеПолное, ОрганизацияСсылка.Наименование);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка) Тогда
		СоставительДокумента = ?(ЗначениеЗаполнено(Выборка.ОрганизацияКПП),
			СтрШаблон(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
				ОрганизацияНаименованиеПолное, Выборка.ОрганизацияИНН, Выборка.ОрганизацияКПП),
			СтрШаблон(НСтр("ru = '%1, ИНН %2'"),
				ОрганизацияНаименованиеПолное, Выборка.ОрганизацияИНН));
	Иначе
		СоставительДокумента = ОрганизацияНаименованиеПолное;		
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование", СоставительДокумента);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаПолученияТоваров", ДатаПолученияТоваров);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", СодержаниеОперации);
	
	Если ЗначениеЗаполнено(ТоварПринял) Тогда
		ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ТоварПринял);
		Если ЗначениеЗаполнено(ТоварПринялДолжность)
			И ЗначениеЗаполнено(ТоварПринял) Тогда
			// Принявший товар работает в организации
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Должность", Строка(ТоварПринялДолжность));
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.ОснованиеПолномочий", "Должностные обязанности");					
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Фамилия", ФИО.Фамилия);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Имя", ФИО.Имя);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.РаботникОрганизацииПокупателя.Отчество", ФИО.Отчество);
		ИначеЕсли ЗначениеЗаполнено(ТоварПринял) Тогда
			// Принявший товар не работает в организации
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Фамилия", ФИО.Фамилия);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Имя", ФИО.Имя);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПринявшемТовары.ИноеЛицо.ФЛ.Отчество", ФИО.Отчество);
		КонецЕсли;
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УПД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо 
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеДляСЧФИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	ЗаполнитьДанныеДляУПДИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ)
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УКД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеДляУКДИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		СчетФактура = СсылкаНаОбъект;
	Иначе
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(СсылкаНаОбъект);		
		РезультатАнализа = Документы.СчетФактураВыданный.ПолучитьСчетаФактурыНаПечать(МассивОбъектов);
		МассивСчетовФактур = РезультатАнализа.СчетаФактурыНаПечать;
		Если МассивСчетовФактур.Количество() = 0 Тогда
			НоваяСчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(НоваяСчетФактура, СсылкаНаОбъект);
			СтрокаОснований = НоваяСчетфактура.ДокументыОснования.Добавить();
			
			НоваяСчетФактура.ДокументОснование 	= СсылкаНаОбъект.Ссылка;
			СтрокаОснований.ДокументОснование 	= СсылкаНаОбъект.Ссылка;
			НоваяСчетФактура.КодВидаОперации 	= НоваяСчетФактура.КодВидаОперации(СсылкаНаОбъект.Ссылка);
			НоваяСчетФактура.КодВидаОперацииНаУменьшение 	= "18";
			НоваяСчетФактура.Дата 				= ТекущаяДатаСеанса();
			НоваяСчетФактура.ДатаВыставления 	= ТекущаяДатаСеанса();
			НоваяСчетФактура.ЗаполнитьПараметрыСчетаФактурыПоОснованию(СсылкаНаОбъект.Ссылка);
			
			НоваяСчетФактура.Записать(РежимЗаписиДокумента.Проведение);
			МассивСчетовФактур.Добавить(НоваяСчетФактура.Ссылка);
			
			//Запись в Реестр документов
			ДополнительныеСвойства = Новый Структура;
			РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(НоваяСчетФактура.Ссылка, ДополнительныеСвойства, Ложь);
		КонецЕсли;
		СчетФактура = МассивСчетовФактур[0];
	КонецЕсли;
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СчетФактура);
	
	ПараметрыПечати = Новый Структура();
	ПараметрыПечати.Вставить("ЗаполнитьДанныеШтрихкодовДляУКДДо", Истина);
	
	СтруктураДанных = Документы.СчетФактураВыданный.ПолучитьДанныеДляПечатнойФормыУКД(ПараметрыПечати, МассивОбъектов);
	
	ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеСчетаФактурыУКД(СтруктураДанных, СтруктураЭД, ДеревоДанных);		
	ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеПервичногоДокументаУКД(СтруктураДанных, СтруктураЭД, ДеревоДанных);				
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УКД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеДляДИСИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	ПараметрыПечати = Новый Структура();
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		РезультатАнализа = Документы.СчетФактураВыданный.ПолучитьСчетаФактурыНаПечать(МассивОбъектов);
		МассивСчетовФактур = РезультатАнализа.СчетаФактурыНаПечать;
		СтруктураДанных = Документы.СчетФактураВыданный.ПолучитьДанныеДляПечатнойФормыУКД(ПараметрыПечати, МассивСчетовФактур);
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		ИмяОбъекта = СсылкаНаОбъект.Метаданные().Имя;
		МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(ИмяОбъекта);
		Если МенеджерОбъекта = Неопределено Тогда
			МенеджерОбъекта = Документы[ИмяОбъекта];
		КонецЕсли;
		СтруктураДанных = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыУКД(ПараметрыПечати, МассивОбъектов);
	КонецЕсли;	
	
	ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеПервичногоДокументаУКД(СтруктураДанных, СтруктураЭД, ДеревоДанных)
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УКД (информация покупателя).
//
// Параметры:
//  СсылкаНаЭД - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеДляУКДИнформацииПокупателяФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВладелецЭД", СтруктураЭД.ВладелецЭД);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование) = ТИП(Документ.КорректировкаПриобретения)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Порядок
	|ПОМЕСТИТЬ ВТОснование
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
	|ГДЕ
	|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка = &ВладелецЭД
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректировкаПриобретения.Дата,
	|	КорректировкаПриобретения.Организация.НаименованиеПолное,
	|	КорректировкаПриобретения.Организация.ИНН КАК ОрганизацияИНН,
	|	КорректировкаПриобретения.Организация.КПП КАК ОрганизацияКПП	
	|ИЗ
	|	Документ.КорректировкаПриобретения КАК КорректировкаПриобретения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОснование КАК ВТОснование
	|		ПО КорректировкаПриобретения.Ссылка = ВТОснование.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураПолученный.Дата,
	|	СчетФактураПолученный.Организация.НаименованиеПолное,
	|	СчетФактураПолученный.Организация.ИНН КАК ОрганизацияИНН,
	|	СчетФактураПолученный.Организация.КПП КАК ОрганизацияКПП	
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОснование КАК ВТОснование
	|		ПО СчетФактураПолученный.Ссылка = ВТОснование.ДокументОснование";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ДатаПолученияКорректировки = ТекущаяДатаСеанса();
	ОрганизацияНаименованиеПолное =	 "-";
	Если Не РезультатЗапроса[1].Пустой() Тогда // В основаниях есть документ поступления
		
		Выборка = РезультатЗапроса[1].Выбрать();
		Выборка.Следующий();
		ДатаПолученияКорректировки 	  =	 Выборка.Дата;
		ОрганизацияНаименованиеПолное =	 Выборка.ОрганизацияНаименованиеПолное;
		
	ИначеЕсли Не РезультатЗапроса[2].Пустой() Тогда // основание - СФ
		
		Выборка = РезультатЗапроса[2].Выбрать();
		Выборка.Следующий();
		ДатаПолученияКорректировки 	  =	 Выборка.Дата;
		ОрганизацияНаименованиеПолное =	 Выборка.ОрганизацияНаименованиеПолное;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОрганизацияНаименованиеПолное) И Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		ОрганизацияСсылка = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(СтруктураЭД.Организация);
		ОрганизацияНаименованиеПолное = ?(ЗначениеЗаполнено(ОрганизацияСсылка.НаименованиеПолное), ОрганизацияСсылка.НаименованиеПолное, ОрганизацияСсылка.Наименование);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка) Тогда
		СоставительДокумента = ?(ЗначениеЗаполнено(Выборка.ОрганизацияКПП),
			СтрШаблон(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
				ОрганизацияНаименованиеПолное, Выборка.ОрганизацияИНН, Выборка.ОрганизацияКПП),
			СтрШаблон(НСтр("ru = '%1, ИНН %2'"),
				ОрганизацияНаименованиеПолное, Выборка.ОрганизацияИНН));
	Иначе
		СоставительДокумента = ОрганизацияНаименованиеПолное;		
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование", СоставительДокумента);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаСогласования", ДатаПолученияКорректировки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", НСтр("ru = 'С изменением стоимости согласен.'"));
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УКД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеДляКСЧФИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	ЗаполнитьДанныеДляУКДИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ)	
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Торг12 титул покупателя.
//
// Параметры:
//  СсылкаНаЭД - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоТорг12ПокупательФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеПоТорг12ПокупательФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных, Отказ);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Подготавливает данные титула заказчика для электронного документа типа Акт выполненных работ формата 5.01.
//
// Параметры:
//  СсылкаНаЭД - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоАкт501ЗаказчикФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеПоАкт501ЗаказчикФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных, Отказ);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа СоглашениеОбИзмененииСтоимостиПолучатель.
//
// Параметры:
//  СсылкаНаЭД - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоКорректировочномуДокументуПолучатель(СсылкаНаЭД, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеПоКорректировочномуДокументуПолучатель(СсылкаНаЭД, СтруктураЭД, ДеревоДанных, Отказ);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ПередачаТоваровПродавец.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПередачаТоваровПродавец(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	УстановитьПривилегированныйРежим(Истина);
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	ПараметрыПечати = Новый Структура("ВыводитьУслуги", Истина);
	
	ИмяОбъекта = СсылкаНаОбъект.Метаданные().Имя;
	МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(ИмяОбъекта);
	Если МенеджерОбъекта = Неопределено Тогда
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяОбъекта);
	КонецЕсли;
		
	ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыТОРГ12(ПараметрыПечати, МассивОбъектов);
	
	ВыборкаТоваров = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	РеквизитыШапки = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	РеквизитыШапки.Следующий();
	
	СтруктураПоиска = Новый Структура("Ссылка", РеквизитыШапки.Ссылка);
	ВыборкаТоваров.Сбросить();
	
	НайденСледующий = ВыборкаТоваров.НайтиСледующий(СтруктураПоиска);
	
	Если НайденСледующий Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"НомерТоварнойНакладной", 
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыШапки.Номер));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ДатаТоварнойНакладной", 
			РеквизитыШапки.Дата);
		
		Если ЗначениеЗаполнено(РеквизитыШапки.Основание) 
			И ЗначениеЗаполнено(РеквизитыШапки.ОснованиеДата) Тогда
			ДокументыОснования = Новый ТаблицаЗначений;
			ДокументыОснования.Колонки.Добавить("ДокОснованиеНаименование");
			ДокументыОснования.Колонки.Добавить("ДокОснованиеНомер");
			ДокументыОснования.Колонки.Добавить("ДокОснованиеДата");
		
			СтрокаДокументыОснования = ДокументыОснования.Добавить();
			
			Если СтрНайти(РеквизитыШапки.Основание, "№") Тогда
				СтрокаНаименование = Лев(РеквизитыШапки.Основание, СтрНайти(РеквизитыШапки.Основание, "№") - 2);
			Иначе
				СтрокаНаименование = РеквизитыШапки.Основание;
			КонецЕсли;
			СтрокаДокументыОснования.ДокОснованиеНаименование 	= СтрокаНаименование;
			СтрокаДокументыОснования.ДокОснованиеНомер 			= РеквизитыШапки.ОснованиеНомер;
			СтрокаДокументыОснования.ДокОснованиеДата 			= РеквизитыШапки.ОснованиеДата;
			
			// Дополним таблицу оснований параметрами обработки ошибок.
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ДокументыОснования,
				"ДокОснованиеНаименование",,, НСтр("ru = 'Не указано наименование документа основания'"));
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ДокументыОснования,
				"ДокОснованиеНомер",,, НСтр("ru = 'Не указан номер документа основания'"));
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ДокументыОснования,
				"ДокОснованиеДата",,, НСтр("ru = 'Не указана дата документа основания'"));
			
			Если ЗначениеЗаполнено(СтрокаНаименование) Тогда
				ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ДокументыОснования, "Основание");
			КонецЕсли;
		Иначе
			ТекстОшибки = НСтр("ru = 'Возникла ошибка при заполнении основания отгрузки. Возможные причины:
			|	- в документе отгрузки не указан договор
			|	- в договоре не указана дата'");
			ЭлектронноеВзаимодействие.ДобавитьВРеквизитОбработкуОшибки(ДеревоДанных,
				"Основание.НомерСтроки.ДокОснованиеДата", ТекстОшибки);
		КонецЕсли;
			
		СведенияОПоставщике       = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, РеквизитыШапки.БанковскийСчетОрганизации);
		СведенияОПокупателе       = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, РеквизитыШапки.БанковскийСчетКонтрагента);
		ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеУчастникаТОРГ(ДеревоДанных, СведенияОПоставщике, "Поставщик",  "Юр", РеквизитыШапки.Дата);
		ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеУчастникаТОРГ(ДеревоДанных, СведенияОПокупателе, "Плательщик", "Юр", РеквизитыШапки.Дата);
		// Заполняем структурное подразделение
		ЭлектронноеВзаимодействиеУТ.ЗаполнитьСтруктурноеПодразделение(ДеревоДанных, "Поставщик", РеквизитыШапки.Ссылка.Подразделение);
		
		СведенияОГрузоотправителе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузоотправитель, РеквизитыШапки.БанковскийСчетГрузоотправителя);
		СведенияОГрузополучателе  = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузополучатель, РеквизитыШапки.БанковскийСчетГрузополучателя);
		Если РеквизитыШапки.Организация <> РеквизитыШапки.Грузоотправитель Тогда
			ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеУчастникаТОРГ(ДеревоДанных, СведенияОГрузоотправителе, "Грузоотправитель", "Факт", РеквизитыШапки.Дата);
		Иначе
			ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеУчастникаТОРГ(ДеревоДанных, СведенияОПоставщике, "Грузоотправитель", "Факт", РеквизитыШапки.Дата);
		КонецЕсли;
		ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеУчастникаТОРГ(ДеревоДанных, СведенияОГрузополучателе, "Грузополучатель",  "Факт", РеквизитыШапки.Дата);
		
		ТекстОшибки = НСтр("ru = 'Не удалось заполнить код валюты документа. Проверьте, что:
		|	- в документе указана валюта,
		|	- для нее заполнен код по Общероссийскому классификатору валют.'");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", "643", ТекстОшибки);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаНаименование", "Российский рубль");
		
		ТаблицаТоваров = Новый ТаблицаЗначений;
		ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
		ТаблицаТоваров.Колонки.Добавить("НаименованиеХарактеристики");
		ТаблицаТоваров.Колонки.Добавить("Сорт");
		ТаблицаТоваров.Колонки.Добавить("Артикул");
		ТаблицаТоваров.Колонки.Добавить("КодТовара");
		ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
		ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
		ТаблицаТоваров.Колонки.Добавить("ВидУпаковки");
		ТаблицаТоваров.Колонки.Добавить("КоличествоВОдномМесте");
		ТаблицаТоваров.Колонки.Добавить("КоличествоМест");
		ТаблицаТоваров.Колонки.Добавить("МассаБрутто");
		ТаблицаТоваров.Колонки.Добавить("МассаНетто");
		ТаблицаТоваров.Колонки.Добавить("Цена");
		ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
		ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
		ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
		ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
		ТаблицаТоваров.Колонки.Добавить("ДокументОснование");
		ТаблицаТоваров.Колонки.Добавить("Номенклатура");
		ТаблицаТоваров.Колонки.Добавить("Характеристика");
		ТаблицаТоваров.Колонки.Добавить("Упаковка");
		ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
		ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
		ТаблицаТоваров.Колонки.Добавить("Сопоставление");
		
		ИтоговыеСуммы = ЭлектронноеВзаимодействиеУТ.СтруктураИтоговыеСуммы(СтруктураЭД.ВидЭД);
		
		ИспользоватьНаборы = Ложь;
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ВыборкаТоваров, "ЭтоНабор") Тогда
			ИспользоватьНаборы = Истина;
		КонецЕсли;
	
		СтрокаТовары = ВыборкаТоваров.Выбрать();
		
		ЗаполнениеКодаТовара = СтруктураЭД.ВариантыЗаполненияПолей.ТоварКод;
	
		ШтрихкодыКомбинаций = Неопределено;
		ШтрихкодыНоменклатуры = Неопределено;
		ЭлектронноеВзаимодействиеУТ.ШтрихкодыПоТоварам(СтрокаТовары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);	

		ВыборкаДляСопоставления = ЭлектронноеВзаимодействиеУТ.ВыборкаДляСопоставленияНоменклатуры(СсылкаНаОбъект);
		СоответствиеСтавокНДСКонтрагента = Новый Соответствие;
		ЗаполнитьСоответствиеСтавокНДС(СоответствиеСтавокНДСКонтрагента);	
		ТаблицаСопоставления = ВыборкаДляСопоставления.Выгрузить();
		
		Пока СтрокаТовары.Следующий() Цикл
			
			Если ИспользоватьНаборы Тогда
				Если СтрокаТовары.ЭтоНабор и СтрокаТовары.ВариантПредставленияНабораВПечатныхФормах <> Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоНабор Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
			
			НоваяСтрока.Артикул = СтрокаТовары.НоменклатураКод;
			
			ЕстьХарактеристика = ЗначениеЗаполнено(СтрокаТовары.Характеристика);
			ЕстьУпаковка       = ЗначениеЗаполнено(СтрокаТовары.Упаковка);
			
			НоваяСтрока.МассаНетто = СтрокаТовары.Количество;
			НоваяСтрока.Цена  = Окр(СтрокаТовары.Цена, 2);
			ЭлектронноеВзаимодействиеУТ.ОкруглитьМассыТовара(НоваяСтрока);
			
			Если ЗначениеЗаполнено(НоваяСтрока.КоличествоМест) Тогда
				Если НоваяСтрока.КоличествоМест <> Цел(НоваяСтрока.КоличествоМест) Тогда
					НоваяСтрока.КоличествоМест = Цел(НоваяСтрока.КоличествоМест) + 1;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(НоваяСтрока.КоличествоВОдномМесте) Тогда
				Если НоваяСтрока.КоличествоВОдномМесте <> Цел(НоваяСтрока.КоличествоВОдномМесте) Тогда
					НоваяСтрока.КоличествоВОдномМесте = Цел(НоваяСтрока.КоличествоВОдномМесте) + 1;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока.БазоваяЕдиницаКод = СокрЛП(СтрокаТовары.ЕдиницаИзмеренияКод);
			НоваяСтрока.НаименованиеНоменклатуры = СтрокаТовары.НоменклатураНаименование;
			НоваяСтрока.НаименованиеХарактеристики 	= СтрокаТовары.ХарактеристикаНаименование;

			Если ТипЗнч(СтрокаТовары.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				Если СтрокаТовары.НомерСтроки > 0 Тогда
					СтрокаТабЧасти = СтрокаТовары.Ссылка.Товары[СтрокаТовары.НомерСтроки - 1];
				Иначе
					СтрокаТабЧасти = СтрокаТовары.Ссылка.Товары[СтрокаТовары.НомерСтроки];
				КонецЕсли;	
				УпаковкаИзДокумента = СтрокаТабЧасти.Упаковка;
				Если УпаковкаИзДокумента = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка() Тогда
					УпаковкаИзДокумента = ЭлектронноеВзаимодействиеУТВызовСервера.ЕдиницаХраненияНоменклатуры(СтрокаТабЧасти.Номенклатура)
				КонецЕсли;
			Иначе
				УпаковкаИзДокумента = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();					
			КонецЕсли;
		
			// Сопоставление.
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
			ПараметрыОтбора.Вставить("Характеристика", СтрокаТовары.Характеристика);
			ПараметрыОтбора.Вставить("Упаковка", УпаковкаИзДокумента);
			СтрокиИзНоменклатурыКонтрагентов = ТаблицаСопоставления.НайтиСтроки(ПараметрыОтбора);
			Если СтрокиИзНоменклатурыКонтрагентов.Количество() Тогда
				НайденнаяСтрока = СтрокиИзНоменклатурыКонтрагентов[0];
				НоваяСтрока.Сопоставление = ЭлектронноеВзаимодействиеУТ.ЗаполнитьСопоставлениеНоменклатуры(НайденнаяСтрока,,,,СоответствиеСтавокНДСКонтрагента);
		    Иначе
				НоваяСтрока.Сопоставление = ЭлектронноеВзаимодействиеУТ.ЗаполнитьСопоставлениеНоменклатуры(СтрокаТовары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры, УпаковкаИзДокумента);
			КонецЕсли;
	
			//Анализ вариантов заполнения
			Если ЗаполнениеКодаТовара = "Штрихкод" И НоваяСтрока.Сопоставление.Свойство("ШтрихкодКомбинации") Тогда
				НоваяСтрока.КодТовара = НоваяСтрока.Сопоставление.ШтрихкодКомбинации;
			ИначеЕсли ЗаполнениеКодаТовара = "Штрихкод" И НоваяСтрока.Сопоставление.Свойство("ШтрихкодыНоменклатуры") Тогда
				НоваяСтрока.ТоварКод = НоваяСтрока.Сопоставление.ШтрихкодыНоменклатуры[0];				
			Иначе
				НоваяСтрока.КодТовара = СтрокаТовары.НоменклатураКод;
			КонецЕсли;
			//Конец анализа вариантов заполнения
			
			ЭлектронноеВзаимодействиеУТ.РассчитатьИтоговыеСуммы(ИтоговыеСуммы, НоваяСтрока, СтруктураЭД.ВидЭД);
		КонецЦикла;
		
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
			"ЕдиницаИзмеренияНаименование",,, НСтр("ru = 'Не заполнено наименование единицы измерения в справочнике ""Упаковки и единицы измерения"".'"));
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
			"БазоваяЕдиницаКод",,, НСтр("ru = 'Не заполнен код единицы измерения в справочнике ""Упаковки и единицы измерения"".'"));
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ТаблицаТоваров");
		
		ЭлектронноеВзаимодействиеУТ.ЗаполнитьРеквизитыПодвала(РеквизитыШапки, ИтоговыеСуммы, ДеревоДанных);
		
		Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, 
				"ВидОперации", 
				Перечисления.ВидыОперацийЭД.Исправление);
			ЭлектронноеВзаимодействиеУТ.ЗаполнитьДокументыОснования(ДеревоДанных, СсылкаНаОбъект);
		Иначе
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, 
				"ВидОперации", 
				Перечисления.ВидыОперацийЭД.ПродажаКомиссия);
			ЭлектронноеВзаимодействиеУТ.ЗаполнитьУИП(ДеревоДанных, СсылкаНаОбъект.ИдентификаторПлатежа);			
		КонецЕсли;
		
	Иначе
		
		Если (РеквизитыШапки.Статус <> Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено) Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документ %1 для формирования ЭД должен быть в статусе ""Реализовано"".'"), 
				РеквизитыШапки.Ссылка);
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документ %1 не содержит данных для формирования ЭД.'"), 
				РеквизитыШапки.Ссылка);				
		КонецЕсли;
			
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ПередачаРаботИсполнитель.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПередачаРаботИсполнитель(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	
	ПараметрыПечати = Новый Структура;
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		ДанныеДляПечати = Документы["АктВыполненныхРабот"].ПолучитьДанныеДляПечати(МассивОбъектов, ПараметрыПечати);
	Иначе
		ДанныеДляПечати = Документы[СсылкаНаОбъект.Метаданные().Имя].ПолучитьДанныеДляПечатнойФормыАктОбОказанииУслуг(ПараметрыПечати, МассивОбъектов);
	КонецЕсли;
	
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	РеквизитыШапки = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	РеквизитыШапки.Следующий();
	
	СтруктураПоиска = Новый Структура("Ссылка", РеквизитыШапки.Ссылка);
	ВыборкаПоДокументам.Сбросить();
	
	Если ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска) Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"НомерАкта", 
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыШапки.Номер, Ложь, Ложь));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ДатаАкта", 
			РеквизитыШапки.Дата);
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"СведенияПоВыполнениюУслуг.ДатаИсполнения",
			РеквизитыШапки.Дата);
			
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыШапки.Ссылка, "Основание, ОснованиеНомер, ОснованиеДата");
		Основание = РеквизитыОснования.Основание;
		ОснованиеНомер = РеквизитыОснования.ОснованиеНомер;
		ОснованиеДата  = РеквизитыОснования.ОснованиеДата;
			
		Если ЗначениеЗаполнено(Основание) 
			И ЗначениеЗаполнено(ОснованиеДата) Тогда
			
			ДокументыОснования = Новый ТаблицаЗначений;
			ДокументыОснования.Колонки.Добавить("ДокОснованиеНаименование");
			ДокументыОснования.Колонки.Добавить("ДокОснованиеНомер");
			ДокументыОснования.Колонки.Добавить("ДокОснованиеДата");
		
			СтрокаДокументыОснования = ДокументыОснования.Добавить();
			
			Если СтрНайти(Основание, "№") Тогда
				СтрокаНаименование = Лев(Основание, СтрНайти(Основание, "№") - 2);
			Иначе
				СтрокаНаименование = Основание;
			КонецЕсли;
			СтрокаДокументыОснования.ДокОснованиеНаименование 	= СтрокаНаименование;
			СтрокаДокументыОснования.ДокОснованиеНомер 			= ОснованиеНомер;
			СтрокаДокументыОснования.ДокОснованиеДата 			= ОснованиеДата;
			
			// Дополним таблицу оснований параметрами обработки ошибок.
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ДокументыОснования,
				"ДокОснованиеНаименование",,, НСтр("ru = 'Не указано наименование документа основания'"));
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ДокументыОснования,
				"ДокОснованиеНомер",,, НСтр("ru = 'Не указан номер документа основания'"));
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ДокументыОснования,
				"ДокОснованиеДата",,, НСтр("ru = 'Не указана дата документа основания'"));
			
			Если ЗначениеЗаполнено(СтрокаНаименование) Тогда
				ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ДокументыОснования, "Основание");
			КонецЕсли;
		Иначе
			ТекстОшибки = НСтр("ru = 'Возникла ошибка при заполнении основания отгрузки. Возможные причины:
			|	- в документе отгрузки не указан договор
			|	- в договоре не указана дата'");
			ЭлектронноеВзаимодействие.ДобавитьВРеквизитОбработкуОшибки(ДеревоДанных,
				"Основание.НомерСтроки.ДокОснованиеДата", ТекстОшибки);
		КонецЕсли;
			
		ТекстЗаголовка = "Мы, нижеподписавшиеся, представитель ИСПОЛНИТЕЛЯ, с одной стороны и представитель ЗАКАЗЧИКА с другой
						|стороны, составили настоящий акт в том, что ИСПОЛНИТЕЛЬ выполнил, а ЗАКАЗЧИК принял следующие работы (услуги).";
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Заголовок", ТекстЗаголовка);
		
		Если ТипЗнч(СсылкаНаОбъект) <> Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			СведенияОПоставщике = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, РеквизитыШапки.СчетОрганизации);
			СведенияОПокупателе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, РеквизитыШапки.СчетКонтрагента);
		Иначе
			СведенияОПоставщике = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация);
			СведенияОПокупателе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент);
		КонецЕсли;	
		
		ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеУчастникаТОРГ(ДеревоДанных, СведенияОПоставщике, "Исполнитель", "Юр", РеквизитыШапки.Дата);
		ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеУчастникаТОРГ(ДеревоДанных, СведенияОПокупателе, "Заказчик",    "Юр", РеквизитыШапки.Дата);
		
		// Заполняем структурное подразделение
		ЭлектронноеВзаимодействиеУТ.ЗаполнитьСтруктурноеПодразделение(ДеревоДанных, "Исполнитель", РеквизитыШапки.Ссылка.Подразделение);
		
		ВалютаКод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыШапки.Валюта, "Код");
		ВалютаНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыШапки.Валюта, "НаименованиеПолное");
		ТекстОшибки = НСтр("ru = 'Не удалось заполнить код валюты документа. Проверьте, что:
		|	- в документе указана валюта,
		|	- для нее заполнен код по Общероссийскому классификатору валют.'");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", ВалютаКод, ТекстОшибки);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаНаименование", ВалютаНаименование);
		
		ТаблицаУслуг = Новый ТаблицаЗначений();
		ТаблицаУслуг.Колонки.Добавить("НаименованиеНоменклатуры");
		ТаблицаУслуг.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
		ТаблицаУслуг.Колонки.Добавить("ЕдиницаИзмеренияКод");
		ТаблицаУслуг.Колонки.Добавить("Количество");
		ТаблицаУслуг.Колонки.Добавить("Цена");
		ТаблицаУслуг.Колонки.Добавить("СуммаБезНДС");
		ТаблицаУслуг.Колонки.Добавить("СтавкаНДС");
		ТаблицаУслуг.Колонки.Добавить("СуммаНДС");
		ТаблицаУслуг.Колонки.Добавить("СуммаСНДС");
		ТаблицаУслуг.Колонки.Добавить("Описание");
		ТаблицаУслуг.Колонки.Добавить("ДокументОснование");
		ТаблицаУслуг.Колонки.Добавить("Номенклатура");
		ТаблицаУслуг.Колонки.Добавить("ДопДанныеПодписанные");
		ТаблицаУслуг.Колонки.Добавить("ДопДанныеНеПодписанные");
		ТаблицаУслуг.Колонки.Добавить("Сопоставление");
		
		// Выводим строки таблицы Услуги
		Выборка = ВыборкаПоДокументам.Выбрать();
		
		ШтрихкодыКомбинаций = Неопределено;
		ШтрихкодыНоменклатуры = Неопределено;
		ЭлектронноеВзаимодействиеУТ.ШтрихкодыПоТоварам(Выборка, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);	

		ВыборкаДляСопоставления = ЭлектронноеВзаимодействиеУТ.ВыборкаДляСопоставленияНоменклатуры(СсылкаНаОбъект);
		СоответствиеСтавокНДСКонтрагента = Новый Соответствие;
		ЗаполнитьСоответствиеСтавокНДС(СоответствиеСтавокНДСКонтрагента);	
		ТаблицаСопоставления = ВыборкаДляСопоставления.Выгрузить();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ТаблицаУслуг.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			НоваяСтрока.НаименованиеНоменклатуры = Выборка.УслугаНаименованиеПолное;
			ЕстьХарактеристика = ЗначениеЗаполнено(Выборка.Характеристика);
			
			НоваяСтрока.Описание = 
				Выборка.УслугаНаименованиеПолное + ?(ЕстьХарактеристика, " (" + Выборка.ХарактеристикаНаименованиеПолное + ")", "");
			
			НоваяСтрока.СуммаБезНДС = Выборка.Сумма - ?(РеквизитыШапки.ЦенаВключаетНДС И Выборка.СуммаНДС > 0, Выборка.СуммаНДС, 0);
			НоваяСтрока.СуммаСНДС   = НоваяСтрока.СуммаБезНДС + Выборка.СуммаНДС;
			
			Если РеквизитыШапки.ЦенаВключаетНДС Тогда
				НоваяСтрока.Цена = ?(Выборка.Количество = 0, 0, Окр(НоваяСтрока.СуммаБезНДС / НоваяСтрока.Количество, 2));
			КонецЕсли;
			
			НоваяСтрока.ЕдиницаИзмеренияКод = СокрЛП(Выборка.ЕдиницаИзмеренияКод);
			
			Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
				УпаковкаИзДокумента = Выборка.ЕдиницаИзмерения;
			Иначе
				УпаковкаИзДокумента = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();					
			КонецЕсли;
			
			// Сопоставление.
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", Выборка.Номенклатура);
			ПараметрыОтбора.Вставить("Характеристика", Выборка.Характеристика);
			ПараметрыОтбора.Вставить("Упаковка", УпаковкаИзДокумента);
			СтрокиИзНоменклатурыКонтрагентов = ТаблицаСопоставления.НайтиСтроки(ПараметрыОтбора);
			Если СтрокиИзНоменклатурыКонтрагентов.Количество() Тогда
				НайденнаяСтрока = СтрокиИзНоменклатурыКонтрагентов[0];
				НоваяСтрока.Сопоставление = ЭлектронноеВзаимодействиеУТ.ЗаполнитьСопоставлениеНоменклатуры(НайденнаяСтрока,,,,СоответствиеСтавокНДСКонтрагента);
		    Иначе
				НоваяСтрока.Сопоставление = ЭлектронноеВзаимодействиеУТ.ЗаполнитьСопоставлениеНоменклатуры(Выборка, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры, УпаковкаИзДокумента);
			КонецЕсли;		
		КонецЦикла;
		
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаУслуг,
			"Количество",,, НСтр("ru = 'Не указано количество товара в табличной части'"));
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаУслуг,
			"ЕдиницаИзмеренияНаименование",,, НСтр("ru = 'Не заполнено наименование единицы измерения в справочнике ""Упаковки и единицы измерения"".'"));
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаУслуг,
			"ЕдиницаИзмеренияКод",,, НСтр("ru = 'Не заполнен код единицы измерения в справочнике ""Упаковки и единицы измерения"".'"));
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаУслуг, "ТаблицаУслуг");
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ОписаниеУслуги.НачалоРабот", 
			РеквизитыШапки.Дата);
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			"ОписаниеУслуги.КонецРабот", 
			РеквизитыШапки.Дата);
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ОписаниеУслуги.СуммаБезНДСИтого",
			ТаблицаУслуг.Итог("СуммаБезНДС"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ОписаниеУслуги.СуммаНДСИтого",
			ТаблицаУслуг.Итог("СуммаНДС"));
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ОписаниеУслуги.СуммаСНДСИтого",
			ТаблицаУслуг.Итог("СуммаСНДС"));
			
		Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, 
				"ВидОперации", 
				Перечисления.ВидыОперацийЭД.Исправление);
			ЭлектронноеВзаимодействиеУТ.ЗаполнитьДокументыОснования(ДеревоДанных, СсылкаНаОбъект);
		Иначе
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, 
				"ВидОперации", 
				Перечисления.ВидыОперацийЭД.ПродажаКомиссия);
			ЭлектронноеВзаимодействиеУТ.ЗаполнитьУИП(ДеревоДанных, СсылкаНаОбъект.ИдентификаторПлатежа); 			
		КонецЕсли; 		

	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Работа со деревом данных CML

// Подготавливает данные для электронного документа типа Реквизиты организации формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - СправочникСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево значений, соответствующее макету РеквизитыОрганизации обработки ОбменСКонтрагентами.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеРеквизитыОрганизации(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	СведенияОбОрганизации = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(СсылкаНаОбъект);
	
	ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОбОрганизации, "Организация", "Юр", ТекущаяДатаСеанса());
	
	Поля = "РуководительФамилия,РуководительИмя,РуководительОтчество,РуководительДолжность";
	Сведения = ОрганизацииСервер.СведенияОбОрганизации(СсылкаНаОбъект, Поля);
	Если ЗначениеЗаполнено(Сведения.РуководительФамилия) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Организация.Руководитель.Фамилия", Сведения.РуководительФамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Организация.Руководитель.Имя", Сведения.РуководительИмя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Организация.Руководитель.Отчество", Сведения.РуководительОтчество);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Организация.Руководитель.Должность", Сведения.РуководительДолжность);
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаФормирования", ТекущаяДатаСеанса());
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Наименование", "Реквизиты " + СсылкаНаОбъект.Наименование);
	//-- НЕ ГОСИС

КонецПроцедуры

// Подготавливает данные для электронного документа типа КаталогТоваров формата CML 2.
//
// Параметры:
//  Организация - СправочникСсылка - ссылка на объект информационной базы, по которому необходимо
//                                   создать электронный документ.
//  ТоварыКаталога - Массив - список товаров для заполнения каталога.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоКаталогуТоваровCML(Организация, ТоварыКаталога, ДеревоДанных, Отказ) Экспорт

	//++ НЕ ГОСИС
	ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеПоКаталогуТоваровCML(Организация, ТоварыКаталога, ДеревоДанных, Отказ);
	//-- НЕ ГОСИС 	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ПрайсЛист формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДокумента - ДеревоЗначений - Дерево значений, соответствующее макету ПрайсЛист обработки ОбменСКонтрагентами.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоПрайсЛисту(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КоммерческоеПредложениеКлиенту.Номер,
	|	КоммерческоеПредложениеКлиенту.Организация,
	|	КоммерческоеПредложениеКлиенту.Дата,
	|	КоммерческоеПредложениеКлиенту.Валюта,
	|	КоммерческоеПредложениеКлиенту.Валюта.Код КАК ВалютаКод,
	|	КоммерческоеПредложениеКлиенту.СрокДействия КАК СрокДействия
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
	|ГДЕ
	|	КоммерческоеПредложениеКлиенту.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	%1 КАК Артикул,
	|	Товары.Номенклатура.Наименование КАК Наименование,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
	|	Товары.Цена,
	|	Товары.СтавкаНДС,
	|	Товары.Количество,
	|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,	
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.Упаковка,
	|	Товары.Ссылка.Валюта.Код КАК ВалютаЦены
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.Активность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ВидЦены КАК ТипЦены,
	|	Товары.ВидЦены.Наименование КАК Наименование,
	|	Товары.Ссылка.Валюта.Код КАК Валюта,
	|	Товары.Ссылка.ЦенаВключаетНДС КАК ВключаетНДС
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.Активность
	|";
	
	ИмяДопКолонки = "";
	ИмяДополнительнойКолонки(ИмяДопКолонки);
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстЗапроса, ?(ЗначениеЗаполнено(ИмяДопКолонки),"Товары.Номенклатура." + ИмяДопКолонки, """"""));
					
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаДляСопоставления = ЭлектронноеВзаимодействиеУТ.ВыборкаДляСопоставленияНоменклатуры(СсылкаНаОбъект);
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки = РезультатЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДатаФормирования", 
			ТекущаяДатаСеанса());
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДействительноС", 
			ТекущаяДатаСеанса());
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДействительноДо", 
			РеквизитыШапки.СрокДействия);
			
	Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Цены по комм. предложению %1 от %2'"),
				ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыШапки.Номер, Ложь, Ложь),
				РеквизитыШапки.Дата);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Описание", 
			Описание);
	
	СведенияОПоставщике = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация);
	ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПоставщике, "Владелец", "Юр", РеквизитыШапки.Дата);
	
	ТаблицаТоваров = РезультатЗапроса[1].Выгрузить();
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	
	ШтрихкодыКомбинаций = Неопределено;
	ШтрихкодыНоменклатуры = Неопределено;
	ЭлектронноеВзаимодействиеУТ.ШтрихкодыПоТоварам(ТаблицаТоваров, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);	

	СоответствиеСтавокНДСКонтрагента = Новый Соответствие;
	ЗаполнитьСоответствиеСтавокНДС(СоответствиеСтавокНДСКонтрагента);	
	ТаблицаСопоставления = ВыборкаДляСопоставления.Выгрузить();
	Для Каждого СтрокаТовары Из ТаблицаТоваров Цикл 
		СтрокаТовары.БазоваяЕдиницаКод = СокрЛП(СтрокаТовары.БазоваяЕдиницаКод);
		
		//Сопоставление
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
		ПараметрыОтбора.Вставить("Характеристика", СтрокаТовары.Характеристика);
		ПараметрыОтбора.Вставить("Упаковка", СтрокаТовары.Упаковка);
		СтрокиИзНоменклатурыКонтрагентов = ТаблицаСопоставления.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиИзНоменклатурыКонтрагентов.Количество() Тогда
			НайденнаяСтрока = СтрокиИзНоменклатурыКонтрагентов[0];
			СтрокаТовары.Сопоставление = ЭлектронноеВзаимодействиеУТ.ЗаполнитьСопоставлениеНоменклатуры(НайденнаяСтрока,,,,СоответствиеСтавокНДСКонтрагента);
	    Иначе
			СтрокаТовары.Сопоставление = ЭлектронноеВзаимодействиеУТ.ЗаполнитьСопоставлениеНоменклатуры(СтрокаТовары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);
		КонецЕсли;
	КонецЦикла;
	ЭлектронноеВзаимодействиеУТ.ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТаблицаТоваров);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	ТаблицаТипыЦен = РезультатЗапроса[2].Выгрузить();
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТипыЦен, "ТипыЦен");
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Счет формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДокумента - ДеревоЗначений - дерево значений, соответствующее макету СчетНаОплату обработки ОбменСКонтрагентами.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоСчету(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	ДопустимыеВидыДокументов = Новый Массив;
	ДопустимыеВидыДокументов.Добавить("ЗаказКлиента");
	ДопустимыеВидыДокументов.Добавить("РеализацияТоваровУслуг");
	ДопустимыеВидыДокументов.Добавить("АктВыполненныхРабот");
	ДопустимыеВидыДокументов.Добавить("ОтчетКомиссионера");
	ДопустимыеВидыДокументов.Добавить("ОтчетКомиссионераОСписании");
	ДопустимыеВидыДокументов.Добавить("ОтчетКомитенту");
	ДопустимыеВидыДокументов.Добавить("ЗаявкаНаВозвратТоваровОтКлиента");
	ДопустимыеВидыДокументов.Добавить("ДоговорыКонтрагентов");
	
	ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект,"ДокументОснование"); 
	ВидДокумента = ДокументОснование.Метаданные().Имя;
	
	Если ДопустимыеВидыДокументов.Найти(ВидДокумента) = Неопределено Тогда
		ВызватьИсключение 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'ЭД ""Счет на оплату"" не может быть сформирована, т.к. не определено получение данных для основания вида %1'"),
				ВидДокумента);
	КонецЕсли;
	
	Если ВидДокумента <> "ДоговорыКонтрагентов" Тогда
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, 
								"ЦенаВключаетНДС, НалогообложениеНДС, Дата, Номер, СуммаДокумента");
	Иначе
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, 
								"НалогообложениеНДС, Дата, Номер");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуКлиенту.Валюта КАК Валюта,
	|	СчетНаОплатуКлиенту.Валюта.Код КАК ВалютаКод,
	|	СчетНаОплатуКлиенту.Дата,
	|	СчетНаОплатуКлиенту.Номер,
	|	СчетНаОплатуКлиенту.СуммаДокумента,
	|	СчетНаОплатуКлиенту.БанковскийСчет,
	|	СчетНаОплатуКлиенту.НазначениеПлатежа,
	|	СчетНаОплатуКлиенту.ЧастичнаяОплата,
	|	СчетНаОплатуКлиенту.Организация,
	|	СчетНаОплатуКлиенту.Контрагент,
	|	СчетНаОплатуКлиенту.ИдентификаторПлатежа,
	|	СчетНаОплатуКлиенту.ДокументОснование
	|ИЗ
	|	Документ.СчетНаОплатуКлиенту КАК СчетНаОплатуКлиенту
	|ГДЕ
	|	СчетНаОплатуКлиенту.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(СчетЭтапыГрафикаОплаты.ДатаПлатежа) КАК ДатаПлатежа
	|ИЗ
	|	Документ.СчетНаОплатуКлиенту.ЭтапыГрафикаОплаты КАК СчетЭтапыГрафикаОплаты
	|ГДЕ
	|	СчетЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыГрафикаОплаты.ДатаПлатежа КАК ДатаПлатежа,
	|	ЭтапыГрафикаОплаты.ПроцентПлатежа,
	|	ЭтапыГрафикаОплаты.СуммаПлатежа
	|ИЗ
	|	Документ.СчетНаОплатуКлиенту.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПлатежа
	|;
	|
	|";
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		Запрос.УстановитьПараметр("ДокОснование", СсылкаНаОбъект.ДокументОснование);
		
		Если ВидДокумента = "РеализацияТоваровУслуг" Тогда
			ТекстЗапросаТовары = 
			"ВЫБРАТЬ
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.НаименованиеПолное КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
			|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
			|	КОНЕЦ КАК ЕдиницаИзмеренияККоэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	ВЫБОР
			|		КОГДА &ОтображатьСкидки ТОГДА
			|			Товары.Цена
			|		ИНАЧЕ Товары.Сумма/Товары.КоличествоУпаковок 
			|	КОНЕЦ КАК Цена,
			|	ВЫБОР
			|		КОГДА &ОтображатьСкидки ТОГДА
			|			Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки
			|		ИНАЧЕ 0 
			|	КОНЕЦ КАК СуммаСкидки,
			|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
			|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,			
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка КАК Упаковка
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование
			|			И (Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
			|				ИЛИ Товары.Ссылка.ТребуетсяЗалогЗаТару
			|				ИЛИ НЕ Товары.Ссылка.ВернутьМногооборотнуюТару)";
			
		ИначеЕсли  ВидДокумента = "АктВыполненныхРабот"  Тогда
			ТекстЗапросаТовары = 
			"ВЫБРАТЬ
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.НаименованиеПолное КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
			|	Товары.Количество КАК Количество,
			|	1 КАК ЕдиницаИзмеренияКоэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	ВЫБОР
			|		КОГДА &ОтображатьСкидки ТОГДА
			|			Товары.Цена
			|		ИНАЧЕ Товары.Сумма/Товары.Количество 
			|	КОНЕЦ КАК Цена,
			|	ВЫБОР
			|		КОГДА &ОтображатьСкидки ТОГДА
			|			Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки
			|		ИНАЧЕ 0 
			|	КОНЕЦ КАК СуммаСкидки,
			|	Товары.Содержание КАК Описание,
			|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)	КАК Упаковка
			|ИЗ
			|	Документ.АктВыполненныхРабот.Услуги КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование";
			
		ИначеЕсли ВидДокумента = "ЗаказКлиента" Тогда
			ТекстЗапросаТовары = 
			"ВЫБРАТЬ
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.НаименованиеПолное КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
			|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
			|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	ВЫБОР
			|		КОГДА &ОтображатьСкидки ТОГДА
			|			Товары.Цена
			|		ИНАЧЕ Товары.Сумма/Товары.КоличествоУпаковок 
			|	КОНЕЦ КАК Цена,
			|	ВЫБОР
			|		КОГДА &ОтображатьСкидки ТОГДА
			|			Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки
			|		ИНАЧЕ 0 
			|	КОНЕЦ КАК СуммаСкидки,
			|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
			|	Товары.Содержание КАК Содержание,
			|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,			
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка КАК Упаковка
			|ИЗ
			|	Документ.ЗаказКлиента.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование
			|			И (Товары.Отменено = ЛОЖЬ)
			|			И (Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
			|				ИЛИ Товары.Ссылка.ТребуетсяЗалогЗаТару
			|				ИЛИ НЕ Товары.Ссылка.ВернутьМногооборотнуюТару)";
			
		ИначеЕсли ВидДокумента = "ОтчетКомиссионера" Тогда
			ТекстЗапросаТовары = 
			"ВЫБРАТЬ
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.НаименованиеПолное КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
			|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
			|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
			|	Товары.СуммаПродажи,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаПродажиНДС,
			|	Товары.СуммаСНДС,
			|	Товары.ЦенаПродажи,
			|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
			|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,			
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка КАК Упаковка
			|ИЗ
			|	Документ.ОтчетКомиссионера.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование";
			
		ИначеЕсли ВидДокумента = "ОтчетКомиссионераОСписании" Тогда
			ТекстЗапросаТовары = 
			"ВЫБРАТЬ
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.НаименованиеПолное КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
			|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
			|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
			|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,			
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка КАК Упаковка
			|ИЗ
			|	Документ.ОтчетКомиссионераОСписании.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование";
			
		ИначеЕсли ВидДокумента = "ОтчетКомитенту" Тогда
			ТекстЗапросаТовары = 
			"ВЫБРАТЬ
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.НаименованиеПолное КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
			|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
			|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
			|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,			
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка КАК Упаковка
			|ИЗ
			|	Документ.ОтчетКомитенту.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование";
			
		ИначеЕсли ВидДокумента = "ЗаявкаНаВозвратТоваровОтКлиента" Тогда
			ТекстЗапросаТовары = 
			"ВЫБРАТЬ
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.НаименованиеПолное КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
			|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
			|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	ВЫБОР
			|		КОГДА &ОтображатьСкидки ТОГДА
			|			Товары.Цена
			|		ИНАЧЕ Товары.Сумма/Товары.КоличествоУпаковок 
			|	КОНЕЦ КАК Цена,
			|	ВЫБОР
			|		КОГДА &ОтображатьСкидки ТОГДА
			|			Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки
			|		ИНАЧЕ 0 
			|	КОНЕЦ КАК СуммаСкидки,
			|	ВЫБОР
			|		КОГДА
			|			Товары.Ссылка.ВернутьМногооборотнуюТару
			|			И Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
			|		ТОГДА
			|			ИСТИНА
			|		ИНАЧЕ
			|			ЛОЖЬ
			|	КОНЕЦ КАК ЭтоВозвратнаяТара,
			|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
			|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,			
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка КАК Упаковка
			|ИЗ
			|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары	КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование
			|			И (Товары.Отменено = ЛОЖЬ)
			|			И (Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
			|				ИЛИ Товары.Ссылка.ТребуетсяЗалогЗаТару
			|				ИЛИ НЕ Товары.Ссылка.ВернутьМногооборотнуюТару)";
			
		КонецЕсли;
		
		ИмяДопКолонки = "";
		ИмяДополнительнойКолонки(ИмяДопКолонки);
		ТекстЗапросаТовары = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстЗапросаТовары, 
				?(ЗначениеЗаполнено(ИмяДопКолонки),"Товары.Номенклатура." + ИмяДопКолонки, """"""));
		
		ТекстЗапросаТовары = СтрЗаменить(ТекстЗапросаТовары,
			"&ТекстЗапросаКодЕдиницыИзмерения",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
				"Код",
				"Товары.Упаковка",
				"Товары.Номенклатура"));
				
		ТекстЗапросаТовары = СтрЗаменить(ТекстЗапросаТовары,
			"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
				"Наименование",
				"Товары.Упаковка",
				"Товары.Номенклатура"));
			
		ТекстЗапросаТовары = СтрЗаменить(ТекстЗапросаТовары,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
				"Товары.Упаковка",
				"Товары.Номенклатура"));
	КонецЕсли;   
	
	ОтображатьСкидки = (Константы.ОтображениеСкидокВПечатныхФормахДокументовПродажи.Получить()
		<> Перечисления.ВариантыВыводаСкидокВПечатныхФормах.НеВыводитьСкидки);
	
	Запрос.Текст = Запрос.Текст + ТекстЗапросаТовары;
	
	Если ВидДокумента <> "ДоговорыКонтрагентов" Тогда
		ВыборкаДляСопоставления = ЭлектронноеВзаимодействиеУТ.ВыборкаДляСопоставленияНоменклатуры(СсылкаНаОбъект.ДокументОснование);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("ОтображатьСкидки", ОтображатьСкидки);	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки = РезультатЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Дата", 
			РеквизитыШапки.Дата);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Номер", 
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыШапки.Номер));
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"НазначениеПлатежа", 
			РеквизитыШапки.НазначениеПлатежа);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ЧастичнаяОплата", 
			РеквизитыШапки.ЧастичнаяОплата);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"НалогообложениеНДС", 
			Строка(РеквизитыОснования.НалогообложениеНДС));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Валюта", 
			РеквизитыШапки.ВалютаКод);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Курс", 
			РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Сумма", 
			РеквизитыШапки.СуммаДокумента);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДокументОснования.НомерДокументаОснования", 
			РеквизитыОснования.Номер);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДокументОснования.ДатаДокументаОснования", 
			Строка(РеквизитыОснования.Дата));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДокументОснования.НаименованиеДокументаОснования", 
			Строка(ДокументОснование));
	
	СведенияОПоставщике = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация);
	ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПоставщике, "Продавец", "Юр", РеквизитыШапки.Дата);
	
	СведенияОПокупателе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент);
	ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Покупатель", "Юр", РеквизитыШапки.Дата);
	
	// Заполняем документ основание
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДокументыОснования", РеквизитыШапки.ДокументОснование);
	
	ВыборкаСрокПлатежа = РезультатЗапроса[1].Выбрать();
	ВыборкаСрокПлатежа.Следующий();
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"СрокПлатежа", 
			ВыборкаСрокПлатежа.ДатаПлатежа);
	
	ЭтапыГрафикаОплаты = РезультатЗапроса[2].Выгрузить();
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ЭтапыГрафикаОплаты, "ГрафикОплаты");
	
	Если ВидДокумента <> "ДоговорыКонтрагентов" Тогда

		ТаблицаТоваров = РезультатЗапроса[3].Выгрузить();
		ТаблицаТоваров.Колонки.Добавить("Сопоставление");
		
		ШтрихкодыКомбинаций = Неопределено;
		ШтрихкодыНоменклатуры = Неопределено;
		ЭлектронноеВзаимодействиеУТ.ШтрихкодыПоТоварам(ТаблицаТоваров, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);			
		
		СоответствиеСтавокНДСКонтрагента = Новый Соответствие;
		ЗаполнитьСоответствиеСтавокНДС(СоответствиеСтавокНДСКонтрагента);	
		ТаблицаСопоставления = ВыборкаДляСопоставления.Выгрузить();
		Для Каждого СтрокаТовары Из ТаблицаТоваров Цикл 
			СтрокаТовары.БазоваяЕдиницаКод = СокрЛП(СтрокаТовары.БазоваяЕдиницаКод);
			
			//Сопоставление
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
			ПараметрыОтбора.Вставить("Характеристика", СтрокаТовары.Характеристика);
			ПараметрыОтбора.Вставить("Упаковка", СтрокаТовары.Упаковка);
			СтрокиИзНоменклатурыКонтрагентов = ТаблицаСопоставления.НайтиСтроки(ПараметрыОтбора);
			Если СтрокиИзНоменклатурыКонтрагентов.Количество() Тогда
				НайденнаяСтрока = СтрокиИзНоменклатурыКонтрагентов[0];
				СтрокаТовары.Сопоставление = ЭлектронноеВзаимодействиеУТ.ЗаполнитьСопоставлениеНоменклатуры(НайденнаяСтрока,,,,СоответствиеСтавокНДСКонтрагента);
		    Иначе
				СтрокаТовары.Сопоставление = ЭлектронноеВзаимодействиеУТ.ЗаполнитьСопоставлениеНоменклатуры(СтрокаТовары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);
			КонецЕсли;
		КонецЦикла;	
		ЭлектронноеВзаимодействиеУТ.ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТаблицаТоваров);
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДокумента, 
				"ИтогоПоДокументу.Сумма", 
				ТаблицаТоваров.Итог("Сумма"));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДокумента, 
				"ИтогоПоДокументу.СуммаНДС", 
				ТаблицаТоваров.Итог("СуммаНДС"));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДокумента, 
				"ИтогоПоДокументу.ЦенаВключаетНДС", 
				РеквизитыОснования.ЦенаВключаетНДС);
		
		СуммаБезСкидки = ТаблицаТоваров.Итог("Сумма");
		СуммаСкидки = 0;
		Если ТаблицаТоваров.Колонки.Найти("СуммаСкидки") <> Неопределено Тогда
			СуммаСкидки = ТаблицаТоваров.Итог("СуммаСкидки");
		КонецЕсли;
		СуммаБезСкидки = СуммаБезСкидки + СуммаСкидки;
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДокумента, 
				"ИтогоПоДокументу.СуммаСкидки", 
				СуммаСкидки);
				
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДокумента, 
				"ИтогоПоДокументу.СуммаБезСкидки", 
				СуммаБезСкидки);
				
	Иначе
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДокумента, 
				"ИтогоПоДокументу.Сумма", 
				РеквизитыШапки.СуммаДокумента);
				
		Если ЗначениеЗаполнено(РеквизитыШапки.ДокументОснование.СтавкаНДС) Тогда
			СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.ДокументОснование.СтавкаНДС);
		Иначе
			СуммаНДС = 0;
		КонецЕсли;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДокумента, 
				"ИтогоПоДокументу.СуммаНДС", 
				СуммаНДС);
				
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДокумента, 
				"ИтогоПоДокументу.СуммаБезСкидки", 
				РеквизитыШапки.СуммаДокумента);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДокумента, 
				"ИтогоПоДокументу.ЦенаВключаетНДС", 
				Истина);
		
	КонецЕсли;
	
	// Заполняем банковский счет
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчет) Тогда
		БанковскийСчет = ЭлектронноеВзаимодействиеУТ.РеквизитыБанковскогоСчета("БанковскиеСчетаОрганизаций", РеквизитыШапки.БанковскийСчет);
		ЭлектронноеВзаимодействиеУТ.ДобавитьВДеревоДанныеСчета(ДеревоДокумента, БанковскийСчет);
	КонецЕсли;
	
	Если РеквизитыШапки.ЧастичнаяОплата Тогда
		ИтоговаяСтрока = НСтр("ru = 'Всего на сумму %СуммаПрописью%'");
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%СуммаПрописью%", ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта));
	Иначе
		ИтоговаяСтрока = НСтр("ru = 'Всего наименований %Количество%, на сумму %Сумма%'");
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", ТаблицаТОваров.Количество());
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%", ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта));
	КонецЕсли;
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогиПрописью", 
			ИтоговаяСтрока);
			
	ЭлектронноеВзаимодействиеУТ.ЗаполнитьУИП(ДеревоДокумента, РеквизитыШапки.ИдентификаторПлатежа);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ЗаказТоваров формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДокумента - ДеревоЗначений - дерево значений, соответствующее макету ЗаказТовара обработки ОбменСКонтрагентами.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоЗаказуТоваров(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Дата КАК Дата,
	|	ЗаказПоставщику.Валюта.Код КАК ВалютаКод,
	|	ЗаказПоставщику.Валюта КАК Валюта,
	|	ЗаказПоставщику.СуммаДокумента КАК СуммаДокумента,
	|	ЗаказПоставщику.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЗаказПоставщику.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|	ЗаказПоставщику.Номер КАК Номер,
	|	ЗаказПоставщику.Организация КАК Организация,
	|	ЗаказПоставщику.Контрагент КАК Контрагент,
	|	ЗаказПоставщику.НомерПоДаннымПоставщика КАК НомерПоДаннымПоставщика,
	|	ЗаказПоставщику.ДатаПоДаннымПоставщика КАК ДатаПоДаннымПоставщика,
	|	ВЫБОР ЗаказПоставщику.СпособДоставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПоставщикаДоНашегоСклада)
	|			ТОГДА ЗаказПоставщику.АдресДоставкиДляПоставщика
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада)
	|			ТОГДА ЗаказПоставщику.АдресДоставкиДляПоставщика
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи)
	|			ТОГДА ЗаказПоставщику.АдресДоставкиПеревозчика
	|		ИНАЧЕ ЗаказПоставщику.АдресДоставки
	|	КОНЕЦ КАК АдресДоставки,
	|	ВЫБОР ЗаказПоставщику.СпособДоставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПоставщикаДоНашегоСклада)
	|			ТОГДА """"
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада)
	|			ТОГДА ЗаказПоставщику.АдресДоставкиПеревозчикаЗначенияПолей
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи)
	|			ТОГДА ЗаказПоставщику.АдресДоставкиПеревозчикаЗначенияПолей
	|		ИНАЧЕ ЗаказПоставщику.АдресДоставкиЗначенияПолей
	|	КОНЕЦ КАК АдресДоставкиЗначенияПолей,
	|	ВЫБОР ЗаказПоставщику.СпособДоставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПоставщикаДоНашегоСклада)
	|			ТОГДА ""Доставка""
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада)
	|			ТОГДА ""Доставка""
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи)
	|			ТОГДА ""Доставка""
	|		ИНАЧЕ ""Самовывоз""
	|	КОНЕЦ КАК СпособДоставки,
	|	ЗаказПоставщику.ДокументОснование КАК ДокументОснование,
	|	ЗаказПоставщику.БанковскийСчет КАК БанковскийСчет,
	|	ЗаказПоставщику.Договор.Дата КАК ДоговорДата,
	|	ЗаказПоставщику.Договор.Номер КАК ДоговорНомер
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура.Артикул КАК Артикул,
	|	Товары.Номенклатура.Наименование КАК Наименование,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Характеристика.Наименование КАК НаименованиеХарактеристики,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
	|	Товары.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
	|			ТОГДА ""НДС исчисляется налоговым агентом""
	|		ИНАЧЕ Товары.СтавкаНДС
	|	КОНЕЦ КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
	|			ТОГДА 0
	|		ИНАЧЕ Товары.СуммаСНДС
	|	КОНЕЦ КАК СуммаСНДС,
	|	Товары.СуммаРучнойСкидки КАК СуммаСкидки,
	|	Товары.ПроцентРучнойСкидки КАК ПроцентСкидки,
	|	Товары.Цена КАК Цена,
	|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
	|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,	
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.Упаковка КАК Упаковка
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НЕ Товары.Отменено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыГрафикаОплаты.ВариантОплаты КАК ВидОплаты,
	|	ЭтапыГрафикаОплаты.ДатаПлатежа КАК ДатаПлатежа,
	|	ЭтапыГрафикаОплаты.ПроцентПлатежа КАК ПроцентПлатежа,
	|	ЭтапыГрафикаОплаты.СуммаПлатежа КАК СуммаПлатежа
	|ИЗ
	|	Документ.ЗаказПоставщику.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|	И ЭтапыГрафикаОплаты.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапыГрафикаОплаты.НомерСтроки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаДляСопоставления = ЭлектронноеВзаимодействиеУТ.ВыборкаДляСопоставленияНоменклатуры(СсылкаНаОбъект);
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки             = МассивРезультатовЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	ТаблицаЭтаповГрафикаОплаты = МассивРезультатовЗапроса[2].Выгрузить();
	
	СведенияОПоставщике = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент);
	СведенияОПокупателе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация);
	ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПоставщике, "Продавец",   "Юр", РеквизитыШапки.Дата);
	ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Покупатель", "Юр", РеквизитыШапки.Дата);
	ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Получатель", "Юр", РеквизитыШапки.Дата);		
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Валюта",	РеквизитыШапки.ВалютаКод);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Курс", 
			РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма", РеквизитыШапки.СуммаДокумента);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Комментарий", РеквизитыШапки.ДополнительнаяИнформация);
	
	// заполнение полей дерева данных Доставка
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.СпособДоставки",	РеквизитыШапки.СпособДоставки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.АдресДоставки", РеквизитыШапки.АдресДоставки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.АдресДоставкиЗначенияПолей",
		РеквизитыШапки.АдресДоставкиЗначенияПолей);
	
	// Номер и дата договора.
	Если ЗначениеЗаполнено(РеквизитыШапки.ДоговорНомер) И ЗначениеЗаполнено(РеквизитыШапки.ДоговорДата) Тогда
		РеквизитыДоговора = Новый ТаблицаЗначений;
		РеквизитыДоговора.Колонки.Добавить("Идентификатор");
		РеквизитыДоговора.Колонки.Добавить("Наименование");
		РеквизитыДоговора.Колонки.Добавить("Номер");
		РеквизитыДоговора.Колонки.Добавить("Дата");
		
		СтрокаРеквизитыДоговора = РеквизитыДоговора.Добавить();
		СтрокаРеквизитыДоговора.Идентификатор = НСтр("ru = 'Договор'");
		СтрокаРеквизитыДоговора.Наименование = НСтр("ru = 'Договор'");
		СтрокаРеквизитыДоговора.Номер = РеквизитыШапки.ДоговорНомер;
		СтрокаРеквизитыДоговора.Дата = РеквизитыШапки.ДоговорДата;
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, РеквизитыДоговора, "ДокументыСделки");
	КонецЕсли;
			
	ТаблицаТоваров = МассивРезультатовЗапроса[1].Выгрузить();
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	НомерСтроки = 1;
	
	ШтрихкодыКомбинаций = Неопределено;
	ШтрихкодыНоменклатуры = Неопределено;
	ЭлектронноеВзаимодействиеУТ.ШтрихкодыПоТоварам(ТаблицаТоваров, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);			
	
	СоответствиеСтавокНДСКонтрагента = Новый Соответствие;
	ЗаполнитьСоответствиеСтавокНДС(СоответствиеСтавокНДСКонтрагента);	
	ТаблицаСопоставления = ВыборкаДляСопоставления.Выгрузить();
	Для Каждого СтрокаТовары Из ТаблицаТоваров Цикл 
		СтрокаТовары.БазоваяЕдиницаКод = СокрЛП(СтрокаТовары.БазоваяЕдиницаКод);
		СтрокаТовары.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
		
		//Сопоставление
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
		ПараметрыОтбора.Вставить("Характеристика", СтрокаТовары.Характеристика);
		ПараметрыОтбора.Вставить("Упаковка", СтрокаТовары.Упаковка);
		СтрокиИзНоменклатурыКонтрагентов = ТаблицаСопоставления.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиИзНоменклатурыКонтрагентов.Количество() Тогда
			НайденнаяСтрока = СтрокиИзНоменклатурыКонтрагентов[0];
			СтрокаТовары.Сопоставление = ЭлектронноеВзаимодействиеУТ.ЗаполнитьСопоставлениеНоменклатуры(НайденнаяСтрока,,,,СоответствиеСтавокНДСКонтрагента);
	    Иначе
			СтрокаТовары.Сопоставление = ЭлектронноеВзаимодействиеУТ.ЗаполнитьСопоставлениеНоменклатуры(СтрокаТовары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);
		КонецЕсли;
	КонецЦикла;
	ЭлектронноеВзаимодействиеУТ.ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТаблицаТоваров);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаИтог", ТаблицаТоваров.Итог("Сумма"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаНалогаИтог", ТаблицаТоваров.Итог("СуммаНДС"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС", РеквизитыШапки.ЦенаВключаетНДС);
	
	ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Всего наименований %1, на сумму %2'"),
						ТаблицаТоваров.Количество(), 
						ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта));
	
	СуммаПрописью  = РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогиПрописью", ИтоговаяСтрока);
	
	ТаблицаЭтаповГрафикаОплаты = МассивРезультатовЗапроса[2].Выгрузить();
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаЭтаповГрафикаОплаты, "ГрафикОплаты");
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтветНаЗаказ формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДокумента - ДеревоЗначений - дерево значений, соответствующее макету ОтветНаЗаказ обработки ОбменСКонтрагентами.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоОтветуНаЗаказ(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗаказКлиента.Валюта.Код КАК ВалютаКод,
	|	ЗаказКлиента.Валюта КАК Валюта,
	|	ЗаказКлиента.Дата,
	|	ЗаказКлиента.Номер,
	|	ЗаказКлиента.Организация,
	|	ЗаказКлиента.Контрагент,
	|	ЗаказКлиента.Грузоотправитель,
	|	ЗаказКлиента.Грузополучатель,
	|	ЗаказКлиента.БанковскийСчетГрузоотправителя,
	|	ЗаказКлиента.БанковскийСчетГрузополучателя,
	|	ЗаказКлиента.СуммаДокумента,
	|	ЗаказКлиента.ЦенаВключаетНДС,
	|	ЗаказКлиента.НомерПоДаннымКлиента,
	|	ЗаказКлиента.ДатаПоДаннымКлиента,
	|	ЗаказКлиента.БанковскийСчет,	
	|	ЗаказКлиента.БанковскийСчетКонтрагента,	
	|	ЗаказКлиента.ДополнительнаяИнформация,		
	|	ВЫБОР ЗаказКлиента.СпособДоставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента) ТОГДА
	|			ЗаказКлиента.АдресДоставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки) ТОГДА
	|			ЗаказКлиента.АдресДоставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика) ТОГДА
	|			ЗаказКлиента.АдресДоставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу) ТОГДА
	|			ЗаказКлиента.АдресДоставкиПеревозчика
	|	КОНЕЦ	КАК АдресДоставки,
	|	ВЫБОР ЗаказКлиента.СпособДоставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
	|			ТОГДА ЗаказКлиента.АдресДоставкиЗначенияПолей
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки)
	|			ТОГДА ЗаказКлиента.АдресДоставкиЗначенияПолей
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|			ТОГДА ЗаказКлиента.АдресДоставкиЗначенияПолей
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу) ТОГДА
	|			ЗаказКлиента.АдресДоставкиПеревозчикаЗначенияПолей
	|	КОНЕЦ КАК АдресДоставкиЗначенияПолей,
	|	ВЫБОР ЗаказКлиента.СпособДоставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента) ТОГДА
	|			""Доставка""
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика) ТОГДА
	|			""Доставка""
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу) ТОГДА
	|			""Доставка""
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки) ТОГДА
	|			""Доставка""
	|	КОНЕЦ	КАК СпособДоставки,
	|	ЗаказКлиента.ИдентификаторПлатежа,
	|	ЗаказКлиента.ДокументОснование,
	|	ЗаказКлиента.Договор.Номер КАК ДоговорНомер,
	|	ЗаказКлиента.Договор.Дата КАК ДоговорДата
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	%1 КАК Артикул,
	|	Товары.Номенклатура.Наименование КАК Наименование,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	Товары.Упаковка КАК Упаковка,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
	|	Товары.Сумма,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
	|			ТОГДА ""НДС исчисляется налоговым агентом""
	|		ИНАЧЕ Товары.СтавкаНДС
	|	КОНЕЦ КАК СтавкаНДС,
	|	Товары.СуммаНДС,
	|	Товары.Цена,
	|	Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки КАК СуммаСкидки,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
	|			ТОГДА 0
	|		ИНАЧЕ Товары.СуммаСНДС
	|	КОНЕЦ КАК СуммаСНДС,
	|	Товары.ПроцентРучнойСкидки + Товары.ПроцентАвтоматическойСкидки КАК ПроцентСкидки,
	|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
	|	Товары.Содержание КАК Описание,
	|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,	
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК Товары
	|
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НЕ Товары.Отменено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыГрафикаОплаты.ВариантОплаты КАК ВидОплаты,
	|	ЭтапыГрафикаОплаты.ДатаПлатежа,
	|	ЭтапыГрафикаОплаты.ПроцентПлатежа,
	|	ЭтапыГрафикаОплаты.СуммаПлатежа
	|ИЗ
	|	Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|	И ЭтапыГрафикаОплаты.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапыГрафикаОплаты.НомерСтроки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
		
	ИмяДопКолонки = "";
	ИмяДополнительнойКолонки(ИмяДопКолонки);
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ТекстЗапроса, 
						?(ЗначениеЗаполнено(ИмяДопКолонки), "Товары.Номенклатура." + ИмяДопКолонки, """"""));
	
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаДляСопоставления = ЭлектронноеВзаимодействиеУТ.ВыборкаДляСопоставленияНоменклатуры(СсылкаНаОбъект);
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки = МассивРезультатовЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	
	СведенияОПоставщике = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, РеквизитыШапки.БанковскийСчет);
	ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПоставщике, "Продавец",   "Юр", РеквизитыШапки.Дата);
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчет) Тогда
		БанковскийСчет = ЭлектронноеВзаимодействиеУТ.РеквизитыБанковскогоСчета("БанковскиеСчетаОрганизаций", РеквизитыШапки.БанковскийСчет);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Продавец.БанковскийСчет.НомерСчета", 
			БанковскийСчет.НомерСчета);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Продавец.БанковскийСчет.НаимБанк", 
			БанковскийСчет.Банк.Наименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Продавец.БанковскийСчет.БИК", 
			БанковскийСчет.Банк.Код);
			
		ЭлектронноеВзаимодействиеУТ.ДобавитьВДеревоДанныеСчета(ДеревоДокумента, БанковскийСчет);
	КонецЕсли;
	
	СведенияОПокупателе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, РеквизитыШапки.БанковскийСчетКонтрагента);
	ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Покупатель", "Юр", РеквизитыШапки.Дата);
	
	Если ЗначениеЗаполнено(РеквизитыШапки.Грузополучатель) Тогда
		СведенияОГрузополучателе  = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузополучатель, РеквизитыШапки.БанковскийСчетГрузополучателя);
		ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОГрузополучателе, "Получатель", "Юр", РеквизитыШапки.Дата);
	Иначе
		ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Получатель", "Юр", РеквизитыШапки.Дата);		
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Валюта", 
			РеквизитыШапки.ВалютаКод);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Курс", 
			РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Сумма", 
			РеквизитыШапки.СуммаДокумента);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Комментарий", 
			РеквизитыШапки.ДополнительнаяИнформация);
	
	ТаблицаТоваров = МассивРезультатовЗапроса[1].Выгрузить();
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	
	ШтрихкодыКомбинаций = Неопределено;
	ШтрихкодыНоменклатуры = Неопределено;
	ЭлектронноеВзаимодействиеУТ.ШтрихкодыПоТоварам(ТаблицаТоваров, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);			
	
	СоответствиеСтавокНДСКонтрагента = Новый Соответствие;
	ЗаполнитьСоответствиеСтавокНДС(СоответствиеСтавокНДСКонтрагента);	
	ТаблицаСопоставления = ВыборкаДляСопоставления.Выгрузить();
	Для Каждого СтрокаТовары Из ТаблицаТоваров Цикл 
		СтрокаТовары.БазоваяЕдиницаКод = СокрЛП(СтрокаТовары.БазоваяЕдиницаКод);
		
		//Сопоставление
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
		ПараметрыОтбора.Вставить("Характеристика", СтрокаТовары.Характеристика);
		ПараметрыОтбора.Вставить("Упаковка", СтрокаТовары.Упаковка);
		СтрокиИзНоменклатурыКонтрагентов = ТаблицаСопоставления.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиИзНоменклатурыКонтрагентов.Количество() Тогда
			НайденнаяСтрока = СтрокиИзНоменклатурыКонтрагентов[0];
			СтрокаТовары.Сопоставление = ЭлектронноеВзаимодействиеУТ.ЗаполнитьСопоставлениеНоменклатуры(НайденнаяСтрока,,,,СоответствиеСтавокНДСКонтрагента);
	    Иначе
			СтрокаТовары.Сопоставление = ЭлектронноеВзаимодействиеУТ.ЗаполнитьСопоставлениеНоменклатуры(СтрокаТовары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);
		КонецЕсли;		
	КонецЦикла;	
	ЭлектронноеВзаимодействиеУТ.ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТаблицаТоваров);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.СуммаИтог", 
			ТаблицаТоваров.Итог("Сумма"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.СуммаНалогаИтог", 
			ТаблицаТоваров.Итог("СуммаНДС"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.ЦенаВключаетНДС", 
			РеквизитыШапки.ЦенаВключаетНДС);
			
	// заполнение полей дерева данных Доставка
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.СпособДоставки",	РеквизитыШапки.СпособДоставки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.АдресДоставки", РеквизитыШапки.АдресДоставки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.АдресДоставкиЗначенияПолей",
		РеквизитыШапки.АдресДоставкиЗначенияПолей);
	
	// Номер и дата договора.
	Если ЗначениеЗаполнено(РеквизитыШапки.ДоговорНомер) И ЗначениеЗаполнено(РеквизитыШапки.ДоговорДата) Тогда
		РеквизитыДоговора = Новый ТаблицаЗначений;
		РеквизитыДоговора.Колонки.Добавить("Идентификатор");
		РеквизитыДоговора.Колонки.Добавить("Наименование");
		РеквизитыДоговора.Колонки.Добавить("Номер");
		РеквизитыДоговора.Колонки.Добавить("Дата");
		
		СтрокаРеквизитыДоговора = РеквизитыДоговора.Добавить();
		СтрокаРеквизитыДоговора.Идентификатор = НСтр("ru = 'Договор'");
		СтрокаРеквизитыДоговора.Наименование = НСтр("ru = 'Договор'");
		СтрокаРеквизитыДоговора.Номер = РеквизитыШапки.ДоговорНомер;
		СтрокаРеквизитыДоговора.Дата = РеквизитыШапки.ДоговорДата;
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, РеквизитыДоговора, "ДокументыСделки");
	КонецЕсли;
	
	// Документ основание.
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДокументыОснования", РеквизитыШапки.ДокументОснование);
	
	ТаблицаЭтаповГрафикаОплаты = МассивРезультатовЗапроса[2].Выгрузить();
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаЭтаповГрафикаОплаты, "ГрафикОплаты");
	
	ЭлектронноеВзаимодействиеУТ.ЗаполнитьУИП(ДеревоДокумента, РеквизитыШапки.ИдентификаторПлатежа);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтчетКомитенту формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//    Параметр ДополнительныеРеквизитыДляТаблицыТоваров в общей структуре параметров предназначен для заполнения
//    колонки ДополнительныеРеквизиты в таблице товаров.
//  ДеревоДокумента - ДеревоЗначений - дерево значений, соответствующее макету ОтчетКомиссионераОПродажах обработки ОбменСКонтрагентами.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоОтчетуОПродажахКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОтчетКомитенту.Дата,
	|	ОтчетКомитенту.Валюта,
	|	ОтчетКомитенту.Валюта.Код КАК ВалютаКод,	
	|	ОтчетКомитенту.СуммаДокумента,
	|	ОтчетКомитенту.ЦенаВключаетНДС,
	|	ОтчетКомитенту.СуммаВознаграждения,
	|	ОтчетКомитенту.НалогообложениеНДС,
	|	ОтчетКомитенту.НачалоПериода,
	|	ОтчетКомитенту.КонецПериода,
	|	ОтчетКомитенту.ФормаОплаты,
	|	ОтчетКомитенту.СпособРасчетаВознаграждения,
	|	ОтчетКомитенту.ПроцентВознаграждения,
	|	ОтчетКомитенту.ДатаПлатежа,
	|	ОтчетКомитенту.ИдентификаторПлатежа,
	|	ОтчетКомитенту.СтавкаНДСВознаграждения,
	|	ОтчетКомитенту.СуммаНДСВознаграждения,
	|	ОтчетКомитенту.Контрагент,
	|	ОтчетКомитенту.Организация,
	|	ОтчетКомитенту.Организация КАК Организация1,
	|	ОтчетКомитенту.Контрагент КАК Контрагент1
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ОтчетКомитенту
	|ГДЕ
	|	ОтчетКомитенту.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура.Артикул КАК Артикул,
	|	Товары.Номенклатура.Наименование КАК Наименование,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Характеристика.Наименование КАК НаименованиеХарактеристики,
	|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,	
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
	|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.СуммаПродажи КАК СуммаПродажи,
	|	Товары.СуммаВознаграждения КАК СуммаВознаграждения,
	|	Товары.СуммаСНДС КАК СуммаСНДС,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.ДатаСчетаФактуры КАК ДатаПродажи,
	|	Товары.Покупатель КАК Контрагент,
	|	Товары.ЦенаПродажи КАК ЦенаПродажи,
	|	Товары.Цена
	|ИЗ
	|	Документ.ОтчетКомитенту.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомитентуЭтапыГрафикаОплаты.ДатаПлатежа КАК ДатаПлатежа,
	|	ОтчетКомитентуЭтапыГрафикаОплаты.ПроцентПлатежа,
	|	ОтчетКомитентуЭтапыГрафикаОплаты.СуммаПлатежа
	|ИЗ
	|	Документ.ОтчетКомитенту.ЭтапыГрафикаОплаты КАК ОтчетКомитентуЭтапыГрафикаОплаты
	|ГДЕ
	|	ОтчетКомитентуЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПлатежа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомитенту.Услуга.Код КАК ИД,
	|	ОтчетКомитенту.Услуга.Артикул КАК Артикул,
	|	ОтчетКомитенту.Услуга.Наименование КАК Наименование,
	|	ОтчетКомитенту.Услуга.ЕдиницаИзмерения КАК БазоваяЕдиница,
	|	ОтчетКомитенту.Услуга.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	ОтчетКомитенту.Услуга.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	ОтчетКомитенту.Услуга.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	ОтчетКомитенту.Услуга.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ОтчетКомитенту
	|ГДЕ
	|	ОтчетКомитенту.Ссылка = &Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаДляСопоставления = ЭлектронноеВзаимодействиеУТ.ВыборкаДляСопоставленияНоменклатуры(СсылкаНаОбъект);
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки = РезультатЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДатаФормирования", 
			ТекущаяДатаСеанса());
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Валюта", 
			РеквизитыШапки.ВалютаКод);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Курс", 
			РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"НачалоПериода", 
			РеквизитыШапки.НачалоПериода);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"КонецПериода", 
			РеквизитыШапки.КонецПериода);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ФормаОплаты", 
			Строка(РеквизитыШапки.ФормаОплаты));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"СпособРасчета", 
			Строка(РеквизитыШапки.СпособРасчетаВознаграждения));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДатаОплаты", 
			РеквизитыШапки.ДатаПлатежа);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Сумма", 
			РеквизитыШапки.СуммаДокумента);
			
	СведенияОКомитенте = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент);
	ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОКомитенте, "Комитент", "Юр", РеквизитыШапки.Дата);
	
	СведенияОКомиссионере = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация);
	ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОКомиссионере, "Комиссионер", "Юр", РеквизитыШапки.Дата);
	
	ТаблицаТоваров = РезультатЗапроса[1].Выгрузить();
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	
	ШтрихкодыКомбинаций = Неопределено;
	ШтрихкодыНоменклатуры = Неопределено;
	ЭлектронноеВзаимодействиеУТ.ШтрихкодыПоТоварам(ТаблицаТоваров, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);	

	СоответствиеСтавокНДСКонтрагента = Новый Соответствие;
	ЗаполнитьСоответствиеСтавокНДС(СоответствиеСтавокНДСКонтрагента);	
	ТаблицаСопоставления = ВыборкаДляСопоставления.Выгрузить();
	Для Каждого СтрокаТовары Из ТаблицаТоваров Цикл 
		СтрокаТовары.БазоваяЕдиницаКод = СокрЛП(СтрокаТовары.БазоваяЕдиницаКод);
		
		//Сопоставление
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
		ПараметрыОтбора.Вставить("Характеристика", СтрокаТовары.Характеристика);
		ПараметрыОтбора.Вставить("Упаковка", СтрокаТовары.Упаковка);
		СтрокиИзНоменклатурыКонтрагентов = ТаблицаСопоставления.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиИзНоменклатурыКонтрагентов.Количество() Тогда
			НайденнаяСтрока = СтрокиИзНоменклатурыКонтрагентов[0];
			СтрокаТовары.Сопоставление = ЭлектронноеВзаимодействиеУТ.ЗаполнитьСопоставлениеНоменклатуры(НайденнаяСтрока,,,,СоответствиеСтавокНДСКонтрагента);
	    Иначе
			СтрокаТовары.Сопоставление = ЭлектронноеВзаимодействиеУТ.ЗаполнитьСопоставлениеНоменклатуры(СтрокаТовары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);
		КонецЕсли;
	КонецЦикла;	
	ЭлектронноеВзаимодействиеУТ.ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТаблицаТоваров);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	СтрокаТаблицаТоваров = ДеревоДокумента.Строки.Найти("Товары", "ПолныйПуть");

	Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
		Покупатель = ТаблицаТоваров[Число(Товар.Значение) - 1].Контрагент;
		
		Если ЗначениеЗаполнено(Покупатель) Тогда
			СведенияОПокупателе = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(Покупатель);
			ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеУчастника(Товар, СведенияОПокупателе, "Товары.НомерСтроки.Покупатель", "Юр", РеквизитыШапки.Дата);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаЭтаповГрафикаОплаты = РезультатЗапроса[2].Выгрузить();
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаЭтаповГрафикаОплаты, "ГрафикОплаты");
	
	// Информация по услуге вознаграждения
	
	Услуга = РезультатЗапроса[3].Выбрать();
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Услуга.Артикул", 
			Услуга.Артикул);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Услуга.Наименование", 
			Услуга.Наименование);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Услуга.БазоваяЕдиницаКод", 
			Услуга.БазоваяЕдиницаКод);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Услуга.БазоваяЕдиницаНаименование", 
			Услуга.БазоваяЕдиницаНаименование);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Услуга.БазоваяЕдиницаНаименованиеПолное", 
			Услуга.БазоваяЕдиницаНаименованиеПолное);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Услуга.БазоваяЕдиницаМеждународноеСокращение", 
			Услуга.БазоваяЕдиницаМеждународноеСокращение);
	
	// Итоги документа
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.СуммаДокумента", 
			ТаблицаТоваров.Итог("СуммаПродажи"));
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.ЦенаВключаетНДС", 
			РеквизитыШапки.ЦенаВключаетНДС);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.СтавкаНДСВознаграждения", 
			?(РеквизитыШапки.СтавкаНДСВознаграждения = Перечисления.СтавкиНДС.ПустаяСсылка(), 
													Перечисления.СтавкиНДС.БезНДС, РеквизитыШапки.СтавкаНДСВознаграждения));
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.СуммаНДСВознаграждения", 
			РеквизитыШапки.СуммаНДСВознаграждения);

	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.СуммаВознаграждения", 
			ТаблицаТоваров.Итог("СуммаВознаграждения"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.Процент", 
			РеквизитыШапки.ПроцентВознаграждения);
	 
	Если РеквизитыШапки.СуммаДокумента < 0 Тогда
		ТекстИтоговаяСтрока = Нстр("ru = 'Всего возвращено наименований'");
	Иначе
		ТекстИтоговаяСтрока = Нстр("ru = 'Всего продано наименований'");
	КонецЕсли;
	
	ИтоговаяСтрока = ТекстИтоговаяСтрока
		+ " "
		+ ТаблицаТоваров.Количество()
		+ Нстр("ru = ', на сумму'")
		+ " "
		+ ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
	
	СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
		
	Если РеквизитыШапки.СуммаВознаграждения <> 0 Тогда
		СуммаВознаграждения = Нстр("ru = 'Сумма комиссионного вознаграждения составила'")
			+ " "
			+ ?(РеквизитыШапки.СуммаВознаграждения < 0, Нстр("ru = 'минус'") + " ", "")
			+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаВознаграждения, РеквизитыШапки.Валюта);
	КонецЕсли;
	
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью + Символы.ПС + СуммаВознаграждения;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогиПрописью", 
			ИтоговаяСтрока);
			
	ЭлектронноеВзаимодействиеУТ.ЗаполнитьУИП(ДеревоДокумента, РеквизитыШапки.ИдентификаторПлатежа);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтчетКомитентуОСписании формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДокумента - ДеревоЗначений - дерево значений, соответствующее макету ОтчетКомиссионераОСписании обработки ОбменСКонтрагентами.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоОтчетуОСписанииКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОтчетКомитентуОСписании.Валюта,
	|	ОтчетКомитентуОСписании.Валюта.Код КАК ВалютаКод,	
	|	ОтчетКомитентуОСписании.Дата,
	|	ОтчетКомитентуОСписании.СуммаДокумента,
	|	ОтчетКомитентуОСписании.НачалоПериода,
	|	ОтчетКомитентуОСписании.КонецПериода,
	|	ОтчетКомитентуОСписании.Организация,
	|	ОтчетКомитентуОСписании.Контрагент
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании КАК ОтчетКомитентуОСписании
	|ГДЕ
	|	ОтчетКомитентуОСписании.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура.Артикул КАК Артикул,
	|	Товары.Номенклатура.Наименование КАК Наименование,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
	|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.СуммаСНДС КАК Сумма,
	|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,	
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.Цена
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаДляСопоставления = ЭлектронноеВзаимодействиеУТ.ВыборкаДляСопоставленияНоменклатуры(СсылкаНаОбъект);
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки = РезультатЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДатаФормирования", 
			ТекущаяДатаСеанса());
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Валюта", 
			РеквизитыШапки.ВалютаКод);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Курс", 
			РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"НачалоПериода", 
			РеквизитыШапки.НачалоПериода);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"КонецПериода", 
			РеквизитыШапки.КонецПериода);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Сумма", 
			РеквизитыШапки.СуммаДокумента);
			
	СведенияОКомитенте = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент);
	ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОКомитенте, "Комитент", "Юр", РеквизитыШапки.Дата);
	
	СведенияОКомиссионере = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация);
	ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОКомиссионере, "Комиссионер", "Юр", РеквизитыШапки.Дата);

	ТаблицаТоваров = РезультатЗапроса[1].Выгрузить();
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	
	ШтрихкодыКомбинаций = Неопределено;
	ШтрихкодыНоменклатуры = Неопределено;
	ЭлектронноеВзаимодействиеУТ.ШтрихкодыПоТоварам(ТаблицаТоваров, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);	

	СоответствиеСтавокНДСКонтрагента = Новый Соответствие;
	ЗаполнитьСоответствиеСтавокНДС(СоответствиеСтавокНДСКонтрагента);	
	ТаблицаСопоставления = ВыборкаДляСопоставления.Выгрузить();
	Для Каждого СтрокаТовары Из ТаблицаТоваров Цикл 
		СтрокаТовары.БазоваяЕдиницаКод = СокрЛП(СтрокаТовары.БазоваяЕдиницаКод);
		
		//Сопоставление
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
		ПараметрыОтбора.Вставить("Характеристика", СтрокаТовары.Характеристика);
		ПараметрыОтбора.Вставить("Упаковка", СтрокаТовары.Упаковка);
		СтрокиИзНоменклатурыКонтрагентов = ТаблицаСопоставления.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиИзНоменклатурыКонтрагентов.Количество() Тогда
			НайденнаяСтрока = СтрокиИзНоменклатурыКонтрагентов[0];
			СтрокаТовары.Сопоставление = ЭлектронноеВзаимодействиеУТ.ЗаполнитьСопоставлениеНоменклатуры(НайденнаяСтрока,,,,СоответствиеСтавокНДСКонтрагента);
	    Иначе
			СтрокаТовары.Сопоставление = ЭлектронноеВзаимодействиеУТ.ЗаполнитьСопоставлениеНоменклатуры(СтрокаТовары, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);
		КонецЕсли;
	КонецЦикла;	
	ЭлектронноеВзаимодействиеУТ.ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТаблицаТоваров);
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	ИтоговаяСтрока = НСтр("ru = 'Всего списано наименований'")
		+ " "+
		+ ТаблицаТоваров.Количество()
		+ ?(РеквизитыШапки.СуммаДокумента <> 0, НСтр("ru = ', на сумму'") + " ", "")
		+ ?(РеквизитыШапки.СуммаДокумента <> 0, ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта), "");
	СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогиПрописью", 
			ИтоговаяСтрока);
	//-- НЕ ГОСИС
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поиск и создание документов

// Сохраняет данные из электронного документа в объект ИБ.
//
// Параметры:
//  СтрокаДляЗагрузки - СтрокаДереваЗначений - параметры для загрузки.
//  ДеревоРазбора     - ДеревоЗначений - структура параметров документа ИБ.
//  ПараметрыОбработки - Структура - дополнительные параметры для обработки объекта.
//    См. ОбменСКонтрагентамиСлужебный.НовыеПараметрыОбработкиСохранитьДанныеОбъектаВБД.
//  НайденныйОбъект - Произвольный - созданный объект.
//
Процедура СохранитьДанныеОбъектаВБД(СтрокаДляЗагрузки, ДеревоРазбора, ПараметрыОбработки = Неопределено,
	НайденныйОбъект = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	Если ТипЗнч(ПараметрыОбработки) = Тип("Структура") Тогда
		СсылкаНаВладельца 	= ПараметрыОбработки.СсылкаНаВладельца;
		Записывать 			= ПараметрыОбработки.Записывать;
		СпособОбработки 	= ПараметрыОбработки.СпособОбработки;
	КонецЕсли;
	
	Если СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда		
		НайденныйОбъект = ЭлектронноеВзаимодействиеУТ.НайтиСоздатьРегистрацияЦен(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда		
		НайденныйОбъект = ЭлектронноеВзаимодействиеУТ.НайтиСоздатьЗаказКлиента(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		НайденныйОбъект = ЭлектронноеВзаимодействиеУТ.НайтиСоздатьЗаказПоставщику(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		НайденныйОбъект = ЭлектронноеВзаимодействиеУТ.НайтиСоздатьЗаявкуНаРасходованиеДенежныхСредств(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		И СпособОбработки = "ВозвратТоваровОтКлиента" Тогда
		НайденныйОбъект = ЭлектронноеВзаимодействиеУТ.НайтиСоздатьВозвратТоваровОтПокупателя(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ТОРГ12
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец 
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
		ВидОперацииЭД = ЭлектронноеВзаимодействиеУТ.ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ВидОперации", Истина, ДеревоРазбора);
		Если ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление Тогда
			НайденныйОбъект = ЭлектронноеВзаимодействиеУТ.НайтиСоздатьКорректировкуПоступления(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		Иначе
			НайденныйОбъект = ЭлектронноеВзаимодействиеУТ.НайтиСоздатьПриобретениеТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		КонецЕсли;
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.СчетФактура
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		ВидСчетаФактуры = ЭлектронноеВзаимодействиеУТ.ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ВидСчетаФактуры");
		Комиссионер = ЭлектронноеВзаимодействиеУТ.ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Комиссионер");
		Если ВидСчетаФактуры = "Авансовый" Тогда
			НайденныйОбъект = ЭлектронноеВзаимодействиеУТ.НайтиСоздатьСчетФактуруАванс(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		ИначеЕсли ЗначениеЗаполнено(Комиссионер) Тогда
			НайденныйОбъект = ЭлектронноеВзаимодействиеУТ.НайтиСоздатьСчетФактуруКомитента(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		Иначе
			НайденныйОбъект = ЭлектронноеВзаимодействиеУТ.НайтиСоздатьСчетФактуру(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		КонецЕсли;
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
		НайденныйОбъект = ЭлектронноеВзаимодействиеУТ.НайтиСоздатьОтчетКомиссионера(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
		НайденныйОбъект = ЭлектронноеВзаимодействиеУТ.НайтиСоздатьОтчетКомиссионераОСписании(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель 
		И СпособОбработки = "ПриобретениеТоваровУслуг" Тогда
		НайденныйОбъект = ЭлектронноеВзаимодействиеУТ.НайтиСоздатьПриобретениеТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);			
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		ВидОперацииЭД = ЭлектронноеВзаимодействиеУТ.ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ВидОперации", Истина, ДеревоРазбора);
		
		Если ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление Тогда
			НайденныйОбъект = ЭлектронноеВзаимодействиеУТ.НайтиСоздатьКорректировкуПоступления(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		Иначе
			НайденныйОбъект = ЭлектронноеВзаимодействиеУТ.НайтиСоздатьПоступлениеУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		КонецЕсли;
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
		НайденныйОбъект = ЭлектронноеВзаимодействиеУТ.НайтиСоздатьКорректировкуПоступления(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Поиск и создание документа передачи товаров.
//
// Параметры:
//  ДеревоДанных		 - ДеревоЗначений - дерево данных электронного документа.
//  СсылкаНаВладельца	 - ДокументСсылка - ссылка на документ учета.
//  Записывать			 - Булево - признак записи документа.
//  СпособОбработки		 - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьДокументПередачаТоваров(ДеревоДанных, СсылкаНаВладельца, Записывать = Истина, СпособОбработки = "") Экспорт
	
	//++ НЕ ГОСИС
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ЭлектронноеВзаимодействиеУТ.ПодготовитьСтруктуруДляПриобретенияТоваровУслугПоПередачеТоваров(ДеревоДанных);
	
	Если СпособОбработки = "ВозвратТоваровОтКлиента" Тогда
		ЭлектронноеВзаимодействиеУТ.ЗаполнитьДокументВозвратаТоваровОтПокупателя(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);		
	Иначе
		Если ДанныеДляЗагрузки.Шапка.Исправление Тогда
			ЭлектронноеВзаимодействиеУТ.ЗаполнитьДокументКорректировкиПоступления(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать)
		Иначе
			ЭлектронноеВзаимодействиеУТ.ЗаполнитьДокументПриобретенияТоваровУслуг(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);
		КонецЕсли;
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Поиск и создание документа передачи результатов работ.
//
// Параметры:
//  ДеревоДанных		 - ДеревоЗначений - дерево данных электронного документа.
//  СсылкаНаВладельца	 - ДокументСсылка - ссылка на документ учета.
//  Записывать			 - Булево - признак записи документа.
//  СпособОбработки		 - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьДокументПередачаРезультатовРабот(ДеревоДанных, СсылкаНаВладельца, Записывать = Истина, СпособОбработки = "") Экспорт
	
	//++ НЕ ГОСИС
	УстановитьПривилегированныйРежим(Истина);
	
	Если СпособОбработки = "ПриобретениеТоваровУслуг" Тогда
		ДанныеДляЗагрузки = ЭлектронноеВзаимодействиеУТ.ПодготовитьСтруктуруДляПриобретенияТоваровУслугПоПередачеРабот(ДеревоДанных);
		ЭлектронноеВзаимодействиеУТ.ЗаполнитьДокументПриобретенияТоваровУслуг(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);
	Иначе
		ДанныеДляЗагрузки = ЭлектронноеВзаимодействиеУТ.ПодготовитьСтруктуруДляПоступленияУслугПоПередачеРабот(ДеревоДанных);		
		Если ДанныеДляЗагрузки.Шапка.Исправление Тогда
			ЭлектронноеВзаимодействиеУТ.ЗаполнитьДокументКорректировкиПоступления(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать)
		Иначе
			ЭлектронноеВзаимодействиеУТ.ЗаполнитьДокументПоступленияУслуг(СсылкаНаВладельца, ДанныеДляЗагрузки, Записывать);
		КонецЕсли;
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкиНаВладельцев - Массив - документы информационной базы, созданные ранее по входящему электронному документу.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Структура - способы сохранения данных в информационной базе.
//     * ПервичныйДокумент - Строка - способ сохранения первичного документа.
//     * СчетФактура       - Строка - способ сохранения счета-фактуры.
//  ОписаниеОшибки - Строка - описание ошибки создания учетного документа.
//
Процедура НайтиСоздатьУниверсальныйПередаточныйДокумент(ДеревоДанных, СсылкиНаВладельцев = Неопределено,
	Записывать = Истина, СпособОбработки = Неопределено, ОписаниеОшибки = "") Экспорт
	
	//++ НЕ ГОСИС
	Текст = "";
	
	НачатьТранзакцию();
	Попытка
		
		ПервичныйДокумент = Неопределено;
		СчетФактура = Неопределено;
		
		Если СсылкиНаВладельцев <> Неопределено Тогда
			Для Каждого Ссылка Из СсылкиНаВладельцев Цикл
				Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный")
				 Или ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученныйНалоговыйАгент") Тогда
					СчетФактура = Ссылка;
				Иначе
					ПервичныйДокумент = Ссылка;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		ДокументыУчета = Новый Массив;
		
		ЭлектронноеВзаимодействиеУТ.НайтиСоздатьПриобретениеТоваровУслугУПД(ДеревоДанных, ПервичныйДокумент, Записывать, СпособОбработки);
		ДокументыУчета.Добавить(ПервичныйДокумент);
		
		// Заполним основание в СФ.
		ДокументыОснованияСчетаФактуры = Новый Массив;
		ДокументыОснованияСчетаФактуры.Добавить(ПервичныйДокумент);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснованияСчетаФактуры);
		
		ЭлектронноеВзаимодействиеУТ.НайтиСоздатьСчетФактуруУПД(ДеревоДанных, СчетФактура, Записывать);
		ДокументыУчета.Добавить(СчетФактура);
		
		СсылкиНаВладельцев = ДокументыУчета;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					Текст);
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка,,,	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;	
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, владельца электронного документа.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//  ОписаниеОшибки - Строка - описание ошибки создания учетного документа.
//
Процедура НайтиСоздатьУПДДокументОПередаче(ДеревоДанных, СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "", ОписаниеОшибки = "") Экспорт
	
	//++ НЕ ГОСИС
	ЭлектронноеВзаимодействиеУТ.НайтиСоздатьПриобретениеТоваровУслугУПД(ДеревоДанных, СсылкаНаВладельца, Записывать, СпособОбработки);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, владельца электронного документа.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//  ОписаниеОшибки - Строка - описание ошибки создания учетного документа.
//
Процедура НайтиСоздатьУПДСчетФактуру(ДеревоДанных, СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "", ОписаниеОшибки = "") Экспорт
	
	//++ НЕ ГОСИС
	ЭлектронноеВзаимодействиеУТ.НайтиСоздатьСчетФактуруУПД(ДеревоДанных, СсылкаНаВладельца, Записывать);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкиНаВладельцев - Массив - документы информационной базы, созданные ранее по входящему электронному документу.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Структура - способы сохранения данных в информационной базе.
//     * ПервичныйДокумент - Строка - способ сохранения первичного документа.
//     * СчетФактура       - Строка - способ сохранения счета-фактуры.
//
Процедура НайтиСоздатьУниверсальныйКорректировочныйДокумент(ДеревоДанных, СсылкиНаВладельцев = Неопределено,
	Записывать = Истина, СпособОбработки  = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	Текст = "";
	
	НачатьТранзакцию();
	Попытка
		
		ПервичныйДокумент = Неопределено;
		СчетФактура = Неопределено;
		
		Если СсылкиНаВладельцев <> Неопределено Тогда
			Для Каждого Ссылка Из СсылкиНаВладельцев Цикл
				Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный")
				 Или ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученныйНалоговыйАгент") Тогда
					СчетФактура = Ссылка;
				Иначе
					ПервичныйДокумент = Ссылка;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		ДокументыУчета = Новый Массив;
		
		ЭлектронноеВзаимодействиеУТ.НайтиСоздатьКорректировкуПоступленияУКД(ДеревоДанных, ПервичныйДокумент, Записывать);
		ДокументыУчета.Добавить(ПервичныйДокумент);
		
		// Заполним основание в СФ.
		ДокументыОснованияСчетаФактуры = Новый Массив;
		ДокументыОснованияСчетаФактуры.Добавить(ПервичныйДокумент);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснованияСчетаФактуры);
		
		ЭлектронноеВзаимодействиеУТ.НайтиСоздатьКорректировочныйСчетФактуруУКД(ДеревоДанных, СчетФактура, Записывать);
		ДокументыУчета.Добавить(СчетФактура);
		
		СсылкиНаВладельцев = ДокументыУчета;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заполнение документа на основе ЭД.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					Текст);
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка,,,	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;	
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, владельца электронного документа.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьУКДДокументОбИзмененииСтоимости(ДеревоДанных, СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт
	
	//++ НЕ ГОСИС
	ЭлектронноеВзаимодействиеУТ.НайтиСоздатьКорректировкуПоступленияУКД(ДеревоДанных, СсылкаНаВладельца, Записывать);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, владельца электронного документа.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьУКДСчетФактуру(ДеревоДанных, СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт
	
	//++ НЕ ГОСИС
	ЭлектронноеВзаимодействиеУТ.НайтиСоздатьКорректировочныйСчетФактуруУКД(ДеревоДанных, СсылкаНаВладельца, Записывать);
	//-- НЕ ГОСИС
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Создание элементов справочников.

// Создает объект в ИБ по дереву параметров и помещает ссылку на него в "НовыйЭлемент".
//
// Параметры:
//  СтрокаОбъекта - Структура - параметры записываемого объекта.
//  ДеревоРазбора - ДеревоЗначений - результат разбора электронного документа.
//  НовыйЭлемент - СправочникСсылка - в этот параметр необходимо вернуть ссылку на созданный элемент справочника.
//
Процедура СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора, НовыйЭлемент) Экспорт
	
	//++ НЕ ГОСИС
	НовыйЭлемент = Неопределено;
	Если СтрокаОбъекта.ОписаниеТипа = "СправочникСсылка.НоменклатураКонтрагентов" Тогда
		НовыйЭлемент = ЭлектронноеВзаимодействиеУТ.СоздатьПерезаполнитьНоменклатуруПоставщика(СтрокаОбъекта, ДеревоРазбора);
	ИначеЕсли СтрокаОбъекта.ОписаниеТипа = "СправочникСсылка.БанковскиеСчетаКонтрагентов" Тогда
		НовыйЭлемент = ЭлектронноеВзаимодействиеУТ.СоздатьРасчетныйСчет(СтрокаОбъекта,"БанковскийСчетКонтрагента", ДеревоРазбора);
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Поиска элемента справочника по реквизитам ИНН и КПП.
//
// Параметры:
//  ТипОбъекта - Строка - имя справочника в метаданных.
//  ИНН - Строка - ИНН.
//  КПП - Строка - КПП.
//  Организация - СправочникСсылка - Устарела (не используется). Ссылка на элемент справочника организации.
//  Ссылка - СправочникСсылка - Ссылка на найденный объект.
//  ДатаСведений - Дата - дата сведений о ИНН/КПП объекта.
//               - Неопределено - дата сведений неизвестна.
//
Процедура СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП, Ссылка, Организация = Неопределено, ДатаСведений = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	Ссылка = Неопределено;
	
	ИмяМетаданных = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника(ТипОбъекта);
	
	Запрос = Новый Запрос;
	УсловиеПоКПП = "ИСТИНА";
	Если ТипОбъекта = "Контрагенты" И ЗначениеЗаполнено(ДатаСведений) Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	Контрагенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Контрагенты.ИсторияКПП КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка.ИНН = &ИНН
		|	И &УсловиеПоКПП
		|	И Контрагенты.Период <= &ДатаСведений
        |
		|ОБЪЕДИНИТЬ
        |
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН
		|	И &УсловиеПоКПП
		|	И НЕ Контрагенты.ПометкаУдаления";
		Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
		Если ЗначениеЗаполнено(КПП) Тогда
			Запрос.УстановитьПараметр("КПП", КПП);
			УсловиеПоКПП = "Контрагенты.КПП = &КПП";
		КонецЕсли;		
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Выборка.Ссылка
		|ИЗ
		|	Справочник." + ИмяМетаданных + " КАК Выборка
		|ГДЕ
		|	Выборка.ИНН = &ИНН 
		|	И &УсловиеПоКПП
		|	И НЕ Выборка.ПометкаУдаления";
		Если ЗначениеЗаполнено(КПП) Тогда
			Запрос.УстановитьПараметр("КПП", КПП);
			УсловиеПоКПП = "Выборка.КПП = &КПП";
		КонецЕсли;		
	КонецЕсли;
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоКПП", УсловиеПоКПП);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Ссылка = Выборка.Ссылка;
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Заполняет реквизиты объекта данными из структуры реквизитов.
//
// Параметры:
//  СтруктураРеквизитов - структура - перечень значений реквизитов.
//  КонтрагентСсылка    - СправочникСсылка.Контрагенты - ссылка на контрагента, которого нужно заполнить.
//
Процедура ЗаполнитьРеквизитыКонтрагента(СтруктураРеквизитов, КонтрагентСсылка) Экспорт
	
	//++ НЕ ГОСИС
	КонтрагентСсылка = Неопределено;
	Партнер   = Неопределено;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитов.Контрагент) Тогда
		Контрагент = СтруктураРеквизитов.Контрагент.ПолучитьОбъект();
		Попытка 
			Контрагент.Заблокировать();
		Исключение
			ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось изменить контрагента ""%1"".
			|Возможно, контрагент редактируется другим пользователем'"),
			Контрагент.Наименование);			
			ВызватьИсключение ТекстИсключенияЗаписи;
		КонецПопытки;	
	Иначе
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
	КонецЕсли;
	
	Контрагент.Наименование = СтруктураРеквизитов.Наименование;
	ИНН_КПП        = СтруктураРеквизитов.ИНН_КПП;
	Контрагент.ИНН = Сред(ИНН_КПП, 1, Найти(ИНН_КПП, "/") - 1);
	Контрагент.КПП = Сред(ИНН_КПП, Найти(ИНН_КПП, "/") + 1);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда
		// Заполним реквизиты партнера
		
		Если Контрагент.ЭтоНовый() Тогда
			Партнер = Справочники.Партнеры.СоздатьЭлемент();
			СсылкаНовогоПартнера = Справочники.Партнеры.ПолучитьСсылку();
			Партнер.УстановитьСсылкуНового(СсылкаНовогоПартнера);
			Контрагент.Партнер = СсылкаНовогоПартнера;
		Иначе
			Партнер = Контрагент.Партнер.ПолучитьОбъект();
			Попытка 
				Партнер.Заблокировать();
			Исключение
				ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить партнера ""%1"".
				|Возможно, партнер редактируется другим пользователем'"),
				Партнер.Наименование);			
				ВызватьИсключение ТекстИсключенияЗаписи;
			КонецПопытки;			
		КонецЕсли;
		
		Партнер.Наименование = Контрагент.Наименование;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Контрагент.Записать();
		Контрагент.Разблокировать();
		Если Партнер <> Неопределено Тогда
			Партнер.Записать();
			Партнер.Разблокировать();			
		КонецЕсли;
		КонтрагентСсылка = Контрагент.Ссылка;		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + " (" + НСтр("ru = 'подробности см. в Журнале регистрации'") + ").";
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Загрузка реквизитов контрагента'"), ТекстОшибки, ТекстСообщения);
	КонецПопытки;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Заполняет структуру реквизитов товара.
//
// Параметры:
//  РеквизитыНоменклатуры - Структура - параметры поиска.
//  СтруктураВозврата - Структура - содержит ссылки на номенклатуру, характеристику, упаковку.
//  ИД - Строка - идентификатор обмена ЭД.
//
Процедура ПолучитьРеквизитыТовара(РеквизитыНоменклатуры, СтруктураВозврата, ИД = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	ПараметрПоиска = "";
	НоменклатураПоставщика = Неопределено;
	Если РеквизитыНоменклатуры.Свойство("НоменклатураПоставщика",НоменклатураПоставщика)Тогда
		СтруктураВозврата.Номенклатура = НоменклатураПоставщика.Номенклатура;
		СтруктураВозврата.Характеристика = НоменклатураПоставщика.Характеристика;
		СтруктураВозврата.Упаковка = НоменклатураПоставщика.Упаковка;
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Заполняет ИД контрагента.
//
// Параметры:
//  Контрагент - ОпределяемыйТип.Контрагент - ссылка на контрагента (Организация или Контрагент).
//  ВидКонтрагента - Строка - вид контрагента.
//  ИдКонтрагента - Строка - значение ИдКонтрагента.
//
Процедура ПолучитьИДКонтрагента(Контрагент, ВидКонтрагента, ИдКонтрагента) Экспорт
	
	//++ НЕ ГОСИС
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВРег(ВидКонтрагента) = ВРег("Организация") Тогда
		ИдКонтрагента = Контрагент.ИНН+"_"+Контрагент.КПП;
	ИначеЕсли ВРег(ВидКонтрагента) = ВРег("Контрагент") Тогда
		ИдКонтрагента = Контрагент.ИНН+"_"+Контрагент.КПП;
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение данных для формирования электронных документов.

// Получает значение перечисления по имени перечисления и представлению в библиотеке.
// 
// Параметры:
//  ИмяПеречисления - Строка - наименование перечисления.
//  ПредставлениеПеречисления - Строка - наименование значения перечисления.
//  НайденноеЗначение - ПеречислениеСсылка - значение искомого перечисления.
//
Процедура ПолучитьЗначениеПеречисления(ИмяПеречисления, ПредставлениеПеречисления, НайденноеЗначение) Экспорт
	
	//++ НЕ ГОСИС
	Если Метаданные.Перечисления.Найти(ИмяПеречисления) = Неопределено Тогда
		НайденноеЗначение = ПредставлениеПеречисления;
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлПеречисления Из Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления Цикл
		Если Найти(ВРег(ЭлПеречисления.Синоним), ВРег(ПредставлениеПеречисления)) > 0
			ИЛИ Найти(ВРег(ЭлПеречисления.Имя), ВРег(ПредставлениеПеречисления)) > 0 Тогда
			
			НайденноеЗначение = Перечисления[ИмяПеречисления][ЭлПеречисления.Имя];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	//Особенности ERP
	Если ИмяПеречисления = "ВариантыОплатыПоставщику" Тогда
		Если ПредставлениеПеречисления = НСтр("ru = 'Кредит (после поступления)'") Тогда
			НайденноеЗначение = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления;
		ИначеЕсли ПредставлениеПеречисления = НСтр("ru = 'Предоплата (до поступления)'") Тогда
			НайденноеЗначение = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления;
		КонецЕсли;
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Получает данные свидетельства о регистрации ИП по ссылке.
//
// Параметры:
//  ИП - СправочникСсылка - источник, по которому нужно получить данные;
//  Сведения - Строка - сведения о регистрации индивидуального предпринимателя.
//
Процедура ДанныеСвидетельстваОРегистрацииИП(ИП, Сведения) Экспорт
	
	//++ НЕ ГОСИС
	РеквизитыСвидетельства = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИП, "СвидетельствоДатаВыдачи, СвидетельствоСерияНомер");
	ШаблонДанныхСвидетельства = НСтр("ru = 'Свидетельство %1 от %2'");
	
	Сведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонДанныхСвидетельства, 
		РеквизитыСвидетельства.СвидетельствоСерияНомер,
		Формат(РеквизитыСвидетельства.СвидетельствоДатаВыдачи, "ДЛФ=D"));
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Получение контактной информации организации по ссылке.
//
// Параметры:
//  Организация - Ссылка - элемент справочника Организации, по которому нужно получить данные.
//  ТаблицаКонтактов - ТаблицаЗначений - контактная информация по организации.
//
Процедура ПолучитьКонтактнуюИнформацию(Организация, ТаблицаКонтактов) Экспорт
	
	//++ НЕ ГОСИС
	//В запросе реквизит Представление присваивается полю Значение, т.к в схеме XDTO поле Значение обязательно к заполнению,
	//а для адреса электронной почты реквизит Значение пустой
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОрганизацииКонтактнаяИнформация.Вид,
	|	ОрганизацииКонтактнаяИнформация.Представление КАК Значение,			
	|	ОрганизацииКонтактнаяИнформация.ЗначенияПолей КАК Комментарий
	|ИЗ
	|	Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
	|ГДЕ
	|	ОрганизацииКонтактнаяИнформация.Ссылка = &Ссылка
	|	И (ОрганизацииКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailОрганизации)
	|			ИЛИ ОрганизацииКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации)
	|			ИЛИ ОрганизацииКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФаксОрганизации))";
	Запрос.УстановитьПараметр("Ссылка", Организация);
	
	ТаблицаКонтактов = Запрос.Выполнить().Выгрузить();
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Заполняет "НазваниеРегиона" по "КодРегиона".
//
// Параметры:
//  КодРегиона - Строка - строка, содержащая двухсимвольный код региона.
//  НазваниеРегиона - Строка - наименование региона.
//
Процедура НазваниеРегиона(КодРегиона, НазваниеРегиона) Экспорт
	
	//++ НЕ ГОСИС
	Если НЕ ЗначениеЗаполнено(КодРегиона) Тогда
		НазваниеРегиона = "";
		Возврат
	КонецЕсли;
	
	НазваниеРегиона = АдресныйКлассификатор.НаименованиеРегионаПоКоду(КодРегиона);
	Если НазваниеРегиона = Неопределено Тогда
		НазваниеРегиона = ""
	КонецЕсли;
	//-- НЕ ГОСИС

КонецПроцедуры

// Получает адрес электронной почты контрагента.
//
// Параметры:
//  Контрагент - СправочникСсылка - ссылка на элемент справочника контрагенты, адрес которого надо получить.
//  АдресЭП - Строка - адрес электронной почты.
//
Процедура АдресЭлектроннойПочтыКонтрагента(Контрагент, АдресЭП) Экспорт
	
	//++ НЕ ГОСИС
	АдресЭП = ЭлектронноеВзаимодействиеУТ.ПолучитьАдресЭПИзКонтактнойИнформации(Контрагент);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Получает банковские счета.
//
// Параметры:
//  Организация - СправочникСсылка.Организация - ссылка на организацию.
//  Банк - СправочникСсылка - ссылка на элемент справочника с банками.
//  Таблица - ТаблицаЗначений - таблица значений с перечнем банковских счетов.
//
Процедура ПолучитьБанковскиеСчета(Организация, Таблица, Банк = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БанковскиеСчетаОрганизаций.Ссылка КАК БанковскийСчет
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|ГДЕ
	|	БанковскиеСчетаОрганизаций.Владелец = &Владелец
	|	//ОтборПоБанку И БанковскиеСчетаОрганизаций.Банк = &Банк";
	
	Если ЗначениеЗаполнено(Банк) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОтборПоБанку", "");
		Запрос.УстановитьПараметр("Банк", Банк);
	КонецЕсли;

	Запрос.УстановитьПараметр("Владелец", Организация);
	Таблица = Запрос.Выполнить().Выгрузить();
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Получает банковские реквизиты.
//
// Параметры:
//  МассивСчетов - массив - список банковских счетов.
//  Таблица - ТаблицаЗначений - перечень банковских реквизитов. Должна содержать следующие колонки:
//    * Ссылка - Ссылка - ссылка на банковский счет.
//    * РасчетныйСчет - Строка - номер расчетного счета.
//    * КорреспондентскийСчет - Строка - номер корреспондентского счета.
//    * БИК - Строка - БИК банка.
//    * Банк - Ссылка - ссылка на банк.
//    * БанкДляРасчетов - Ссылка - ссылка на банк для расчетов.
//    * БанкДляРасчетовБИК - БИК банка для расчетов.
//    * БанкДляРасчетовКоррСчет - Строка - корреспондентский счет банка для расчетов.
//
Процедура ПолучитьБанковскиеРеквизиты(МассивСчетов, Таблица) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БанковскиеСчетаОрганизаций.Ссылка,
	|	БанковскиеСчетаОрганизаций.НомерСчета КАК РасчетныйСчет,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскиеСчетаОрганизаций.КоррСчетБанка
	|		ИНАЧЕ БанковскиеСчетаОрганизаций.Банк.КоррСчет
	|	КОНЕЦ КАК КорреспондентскийСчет,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскиеСчетаОрганизаций.БИКБанка
	|		ИНАЧЕ БанковскиеСчетаОрганизаций.Банк.Код
	|	КОНЕЦ КАК БИК,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскиеСчетаОрганизаций.НаименованиеБанка
	|		ИНАЧЕ БанковскиеСчетаОрганизаций.Банк.Наименование
	|	КОНЕЦ КАК Банк,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА БанковскиеСчетаОрганизаций.НаименованиеБанкаДляРасчетов
	|		ИНАЧЕ БанковскиеСчетаОрганизаций.БанкДляРасчетов.Наименование
	|	КОНЕЦ КАК БанкДляРасчетов,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА БанковскиеСчетаОрганизаций.БИКБанкаДляРасчетов
	|		ИНАЧЕ БанковскиеСчетаОрганизаций.БанкДляРасчетов.Код
	|	КОНЕЦ КАК БанкДляРасчетовБИК,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА БанковскиеСчетаОрганизаций.КоррСчетБанкаДляРасчетов
	|		ИНАЧЕ БанковскиеСчетаОрганизаций.БанкДляРасчетов.КоррСчет
	|	КОНЕЦ КАК БанкДляРасчетовКоррСчет
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|ГДЕ
	|	БанковскиеСчетаОрганизаций.Ссылка В(&МассивСчетов)";
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	Таблица = Запрос.Выполнить().Выгрузить();
	//-- НЕ ГОСИС
	
КонецПроцедуры

// В процедуре выполняется заполнение реквизитов (дата выставления, признак выставления,
// дата получения, признак получения) документов счета-фактуры, по ключевым событиям,
// описанным в приказе от 25 апреля 2011 г. N 50н.: получение ПДО, ПДП, ИП, ПДОИП.
//
// Параметры:
//  ВладелецЭД - документ-ссылка, ссылка на документ ИБ счет-фактура выданный/полученный.
//  ЭД - справочник-ссылка, ссылка на элемент справочника ЭДПрисоединенныеФайлы.
//
Процедура ЗаполнитьРеквизитыЭСФ(ВладелецЭД, ЭД) Экспорт
	
	//++ НЕ ГОСИС
	ЭСФ = Неопределено;
	ИменаРеквизитов = Новый Массив();
	
	Если ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ Тогда
		
		// Датой выставления покупателю счета-фактуры в электронном виде по телекоммуникационным
		// каналам связи считается дата поступления файла счета-фактуры Оператору ЭДО от продавца, 
		// указанная в подтверждении (ПДПЭСФ) этого Оператора ЭДО.  ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		ЭСФ = ВладелецЭД.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ЭСФ.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ЭСФ.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		ЭСФ.ДатаВыставления = ЭД.ВладелецФайла.ДатаДокументаОтправителя;
		ИменаРеквизитов.Добавить("ДатыВыставления");
		ЭСФ.ВыставленВЭлектронномВиде = Истина;
		ИменаРеквизитов.Добавить("ВыставленВЭлектронномВиде");
		
	ИначеЕсли ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ Тогда
		
		// Датой получения покупателем счета-фактуры в электронном виде по телекоммуникационным 
		// каналам связи считается дата направления покупателю Оператором ЭДО файла счета-фактуры продавца, 
		// указанная в подтверждении (ПДОЭСФ) Оператора ЭДО.  ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		ЭСФ = ВладелецЭД.ПолучитьОбъект();
		//Попытка заблокировать документ
		Попытка
			ЭСФ.Заблокировать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить данные документа ""%1"".
				|Возможно, документ редактируется другим пользователем'"),
				Строка(ЭСФ.Ссылка));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		//конец попытки заблокировать документ
		ЭСФ.Дата = ЭД.ВладелецФайла.ДатаДокументаОтправителя;
		ИменаРеквизитов.Добавить("Дата");
		ЭСФ.ПолученВЭлектронномВиде = Истина;
		ИменаРеквизитов.Добавить("ПолученВЭлектронномВиде");
		
	ИначеЕсли ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ Тогда
		
		// Счет-фактура в электронном виде считается выставленным, если продавцу поступило 
		// соответствующее подтверждение (ПДПЭСФ) Оператора ЭДО, при наличии у продавца извещения покупателя 
		// о получении счета-фактуры (ИПЭСФ), подписанного ЭЦП покупателя и полученного через Оператора ЭДО.
		// ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		ВыставленВЭлектронномВиде = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецЭД, "ВыставленВЭлектронномВиде");
		Если Не ВыставленВЭлектронномВиде Тогда
			ЭСФ = ВладелецЭД.ПолучитьОбъект();
			//Попытка заблокировать документ
			Попытка
				ЭСФ.Заблокировать();
			Исключение
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось изменить данные документа ""%1"".
					|Возможно, документ редактируется другим пользователем'"),
					Строка(ЭСФ.Ссылка));
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
			//конец попытки заблокировать документ			
			ЭСФ.ВыставленВЭлектронномВиде = Истина;
			ИменаРеквизитов.Добавить("ВыставленВЭлектронномВиде");
		КонецЕсли;
		
	ИначеЕсли ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
		
		// Счет-фактура в электронном виде считается полученным покупателем, если ему поступило 
		// соответствующее подтверждение (ПДОЭСФ) Оператора ЭДО, при наличии извещения покупателя 
		// о получении счета-фактуры (ИПЭСФ), подписанного ЭЦП покупателя и подтвержденного (ПДОИПЭСФ)
		// Оператором ЭДО.  ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		ПолученВЭлектронномВиде = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецЭД, "ПолученВЭлектронномВиде");
		Если Не ПолученВЭлектронномВиде Тогда
			ЭСФ = ВладелецЭД.ПолучитьОбъект();
			//Попытка заблокировать документ
			Попытка
				ЭСФ.Заблокировать();
			Исключение
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось изменить данные документа ""%1"".
					|Возможно, документ редактируется другим пользователем'"),
					Строка(ЭСФ.Ссылка));
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
			//конец попытки заблокировать документ
			ЭСФ.ПолученВЭлектронномВиде = Истина;
			ИменаРеквизитов.Добавить("ПолученВЭлектронномВиде");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭСФ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		РежимЗаписи = ?(ЭСФ.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		ЭСФ.Записать(РежимЗаписи);
	Исключение
		
		Если ИменаРеквизитов.Количество() > 1 Тогда
			ШаблонОшибки = НСтр("ru = 'При установке реквизитов %1 документа %2 возникла ошибка. Описание ошибки: ""%3""'");
		Иначе
			ШаблонОшибки = НСтр("ru = 'При установке реквизита %1 документа %2 возникла ошибка. Описание ошибки: ""%3""'")
		КонецЕсли;
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОшибки, 
			СтрСоединить(ИменаРеквизитов),
			ЭСФ.Ссылка,
			ИнформацияОбОшибке().Описание);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка установки реквизитов счета-фактуры при получении служебного ЭД от оператора'", 
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			ЭСФ.Метаданные(),
			ЭСФ.Ссылка,
			ТекстОшибки);
		
	КонецПопытки;
	//-- НЕ ГОСИС
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Просмотр электронных документов

// Формирует текст НДС по этапу оплаты.
//
// Параметры:
//  СоответствиеСтавокНДС - Соответствие - соответствие, полученное с помощью функции ПолучитьСоответствиеСтавокНДС().
//  ПроцентПлатежа - Число - Процент платежа по этапу.
//  ТекстНДС - Строка - описание ставки НДС.
//
Процедура СформироватьТекстНДСЭтапаОплаты(СоответствиеСтавокНДС, ПроцентПлатежа, ТекстНДС) Экспорт
	
	//++ НЕ ГОСИС
	ТекстНДС = "";
	
	Если СоответствиеСтавокНДС.Количество() > 0 Тогда
		Для Каждого ТекСтавкаНДС Из СоответствиеСтавокНДС Цикл
			Если ТекСтавкаНДС.Значение <> 0 Тогда
				ТекстНДС = ТекстНДС + ?(ПустаяСтрока(ТекстНДС), НСтр("ru = 'НДС(%СтавкаНДС%) %СуммаНДС%'"), НСтр("ru = ', НДС(%СтавкаНДС%) %СуммаНДС%'"));
				ТекстНДС = СтрЗаменить(ТекстНДС, "%СтавкаНДС%", ТекСтавкаНДС.Ключ);
				ТекстНДС = СтрЗаменить(ТекстНДС, "%СуммаНДС%",  Формат(ТекСтавкаНДС.Значение / 100 * ПроцентПлатежа, "ЧЦ=15; ЧДЦ=2"));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстНДС) Тогда
		ТекстНДС = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В т.ч. %1'"), ТекстНДС);
	Иначе
		ТекстНДС = НСтр("ru = 'Без налога (НДС)'");
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Заполняет текстовое представление суммы.
//
// Параметры:
//  СуммаКПрописи - Число - сумма, по которой надо получить представление.
//  КодВалюты - Число - код используемой валюты.
//  ЧН - Строка - параметр нулевого значения числа.
//  ЧРГ - Строка - разделитель групп целой части числа.
//  Результат - Строка - текстовое представление суммы, которое будет заполнено. 
//
Процедура ФорматСумм(СуммаКПрописи, Результат, КодВалюты = Неопределено, ЧН = "", ЧРГ = "") Экспорт
	
	//++ НЕ ГОСИС
	Валюта = Неопределено;
	ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Валюта, КодВалюты);
 	Результат = ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, Валюта,  ЧН, ЧРГ);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Заполняет сумму прописью.
//
// Параметры:
//  СуммаЧислом - Число - преобразуемая сумма.
//  КодВалюты - Число - код используемой валюты.
//  Результат - Строка - сумма прописью.
//
Процедура СуммаПрописью(СуммаЧислом, КодВалюты, Результат) Экспорт
	
	//++ НЕ ГОСИС
	Валюта = Неопределено;
	Если ЗначениеЗаполнено(КодВалюты) Тогда 
		ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Валюта, КодВалюты);
		СтрокаСумма = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаЧислом, Валюта);
	Иначе
		ПараметрыПрописи = Новый Структура("ПараметрыПрописиНаРусском", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
		СтрокаСумма = ЧислоПрописью(СуммаЧислом, ПараметрыПрописи);
	КонецЕсли;
	Результат = СтрокаСумма;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Формирует текст НДС по ставке для печатной формы счета и заказа.
//
// Параметры:
//  СтавкаНДС       - ПеречислениеСсылка.СтавкиНДС - ставка НДС, для которой необходимо сформировать текст.
//  ЦенаВключаетНДС - Булево - Признак включения НДС в цену.
//  Результат       - Строка - текстовое представление ставки НДС.
//
Процедура ТекстНДСПоСтавке(СтавкаНДС, ЦенаВключаетНДС, Результат) Экспорт
	
	//++ НЕ ГОСИС
	Результат = ФормированиеПечатныхФорм.ТекстНДСПоСтавке(СтавкаНДС, ЦенаВключаетНДС);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Используется для простановки ответственного при создании электронного документа.
//
// Параметры:
//  Контрагент - СправочникСсылка - ссылка на контрагента, по которому надо получить ответственного.
//  Организация - СправочникСсылка.Организации - организация, которая отправляет документ.
//  ДоговорКонтрагента - СправочникСсылка.Договоры - Договор, по которому идет отправка документа.
//  ОтветственныйПоЭД - СправочникСсылка.Пользователи - ответственное лицо.
//
Процедура ПолучитьОтветственногоПоЭД(Контрагент, Организация, ДоговорКонтрагента, ОтветственныйПоЭД) Экспорт
	
	//++ НЕ ГОСИС
	УстановитьПривилегированныйРежим(Истина);
	
	ОтветственныйПоЭД = Справочники.Пользователи.ПустаяСсылка();
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(Контрагент.Партнер) Тогда
		Если Контрагент.Партнер.Метаданные().Реквизиты.Найти("ОсновнойМенеджер")<> Неопределено 
			И ЗначениеЗаполнено(Контрагент.Партнер.ОсновнойМенеджер) Тогда 
			ОтветственныйПоЭД = Контрагент.Партнер.ОсновнойМенеджер;
		КонецЕсли;
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Возврат признака физического лица.
//
// Параметры:
//  ДанныеКонтрагента - СправочникСсылка - ссылка на элемент справочника.
//  ПризнакФизЛица - Булево - Истина если физическое лицо.
//
Процедура ЭтоФизЛицо(ДанныеКонтрагента, ПризнакФизЛица) Экспорт
	
	//++ НЕ ГОСИС
	Если ДанныеКонтрагента.Метаданные().Реквизиты.Найти("ЮрФизЛицо") = Неопределено Тогда
		ПризнакФизЛица = Ложь;
	КонецЕсли;
	
	ЮрФизЛицо = ДанныеКонтрагента.ЮрФизЛицо;
	
	Если ТипЗнч(ЮрФизЛицо) <> Тип("ПеречислениеСсылка.ЮрФизЛицо") Тогда
		ПризнакФизЛица = Ложь;
	КонецЕсли;
		
	ПризнакФизЛица = Ложь;
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо 
		ИЛИ ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
		ПризнакФизЛица = Истина;
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Вывод данных о скидках в печатную форму документа.
//
// Параметры:
//  Товары - ТаблицаЗначений, ВыборкаИзРезультатаЗапроса - список товаров.
//  ИспользоватьСкидки - Булево - используются скидки.
//  ВыводитьСкидки - Булево - заполняемый процедурой признак.
//
Процедура НужноВыводитьСкидки(Знач Товары, ИспользоватьСкидки, ВыводитьСкидки) Экспорт
	
	//++ НЕ ГОСИС
	ВыводитьСкидки = Ложь;	
	
	Если ИспользоватьСкидки Тогда
		Если ТипЗнч(Товары) = Тип("ТаблицаЗначений") Или ТипЗнч(Товары) = Тип("Массив") Тогда
			Для Каждого СтрокаТоваров Из Товары Цикл
				Если ЗначениеЗаполнено(СтрокаТоваров.СуммаСкидки) Тогда
					ВыводитьСкидки = Истина;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(Товары) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
			Пока Товары.Следующий() Цикл
				Если ЗначениеЗаполнено(Товары.СуммаСкидки) Тогда
					ВыводитьСкидки = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Определяет имя дополнительной колонки, которая выводится в печатных формах электронных документов Счет на оплату,
// Заказ клиента, Заказ поставщику, Отчет о списании комиссионного товара, Отчет о продажах комиссионного товара.
// В качестве дополнительной колонки могут выступать "Код", "Артикул".
//
// Параметры:
//  Результат - Строка - доступные значения: "Код", "Артикул".
//
Процедура ИмяДополнительнойКолонки(Результат) Экспорт
	
	//++ НЕ ГОСИС
	Результат = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	//-- НЕ ГОСИС
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Переопределение поведения электронных документов.

// Данное событие возникает при изменении элемента справочника ЭДПрисоединенныеФайлы.
// Предназначено для переопределения или добавления изменяемых реквизитов электронного документа.
//
// Параметры:
//  Объект - СправочникСсылка.ЭДПрисоединенныеФайлы - изменяемый объект.
//  СтруктураПараметров - Структура, содержит структуру изменяемых реквизитов.
//
Процедура ПриИзмененииПрисоединенногоФайла(Объект, СтруктураПараметров) Экспорт
	
	//++ НЕ ГОСИС
	Если Не СтруктураПараметров.Свойство("Ответственный") Тогда
		СтруктураПараметров.Вставить("Ответственный", Пользователи.АвторизованныйПользователь());
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Описывает действия, которые нужно выполнить после формирования электронного документа.
//
// Параметры:
//  ЭлектронныйДокумент	 - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на электронный документ.
//
Процедура ЭлектронныйДокументСформирован(ЭлектронныйДокумент) Экспорт
	
КонецПроцедуры

// Выполняет дополнительную обработку электронного документа, которому назначили статус "Утвержден".
// 
// Параметры:
//  ЭлектронныйДокумент - СправочникСсылка - ссылка на присоединенный файл.
//
Процедура НазначенСтатусУтвержден(ЭлектронныйДокумент) Экспорт
	
	//++ НЕ ГОСИС
	Попытка
		ФайлОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
		ФайлОбъект.Заблокировать();
		ФайлОбъект.Изменил = ПользователиКлиентСервер.ТекущийПользователь();
		ФайлОбъект.Записать();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + " (" + НСтр("ru = 'подробности см. в Журнале регистрации'") + ").";
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'утверждение ЭД'"), ТекстОшибки, ТекстСообщения);
	КонецПопытки;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Выполняет дополнительную обработку электронного документа, которому назначили статус "Подписан".
// 
// Параметры:
//  ЭлектронныйДокумент - СправочникСсылка - ссылка на присоединенный файл.
//
Процедура НазначенСтатусПодписан(ЭлектронныйДокумент) Экспорт
	
	
КонецПроцедуры

// Вызывается при изменении состояния документооборота на ОбменЗавершен, ОбменЗавершенСИсправлением.
//
// Параметры:
//  ОснованияЭлектронногоДокумента - ДокументСсылка - ссылка на документ основания электронного документа.
//
Процедура УстановленоСостояниеОбменЗавершен(ОснованияЭлектронногоДокумента) Экспорт
	
	//++ НЕ ГОСИС
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Проверка выполнения условия для утверждения документа.
//
// Параметры:
//  ЭлектронныйДокумент - Ссылка - ссылка на электронный документ.
//  Готов - Булево - заполняемый процедурой признак.
//
Процедура ЭлектронныйДокументГотовКУтверждению(ЭлектронныйДокумент, Готов) Экспорт
	
	//++ НЕ ГОСИС
	Готов = Истина;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Определяет возможно ли редактировать объект информационной базы.
//
// Параметры:
//  Источник - ДокументОбъект - проверяемый объект.
//  РедактированиеРазрешено - Булево - возвращает разрешено или нет редактирование.
//
Процедура ПроверитьВозможностьРедактированияОбъекта(Источник, РедактированиеРазрешено) Экспорт
	
	//++ НЕ ГОСИС
	СсылкаНаОбъект = Источник.Ссылка;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СостояниеВерсииЭД
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект";
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий()
		И НЕ (Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент
		ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОшибкаПередачи
		ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован
		ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НаУтверждении
		ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.Отклонен) Тогда
		РедактированиеРазрешено = Истина;
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Выполняется проверка возможности корректного чтения Пакета ЭД.
// Необходимость данной проверки возникает при работе с данными внешней информационной базы (через com-соединение).
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД - исследуемый пакет электронных документов.
//  ЧтениеПакетаВозможно - Булево, Неопределено - Ложь - чтение пакета не будет выполняться, во всех остальных случаях,
//                                                       (включая пустое значение) пакет будет прочитан.
//
Процедура ОпределитьВозможностьЧтенияДвоичныхДанныхПакетаЭД(ПакетЭД, ЧтениеПакетаВозможно) Экспорт
	
	
	
КонецПроцедуры

// Проверяет на корректность заполнения параметров электронного документа.
//
// Параметры:
//  ПараметрыЭД - структура - перечень параметров ЭД.
//  Результат - Булево - Истина если правильно заполнен объект выгрузки.
//
Процедура ПроверитьПравильностьЗаполненияОбъекта(ПараметрыЭД, Результат) Экспорт
	
	//++ НЕ ГОСИС
	Результат = Истина;
	
	Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист И НЕ ЗначениеЗаполнено(ПараметрыЭД.Контрагент) Тогда
		Результат = Ложь;
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции

// Создает таблицу порядка создания типов при загрузке электронного документа.
//
//  Таблица - таблица значений.
//
// Позволяет переопределить порядок создания типов объектов в дереве. Это может быть необходимо, когда одни типы
// зависимы от других, например, номенклатура поставщика, как правило, зависима от номенклатуры. Используется при
// заполнении в дереве электронного документа ссылок на объекты информационной базы.
//
// Параметры:
//  Таблица	 - ТаблицаЗначений - содержит колонки:
//    * ТипОбъекта - Строка - строковый идентификатор библиотечного типа.
//    * Порядок - Число - порядок создания типа в дереве (нумеруется с 1).
//
Процедура ЗаполнитьТаблицуПорядкаСозданияТиповОбъектов(Таблица) Экспорт
	
	//++ НЕ ГОСИС
	Таблица.Колонки.Добавить("ТипОбъекта");
	Таблица.Колонки.Добавить("Порядок");
	// БанковскиеСчетаКонтрагентов
	НовСтрока = Таблица.Добавить();
	НовСтрока.ТипОбъекта 	= "БанковскиеСчетаКонтрагентов";
	НовСтрока.Порядок 		= 1;
	// Номенклатура партнера
	НовСтрока = Таблица.Добавить();
	НовСтрока.ТипОбъекта 	= "НоменклатураКонтрагентов";
	НовСтрока.Порядок 		= 2;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Получает имя временного файла.
//
// Параметры:
//  ИмяВременногоФайла - Строка - имя временного файла;
//  Расширение - Строка - расширение для временного файла.
//
Процедура ТекущееИмяВременногоФайла(ИмяВременногоФайла, Расширение = "") Экспорт
	
	//++ НЕ ГОСИС
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Осуществляет разбор файла с реквизитами контрагента
// в ней можно внести изменения в структуру возвращаемых данных.
//
// Параметры:
//  СсылкаНаФайл - адрес хранилища файла с реквизитами контрагента;
//  СтруктураВозврата - Структура - перечень параметров;
//  ОшибкаРазбора - текст, описание ошибки.
//
// Возвращаемое значение:
//  РезультатРазбора - Булево - Истина - разбор файла выполнен; Ложь - разбор файла не выполнялся.
//
Процедура РазобратьФайлРеквизитовКонтрагента(СсылкаНаФайл, СтруктураВозврата, РезультатРазбора, ОшибкаРазбора) Экспорт
	
	//++ НЕ ГОСИС
	// Переопределим структуру возврата
	СтруктураВозврата = Новый Структура();
	
	ОбъектXML = Новый ЧтениеXML;
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(СсылкаНаФайл);
	ВремФайл = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
	ДвоичныеДанные.Записать(ВремФайл);
	
	Попытка
		ОбъектXML.ОткрытьФайл(ВремФайл);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
	Исключение
		ОбъектXML.Закрыть();
		
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + " (" + НСтр("ru = 'подробности см. в Журнале регистрации'") + ").";
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Разбор файла с реквизитами контрагента'"), ТекстОшибки, ТекстСообщения);
		
		РезультатРазбора = Ложь;
		Возврат;
		
	КонецПопытки;
	
	Попытка
		
		СвойствоЭД = ЭД.Свойства().Получить("Контакты");
		Если НЕ СвойствоЭД = Неопределено И НЕ ЭД.Контакты = Неопределено Тогда
			Для Каждого ТекКонтакт Из ЭД.Контакты.Контакт Цикл
				Если ТекКонтакт.Тип = "Телефон рабочий" Тогда
					СтруктураВозврата.Вставить("ТелефонПартнера", ТекКонтакт.Значение);
					СтруктураВозврата.Вставить("ТелефонКЛ",       ТекКонтакт.Значение);
					СтруктураВозврата.Вставить("ТелефонПартнераФизЛицо", ТекКонтакт.Значение);
				ИначеЕсли ТекКонтакт.Тип = "Почта" Тогда
					СтруктураВозврата.Вставить("АдресЭППартнера", ТекКонтакт.Значение);
					СтруктураВозврата.Вставить("АдресЭПКЛ",       ТекКонтакт.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СвойствоЭД = ЭД.Свойства().Получить("РасчетныеСчета");
		Если СвойствоЭД <> Неопределено Тогда
			
			ЗнДанных = ЭД.Получить(СвойствоЭД);
			Если ЗнДанных <> Неопределено Тогда
				Для Каждого ТекСв Из ЗнДанных.РасчетныйСчет Цикл
					
					СтруктураВозврата.Вставить("НомерСчета",         ТекСв.НомерСчета);
					СтруктураВозврата.Вставить("БИКБанка",           ТекСв.Банк.БИК);
					СтруктураВозврата.Вставить("КоррСчетБанка",      ТекСв.Банк.СчетКорреспондентский);
					СтруктураВозврата.Вставить("ПредставлениеБанка", ТекСв.Банк.Наименование);
					СтруктураВозврата.Вставить("УказатьБанковскийСчетКонтрагента", Истина);
					
					Если НЕ ТекСв.БанкКорреспондент = Неопределено Тогда
						СтруктураВозврата.Вставить("БИКБанкаДляРасчетов",           ТекСв.БанкКорреспондент.БИК);
						СтруктураВозврата.Вставить("КоррСчетБанкаДляРасчетов",      ТекСв.БанкКорреспондент.СчетКорреспондентский);
						СтруктураВозврата.Вставить("ПредставлениеБанкаДляРасчетов", ТекСв.БанкКорреспондент.Наименование);
						СтруктураВозврата.Вставить("ИспользуетсяБанкДляРасчетов",   Истина);
					КонецЕсли;
					Прервать;
				КонецЦикла
			КонецЕсли;
		КонецЕсли;
		
		СтруктураВозврата.Вставить("УказыватьЮридическиеРеквизиты", Истина);
		ДопустимыеТипы = "Страна, Регион, Район, Город, Улица, Дом, Корпус, Квартира";
		
		СвойствоЭД = ЭД.Свойства().Получить("ОфициальноеНаименование");
		Если СвойствоЭД <> Неопределено Тогда
			ЗнДанных = ЭД.Получить(СвойствоЭД);
			Если ЗнДанных <> Неопределено Тогда			
				ЭтоЮрЛицо = Истина
			Иначе
				ЭтоЮрЛицо = Ложь
			КонецЕсли;
	
			Если ЭтоЮрЛицо Тогда
				СтруктураВозврата.Вставить("ВидКомпании", 0);
				СвойствоИНН = ЭД.Свойства().Получить("ИНН");
				Если СвойствоИНН <> Неопределено Тогда
					СтруктураВозврата.Вставить("ИНН", ЭД.Получить(СвойствоИНН));
				КонецЕсли;
				СвойствоКПП = ЭД.Свойства().Получить("КПП");
				Если СвойствоКПП <> Неопределено Тогда
					СтруктураВозврата.Вставить("КПП", ЭД.Получить(СвойствоКПП));
				КонецЕсли;
				СвойствоОКПО = ЭД.Свойства().Получить("ОКПО");
				Если СвойствоОКПО <> Неопределено Тогда
					СтруктураВозврата.Вставить("КодПоОКПО", ЭД.Получить(СвойствоОКПО));
				КонецЕсли;
				СвойствоОФНаим = ЭД.Свойства().Получить("ОфициальноеНаименование");
				Если СвойствоОФНаим <> Неопределено Тогда
					СтруктураВозврата.Вставить("ПолноеНаименование", ЭД.Получить(СвойствоОфНаим));
					СтруктураВозврата.Вставить("ПолноеЮридическоеНаименование", ЭД.Получить(СвойствоОфНаим));
				КонецЕсли;
				
				СвойствоЮрАдрес = ЭД.Свойства().Получить("ЮридическийАдрес");
				Если СвойствоЮрАдрес <> Неопределено Тогда
					ЗнЮрАдрес = ЭД.Получить(СвойствоЮрАдрес);
					Если ЗнЮрАдрес <> Неопределено Тогда
						СтруктураВозврата.Вставить("ЮридическийАдрес", ЗнЮрАдрес.Представление);
						ЮридическийАдресЗначенияПолей = Новый СписокЗначений;
						Для Каждого ТекСв Из ЗнЮрАдрес.АдресноеПоле Цикл
							Если ТекСв.Тип = "Почтовый индекс" Тогда
								ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
								ЮрАдресЗначения.Представление =  "Индекс";
								ЮрАдресЗначения.Значение = ТекСв.Значение;
							ИначеЕсли ТекСв.Тип = "Населенный пункт" Тогда
								ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
								ЮрАдресЗначения.Представление = "НаселенныйПункт";
								ЮрАдресЗначения.Значение = ТекСв.Значение;
							ИначеЕсли Найти(ДопустимыеТипы, ТекСв.Тип) > 0 ТОгда
								ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
								ЮрАдресЗначения.Представление = ТекСв.Тип;
								ЮрАдресЗначения.Значение = ТекСв.Значение;
							КонецЕсли;
						КонецЦикла;
						
						СтруктураВозврата.Вставить("ЮридическийАдресЗначенияПолей", ЮридическийАдресЗначенияПолей);
					КонецЕсли
				КонецЕсли;
				
				СвойствоРуководитель = ЭД.Свойства().Получить("Руководитель");
				Если СвойствоРуководитель <> Неопределено Тогда
					ЗнРуководитель = ЭД.Получить(СвойствоРуководитель);
					Если ЗнРуководитель <> Неопределено Тогда
						СвойствоФизЛицо = ЗнРуководитель.Свойства().Получить("ФизЛицо");
						Если СвойствоФизЛицо <> Неопределено Тогда
							ФизЛицо = ЗнРуководитель.Получить(СвойствоФизЛицо);
							Если ФизЛицо <> Неопределено Тогда
								СтруктураВозврата.Вставить("УказатьДанныеКонтактногоЛица", Истина);
								ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФизЛицо.ПолноеНаименование);
								СтруктураВозврата.Вставить("ФамилияКЛ",  ФИО.Фамилия);
								СтруктураВозврата.Вставить("ИмяКЛ",      ФИО.Имя);
								СтруктураВозврата.Вставить("ОтчествоКЛ", ФИО.Отчество);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				СтруктураВозврата.Вставить("ВидКомпании", 2);
				
				СвойствоФамилия = ЭД.Свойства().Получить("Фамилия");
				Если СвойствоФамилия <> Неопределено Тогда
					СтруктураВозврата.Вставить("ФамилияПартнера", ЭД.Получить(СвойствоФамилия));
				КонецЕсли;
				
				СвойствоИмя = ЭД.Свойства().Получить("Имя");
				Если СвойствоИмя <> Неопределено Тогда
					СтруктураВозврата.Вставить("ИмяПартнера", ЭД.Получить(СвойствоИмя));
				КонецЕсли;
				
				СвойствоОтчество = ЭД.Свойства().Получить("Отчество");
				Если СвойствоОтчество <> Неопределено Тогда
					СтруктураВозврата.Вставить("ОтчествоПартнера", ЭД.Получить(СвойствоОтчество));
				КонецЕсли;
				
				СвойствоИНН = ЭД.Свойства().Получить("ИНН");
				Если СвойствоИНН <> Неопределено Тогда
					СтруктураВозврата.Вставить("ИНН", ЭД.Получить(СвойствоИНН));
				КонецЕсли;
				
				СвойствоОКПО = ЭД.Свойства().Получить("ОКПО");
				Если СвойствоОКПО <> Неопределено Тогда
					КодПоОКПО = ЭД.Получить(СвойствоОКПО);
					СтруктураВозврата.Вставить("КодПоОКПО", ЭД.Получить(СвойствоОКПО));
				КонецЕсли;
				
				СвойствоОФНаим = ЭД.Свойства().Получить("ПолноеНаименование");
				Если СвойствоОФНаим <> Неопределено Тогда
					СтруктураВозврата.Вставить("ПолноеНаименование", ЭД.Получить(СвойствоОфНаим));
					СтруктураВозврата.Вставить("ПолноеЮридическоеНаименование", ЭД.Получить(СвойствоОфНаим));
				КонецЕсли;
				
				СвойствоЮрАдрес = ЭД.Свойства().Получить("АдресРегистрации");
				Если СвойствоЮрАдрес <> Неопределено Тогда
					
					ЗнЮрАдрес = ЭД.Получить(СвойствоЮрАдрес);
					Если ЗнЮрАдрес <> Неопределено Тогда
						
						СтруктураВозврата.Вставить("ЮридическийАдрес", ЗнЮрАдрес.Представление);
						ЮридическийАдресЗначенияПолей = Новый СписокЗначений;
						Для Каждого ТекСв Из ЗнЮрАдрес.АдресноеПоле Цикл
							Если ТекСв.Тип = "Почтовый индекс" Тогда
								ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
								ЮрАдресЗначения.Представление = "Индекс";
								ЮрАдресЗначения.Значение = ТекСв.Значение;
							ИначеЕсли ТекСв.Тип = "Населенный пункт" Тогда
								ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
								ЮрАдресЗначения.Представление = "НаселенныйПункт";
								ЮрАдресЗначения.Значение = ТекСв.Значение;
							ИначеЕсли Найти(ДопустимыеТипы, ТекСв.Тип)>0 ТОгда
								ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
								ЮрАдресЗначения.Представление = ТекСв.Тип;
								ЮрАдресЗначения.Значение = ТекСв.Значение;
							КонецЕсли;
						КонецЦикла;
						
						СтруктураВозврата.Вставить("ЮридическийАдресЗначенияПолей", ЮридическийАдресЗначенияПолей);
					КонецЕсли
				КонецЕсли;
			КонецЕсли;
		Иначе
			РезультатРазбора = Ложь;
			Возврат;
		КонецЕсли;
		
		СвойствоЭД = ЭД.Свойства().Получить("Наименование");
		Если СвойствоЭД <> Неопределено Тогда
			СтруктураВозврата.Вставить("Название", ЭД.Получить(СвойствоЭД));
		КонецЕсли;
		
		СвойствоЭД = ЭД.Свойства().Получить("Адрес");
		Если СвойствоЭД <> Неопределено Тогда
			ЗнДанных = ЭД.Получить(СвойствоЭД);
			Если ЗнДанных <> Неопределено Тогда
				
				СтруктураВозврата.Вставить("ФактическийАдрес", ЗнДанных.Представление);
				ФактическийАдресЗначенияПолей = Новый СписокЗначений;
				Для Каждого ТекСв Из ЗнДанных.АдресноеПоле Цикл
					Если ТекСв.Тип = "Почтовый индекс" Тогда
						ФактАдресЗначения = ФактическийАдресЗначенияПолей.Добавить();
						ФактАдресЗначения.Представление = "Индекс";
						ФактАдресЗначения.Значение = ТекСв.Значение;
					ИначеЕсли ТекСв.Тип = "Населенный пункт" Тогда
						ФактАдресЗначения = ФактическийАдресЗначенияПолей.Добавить();
						ФактАдресЗначения.Представление = "НаселенныйПункт";
						ФактАдресЗначения.Значение = ТекСв.Значение;
					ИначеЕсли Найти(ДопустимыеТипы, ТекСв.Тип) > 0 ТОгда
						ФактАдресЗначения = ФактическийАдресЗначенияПолей.Добавить();
						ФактАдресЗначения.Значение = ТекСв.Значение;
						ФактАдресЗначения.Представление = ТекСв.Тип;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураВозврата.Вставить("ФактическийАдресЗначенияПолей", ФактическийАдресЗначенияПолей);
			КонецЕсли;
		КонецЕсли;
	Исключение
		
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Разбор файла с реквизитами контрагента'"), ТекстОшибки, ТекстСообщения);
		
		РезультатРазбора = Ложь;
		Возврат;
		
	КонецПопытки;
	
	РезультатРазбора = Истина;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект. Если не задан альтернативный алгоритм получения значений реквизитов (процедура пуста),
// то используется функция БСП: ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов).
// 
// Параметры:
//  Ссылка - Ссылка - произвольная ссылка.
//  ИменаРеквизитов - Строка, Структура - если Строка, то имена реквизитов, 
//               перечисленные через запятую, в формате требований к свойствам структуры.
//               Например, "Код, Наименование, Родитель".
//               Если Структура, то в качестве ключа передается псевдоним поля для
//               возвращаемой структуры с результатом, а в качестве значения (опционально) 
//               - фактическое имя поля в таблице. 
//               Если значение не определено, то имя поля берется из ключа.
//  СтруктураДанных - Структура - содержит список свойств, как список имен в строке
//                 ИменаРеквизитов, со значениям реквизитов, прочитанных
//                 из информационной базы.
// 
Процедура ПолучитьЗначенияРеквизитов(Ссылка, ИменаРеквизитов, СтруктураДанных) Экспорт
	
	
	
КонецПроцедуры

// Определяет Счета-Фактуры по документам основаниям.
// 
// Параметры:
//  МассивОснований - Массив - массив ссылок на документы основания.
//  МассивСФ - Массив - массив для заполнения ссылками на счета-фактуры.
//  НаправлениеЭД - ПеречислениеСсылка.НаправленияЭД - направление электронного документа.
// 
Процедура ЗаполнитьСчетаФактурыПоДокументамОснования(МассивОснований, МассивСФ, НаправлениеЭД) Экспорт
	
	//++ НЕ ГОСИС
	Если НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ИмяДокумента = "СчетФактураПолученный";
	Иначе
		ИмяДокумента = "СчетФактураВыданный";
	КонецЕсли;
	
	Для Каждого Основание Из МассивОснований Цикл
		РезультатАнализа = Документы[ИмяДокумента].СчетаФактурыПоОснованию(Основание);
		Для Каждого НайденныйСФ Из РезультатАнализа Цикл
			МассивСФ.Добавить(НайденныйСФ.Ссылка);
		КонецЦикла;
	КонецЦикла
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Определение имен связей параметров выбора для полей форм библиотеки, в которые выбирается договор контрагента.
//
// Параметры:
//  ИмяСвязиПоОрганизации  - Строка - Имя связи параметров выбора для связанного поля "Организация",
//                                    если значение не будет установлено, то связь параметров выбора не будет установлена.
//  ИмяСвязиПоКонтрагенту  - Строка - Имя связи параметров выбора для связанного поля "Контрагент",
//                                    если значение не будет установлено, то связь параметров выбора не будет установлена.
//
Процедура УстановитьИменаСвязейПараметровВыбораДоговорКонтрагента(ИмяСвязиПоОрганизации, ИмяСвязиПоКонтрагенту) Экспорт
	
	//++ НЕ ГОСИС
	ИмяСвязиПоОрганизации = "Отбор.Организация";
	ИмяСвязиПоКонтрагенту = "Отбор.Контрагент";
	//-- НЕ ГОСИС
	
КонецПроцедуры
	
////////////////////////////////////////////////////////////////////////////////
// Механизм однократной сделки.

// Выполняет заполнение списка документов по виду электронного документа.
//
// Параметры:
//  ВидЭД          - ПеречислениеСсылка.ВидыЭД - вид электронного документа.
//  СписокВозврата - СписокЗначений            - список ссылок на документы информационной базы.
//
Процедура СписокТиповДокументовПоВидуЭД(ВидЭД, СписокВозврата) Экспорт
	
	//++ НЕ ГОСИС
	Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12 
		Или ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец 
		Или ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав 
		Или ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
		
		СписокВозврата.Добавить(
			Документы.ПриобретениеТоваровУслуг.ПустаяСсылка(), 
			Метаданные.Документы.ПриобретениеТоваровУслуг.Представление());
			
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетФактура ИЛИ ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
		Или ВидЭД = Перечисления.ВидыЭД.УПД ИЛИ ВидЭД = Перечисления.ВидыЭД.УКД Тогда
		
		СписокВозврата.Добавить(Документы.СчетФактураПолученный.ПустаяСсылка(),
			Метаданные.Документы.СчетФактураПолученный.Представление());
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот 
		Или ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		
		СписокВозврата.Добавить(
			Документы.ПриобретениеУслугПрочихАктивов.ПустаяСсылка(), 
			Метаданные.Документы.ПриобретениеУслугПрочихАктивов.Представление());
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
		
		СписокВозврата.Добавить(
			Документы.ОтчетКомиссионера.ПустаяСсылка(), 
			Метаданные.Документы.ОтчетКомиссионера.Представление());
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
		
		СписокВозврата.Добавить(
			Документы.ОтчетКомиссионераОСписании.ПустаяСсылка(), 
			Метаданные.Документы.ОтчетКомиссионераОСписании.Представление());
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
		
		СписокВозврата.Добавить(
			Документы.РегистрацияЦенНоменклатурыПоставщика.ПустаяСсылка(), 
			 Метаданные.Документы.РегистрацияЦенНоменклатурыПоставщика.Представление());
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		
		СписокВозврата.Добавить(
			Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка(), 
			Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств.Представление());
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
		
		СписокВозврата.Добавить(
			Документы.ЗаказКлиента.ПустаяСсылка(),
			Метаданные.Документы.ЗаказКлиента.Представление());
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		
		СписокВозврата.Добавить(
			Документы.ЗаказПоставщику.ПустаяСсылка(),
			Метаданные.Документы.ЗаказПоставщику.Представление());
			
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктОРасхождениях Тогда
		
		СписокВозврата.Добавить(
			Документы.АктОРасхожденияхПослеОтгрузки.ПустаяСсылка(),
			Метаданные.Документы.АктОРасхожденияхПослеОтгрузки.Представление());
			
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Задает имя файла "по умолчанию", с которым будет предложено пользователю сохранить
// ЭД при выгрузке по сценарию "Однократной сделки".
//
// Параметры:
//  ВладелецЭД - ДокументСсылка - ссылка на документ ИБ, на основании которого формируется и выгружается ЭД.
//  НаименованиеФайла - Строка - имя файла.
//
Процедура ЗадатьИмяСохраняемогоФайлаПриБыстромОбмене(ВладелецЭД, НаименованиеФайла) Экспорт
	
КонецПроцедуры

// Получает реквизиты элемента справочника "Организации", для выгрузки в xml-файл.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - элемент справочника организации;
//  СтруктураВозврата - структура - перечень параметров организации.
//
Процедура ПолучитьРеквизитыОрганизацииДляВыгрузкиВФайл(Организация, СтруктураВозврата) Экспорт
	
	//++ НЕ ГОСИС
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, 
		"Наименование, НаименованиеПолное, ИНН, КПП, КодПоОКПО, ЮрФизЛицо, СвидетельствоСерияНомер, СвидетельствоДатаВыдачи");
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, РеквизитыОрганизации);
	СтруктураВозврата.ОКПО = РеквизитыОрганизации.КодПоОКПО;
	
	ЮрАдресОрганизации = ЭлектронноеВзаимодействиеУТ.ПолучитьАдресИзКонтактнойИнформации(Организация, "Юр");
	СтруктураВозврата.ЮридическийАдрес     = ЮрАдресОрганизации.Представление;
	СтруктураВозврата.ЗначенияПолейЮрАдрес = ЮрАдресОрганизации.ЗначенияПолей;
	
	ФактАдресОрганизации = ЭлектронноеВзаимодействиеУТ.ПолучитьАдресИзКонтактнойИнформации(Организация, "Факт");
	СтруктураВозврата.ФактическийАдрес       = ФактАдресОрганизации.Представление;
	СтруктураВозврата.ЗначенияПолейФактАдрес = ФактАдресОрганизации.ЗначенияПолей;
	
	СтруктураВозврата.Телефон = ЭлектронноеВзаимодействиеУТ.ПолучитьТелефонИзКонтактнойИнформации(Организация);
	
	Если СтруктураВозврата.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		СтруктураОтветственных = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Организация);
		СтруктураВозврата.Руководитель          = СтруктураОтветственных.Руководитель;
		СтруктураВозврата.ДолжностьРуководителя = СтруктураОтветственных.РуководительДолжность;
	Иначе
		СтруктураВозврата.СвидетельствоНомер = РеквизитыОрганизации.СвидетельствоСерияНомер;
		СтруктураВозврата.СвидетельствоДата  = РеквизитыОрганизации.СвидетельствоДатаВыдачи;
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Механизм выгрузки электронных документов в файлы для отправки в ФНС через сервис 1С-Отчетность.

// Метод заполняет соответствие выгружаемым документам дату и номер основания (договора).
//
// Параметры:
//  МассивСсылок - Массив - массив ссылок на документы ИБ (в качестве возможных значений следует принимать те типы 
//                          документов, на основании которых в данном прикладном решении формируется электронный
//                          документ вида «Акт приемки-сдачи работ (услуг).
//  ВозвращаемоеСоответствие - Соответствие - в случае, если требуемые реквизиты у договора не заполнены
//                             или при невозможности получения данных реквизитов, то помещать пустые 
//                             значения указанных типов.
//                             Соответствие со следующими свойствами:
//                             * ключ соответствия - ссылка на выгружаемый документ ИБ, взятая из входящего параметра;
//                             * значение соответствия - Структура:
//                               ** НомерДоговора - Строка;
//                               ** ДатаДоговора - Дата.
//
Процедура ПолучитьНомерДатаДоговораДокументов(МассивСсылок, ВозвращаемоеСоответствие) Экспорт
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Механизм прямого обмена между организациями.

// Переопределяет разрешение использовать механизм прямого обмена между организациями.
//
// Параметры:
//  Отказ - Булево - Истина, если использование обмена между организациями запрещено;
//    Ложь - в противном случае;
//    Значение по умолчанию - Ложь;
//
// Пример:
//	Если <Выражение> Тогда
//		Отказ = Истина;
//	КонецЕсли;
//
Процедура ИспользоватьОбменЭДМеждуОрганизациями(Отказ) Экспорт
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ПередачаТоваровМеждуОрганизациями.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - данные для формирования электронного документа.
//  ДеревоЭД - ДеревоЗначений - дерево данных для заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоПередачеТоваровМеждуОрганизациями(СсылкаНаОбъект, СтруктураЭД, ДеревоЭД) Экспорт
	
	//++ НЕ ГОСИС
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.УпаковкаКод,
	|	ВложенныйЗапрос.УпаковкаНаименование,
	|	ВложенныйЗапрос.Коэффициент,
	|	ВложенныйЗапрос.СтавкаНДС,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.КоличествоМест,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.Артикул,
	|	ВложенныйЗапрос.СуммаСНДС,
	|	ВложенныйЗапрос.Номенклатура.Наименование КАК Наименование,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	ВложенныйЗапрос.Упаковка,
	|	ВложенныйЗапрос.Ид КАК Ид
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТовары.Ссылка КАК Ссылка,
	|		ТаблицаТовары.Номенклатура КАК Номенклатура,
	|		ТаблицаТовары.Характеристика КАК Характеристика,
	|		&ТекстЗапросаКодЕдиницыИзмерения КАК УпаковкаКод,
	|		&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК УпаковкаНаименование,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|		КОНЕЦ КАК Коэффициент,
	|		ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|		ТаблицаТовары.Цена КАК Цена,
	|		ТаблицаТовары.КоличествоУпаковок КАК Количество,
	|		ТаблицаТовары.КоличествоУпаковок КАК КоличествоМест,
	|		ТаблицаТовары.Сумма КАК Сумма,
	|		ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|		ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|		ТаблицаТовары.Номенклатура.Артикул КАК Артикул,
	|		ТаблицаТовары.СуммаСНДС КАК СуммаСНДС,
	|		ТаблицаТовары.Упаковка КАК Упаковка,
	|		ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид
	|	ИЗ
	|		Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|		И ТаблицаТовары.Ссылка.Проведен) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) КАК Партнер,
	|	ДанныеДокумента.ОрганизацияПолучатель КАК Контрагент,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.ОрганизацияПолучатель
	|		ИНАЧЕ ДанныеДокумента.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Организация
	|		ИНАЧЕ ДанныеДокумента.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ДанныеДокумента.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
	|	ДанныеДокумента.БанковскийСчетОрганизацииПолучателя КАК БанковскийСчетКонтрагента,
	|	ДанныеДокумента.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
	|	ДанныеДокумента.БанковскийСчетГрузополучателя КАК БанковскийСчетГрузополучателя,
	|	ДанныеДокумента.АдресДоставки КАК АдресДоставки,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
	|	ДанныеДокумента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПередачаНаКомиссию,
	|	ДанныеДокумента.СуммаДокумента,
	|	ДанныеДокумента.НалогообложениеНДС КАК НалогообложениеНДС
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И НЕ ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|	И ДанныеДокумента.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.НомерВходящегоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента,
	|	ДанныеДокумента.Партнер,
	|	ДанныеДокумента.ОрганизацияПолучатель,
	|	ДанныеДокумента.Контрагент,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.ОрганизацияПолучатель
	|		ИНАЧЕ ДанныеДокумента.Грузополучатель
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Контрагент
	|		ИНАЧЕ ДанныеДокумента.Грузоотправитель
	|	КОНЕЦ,
	|	ДанныеДокумента.БанковскийСчетКонтрагента,
	|	ДанныеДокумента.БанковскийСчетОрганизацииПолучателя,
	|	ДанныеДокумента.БанковскийСчетГрузоотправителя,
	|	ДанныеДокумента.БанковскийСчетГрузополучателя,
	|	ДанныеДокумента.АдресДоставки,
	|	ДанныеДокумента.Валюта,
	|	ДанныеДокумента.ИдентификаторПлатежа,
	|	ДанныеДокумента.ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ДанныеДокумента.СуммаДокумента,
	|	ДанныеДокумента.НалогообложениеНДС
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|	И ДанныеДокумента.ОрганизацияПолучатель <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	И ДанныеДокумента.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие),
	|	ДанныеДокумента.Контрагент,
	|	ДанныеДокумента.Организация,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Контрагент
	|		ИНАЧЕ ДанныеДокумента.Грузополучатель
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Организация
	|		ИНАЧЕ ДанныеДокумента.Грузоотправитель
	|	КОНЕЦ,
	|	ДанныеДокумента.БанковскийСчетОрганизации,
	|	ДанныеДокумента.БанковскийСчетОрганизацииПолучателя,
	|	ДанныеДокумента.БанковскийСчетГрузоотправителя,
	|	ДанныеДокумента.БанковскийСчетГрузополучателя,
	|	ДанныеДокумента.АдресДоставки,
	|	ДанныеДокумента.Валюта,
	|	ДанныеДокумента.ИдентификаторПлатежа,
	|	ДанныеДокумента.ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ДанныеДокумента.СуммаДокумента,
	|	ДанныеДокумента.НалогообложениеНДС
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|	И ДанныеДокумента.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	И ДанныеДокумента.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ТаблицаТовары.Упаковка",
			"ТаблицаТовары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"ТаблицаТовары.Упаковка",
			"ТаблицаТовары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"ТаблицаТовары.Упаковка",
			"ТаблицаТовары.Номенклатура"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТоваров = РезультатЗапроса[0].Выгрузить();
	ЭлектронноеВзаимодействиеУТ.ОбработатьТаблицуТоваров(ТаблицаТоваров);

	РеквизитыШапки = РезультатЗапроса[1].Выбрать();
	РеквизитыШапки.Следующий();
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(
		ТаблицаТоваров, "Наименование",,, НСтр("ru = 'Не указано наименование товара в табличной части'"));
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(
		ТаблицаТоваров, "БазоваяЕдиницаКод",,, НСтр("ru = 'Не заполнен код единицы измерения в справочнике ""Упаковки и единицы измерения"".'"));
		
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоЭД, ТаблицаТоваров, "Товары");
		
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоЭД, "Сумма",               РеквизитыШапки.СуммаДокумента);	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоЭД, "ЦенаВключаетНДС",     РеквизитыШапки.ЦенаВключаетНДС);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоЭД, "Организация",         РеквизитыШапки.Организация);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоЭД, "Контрагент",          РеквизитыШапки.Контрагент);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоЭД, "Грузоотправитель",    ?(ЗначениеЗаполнено(РеквизитыШапки.Грузоотправитель), 
														  										 РеквизитыШапки.Грузоотправитель, СтруктураЭД.Организация));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоЭД, "Грузополучатель",     ?(ЗначениеЗаполнено(РеквизитыШапки.Грузополучатель),
														  										 РеквизитыШапки.Грузополучатель, СтруктураЭД.Контрагент));
	                                                      
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ВозвратТоваровМеждуОрганизациями.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоЭД - ДеревоЗначений - дерево данных для заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоВозвратуТоваровМеждуОрганизациями(СсылкаНаОбъект, СтруктураЭД, ДеревоЭД) Экспорт
	
	//++ НЕ ГОСИС
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.УпаковкаКод,
	|	ВложенныйЗапрос.УпаковкаНаименование,
	|	ВложенныйЗапрос.Коэффициент,
	|	ВложенныйЗапрос.СтавкаНДС,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.КоличествоМест,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.Артикул,
	|	ВложенныйЗапрос.СуммаСНДС,
	|	ВложенныйЗапрос.Номенклатура.Наименование КАК Наименование,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	ВложенныйЗапрос.Ид КАК Ид,
	|	ВложенныйЗапрос.Упаковка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТовары.Ссылка КАК Ссылка,
	|		ТаблицаТовары.Номенклатура КАК Номенклатура,
	|		ТаблицаТовары.Характеристика КАК Характеристика,
	|		ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|		&ТекстЗапросаКодЕдиницыИзмерения КАК УпаковкаКод,
	|		&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК УпаковкаНаименование,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|		КОНЕЦ КАК Коэффициент,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.КоличествоУпаковок = 0
	|				ТОГДА ТаблицаТовары.Цена
	|			ИНАЧЕ ТаблицаТовары.Сумма / ТаблицаТовары.КоличествоУпаковок
	|		КОНЕЦ КАК Цена,
	|		ТаблицаТовары.КоличествоУпаковок КАК Количество,
	|		ТаблицаТовары.КоличествоУпаковок КАК КоличествоМест,
	|		ТаблицаТовары.Сумма КАК Сумма,
	|		ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|		ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|		ТаблицаТовары.Номенклатура.Артикул КАК Артикул,
	|		ТаблицаТовары.СуммаСНДС КАК СуммаСНДС,
	|		ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
	|		ТаблицаТовары.Упаковка КАК Упаковка
	|	ИЗ
	|		Документ.ВозвратТоваровМеждуОрганизациями.Товары КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|		И ТаблицаТовары.Ссылка.Проведен) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) КАК Партнер,
	|	ДанныеДокумента.ОрганизацияПолучатель КАК Контрагент,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.ОрганизацияПолучатель
	|		ИНАЧЕ ДанныеДокумента.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Организация
	|		ИНАЧЕ ДанныеДокумента.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ДанныеДокумента.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
	|	ДанныеДокумента.БанковскийСчетОрганизацииПолучателя КАК БанковскийСчетКонтрагента,
	|	ДанныеДокумента.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
	|	ДанныеДокумента.БанковскийСчетГрузополучателя КАК БанковскийСчетГрузополучателя,
	|	ДанныеДокумента.АдресДоставки КАК АдресДоставки,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПередачаНаКомиссию,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ДанныеДокумента.НалогообложениеНДС КАК НалогообложениеНДС
	|ИЗ
	|	Документ.ВозвратТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Проведен
	|	И НЕ ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.НомерВходящегоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента,
	|	ДанныеДокумента.Партнер,
	|	ДанныеДокумента.ОрганизацияПолучатель,
	|	ДанныеДокумента.Контрагент,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.ОрганизацияПолучатель
	|		ИНАЧЕ ДанныеДокумента.Грузополучатель
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Контрагент
	|		ИНАЧЕ ДанныеДокумента.Грузоотправитель
	|	КОНЕЦ,
	|	ДанныеДокумента.БанковскийСчетКонтрагента,
	|	ДанныеДокумента.БанковскийСчетОрганизацииПолучателя,
	|	ДанныеДокумента.БанковскийСчетГрузоотправителя,
	|	ДанныеДокумента.БанковскийСчетГрузополучателя,
	|	ДанныеДокумента.АдресДоставки,
	|	ДанныеДокумента.Валюта,
	|	ДанныеДокумента.ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ДанныеДокумента.СуммаДокумента,
	|	ДанныеДокумента.НалогообложениеНДС
	|ИЗ
	|	Документ.ВозвратТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Проведен
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|	И ДанныеДокумента.ОрганизацияПолучатель <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Партнер,
	|	ДанныеДокумента.Контрагент,
	|	ДанныеДокумента.Организация,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Контрагент
	|		ИНАЧЕ ДанныеДокумента.Грузополучатель
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Организация
	|		ИНАЧЕ ДанныеДокумента.Грузоотправитель
	|	КОНЕЦ,
	|	ДанныеДокумента.БанковскийСчетОрганизации,
	|	ДанныеДокумента.БанковскийСчетКонтрагента,
	|	ДанныеДокумента.БанковскийСчетГрузоотправителя,
	|	ДанныеДокумента.БанковскийСчетГрузополучателя,
	|	ДанныеДокумента.АдресДоставки,
	|	ДанныеДокумента.Валюта,
	|	ДанныеДокумента.ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ДанныеДокумента.СуммаДокумента,
	|	ДанныеДокумента.НалогообложениеНДС
	|ИЗ
	|	Документ.ВозвратТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Проведен
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|	И ДанныеДокумента.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ТаблицаТовары.Упаковка",
			"ТаблицаТовары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"ТаблицаТовары.Упаковка",
			"ТаблицаТовары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"ТаблицаТовары.Упаковка",
			"ТаблицаТовары.Номенклатура"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТоваров = РезультатЗапроса[0].Выгрузить();
	РеквизитыШапки = РезультатЗапроса[1].Выбрать();
	РеквизитыШапки.Следующий();
	
	ЭлектронноеВзаимодействиеУТ.ОбработатьТаблицуТоваров(ТаблицаТоваров);
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(
		ТаблицаТоваров, "Наименование",,, НСтр("ru = 'Не указано наименование товара в табличной части'"));
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(
		ТаблицаТоваров, "БазоваяЕдиницаКод",,, НСтр("ru = 'Не заполнен код единицы измерения в справочнике ""Упаковки и единицы измерения"".'"));
		
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоЭД, ТаблицаТоваров, "Товары");
		
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоЭД, "Сумма",               РеквизитыШапки.СуммаДокумента);	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоЭД, "ЦенаВключаетНДС",     РеквизитыШапки.ЦенаВключаетНДС);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоЭД, "Организация",         РеквизитыШапки.Организация);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоЭД, "Контрагент",          РеквизитыШапки.Контрагент);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоЭД, "Грузоотправитель",    ?(ЗначениеЗаполнено(РеквизитыШапки.Грузоотправитель), 
														  										 РеквизитыШапки.Грузоотправитель, СтруктураЭД.Организация));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоЭД, "Грузополучатель",     ?(ЗначениеЗаполнено(РеквизитыШапки.Грузополучатель),
														  										 РеквизитыШапки.Грузополучатель, СтруктураЭД.Контрагент));
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Заполнение состояния ЭДО.
//
// Параметры:
//  Форма - Форма - текущая форма.
//
Процедура ЗаполнитьСостояниеЭДО(Форма) Экспорт
	
	
	
КонецПроцедуры

// Возвращает список имен документов доступных для создания при загрузке электронного документа.
//
// Параметры:
//  ВидЭД			 - Перечисление.ВидыЭД - вид электронного документа
//  СписокСпособовОбработки - Строка - список для добавления операций по отражению электронного документа.
//
Процедура СписокОперацийВидаЭД(ВидЭД,СписокСпособовОбработки) Экспорт 
	
	//++ НЕ ГОСИС
	Если ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		СписокСпособовОбработки.Добавить("ПриобретениеУслугПрочихАктивов", НСтр("ru = 'Приобретение услуг и прочих активов'"), Истина);
		СписокСпособовОбработки.Добавить("ПриобретениеТоваровУслуг", НСтр("ru = 'Приобретение товаров и услуг'"));
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
		СписокСпособовОбработки.Добавить("ПриобретениеТоваровУслуг", НСтр("ru = 'Приобретение товаров и услуг'"), Истина);
		СписокСпособовОбработки.Добавить("ВозвратТоваровОтКлиента", НСтр("ru = 'Возврат товаров от клиента'"));
		СписокСпособовОбработки.Добавить("КорректировкаПриобретения", НСтр("ru = 'Корректировка поступления'"));
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
		СписокСпособовОбработки.Добавить("КорректировкаПриобретения", НСтр("ru = 'Корректировка поступления'"), Истина);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
		СписокСпособовОбработки.Добавить("ПриобретениеТоваровУслуг", НСтр("ru = 'Акт на передачу прав'"), Истина);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
		СписокСпособовОбработки.Добавить("РегистрацияЦенНоменклатурыПоставщика", НСтр("ru = 'Регистрация цен номенклатуры поставщика'"), Истина);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		СписокСпособовОбработки.Добавить("ЗаказПоставщику", НСтр("ru = 'Заказ поставщику'"), Истина);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями Тогда	
		СписокСпособовОбработки.Добавить("ПередачаТоваровМеждуОрганизациями", НСтр("ru = 'Передача товаров между организациями'"), Истина);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
		СписокСпособовОбработки.Добавить("ЗаказКлиента", НСтр("ru = 'Заказ клиента'"),Истина);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		СписокСпособовОбработки.Добавить("СчетФактураПолученный", НСтр("ru = 'Счет-фактура полученный'"),Истина);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
		СписокСпособовОбработки.Добавить("СчетФактураПолученный", НСтр("ru = 'Счет-фактура полученный'"), Истина);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		СписокСпособовОбработки.Добавить("ЗаявкаНаРасходованиеДенежныхСредств", НСтр("ru = 'Заявка на расходование денежных средств'"), Истина);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
		СписокСпособовОбработки.Добавить("ОтчетКомиссионера", НСтр("ru = 'Отчет комиссионера (агента) о продажах'"), Истина);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
		СписокСпособовОбработки.Добавить("ОтчетКомиссионераОСписании", НСтр("ru = 'Отчет комиссионера о списании'"), Истина);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12 Тогда
		СписокСпособовОбработки.Добавить("ПриобретениеТоваровУслуг", НСтр("ru = 'Приобретение товаров и услуг'"), Истина);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктОРасхождениях Тогда
		СписокСпособовОбработки.Добавить("АктОРасхожденияхПослеОтгрузки", НСтр("ru = 'Акт о расхождениях после реализации'"), Истина);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
		СписокСпособовОбработки.Добавить("НоменклатураПоставщиков", НСтр("ru = 'Номенклатура поставщиков'"), Истина);
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Процедура - переопределяет имя объекта метаданных для способа обработки входящего электронного документа,
//			   по-умолчанию совпадает с именем способа обработки.
//
// Параметры:
//  СпособОбработки - Строка - один из доступных способов обработки входящего документа.
//  ИмяДокумента - Строка - переменная в которую будет помещено имя объекта метаданных, соответствующее переданному способу обработки.
//
Процедура ИмяДокументаПоСпособуОбработки(СпособОбработки, ИмяДокумента) Экспорт 
	
	
	
КонецПроцедуры

// Процедура - Переопределяет заполнение таблицы соответствия видов ЭД и способов обработки по имени профиля,
//			   который используется в форме настройки ЭДО на закладке "Входящие электронные документы".
//
// Параметры:
//  ТаблицаПрофиля	 - ТаблицаЗначений - таблица, содержащая соответствие видов электронных документов и способов обработки
//  Профиль			 - Строка - имя профиля настроек: "Автоматически", "Вручную", "Поставщик", "Покупатель".
//
Процедура ТаблицаПредопределенногоПрофиля(ТаблицаПрофиля,Профиль) Экспорт 
	
КонецПроцедуры 

// Ищет документ владелец электронного документа, который мог быть получен через ЕГАИС.
//
// Параметры:
//  Документ - ДокументСсылка - Ссылка на документ, полученный через ЕГАИС.
//  ИдентификаторДокумента - Строка - Идентификатор документа отправителя.
//
Процедура НайтиРанееПолученныйДокумент(Документ, ИдентификаторДокумента) Экспорт
	
	
	
КонецПроцедуры

// Заполняет соответствие исходящих видов электронных документов и представлений документов информационной базы,
// на основании которых они формируются.
//
// Параметры:
//  СоответствиеВидовЭДДокументамИБ - Соответствие - перечень видов электронных документов.
//    - Соответствие - с свойствами:
//    * Ключ             - Перечисление.ВидыЭД - вид электронного документа.
//    * Значение         - Строка - представление документа информационной базы (хоз. операции).
//
Процедура СоответствиеИсходящихВидовЭДДокументамИБ(СоответствиеВидовЭДДокументамИБ) Экспорт 
	
	//++ НЕ ГОСИС
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ТОРГ12Продавец,         					НСтр("ru = 'Реализация товаров и услуг'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.АктИсполнитель,        					НСтр("ru = 'Акт выполненных работ для клиента'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.АктНаПередачуПрав,     					НСтр("ru = 'Акт на передачу прав'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.СчетФактура,            					НСтр("ru = 'Счет-фактура выданный'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель, НСтр("ru = 'Корректировка реализации'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.КорректировочныйСчетФактура, 				НСтр("ru = 'Счет-фактура выданный (корректировка)'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ОтветНаЗаказ,           					НСтр("ru = 'Заказ клиента'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ЗаказТовара,            					НСтр("ru = 'Заказ поставщику'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ПрайсЛист,              					НСтр("ru = 'Коммерческое предложение клиенту'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.СчетНаОплату,           					НСтр("ru = 'Счет на оплату клиенту'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара, 		НСтр("ru = 'Отчет комитенту о списании'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара, 		НСтр("ru = 'Отчет комитенту о продажах'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.УПД,            							НСтр("ru = 'Акты, накладные, счет-фактуры'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.УКД,            							НСтр("ru = 'Акты, накладные, счет-фактуры (Корректировка)'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.АктОРасхождениях,       					НСтр("ru = 'Акт о расхождениях после поступления'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.КаталогТоваров,         					НСтр("ru = 'Справочник Настройка ЭДО'"));
	//-- НЕ ГОСИС
	
КонецПроцедуры

#Область Права

// Выполняется при проверке прав пользователя на операции чтения электронных документов.
//
// Параметры:
//  ЕстьПраво - Булево - признак наличия права чтения данных. Для изменения. По умолчанию Истина.
//
Процедура ПриПроверкеПраваЧтенияЭлектронныхДокументов(ЕстьПраво) Экспорт
	
КонецПроцедуры

// Выполняется при проверке прав пользователя на операции добавления и изменения электронных документов.
//
// Параметры:
//  ЕстьПраво - Булево - признак наличия права добавления и изменения данных. Для изменения. По умолчанию Истина.
//
Процедура ПриПроверкеПраваОбработкиЭлектронныхДокументов(ЕстьПраво) Экспорт
	
КонецПроцедуры

#КонецОбласти

// Выполняется при получении описания основания электронного документа,
// которое используется для представления данных прикладного объекта в подсистеме.
//
// Параметры:
//  ОснованиеОбъект - ОпределяемыйТип.ОснованияЭлектронныхДокументов - объект или ссылка на основание электронного документа.
//  Описание - Структура - данные, описывающие основание электронного документа:
//   * Вид - Строка - представление вида объекта. По умолчанию синоним объекта метаданных.
//   * Организация - ОпределяемыйТип.Организация - организация основания.
//   * Контрагент - ОпределяемыйТип.КонтрагентБЭД - контрагент основания.
//   * Дата - Дата - дата основания.
//   * Номер - Строка - номер основания.
//   * СуммаДокумента - Число - сумма основания.
//  СтандартнаяОбработка - Булево - признак формирования описания по умолчанию. 
//                                  Если Ложь, то используются данные из параметра Описание. По умолчанию Истина.
//
Процедура ПриПолученииОписанияОснованияЭлектронногоДокумента(ОснованиеОбъект, Описание, СтандартнаяОбработка) Экспорт
	
	//++ НЕ ГОСИС
	ТипОснования = ТипЗнч(ОснованиеОбъект);
	Если ТипОснования = Тип("ДокументОбъект.СчетФактураКомиссионеру") Тогда
		СтандартнаяОбработка = Ложь;
		Описание.Организация = ОснованиеОбъект.Организация;
		Описание.Контрагент  = ОснованиеОбъект.Комиссионер;
		Описание.Дата  = ОснованиеОбъект.Дата;
		Описание.Номер = ОснованиеОбъект.Номер;
		Описание.СуммаДокумента = 0;
	КонецЕсли;
	Если ТипОснования = Тип("ДокументОбъект.СчетФактураКомитента") Тогда
		СтандартнаяОбработка = Ложь;
		Описание.Организация = ОснованиеОбъект.Организация;
		Описание.Контрагент  = ОснованиеОбъект.Комитент;
		Описание.Дата  = ОснованиеОбъект.Дата;
		Описание.Номер = ОснованиеОбъект.Номер;
		Описание.СуммаДокумента = 0;
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

#Область СопоставлениеНоменклатуры

// Определяет владельца номенклатуры, которой пользуется контрагент.
//
// Параметры:
//  Контрагент - ОпределяемыйТип.УчастникЭДО - контрагент, для которого нужно определить владельца номенклатуры.
//  Владелец - ОпределяемыйТип.ВладелецНоменклатурыБЭД - владелец номенклатуры (для изменения). По умолчанию равен параметру Контрагент.
//
Процедура ПриОпределенииВладельцаНоменклатурыКонтрагента(Знач Контрагент, Владелец) Экспорт
	
	//++ НЕ ГОСИС	
	Владелец = Контрагент.Партнер;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Определяет взаимосвязь между частями номенклатуры информационной базы.
// Устанавливает зависимость характеристик и упаковок от номенклатуры.
// Используется при заполнении свойства "СвязиПараметровВыбора" в элементах формы.
//
// Параметры:
//  СтруктураНоменклатуры - Структура - описание структуры номенклатуры информационной базы (для изменения):
//   * ИмяПараметраСвязиХарактеристики - Строка - имя параметра связи выбора характеристики по номенклатуре. По умолчанию "Отбор.Владелец".
//   * ИмяПараметраСвязиУпаковки - Строка - имя параметра связи выбора упаковки по номенклатуре. По умолчанию "Отбор.Владелец".
//
Процедура ПриОпределенииСтруктурыНоменклатурыИнформационнойБазы(СтруктураНоменклатуры) Экспорт
	
	//++ НЕ ГОСИС
	СтруктураНоменклатуры.ИмяПараметраСвязиХарактеристики = "Номенклатура";
	СтруктураНоменклатуры.ИмяПараметраСвязиУпаковки 	  = "Номенклатура";
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Определяет свойства набора номенклатур информационной базы.
// Устанавливает обязательность использования характеристик и упаковок номенклатуры.
//
// Параметры:
//  НаборНоменклатуры - Массив из ОпределяемыйТип.НоменклатураБЭД - ссылки на номенклатуру ИБ, для которой требуется определить свойства.
//  СвойстваНоменклатурИБ - Соответствие - содержит:
//  * Ключ     - ОпределяемыйТип.НоменклатураБЭД - ссылка на номенклатуру ИБ.
//  * Значение - Структура                       - содержит свойства номенклатуры ИБ. См. ОбменСКонтрагентамиКлиентСервер.НовыеСвойстваНоменклатурыИБ.
//
Процедура ПриОпределенииСвойствНоменклатурыИнформационнойБазы(Знач НаборНоменклатуры, СвойстваНоменклатурИБ) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	ВидыНоменклатуры.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики,
		|	Номенклатура.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
		|	Номенклатура.ИспользоватьУпаковки КАК ИспользоватьУпаковки
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ПО Номенклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
		|ГДЕ
		|	Номенклатура.Ссылка В(&НаборНоменклатуры)";
	
	Запрос.УстановитьПараметр("НаборНоменклатуры", НаборНоменклатуры);
	РезультатЗапроса = Запрос.Выполнить();
	
	ФОИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать Тогда
			ИспользоватьХарактеристики = Ложь;
		Иначе
			ВидНоменклатурыИспользоватьХарактеристики = Выборка.ИспользоватьХарактеристики;			
			ИспользоватьХарактеристики = ФОИспользоватьХарактеристикиНоменклатуры И ВидНоменклатурыИспользоватьХарактеристики;			
		КонецЕсли;
		ИспользоватьУпаковки = Выборка.ИспользоватьУпаковки;
		
		СвойстваНоменклатуры = ОбменСКонтрагентамиКлиентСервер.НовыеСвойстваНоменклатурыИБ();
		СвойстваНоменклатуры.Вставить("ИспользоватьХарактеристики"          , ИспользоватьХарактеристики);
		СвойстваНоменклатуры.Вставить("ИспользоватьУпаковки"                , ИспользоватьУпаковки);

		СвойстваНоменклатурИБ.Вставить(Выборка.Номенклатура, СвойстваНоменклатуры);
		
	КонецЦикла;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Заполняет форму номенклатуру по данным контрагента.
//
// Параметры:
//  НоменклатураКонтрагента - Структура - данные контрагента для заполнения формы номенклатуры.
//                                        См. ОбменСКонтрагентамиКлиентСервер.НоваяНоменклатураКонтрагента.
//  Форма - ФормаКлиентскогоПриложения, Форма - форма номенклатуры, которую нужно заполнить.
//
Процедура ПриЗаполненииФормыНоменклатурыПоДаннымКонтрагента(Знач НоменклатураКонтрагента, Форма) Экспорт
	
	//++ НЕ ГОСИС
	Форма.Объект.Наименование = НоменклатураКонтрагента.Наименование;
		
	Если ЗначениеЗаполнено(НоменклатураКонтрагента.Характеристика) Тогда
		
		Форма.Объект.Наименование = Форма.Объект.Наименование 
			+ " (" + НоменклатураКонтрагента.Характеристика + ")";
		
	КонецЕсли;
	
	Форма.Объект.Артикул = НоменклатураКонтрагента.Артикул;
	
	Если ЗначениеЗаполнено(НоменклатураКонтрагента.ЕдиницаИзмерения) Тогда
		Форма.Объект.ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоНаименованию(НоменклатураКонтрагента.ЕдиницаИзмерения, Истина);
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Заполняет форму характеристики по данным контрагента.
//
// Параметры:
//  НоменклатураКонтрагента - Структура - данные контрагента для заполнения формы характеристики.
//                                        См. ОбменСКонтрагентамиКлиентСервер.НоваяНоменклатураКонтрагента.
//  Форма - ФормаКлиентскогоПриложения - форма характеристики, которую нужно заполнить.
//
Процедура ПриЗаполненииФормыХарактеристикиПоДаннымКонтрагента(Знач НоменклатураКонтрагента, Форма) Экспорт
	
	//++ НЕ ГОСИС
	Форма.Объект.Наименование = НоменклатураКонтрагента.Характеристика;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Выполняется при отражении в учете электронного документа, содержащего информацию для сопоставления номенклатуры.
// Позволяет определить необходимость сопоставления номенклатуры для указанного способа обработки электронных документов,
// а также отказаться от отражения в учете, если сопоставление не выполнено.
// Если в электронном документе не передана информация для сопоставления,
// то отражение в учете будет продолжено независимо от настроек.
//
// Параметры:
//  Документ - Структура - данные электронного документа (только чтение):
//   * СпособОбработки - Строка - способ отражения в учете электронного документа. См. СписокОперацийВидаЭД.
//                     - Структура - способ отражения в учете УПД (расширенный):
//                        ** ПервичныйДокумент - Строка - способ отражения в учете первичного документа.
//                        ** СчетФактура - Строка - способ отражения в учете счет-фактуры.
//  Настройки - Структура - настройки сопоставления номенклатуры (для изменения):
//   * ОтражатьТолькоСопоставленные - Булево - признак разрешения отражать в учете только документы с сопоставленной номенклатурой. По умолчанию Истина.
//                                             Если в электронном документе не передана информация для сопоставления,
//                                             то отражение в учете будет продолжено независимо от настроек.
//
Процедура ПриОтраженииВУчетеЭлектронногоДокументаСНоменклатурой(Знач Документ, Настройки) Экспорт
	
	//++ НЕ ГОСИС
	Если Документ.СпособОбработки = "ПриобретениеУслугПрочихАктивов" 
		ИЛИ Документ.СпособОбработки = "СчетФактураПолученный"
		ИЛИ Документ.СпособОбработки = "ЗаявкаНаРасходованиеДенежныхСредств" Тогда
		Настройки.ОтражатьТолькоСопоставленные = Ложь;
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Выполняется при поиске номенклатуры информационной базы по идентификатору.
// Если при формировании электронного документа для сопоставления номенклатуры заполняется идентификатор без использования
// автоматической генерации с помощью библиотеки, то в данном методе необходимо описать алгоритм обратного получения данных
// информационной базы из идентификатора.
//
// Параметры:
//  Идентификатор - Строка - идентификатор, по которому нужно определить номенклатуру ИБ.
//  НоменклатураИБ - Структура - результаты поиска номенклатуры ИБ по идентификатору.
//                               См. ОбменСКонтрагентамиКлиентСервер.НоваяНоменклатураИнформационнойБазы.
Процедура ПриПоискеНоменклатурыПоИдентификатору(Знач Идентификатор, НоменклатураИБ) Экспорт
	
КонецПроцедуры

// Определяет заголовки форм и полей сопоставления номенклатуры,
// которые могут зависеть от прикладного решения и его настроек.
//
// Параметры:
//  Представления - Структура - набор представлений, которые можно переопределить.
//   * ВладелецНоменклатурыПредставлениеОбъекта - Строка - представление поля владельца номенклатуры.
//                                                         По умолчанию берется из определяемого типа ВладелецНоменклатурыБЭД.
//   * НоменклатураПредставлениеОбъекта - Строка - представление поля номенклатуры.
//                                                 По умолчанию берется из определяемого типа НоменклатураБЭД.
//   * ХарактеристикаПредставлениеОбъекта - Строка - представление поля характеристики номенклатуры.
//                                                   По умолчанию берется из определяемого типа ХарактеристикаНоменклатурыБЭД.
//   * УпаковкаПредставлениеОбъекта - Строка - представление поля упаковки номенклатуры.
//                                             По умолчанию берется из определяемого типа УпаковкаНоменклатурыБЭД.
//   * НоменклатураКонтрагентаПредставлениеСписка - Строка - представление списка номенклатуры контрагентов.
//                                                           По умолчанию "Номенклатура контрагентов".
//   * НоменклатураКонтрагентаПредставлениеОбъекта - Строка - представление объекта номенклатуры контрагентов.
//                                                            По умолчанию "Номенклатура контрагента".
//
// Пример:
//  Представления.НоменклатураКонтрагентаПредставлениеСписка = НСтр("ru = 'Номенклатура партнеров'");
//  Представления.НоменклатураКонтрагентаПредставлениеОбъекта = НСтр("ru = 'Номенклатура партнера'");
//  Представления.ВладелецНоменклатурыПредставлениеОбъекта = НСтр("ru = 'Партнер'");
//
Процедура ПриОпределенииПредставленийСопоставленияНоменклатуры(Представления) Экспорт
	
	//++ НЕ ГОСИС
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда
		Представления.НоменклатураКонтрагентаПредставлениеСписка = НСтр("ru = 'Номенклатура партнеров'");
		Представления.НоменклатураКонтрагентаПредставлениеОбъекта = НСтр("ru = 'Номенклатура партнера'");
		Представления.ВладелецНоменклатурыПредставлениеОбъекта = НСтр("ru = 'Партнер'");
	Иначе
		Представления.ВладелецНоменклатурыПредставлениеОбъекта = НСтр("ru = 'Контрагент'");		
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Переопределяет значение наименования номенклатуры или характеристики (если используется), используемое в механизме сопоставления номенклатуры.
//
// Параметры:
//  СсылкаНаОбъект       - ОпределяемыйТип.ДанныеСопоставленияБЭД - ссылка номенклатуры или характеристики.
//  ЗначениеНаименования - Строка                                 - значение наименования номенклатуры или характеристики сопоставления.
//
Процедура ЗначениеНаименованияДанныхСопоставленияНоменклатурыБЭД(Знач СсылкаНаОбъект, ЗначениеНаименования) Экспорт

	//++ НЕ ГОСИС
	ЭлектронноеВзаимодействиеУТ.ЗначениеНаименованияДанныхСопоставленияНоменклатурыБЭД(СсылкаНаОбъект, ЗначениеНаименования)
	//-- НЕ ГОСИС

КонецПроцедуры

// Переопределяет значения наименований номенклатуры или характеристики (если используется), используемое в механизме сопоставления номенклатуры.
//
// Параметры:
//  НаборСсылокНаОбъекты             - Массив из ОпределяемыйТип.ДанныеСопоставленияБЭД - набор ссылок номенклатуры или характеристики.
//  СоответствиеЗначенийНаименований - Соответствие                                     - содержит:
//   * Ключ     - ОпределяемыйТип.ДанныеСопоставленияБЭД - ссылка номенклатуры или характеристики.
//   * Значение - Строка                                 - значение наименования номенклатуры или характеристики.
//
Процедура ЗначенияНаименованийДанныхСопоставленияНоменклатурыБЭД(Знач НаборСсылокНаОбъекты, СоответствиеЗначенийНаименований) Экспорт

	//++ НЕ ГОСИС
	ЭлектронноеВзаимодействиеУТ.ЗначенияНаименованийДанныхСопоставленияНоменклатурыБЭД(НаборСсылокНаОбъекты, СоответствиеЗначенийНаименований)
	//-- НЕ ГОСИС

КонецПроцедуры

// Переопределяет наименование объекта сопоставления номенклатуры БЭД: номенклатуры или характеристики, если используется.
//
// Параметры:
//  СсылкаНаОбъект          - ОпределяемыйТип.ДанныеСопоставленияБЭД - ссылка на номенклатуру или характеристику сопоставления.
//  НаименованиеТипаОбъекта - Строка                                 - содержит наименование типа объекта,
//                                                                     должно передаваться наименование: "Номенклатура" или "Характеристика".
//
Процедура ОпределитьНаименованиеТипаОбъектаСопоставленияНоменклатурыБЭД(Знач СсылкаНаОбъект, НаименованиеТипаОбъекта) Экспорт

	//++ НЕ ГОСИС
	ЭлектронноеВзаимодействиеУТ.ОпределитьНаименованиеТипаОбъектаСопоставленияНоменклатурыБЭД(СсылкаНаОбъект, НаименованиеТипаОбъекта)
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Переопределяет текст запроса поиска сопоставления по натуральным ключам в информационной базе, если специфика базы позволяет.
// В тексте запроса необходимо описать алгоритм поиска номенклатуры по натуральным ключам (штрихкодам, артикулам),
// в результате которого должны быть сформированы временные таблицы с предопределенными полями.
// В тексте запроса требуется вернуть временную таблицу с предопределенными полями.
// Необходимо учитывать права пользователей при получении данных информационной базы.
//
// Передается временная таблица с доступными данными по номенклатуре контрагентов:
//  ТаблицаНатуральныхКлючей - ТаблицаЗначений из см. ОбменСКонтрагентамиСлужебный.НоваяТаблицаНатуральныхКлючей
// Индексируемые поля: штрихкод, артикул.
// При работе с временной таблицей необходимо отбирать штрихкоды и артикулы с заполненной строкой.
//
// Необходимо вернуть временные таблицы и предопределенные поля:
//  ТаблицаСопоставленныхПоШтрихкодам - необходимо найти номенклатуру ИБ, к которой привязан штрихкод номенклатуры контрагента:
//   * ИдентификаторНоменклатуры - Строка                          - хеш номенклатуры контрагента из ТаблицаНатуральныхКлючей.
//   * Штрихкод                  - Строка                          - штрихкод номенклатуры контрагента из ТаблицаНатуральныхКлючей.
//   * ЭтоВнутреннийШтрихкод     - Булево                          - признак внутреннего штрихкода из ТаблицаНатуральныхКлючей.
//   * Номенклатура              - ОпределяемыйТип.НоменклатураБЭД - ссылка сопоставленной номенклатура по штрихкоду номенклатуры контрагента и информационной базой.
//   * ШтрихкодСопоставлен       - Булево                          - признак сопоставленного штрихкода.
//
//  ТаблицаСопоставленныхПоАртикулам - необходимо найти номенклатуру ИБ, к которой привязан артикул номенклатуры контрагента:
//   * Артикул                   - Строка                          - артикул номенклатуры контрагента из ТаблицаНатуральныхКлючей.
//   * ИдентификаторНоменклатуры - Строка                          - хеш номенклатуры контрагента из ТаблицаНатуральныхКлючей.
//   * Номенклатура              - ОпределяемыйТип.НоменклатураБЭД - ссылка сопоставленной номенклатура по артикулу номенклатуры контрагента и информационной базой.
//   * АртикулСопоставлен        - Булево                          - признак сопоставленного артикула.
//
// Таблицы необходимо проиндексировать по полям: ИдентификаторНоменклатуры, Номенклатура.
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса по данным информационной базы.
//
Процедура ИнициализацияТекстаЗапросаПоискаСопоставленияПоНатуральнымКлючам(ТекстЗапроса) Экспорт

	//++ НЕ ГОСИС
	ЭлектронноеВзаимодействиеУТ.ИнициализацияТекстаЗапросаПоискаСопоставленияПоНатуральнымКлючам(ТекстЗапроса)
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Переопределяет текст запроса поиска вариантов сопоставления номенклатуры, характеристики и упаковке/единице измерения
// по штрихкоду, если в специфике базы ведется учет по штрихкодам.
// Если в прикладном решении на один штрихкод могут быть привязаны разные комбинации, необходимо отбирать только те штрихкоды,
// у которых комбинация с единственным вариантом. Другие штрихкоды не используем.
// В тексте запроса требуется вернуть предопределенные поля.
// Необходимо учитывать права пользователей при получении данных информационной базы.
//
// Доступна временная таблица:
//  ТаблицаШтрихкодовКомбинации - содержит данные номенклатуры контрагента. Колонки:
//   * ШтрихкодКомбинации - Строка - штрихкод комбинации: номенклатура, характеристика, упаковка.
//  Индексируемое поле: ШтрихкодКомбинации.
//
// Необходимо вернуть предопределенные поля:
//  ШтрихкодКомбинации - Строка                                        - штрихкод комбинации, по которому найдена единственная комбинация в ИБ.
//  НоменклатураИБ     - ОпределяемыйТип.НоменклатураБЭД               - ссылка номенклатуры ИБ сопоставленной по штрихкоду комбинации.
//  ХарактеристикаИБ   - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД - ссылка характеристики ИБ сопоставленной по штрихкоду комбинации.
//  УпаковкаИБ         - ОпределяемыйТип.УпаковкаНоменклатурыБЭД       - ссылка упаковки ИБ сопоставленной по штрихкоду комбинации.
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса по данным информационной базы.
//
Процедура ТекстЗапросаПоискаВариантовСопоставленияПоШтрихкодамКомбинаций(ТекстЗапроса) Экспорт

	//++ НЕ ГОСИС
	ЭлектронноеВзаимодействиеУТ.ТекстЗапросаПоискаВариантовСопоставленияПоШтрихкодамКомбинаций(ТекстЗапроса)
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Переопределяет текст запроса отбора сопоставленных характеристик по владельцу в информационной базе.
// Необходимо описать алгоритм отбора сопоставленных характеристик из таблицы "ВариантыСопоставленияПоСловарю" и таблицы "ТаблицаНоменклатуры"
// по владельцу (если владельцем характеристики является номенклатура).
// Таблицы необходимо связывать по полю "ИдентификаторХарактеристики" с полем "Идентификатор" и владельцу из поля "СсылкаНаОбъект" с полем "НоменклатураИБ".
// В тексте запроса требуется вернуть временную таблицу с предопределенными полями.
//
// Доступны временные таблицы:
//  ТаблицаНоменклатуры - содержит данные номенклатуры контрагента по сопоставленным номенклатурам ИБ. Колонки:
//   * НоменклатураИБ              - ОпределяемыйТип.НоменклатураБЭД - ссылка сопоставленной номенклатуры ИБ.
//   * ИдентификаторХарактеристики - Строка                          - идентификатор характеристики по данным номенклатуры контрагента.
//  Индексируемые поля: ИдентификаторХарактеристики, НоменклатураИБ.
//
//  ВариантыСопоставленияПоСловарю - содержит сопоставленные характеристики. Колонки для использования:
//   * Идентификатор  - Строка                                        - идентификатор характеристики по данным номенклатуры контрагента.
//   * СсылкаНаОбъект - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД - ссылка сопоставленной характеристики ИБ.
//  Индексируемые поля: Идентификатор, СсылкаНаОбъект.
//
// Временная таблица и предопределенные поля:
// ХарактеристикиПоВладельцу - необходимо отобрать сопоставленные характеристики по владельцу номенклатуры ИБ:
//  * Идентификатор  - Строка                                        - идентификатор характеристики по данным контрагента.
//  * СсылкаНаОбъект - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД - ссылка сопоставленной характеристики ИБ отобранной по владельцу номенклатуры.
//  * НоменклатураИБ - ОпределяемыйТип.НоменклатураБЭД               - ссылка сопоставленной номенклатуры ИБ.
// Таблицы необходимо проиндексировать по полям: Идентификатор, СсылкаНаОбъект.
//
// Пример:
//      "ВЫБРАТЬ РАЗЛИЧНЫЕ
//      |	ВариантыСопоставленияПоСловарю.Идентификатор КАК Идентификатор,
//      |	ВариантыСопоставленияПоСловарю.СсылкаНаОбъект КАК СсылкаНаОбъект,
//      |	ТаблицаНоменклатуры.НоменклатураИБ КАК НоменклатураИБ
//      |ПОМЕСТИТЬ ХарактеристикиПоВладельцу
//      |ИЗ
//      |	ВариантыСопоставленияПоСловарю КАК ВариантыСопоставленияПоСловарю
//      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
//      |		ПО ВариантыСопоставленияПоСловарю.Идентификатор = ТаблицаНоменклатуры.ИдентификаторХарактеристики
//      |			И ВариантыСопоставленияПоСловарю.СсылкаНаОбъект.Владелец = ТаблицаНоменклатуры.НоменклатураИБ
//      |
//      |ИНДЕКСИРОВАТЬ ПО
//      |	Идентификатор,
//      |	СсылкаНаОбъект"
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса по данным информационной базы.
//
Процедура ТекстЗапросаОтбораХарактеристикНоменклатурыБЭДПоВладельцу(ТекстЗапроса) Экспорт

	//++ НЕ ГОСИС
	ЭлектронноеВзаимодействиеУТ.ТекстЗапросаОтбораХарактеристикНоменклатурыБЭДПоВладельцу(ТекстЗапроса)
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Переопределяет текст запроса поиска сопоставления по упаковкам/единицам измерения в информационной базе.
// Необходимо описать поиск упаковок/единиц измерения ИБ по наименованию или коду единицы измерения данных номенклатуры контрагента.
// В тексте запроса требуется вернуть предопределенные поля.
// Необходимо учитывать права пользователей при получении данных из информационной базы.
//
// Рекомендации поиска:
//  Упаковки рекомендуется искать по полному наименованию (если используется) или по наименованию,
//  отобрав упаковки по владельцу (если владельцем упаковки является номенклатура).
//  Единицы измерения по классификатору ОКЕИ рекомендуется искать по коду единицы измерения.
//
// Доступна временная таблица:
//  ТаблицаНоменклатуры - содержит данные номенклатуры контрагента по сопоставленным номенклатурам ИБ. Колонки:
//   * НоменклатураИБ        - ОпределяемыйТип.НоменклатураБЭД - ссылка сопоставленной номенклатуры ИБ. Используется для связи с владельцем упаковки 
//                                                               (если владельцем упаковки является номенклатура).
//   * ЕдиницаИзмеренияКод   - Строка                          - код единицы измерения по данным номенклатуры контрагента.
//                                                               Используется для поиска единицы измерения по классификатору ОКЕИ.
//   * ЕдиницаИзмерения      - Строка                          - наименование единицы измерения по данным номенклатуры контрагента.
//                                                               Используется для поиска упаковки или единицы измерения.
//   * ИдентификаторУпаковки - Строка                          - идентификатор упаковки по данным номенклатуры контрагента.
//                                                               Используется для связи сопоставленных данных.
//  Индексируемые поля: НоменклатураИБ, ЕдиницаИзмерения.
//
// Предопределенные поля:
//  * НоменклатураИБ        - ОпределяемыйТип.НоменклатураБЭД         - ссылка сопоставленной номенклатуры ИБ.
//  * ИдентификаторУпаковки - Строка                                  - идентификатор упаковки по данным номенклатуры контрагента.
//  * УпаковкаИБ            - ОпределяемыйТип.УпаковкаНоменклатурыБЭД - идентификатор номенклатуры по данным номенклатуры контрагента.
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса по данным информационной базы.
//
Процедура ТекстЗапросаПоискаВариантовСопоставленияУпаковкиНоменклатурыБЭД(ТекстЗапроса) Экспорт

	//++ НЕ ГОСИС
	ЭлектронноеВзаимодействиеУТ.ТекстЗапросаПоискаВариантовСопоставленияУпаковкиНоменклатурыБЭД(ТекстЗапроса)
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Переопределяет список слов исключений меньше 3 букв.
//
// Параметры:
//  НаборСловИсключений - Массив из Строка - список слов исключений.
//
Процедура СписокИсключенийСловМеньше3БуквДляСопоставленияБЭД(НаборСловИсключений) Экспорт
	
КонецПроцедуры

// Переопределяет список незначимых слов исключений.
//
// Параметры:
//  НаборСловИсключений - Массив из Строка - список слов исключений.
//
Процедура СписокИсключенийНезначимыхСловДляСопоставленияБЭД(НаборСловИсключений) Экспорт

КонецПроцедуры

// Переопределяет текст запроса проверки строк сопоставления, которым можно заполнить автоматически
// характеристику, проверив ее принадлежность к выбранной номенклатуре в строке сопоставления.
//
// Доступна временная таблица:
//  ТаблицаСопоставления - содержит данные сопоставления номенклатуры контрагента и ИБ. Колонки:
//   * НоменклатураИБ - ОпределяемыйТип.НоменклатураБЭД - ссылка сопоставленной номенклатуры ИБ.
//   * Идентификатор  - Строка                          - идентификатор строки сопоставления по данным номенклатуры контрагента.
//  Индексируемые поля: НоменклатураИБ, Идентификатор.
//
// В параметрах запроса доступен параметр "Характеристика", в котором передается ссылка характеристики.
//
// Предопределенное поле, которое необходимо вернуть:
//  * Идентификатор  - Строка - идентификатор строки сопоставления по данным номенклатуры контрагента.
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса по данным информационной базы.
//
Процедура ТекстЗапросаОтбораСтрокСопоставленияДляЗаполненияХарактеристик(ТекстЗапроса) Экспорт

	//++ НЕ ГОСИС
	ЭлектронноеВзаимодействиеУТ.ТекстЗапросаОтбораСтрокСопоставленияДляЗаполненияХарактеристик(ТекстЗапроса)
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Выполняется при сохранении сопоставления номенклатуры контрагентов и номенклатуры информационной базы.
//
// Параметры:
//  НоменклатураКонтрагента - Структура - данные номенклатуры контрагента. См. ОбменСКонтрагентамиКлиентСервер.НоваяНоменклатураКонтрагента.
//  НоменклатураИБ          - Структура - данные номенклатуры информационной базы. См. ОбменСКонтрагентамиКлиентСервер.НоваяНоменклатураИнформационнойБазы.
//  Отказ                   - Булево    - при выполнении операции произошла ошибка.
//  ТекстОшибки             - Строка    - текст ошибки для вывода пользователю.
//
Процедура ПриСохраненииСопоставленияНоменклатурыКонтрагентов(Знач НоменклатураКонтрагента, Знач НоменклатураИБ, Отказ = Ложь, ТекстОшибки = "") Экспорт
	
КонецПроцедуры

// Возвращает признак является ли владельцем упаковки номенклатура.
// Необходимо переопределять в случае, когда в базе могут использоваться упаковки.
// Требуется проверить упаковку на владельца и определить является ли владельцем номенклатура.
//
// Параметры:
//  Упаковка             - ОпределяемыйТип.УпаковкаНоменклатурыБЭД - ссылка упаковки единицы измерения.
//  ВладелецНоменклатура - Булево                                  - признак того, что владельцем упаковки является номенклатура.
//
Процедура ВладелецУпаковкиЕдиницыИзмеренияНоменклатура(Знач Упаковка, ВладелецНоменклатура) Экспорт
	
	//++ НЕ ГОСИС
	ЭлектронноеВзаимодействиеУТ.ВладелецУпаковкиЕдиницыИзмеренияНоменклатура(Упаковка, ВладелецНоменклатура)
	//-- НЕ ГОСИС
	
КонецПроцедуры

#КонецОбласти

#Область ПрикладныеВидыЭлектронныхДокументов

// Определяет прикладные виды электронных документов.
//
// Параметры:
//  ВидыЭлектронныхДокументов - Массив - прикладные виды актуальных электронных документов.
//
Процедура ПриОпределенииПрикладныхВидовЭлектронныхДокументов(ВидыЭлектронныхДокументов) Экспорт
	
КонецПроцедуры

// Определяет сведения о прикладных форматах электронных документов.
// 
// Параметры:
//  ТаблицаФорматов - ТаблицаЗначений - Таблица сведений о прикладных форматах.
//     * ВидЭлектронногоДокумента    - ОпределяемыйТип.ПрикладныеВидыЭлектронныхДокументов - Ссылка на прикладной вид электронного документа.
//     * ИдентификаторФормата        - Строка - Текстовый идентификатор формата,
//          используется для идентификации формата в программном коде библиотеки.
//     * ПредставлениеФормата        - Строка - Пользовательское представление для вывода пользователю.
//     * Отключен                    - Булево - Если указано "Да", то формат не используется.
//     * ДатаНачалаДействия          - Дата - Дата, начиная с которой формат вступает в силу.
//     * ДатаОкончанияДействия       - Дата - Дата, после которой формат не должен использоваться.
//     * УсловиеВыводаПредупреждения - Строка - Задает условие вывода предупреждения для входящих документов.
//          Возможные значения:
//          ""ДатаФормированияЭлектронногоДокумента"" - предупреждение выводится только в том случае,
//          если электронный документ сформирован вне периода действия формата.
//          Пустая строка - предупреждение выводится в любом случае.
//     * ТекстПредупрежденияДляВходящегоДокумента - Строка - Содержит текст предупреждения,
//          который будет выводиться в форме визуализации входящего документа, сформированного по данному формату.
//          Используется для утративших силу форматов и для других предупреждений.
//          Может содержать в тексте символы ""%"", которые будут заменены на параметры из колонки ""ПараметрыПредупрежденияДляВходящегоДокумента"".
//          Если не задано, предупреждение выводиться не будет. Локализуется.
//
Процедура ПриОпределенииСведенийОПрикладныхФорматах(ТаблицаФорматов) Экспорт
	
КонецПроцедуры

// Определяет настройки регламента электронного документооборота для прикладных видов электронных документов.
//
// Параметры:
//  Настройки - Структура - 
//     * ТребуетсяИзвещениеОПолучении - Булево - По данному признаку, на стороне получателя определяется необходимость отправки извещения о получении.
//     * ТребуетсяОтветнаяПодпись     - Булево - По данному признаку, на стороне получателя определяется, требуется ответное подписание документа.
//     * РедактироватьПодпись         - Булево - Признак редактирования параметра "Подписывать документ" в форме настроек регламента ЭДО.
//     * РедактироватьИзвещение       - Булево - Признак редактирования параметра "Ожидать извещение о получении" в форме настроек регламента ЭДО.
//     * РедактироватьОтветнуюПодпись - Булево - Признак редактирования параметра "Ожидать ответную подпись" в форме настроек регламента ЭДО.
//  ВидЭлектронногоДокумента - ОпределяемыйТип.ПрикладныеВидыЭлектронныхДокументов - Ссылка на прикладной вид электронного документа.
//  ВерсияФормата            - Строка - Текстовый идентификатор формата соответствующего прикладного вида электронного документа.
//  СтандартнаяОбработка     - Булево - Признак использования настроек регламента по умолчанию.
//          Если Ложь, то используются данные из параметра Настройки. По умолчанию Истина.
//
Процедура ПриОпределенииНастроекРегламентаЭДО(Настройки, ВидЭлектронногоДокумента, ВерсияФормата, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Определяет соответствие списка учетных документов прикладному виду электронного документа.
//
// Параметры:
//  ВидЭлектронногоДокумента - ОпределяемыйТип.ПрикладныеВидыЭлектронныхДокументов - Ссылка на прикладной вид электронного документа.
//  ТипыУчетныхДокументов    - СписокЗначений - Список пустых ссылок на документы информационной базы.
//
Процедура ПриОпределенииТиповУчетныхДокументовПоПрикладномуВидуЭлектронногоДокумента(ВидЭлектронногоДокумента, ТипыУчетныхДокументов) Экспорт
	
КонецПроцедуры

// Определяет соответствие исходящих видов электронных документов и представлений документов информационной базы,
// на основании которых они формируются.
//
// Параметры:
//  СоответствиеВидовДокументам - Соответствие - перечень видов электронных документов.
//    * Ключ     - ОпределяемыйТип.ПрикладныеВидыЭлектронныхДокументов - Ссылка на прикладной вид электронного документа.
//    * Значение - Строка - представление документа информационной базы (хоз. операции).
//
Процедура ПриОпределенииСоответствияИсходящихПрикладныхВидовДокументамУчета(СоответствиеВидовДокументам) Экспорт 
	
КонецПроцедуры

// Определяет список имен документов доступных для создания при загрузке электронного документа.
//
// Параметры:
//  ВидЭлектронногоДокумента - ОпределяемыйТип.ПрикладныеВидыЭлектронныхДокументов - Ссылка на прикладной вид электронного документа.
//  СпособыОбработки - СписокЗначений - Список операций по отражению электронного документа в учете.
//
Процедура ПриОпределенииСпособовОбработкиПрикладногоВидаЭлектронногоДокумента(ВидЭлектронногоДокумента, СпособыОбработки) Экспорт 
	
КонецПроцедуры

// Определяет список команд ЭДО для основания прикладного электронного документа.
// 
// Параметры:
//  СоставКомандЭДО - Структура - структура состава команд ЭДО.
//    Исходящие - Массив - состав объектов, например "Документ.РеализацияТоваровУслуг".
//    Входящие - Массив - состав объектов.
//    БезПодписи - Массив - состав объектов для обмена без ЭП.
//    Интеркампани - Массив - состав объектов Интеркампани.
//
Процедура ПриОпределенииСоставаКомандЭДООснованияПрикладногоЭлектронногоДокумента(СоставКомандЭДО) Экспорт
	
КонецПроцедуры

// Выполняется при получении описания основания электронного документа,
// которое используется для представления данных прикладного объекта в подсистеме.
//
// Параметры:
//  ОснованиеОбъект - ОпределяемыйТип.ОснованияЭлектронныхДокументов - объект или ссылка на основание электронного документа.
//  Описание - Структура - данные, описывающие основание электронного документа:
//   * Вид - Строка - представление вида объекта. По умолчанию синоним объекта метаданных.
//   * Организация - ОпределяемыйТип.Организация - организация основания.
//   * Контрагент - ОпределяемыйТип.КонтрагентБЭД - контрагент основания.
//   * Дата - Дата - дата основания.
//   * Номер - Строка - номер основания.
//   * СуммаДокумента - Число - сумма основания.
//  СтандартнаяОбработка - Булево - признак формирования описания по умолчанию. 
//        Если Ложь, то используются данные из параметра Описание. По умолчанию Истина.
//
Процедура ПриПолученииОписанияОснованияПрикладногоЭлектронногоДокумента(ОснованиеОбъект, Описание, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Определяет параметры электронного документа по типу владельца.
//
// Параметры:
//  Источник  - Объект, ОпределяемыйТип.ОснованияЭлектронныхДокументов - документ или справочник источника.
//  Параметры - Структура - параметры источника, необходимых для определения
//     * ВидЭлектронногоДокумента - ОпределяемыйТип.ПрикладныеВидыЭлектронныхДокументов - Ссылка на прикладной вид электронного документа.
//     * Входящий                 - Булево - Признак того, что электронный документ является входящим.
//     * Организация              - ОпределяемыйТип.Организация - Организация, указанная в источнике.
//     * Контрагент               - ОпределяемыйТип.КонтрагентБЭД - Контрагент, указанный в источнике.
//     * ДоговорКонтрагента       - ОпределяемыйТип.ДоговорСКонтрагентом - Договор, указанный в источнике.
//     * Партнер                  - ОпределяемыйТип.Партнер - Договор, указанный в источнике.
//           Указывается, если используется дополнительная аналитика к справочнику Контрагенты.
//
Процедура ПриОпределенииПараметровПрикладногоЭлектронногоДокументаПоИсточнику(Источник, Параметры) Экспорт
	
КонецПроцедуры

// Определяет параметры прикладного электронного документа по данным файла.
//
// Параметры:
//  ДанныеФайла     - ДвоичныеДанные - Данные файла прикладного электронного документа.
//  РасширениеФайла - Строка - Расширение файла без точки.
//  Параметры       - Структура - Параметры прикладного электронного документа.
//     * ВидЭлектронногоДокумента - ОпределяемыйТип.ПрикладныеВидыЭлектронныхДокументов - Ссылка на прикладной вид электронного документа.
//     * НаименованиеДокументаОтправителя - Строка - Наименование документа по данным отправителя.
//     * НомерДокументаОтправителя        - Строка - Номер документа по данным отправителя.
//     * ДатаДокументаОтправителя         - Дата  - Дата документа по данным отправителя.
//     * СуммаДокумента                   - Число - Сумма документа по данным отправителя 
//
Процедура ПриОпределенииПараметровФайлаПрикладногоЭлектронногоДокумента(ДанныеФайла, РасширениеФайла, Параметры) Экспорт
	
КонецПроцедуры

// Формирует файл прикладного электронного документа.
//
// Параметры:
//  ПараметрыФормирования - Структура - данные для формирования файла электронного документа.
//     * СсылкаНаОбъект           - ОпределяемыйТип.ОснованияЭлектронныхДокументов - объект, по которому необходимо сформировать электронный документ.
//     * ВидЭлектронногоДокумента - ОпределяемыйТип.ПрикладныеВидыЭлектронныхДокументов - вид формируемого электронного документа.
//  РезультатФормирования - Структура - данные, которые необходимо заполнить по результатам формирования файла электронного документа.
//     * ДанныеФайла                      - ДвоичныеДанные - файл электронного документа.
//     * ИмяФайла                         - Строка - Имя файла без расширения.
//     * Расширение                       - Строка - Расширение файла (без точки вначале).
//     * НаименованиеДокументаОтправителя - Строка - наименование электронного документа в информационной базе.
//     * НомерДокументаОтправителя        - Строка - номер электронного документа в информационной базе.
//     * ДатаДокументаОтправителя         - Строка - дата электронного документа в информационной базе.
//     * СуммаДокумента                   - Число - сумма электронного документа в информационной базе.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ПриФормированииФайлаПрикладногоЭлектронногоДокумента(ПараметрыФормирования, РезультатФормирования, Отказ) Экспорт
	
КонецПроцедуры

// Формирование представления прикладного электронного документа по данным файла.
//
// Параметры:
//  ТабличныйДокумент   - ТабличныйДокумент - Представление прикладного электронного документа.
//  ДанныеФайла         - ДвоичныеДанные - Данные файла прикладного электронного документа.
//  ПараметрыЗаполнения - Структура - Дополнительные параметры для формирования табличного документа.
//     * ВыводитьБанковскиеРеквизиты     - Булево - Значение настройки "Отображать банковские реквизиты",
//            установленной в форме просмотра электронного документа.
//            Если Истина, то в представлении участника ЭДО следует выводить банковские реквизиты.
//     * СкрыватьДопДанные               - Булево - Инвертированное значение настройки "Отображать дополнительную информацию",
//            установленной в форме просмотра электронного документа.
//            Если Ложь, то в табличном документе следует отображать дополнительную информацию, если она есть.
//     * ВыводитьПостраничныйРазделитель - Булево - Признак необходимости выводить постраничный разделитель.
//            Принимает значение Истина при выводе представления электронного документа на печать.
//     * ЭлектронныеПодписи              - Массив - Список установленных подписей.
//        ** ЭлементМассива - Структура - Свойства установленной подписи.
//           *** ОтветнаяПодпись       - Булево - Признак ответной подписи.
//               Производные свойства: см. ЭлектроннаяПодпись.УстановленныеПодписи.
//
Процедура ПриЗаполненииТабличногоДокументаИзФайлаПрикладногоЭлектронногоДокумента(ТабличныйДокумент, ДанныеФайла, ПараметрыЗаполнения) Экспорт
	
КонецПроцедуры

// Определяет необходимость использования механизма сопоставления номенклатуры контрагентов для прикладного вида электронного документа.
//
// Параметры:
//  ВидЭлектронногоДокумента - ОпределяемыйТип.ПрикладныеВидыЭлектронныхДокументов - Ссылка на прикладной вид электронного документа.
//  Использовать             - Булево - Признак использования сопоставления номенклатуры контрагентов. По умолчанию Ложь.
//
Процедура ПриОпределенииИспользованияСопоставленияНоменклатурыКонтрагентов(ВидЭлектронногоДокумента, Использовать) Экспорт
	
	
	
КонецПроцедуры

// Заполнение информации о товаре прикладного электронного документа по данным в файла.
// Выполняется при использовании сопоставления номенклатуры контрагентов.
//
// Параметры:
//  ДанныеФайла       - ДвоичныеДанные - Данные файла прикладного электронного документа.
//  РасширениеФайла   - Строка - Расширение файла без точки.
//  ИнформациюОТоваре - ТаблицаЗначений - Таблица товаров.
//     * ИД                                    - Строка - Идентификатор товара по данным поставщика.
//     * Наименование                          - Строка - Наименование номенклатуры.
//     * НаименованиеХарактеристики            - Строка - Наименование характеристики.
//     * КодТовара                             - Строка - Код товара.
//     * Артикул                               - Строка - Артикул.
//     * БазоваяЕдиницаКод                     - Строка - Код единицы измерения.
//     * БазоваяЕдиницаНаименование            - Строка - Наименование единицы измерения.
//     * БазоваяЕдиницаНаименованиеПолное      - Строка - Полное наименование единицы измерения.
//     * БазоваяЕдиницаМеждународноеСокращение - Строка - Международное сокращение единицы измерения.
//     * Описание                              - Строка - Произвольное описание товара.
//     * Сопоставление                         - Структура - Параметры сопоставления номенклатуры.
//                                               Заполняется, если необходимо переопределить стандартный механизм.
//        ** Идентификатор    - Строка - Идентификатор товара.
//        ** Наименование     - Строка - Наименование номенклатуры.
//        ** Характеристика   - Строка - Наименование характеристики.
//        ** ЕдиницаИзмерения - Строка - Наименование единицы измерения.
//        ** Артикул          - Строка - Артикул.
//
Процедура ПриЗаполненииИнформацииОТовареИзФайлаПрикладногоЭлектронногоДокумента(ДанныеФайла, РасширениеФайла, ИнформациюОТоваре) Экспорт
	
	
	
КонецПроцедуры

// Выполняется при отражении в учете прикладного электронного документа, содержащего информацию для сопоставления номенклатуры.
// Позволяет определить необходимость сопоставления номенклатуры для указанного способа обработки электронных документов,
// а также отказаться от отражения в учете, если сопоставление не выполнено.
// Если в электронном документе не передана информация для сопоставления,
// то отражение в учете будет продолжено независимо от настроек.
// Выполняется при использовании сопоставления номенклатуры контрагентов.
//
// Параметры:
//  Документ - Структура - данные электронного документа (только чтение):
//   * СпособОбработки - Строка - способ отражения в учете электронного документа.
//                       См. ПриОпределенииСпособовОбработкиПрикладногоВидаЭлектронногоДокумента.
//  Настройки - Структура - настройки сопоставления номенклатуры (для изменения):
//   * ОтражатьТолькоСопоставленные - Булево - признак разрешения отражать в учете только документы с сопоставленной номенклатурой. По умолчанию Истина.
//                                             Если в электронном документе не передана информация для сопоставления,
//                                             то отражение в учете будет продолжено независимо от настроек.
//
Процедура ПриОтраженииВУчетеПрикладногоЭлектронногоДокументаСНоменклатурой(Знач Документ, Настройки) Экспорт
	
	
	
КонецПроцедуры

// Выполняется при создании или при повторном заполнении документа учета по данным файла электронного документа.
//
// Параметры:
//  ПараметрыФайлаЭлектронногоДокумента - Структура - Параметры 
//     * ДанныеФайла     - ДвоичныеДанные - Данные файла прикладного электронного документа.
//     * СпособОбработки - Строка - Способ отражения в учете электронного документа.
//                       См. ПриОпределенииСпособовОбработкиПрикладногоВидаЭлектронногоДокумента.
//     * Входящий        - Булево - Признак того, что электронный документ является входящим.
//  СсылкиНаОбъекты - Массив - Документы информационной базы, созданные ранее по электронному документу.
//
Процедура ПриСозданииОбъектовУчетаИзФайлаПрикладногоЭлектронногоДокумента(ПараметрыФайлаЭлектронногоДокумента, СсылкиНаОбъекты) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать ОбменСКонтрагентамиПереопределяемый.ПолучитьЗначенияРеквизитов.
// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект. Если не задан альтернативный алгоритм получения значений реквизитов (процедура пуста),
// то используется функция БСП: ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов).
// 
// Параметры:
//  Ссылка - Ссылка - произвольная ссылка.
//  ИменаРеквизитов - Строка, Структура - если Строка, то имена реквизитов, 
//               перечисленные через запятую, в формате требований к свойствам структуры.
//               Например, "Код, Наименование, Родитель".
//               Если Структура, то в качестве ключа передается псевдоним поля для
//               возвращаемой структуры с результатом, а в качестве значения (опционально) 
//               - фактическое имя поля в таблице. 
//               Если значение не определено, то имя поля берется из ключа.
//  СтруктураДанных - Структура - содержит список свойств, как список имен в строке
//                 ИменаРеквизитов, со значениям реквизитов, прочитанных
//                 из информационной базы.
// 
Процедура ПолучитьСтруктуруЗначенийРеквизитов(Ссылка, ИменаРеквизитов, СтруктураДанных) Экспорт
	
	
	
КонецПроцедуры

// Устарела. Заполняет структуру, содержащую информацию об адресе участника ЭДО.
//
// Параметры:
//  СтруктураАдреса - структура - информация об адресе;
//   * Поля структуры для адреса РФ.
//    ** АдресРФ - Булево - признак, что адрес РФ;
//    ** Индекс - Строка - почтовый индекс организации;
//    ** Регион - Строка - код региона организации;
//    ** Район - Строка;
//    ** Город - Строка;
//    ** НаселенныйПункт - Строка - населенный пункт расположения организации;
//    ** Улица - Строка;
//    ** Дом - Строка;
//    ** Корпус - Строка;
//    ** Квартира - Строка;
//    ** Поля структуры для иностранного адреса или адреса РФ строкой.
//   * КодСтраны - Строка - код страны;
//    ** АдресТекст - Строка - представление адреса;
//  СтруктураПараметров - Структура - содержит ссылки на элементы справочника;
//  ВидКонтрагента - Строка - имя метаданных справочника;
//  ВидАдреса - Строка - "Факт" или "Юр";
//  ТекстОшибки - Строка - описание ошибки.
//
Процедура ПолучитьАдресСтруктурой(СтруктураАдреса, СтруктураПараметров, ВидКонтрагента = "Контрагент", ВидАдреса = "Юр", ТекстОшибки = "") Экспорт
	
	//++ НЕ ГОСИС
	Адрес = ЭлектронноеВзаимодействиеУТ.ПолучитьАдресИзКонтактнойИнформации(СтруктураПараметров[ВидКонтрагента], ВидАдреса, СтруктураПараметров.ДатаКИ);
	
	Параметр1 = СтруктураПараметров[ВидКонтрагента];
	Параметр2 = ?(ВидАдреса="Юр", НСтр("ru = 'юридический'"), НСтр("ru = 'фактический'"));
	
	Если НЕ ЗначениеЗаполнено(Адрес.Представление) Тогда
		
		Ошибка = НСтр("ru = 'Для %1 необходимо указать %2 адрес.'");
		ТекстОшибки = ТекстОшибки + Символы.ПС + Нстр("ru='" + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Ошибка, Параметр1, Параметр2) + "'"); 
		Возврат
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Адрес.ЗначенияПолей) Тогда
		Ошибка =  НСтр("ru = 'Для %1 необходимо заполнить %2 адрес по классификатору.'");
		ТекстОшибки = ТекстОшибки + Символы.ПС + Нстр("ru='" + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Ошибка, Параметр1, Параметр2) + "'"); 
		Возврат
		
	КонецЕсли;
	
	СтруктураРезультата = Новый Структура("КодСтраны, Индекс, Регион, КодРегиона, Район, Город, НаселенныйПункт, Улица, Дом, Корпус, Квартира");
	ЗаполнитьЗначенияСвойств(СтруктураРезультата, РаботаСАдресами.СведенияОбАдресе(Адрес.ЗначенияПолей));
	
	АдресРФ = Ложь;
	
	Если ЗначениеЗаполнено(СтруктураРезультата.КодСтраны) Тогда
		СтруктураАдреса.Вставить("ПроизвольныйАдрес", Ложь);		
	Иначе
		СтруктураАдреса.Вставить("ПроизвольныйАдрес", Истина);		
	КонецЕсли;	
	СтруктураАдреса.Вставить("АдресРФ",     	АдресРФ);
	СтруктураАдреса.Вставить("Индекс",      	СтруктураРезультата.Индекс);
	СтруктураАдреса.Вставить("КодРегион",   	СтруктураРезультата.КодРегиона);
	СтруктураАдреса.Вставить("КодРегиона",  	СтруктураРезультата.КодРегиона);
	СтруктураАдреса.Вставить("Район",       	СтруктураРезультата.Район);
	СтруктураАдреса.Вставить("Город",       	СтруктураРезультата.Город);
	СтруктураАдреса.Вставить("НаселПункт",  	СтруктураРезультата.НаселенныйПункт);
	СтруктураАдреса.Вставить("НаселенныйПункт", СтруктураРезультата.НаселенныйПункт);
	СтруктураАдреса.Вставить("Улица",       	СтруктураРезультата.Улица);
	СтруктураАдреса.Вставить("Дом",         	СтруктураРезультата.Дом);
	СтруктураАдреса.Вставить("Корпус",      	СтруктураРезультата.Корпус);
	СтруктураАдреса.Вставить("Кварт",       	СтруктураРезультата.Квартира);
	СтруктураАдреса.Вставить("Квартира",    	СтруктураРезультата.Квартира);
	Если НЕ АдресРФ Тогда
		СтруктураАдреса.Вставить("КодСтр",   	СтруктураРезультата.КодСтраны);
		СтруктураАдреса.Вставить("КодСтраны",	СтруктураРезультата.КодСтраны);
		СтруктураАдреса.Вставить("АдрТекст", 	Адрес.Представление);
		СтруктураАдреса.Вставить("АдресТекст", 	Адрес.Представление);
	КонецЕсли;
	СтруктураАдреса.Вставить("КодГАР", 		"");
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Устарела. Заполнение реквизитов формы переданными значениями.
//
// Параметры:
//  ДанныеФормы - ФормаКлиентскогоПриложения - данные управляемой формы.
//  ЗначениеЗаполнения - Строка - ссылка данные во временном хранилище.
//
Процедура ЗаполнитьИсточник(ДанныеФормы, ЗначениеЗаполнения) Экспорт
	
КонецПроцедуры

// Устарела. Определяет реквизиты экземпляра номенклатуры информационной базы.
//
// Параметры:
//  НоменклатураИБ - Структура - элемент номенклатуры информационной базы. 
//                               См. ОбменСКонтрагентамиКлиентСервер.НоваяНоменклатураИнформационнойБазы.
//  Реквизиты - Структура - реквизиты элемента номенклатуры информационной базы (для изменения):
//   * Наименование - Строка - наименование номенклатуры.
//   * Артикул - Строка - артикул номенклатуры.
//   * СтавкаНДС - Произвольный - ставка НДС номенклатуры.  Значение из соответствия, заданного в методе
//                                ОбменСКонтрагентамиПереопределяемый.ЗаполнитьСоответствиеСтавокНДС.
//
Процедура ПриОпределенииРеквизитовНоменклатурыИнформационнойБазы(Знач НоменклатураИБ, Реквизиты) Экспорт
	
КонецПроцедуры

// Устарела. Следует использовать: 
// см. ТекстЗапросаПоискаВариантовСопоставленияПоШтрихкодамКомбинаций,
// см. ИнициализацияТекстаЗапросаПоискаСопоставленияПоНатуральнымКлючам.
//
// Выполняется при подборе вариантов сопоставления номенклатуры контрагента и информационной базы.
//
// Параметры:
//  НаборНоменклатурыКонтрагентов - Массив - набор номенклатуры контрагентов, для которой нужно подобрать варианты.
//                                           См. ОбменСКонтрагентамиКлиентСервер.НоваяНоменклатураКонтрагента
//  Варианты - Массив - варианты сопоставления (для изменения). Элементы представлены структурой:
//   * НоменклатураКонтрагента - Структура - элемент из параметра НаборНоменклатурыКонтрагентов.
//   * НоменклатураИБ - Структура - подобранный вариант номенклатуры ИБ.
//                                  См. ОбменСКонтрагентамиКлиентСервер.НоваяНоменклатураИнформационнойБазы.
//   * Наименование - Строка - наименование номенклатуры в ИБ.
//   * Артикул - Строка - артикул номенклатуры в ИБ.
//   * Штрихкод - Строка - штрихкод номенклатуры в ИБ.
//  СтандартнаяОбработка - Булево - признак использования стандартных (библиотечных) алгоритмов поиска. По умолчанию Истина.
//                                  Поддерживаются алгоритм полнотекстового поиска по наименованию номенклатуры.
//
Процедура ПриПодбореВариантовСопоставленияНоменклатуры(Знач НаборНоменклатурыКонтрагентов, Варианты, СтандартнаяОбработка = Истина) Экспорт
	
	
КонецПроцедуры

// Устарела. Следует использовать:
// см. ТекстЗапросаПоискаВариантовСопоставленияУпаковкиНоменклатурыБЭД,
// см. ТекстЗапросаОтбораХарактеристикНоменклатурыБЭДПоВладельцу.
//
// Выполняется при подборе недостающих данных о номенклатуре информационной базы по уже имеющимся,
// а также номенклатуре контрагента.
//
// Параметры:
//  НоменклатураКонтрагента - Структура - данные номенклатуры контрагента. 
//                                        См. ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураКонтрагента.
//  НоменклатураИБ - Структура - данные о номенклатуре информационной базы (имеющиеся или требующие подбора).
//                               См. ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураИнформационнойБазы.
//
Процедура ПриПодбореНоменклатурыИнформационнойБазы(Знач НоменклатураКонтрагента, НоменклатураИБ) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиФормированияДокумента

// Выполняется при выводе формы настроек регламента ЭДО. Используется для получения возможных вариантов
// заполнения некоторых полей формализованных форматов.
//
// Параметры:
//  ВариантыЗаполненияПолей	 - Структура - описание полей и вариантов их заполнения. В качестве ключа задается идентификатор поля,
//     а в качестве значения - список значений возможных вариантов заполнения.
//     Возможные идентификаторы:
//       * УПД_ТоварКод - на входе содержит список значений: {"Код", "Внутренний код"}; {"Штрихкод", "Штрихкод"}
//       * ПередачаТоваров_ТоварКод - на входе содержит список значений: {"Код", "Внутренний код"}; {"Штрихкод", "Штрихкод"}
//
Процедура ПриОпределенииВариантовЗаполненияПолейЭлектронныхДокументов(ВариантыЗаполненияПолей) Экспорт
	
	//++ НЕ ГОСИС
	ЭлектронноеВзаимодействиеУТ.ПриОпределенииВариантовЗаполненияПолейЭлектронныхДокументов(ВариантыЗаполненияПолей)
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Получает запросы, описывающие документы-источники данных для формирования электронного документа указанного вида.
// Запросы используются для указания пользователем формулы заполнения значений доп. полей по данным источника.
// Запрос должен включать в себя отбор по параметру Ссылка.
//
// Параметры:
//  Параметры - Структура - параметры электронного документа, для которого производится настройка.
//     * ВидЭлектронногоДокумента - ПеречислениеСсылка.ВидыЭД - вид электронного документа. Могут передаваться следующие виды документов:
//                                  АктИсполнитель, ТОРГ12Продавец, СчетФактура, КорректировочныйСчетФактура,
//                                  СоглашениеОбИзмененииСтоимостиОтправитель, АктНаПередачуПрав, УПД, УКД.
//     * ИспользоватьУПД - Булево - Устарел. Оставлен для совместимости.
//                                  Следует ориентироваться на ВидЭлектронногоДокумента = Перечисления.ВидыЭД.УПД.
//     * ИспользоватьУКД - Булево - Устарел. Оставлен для совместимости.
//                                  Следует ориентироваться на ВидЭлектронногоДокумента = Перечисления.ВидыЭД.УКД
//  ТекстЗапроса - Строка - текст запроса, который должен быть использован в конструкторе доп. полей шапки.
//
Процедура ПолучитьЗапросКонструктораДополнительныхПолейШапки(Параметры, ТекстЗапроса) Экспорт
	
	//++ НЕ ГОСИС
	ЭлектронноеВзаимодействиеУТ.ПолучитьЗапросКонструктораДополнительныхПолейШапки(Параметры, ТекстЗапроса)
	//-- НЕ ГОСИС
	
КонецПроцедуры

#КонецОбласти

// Подготавливает данные для электронного документа вида "Акт о расхождениях".
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо 
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеДляАктОРасхождениях(Знач СсылкаНаОбъект, Знач СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеДляАктОРасхождениях(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ (Акт о расхождениях, ФНС, версия 5.01).
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  ДокументУчета - Ссылка - ссылка на объект ИБ, владельца электронного документа.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//  ОписаниеОшибки - Строка - описание ошибки создания учетного документа.
//
Процедура НайтиСоздатьАктОРасхождениях_ФНС_2019(ДеревоДанных, ДокументУчета = Неопределено, СпособОбработки = "", ОписаниеОшибки = "") Экспорт
	
	//++ НЕ ГОСИС
	ЭлектронноеВзаимодействиеУТ.НайтиСоздатьАктОРасхождениях_ФНС_2019(ДеревоДанных, ДокументУчета, СпособОбработки, ОписаниеОшибки);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Выполняется при проверке возможности создания учетного документа по электронному документу.
//
// Параметры:
//  Параметры - Структура - параметры электронного документа, отражаемого в учете.
//   * ЭтоСводныйУПД - Булево - электронный документ имеет формат УПД и содержит несколько продавцов, покупателей и т.п.
//  Отказ - Булево - признак отказа от отражения в учете. Если установить Истина, то документ не отражается в учете (для изменения). По умолчанию Ложь.
//  Описание - Строка - описание причины отказа от отражения в учете.
//
Процедура ПриПроверкеВозможностиСозданияУчетногоДокумента(Знач Параметры, Отказ, Описание) Экспорт
	
	//++ НЕ ГОСИС
	ЭлектронноеВзаимодействиеУТ.ПриПроверкеВозможностиСозданияУчетногоДокумента(Параметры, Отказ, Описание)
	//-- НЕ ГОСИС
	
КонецПроцедуры

#Область УПД_2019

// Подготавливает данные для электронного документа типа УПД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо 
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеДляУПДИнформацияПродавцаФНС_2019(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеДляУПДИнформацияПродавцаФНС_2019(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ)
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УПД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо 
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеДляДОПИнформацияПродавцаФНС_2019(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеДляДОПИнформацияПродавцаФНС_2019(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ)
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УПД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо 
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеДляСЧФИнформацияПродавцаФНС_2019(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеДляСЧФИнформацияПродавцаФНС_2019(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ)
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УПД (информация покупателя).
//
// Параметры:
//  СсылкаНаЭД - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеДляУПДИнформацииПокупателяФНС_2019(СсылкаНаЭД, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеДляУПДИнформацииПокупателяФНС_2019(СсылкаНаЭД, СтруктураЭД, ДеревоДанных, Отказ)
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ (УПД версии 2019).
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкиНаВладельцев - Массив - документы информационной базы, созданные ранее по входящему электронному документу.
//  СпособОбработки - Структура - способы сохранения данных в информационной базе.
//     * ПервичныйДокумент - Строка - способ сохранения первичного документа.
//     * СчетФактура       - Строка - способ сохранения счета-фактуры.
//  ОписаниеОшибки - Строка - описание ошибки создания учетного документа.
//
Процедура НайтиСоздатьУниверсальныйПередаточныйДокумент_2019(ДеревоДанных, СсылкиНаВладельцев = Неопределено, СпособОбработки = Неопределено, ОписаниеОшибки = "") Экспорт
	
	//++ НЕ ГОСИС
	ЭлектронноеВзаимодействиеУТ.НайтиСоздатьУниверсальныйПередаточныйДокумент_2019(ДеревоДанных, СсылкиНаВладельцев, СпособОбработки, ОписаниеОшибки)
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ (УПД-ДОП версии 2019).
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, владельца электронного документа.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//  ОписаниеОшибки - Строка - описание ошибки создания учетного документа.
//
Процедура НайтиСоздатьУПДДокументОПередаче_2019(ДеревоДанных, СсылкаНаВладельца, Записывать, СпособОбработки, ОписаниеОшибки) Экспорт
	
	//++ НЕ ГОСИС
	ЭлектронноеВзаимодействиеУТ.НайтиСоздатьУПДДокументОПередаче_2019(ДеревоДанных, СсылкаНаВладельца, Записывать, СпособОбработки, ОписаниеОшибки)
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ (УПД-СЧФ версия 2019).
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, владельца электронного документа.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//  ОписаниеОшибки - Строка - описание ошибки создания учетного документа.
//
Процедура НайтиСоздатьУПДСчетФактуру_2019(ДеревоДанных, СсылкаНаВладельца = Неопределено, СпособОбработки = "", ОписаниеОшибки = "") Экспорт
	
	//++ НЕ ГОСИС
	ЭлектронноеВзаимодействиеУТ.НайтиСоздатьУПДСчетФактуру_2019(ДеревоДанных, СсылкаНаВладельца, СпособОбработки, ОписаниеОшибки)
	//-- НЕ ГОСИС
	
КонецПроцедуры

#КонецОбласти

// Подготавливает данные формирования исходящего электронного документа по Запросу коммерческих предложений.
//
// Параметры:
//  СсылкаНаОбъект  - ОпределяемыйТип.ЗапросКоммерческихПредложенийПоставщиковОбъект - Ссылка на прикладной документ, по которому необходимо создать электронный.
//  СтруктураЭД     - Структура                                                      - Структура данных для формирования электронного документа.
//  ДеревоДанных    - ДеревоЗначений                                                 - Данные, соответствующие структуре Макета ЗапросКоммерческихПредложений
//                                                                                     Обработки ОбменСКонтрагентами. Если используется подсистема
//                                                                                     ЭлектронноеВзаимодействие.КоммерческиеПредложения, то обработчик
//                                                                                     не вызывается (см. процедуру ЗаполнитьДанныеПоЗапросуКоммерческихПредложений
//                                                                                     общего модуля КоммерческиеПредложенияПереопределяемый).
//  Отказ          - Булево                                                          - Если нужно отказаться от создания электронного документа, необходимо установить
//                                                                                     значение в Истина. После этого дальнейшие действия по формированию документа 
//                                                                                     производиться не будут, поэтому нужно сформировать сообщения пользователю при
//                                                                                     необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоЗапросуКоммерческихПредложений(Знач СсылкаНаОбъект, Знач СтруктураЭД, ДеревоДанных,
		Отказ) Экспорт
	
	
	
КонецПроцедуры

// Подготавливает данные формирования исходящего электронного документа по Коммерческому предложению.
//
// Параметры:
//  СсылкаНаОбъект  - ОпределяемыйТип.КоммерческоеПредложениеКлиентуОбъект - Ссылка на прикладной документ, по которому необходимо создать электронный.
//  СтруктураЭД     - Структура                                            - Структура данных для формирования электронного документа.
//  ДеревоДанных    - ДеревоЗначений                                       - Данные, соответствующие структуре Макета КоммерческоеПредложение
//                                                                          Обработки ОбменСКонтрагентами. Если используется подсистема
//                                                                           ЭлектронноеВзаимодействие.КоммерческиеПредложения, то обработчик
//                                                                           не вызывается (см. процедуру ЗаполнитьДанныеПоКоммерческомуПредложению
//                                                                           общего модуля КоммерческиеПредложенияПереопределяемый).
//  Отказ           - Булево                                               - Если нужно отказаться от создания электронного документа, необходимо установить
//                                                                           значение в Истина. После этого дальнейшие действия по формированию документа 
//                                                                           производиться не будут, поэтому нужно сформировать сообщения пользователю при
//                                                                           необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоКоммерческомуПредложению(Знач СсылкаНаОбъект, Знач СтруктураЭД, ДеревоДанных,
		Отказ) Экспорт
	
	
	
КонецПроцедуры

// Создание нового или перезаполнение существующего прикладного документа Запрос коммерческих предложений от клиента
// по данным входящего электронного документа.
// Если существует подсистема КоммерческиеПредложенияДокументы.ЗапросКоммерческогоПредложенияОтКлиента, обработчик
// не вызывается.
//
// Параметры:
//  ДанныеВходящегоДокумента - ДеревоЗначений - Данные, соответствующие структуре макета ЗапросКоммерческихПредложений
//    обработки ОбменСКонтрагентами.
//  УчетныйДокумент          - ДокументСсылка - Ссылка на учетный документ Запрос коммерческих предложений от клиента.
//    См. ОпределяемыйТип.ОснованияЭлектронныхДокументов.
//  СпособОбработки          - Строка - Способ сохранения данных в информационной базе. Необязательный.
//    См. ОбменСКонтрагентамиПереопределяемый.СписокОперацийВидаЭД,
//    См. ОбменСКонтрагентамиПереопределяемый.ПриОпределенииСпособовОбработкиПрикладногоВидаЭлектронногоДокумента.
//
Процедура НайтиСоздатьЗапросКоммерческихПредложений(Знач ДанныеВходящегоДокумента, УчетныйДокумент,
		СпособОбработки = "") Экспорт
	
	
	
КонецПроцедуры

// Создание нового или перезаполнение существующего прикладного документа Коммерческое предложение поставщика
// по данным входящего электронного документа.
// Если существует подсистема КоммерческиеПредложенияДокументы.КоммерческоеПредложениеПоставщика, обработчик
// не вызывается.
//
// Параметры:
//  ДанныеВходящегоДокумента - ДеревоЗначений - Данные, соответствующие структуре макета КоммерческоеПредложение
//    обработки ОбменСКонтрагентами.
//  УчетныйДокумент          - ДокументСсылка - Ссылка на учетный документ Коммерческое предложение поставщика.
//    См. ОпределяемыйТип.ОснованияЭлектронныхДокументов.
//  СпособОбработки          - Строка - Способ сохранения данных в информационной базе. Необязательный.
//    См. ОбменСКонтрагентамиПереопределяемый.СписокОперацийВидаЭД,
//    См. ОбменСКонтрагентамиПереопределяемый.ПриОпределенииСпособовОбработкиПрикладногоВидаЭлектронногоДокумента.
//
Процедура НайтиСоздатьКоммерческоеПредложение(Знач ДанныеВходящегоДокумента, УчетныйДокумент,
		СпособОбработки = "") Экспорт
	
	
	
КонецПроцедуры

#Область РаботаСКонтрагентами

// Создание контрагента в информационной базе по реквизитам.
//
// Параметры:
//   РеквизитыКонтрагента - Структура - реквизиты необходимые для создания контрагента.
//    * ИНН - Строка - ИНН контрагента.
//    * КПП - Строка - КПП контрагента.
//    * Наименование - Строка - наименование контрагента.
//   Контрагент - СправочникСсылка - ссылка на созданного контрагента.
//   Отказ - Булево - признак ошибки.
//
Процедура СоздатьКонтрагентаПоРеквизитам(Знач РеквизитыКонтрагента, Контрагент, Отказ = Ложь) Экспорт
	
	//++ НЕ ГОСИС
	Контрагент = ЭлектронноеВзаимодействиеУТ.СоздатьКонтрагентаВБД(РеквизитыКонтрагента);
	//-- НЕ ГОСИС
	
КонецПроцедуры
#КонецОбласти

#Область СобытияПодсистемы

// Выполняется при создании формы подсистемы, допускающей изменение.
// Позволяет изменить реквизиты, команды и элементы формы.
// Вызывается для форм со следующим назначением (см. параметр Контекст.Назначение):
// "СопоставлениеНоменклатуры"
// Для добавленных элементов возможно подключение обработчиков событий методом УстановитьДействие.
// Список подключаемых действий в формате <Событие>-<Имя подключаемого метода>-<Имя метода с реализацией>:
// ПриИзменении                  - Подключаемый_ЭлементПриИзменении                  - ЭлементФормыПодсистемыПриИзменении
// НачалоВыбора                  - Подключаемый_ЭлементНачалоВыбора                  - ЭлементФормыПодсистемыНачалоВыбора
// НачалоВыбораИзСписка          - Подключаемый_ЭлементНачалоВыбораИзСписка          - ЭлементФормыПодсистемыНачалоВыбораИзСписка
// Очистка                       - Подключаемый_ЭлементОчистка                       - ЭлементФормыПодсистемыОчистка
// Создание                      - Подключаемый_ЭлементСоздание                      - ЭлементФормыПодсистемыСоздание
// ОбработкаВыбора               - Подключаемый_ЭлементОбработкаВыбора               - ЭлементФормыПодсистемыОбработкаВыбора
// ИзменениеТекстаРедактирования - Подключаемый_ЭлементИзменениеТекстаРедактирования - ЭлементФормыПодсистемыИзменениеТекстаРедактирования
// АвтоПодбор                    - Подключаемый_ЭлементАвтоПодбор                    - ЭлементФормыПодсистемыАвтоПодбор
// ОкончаниеВводаТекста          - Подключаемый_ЭлементОкончаниеВводаТекста          - ЭлементФормыПодсистемыОкончаниеВводаТекста
// Нажатие                       - Подключаемый_ЭлементНажатие                       - ЭлементФормыПодсистемыНажатие
// ОбработкаНавигационнойСсылки  - Подключаемый_ЭлементОбработкаНавигационнойСсылки  - ЭлементФормыПодсистемыОбработкаНавигационнойСсылки
// ДействиеКоманды               - Подключаемый_КомандаДействие                      - КомандаФормыПодсистемыДействие
// Методы с реализацией находятся в модуле ОбменСКонтрагентамиКлиентПереопределяемый.
//
// Параметры:
//  Контекст - ФиксированнаяСтруктура - контекст создания формы:
//   * Назначение - Строка - назначение формы.
//   * Форма - ФормаКлиентскогоПриложения - форма для изменения.
//   * Префикс - Строка - префикс имен для новых реквизитов, команд и элементов формы.
//  Отказ - Булево - аналогичен параметру обработчика события "ПриСозданииНаСервер" управляемой формы.
//  СтандартнаяОбработка - Булево - аналогичен параметру обработчика события "ПриСозданииНаСервер" управляемой формы.
//
// Пример:
//  Если Контекст.Назначение = "СопоставлениеНоменклатуры" Тогда
//  	Контекст.Форма.Элементы.Добавить(Префикс + "ИмяНовогоЭлемент",...);
//  	Контекст.Форма.Команды.Добавить(Префикс + "ИмяНовойКоманды");
//  	....
//  КонецЕсли;
//
Процедура ПриСозданииФормыПодсистемы(Контекст, Отказ, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область Диагностика

// Определяет список документов конфигурации (являющихся основаниями электронных документов),
// в модулях форм которых в обработчике события
// ПослеЗаписи размещен вызов процедуры ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента, показывающей
// список накопленных в процессе записи ошибок в форме, которая предоставляет
// инструменты их исправления.
// Если в модуле формы документа в обработчике события ПослеЗаписи не размещен вызов процедуры
// ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента, ошибки будут выведены пользователю стандартным способом.
//
// Параметры:
//   СписокДокументов - Массив - объекты метаданных (ОбъектМетаданных) в модуле форм которых в обработчике
//                               события ПослеЗаписи размещен вызов 
//                               процедуры ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента.
//
// Пример:
//  СписокДокументов.Добавить(Метаданные.Документы.ЗаказПокупателя);
//
Процедура ПриОпределенииДокументовСПоддержкойДиагностикиОшибок(СписокДокументов) Экспорт
	
	//++ НЕ ГОСИС
	ЭлектронноеВзаимодействиеУТ.ПриОпределенииДокументовСПоддержкойДиагностикиОшибок(СписокДокументов);
	//-- НЕ ГОСИС
	
КонецПроцедуры

#КонецОбласти

#Область ПрямойОбмен

// Определяет возможность использования прямого обмена в конфигурации.
//
// Параметры:
//  Использовать - Булево - признак использования прямого обмена в конфигурации.
//                          Значение по умолчанию - Ложь.
//
Процедура ИспользоватьПрямойОбмен(Использовать) Экспорт
	
	//++ НЕ ГОСИС
	ЭлектронноеВзаимодействиеУТ.ИспользоватьПрямойОбмен(Использовать);
	//-- НЕ ГОСИС
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПользователями

// Получает сведения физического лица по переданному пользователю ИБ и организации.
//
// Параметры:
//  Пользователь - ОпределяемыйТип.Пользователь - пользователь ИБ.
//  Организация - ОпределяемыйТип.Организация - организация.
//  СведенияФизЛица - Структура - данные физического лица:
//   * ИмяПолное - Строка - полное имя физического лица пользователя, например "Иванов Иван Иванович" .
//   * Должность - Строка - занимаемая должность.
//
Процедура СведенияФизЛицаПользователя(Знач Пользователь, Знач Организация, СведенияФизЛица) Экспорт
	
	//++ НЕ ГОСИС
	ЭлектронноеВзаимодействиеУТ.СведенияФизЛицаПользователя(Пользователь, Организация, СведенияФизЛица)
	//-- НЕ ГОСИС
	
КонецПроцедуры

#КонецОбласти

// Определяет, включать ли прием информационной базой уведомлений от сервиса ЭДО.
// В случае, если использование включено, необходимо обеспечить доступность HTTP-сервиса /hs/events/newdocs.
// В частности, при публикации прикладного решения в модели сервиса необходимо опубликовать HTTP-сервис "ЭДО" с basic-авторизацией.
// Логин и пароль пользователя указаны в методе ОбменСКонтрагентами.СоздатьСлужебногоПользователяОповещенийЭДО.
//
// Параметры:
//  Используется - Булево - признак использования уведомлений в прикладном решении
//
Процедура ПриПроверкеИспользованияУведомлений(Используется) Экспорт
	
	//++ НЕ ГОСИС
	ЭлектронноеВзаимодействиеУТ.ПриПроверкеИспользованияУведомлений(Используется);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Определяет, включать ли функциональную опцию "Использовать внутренние документы" при обновлении.
//
// Параметры:
//   Включать - Булево - если Истина, функциональная опция будет включена.
//
// Пример:
//  Включать = Истина;
//
Процедура ВключатьФункциональнуюОпциюИспользоватьВнутренниеДокументыЭДО(Включать) Экспорт
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УКД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на учетный документ, данными которого необходимо
//    заполнить электронный документ.
//  СтруктураЭД - Структура - данные для формирования электронного документа, см. СтруктураЭлектронногоДокумента.
//    Дополнительные поля:
//     * ТипЭлементаВерсииЭД - ПеречислениеСсылка.ТипыЭлементовВерсииЭД - тип элемента версии электронного документа,
//        определяющий вариант заполнения дерева данных. Возможные значения:
//         - КСЧФДИСУКД - корректировочный счет-фактура и документ о согласии покупателя на  изменение стоимости отгрузки;
//         - КСЧФУКД - корректировочный счет-фактура, применяемый при расчетах по налогу на добавленную стоимость;
//         - ДИСУКД - документ о согласии покупателя на изменение стоимости отгрузки.
//  ДеревоДанных - ДеревоЗначений - дерево данных из которого заполняется электронный документ,
//    см. макет Обработка.ОбменСКонтрагентами.УКД_ИнформацияПродавца_2020.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеУКДИнформацияПродавцаФНС_2020(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	ЭлектронноеВзаимодействиеУТ.ЗаполнитьДанныеУКДИнформацияПродавцаФНС_2020(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ)
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ТипЭлементаВерсииЭД - ПеречислениеСсылка.ТипыЭлементовВерсииЭД - тип элемента версии электронного документа,
//     определяющий вариант заполнения дерева данных. Возможные значения:
//      - КСЧФДИСУКД - корректировочный счет-фактура и документ о согласии покупателя на  изменение стоимости отгрузки;
//      - КСЧФУКД - корректировочный счет-фактура, применяемый при расчетах по налогу на добавленную стоимость;
//      - ДИСУКД - документ о согласии покупателя на изменение стоимости отгрузки.
//  ДеревоДанных - ДеревоЗначений - дерево данных из которого заполняется учетный документ,
//    см. макет Обработка.ОбменСКонтрагентами.УКД_ИнформацияПродавца_2020.
//  СсылкиНаВладельцев - Массив - документы информационной базы, созданные ранее по входящему электронному документу.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Структура - способы сохранения данных в информационной базе.
//     - ПервичныйДокумент - Строка - способ сохранения первичного документа.
//     - СчетФактура - Строка - способ сохранения счета-фактуры.
//
Процедура НайтиСоздатьУКД_2020(ТипЭлементаВерсииЭД, ДеревоДанных, СсылкиНаВладельцев = Неопределено, Записывать = Истина, СпособОбработки  = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	ЭлектронноеВзаимодействиеУТ.НайтиСоздатьУКД_2020(ТипЭлементаВерсииЭД, ДеревоДанных, СсылкиНаВладельцев, Записывать, СпособОбработки);
	//-- НЕ ГОСИС
	
КонецПроцедуры

#КонецОбласти
