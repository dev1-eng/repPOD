
////////////////////////////////////////////////////////////////////////////////
// Модуль "РасхожденияКлиентСервер" содержит процедуры и функции, работающие на клиенте и сервер
// для работы документов отражения расхождений после отгрузки.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

Функция ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении) Экспорт
	
	Возврат ТипОснованияАктаОРасхождении = ПредопределенноеЗначение("Перечисление.ТипыОснованияАктаОРасхождении.РеализацияТоваровУслуг")
	        ИЛИ ТипОснованияАктаОРасхождении = ПредопределенноеЗначение("Перечисление.ТипыОснованияАктаОРасхождении.ПустаяСсылка");
	
КонецФункции

Функция ТипОснованияПередачаТоваровХранителю(ТипОснованияАктаОРасхождении) Экспорт
	
	Возврат ТипОснованияАктаОРасхождении = ПредопределенноеЗначение("Перечисление.ТипыОснованияАктаОРасхождении.ПередачаТоваровХранителю");
	
КонецФункции

Функция ТипОснованияПоступлениеТоваровОтХранителя(ТипОснованияАктаОРасхождении) Экспорт
	
	Возврат ТипОснованияАктаОРасхождении = ПредопределенноеЗначение("Перечисление.ТипыОснованияАктаОРасхождении.ВозвратТоваровОтХранителя");
	
КонецФункции

Функция ТипОснованияПриобретениеТоваровУслуг(ТипОснованияАктаОРасхождении) Экспорт
	
	Возврат ТипОснованияАктаОРасхождении = ПредопределенноеЗначение("Перечисление.ТипыОснованияАктаОРасхождении.ПриобретениеТоваровУслуг");
	
КонецФункции

Функция ТипОснованияВозвратТоваровОтКлиента(ТипОснованияАктаОРасхождении) Экспорт
	
	Возврат ТипОснованияАктаОРасхождении =
		ПредопределенноеЗначение("Перечисление.ТипыОснованияАктаОРасхождении.ВозвратТоваровОтКлиента");
	
КонецФункции

Функция ТипОснованияВозвратПоставщику(ТипОснованияАктаОРасхождении) Экспорт
	
	Возврат ТипОснованияАктаОРасхождении =
		ПредопределенноеЗначение("Перечисление.ТипыОснованияАктаОРасхождении.ВозвратПоставщику");
	
КонецФункции

Функция ТипОснованияОтгрузкаТоваровСХранения(ТипОснованияАктаОРасхождении) Экспорт
	
	Возврат ТипОснованияАктаОРасхождении =
		ПредопределенноеЗначение("Перечисление.ТипыОснованияАктаОРасхождении.ОтгрузкаТоваровСХранения");
	
КонецФункции

Функция ТипОснованияПеремещениеТоваров(ДокументСсылка) Экспорт
	
	Возврат ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АктОРасхожденияхПослеПеремещения");
	
КонецФункции

Функция РассчитатьИтоговыеКоличественныеПоказателиФормы(ТаблицаТовары) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Недостачи", 0);
	Результат.Вставить("Излишки", 0);
	Результат.Вставить("Расхождения", 0);
	Результат.Вставить("СтрокСРасхождениями", 0);
	
	Результат.Недостачи = 0;
	Результат.Излишки   = 0;
	
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
		
		Если СтрокаТовары.КоличествоУпаковокРасхождения <> 0 Тогда
			Результат.СтрокСРасхождениями = Результат.СтрокСРасхождениями + 1;
		КонецЕсли;
		
		Если СтрокаТовары.КоличествоУпаковокРасхождения > 0 Тогда
			Результат.Излишки = Результат.Излишки + СтрокаТовары.КоличествоУпаковокРасхождения;
		ИначеЕсли СтрокаТовары.КоличествоУпаковокРасхождения < 0 Тогда
			Результат.Недостачи = Результат.Недостачи + (-СтрокаТовары.КоличествоУпаковокРасхождения);
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.Вставить("ЕстьИзлишки", Результат.Излишки > 0);
	Результат.Вставить("ЕстьНедостачи", Результат.Недостачи > 0);
	
	Результат.Расхождения = ТаблицаТовары.Итог("Количество") - ТаблицаТовары.Итог("КоличествоПоДокументу");
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДействийПриИзмененииКоличестваУпаковок() Экспорт

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьРасхождения");

	Возврат СтруктураДействий;

КонецФункции

Функция СтруктураДействийЗаполнитьЗависимыеРеквизитыТоваров() Экспорт

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьРасхождения");
	СтруктураДействий.Вставить("УстановитьПризнакДляЗаполненияТекстовогоОписания");
	СтруктураДействий.Вставить("ПризнакНаличиеКомментария");

	Возврат СтруктураДействий;

КонецФункции

Функция СтруктураДействийЗаполнитьЗависимыеРеквизитыТоваровРасхожденияПослеОтгрузки() Экспорт

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьРасхожденияПослеОтгрузки");
	СтруктураДействий.Вставить("УстановитьПризнакДляЗаполненияТекстовогоОписания");
	СтруктураДействий.Вставить("ПризнакНаличиеКомментарияОтгрузка");

	Возврат СтруктураДействий;

КонецФункции

Функция СтруктураДействийЗаполнитьЗависимыеРеквизитыТоваровРасхожденияПослеПриемки() Экспорт

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьРасхожденияПослеПриемки");
	СтруктураДействий.Вставить("ПризнакНаличиеКомментарияПриемка");

	Возврат СтруктураДействий;

КонецФункции

Процедура УправлениеДоступностью(Форма) Экспорт
	
	ВлияющиеРеквизитыДоступны = Форма.ДокументыОснования.Количество() = 0;
	
	Если ТипОснованияПеремещениеТоваров(Форма.Объект.Ссылка) Тогда
		
		ПодборДокументовОснованийДоступен = ЗначениеЗаполнено(Форма.Объект.СкладОтправитель)
		                                    И ЗначениеЗаполнено(Форма.Объект.СкладПолучатель)
		                                    И ЗначениеЗаполнено(Форма.Объект.Организация);
		
	ИначеЕсли РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(Форма.Объект.ТипОснованияАктаОРасхождении) Тогда
		
		ПодборДокументовОснованийДоступен = (Не Форма.ИспользоватьСоглашенияСКлиентами Или ЗначениеЗаполнено(Форма.Объект.Соглашение))
		                                    И ЗначениеЗаполнено(Форма.Объект.Партнер)
		                                    И ЗначениеЗаполнено(Форма.Объект.Контрагент)
		                                    И ЗначениеЗаполнено(Форма.Объект.Организация)
		                                    И ?(Форма.Элементы.Договор.Видимость И Форма.ИспользоватьСоглашенияСКлиентами,
		                                        ЗначениеЗаполнено(Форма.Объект.Договор), Истина)
		                                    И ЗначениеЗаполнено(Форма.Объект.Валюта)
		                                    И ЗначениеЗаполнено(Форма.Объект.НалогообложениеНДС)
		                                    И ЗначениеЗаполнено(Форма.Объект.ХозяйственнаяОперация);
		
	Иначе
		
		ПодборДокументовОснованийДоступен = ЗначениеЗаполнено(Форма.Объект.Партнер)
		                                    И ЗначениеЗаполнено(Форма.Объект.Контрагент)
		                                    И ЗначениеЗаполнено(Форма.Объект.Организация)
		                                    И ЗначениеЗаполнено(Форма.Объект.Валюта)
		                                    И ЗначениеЗаполнено(Форма.Объект.НалогообложениеНДС)
		                                    И ЗначениеЗаполнено(Форма.Объект.ХозяйственнаяОперация);
		
	КонецЕсли;
	
	ПодборТоваровДоступен = ПодборДокументовОснованийДоступен И (Форма.ДокументыОснования.Количество() > 0);
	
	Форма.Элементы.Организация.ТолькоПросмотр           = НЕ ВлияющиеРеквизитыДоступны;
	
	Если Не ТипОснованияПеремещениеТоваров(Форма.Объект.Ссылка) Тогда
		
		Форма.Элементы.Партнер.ТолькоПросмотр               = НЕ ВлияющиеРеквизитыДоступны;
		Форма.Элементы.Контрагент.ТолькоПросмотр            = НЕ ВлияющиеРеквизитыДоступны;
		Форма.Элементы.Соглашение.ТолькоПросмотр            = НЕ ВлияющиеРеквизитыДоступны;
		Форма.Элементы.Договор.ТолькоПросмотр               = НЕ ВлияющиеРеквизитыДоступны;
		Форма.Элементы.Валюта.ТолькоПросмотр                = НЕ ВлияющиеРеквизитыДоступны;
		Форма.Элементы.ЦенаВключаетНДС.ТолькоПросмотр       = НЕ ВлияющиеРеквизитыДоступны;
		Форма.Элементы.НалогообложениеНДС.ТолькоПросмотр    = НЕ ВлияющиеРеквизитыДоступны;
		Форма.Элементы.ХозяйственнаяОперация.ТолькоПросмотр = НЕ ВлияющиеРеквизитыДоступны;
		
	КонецЕсли;
	
	Форма.Элементы.ИзменитьДокументыОснования.Доступность     = ПодборДокументовОснованийДоступен;
	Форма.Элементы.ТоварыЗаполнитьПоОснованиям.Доступность    = ПодборТоваровДоступен;
	Форма.Элементы.ТоварыЗагрузитьИзВнешнегоФайла.Доступность = ПодборТоваровДоступен;
	Форма.Элементы.ТоварыОткрытьПодбор.Доступность            = ПодборТоваровДоступен;
	Форма.Элементы.ТоварыДобавить.Доступность                 = ПодборТоваровДоступен;
	Форма.Элементы.Товары.Доступность                         = ПодборТоваровДоступен;
	
	Если ТипОснованияПеремещениеТоваров(Форма.Объект.Ссылка) Тогда
		// Не обрабатывается
	ИначеЕсли РасхожденияКлиентСервер.ТипОснованияРеализацияТоваровУслуг(Форма.Объект.ТипОснованияАктаОРасхождении) Тогда 
		
		Форма.Элементы.Подразделение.ТолькоПросмотр = НЕ ВлияющиеРеквизитыДоступны;
		
		УправлениеСпособомОтраженияРасхожденияРеализация(Форма);
		
	ИначеЕсли РасхожденияКлиентСервер.ТипОснованияПриобретениеТоваровУслуг(Форма.Объект.ТипОснованияАктаОРасхождении) Тогда
		
		УправлениеСпособомОтраженияРасхожденияПриобретение(Форма);
		
	КонецЕсли;
	
	Если ((Форма.ЕстьИзлишки Или Форма.ЕстьНедостачи)
	      И ЗначениеЗаполнено(Форма.Объект.СпособОтраженияРасхождений)
	      И (Форма.Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыАктаОРасхождениях.КВыполнению")
	      Или Форма.Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыАктаОРасхождениях.Отработано"))) Тогда
		Форма.Элементы.ОформитьДокументы.Гиперссылка = Истина;
		Форма.Элементы.ОформитьДокументы.Заголовок   = НСтр("ru = 'Оформить документы'");
	Иначе
		Форма.Элементы.ОформитьДокументы.Гиперссылка = Ложь;
		Если ТипОснованияПеремещениеТоваров(Форма.Объект.Ссылка)
			Или ЗначениеЗаполнено(Форма.Объект.СпособОтраженияРасхождений) Тогда
			Форма.Элементы.ОформитьДокументы.Заголовок = НСтр("ru = 'Оформление документов доступно при указанном способе отражения и наличии расхождений в статусах ""Отрабатывается"" и ""Отработано""'");
		Иначе
			Форма.Элементы.ОформитьДокументы.Заголовок  = НСтр("ru = 'Оформление документов доступно при наличии расхождений в статусах ""Отрабатывается"" и ""Отработано""'");
		КонецЕсли;
	КонецЕсли;
	
	СобытияФормКлиентСервер.ПриИзмененииЭлемента(Форма, Форма.Элементы.ОформитьДокументы.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
	                                                             "ТоварыЗаполнитьФактПоПриемке",
	                                                             "Доступность",
	                                                             Форма.Объект.Товары.Количество() > 0);
	
	Форма.Элементы.ТоварыИзменитьДействие.Доступность = Форма.ЕстьИзлишки Или Форма.ЕстьНедостачи;
	
КонецПроцедуры

Процедура УправлениеСпособомОтраженияРасхожденияПриобретение(Форма)
	
	Объект                        = Форма.Объект;
	Элементы                      = Форма.Элементы;
	ДоступныеСпособыОтработкиАкта = Форма.ДоступныеСпособыОтработкиАкта;
	
	Если Не (Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика")
			Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути")
			Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаНеотфактурованнаяПоставка")) Тогда
			
		Элементы.СпособОтраженияРасхожденийИзменениеДокумента.Видимость = Истина;
		Элементы.СпособОтраженияРасхожденийКорректировкаПоступления.Видимость = Ложь;
		Элементы.ГруппаИнформацияОДоступностиСпособаОтражения.Видимость = Ложь;	
		
	Иначе
		
		Элементы.СпособОтраженияРасхожденийИзменениеДокумента.Доступность = 
			ДоступныеСпособыОтработкиАкта.НайтиПоЗначению(
				ПредопределенноеЗначение("Перечисление.СпособыОтраженияАктовОРасхожденияПослеПоступления.ИсправлениеПервичныхДокументов")) <> Неопределено;
		
		Элементы.СпособОтраженияРасхожденийКорректировкаПоступления.Доступность = 
			ДоступныеСпособыОтработкиАкта.НайтиПоЗначению(
				ПредопределенноеЗначение("Перечисление.СпособыОтраженияАктовОРасхожденияПослеПоступления.ОформлениеКорректировокПоступления")) <> Неопределено;
		
	КонецЕсли;
	
	ТребуетсяСообщениеОНесоответствииСпособа = Ложь;
	ОпределитьНеобходимостьОНесоответствииСпособа(Объект, ДоступныеСпособыОтработкиАкта, ТребуетсяСообщениеОНесоответствииСпособа);
	
	ТекстПояснения = ТекстПоясненияСпособОтработкиАктПослеПриобретения(Форма, ТребуетсяСообщениеОНесоответствииСпособа);
	НастроитьЭлементыФормыСпособОтражения(Объект, Элементы, ТребуетсяСообщениеОНесоответствииСпособа, ТекстПояснения);
	
КонецПроцедуры

Процедура ОпределитьНеобходимостьОНесоответствииСпособа(Объект, ДоступныеСпособыОтработкиАкта, ТребуетсяСообщениеОНесоответствииСпособа);
	
	Если ЗначениеЗаполнено(Объект.СпособОтраженияРасхождений)
		И ДоступныеСпособыОтработкиАкта.НайтиПоЗначению(Объект.СпособОтраженияРасхождений) = Неопределено Тогда
			
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыАктаОРасхождениях.Отработано")
			Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыАктаОРасхождениях.КВыполнению") Тогда
			
			ТребуетсяСообщениеОНесоответствииСпособа = Истина;
			
		Иначе
		
			Если ДоступныеСпособыОтработкиАкта.Количество() = 0 Тогда
				Объект.СпособОтраженияРасхождений = Неопределено;
			Иначе
				Объект.СпособОтраженияРасхождений = ДоступныеСпособыОтработкиАкта[0].Значение;
			КонецЕсли;
				
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьЭлементыФормыСпособОтражения(Объект, Элементы, ТребуетсяСообщениеОНесоответствииСпособа, ТекстПояснения)
	
	Элементы.ГруппаИнформацияОДоступностиСпособаОтражения.Видимость = Не ПустаяСтрока(ТекстПояснения);
	Элементы.ИнформацияОДоступностиСпособаОтражения.Заголовок       = ТекстПояснения;
	
	Элементы.ГруппаСпособОтражения.Доступность = Не (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыАктаОРасхождениях.Отработано")
	                                            Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыАктаОРасхождениях.КВыполнению"));
	
	Если ТребуетсяСообщениеОНесоответствииСпособа Тогда
		Элементы.СтраницыИнформацияСпособыОтражения.ТекущаяСтраница = Элементы.СтраницаПроблемаИнформацияСпособОтражения;
	Иначе
		Элементы.СтраницыИнформацияСпособыОтражения.ТекущаяСтраница = Элементы.СтраницаОбычнаяИнформацияСпособОтражения;
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеСпособомОтраженияРасхожденияРеализация(Форма)

	Объект                        = Форма.Объект;
	Элементы                      = Форма.Элементы;
	ДоступныеСпособыОтработкиАкта = Форма.ДоступныеСпособыОтработкиАкта;

	Если Не Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту") Тогда
		
		Элементы.СпособОтраженияРасхожденийИзменениеДокумента.Видимость       = Истина;
		Элементы.СпособОтраженияРасхожденийКорректировкаИсправление.Видимость = Ложь;
		Элементы.СпособОтраженияРасхожденийКорректировкаПоСогласованию.Видимость = Ложь;

		Элементы.СпособОтраженияРасхожденийКорректировкаНовые.Видимость       = Ложь;
		Элементы.ГруппаИнформацияОДоступностиСпособаОтражения.Видимость       = Ложь;
		
	Иначе

		Элементы.СпособОтраженияРасхожденийИзменениеДокумента.Доступность = 
			ДоступныеСпособыОтработкиАкта.НайтиПоЗначению(
				ПредопределенноеЗначение("Перечисление.СпособыОтраженияРасхожденийАктПриемкиКлиента.ИсправлениеПервичныхДокументов")) <> Неопределено;

		Элементы.СпособОтраженияРасхожденийКорректировкаИсправление.Доступность = 
			ДоступныеСпособыОтработкиАкта.НайтиПоЗначению(
				ПредопределенноеЗначение("Перечисление.СпособыОтраженияРасхожденийАктПриемкиКлиента.ОформлениеКорректировкиКакИсправлениеПервичныхДокументов")) <> Неопределено;
				
		Элементы.СпособОтраженияРасхожденийКорректировкаПоСогласованию.Доступность = 
			ДоступныеСпособыОтработкиАкта.НайтиПоЗначению(
				ПредопределенноеЗначение("Перечисление.СпособыОтраженияРасхожденийАктПриемкиКлиента.ОформлениеКорректировкиПоСогласованию")) <> Неопределено;
		
		Элементы.СпособОтраженияРасхожденийКорректировкаНовые.Доступность = 
			ДоступныеСпособыОтработкиАкта.НайтиПоЗначению(
				ПредопределенноеЗначение("Перечисление.СпособыОтраженияРасхожденийАктПриемкиКлиента.ОформлениеКорректировокКакНовыеПервичныеДокументы")) <> Неопределено;
			
	КонецЕсли;
	
	ТребуетсяСообщениеОНесоответствииСпособа = Ложь;
	ОпределитьНеобходимостьОНесоответствииСпособа(Объект, ДоступныеСпособыОтработкиАкта, ТребуетсяСообщениеОНесоответствииСпособа);
	
	ТекстПояснения = ТекстПоясненияСпособОтработкиАктПослеРеализации(Форма, ТребуетсяСообщениеОНесоответствииСпособа);
	НастроитьЭлементыФормыСпособОтражения(Объект, Элементы, ТребуетсяСообщениеОНесоответствииСпособа, ТекстПояснения);

КонецПроцедуры

Функция ТекстПоясненияСпособОтработкиАктПослеПриобретения(Форма, ТребуетсяСообщениеОНесоответствииСпособа)

	ТекстПояснения = "";
	
	Если Форма.ДоступныеСпособыОтработкиАктаПоСостояниюЭДО.НайтиПоЗначению(
		ПредопределенноеЗначение("Перечисление.СпособыОтраженияАктовОРасхожденияПослеПоступления.ИсправлениеПервичныхДокументов")) = Неопределено Тогда
			
		Если Не Форма.ИспользоватьКорректировкиПриобретений  Тогда
	
			ТекстПояснения = НСтр("ru = 'Электронный документ по приобретению подтвержден. Возможна только корректировка приобретения,
			                     |но их использование отключено.'");
			                             
		Иначе
			
			ТекстПояснения = НСтр("ru = 'Электронный документ по приобретению подтвержден. Возможна только корректировка приобретения.'");
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если Форма.ДоступныеСпособыОтработкиАктаПоСостояниюЭДО.НайтиПоЗначению(
			ПредопределенноеЗначение("Перечисление.СпособыОтраженияАктовОРасхожденияПослеПоступления.ОформлениеКорректировокПоступления")) = Неопределено 
			И Форма.ИспользоватьКорректировкиПриобретений Тогда
			
			ТекстПояснения = НСтр("ru = 'Электронный документ по приобретению был отклонен. Возможно только изменение поступления.'");
	
	КонецЕсли;
	
	Если ТребуетсяСообщениеОНесоответствииСпособа Тогда
		
		СообщениеОНесоответствииСпособа = НСтр("ru = 'Текущий способ отражения некорректен. Изменить его можно в статусе ""Не согласовано"" или ""Обеспечивается""'");
		
		ТекстПояснения = ТекстПояснения + Символы.ПС + СообщениеОНесоответствииСпособа;
	
	КонецЕсли;

	Возврат ТекстПояснения;

КонецФункции

Функция ТекстПоясненияСпособОтработкиАктПослеРеализации(Форма, ТребуетсяСообщениеОНесоответствииСпособа)

	ТекстПояснения = "";

	Если Форма.ДоступныеСпособыОтработкиАктаПоСостояниюЭДО.Количество() = 0 Тогда
			
		Если (Форма.СтатусЭДООснования = "ВОбработке"
			Или Форма.СтатусЭДООснования = "Получен"
			Или Форма.СтатусЭДООснования = "ОтклонениеВОбработке"
			Или Форма.СтатусЭДООснования = "УтверждениеВОбработке")Тогда
		
			ТекстПояснения = НСтр("ru = 'Документ-основание участвует в ЭДО, но покупатель пока ни отклонил, ни подтвердил документ.
			                             |Отработка расхождений недоступна.'");
		
		КонецЕсли;
			
	ИначеЕсли Форма.ДоступныеСпособыОтработкиАктаПоСостояниюЭДО.НайтиПоЗначению(
				ПредопределенноеЗначение("Перечисление.СпособыОтраженияРасхожденийАктПриемкиКлиента.ИсправлениеПервичныхДокументов")) = Неопределено Тогда
				
		Если Не Форма.ИспользоватьКорректировкиРеализаций  Тогда
	
			ТекстПояснения = НСтр("ru = 'Электронный документ по реализации подтвержден покупателем. Возможна только корректировка реализации,
			                             |но их использование отключено.'");
			                             
		Иначе
			
			ТекстПояснения = НСтр("ru = 'Электронный документ по реализации подтвержден покупателем. Возможна только корректировка реализации.'");
			
		КонецЕсли;
		
	ИначеЕсли Форма.ДоступныеСпособыОтработкиАктаПоСостояниюЭДО.НайтиПоЗначению(
				ПредопределенноеЗначение("Перечисление.СпособыОтраженияРасхожденийАктПриемкиКлиента.ОформлениеКорректировкиКакИсправлениеПервичныхДокументов")) = Неопределено 
			И Форма.ДоступныеСпособыОтработкиАктаПоСостояниюЭДО.НайтиПоЗначению(
				ПредопределенноеЗначение("Перечисление.СпособыОтраженияРасхожденийАктПриемкиКлиента.ОформлениеКорректировокКакНовыеПервичныеДокументы")) = Неопределено 
			И Форма.ИспользоватьКорректировкиРеализаций Тогда
				
			ТекстПояснения = НСтр("ru = 'Электронный документ по реализации отклонен покупателем. Возможно только изменение реализации.'");
		
	КонецЕсли;
	
	Если ТребуетсяСообщениеОНесоответствииСпособа Тогда
		
		СообщениеОНесоответствииСпособа = НСтр("ru = 'Текущий способ отражения некорректен. Изменить его можно в статусе ""Не согласовано"" или ""Обеспечивается""'");
		
		ТекстПояснения = ТекстПояснения + Символы.ПС + СообщениеОНесоответствииСпособа;
	
	КонецЕсли;

	Возврат ТекстПояснения;

КонецФункции

Процедура ЗаполнитьДокументОснованиеВСтроке(СтрокаТаблицыТовары, ДокументыОснования) Экспорт

	Если Не СтрокаТаблицыТовары.ЗаполненоПоОснованию И Не ЗначениеЗаполнено(СтрокаТаблицыТовары.ДокументОснование) Тогда
		Если ДокументыОснования.Количество() = 1 Тогда
			СтрокаТаблицыТовары.ДокументОснование = ДокументыОснования[0].ДокументОснование;
			УстановитьПризнакОснованиеПоЗаказам(СтрокаТаблицыТовары, ДокументыОснования[0]);
			ЗаполнитьЗаказВСтроке(СтрокаТаблицыТовары, ДокументыОснования);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьЗаказВСтроке(СтрокаТаблицыТовары, ДокументыОснования) Экспорт

	НайденныеСтроки = ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", СтрокаТаблицыТовары.ДокументОснование));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	НайденнаяСтрока = НайденныеСтроки[0];

	Если Не ЗначениеЗаполнено(СтрокаТаблицыТовары.Заказ) Тогда
		Если НайденнаяСтрока.ЗаказыОснования.Количество() = 1 Тогда
			СтрокаТаблицыТовары.Заказ = НайденнаяСтрока.ЗаказыОснования.Получить(0).Значение;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьПризнакОснованиеПоЗаказам(СтрокаТаблицыТовары, СтрокаДокументыОснования) Экспорт
	
	СтрокаТаблицыТовары.ОснованиеПоЗаказам = (СтрокаДокументыОснования.ЗаказыОснования.Количество() > 0);
	
КонецПроцедуры

Процедура УстановитьОтборСтатусаДинамическогоСписка(ДинамическийСписок, СтатусДляОтбора) Экспорт
	
	УстанавливаетсяОтбор = ЗначениеЗаполнено(СтатусДляОтбора);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, 
	                                                                        "Статус",
	                                                                        СтатусДляОтбора, 
	                                                                        ВидСравненияКомпоновкиДанных.Равно,
	                                                                        ,
	                                                                        УстанавливаетсяОтбор);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, 
	                                                                        "Проведен",
	                                                                        Истина, 
	                                                                        ВидСравненияКомпоновкиДанных.Равно,
	                                                                        ,
	                                                                        УстанавливаетсяОтбор);
	
КонецПроцедуры

Процедура ЗаполнитьСделкуВСтроке(ТекущиеДанные, ЗаказыСделки) Экспорт

	Если ТекущиеДанные.ОснованиеПоЗаказам И ЗначениеЗаполнено(ТекущиеДанные.ЗаказПоставщику) Тогда
		
		НайденныеСтроки = ЗаказыСделки.НайтиСтроки(Новый Структура("ЗаказПоставщику", ТекущиеДанные.ЗаказПоставщику));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ТекущиеДанные.Сделка = НайденныеСтроки[0].Сделка;
			Возврат;
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущиеДанные.Сделка = ПредопределенноеЗначение("Справочник.СделкиСКлиентами.ПустаяСсылка");
	
КонецПроцедуры

Функция ИменаРеквизитовВЗависимостиОтТипаАкта(ЭтоАктОРасхожденияхПослеОтгрузки) Экспорт
	
	СтруктураИмен = Новый Структура;
	СтруктураИмен.Вставить("ЗаполненоПоОснованию", ?(ЭтоАктОРасхожденияхПослеОтгрузки,"ЗаполненоПоРеализации","ЗаполненоПоОснованию"));
	СтруктураИмен.Вставить("Основание", ?(ЭтоАктОРасхожденияхПослеОтгрузки,"Реализация","ДокументОснование"));
	СтруктураИмен.Вставить("Заказ", ?(ЭтоАктОРасхожденияхПослеОтгрузки,"ЗаказКлиента","ЗаказПоставщику"));
	СтруктураИмен.Вставить("ОснованиеПоЗаказам", ?(ЭтоАктОРасхожденияхПослеОтгрузки,"РеализацияПоЗаказам","ОснованиеПоЗаказам"));
	
	Возврат СтруктураИмен;
	
КонецФункции

Процедура РассчитатьИтоговыеПоказателиФормы(Форма) Экспорт

	Форма.Недостачи = 0;
	Форма.Излишки   = 0;
	Форма.ЕстьИзлишки     = Ложь;
	Форма.ЕстьНедостачи   = Ложь;
	
	Для Каждого СтрокаТовары Из Форма.Объект.Товары Цикл
		Если СтрокаТовары.СуммаРасхождения > 0 Тогда
			Форма.Излишки = Форма.Излишки + СтрокаТовары.СуммаРасхождения;
		ИначеЕсли СтрокаТовары.СуммаРасхождения < 0 Тогда
			Форма.Недостачи = Форма.Недостачи + (-СтрокаТовары.СуммаРасхождения);
		КонецЕсли;
		Если СтрокаТовары.КоличествоУпаковокРасхождения < 0 Тогда 
			Форма.ЕстьНедостачи   = Истина;
		КонецЕсли;
		Если СтрокаТовары.КоличествоУпаковокРасхождения > 0 Тогда 
			Форма.ЕстьИзлишки   = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Форма.Расхождения = Форма.Объект.Товары.Итог("Сумма") - Форма.Объект.Товары.Итог("СуммаПоДокументу");
	
КонецПроцедуры

Функция ЭтоАктОРасхожденияхПослеОтгрузки(ТипОснованияАктаОРасхождении) Экспорт
	
	Возврат ТипОснованияРеализацияТоваровУслуг(ТипОснованияАктаОРасхождении)
		Или ТипОснованияВозвратПоставщику(ТипОснованияАктаОРасхождении);
	
КонецФункции

Функция ТекстЗапросаОбъединить() Экспорт
	
	Возврат "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции

Функция ИзменитьДействиеВСтроке(Строка, РезультатВыбораПользователя) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбораПользователя.ДействиеНедостачи)
		И Строка.КоличествоУпаковокРасхождения < 0 Тогда
		ВариантДействия = РезультатВыбораПользователя.ДействиеНедостачи;
	Иначе
		ВариантДействия = РезультатВыбораПользователя.ДействиеИзлишки;
	КонецЕсли;
	
	ЕстьРеквизитПоВинеСтороннейКомпании = РезультатВыбораПользователя.Свойство("ПоВинеСтороннейКомпании");
	
	Если Строка.Действие = ВариантДействия Тогда
		Если ЕстьРеквизитПоВинеСтороннейКомпании Тогда
			Если Строка.ПоВинеСтороннейКомпании = РезультатВыбораПользователя.ПоВинеСтороннейКомпании Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного")
		Или ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного")
		Или ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ОприходоватьСейчас")
		Или ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПерепоставленноеДарится")
		Или ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ВернутьПерепоставленноеБезОформления")
		Или ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиПерепоставленноеНаПрочиеДоходы") 
		Или ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть")
		Или ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленное") Тогда
		
		Если НЕ Строка.КоличествоУпаковокРасхождения > 0  Тогда
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка")
		Или ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется")
		Или ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ОтгрузитьСейчас")
		Или ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.НедостачаНеПризнана")
		Или ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачу")
		Или ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьНедостачуИОжидатьДопоставку")
		Или ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиНедостачуНаПрочиеРасходы")
		Или ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОжидатьДопоставкуБезОформления") Тогда
		
		Если НЕ Строка.КоличествоУпаковокРасхождения < 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если (Строка.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга")
		Или Строка.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"))
		И ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОформитьПерепоставленноеИВернуть") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если (Строка.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга")
		Или Строка.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"))
		И ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Строка.Действие = ВариантДействия;
	Если ЕстьРеквизитПоВинеСтороннейКомпании Тогда
		Если ВариантДействия = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОтнестиНедостачуНаПрочиеРасходы") Тогда
			Строка.ПоВинеСтороннейКомпании =  РезультатВыбораПользователя.ПоВинеСтороннейКомпании;
		Иначе
			Строка.ПоВинеСтороннейКомпании =  Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

