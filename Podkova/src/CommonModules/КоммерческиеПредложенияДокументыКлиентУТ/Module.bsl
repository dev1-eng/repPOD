////////////////////////////////////////////////////////////////////////////////
// Подсистема "Объекты УТ11, КА2, УП2".
// ОбщийМодуль.КоммерческиеПредложенияДокументыКлиентУТ.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийИзмененияЭлементовФормы

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииНоменклатуры.
//
Процедура ПриИзмененииНоменклатуры(Форма, ТекущаяСтрока, ТекущийЭлемент, ТребуетсяСерверныйВызов) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриИзмененииНоменклатуры(Форма, ТекущаяСтрока, ТекущийЭлемент, ТребуетсяСерверныйВызов);
		
	КонецЕсли;
	
	КоммерческиеПредложенияДокументыКлиентЛокализация.ПриИзмененииНоменклатуры(Форма, ТекущаяСтрока, ТекущийЭлемент, ТребуетсяСерверныйВызов);
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииХарактеристики.
//
Процедура ПриИзмененииХарактеристики(Форма, ТекущаяСтрока, ТекущийЭлемент, ТребуетсяСерверныйВызов) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриИзмененииХарактеристики(Форма, ТекущаяСтрока, ТекущийЭлемент, ТребуетсяСерверныйВызов)
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииЕдиницыИзмерения.
//
Процедура ПриИзмененииЕдиницыИзмерения(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриИзмененииЕдиницыИзмерения(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииКоличества.
//
Процедура ПриИзмененииКоличества(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриИзмененииКоличества(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииВидаЦены.
//
Процедура ПриИзмененииВидаЦены(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриИзмененииВидаЦены(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииСумма.
//
Процедура ПриИзмененииСумма(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриИзмененииСумма(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииСуммыНДС.
//
Процедура ПриИзмененииСуммыНДС(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриИзмененииСуммыНДС(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииЦены.
//
Процедура ПриИзмененииЦены(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриИзмененииЦены(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииСтавкаНДС.
//
Процедура ПриИзмененииСтавкаНДС(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриИзмененииСтавкаНДС(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииПроцентаРучнойСкидки.
//
Процедура ПриИзмененииПроцентаРучнойСкидки(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриИзмененииПроцентаРучнойСкидки(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииСуммыРучнойСкидки.
//
Процедура ПриИзмененииСуммыРучнойСкидки(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриИзмененииСуммыРучнойСкидки(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииПартнера.
//
Процедура ПриИзмененииПартнера(Форма, ТребуетсяСерверныйВызов) Экспорт

	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриИзмененииПартнера(Форма, ТребуетсяСерверныйВызов);
		
	КонецЕсли;

КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииОрганизации.
//
Процедура ПриИзмененииОрганизации(Форма, ТребуетсяСерверныйВызов) Экспорт

	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриИзмененииОрганизации(Форма, ТребуетсяСерверныйВызов);
		
	КонецЕсли;

КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииХозяйственнойОперации.
//
Процедура ПриИзмененииХозяйственнойОперации(Форма, ТребуетсяСерверныйВызов) Экспорт

	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриИзмененииХозяйственнойОперации(Форма, ТребуетсяСерверныйВызов);
		
	КонецЕсли;

КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииМенеджера.
//
Процедура ПриИзмененииМенеджера(Форма, ТребуетсяСерверныйВызов) Экспорт

	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриИзмененииМенеджера(Форма, ТребуетсяСерверныйВызов);
		
	КонецЕсли;

КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииНалогообложенияНДС.
//
Процедура ПриИзмененииНалогообложенияНДС(Форма, ТребуетсяСерверныйВызов) Экспорт

	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриИзмененииНалогообложенияНДС(Форма, ТребуетсяСерверныйВызов);
		
	КонецЕсли;

КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииЦенаВключаетНДС.
//
Процедура ПриИзмененииЦенаВключаетНДС(Форма, ТребуетсяСерверныйВызов) Экспорт

	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриИзмененииЦенаВключаетНДС(Форма, ТребуетсяСерверныйВызов);
		
	КонецЕсли;

КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииВалюты.
//
Процедура ПриИзмененииВалюты(Форма, ТребуетсяСерверныйВызов) Экспорт

	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриИзмененииПриИзмененииВалюты(Форма, ТребуетсяСерверныйВызов);
		
	КонецЕсли;

КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ТабличнаяЧастьВыбор.
//
Процедура ТабличнаяЧастьВыбор(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ТребуетсяСерверныйВызов) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
	
		КоммерческоеПредложениеКлиентуТоварыВыбор(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ТребуетсяСерверныйВызов);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ТабличнаяЧастьВыбор.
//
Процедура ПослеВыполненияТоварыВыбор(Форма, ИмяПоля, РезультатОбработки) Экспорт
	
		
	Если РезультатОбработки <> Неопределено Тогда
		
		Если ИмяПоля <> "ТоварыКомментарийДляПокупателя"
			Или ИмяПоля <> "ТоварыКомментарийВнутренний" Тогда
			
			ОткрытьФорму("Обработка.РедактированиеНабора.Форма.Форма", РезультатОбработки, Форма, Форма.УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ТабличнаяЧастьВыбор.
//
Процедура ТоварыПередУдалением(Форма, Элемент, ТекущиеДанные, Отказ) Экспорт
	
	НаборыКлиент.ПередУдалениемСтрокиТабличнойЧасти(Форма, "Товары", Отказ, Ложь, "Подключаемый_ОбработкаРезультатаПодбораНоменклатуры");
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииСтатуса.
//
Процедура ПриИзмененииСтатуса(Форма, ТекущаяДата, ТребуетсяСерверныйВызов) Экспорт
	
	КоммерческиеПредложенияДокументыКлиентСерверУТ.СформироватьПредставлениеСостоянияПоСтатусу(Форма, Форма.Объект.Статус, ТекущаяДата);
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииСрокаДействияКоммерческогоПредложения.
//
Процедура ПриИзмененииСрокаДействияКоммерческогоПредложения(Форма, ТекущаяДата, ТребуетсяСерверныйВызов) Экспорт
	
	КоммерческиеПредложенияДокументыКлиентСерверУТ.СформироватьПредставлениеСостоянияПоСтатусу(Форма, Форма.Объект.Статус, ТекущаяДата);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФорм

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПередЗаписью
//
Процедура ПередЗаписью(Форма, Отказ, ПараметрыЗаписи) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПередЗаписью(Форма, Отказ, ПараметрыЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриОткрытии
//
Процедура ПриОткрытии(Форма, Отказ) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриОткрытии(Форма, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриЗакрытии
//
Процедура ПриЗакрытии(Форма, ЗавершениеРаботы) Экспорт

	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриЗакрытии(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ВнешнееСобытие
//
Процедура ВнешнееСобытие(Форма, Источник, Событие, Данные) Экспорт

	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуВнешнееСобытие(Форма, Источник, Событие, Данные);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатуры.
//
Процедура ОткрытьФормуПодбораНоменклатуры(Форма, ОповещениеПриЗавершении) Экспорт

	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуОткрытьФормуПодбораНоменклатуры(Форма, ОповещениеПриЗавершении);
		
	КонецЕсли;

КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ОткрытьФормуЗагрузкиИзВнешнихФайлов.
//
Процедура ОткрытьФормуЗагрузкиИзВнешнихФайлов(Форма, ОповещениеПриЗавершении) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуОткрытьФормуЗагрузкиИзВнешнихФайлов(Форма, ОповещениеПриЗавершении);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриВыполнениеКомандыЗаполнитьУсловияОплаты.
//
Процедура ПриВыполнениеКомандыЗаполнитьУсловияОплаты(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если Не ПустаяСтрока(Объект.УсловияОплатыТекст) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		
		ТекстВопроса = НСтр("ru = 'Условия оплаты будут перезаполнены. Продолжить?'");
		ОповещениеПослеОтветаНаВопрос = Новый ОписаниеОповещения("ПослеОтветНаВопросОбПерезаполненииУсловийОплаты", 
		                                                         ЭтотОбъект, 
		                                                         ДополнительныеПараметры);
		
		ПоказатьВопрос(ОповещениеПослеОтветаНаВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ВыбратьИсточникУсловийОплаты(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриВыполненииКомандыЗаполнитьВидыЦенПоставщика.
//
Процедура ПриВыполненииКомандыЗаполнитьВидыЦенПоставщика(Форма, ОписаниеОповещения) Экспорт
	
	Отбор = Новый Структура;
	
	Отбор.Вставить("Владелец",        Форма.Объект.Поставщик);
	Отбор.Вставить("Валюта",          Форма.Объект.Валюта);
	Отбор.Вставить("ЦенаВключаетНДС", Форма.Объект.ЦенаВключаетНДС);
	
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	
	ОткрытьФорму("Справочник.ВидыЦенПоставщиков.ФормаВыбора", ПараметрыФормы, Форма, , , , ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ПодборНоменклатуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ОбработкаВыбораПодборНоменклатуры.
//
Процедура ОбработкаВыбораПодборНоменклатуры(Форма, ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора) Экспорт

	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
			КоммерческоеПредложениеКлиентуОбработкаВыбораПодборНоменклатуры(Форма, ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора);
			
		ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма" Тогда
			
			КоммерческоеПредложениеКлиентуОбработкаВыбораЗагрузкаИзВнешнихФайлов(Форма, ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ОбработкаОповещенияПодборНоменклатуры.
//
Процедура ОбработкаОповещенияПодборНоменклатуры(Форма, ОповещениеПриЗавершении, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуОбработкаОповещенияПодборНоменклатуры(Форма, ОповещениеПриЗавершении, ИмяСобытия, Параметр, Источник);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеОповещенияПодбораНоменклатуры.
//
Процедура ПослеОповещенияПодбораНоменклатуры(Форма, Результат, ДополнительныеПараметры, ТребуетсяСерверныйВызов) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентПослеОповещенияПодбораНоменклатуры(Форма, Результат, ДополнительныеПараметры, ТребуетсяСерверныйВызов);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеОбработкиОповещенияПодбораНоменклатуры.
//
Процедура ПослеОбработкиОповещенияПодбораНоменклатуры(Форма, ВыбранноеЗначение, РезультатОбработки, ДополнительныеПараметры) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентПослеОбработкиОповещенияПодбораНоменклатуры(Форма, ВыбранноеЗначение, РезультатОбработки, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ОбработкаВыбораПодборНоменклатуры.
//
Процедура ПоказатьВводШтрихкода(Оповещение) Экспорт
	
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеОбработкиШтриховыхКодов.
//
Процедура ПослеОбработкиШтриховыхКодов(Форма, РезультатОбработки) Экспорт
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(РезультатОбработки, РезультатОбработки.КэшированныеЗначения, Форма);
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.НачатьЗагрузкуДанныхИзТСД.
//
Процедура НачатьЗагрузкуДанныхИзТСД(Форма, ОповещениеОЗавершении) Экспорт
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		ОповещениеОЗавершении, Форма.УникальныйИдентификатор);
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриПолученииДанныхИзТСД.
//
Процедура ПриПолученииДанныхИзТСД(ОповещениеОЗавершении, ЭтотОбъект, РезультатВыполнения) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатВыполнения.ТаблицаТоваров);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриВыполненииКомандыЗаполнитьЦеныПоВидуЦен.
//
Процедура ПриВыполненииКомандыЗаполнитьЦеныПоВидуЦен(Форма, ОповещениеОВыборе) Экспорт
	
	Объект = Форма.Объект;
	
	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "Товары", НСтр("ru = 'Товары'")) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ПродажиКлиент.ВыбратьВидЦен( ОповещениеОВыборе, Объект.ЦенаВключаетНДС, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриВыполненииКомандыЗаполнитьЦеныПоУсловиямПродаж.
//
Процедура ПриВыполненииКомандыЗаполнитьЦеныПоУсловиямПродаж(Форма, ОповещениеОВыборе) Экспорт
	
	Объект = Форма.Объект;
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указана валюта. Цены не могут быть заполнены.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Валюта", "Объект", Отказ);
		
	КонецЕсли;
		
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Табличная часть ""Товары"" пустая. Цены не могут быть заполнены.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Товары", "Объект", Отказ);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Клиент) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указан клиент. Цены не могут быть заполнены.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Клиент", "Объект", Отказ);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ХозяйственнаяОперация) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указана операция. Цены не могут быть заполнены.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ХозяйственнаяОперация", "Объект", Отказ);
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДатаДокумента",         Объект.Дата);
	ПараметрыОткрытия.Вставить("Партнер",               Объект.Клиент);
	ПараметрыОткрытия.Вставить("ХозяйственнаяОперация", 
		КоммерческиеПредложенияДокументыКлиентСерверУТ.ХозяйственнаяОперацияДокументаКоммерческоеПредложениеКлиенту(Объект.ХозяйственнаяОперация));
		
		Отбор = Новый Структура;
		Отбор.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
		
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Отбор.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("Отбор", Отбор);
	
	ОткрытьФорму("Справочник.СоглашенияСКлиентами.ФормаВыбора", ПараметрыОткрытия, Форма,,,,
	             ОповещениеОВыборе, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриВыполненииКомандыРазбитьСтроку.
//
Процедура ПриВыполненииКомандыРазбитьСтроку(Форма, ТекущаяСтрока, ОповещениеОЗавершении) Экспорт
	
	Объект = Форма.Объект;
	
	ТаблицаФормы  = Форма.Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	
	ПараметрыРазбиенияСтроки = ОбщегоНазначенияУТКлиент.ПараметрыРазбиенияСтроки();
	ПараметрыРазбиенияСтроки.ИмяПоляКоличество          = "Количество";
	ПараметрыРазбиенияСтроки.РазрешитьНулевоеКоличество = Ложь;
	
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(
		ДанныеТаблицы,
		ТаблицаФормы,
		ОповещениеОЗавершении,
		ПараметрыРазбиенияСтроки);
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриВыполненииКомандыРазбитьСтроку.
//
Процедура ПриВыполненииКомандыРассчитатьСкидки(Форма, ТребуетсяСерверныйВызов) Экспорт
	
	ТребуетсяСерверныйВызов = Истина;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриВыполненииКомандыОткрытьИнформациюОСкидках.
//
Процедура ПриВыполненииКомандыОткрытьИнформациюОСкидках(Форма, ТребуетсяСерверныйВызов) Экспорт
	
	ТребуетсяСерверныйВызов = Истина;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриВыполненииКомандыОткрытьИнформациюОСкидках.
//
Процедура ПриВыполненииКомандыНазначитьРучнуюСкидку(Форма, ВыделенныеСтроки, СтандартнаяОбработка, ТребуетсяСерверныйВызов) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Объект = Форма.Объект;

	Если СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", НСтр("ru = 'Товары'")) Тогда
		ТребуетсяСерверныйВызов = Истина;
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриВыполненииКомандыНазначитьАвтоматическиеСкидки.
//
Процедура ПриВыполненииКомандыНазначитьАвтоматическиеСкидки(Форма, ОповещениеОЗавершении, ТребуетсяСерверныйВызов) Экспорт
	
	ТребуетсяСерверныйВызов = Истина;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеНазначенияАвтоматическойСкидки.
//
Процедура ПослеНазначенияАвтоматическойСкидки(Форма, Результат, ТребуетсяСерверныйВызов) Экспорт
	
	Форма.УправляемыеСкидки = Результат;
	ТребуетсяСерверныйВызов = Истина;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеРасчетаНазначенныхАвтоматическихСкидок.
//
Процедура ПослеРасчетаНазначенныхАвтоматическихСкидок(Форма, Результат) Экспорт
	
	Если ТипЗнч("Результат") = Тип("Структура") 
		И Результат.Свойство("Сообщения")
		И Результат.Сообщения.Количество() > 0 
		И Результат.АвтоматическиОткрывать Тогда
			ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", Результат, Форма, Форма.УникальныйИдентификатор);
	КонецЕсли;
		
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Скидки (наценки)'"),
		,
		НСтр("ru = 'Скидки (наценки) рассчитаны'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеПодготовкиНазначенияАвтоматическихСкидок.
//
Процедура ПослеПодготовкиНазначенияАвтоматическихСкидок(Форма, ОповещениеОЗавершении, Результат) Экспорт
	
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияУправляемыхСкидокНаценок(Результат, ОповещениеОЗавершении);
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриВыполненииКомандыОткрытьИнформациюОСкидках.
//
Процедура ПослеПодготовкиНазначенияРучныхСкидок(Форма, ВыделенныеСтроки, ОповещениеПослеНазначенияРучнойСкидки, РезультатОбработки) Экспорт
	
	Объект = Форма.Объект;
	
	ОповещениеПослеНазначенияРучнойСкидки.ДополнительныеПараметры.Вставить("АдресВоВременномХранилище", РезультатОбработки);
	ОповещениеПослеНазначенияРучнойСкидки.ДополнительныеПараметры.Вставить("СтандартнаяОбработка",      Ложь);
	ОповещениеПослеНазначенияРучнойСкидки.ДополнительныеПараметры.Вставить("ТребуетсяСерверныйВызов",   Истина);
	
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
		РезультатОбработки,
		Объект.Валюта,
		ОповещениеПослеНазначенияРучнойСкидки);
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеЗавершенияНазначенияРучныхСкидок.
//
Процедура ПослеЗавершенияНазначенияРучныхСкидок(Форма, ВыделенныеСтроки, Результат) Экспорт
	
	Объект = Форма.Объект;
	
	СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(Результат, Объект.Валюта);
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриВыполненииКомандыОткрытьИнформациюОСкидках.
//
Процедура ПриВыполненииКомандыОтменитьРучныеСкидки(Форма, ВыделенныеСтроки, ЦенаВключаетНДС, Налогообложение, ТребуетсяСерверныйВызов) Экспорт
	
	Объект = Форма.Объект;
	
	Если СкидкиНаценкиКлиент.ВозможнаОтменаРучныхСкидокНаценок(Объект, "Товары", НСтр("ru = 'Товары'")) Тогда
		ТребуетсяСерверныйВызов = Истина;
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеОтменыРучныхСкидок.
//
Процедура ПослеОтменыРучныхСкидок(Форма, ВыделенныеСтроки, РезультатОбработки) Экспорт
	
	 СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок();
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриВыполненииПереопределяемойКоманды.
//
Процедура ПриВыполненииПереопределяемойКоманды(Форма, Команда, ТребуетсяСерверныйВызов) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриВыполненииПереопределяемойКоманды(Форма, Команда, ТребуетсяСерверныйВызов);
		
	КонецЕсли;
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(Форма, Команда);
		
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ВыполнитьПодключаемуюКомандуИнтеграции.
//
Процедура ВыполнитьПодключаемуюКомандуИнтеграции(Команда, Форма, Объект) Экспорт
	
	КоммерческиеПредложенияДокументыКлиентЛокализация.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, Форма, Объект);
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПредложитьПользователюРассчитатьСкидки.
//
Процедура ПредложитьПользователюРассчитатьСкидки(ЭтотОбъект, Отказ, ОповещениеПослеЗакрытия) Экспорт
	
	СкидкиНаценкиКлиент.ПредложитьПользователюРассчитатьСкидки(ОповещениеПослеЗакрытия);
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеВыполненияПереопределяемойКоманды.
//
Процедура ПослеВыполненияПереопределяемойКоманды(Форма, Команда, Результат) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПослеВыполненияПереопределяемойКоманды(Форма, Команда, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеРасчетаСкидок.
//
Процедура ПослеРасчетаСкидок(Форма, РезультатРасчета) Экспорт
	
	Если РезультатРасчета.Сообщения.Количество() > 0 И РезультатРасчета.АвтоматическиОткрывать Тогда
		ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", РезультатРасчета, Форма, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Скидки (наценки)'"),
		,
		НСтр("ru = 'Скидки (наценки) рассчитаны'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеПодготовкиОткрытияИнформацииОСкидках.
//
Процедура ПослеПодготовкиОткрытияИнформацииОСкидках(Форма, Результат) Экспорт
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("Сообщения")
		И Результат.Сообщения.Количество() > 0 
		И Результат.АвтоматическиОткрывать Тогда
		
		ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", Результат, Форма, Форма.УникальныйИдентификатор);
		
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ИмяКолонкиКоличество", "Количество");
	СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, Форма, ПараметрыОткрытия);
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ОткрытьФормуСпискаЗаказаПоставщику.
//
Процедура ОткрытьФормуСпискаЗаказаПоставщику(Знач МассивСсылок) Экспорт

	ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ФиксированныеНастройки.Отбор,
				"Ссылка",
				МассивСсылок,
				ВидСравненияКомпоновкиДанных.ВСписке);
	
	ПараметрыОткрытия = Новый Структура("ФиксированныеНастройки, ТолькоПросмотр", ФиксированныеНастройки, Истина);
	
	ОткрытьФорму("Документ.ЗаказПоставщику.ФормаСписка", ПараметрыОткрытия);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КоммерческоеПредложениеКлиенту

Процедура КоммерческоеПредложениеКлиентуПриОткрытии(Форма, Отказ)
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, Форма, "СканерШтрихкода");
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриЗакрытии(Форма)
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, Форма);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуВнешнееСобытие(Форма, Источник, Событие, Данные)
	
	Если Не Форма.ВводДоступен() Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Источник", Источник);
	ОписаниеСобытия.Вставить("Событие" , Событие);
	ОписаниеСобытия.Вставить("Данные"  , Данные);
	
	Результат = МенеджерОборудованияКлиент.ПолучитьСобытиеОтУстройства(ОписаниеСобытия);
	
	Если Результат <> Неопределено
		И Результат.Источник = "ПодключаемоеОборудование"
		И Результат.ИмяСобытия = "ScanData"
		И Найти(Форма.ПоддерживаемыеТипыПодключаемогоОборудования, "СканерШтрихкода") > 0 Тогда
		
		Результат = МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Результат.Параметр);
		
		ВыполнитьОбработкуОповещения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", Форма), Результат);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПередЗаписью(Форма, Отказ, ПараметрыЗаписи)
	
	Если Форма.НастройкиУчета.ИспользуютсяАвтоматическиеСкидкиВПродажах
		И Не Форма.Объект.СкидкиРассчитаны Тогда
		ПараметрыЗаписи.ТребуетсяВопросОРасчетеСкидок = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриИзмененииНоменклатуры(Форма, ТекущаяСтрока, ТекущийЭлемент, ТребуетсяСерверныйВызов)
	
	Объект                  = Форма.Объект;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	НалогообложениеНДС = КоммерческиеПредложенияДокументыКлиентСерверУТ.НалогообложениеНДСПоНалогообложениюКоммерческихПредложений(Объект.Налогообложение);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",          ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу",       ТекущаяСтрока.ЕдиницаИзмерения);
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи",                        ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",             Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",                          Новый Структура("НалогообложениеНДС, Дата",НалогообложениеНДС, Объект.Дата));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",                         СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",                        СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму",                            "Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",         Новый Структура("Очищать, ИмяКоличества", Истина, "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать, ИмяКоличества", Истина, "Количество"));
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый",    СтруктураПереопределяемыеДействия(Форма));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(Форма);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриИзмененииХарактеристики(Форма, ТекущаяСтрока, ТекущийЭлемент, ТребуетсяСерверныйВызов)
	
	Объект                  = Форма.Объект;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи",                        ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",                         СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",                        СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму",                            "Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",         Новый Структура("Очищать, ИмяКоличества", Истина, "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать, ИмяКоличества", Истина, "Количество"));
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый",  СтруктураПереопределяемыеДействия(Форма));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(Форма);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриИзмененииЕдиницыИзмерения(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов)
	
	Объект                  = Форма.Объект;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
		СтруктураЗаполненияЦены = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект);
		СтруктураЗаполненияЦены.Вставить("ИмяКолонкиУпаковка", "ЕдиницаИзмерения");
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураЗаполненияЦены);
	ИначеЕсли ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
		СтруктураДействий.Вставить("ПересчитыватьКоличествоЕдиницПриПересчетеЦеныЗаУпаковку");
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",                         СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",                        СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму",                            "Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",         Новый Структура("Очищать, ИмяКоличества", Ложь,   "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать, ИмяКоличества", Истина, "Количество"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(Форма);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриИзмененииКоличества(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов)
	
	Объект                  = Форма.Объект;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",                         СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",                        СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму",                            "Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",         Новый Структура("Очищать, ИмяКоличества", Ложь,   "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать, ИмяКоличества", Истина, "Количество"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(Форма);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриИзмененииВидаЦены(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов)
	
	Объект                  = Форма.Объект;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи",                        ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",                         СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",                        СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму",                            "Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",         Новый Структура("Очищать, ИмяКоличества", Ложь,   "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать, ИмяКоличества", Истина, "Количество"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(Форма);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриИзмененииЦены(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов)
	
	Объект                  = Форма.Объект;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи",                        ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",                         СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",                        СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму",                            "Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",         Новый Структура("Очищать, ИмяКоличества", Ложь,   "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать, ИмяКоличества", Истина, "Количество"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(Форма);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриИзмененииСтавкаНДС(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов)
	
	Объект                  = Форма.Объект;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",                         СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",                        СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму",                            "Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",         Новый Структура("Очищать, ИмяКоличества", Ложь,   "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать, ИмяКоличества", Истина, "Количество"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(Форма);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриИзмененииСумма(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов)
	
	Объект = Форма.Объект;
	
	ЭтоПередачаТоваров = Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ВидыОперацийКоммерческихПредложений.ПриемНаКомиссию");
	
	СтруктураПересчетаЦены  = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ(Объект, ЭтоПередачаТоваров);
	СтруктураПересчетаЦены.Вставить("ИмяКоличества", "Количество");
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураПересчетаЦены);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",                   СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",                  СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(Форма);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриИзмененииСуммыНДС(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов)
	
	Объект                  = Форма.Объект;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриИзмененииПроцентаРучнойСкидки(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов)
	
	Объект                  = Форма.Объект;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки",                "Количество");
	СтруктураДействий.Вставить("ПересчитатьСумму",                            "Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",         Новый Структура("Очищать, ИмяКоличества", Ложь,   "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать, ИмяКоличества", Ложь, "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",                         СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",                        СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриИзмененииСуммыРучнойСкидки(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов) 
	
	Объект                  = Форма.Объект;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки",               "Количество");
	СтруктураДействий.Вставить("ПересчитатьСумму",                             "Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",          Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки, ИмяКоличества",
	                                                                                           Ложь, Ложь, "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки",  Новый Структура("Очищать, ИмяКоличества", Ложь, "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",                          СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",                         СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуТоварыВыбор(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ТребуетсяСерверныйВызов)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Элемент.Имя = "Товары" Тогда
	
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
		Если ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.НоменклатураНабора) Тогда
			
			Если Поле.Имя <> "ТоварыКомментарийДляПокупателя"
				Или Поле.Имя <> "ТоварыКомментарийВнутренний" Тогда
			
				ТребуетсяСерверныйВызов = Истина;
				
			КонецЕсли;
			
		Иначе
			
			Если Поле.Имя = "ТоварыЦена" Тогда
			
				Если ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.НоменклатураНабора) Тогда
					ТребуетсяСерверныйВызов = Истина;
					Возврат;
				КонецЕсли;
				
				ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
				Если ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) Тогда
					ОчиститьСообщения();
					ОбщегоНазначенияКлиент.СообщитьПользователю(
						НСтр("ru = 'Для редактирования цены выберите вид цены ""<произвольная>""'"),
						Объект.Ссылка,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущиеДанные.НомерСтроки, "ВидЦены"),);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриИзмененииПартнера(Форма, ТребуетсяСерверныйВызов)
	
	ТребуетсяСерверныйВызов = Истина;
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(Форма);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриИзмененииНалогообложенияНДС(Форма, ТребуетсяСерверныйВызов)
	
	ТребуетсяСерверныйВызов = Истина;
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(Форма);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриИзмененииЦенаВключаетНДС(Форма, ТребуетсяСерверныйВызов)
	
	ТребуетсяСерверныйВызов = Истина;
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(Форма);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриИзмененииПриИзмененииВалюты(Форма, ТребуетсяСерверныйВызов)
	
	Объект = Форма.Объект;
	
	Если ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Объект, Форма.ВалютаДокумента) Тогда
		
		ТребуетсяСерверныйВызов = Истина;
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(Форма.ВалютаДокумента, Объект.Валюта);
		
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(Форма);

КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриИзмененииОрганизации(Форма, ТребуетсяСерверныйВызов)
	
	ТребуетсяСерверныйВызов = Истина;
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриИзмененииХозяйственнойОперации(Форма, ТребуетсяСерверныйВызов);
	
	ТребуетсяСерверныйВызов = Истина;
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриИзмененииМенеджера(Форма, ТребуетсяСерверныйВызов)

	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(Форма);

КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуОткрытьФормуПодбораНоменклатуры(Форма, ОповещениеПриЗавершении)
	
	Объект = Форма.Объект;
	
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Поле ""Валюта"" не заполнено'"), Объект.Ссылка, "Объект.Валюта");
		Возврат;
	КонецЕсли;
	
	Если Форма.НастройкиУчета.ИспользуютсяВидыЦен Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		
		ОповещениеПослеВыбораЦеныДляПодбора = Новый ОписаниеОповещения("ПослеВыбораЦенДляПодбора", ЭтотОбъект, ДополнительныеПараметры);
		
		ВидЦеныПрайсЛист = ЦенообразованиеВызовСервера.ВидЦеныПрайсЛист();
		Если ВидЦеныПрайсЛист <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПослеВыбораЦеныДляПодбора, ВидЦеныПрайсЛист);
			Возврат;
		КонецЕсли;
		
		СтруктураОтбор = Новый Структура;
		СтруктураОтбор.Вставить("ЦенаВключаетНДС",        Объект.ЦенаВключаетНДС);
		СтруктураОтбор.Вставить("ИспользоватьПриПродаже", Истина);
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Отбор", СтруктураОтбор);
		ПараметрыОткрытияФормы.Вставить("Заголовок", НСтр("ru = 'Вид цены для отображения в подборе'"));
		
		ОткрытьФорму("Справочник.ВидыЦен.ФормаВыбора",
		             ПараметрыОткрытияФормы,,,,,
		             ОповещениеПослеВыбораЦеныДляПодбора);
		
	Иначе
		
		КоммерческоеПредложениеКлиентуОткрытьФормуПодбораНоменклатурыПродолжение(Форма, ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка"), ОповещениеПриЗавершении);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыбораЦенДляПодбора(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка");
	Иначе
		ВидЦены = Результат;
	КонецЕсли;
	
	КоммерческоеПредложениеКлиентуОткрытьФормуПодбораНоменклатурыПродолжение(ДополнительныеПараметры.Форма, 
	                                                                         ВидЦены, 
	                                                                         ДополнительныеПараметры.ОповещениеПриЗавершении);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуОткрытьФормуПодбораНоменклатурыПродолжение(Форма, ВидЦены, ОповещениеПриЗавершении) Экспорт
	
	Объект = Форма.Объект;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'коммерческое предложение клиенту'"));
	КонецЕсли;
	
	НалогообложениеНДС              = КоммерческиеПредложенияДокументыКлиентСерверУТ.НалогообложениеНДСПоНалогообложениюКоммерческихПредложений(Объект.Налогообложение);
	МассивОтборовПоТипуНоменклатуры = КоммерческиеПредложенияДокументыКлиентСерверУТ.МассивОтборовПоТипуНоменклатуры(Объект.ХозяйственнаяОперация);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",                         Объект.Организация);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС",                     Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("НалогообложениеНДС",                  НалогообложениеНДС);
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры",             МассивОтборовПоТипуНоменклатуры);
	ПараметрыФормы.Вставить("СкрыватьРучныеСкидки",                Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ВидыОперацийКоммерческихПредложений.ПриемНаКомиссию"));
	ПараметрыФормы.Вставить("ОстаткиПоВсемСкладам",                Истина);
	ПараметрыФормы.Вставить("Валюта",                              Объект.Валюта);
	ПараметрыФормы.Вставить("Заголовок",                           ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата",                                Объект.Дата);
	ПараметрыФормы.Вставить("Документ",                            Объект.Ссылка);
	ПараметрыФормы.Вставить("ВидЦены",                             ВидЦены);
	ПараметрыФормы.Вставить("РежимПодбораБезСоглашенийСКлиентами", Истина);
	
	Если Форма.ПоЗапросу Тогда
		
		ПараметрыФормы.Вставить("НеРазбиватьНаборыПоКомплектующим",Истина);
		
		ВариантыПредставленияНабораВПечатныхФормах = Новый Массив;
		ВариантыПредставленияНабораВПечатныхФормах.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ПустаяСсылка"));
		ВариантыПредставленияНабораВПечатныхФормах.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоНабор"));
		
		ПараметрыФормы.Вставить("ОтборПоВариантуПредставленияНабораВПечатныхФормах", ВариантыПредставленияНабораВПечатныхФормах);
		
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, Форма, Форма.УникальныйИдентификатор);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуОбработкаВыбораПодборНоменклатуры(Форма, ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора)
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(Форма);
	ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ВыбранноеЗначение);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуОбработкаВыбораЗагрузкаИзВнешнихФайлов(Форма, ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(Форма);
	ВыполнитьОбработкуОповещения(Новый ОписаниеОповещения("ЗагрузитьИзВнешнегоФайлаЗавершение", Форма), ВыбранноеЗначение);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуОбработкаОповещенияПодборНоменклатуры(Форма, ОповещениеПриЗавершении, ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = Форма.УникальныйИдентификатор Тогда
		
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ВыполнитьОбработкуОповещения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", Форма), ДанныеШтрихкодов);
		
	ИначеЕсли ИмяСобытия = "Закрытие_РедактированиеКомплекта"
		И Параметр.ФормаВладелец = Форма.УникальныйИдентификатор Тогда
		
		Параметр.Вставить("РедактированиеНабора", Истина);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Параметр);
		
	ИначеЕсли ИмяСобытия = "РедактироватьНабор"
		И Параметр.ФормаВладелец = Форма.УникальныйИдентификатор Тогда
		
		Параметр.Вставить("РедактироватьНабор", Истина);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Параметр);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентПослеОповещенияПодбораНоменклатуры(Форма, Результат, ДополнительныеПараметры, ТребуетсяСерверныйВызов)
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		
		Если НаборыКлиент.ДействиеРедактироватьНабор(Результат) Тогда
			НаборыКлиент.ПриУдаленииКомплектующих(Форма, "Товары", ДополнительныеПараметры)
		ИначеЕсли НаборыКлиент.ДействиеУдалитьВесьНабор(Результат) Тогда
			ТребуетсяСерверныйВызов = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Свойство("АдресТоваровВХранилище") Тогда
			ТребуетсяСерверныйВызов = Истина;
		ИначеЕсли Результат.Свойство("РедактированиеНабора") Тогда
			ТребуетсяСерверныйВызов = Истина;
		ИначеЕсли Результат.Свойство("РедактироватьНабор") Тогда
			ТребуетсяСерверныйВызов = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентПослеОбработкиОповещенияПодбораНоменклатуры(Форма, ВыбранноеЗначение, РезультатОбработки, ДополнительныеПараметры)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если ВыбранноеЗначение.Свойство("РедактироватьНабор") Тогда
		
			Если РезультатОбработки <> Неопределено Тогда
				
				ОткрытьФорму("Обработка.РедактированиеНабора.Форма.Форма", РезультатОбработки, Форма, Форма.УникальныйИдентификатор);
				
			КонецЕсли;
			
		ИначеЕсли ВыбранноеЗначение.Свойство("РедактированиеНабора") Тогда
			
			Форма.Подключаемый_РассчитатьИтоговыеПоказателиФормы();
			Форма.Модифицированность = Истина;
			
		ИначеЕсли ВыбранноеЗначение.Свойство("АдресТоваровВХранилище") Тогда
			
			Форма.Подключаемый_РассчитатьИтоговыеПоказателиФормы();
			Форма.Модифицированность = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка")
		И ВыбранноеЗначение = "УдалитьВесьНабор" Тогда
		
		Форма.Подключаемый_РассчитатьИтоговыеПоказателиФормы();
		Форма.Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуОткрытьФормуЗагрузкиИзВнешнихФайлов(Форма, ОповещениеПриЗавершении)
	
	Объект = Форма.Объект;
	
	НалогообложениеНДС              = КоммерческиеПредложенияДокументыКлиентСерверУТ.НалогообложениеНДСПоНалогообложениюКоммерческихПредложений(Объект.Налогообложение);
	МассивОтборовПоТипуНоменклатуры = КоммерческиеПредложенияДокументыКлиентСерверУТ.МассивОтборовПоТипуНоменклатуры(Объект.ХозяйственнаяОперация);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЗагружатьЦены",           Истина);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС",         Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("НалогообложениеНДС",      НалогообложениеНДС);
	ПараметрыФормы.Вставить("Дата",                    Объект.Дата);
	ПараметрыФормы.Вставить("Валюта",                  Объект.Валюта);
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(МассивОтборовПоТипуНоменклатуры));
	
	ОткрытьФорму(
		"Обработка.ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма",
		ПараметрыФормы,
		Форма,
		Форма.УникальныйИдентификатор);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриВыполненииПереопределяемойКоманды(Форма, Команда, ТребуетсяСерверныйВызов)
	
	Элементы = Форма.Элементы;
	
	Если Команда.Имя = "ПоказатьСообщения" Тогда
		
		ТребуетсяСерверныйВызов = Истина;
		
	ИначеЕсли Команда.Имя = "ПоказатьНаборы" Тогда
		
		Элементы.ТоварыГруппаНаборы.Видимость = Не Элементы.ТоварыГруппаНаборы.Видимость;
		Элементы.ПоказатьНаборы.Пометка       = Не Элементы.ПоказатьНаборы.Пометка;
		
	ИначеЕсли Команда.Имя = "СоставНабора" Тогда
		
		ТребуетсяСерверныйВызов = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПослеВыполненияПереопределяемойКоманды(Форма, Команда, Результат)

	Если Команда.Имя = "ПоказатьСообщения" Тогда
		
		СкидкиНаценкиКлиент.ОткрытьФормуСообщений(Результат, Форма);
		
	ИначеЕсли Команда.Имя = "СоставНабора" Тогда
		
		Если Результат <> Неопределено Тогда
			
			ОткрытьФорму("Обработка.РедактированиеНабора.Форма.Форма", Результат, Форма, Форма.УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

Функция СтруктураПереопределяемыеДействия(Форма) Экспорт
	
	СтруктураПереопределяемыеДействия = Новый Структура;
	СтруктураПереопределяемыеДействия.Вставить("ИмяФормы",          Форма.ИмяФормы);
	СтруктураПереопределяемыеДействия.Вставить("ИмяТабличнойЧасти", "Товары");
	
	Возврат СтруктураПереопределяемыеДействия;
	
КонецФункции

Процедура ВыбратьИсточникУсловийОплаты(Форма)
	
	Объект = Форма.Объект;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	ОписаниеОВыбореУсловий = Новый ОписаниеОповещения("ПослеВыбораУсловийОплаты", ЭтотОбъект, ДополнительныеПараметры);
	
	Если Форма.ИспользоватьСоглашенияСКлиентами Тогда
		
		Отказ = Ложь;
		
		Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
			
			ТекстСообщения = НСтр("ru = 'Не указана валюта. Цены не могут быть заполнены.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Валюта", "Объект", Отказ);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Клиент) Тогда
			
			ТекстСообщения = НСтр("ru = 'Не указан клиент. Цены не могут быть заполнены.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Клиент", "Объект", Отказ);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ХозяйственнаяОперация) Тогда
			
			ТекстСообщения = НСтр("ru = 'Не указана операция. Цены не могут быть заполнены.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ХозяйственнаяОперация", "Объект", Отказ);
			
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ДатаДокумента",         Объект.Дата);
		ПараметрыОткрытия.Вставить("Партнер",               Объект.Клиент);
		ПараметрыОткрытия.Вставить("ХозяйственнаяОперация", 
		КоммерческиеПредложенияДокументыКлиентСерверУТ.ХозяйственнаяОперацияДокументаКоммерческоеПредложениеКлиенту(Объект.ХозяйственнаяОперация));
		ПараметрыОткрытия.Вставить("Организация",           Объект.Организация);
		
		Отбор = Новый Структура;
		Отбор.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
		
		ПараметрыОткрытия.Вставить("Отбор", Отбор);
		
		ОткрытьФорму("Справочник.СоглашенияСКлиентами.ФормаВыбора", ПараметрыОткрытия, Форма,,,,
		              ОписаниеОВыбореУсловий, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Форма.ИспользоватьГрафикиОплаты Тогда
		
		ОткрытьФорму("Справочник.ГрафикиОплаты.ФормаВыбора", ПараметрыОткрытия, Форма,,,,
		              ОписаниеОВыбореУсловий, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеОтветНаВопросОбПерезаполненииУсловийОплаты(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ВыбратьИсточникУсловийОплаты(ДополнительныеПараметры.Форма);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПослеВыбораУсловийОплаты(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		
		Форма = ДополнительныеПараметры.Форма;
		
		Форма.Объект.УсловияОплатыТекст = КоммерческиеПредложенияДокументыУТВызовСервера.УсловияОплатыТекстом(Результат);
		
	КонецЕсли;

КонецПроцедуры


#КонецОбласти
