
#Область ПрограммныйИнтерфейс

#Область ОписаниеДереваЭтапов

#Область ОписаниеГруппЭтапов

// Заполнение таблицы групп этапов закрытия месяца.
// Элементы данной таблицы являются элементами верхнего уровня в дереве этапов в форме закрытия месяца.
//
// Параметр:
//	ТаблицаГруппЭтапов - Таблица значений - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуОписанияГруппЭтапов().
//
Процедура ЗаполнитьОписаниеГруппЭтаповЗакрытияМесяца(ТаблицаГруппЭтапов) Экспорт
	
	НоваяСтрока = ТаблицаГруппЭтапов.Добавить();
	НоваяСтрока.Код = ИдентификаторГруппыРучныеОперации();
	НоваяСтрока.Наименование = НСтр("ru='Данные операции требуется выполнить вручную'");
	
	НоваяСтрока = ТаблицаГруппЭтапов.Добавить();
	НоваяСтрока.Код = ИдентификаторГруппыВзаиморасчеты();
	НоваяСтрока.Наименование = НСтр("ru='Взаиморасчеты и переоценка валютных средств'");
	
	НоваяСтрока = ТаблицаГруппЭтапов.Добавить();
	НоваяСтрока.Код = ИдентификаторГруппыФормированиеЗатрат();
	НоваяСтрока.Наименование = НСтр("ru='Формирование затрат'");
	
	НоваяСтрока = ТаблицаГруппЭтапов.Добавить();
	НоваяСтрока.Код = ИдентификаторГруппыПроизводственныеЗатраты();
	НоваяСтрока.Наименование = НСтр("ru='Распределение производственных затрат'");
	
	НоваяСтрока = ТаблицаГруппЭтапов.Добавить();
	НоваяСтрока.Код = ИдентификаторГруппыСебестоимость();
	НоваяСтрока.Наименование = НСтр("ru='Расчет себестоимости'");
	
	НоваяСтрока = ТаблицаГруппЭтапов.Добавить();
	НоваяСтрока.Код = ИдентификаторГруппыФормированиеФинансовогоРезультата();
	НоваяСтрока.Наименование = НСтр("ru='Формирование финансового результата'");
	
	НоваяСтрока = ТаблицаГруппЭтапов.Добавить();
	НоваяСтрока.Код = ИдентификаторГруппыРегламентированныйУчет();
	НоваяСтрока.Наименование = НСтр("ru='Регламентированный учет'");
	
	НоваяСтрока = ТаблицаГруппЭтапов.Добавить();
	НоваяСтрока.Код = ИдентификаторГруппыУчетПоУСН();
	НоваяСтрока.Наименование = НСтр("ru='Учет по УСН'");
	
	НоваяСтрока = ТаблицаГруппЭтапов.Добавить();
	НоваяСтрока.Код = ИдентификаторГруппыМеждународныйУчет();
	НоваяСтрока.Наименование = НСтр("ru='Международный учет'");
	
КонецПроцедуры

#Область ИдентификаторыГруппЭтапов

// В данной области расположены идентификаторы групп этапов закрытия месяца.
// Для групп этапов используются строковые идентификаторы, т.к. для них нет потребности в ссылочных идентификаторах.

Функция ИдентификаторГруппыРучныеОперации()
	Возврат "РучныеОперации";
КонецФункции

Функция ИдентификаторГруппыВзаиморасчеты()
	Возврат "Взаиморасчеты";
КонецФункции

Функция ИдентификаторГруппыФормированиеЗатрат()
	Возврат "ФормированиеЗатрат";
КонецФункции

Функция ИдентификаторГруппыПроизводственныеЗатраты()
	Возврат "ПроизводственныеЗатраты";
КонецФункции

Функция ИдентификаторГруппыСебестоимость()
	Возврат "Себестоимость";
КонецФункции

Функция ИдентификаторГруппыФормированиеФинансовогоРезультата()
	Возврат "ФормированиеФинансовогоРезультата";
КонецФункции

Функция ИдентификаторГруппыРегламентированныйУчет()
	Возврат "РегламентированныйУчет";
КонецФункции

Функция ИдентификаторГруппыУчетПоУСН()
	Возврат "УчетПоУСН";
КонецФункции

Функция ИдентификаторГруппыМеждународныйУчет()
	Возврат "МеждународныйУчет";
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОписаниеЭтапов

// Заполнение таблицы этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
//
// Параметр:
//	ТаблицаЭтапов - Таблица значений - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуОписанияЭтапов().
//
Процедура ЗаполнитьОписаниеЭтаповЗакрытияМесяца(ТаблицаЭтапов) Экспорт

	#Область Группа_РучныеОперации
	
	ТекущийРодитель = ИдентификаторГруппыРучныеОперации();
	
	// Переход на новые режимы учета.
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ПереходНаНовыеРежимыУчета,
		Истина, Ложь, Ложь);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.Информационный = Истина;
	НоваяСтрока.ТекстПодробнее     = ТекстПодробнееПоУмолчанию();
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ПереходНаНовыеРежимыРаботы");
	НоваяСтрока.ДействиеПодробнее  = ОписаниеДействия_ОткрытьСправкуОбъекта(
		Метаданные.Обработки.ОперацииЗакрытияМесяца.Формы.ФормаСправкиПереходНаНовыеРежимыРаботы);
	
	// Ошибки в данных.
	РасчетСебестоимостиКорректировкаСтоимости.ДобавитьЭтап_ОчисткаДвиженийПриОтключенномУчетеСебестоимости(ТаблицаЭтапов, ТекущийРодитель);
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ИсправлениеДублейВидовЗапасов,
		Истина, Ложь, Ложь);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстВыполнить     = НСтр("ru='Исправить'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ИсправлениеДублейВидовЗапасов");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Справочники.ВидыЗапасов.Формы.ФормаСписка.ПолноеИмя());
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ИсправлениеОшибокВИсходныхДанных);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстПодробнее     = ТекстПодробнееПоУмолчанию();
	НоваяСтрока.ДействиеПодробнее  = ОписаниеДействия_ОткрытьРезультатыПроверки(,, НоваяСтрока.Код);
	
	// Невыполненные регламентные операции.
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ИсправлениеОтрицательныхОстатковТоваровОрганизаций);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ДействиеОформление = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Оформление_ИсправлениеОтрицательныхОстатковТоваровОрганизаций");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ПомощникИсправленияОстатковТоваровОрганизаций.Формы.ОсновнаяФорма.ПолноеИмя());
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.РаспределениеРасходовБудущихПериодов,
		Ложь, Истина, Ложь);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстВыполнить = НСтр("ru='Распределить'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_РаспределениеРасходовБудущихПериодов");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.РаспределениеРасходовБудущихПериодов.Формы.ФормаСпискаДокументов.ПолноеИмя());
	
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеПередачТоваров);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстВыполнить = НСтр("ru='Оформить'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ОформлениеПередачТоваров");
	ОписаниеДействия = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ЖурналДокументовИнтеркампани.Формы.РабочееМестоПередачиВыкуп.ПолноеИмя());
	ОписаниеДействия.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ДокументыИнтеркампани");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия;
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеОстатковТоваровКПередаче);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстВыполнить = НСтр("ru='Оформить'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ОформлениеОстатковТоваровКПередаче");
	НоваяСтрока.ДействиеОформление = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Оформление_ОформлениеОстатковТоваровКПередаче");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ЖурналДокументовИнтеркампани.Формы.РабочееМестоПередачиТоваров21.ПолноеИмя());
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеВыкупаТоваров);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстВыполнить = НСтр("ru='Оформить'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ОформлениеВыкупаТоваров");
	ОписаниеДействия = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ЖурналДокументовИнтеркампани.Формы.РабочееМестоПередачиВыкуп.ПолноеИмя());
	ОписаниеДействия.ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ДокументыЗакупки");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия;
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеОтчетовПоКомиссииМеждуОрганизациями);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстВыполнить     = НСтр("ru='Оформить'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ОформлениеОтчетовПоКомиссииМеждуОрганизациями");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ЖурналДокументовИнтеркампани.Формы.РабочееМестоОтчетыПоКомиссии.ПолноеИмя());

	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеОтчетовКомитентамОСписании);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстВыполнить     = НСтр("ru='Оформить'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ОформлениеОтчетовКомитентамОСписании");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ОткрытьФорму(
		Метаданные.ЖурналыДокументов.ОтчетыКомитентам.Формы.ФормаСпискаДокументов.ПолноеИмя());
	
	УчетНДСРФ.ДобавитьЭтап_ОформлениеСчетовФактурИТаможенныхДокументов(ТаблицаЭтапов, ТекущийРодитель);
	
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.НачисленияПоКредитамДепозитамИВыданнымЗаймам);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстВыполнить = НСтр("ru='Начислить'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_НачисленияПоКредитамДепозитамИВыданнымЗаймам");
	НоваяСтрока.ДействиеВыполнить = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.НачисленияКредитовИДепозитов.Формы.ФормаСписка.ПолноеИмя());
		
	#КонецОбласти
	
	#Область Группа_Взаиморасчеты
	
	ТекущийРодитель = ИдентификаторГруппыВзаиморасчеты();
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов);
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов");
	НоваяСтрока.ДействиеОформление = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Оформление_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов");
	НоваяСтрока.ДействиеВыполнить = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов");
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ПереоценкаДенежныхСредствИФинансовыхИнструментов);
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ПереоценкаДенежныхСредствИФинансовыхИнструментов");
	НоваяСтрока.ДействиеОформление = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Оформление_ПереоценкаДенежныхСредствИФинансовыхИнструментов");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_ПереоценкаДенежныхСредствИФинансовыхИнструментов");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.РасчетКурсовыхРазниц.Формы.ФормаСписка.ПолноеИмя(), Истина);
	
	#КонецОбласти
	
	#Область Группа_ФормированиеЗатрат
	
	ТекущийРодитель = ИдентификаторГруппыФормированиеЗатрат();
	
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.АннулированиеПодарочныхСертификатов);
	НоваяСтрока.ТекстВыполнить = НСтр("ru='Аннулировать'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_АннулированиеПодарочныхСертификатов");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_АннулированиеПодарочныхСертификатов");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.АннулированиеПодарочныхСертификатов.Формы.ФормаСписка.ПолноеИмя());
	
	#КонецОбласти

	
	#Область Группа_Себестоимость
	
	ТекущийРодитель = ИдентификаторГруппыСебестоимость();
	
	РасчетСебестоимостиКорректировкаСтоимости.ДобавитьЭтап_РасчетПартийИСебестоимости(ТаблицаЭтапов, ТекущийРодитель);
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.РаспределениеНДС);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости);
	НоваяСтрока.ТекстВыполнить = НСтр("ru='Распределить'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"УчетНДСУП.Использование_РаспределениеНДС");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"УчетНДСУП.Выполнить_РаспределениеНДС");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.РаспределениеНДС.Формы.ФормаСписка.ПолноеИмя());
	
	
	#КонецОбласти
	
	#Область Группа_ФормированиеФинансовогоРезультата
	
	ТекущийРодитель = ИдентификаторГруппыФормированиеФинансовогоРезультата();
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеДокументовРаспределенияРасходовПоНаправлениямДеятельности);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.РаспределениеНДС);
	НоваяСтрока.ТекстВыполнить = НСтр("ru='Оформить'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_ОформлениеДокументовРаспределенияРасходовПоНаправлениямДеятельности");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_ОформлениеДокументовРаспределенияРасходовПоНаправлениямДеятельности");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.РаспределениеПрочихЗатрат.Формы.ФормаРабочееМесто.ПолноеИмя());
	НоваяСтрока.ДействиеПодробнее.ПараметрыФормы.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	НоваяСтрока.ДействиеПодробнее.ПараметрыФормы.Вставить("Состояние", Перечисления.СостоянияРаспределенияРасходов.ТребуетсяСформироватьДокумент);
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.РаспределениеРасходовПоНаправлениямДеятельности);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.РаспределениеНДС);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ОформлениеДокументовРаспределенияРасходовПоНаправлениямДеятельности);
	НоваяСтрока.ТекстВыполнить = НСтр("ru='Распределить'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_РаспределениеРасходовПоНаправлениямДеятельности");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_РаспределениеРасходовПоНаправлениямДеятельности");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.РаспределениеПрочихЗатрат.Формы.ФормаРабочееМесто.ПолноеИмя());
	
	НоваяСтрока = ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.РаспределениеДоходовПоНаправлениямДеятельности);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ОформлениеДокументовРаспределенияРасходовПоНаправлениямДеятельности);
	НоваяСтрока.ТекстВыполнить = НСтр("ru='Распределить'");
	НоваяСтрока.ДействиеИспользование = ОписаниеДействия_СервернаяПроцедура(
		"ЗакрытиеМесяцаСервер.Использование_РаспределениеДоходовПоНаправлениямДеятельности");
	НоваяСтрока.ДействиеВыполнить  = ОписаниеДействия_ВыполнитьРасчет(
		"ЗакрытиеМесяцаСервер.Выполнить_РаспределениеДоходовПоНаправлениямДеятельности");
	НоваяСтрока.ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.РаспределениеДоходовПоНаправлениямДеятельности.Формы.ФормаСписка.ПолноеИмя());
	
	#КонецОбласти
	
	#Область Группа_РегламентированныйУчет
	
	ТекущийРодитель = ИдентификаторГруппыРегламентированныйУчет();
	
	УчетНДСРФ.ДобавитьЭтап_ФормированиеСводныхСправокНДС(ТаблицаЭтапов, ТекущийРодитель);
	УчетНДСУП.ДобавитьЭтап_ФормированиеДвиженийПоНДС(ТаблицаЭтапов, ТекущийРодитель);
	
	#КонецОбласти
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиЭтаповЗакрытияМесяца

// В данной области расположены:
// 1. Тексты процедур-обработчиков событий этапов закрытия месяца.
// Сами этапы описываются в ЗаполнитьОписаниеЭтаповЗакрытияМесяца().
// 2. Описание проверок состояния системы, относящиеся к этапам закрытия месяца.
// Описания проверок используется в ЗаполнитьПроверкиДляРегистрации().
// 3. Тексты процедур-проверок состояния учета.

#Область Группа_РучныеОперации

#Область ПереходНаНовыеРежимыРаботы

// Обработчики этапа.

Процедура Использование_ПереходНаНовыеРежимыРаботы(ПараметрыОбработчика) Экспорт
	
	СтатусПоУмолчанию = Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Предупреждение;
	ТекстГиперссылкиПоУмолчанию = НСтр("ru='Перейти'");
	
	// Партионный учет.
	Если НЕ ПолучитьФункциональнуюОпцию("БазоваяВерсия") И РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии21() Тогда
		
		УстановитьСостояниеВыполненСОшибками(
			ПараметрыОбработчика,
			НСтр("ru='Партионный учет (версия 2.2)'"),
			ТекстГиперссылкиПоУмолчанию,
			ОписаниеДействия_ОткрытьФорму(Метаданные.Обработки.ПанельАдминистрированияУТ.Формы.ФинансовыйРезультатИКонтроллинг.ПолноеИмя()),
			СтатусПоУмолчанию);
		
	КонецЕсли;
	
	// Взаиморасчеты.
	Если НЕ ПолучитьФункциональнуюОпцию("БазоваяВерсия") И НЕ ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		
		УстановитьСостояниеВыполненСОшибками(
			ПараметрыОбработчика,
			НСтр("ru='Взаиморасчеты (онлайн)'"),
			ТекстГиперссылкиПоУмолчанию,
			ОписаниеДействия_ОткрытьФорму(Метаданные.Обработки.ПанельАдминистрированияУТ.Формы.Казначейство.ПолноеИмя()),
			СтатусПоУмолчанию);
		
	КонецЕсли;
	
	
	// Учетные политики: метод оценки стоимости ФИФО (взвешенная).
	Если РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22() Тогда
		ШаблонТекста = НСтр("ru='Для организации ""%1"" использовать метод оценки стоимости ""ФИФО (скользящая оценка)""'");
	Иначе
		ШаблонТекста = НСтр("ru='Для организации ""%1"" использовать метод оценки стоимости ""Средняя за месяц""'");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(, Организация В (&МассивОрганизаций)) КАК Т
	|ГДЕ
	|	Т.УчетнаяПолитика.МетодОценкиСтоимостиТоваров = ЗНАЧЕНИЕ(Перечисление.МетодыОценкиСтоимостиТоваров.ФИФОВзвешеннаяОценка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОписаниеДействия = ОписаниеДействия_ОткрытьФорму(Метаданные.Справочники.Организации.Формы.ФормаЭлемента.ПолноеИмя());
		ОписаниеДействия.ПараметрыФормы.Вставить("Ключ", Выборка.Организация);
		
		УстановитьСостояниеВыполненСОшибками(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Выборка.Организация),
			ТекстГиперссылкиПоУмолчанию,
			ОписаниеДействия,
			СтатусПоУмолчанию);
		
	КонецЦикла;
	
	Если НЕ СостояниеЭтапаОпределено(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Устаревшие режимы работы не используются.'"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИсправлениеДублейВидовЗапасов

// Обработчики этапа.

Процедура Использование_ИсправлениеДублейВидовЗапасов(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = Справочники.ВидыЗапасов.ТекстЗапросаНаличиеДублейВидовЗапасов();
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Дублей видов запасов не найдено.'"));
		
	Иначе
		
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			НСтр("ru='Обнаружены дубли видов запасов. Требуется выполнить замену дублей и удалить помеченные виды запасов.'"),
			,
			,
			Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИсправлениеОшибокВИсходныхДанных

// Проверки состояния системы, относящиеся к этапу.

Процедура ОписаниеПроверок_ИсправлениеОшибокВИсходныхДанных(ТаблицаПроверок)
	
	// Неактивные записи в регистрах.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НеактивныеЗаписиВРегистрахИсточниках",
		Перечисления.ОперацииЗакрытияМесяца.ИсправлениеОшибокВИсходныхДанных,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоРасчета,
		"РасчетСебестоимостиКорректировкаСтоимости.ПроверкаНеактивныеЗаписиВРегистрахИсточниках");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Неактивные записи в регистрах.'"),
		НСтр("ru='В регистрах, являющихся исходными данными для операция закрытия месяца, не должно быть неактивных записей.'"));
	
	// Корректность реализации, указанной в возврате.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"КорректностьРеализацииУказаннойВВозврате",
		Перечисления.ОперацииЗакрытияМесяца.ИсправлениеОшибокВИсходныхДанных,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаКорректностьРеализацииУказаннойВВозврате");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Корректность реализации, указанной в возврате.'"),
		НСтр("ru='При изменении задним числом документа реализации товарный состав документа возврата от клиента может рассинхронизироваться с реализацией.
			|В этом случае в документе возврата необходимо или указать корректный документ реализации или вообще не указывать его.'"));
		
	// Корректность передачи, указанной в возврате.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"КорректностьПередачиУказаннойВВозврате",
		Перечисления.ОперацииЗакрытияМесяца.ИсправлениеОшибокВИсходныхДанных,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаКорректностьПередачиУказаннойВВозврате");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Корректность реализации, указанной в возврате.'"),
		НСтр("ru='При изменении задним числом документа реализации товарный состав документа возврата от клиента может рассинхронизироваться с реализацией.
			|В этом случае в документе возврата необходимо или указать корректный документ реализации или вообще не указывать его.'"));
		
	// Заполнение номеров ГТД в возвратах.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"КорректностьЗаполненияНомеровГТДВВозвратах",
		Перечисления.ОперацииЗакрытияМесяца.ИсправлениеОшибокВИсходныхДанных,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаКорректностьЗаполненияНомеровГТДВВозвратах");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Корректность указания номеров ГТД, указанных в возврате.'"),
		НСтр("ru='Были оформлены возвраты товаров, для которых включен учет по номерам ГТД, но номера ГТД не были указаны.
			|В этом случае в документе возврата необходимо указать номера ГТД.'"));
	
	// Устаревшие виды запасов с остатками.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"УстаревшиеВидыЗапасовСОстаткамиОбновитьЗаписи",
		Перечисления.ОперацииЗакрытияМесяца.ИсправлениеОшибокВИсходныхДанных,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоРасчета,
		"ЗакрытиеМесяцаСервер.УстаревшиеВидыЗапасовСОстаткамиОбновитьЗаписи");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Актуализация регистра сведений ""Устаревшие виды запасов с остатками""'"),
		НСтр("ru='Регистр сведений содержит список устаревших видов запасов,
		|по которым еще есть остатки в регистре ""Товары организаций"" и которые должны быть списаны при расходе.'"));
	
КонецПроцедуры

Процедура ПроверкаКорректностьРеализацииУказаннойВВозврате(ПараметрыПроверки) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Организация 					КАК Организация,
	|	Т.Регистратор 					КАК Возврат,
	|	Т.ДокументИсточник 				КАК Реализация,
	|	Т.КорАналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатурыРеализации,
	|	Т.КорВидЗапасов 				КАК ВидЗапасовРеализации,
	|	Т.АналитикаУчетаНоменклатуры 	КАК АналитикаУчетаНоменклатуры,
	|	Т.ВидЗапасов 					КАК ВидЗапасов
	|ПОМЕСТИТЬ ВТВсеДвиженияВозвратов
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Т
	|ГДЕ
	|	&ПартионныйУчетВерсии22
	|	И Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Т.Организация В(&МассивОрганизаций)
	|	И НЕ Т.РасчетПартий
	|	И НЕ Т.РасчетСебестоимости
	|	И Т.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|	И Т.ДокументИсточник ССЫЛКА Документ.РеализацияТоваровУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Организация 						   КАК Организация,
	|	Т.Возврат 							   КАК Возврат,
	|	Т.Реализация 						   КАК Реализация,
	|	Т.АналитикаУчетаНоменклатурыРеализации КАК АналитикаУчетаНоменклатурыРеализации,
	|	Т.ВидЗапасовРеализации 				   КАК ВидЗапасовРеализации,
	|	Т.АналитикаУчетаНоменклатуры 		   КАК АналитикаУчетаНоменклатуры,
	|	Т.ВидЗапасов 						   КАК ВидЗапасов
	|ПОМЕСТИТЬ ВТДвиженияВозвратов
	|ИЗ
	|	ВТВсеДвиженияВозвратов КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента.ВидыЗапасов КАК Возвраты
	|		ПО Т.Возврат = Возвраты.Ссылка
	|		И Т.АналитикаУчетаНоменклатуры = Возвраты.АналитикаУчетаНоменклатуры
	|		И Т.ВидЗапасов = Возвраты.ВидЗапасов
	|ГДЕ
	|	Возвраты.СпособОпределенияСебестоимости = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияСебестоимости.ИзДокументаПродажи)
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Реализация,
	|	АналитикаУчетаНоменклатурыРеализации,
	|	ВидЗапасовРеализации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Реализация
	|ПОМЕСТИТЬ ВТРеализации
	|ИЗ
	|	ВТДвиженияВозвратов КАК Т
	|ИНДЕКСИРОВАТЬ ПО
	|	Реализация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Организация 					КАК Организация,
	|	Т.Регистратор 					КАК Реализация,
	|	Т.АналитикаУчетаНоменклатуры 	КАК АналитикаУчетаНоменклатуры,
	|	Т.ВидЗапасов 					КАК ВидЗапасов
	|ПОМЕСТИТЬ ВТДвиженияРеализаций
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРеализации КАК Реализации 
	|		ПО Т.Регистратор = Реализации.Реализация
	|ГДЕ
	|	&ПартионныйУчетВерсии22
	|	И Т.Период <= &КонецПериода
	|	И Т.Организация В(&МассивОрганизаций)
	|	И НЕ Т.РасчетПартий
	|	И НЕ Т.РасчетСебестоимости
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Реализация,
	|	АналитикаУчетаНоменклатуры,
	|	ВидЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Возвраты.Организация 						  КАК Организация,
	|	Возвраты.Возврат 							  КАК Возврат,
	|	Возвраты.Реализация 						  КАК Реализация,
	|	Возвраты.АналитикаУчетаНоменклатурыРеализации КАК АналитикаУчетаНоменклатуры,
	|	Возвраты.ВидЗапасовРеализации 				  КАК ВидЗапасов
	|ПОМЕСТИТЬ ВТРасхожденияВозвратов
	|ИЗ
	|	ВТДвиженияВозвратов КАК Возвраты
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТДвиженияРеализаций КАК Реализации
	|		ПО Возвраты.Организация = Реализации.Организация
	|			И Возвраты.Реализация = Реализации.Реализация
	|			И Возвраты.АналитикаУчетаНоменклатурыРеализации = Реализации.АналитикаУчетаНоменклатуры
	|			И (Возвраты.ВидЗапасовРеализации = Реализации.ВидЗапасов
	|				ИЛИ Реализации.ВидЗапасов = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка))
	|ГДЕ
	|	Реализации.Реализация ЕСТЬ NULL";
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Возврат",						НСтр("ru='Документ возврата'"));
	СписокПолей.Добавить("Реализация",					НСтр("ru='Документ реализации'"));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры",	НСтр("ru='Аналитика номенклатуры'"));
	СписокПолей.Добавить("ВидЗапасов",					НСтр("ru='Вид запасов'"));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТРасхожденияВозвратов",
		НСтр("ru='Обнаружены возвращенные от клиента товары, отсутствующие в документе реализации организации ""%1""'"),
		СписокПолей,
		"Возврат");
	
	ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса);
	
КонецПроцедуры

Процедура УстаревшиеВидыЗапасовСОстаткамиОбновитьЗаписи(ПараметрыПроверки) Экспорт
	
	РегистрыСведений.УстаревшиеВидыЗапасовСОстатками.ОбновитьЗаписи();
	
КонецПроцедуры


// Выполняет проверку корректности указания документов передачи товаров между организациями возвращаемых товаров
// в документах возврата товаров между организациями.
//
// Параметр:
//	ПараметрыПроверки - Структура - параметры проверки, см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки().
//
Процедура ПроверкаКорректностьПередачиУказаннойВВозврате(ПараметрыПроверки) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Возвраты.Организация КАК Организация,
	|	Т.Регистратор КАК Возврат,
	|	Т.ДокументИсточник КАК Передача,
	|	Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатурыОтгрузки,
	|	Т.ВидЗапасов КАК ВидЗапасовОтгрузки,
	|	Т.КорАналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Т.КорВидЗапасов КАК ВидЗапасов
	|ПОМЕСТИТЬ ВТВсеДвиженияВозвратов
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровМеждуОрганизациями КАК Возвраты
	|		ПО Т.Регистратор = Возвраты.Ссылка
	|ГДЕ
	|	&ПартионныйУчетВерсии22
	|	И Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Возвраты.Организация В(&МассивОрганизаций)
	|	И Т.Организация = Возвраты.ОрганизацияПолучатель
	|	И НЕ Т.РасчетПартий
	|	И НЕ Т.РасчетСебестоимости
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Организация КАК Организация,
	|	Т.Возврат КАК Возврат,
	|	Т.Передача КАК Передача,
	|	Т.АналитикаУчетаНоменклатурыОтгрузки КАК АналитикаУчетаНоменклатурыОтгрузки,
	|	Т.ВидЗапасовОтгрузки КАК ВидЗапасовОтгрузки,
	|	Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Т.ВидЗапасов КАК ВидЗапасов
	|ПОМЕСТИТЬ ВТДвиженияВозвратов
	|ИЗ
	|	ВТВсеДвиженияВозвратов КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаТоваровМеждуОрганизациями КАК Передачи
	|		ПО Т.Передача = Передачи.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровМеждуОрганизациями.ВидыЗапасов КАК Возвраты
	|		ПО Т.Возврат = Возвраты.Ссылка
	|			И Т.АналитикаУчетаНоменклатуры = Возвраты.АналитикаУчетаНоменклатуры
	|			И Т.ВидЗапасов = Возвраты.ВидЗапасов
	|ГДЕ
	|	Возвраты.СпособОпределенияСебестоимости = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияСебестоимости.ИзДокументаПередачи)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Передача,
	|	АналитикаУчетаНоменклатурыОтгрузки,
	|	ВидЗапасовОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Передача КАК Передача,
	|	Т.Организация КАК Организация
	|ПОМЕСТИТЬ ВТПередачи
	|ИЗ
	|	ВТДвиженияВозвратов КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Т.Передача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Передачи.Организация КАК Организация,
	|	Т.Регистратор КАК Передача,
	|	Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Т.ВидЗапасов КАК ВидЗапасов
	|ПОМЕСТИТЬ ВТДвиженияПередач
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПередачи КАК Передачи
	|		ПО Т.Регистратор = Передачи.Передача
	|			И Т.Организация <> Передачи.Организация
	|ГДЕ
	|	&ПартионныйУчетВерсии22
	|	И Т.Период <= &КонецПериода
	|	И НЕ Т.РасчетПартий
	|	И НЕ Т.РасчетСебестоимости
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Передача,
	|	АналитикаУчетаНоменклатуры,
	|	ВидЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Возвраты.Организация КАК Организация,
	|	Возвраты.Возврат КАК Возврат,
	|	Возвраты.Передача КАК Передача,
	|	Возвраты.АналитикаУчетаНоменклатурыОтгрузки КАК АналитикаУчетаНоменклатуры,
	|	Возвраты.ВидЗапасовОтгрузки КАК ВидЗапасов,
	|	Передачи.АналитикаУчетаНоменклатуры КАК А1,
	|	Передачи.ВидЗапасов КАК В1
	|ПОМЕСТИТЬ ВТРасхожденияВозвратов
	|ИЗ
	|	ВТДвиженияВозвратов КАК Возвраты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДвиженияПередач КАК Передачи
	|		ПО Возвраты.Организация = Передачи.Организация
	|			И Возвраты.Передача = Передачи.Передача
	|			И Возвраты.АналитикаУчетаНоменклатурыОтгрузки = Передачи.АналитикаУчетаНоменклатуры
	|			И Возвраты.ВидЗапасовОтгрузки = Передачи.ВидЗапасов
	|ГДЕ
	|	Передачи.Передача ЕСТЬ NULL";
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Возврат",						НСтр("ru='Документ возврата'"));
	СписокПолей.Добавить("Передача",					НСтр("ru='Документ передачи продукции'"));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры",	НСтр("ru='Аналитика номенклатуры'"));
	СписокПолей.Добавить("ВидЗапасов",					НСтр("ru='Вид запасов'"));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТРасхожденияВозвратов",
		НСтр("ru='Обнаружены возвращенные от организации ""%1"" товары, отсутствующие в документе передачи товаров'"),
		СписокПолей,
		"Возврат");
	
	ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса);
	
КонецПроцедуры

// Выполняет проверку корректности указания номеров ГТД возвращаемых товаров в документах возврата товаров
// между организациями.
//
// Параметр:
//	ПараметрыПроверки - Структура - параметры проверки, см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки().
//
Процедура ПроверкаКорректностьЗаполненияНомеровГТДВВозвратах(ПараметрыПроверки) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Ссылка.Организация КАК Организация,
	|	Товары.Ссылка КАК Возврат
	|ПОМЕСТИТЬ ПустыеНомераГТДВДокументахВозврата
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента.Товары КАК Товары
	|ГДЕ
	|	Товары.Номенклатура.ВестиУчетПоГТД
	|	И Товары.НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	И Товары.Ссылка.Проведен
	|	И Товары.Ссылка.Организация В(&МассивОрганизаций)
	|	И Товары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И &ЗапретитьПоступлениеТоваровБезНомеровГТД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Ссылка.Организация,
	|	Товары.Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровМеждуОрганизациями.Товары КАК Товары
	|ГДЕ
	|	Товары.Номенклатура.ВестиУчетПоГТД
	|	И Товары.НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	И Товары.Ссылка.Проведен
	|	И Товары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И &ЗапретитьПоступлениеТоваровБезНомеровГТД
	|";
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Возврат", НСтр("ru='Документ возврата'"));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ПустыеНомераГТДВДокументахВозврата",
		НСтр("ru='Обнаружены возвращенные товары без номеров ГТД в организацию 
			|""%1""'"),
		СписокПолей,
		"Возврат");
		
	ДополнительныеПараметрыЗапроса = Новый Структура;
	ДополнительныеПараметрыЗапроса.Вставить(
		"ЗапретитьПоступлениеТоваровБезНомеровГТД", Константы.ЗапретитьПоступлениеТоваровБезНомеровГТД.Получить());
	
	ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса,
		ДополнительныеПараметрыЗапроса);
	
КонецПроцедуры

#КонецОбласти

#Область ИсправлениеОтрицательныхОстатковТоваровОрганизаций

// Обработчики этапа.

Процедура Оформление_ИсправлениеОтрицательныхОстатковТоваровОрганизаций(ПараметрыОбработчика) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		ПараметрыОбработчика.ДанныеЭтапа.Наименование = НСтр("ru = 'Исправление отрицательных остатков товаров организации'");
	КонецЕсли;
	
	ПараметрыОбработчика.ДанныеЭтапа.ТекстВыполнить = НСтр("ru='Исправить'");
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика);
	
КонецПроцедуры

// Проверки состояния системы, относящиеся к этапу.

Процедура ОписаниеПроверок_ИсправлениеОтрицательныхОстатковТоваровОрганизаций(ТаблицаПроверок)
	
	// Отрицательные остатки товаров организаций.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"ОтрицательныеОстаткиТоваровОрганизаций",
		Перечисления.ОперацииЗакрытияМесяца.ИсправлениеОтрицательныхОстатковТоваровОрганизаций,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаОтрицательныхОстатковТоваровОрганизаций");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Отрицательные остатки в регистре ""Товары организаций""'"),
		НСтр("ru='Отрицательных остатков быть не должно.'"));
	
КонецПроцедуры

Функция ЗапросОтрицательныеОстаткиТоваровОрганизаций() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТоварыОрганизаций.Организация КАК Организация,
	|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТоварыОрганизаций.ВидЗапасов КАК ВидЗапасов,
	|	ТоварыОрганизаций.НомерГТД КАК НомерГТД,
	|	ТоварыОрганизаций.Период КАК Период,
	|	ТоварыОрганизаций.КоличествоОборот КАК КоличествоОборот,
	|	ТоварыОрганизаций.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток,
	|	ТоварыОрганизаций.КОформлениюСписанияОборот КАК КОформлениюСписанияОборот,
	|	ТоварыОрганизаций.КОформлениюСписанияКонечныйОстаток КАК КОформлениюСписанияКонечныйОстаток
	|ПОМЕСТИТЬ ТоварыОрганизацийИРезервыОстаткиИОбороты
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.ОстаткиИОбороты(
	|			&ГраницаКонецПредыдущегоПериода,
	|			&ГраницаКонецПериода,
	|			Месяц,
	|			,
	|			Организация В (&МассивОрганизаций)
	|				И НЕ ВидЗапасов.ТипЗапасов В (&НеконтролируемыеТипыЗапасов)) КАК ТоварыОрганизаций
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Резервы.Организация,
	|	Резервы.АналитикаУчетаНоменклатуры,
	|	Резервы.ВидЗапасов,
	|	Резервы.НомерГТД,
	|	Резервы.Период,
	|	Резервы.КоличествоОборот,
	|	Резервы.КоличествоКонечныйОстаток,
	|	0,
	|	0
	|ИЗ
	|	РегистрНакопления.РезервыТоваровОрганизаций.ОстаткиИОбороты(
	|			&ГраницаКонецПредыдущегоПериода,
	|			&ГраницаКонецПериода,
	|			Месяц,
	|			,
	|			Организация В (&МассивОрганизаций)
	|				И НЕ ВидЗапасов.ТипЗапасов В (&НеконтролируемыеТипыЗапасов)) КАК Резервы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	АналитикаУчетаНоменклатуры,
	|	ВидЗапасов,
	|	НомерГТД,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.Организация КАК Организация,
	|	Остатки.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Остатки.ВидЗапасов КАК ВидЗапасов,
	|	Остатки.НомерГТД КАК НомерГТД,
	|	Остатки.Период КАК Период,
	|	СУММА(Остатки.КоличествоКонечныйОстаток) КАК Количество,
	|	СУММА(Остатки.КоличествоОборот) КАК Оборот
	|ПОМЕСТИТЬ ОтрицательныеОстатки
	|ИЗ
	|	ТоварыОрганизацийИРезервыОстаткиИОбороты КАК Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Организация,
	|	Остатки.АналитикаУчетаНоменклатуры,
	|	Остатки.ВидЗапасов,
	|	Остатки.НомерГТД,
	|	Остатки.Период
	|
	|ИМЕЮЩИЕ
	|	СУММА(Остатки.КоличествоКонечныйОстаток) < 0 И
	|	СУММА(Остатки.КоличествоОборот) < 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Остатки.Организация,
	|	Остатки.АналитикаУчетаНоменклатуры,
	|	Остатки.ВидЗапасов,
	|	Остатки.НомерГТД,
	|	Остатки.Период,
	|	СУММА(Остатки.КОформлениюСписанияКонечныйОстаток),
	|	СУММА(Остатки.КОформлениюСписанияОборот)
	|ИЗ
	|	ТоварыОрганизацийИРезервыОстаткиИОбороты КАК Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Организация,
	|	Остатки.АналитикаУчетаНоменклатуры,
	|	Остатки.ВидЗапасов,
	|	Остатки.НомерГТД,
	|	Остатки.Период
	|
	|ИМЕЮЩИЕ
	|	СУММА(Остатки.КОформлениюСписанияКонечныйОстаток) < 0 И
	|	СУММА(Остатки.КОформлениюСписанияОборот) < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварыОрганизацийИРезервыОстаткиИОбороты";
	Возврат ТекстЗапроса;

КонецФункции

Процедура ПроверкаОтрицательныхОстатковТоваровОрганизаций(ПараметрыПроверки) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры", НСтр("ru='Аналитика номенклатуры'"));
	СписокПолей.Добавить("ВидЗапасов", 				   НСтр("ru='Вид запасов'"));
	СписокПолей.Добавить("НомерГТД", 				   НСтр("ru='Номер ГТД'"));
	СписокПолей.Добавить("Количество",		 		   НСтр("ru='Количество'"));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ОтрицательныеОстатки",
		НСтр("ru='Обнаружены отрицательные остатки товаров организации ""%1"" на конец периода %2'"),
		СписокПолей);
		
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить(
		"НеконтролируемыеТипыЗапасов", Перечисления.ТипыЗапасов.НеконтролируемыеПоТоварамОрганизацииТипыЗапасов());
	
	ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации,
		ЗапросОтрицательныеОстаткиТоваровОрганизаций(),
		ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область РаспределениеРасходовБудущихПериодов

// Обработчики этапа.

Процедура Использование_РаспределениеРасходовБудущихПериодов(ПараметрыОбработчика) Экспорт
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов") Тогда
		
		УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru='Учет прочих доходов и расходов не ведется'"));
			
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Статьи.Ссылка,
	|	Статьи.ВариантРаспределенияРасходовУпр,
	|	Статьи.ВариантРаспределенияРасходовРегл
	|ПОМЕСТИТЬ СтатьиРБП
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК Статьи
	|ГДЕ
	|	Статьи.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
	|	ИЛИ Статьи.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Статьи.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.Организация,
	|	Данные.Подразделение,
	|	Данные.НаправлениеДеятельности,
	|	Данные.СтатьяРасходов,
	|	Данные.АналитикаРасходов,
	|	Данные.СуммаПриход - Данные.СуммаРасход КАК Сумма,
	|	Данные.СуммаУпрПриход - Данные.СуммаУпрРасход КАК СуммаУпр,
	|	Данные.СуммаРеглПриход - Данные.СуммаРеглРасход КАК СуммаРегл,
	|	Данные.ПостояннаяРазницаПриход - Данные.ПостояннаяРазницаРасход КАК ПостояннаяРазница,
	|	Данные.ВременнаяРазницаПриход - Данные.ВременнаяРазницаРасход КАК ВременнаяРазница,
	|	Данные.БезСумм
	|ПОМЕСТИТЬ ВТНераспределенныеРБП
	|ИЗ (
	|	ВЫБРАТЬ
	|		Данные.Организация,
	|		Данные.Подразделение,
	|		Данные.СтатьяРасходов,
	|		Данные.АналитикаРасходов,
	|		Данные.НаправлениеДеятельности,
	|		СУММА(Данные.СуммаПриход) КАК СуммаПриход,
	|		СУММА(Данные.СуммаУпрПриход) КАК СуммаУпрПриход,
	|		СУММА(Данные.СуммаРеглПриход) КАК СуммаРеглПриход,
	|		СУММА(Данные.ПостояннаяРазницаПриход) КАК ПостояннаяРазницаПриход,
	|		СУММА(Данные.ВременнаяРазницаПриход) КАК ВременнаяРазницаПриход,
	|		СУММА(Данные.СуммаРасход) КАК СуммаРасход,
	|		СУММА(Данные.СуммаУпрРасход) КАК СуммаУпрРасход,
	|		СУММА(Данные.СуммаРеглРасход) КАК СуммаРеглРасход,
	|		СУММА(Данные.ПостояннаяРазницаРасход) КАК ПостояннаяРазницаРасход,
	|		СУММА(Данные.ВременнаяРазницаРасход) КАК ВременнаяРазницаРасход,
	|		СУММА(Данные.СуммаОстаток) КАК СуммаОстаток,
	|		СУММА(Данные.СуммаУпрОстаток) КАК СуммаУпрОстаток,
	|		СУММА(Данные.СуммаРеглОстаток) КАК СуммаРеглОстаток,
	|		СУММА(Данные.ПостояннаяРазницаОстаток) КАК ПостояннаяРазницаОстаток,
	|		СУММА(Данные.ВременнаяРазницаОстаток) КАК ВременнаяРазницаОстаток,
	|		МИНИМУМ(Данные.БезСумм) КАК БезСумм
	|	ИЗ (
	|		ВЫБРАТЬ
	|			Приходы.Организация,
	|			Приходы.Подразделение,
	|			Приходы.СтатьяРасходов,
	|			Приходы.АналитикаРасходов,
	|			Приходы.НаправлениеДеятельности,
	|			СУММА(Приходы.Сумма) КАК СуммаПриход,
	|			СУММА(Приходы.СуммаУпр) КАК СуммаУпрПриход,
	|			0 КАК СуммаРеглПриход,
	|			0 КАК ПостояннаяРазницаПриход,
	|			0 КАК ВременнаяРазницаПриход,
	|			0 КАК СуммаРасход,
	|			0 КАК СуммаУпрРасход,
	|			0 КАК СуммаРеглРасход,
	|			0 КАК ПостояннаяРазницаРасход,
	|			0 КАК ВременнаяРазницаРасход,
	|			0 КАК СуммаОстаток,
	|			0 КАК СуммаУпрОстаток,
	|			0 КАК СуммаРеглОстаток,
	|			0 КАК ПостояннаяРазницаОстаток,
	|			0 КАК ВременнаяРазницаОстаток,
	|			ЛОЖЬ КАК БезСумм
	|		ИЗ
	|			РегистрНакопления.ПрочиеРасходы КАК Приходы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиРБП КАК Статьи
	|				ПО (Статьи.Ссылка = Приходы.СтатьяРасходов)
	|				И (Статьи.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов))
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспределениеРасходовБудущихПериодов КАК Распределение
	|				ПО НАЧАЛОПЕРИОДА(Распределение.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Приходы.Период, МЕСЯЦ)
	|				И Распределение.Проведен
	|				И Распределение.ВариантУказанияСуммыУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыУказанияСуммыРБП.ОпределяетсяАвтоматически)
	|				И Распределение.Организация = Приходы.Организация
	|				И Распределение.Подразделение = Приходы.Подразделение
	|				И Распределение.СтатьяРасходов = Приходы.СтатьяРасходов
	|				И Распределение.АналитикаРасходов = Приходы.АналитикаРасходов
	|				И Распределение.НаправлениеДеятельности = Приходы.НаправлениеДеятельности
	|		ГДЕ
	|			НАЧАЛОПЕРИОДА(Приходы.Период, ДЕНЬ) <= &КонецПериода
	|			И Приходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И Распределение.Ссылка ЕСТЬ NULL
	|			И Приходы.Организация В (&МассивОрганизаций)
	|		СГРУППИРОВАТЬ ПО
	|			Приходы.Организация,
	|			Приходы.Подразделение,
	|			Приходы.СтатьяРасходов,
	|			Приходы.АналитикаРасходов,
	|			Приходы.НаправлениеДеятельности
	|			
	|		ОБЪЕДИНИТЬ ВСЕ
	|			
	|		ВЫБРАТЬ
	|			Приходы.Организация,
	|			Приходы.Подразделение,
	|			Приходы.СтатьяРасходов,
	|			Приходы.АналитикаРасходов,
	|			Приходы.НаправлениеДеятельности,
	|			0 КАК СуммаПриход,
	|			0 КАК СуммаУпрПриход,
	|			СУММА(Приходы.СуммаРегл) КАК СуммаРеглПриход,
	|			СУММА(Приходы.ПостояннаяРазница) КАК ПостояннаяРазницаПриход,
	|			СУММА(Приходы.ВременнаяРазница) КАК ВременнаяРазницаПриход,
	|			0 КАК СуммаРасход,
	|			0 КАК СуммаУпрРасход,
	|			0 КАК СуммаРеглРасход,
	|			0 КАК ПостояннаяРазницаРасход,
	|			0 КАК ВременнаяРазницаРасход,
	|			0 КАК СуммаОстаток,
	|			0 КАК СуммаУпрОстаток,
	|			0 КАК СуммаРеглОстаток,
	|			0 КАК ПостояннаяРазницаОстаток,
	|			0 КАК ВременнаяРазницаОстаток,
	|			ЛОЖЬ КАК БезСумм
	|		ИЗ
	|			РегистрНакопления.ПрочиеРасходы КАК Приходы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиРБП КАК Статьи
	|				ПО (Статьи.Ссылка = Приходы.СтатьяРасходов)
	|				И (Статьи.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов))
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспределениеРасходовБудущихПериодов КАК Распределение
	|				ПО НАЧАЛОПЕРИОДА(Распределение.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Приходы.Период, МЕСЯЦ)
	|				И Распределение.Проведен
	|				И Распределение.ВариантУказанияСуммыРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыУказанияСуммыРБП.ОпределяетсяАвтоматически)
	|				И Распределение.Организация = Приходы.Организация
	|				И Распределение.Подразделение = Приходы.Подразделение
	|				И Распределение.СтатьяРасходов = Приходы.СтатьяРасходов
	|				И Распределение.АналитикаРасходов = Приходы.АналитикаРасходов
	|				И Распределение.НаправлениеДеятельности = Приходы.НаправлениеДеятельности
	|		ГДЕ
	|			НАЧАЛОПЕРИОДА(Приходы.Период, ДЕНЬ) <= &КонецПериода
	|			И Приходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И Распределение.Ссылка ЕСТЬ NULL
	|			И Приходы.Организация В (&МассивОрганизаций)
	|		СГРУППИРОВАТЬ ПО
	|			Приходы.Организация,
	|			Приходы.Подразделение,
	|			Приходы.СтатьяРасходов,
	|			Приходы.АналитикаРасходов,
	|			Приходы.НаправлениеДеятельности	
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ
	|			Расходы.Организация,
	|			Расходы.Подразделение,
	|			Расходы.СтатьяРасходов,
	|			Расходы.АналитикаРасходов,
	|			Расходы.НаправлениеДеятельности,
	|			0 КАК СуммаПриход,
	|			0 КАК СуммаУпрПриход,
	|			0 КАК СуммаРеглПриход,
	|			0 КАК ПостояннаяРазницаПриход,
	|			0 КАК ВременнаяРазницаПриход,
	|			СУММА(Расходы.Сумма) КАК СуммаРасход,
	|			СУММА(Расходы.СуммаУпр) КАК СуммаУпрРасход,
	|			0 КАК СуммаРеглРасход,
	|			0 КАК ПостояннаяРазницаРасход,
	|			0 КАК ВременнаяРазницаРасход,
	|			0 КАК СуммаОстаток,
	|			0 КАК СуммаУпрОстаток,
	|			0 КАК СуммаРеглОстаток,
	|			0 КАК ПостояннаяРазницаОстаток,
	|			0 КАК ВременнаяРазницаОстаток,
	|			ЛОЖЬ КАК БезСумм
	|		ИЗ
	|			РегистрНакопления.ПрочиеРасходы КАК Расходы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиРБП КАК Статьи
	|				ПО (Статьи.Ссылка = Расходы.СтатьяРасходов)
	|					И (Статьи.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов))
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспределениеРасходовБудущихПериодов КАК Распределение
	|				ПО Распределение.Ссылка = Расходы.Регистратор
	|		ГДЕ
	|			НАЧАЛОПЕРИОДА(ЕСТЬNULL(Распределение.Дата, Расходы.Период), ДЕНЬ) <= &КонецПериода
	|			И Расходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И НЕ Расходы.РасчетСебестоимости
	|			И Расходы.Организация В (&МассивОрганизаций)
	|		СГРУППИРОВАТЬ ПО
	|			Расходы.Организация,
	|			Расходы.Подразделение,
	|			Расходы.СтатьяРасходов,
	|			Расходы.АналитикаРасходов,
	|			Расходы.НаправлениеДеятельности
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ
	|			Расходы.Организация,
	|			Расходы.Подразделение,
	|			Расходы.СтатьяРасходов,
	|			Расходы.АналитикаРасходов,
	|			Расходы.НаправлениеДеятельности,
	|			0 КАК СуммаПриход,
	|			0 КАК СуммаУпрПриход,
	|			0 КАК СуммаРеглПриход,
	|			0 КАК ПостояннаяРазницаПриход,
	|			0 КАК ВременнаяРазницаПриход,
	|			0 КАК СуммаРасход,
	|			0 КАК СуммаУпрРасход,
	|			СУММА(Расходы.СуммаРегл) КАК СуммаРеглРасход,
	|			СУММА(Расходы.ПостояннаяРазница) КАК ПостояннаяРазницаРасход,
	|			СУММА(Расходы.ВременнаяРазница) КАК ВременнаяРазницаРасход,
	|			0 КАК СуммаОстаток,
	|			0 КАК СуммаУпрОстаток,
	|			0 КАК СуммаРеглОстаток,
	|			0 КАК ПостояннаяРазницаОстаток,
	|			0 КАК ВременнаяРазницаОстаток,
	|			ЛОЖЬ КАК БезСумм
	|		ИЗ
	|			РегистрНакопления.ПрочиеРасходы КАК Расходы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиРБП КАК Статьи
	|				ПО (Статьи.Ссылка = Расходы.СтатьяРасходов)
	|					И (Статьи.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов))
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспределениеРасходовБудущихПериодов КАК Распределение
	|				ПО Распределение.Ссылка = Расходы.Регистратор
	|		ГДЕ
	|			НАЧАЛОПЕРИОДА(ЕСТЬNULL(Распределение.Дата, Расходы.Период), ДЕНЬ) <= &КонецПериода
	|			И Расходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И НЕ Расходы.РасчетСебестоимости
	|			И Расходы.Организация В (&МассивОрганизаций)
	|
	|		СГРУППИРОВАТЬ ПО
	|			Расходы.Организация,
	|			Расходы.Подразделение,
	|			Расходы.СтатьяРасходов,
	|			Расходы.АналитикаРасходов,
	|			Расходы.НаправлениеДеятельности
	|			
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Себестоимость.Организация,
	|			Себестоимость.Подразделение,
	|			Себестоимость.СтатьяРасходовСписания,
	|			Себестоимость.АналитикаРасходов,
	|			ЕСТЬNULL(Назначения.НаправлениеДеятельности,
	|				ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) КАК НаправлениеДеятельности,
	|			0 КАК СуммаПриход,
	|			0 КАК СуммаУпрПриход,
	|			0 КАК СуммаРеглПриход,
	|			0 КАК ПостояннаяРазницаПриход,
	|			0 КАК ВременнаяРазницаПриход,
	|			0 КАК СуммаРасход,
	|			0 КАК СуммаУпрРасход,
	|			0 КАК СуммаРеглРасход,
	|			0 КАК ПостояннаяРазницаРасход,
	|			0 КАК ВременнаяРазницаРасход,
	|			0 КАК СуммаОстаток,
	|			0 КАК СуммаУпрОстаток,
	|			0 КАК СуммаРеглОстаток,
	|			0 КАК ПостояннаяРазницаОстаток,
	|			0 КАК ВременнаяРазницаОстаток,
	|			ИСТИНА КАК БезСумм
	|		ИЗ
	|			РегистрНакопления.СебестоимостьТоваров КАК Себестоимость
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиРБП КАК Статьи
	|				ПО Статьи.Ссылка = Себестоимость.СтатьяРасходовСписания
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Назначения
	|				ПО Назначения.Ссылка = Себестоимость.АналитикаУчетаНоменклатуры.Назначение
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспределениеРасходовБудущихПериодов КАК Распределение
	|				ПО НАЧАЛОПЕРИОДА(Распределение.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Себестоимость.Период, МЕСЯЦ)
	|				И Распределение.Проведен
	|				И Распределение.Организация = Себестоимость.Организация
	|				И Распределение.Подразделение = Себестоимость.Подразделение
	|				И Распределение.СтатьяРасходов = Себестоимость.СтатьяРасходовСписания
	|				И Распределение.АналитикаРасходов = Себестоимость.АналитикаРасходов
	|				И Распределение.НаправлениеДеятельности =
	|					ЕСТЬNULL(Назначения.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))
	|		ГДЕ
	|			Себестоимость.Период <= &КонецПериода
	|			И Себестоимость.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И Распределение.Ссылка ЕСТЬ NULL
	|			И Себестоимость.Организация В (&МассивОрганизаций)
	|	
	|		ОБЪЕДИНИТЬ ВСЕ
	|		ВЫБРАТЬ
	|			Остатки.Организация,
	|			Остатки.Подразделение,
	|			Остатки.СтатьяРасходов,
	|			Остатки.АналитикаРасходов,
	|			Остатки.НаправлениеДеятельности,
	|			0 КАК СуммаПриход,
	|			0 КАК СуммаУпрПриход,
	|			0 КАК СуммаРеглПриход,
	|			0 КАК ПостояннаяРазницаПриход,
	|			0 КАК ВременнаяРазницаПриход,
	|			0 КАК СуммаРасход,
	|			0 КАК СуммаУпрРасход,
	|			0 КАК СуммаРеглРасход,
	|			0 КАК ПостояннаяРазницаРасход,
	|			0 КАК ВременнаяРазницаРасход,
	|			Остатки.СуммаОстаток,
	|			Остатки.СуммаУпрОстаток,
	|			Остатки.СуммаРеглОстаток,
	|			Остатки.ПостояннаяРазницаОстаток,
	|			Остатки.ВременнаяРазницаОстаток,
	|			ЛОЖЬ КАК БезСумм
	|		ИЗ
	|			РегистрНакопления.ПрочиеРасходы.Остатки(,
	|				СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
	|				ИЛИ СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
	|			) КАК Остатки
	|			
	|		) КАК Данные
	|	СГРУППИРОВАТЬ ПО
	|		Данные.Организация,
	|		Данные.Подразделение,
	|		Данные.СтатьяРасходов,
	|		Данные.АналитикаРасходов,
	|		Данные.НаправлениеДеятельности
	|) КАК Данные
	|
	|ГДЕ
	|	(Данные.СуммаПриход - Данные.СуммаРасход) <> 0 И Данные.СуммаОстаток <> 0
	|	ИЛИ (Данные.СуммаУпрПриход - Данные.СуммаУпрРасход) <> 0 И Данные.СуммаУпрОстаток <> 0
	|	ИЛИ (Данные.СуммаРеглПриход - Данные.СуммаРеглРасход) <> 0 И Данные.СуммаРеглОстаток <> 0
	|	ИЛИ (Данные.ПостояннаяРазницаПриход - Данные.ПостояннаяРазницаРасход) <> 0 И Данные.ПостояннаяРазницаОстаток <> 0
	|	ИЛИ (Данные.ВременнаяРазницаПриход - Данные.ВременнаяРазницаРасход) <> 0 И Данные.ВременнаяРазницаОстаток <> 0
	|	ИЛИ Данные.БезСумм";
	
	Запрос.Выполнить();
		
	РазмерыВременныхТаблиц = РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.СтатьиРБП = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Нет статей расходов с вариантом распределения ""На расходы будущих периодов""'"));
		
	ИначеЕсли РазмерыВременныхТаблиц.ВТНераспределенныеРБП = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Нет незакрытых оборотов по статьям расходов с вариантом распределения ""На расходы будущих периодов""'"));
	 
	КонецЕсли;
	
КонецПроцедуры

// Проверки состояния системы, относящиеся к этапу.

Процедура ОписаниеПроверок_РаспределениеРасходовБудущихПериодов(ТаблицаПроверок)
	
	// Расходы будущих периодов.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НераспределенныеРасходыБудущихПериодов",
		Перечисления.ОперацииЗакрытияМесяца.РаспределениеРасходовБудущихПериодов,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаНераспределенныеРасходыБудущихПериодов");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Нераспределенные расходы будущих периодов'"),
		НСтр("ru='Не должно быть нераспределенных расходов по статьям расходов с вариантом распределения ""На расходы будущих периодов"".'"));
	
КонецПроцедуры

Процедура ПроверкаНераспределенныеРасходыБудущихПериодов(ПараметрыПроверки) Экспорт
	
	Если НЕ ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
		
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Подразделение", 			НСтр("ru='Подразделение'"));
	СписокПолей.Добавить("СтатьяРасходов", 			НСтр("ru='Статья расходов'"));
	СписокПолей.Добавить("АналитикаРасходов", 		НСтр("ru='Аналитика расходов'"));
	СписокПолей.Добавить("НаправлениеДеятельности", НСтр("ru='Направление деятельности'"));
	СписокПолей.Добавить("Сумма",		 			НСтр("ru='Сумма'"));
	СписокПолей.Добавить("СуммаУпр",		 		НСтр("ru='Сумма (упр.)'"));
	СписокПолей.Добавить("СуммаРегл",		 		НСтр("ru='Сумма (регл.)'"));
	СписокПолей.Добавить("ПостояннаяРазница",		НСтр("ru='Постоянная разница'"));
	СписокПолей.Добавить("ВременнаяРазница",		НСтр("ru='Временная разница'"));
	СписокПолей.Добавить("БезСумм",					НСтр("ru='Данные без сумм'"));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТНераспределенныеРБП",
		НСтр("ru='Обнаружены нераспределенные расходы будущих периодов по организации ""%1"" за период %2'"),
		СписокПолей);
	
	ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

#КонецОбласти


#Область ОформлениеПередачТоваров

// Обработчики этапа.

Процедура Использование_ОформлениеПередачТоваров(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Если ПараметрыОбработчика.ПараметрыРасчета.ВсеОрганизации Тогда 
		Запрос.УстановитьПараметр("Получатель", Новый Массив);
	Иначе
		Запрос.УстановитьПараметр("Получатель", ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
	КонецЕсли;	
	Запрос.УстановитьПараметр("ОформлятьПередачи", Истина);
	Запрос.Текст = ЗапасыСервер.ТекстЗапросаОформленияПоРезервамТоваровОрганизаций(Запрос, "ВТПоНоменклатуреВТКОформлениюПередач");
		
	Запрос.Выполнить();
	
	Если РазмерВременнойТаблицы(Запрос, "ВТКОформлениюПередач", ПараметрыОбработчика) = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Нет остатков в регистре ""Резервы товаров организаций""'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Проверки состояния системы, относящиеся к этапу.

Процедура ОписаниеПроверок_ОформлениеПередачТоваров(ТаблицаПроверок)
	
	// Оформление передач товаров.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НеВыполненаПередачаТоваров",
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеПередачТоваров,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаНеобходимостиОформленияПередачТоваров");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Не оформленные передачи товаров между организациями'"),
		НСтр("ru='Должны быть оформлены документы ""Передача товаров между организациями"".'"));
	
КонецПроцедуры

Процедура ПроверкаНеобходимостиОформленияПередачТоваров(ПараметрыПроверки) Экспорт
	
	Если НЕ ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры", НСтр("ru='Аналитика номенклатуры'"));
	СписокПолей.Добавить("ВидЗапасов", 				   НСтр("ru='Вид запасов'"));
	СписокПолей.Добавить("НомерГТД", 				   НСтр("ru='Номер ГТД'"));
	СписокПолей.Добавить("Количество",		 		   НСтр("ru='Количество'"));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТКОформлениюПередач",
		НСтр("ru='Требуется оформить передачу товаров в организацию ""%1"" на конец периода %2'"),
		СписокПолей);
		
	ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

#КонецОбласти

#Область ОформлениеОстатковТоваровКПередаче

// Обработчики этапа.

Процедура Использование_ОформлениеОстатковТоваровКПередаче(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КПередаче.ОрганизацияВладелец КАК Организация,
	|	КПередаче.АналитикаУчетаНоменклатуры,
	|	КПередаче.ВидЗапасовПродавца КАК ВидЗапасов,
	|	КПередаче.НомерГТД,
	|	КПередаче.КоличествоКонечныйОстаток КАК Количество
	|ПОМЕСТИТЬ ОстаткиКПередаче
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизацийКПередаче.ОстаткиИОбороты(&НачалоПериода, &КонецПериода) КАК КПередаче
	|ГДЕ
	|	(КПередаче.ОрганизацияВладелец В (&МассивОрганизаций)
	|		ИЛИ КПередаче.ВидЗапасовПродавца.Организация В (&МассивОрганизаций))
	|	И КПередаче.КоличествоКонечныйОстаток <> 0
	|	И (КПередаче.КоличествоКонечныйОстаток - КПередаче.КоличествоНачальныйОстаток > 0
	|		ИЛИ КПередаче.КоличествоНачальныйОстаток = 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КПередаче.ОрганизацияВладелец КАК Организация,
	|	КПередаче.АналитикаУчетаНоменклатуры,
	|	КПередаче.ВидЗапасовПродавца КАК ВидЗапасов,
	|	КПередаче.НомерГТД,
	|	КПередаче.ВозвращеноКонечныйОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизацийКПередаче.ОстаткиИОбороты(&НачалоПериода, &КонецПериода) КАК КПередаче
	|ГДЕ
	|	(КПередаче.ОрганизацияВладелец В (&МассивОрганизаций)
	|		ИЛИ КПередаче.ВидЗапасовПродавца.Организация В (&МассивОрганизаций))
	|	И КПередаче.ВозвращеноКонечныйОстаток <> 0
	|	И (КПередаче.ВозвращеноКонечныйОстаток - КПередаче.ВозвращеноНачальныйОстаток <> 0
	|		ИЛИ КПередаче.ВозвращеноНачальныйОстаток = 0)
	|";
	
	Запрос.Выполнить();
	
	Если РазмерВременнойТаблицы(Запрос, "ОстаткиКПередаче", ПараметрыОбработчика) = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Нет остатков в регистре ""Товары организаций к передаче""'"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Оформление_ОформлениеОстатковТоваровКПередаче(ПараметрыОбработчика) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
		ПараметрыОбработчика.ДанныеЭтапа.Наименование = СтрЗаменить(ПараметрыОбработчика.ДанныеЭтапа.Наименование, "2.4", "11.4");
	КонецЕсли;
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика);
	
КонецПроцедуры

// Проверки состояния системы, относящиеся к этапу.

Процедура ОписаниеПроверок_ОформлениеОстатковТоваровКПередаче(ТаблицаПроверок)
	
	// Оформление остатков передач товаров.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НеОформленыОстаткиПередачТоваров",
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеОстатковТоваровКПередаче,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаОстатковПередачТоваров");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Не оформленные остатки передач товаров между организациями'"),
		НСтр("ru='Должны быть оформлены документы ""Передача товаров между организациями"".'"));
		
КонецПроцедуры

Процедура ПроверкаОстатковПередачТоваров(ПараметрыПроверки) Экспорт
	
	Если НЕ ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры", НСтр("ru='Аналитика номенклатуры'"));
	СписокПолей.Добавить("ВидЗапасов", 				   НСтр("ru='Вид запасов'"));
	СписокПолей.Добавить("НомерГТД", 				   НСтр("ru='Номер ГТД'"));
	СписокПолей.Добавить("Количество",		 		   НСтр("ru='Количество'"));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ОстаткиКПередаче",
		НСтр("ru='Обнаружены товары, требующие оформления передачи/возврата от организации ""%1"" на конец периода %2'"),
		СписокПолей);
		
	ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

#КонецОбласти

#Область ОформлениеВыкупаТоваров

// Обработчики этапа.

Процедура Использование_ОформлениеВыкупаТоваров(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Если ПараметрыОбработчика.ПараметрыРасчета.ВсеОрганизации Тогда 
		Запрос.УстановитьПараметр("Получатель", Новый Массив);
	Иначе
		Запрос.УстановитьПараметр("Получатель", ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
	КонецЕсли;	
	Запрос.УстановитьПараметр("ОформлятьВыкупы", Истина);
	Запрос.Текст = ЗапасыСервер.ТекстЗапросаОформленияПоРезервамТоваровОрганизаций(Запрос, "ВТПоНоменклатуреВТКОформлениюВыкупов");
		
	Запрос.Выполнить();
			
	Если РазмерВременнойТаблицы(Запрос, "ВТКОформлениюВыкупов", ПараметрыОбработчика) = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Нет остатков товаров к выкупу в регистре ""Резервы товаров организаций""'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Проверки состояния системы, относящиеся к этапу.

Процедура ОписаниеПроверок_ОформлениеВыкупаТоваров(ТаблицаПроверок)
	
	// Оформление выкупа товаров.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НеОформленыВыкупыТоваров",
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеВыкупаТоваров,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаОстатковТоваровКВыкупу");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Не оформленные выкупы товаров, принятых на ответственное хранение'"),
		НСтр("ru='Должны быть оформлены документы ""Выкуп товаров с хранения"".'"));
		
КонецПроцедуры

Процедура ПроверкаОстатковТоваровКВыкупу(ПараметрыПроверки) Экспорт
	
	Если НЕ ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры", НСтр("ru='Аналитика номенклатуры'"));
	СписокПолей.Добавить("Количество",		 		   НСтр("ru='Количество'"));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТКОформлениюВыкупов",
		НСтр("ru='Обнаружены товары, требующие оформления выкупа по организации ""%1"" на конец периода %2'"),
		СписокПолей);
		
	ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

#КонецОбласти

#Область ОформлениеОтчетовПоКомиссииМеждуОрганизациями

// Обработчики этапа.

Процедура Использование_ОформлениеОтчетовПоКомиссииМеждуОрганизациями(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Ключи.МестоХранения КАК Комиссионер,
	|	ТоварыПереданные.ВидЗапасов.Организация КАК Комитент,
	|	Ключи.Номенклатура КАК Номенклатура,
	|	Ключи.Характеристика КАК Характеристика,
	|	Ключи.Назначение КАК Назначение,
	|	ТоварыПереданные.КоличествоКонечныйОстаток - ТоварыПереданные.КоличествоНачальныйОстаток КАК Количество
	|ПОМЕСТИТЬ ОстаткиТоваровПереданных
	|ИЗ
	|	РегистрНакопления.ТоварыПереданныеНаКомиссию.ОстаткиИОбороты(&НачалоПериода, &КонецПериода) КАК ТоварыПереданные
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Ключи
	|	ПО Ключи.Ссылка = ТоварыПереданные.АналитикаУчетаНоменклатуры
	|ГДЕ
	|	ТоварыПереданные.АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Организация)
	|	И (ТоварыПереданные.КоличествоКонечныйОстаток - ТоварыПереданные.КоличествоНачальныйОстаток <> 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ключи.МестоХранения,
	|	ТоварыПереданные.ВидЗапасов.Организация,
	|	Ключи.Номенклатура,
	|	Ключи.Характеристика,
	|	Ключи.Назначение
	|;
	|///////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОформлению.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	КОформлению.ВидЗапасов КАК ВидЗапасов,
	|	КОформлению.НомерГТД КАК НомерГТД,
	|	КОформлению.ВидЗапасов.Организация КАК Комиссионер,
	|	КОформлению.ВидЗапасов.ВладелецТовара КАК Комитент,
	|	Ключи.Номенклатура КАК Номенклатура,
	|	Ключи.Характеристика КАК Характеристика,
	|	Ключи.Назначение КАК Назначение,
	|	КОформлению.КоличествоКонечныйОстаток - КОформлению.КоличествоНачальныйОстаток
	|		+ КОформлению.КоличествоСписаноКонечныйОстаток - КОформлению.КоличествоСписаноНачальныйОстаток КАК Количество
	|ПОМЕСТИТЬ ОстаткиТоваровКОформлениюВсе
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту.ОстаткиИОбороты(&НачалоПериода, &КонецПериода) КАК КОформлению
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Ключи
	|	ПО Ключи.Ссылка = КОформлению.АналитикаУчетаНоменклатуры
	|ГДЕ
	|	КОформлению.АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Организация)
	|	И ((КОформлению.КоличествоКонечныйОстаток - КОформлению.КоличествоНачальныйОстаток <> 0)
	|		ИЛИ (КОформлению.КоличествоСписаноКонечныйОстаток - КОформлению.КоличествоСписаноНачальныйОстаток <> 0))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КОформлению.ВидЗапасов.Организация,
	|	КОформлению.ВидЗапасов.ВладелецТовара,
	|	Ключи.Номенклатура,
	|	Ключи.Характеристика,
	|	Ключи.Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОформлению.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	КОформлению.ВидЗапасов КАК ВидЗапасов,
	|	КОформлению.НомерГТД КАК НомерГТД,
	|	КОформлению.Комиссионер КАК Комиссионер,
	|	КОформлению.Комитент КАК Комитент,
	|	КОформлению.Номенклатура КАК Номенклатура,
	|	КОформлению.Характеристика КАК Характеристика,
	|	КОформлению.Назначение КАК Назначение,
	|	ВЫБОР КОГДА КОформлению.Количество < ТоварыПереданные.Количество
	|		ТОГДА КОформлению.Количество
	|		ИНАЧЕ ТоварыПереданные.Количество
	|	КОНЕЦ КАК Количество
	|ПОМЕСТИТЬ ОстаткиТоваровКОформлению
	|ИЗ
	|	ОстаткиТоваровКОформлениюВсе КАК КОформлению
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиТоваровПереданных КАК ТоварыПереданные
	|	ПО КОформлению.Комиссионер = ТоварыПереданные.Комиссионер
	|		И КОформлению.Комитент = ТоварыПереданные.Комитент
	|		И КОформлению.Номенклатура = ТоварыПереданные.Номенклатура
	|		И КОформлению.Характеристика = ТоварыПереданные.Характеристика
	|		И КОформлению.Назначение = ТоварыПереданные.Назначение
	|ГДЕ
	|	КОформлению.Количество <> 0
	|	И ТоварыПереданные.Количество <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОформлению.Комитент КАК Организация,
	|	КОформлению.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	КОформлению.ВидЗапасов КАК ВидЗапасов,
	|	КОформлению.НомерГТД КАК НомерГТД,
	|	КОформлению.Комиссионер КАК Комиссионер,
	|	КОформлению.Комитент КАК Комитент,
	|	КОформлению.Номенклатура КАК Номенклатура,
	|	КОформлению.Характеристика КАК Характеристика,
	|	КОформлению.Назначение КАК Назначение,
	|	КОформлению.Количество КАК Количество
	|ПОМЕСТИТЬ ВТОстаткиКомитента
	|ИЗ
	|	ОстаткиТоваровКОформлению КАК КОформлению
	|ГДЕ
	|	КОформлению.Комитент В(&МассивОрганизаций)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОформлению.Комиссионер КАК Организация,
	|	КОформлению.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	КОформлению.ВидЗапасов КАК ВидЗапасов,
	|	КОформлению.НомерГТД КАК НомерГТД,
	|	КОформлению.Комиссионер КАК Комиссионер,
	|	КОформлению.Комитент КАК Комитент,
	|	КОформлению.Номенклатура КАК Номенклатура,
	|	КОформлению.Характеристика КАК Характеристика,
	|	КОформлению.Назначение КАК Назначение,
	|	КОформлению.Количество КАК Количество
	|ПОМЕСТИТЬ ВТОстаткиКомиссионера
	|ИЗ
	|	ОстаткиТоваровКОформлению КАК КОформлению
	|ГДЕ
	|	КОформлению.Комиссионер В(&МассивОрганизаций)
	|";
	
	Запрос.Выполнить();
	
	РазмерыВременныхТаблиц = РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.ВТОстаткиКомитента = 0 И РазмерыВременныхТаблиц.ВТОстаткиКомиссионера = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Нет остатков в регистре ""Товары к оформлению отчетов комитенту"" по схеме Интеркампани'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Проверки состояния системы, относящиеся к этапу.

Процедура ОписаниеПроверок_ОформлениеОтчетовПоКомиссииМеждуОрганизациями(ТаблицаПроверок)
	
	// Оформление отчетов по комиссии между организациями.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НеВыполненоОформлениеОтчетовПоКомиссииМеждуОрганизациями",
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеОтчетовПоКомиссииМеждуОрганизациями,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаОформленияОтчетовКомитентуМеждуОрганизациями");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Не оформленные отчеты по комиссии между организациями'"),
		НСтр("ru='Должны быть оформлены документы ""Отчет по комиссии между организациями"" и ""Отчет по комиссии между организациями о списании"".'"));
		
КонецПроцедуры

Процедура ПроверкаОформленияОтчетовКомитентуМеждуОрганизациями(ПараметрыПроверки) Экспорт
	
	Если НЕ ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Комиссионер", 			   НСтр("ru='Организация-комиссионер'"));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры", НСтр("ru='Аналитика номенклатуры'"));
	СписокПолей.Добавить("ВидЗапасов", 				   НСтр("ru='Вид запасов'"));
	СписокПолей.Добавить("НомерГТД", 				   НСтр("ru='Номер ГТД'"));
	СписокПолей.Добавить("Количество",		 		   НСтр("ru='Количество'"));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТОстаткиКомитента",
		НСтр("ru='Обнаружены товары, требующие оформления отчетов комитенту ""%1"" на конец периода %2'"),
		СписокПолей);
		
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Комитент", 				   НСтр("ru='Организация-комитент'"));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры", НСтр("ru='Аналитика номенклатуры'"));
	СписокПолей.Добавить("ВидЗапасов", 				   НСтр("ru='Вид запасов'"));
	СписокПолей.Добавить("НомерГТД", 				   НСтр("ru='Номер ГТД'"));
	СписокПолей.Добавить("Количество",		 		   НСтр("ru='Количество'"));
	
	ДополнитьПараметрыРегистрацииПроблемПроверки(ПараметрыРегистрации,
		"ВТОстаткиКомиссионера",
		НСтр("ru='Обнаружены товары, требующие оформления отчетов комитенту от организации ""%1"" на конец периода %2'"),
		СписокПолей);
	
	ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

#КонецОбласти

#Область ОформлениеОтчетовКомитентамОСписании

// Обработчики этапа.

Процедура Использование_ОформлениеОтчетовКомитентамОСписании(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОформлению.ВидЗапасов.Организация КАК Организация,
	|	КОформлению.АналитикаУчетаНоменклатуры.МестоХранения КАК Комитент,
	|	КОформлению.АналитикаУчетаНоменклатуры,
	|	КОформлению.ВидЗапасов КАК ВидЗапасов,
	|	КОформлению.НомерГТД,
	|	КОформлению.КоличествоСписаноКонечныйОстаток - КОформлению.КоличествоСписаноНачальныйОстаток КАК Количество
	|ПОМЕСТИТЬ ВТКОформлению
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			,
	|			НЕ АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Организация)
	|				И ВидЗапасов.Организация В (&МассивОрганизаций)) КАК КОформлению
	|ГДЕ
	|	КОформлению.КоличествоСписаноКонечныйОстаток - КОформлению.КоличествоСписаноНачальныйОстаток <> 0";
	
	Запрос.Выполнить();
	
	Если РазмерВременнойТаблицы(Запрос, "ВТКОформлению", ПараметрыОбработчика) = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Нет остатков в регистре ""Товары к оформлению отчетов комитенту"" по сторонним комитентам'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Проверки состояния системы, относящиеся к этапу.

Процедура ОписаниеПроверок_ОформлениеОтчетовКомитентамОСписании(ТаблицаПроверок)
	
	// Оформление отчетов комитентам о списании.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НеВыполненоОформлениеОтчетовКомитентуОСписании",
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеОтчетовКомитентамОСписании,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаОформленияОтчетовКомитентуОСписании");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Не оформленные отчеты комитентам о списании'"),
		НСтр("ru='Должны быть оформлены документы ""Отчет комитенту о списании"".'"));
		
КонецПроцедуры

Процедура ПроверкаОформленияОтчетовКомитентуОСписании(ПараметрыПроверки) Экспорт
	
	Если НЕ ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Комитент", 				   НСтр("ru='Комитент'"));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры", НСтр("ru='Аналитика номенклатуры'"));
	СписокПолей.Добавить("ВидЗапасов", 				   НСтр("ru='Вид запасов'"));
	СписокПолей.Добавить("НомерГТД", 				   НСтр("ru='Номер ГТД'"));
	СписокПолей.Добавить("Количество",		 		   НСтр("ru='Количество'"));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТКОформлению",
		НСтр("ru='Обнаружены товары, требующие оформления отчетов комитенту о списании от организации ""%1"" на конец периода %2'"),
		СписокПолей);
		
	ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

#КонецОбласти

#Область НачисленияПоКредитамДепозитамИВыданнымЗаймам

// Обработчики этапа.

Процедура Использование_НачисленияПоКредитамДепозитамИВыданнымЗаймам(ПараметрыОбработчика) Экспорт
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов") Тогда
		УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru='Договоры кредитов и депозитов не используются.'"));
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	График.ВариантГрафика КАК ВариантГрафика 
	|ПОМЕСТИТЬ Графики
	|ИЗ
	|	РегистрСведений.ГрафикНачисленийКредитовИДепозитов КАК График
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК Договор
	|	ПО График.ВариантГрафика.Владелец = Договор.Ссылка
	|		И График.ВариантГрафика.Используется
	|		И Договор.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|		И График.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|ГДЕ
	|	Договор.Организация В (&МассивОрганизаций)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	График.ВариантГрафика КАК ВариантГрафика
	|ИЗ
	|	РегистрСведений.ГрафикОплатКредитовИДепозитов КАК График
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК Договор
	|	ПО График.ВариантГрафика.Владелец = Договор.Ссылка
	|		И График.ВариантГрафика.Используется
	|		И Договор.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|		И График.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|ГДЕ
	|	Договор.Организация В (&МассивОрганизаций)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Договор.Организация КАК Организация,
	|	Договор.Ссылка КАК Договор,
	|	График.Проценты КАК ПроцентНачисленияПлан,
	|	График.Комиссия КАК КомиссияНачисленияПлан,
	|	0 КАК ПроцентНачисленияФакт,
	|	0 КАК КомиссияНачисленияФакт
	|ПОМЕСТИТЬ втПланФактРазвернуто
	|ИЗ
	|	РегистрСведений.ГрафикНачисленийКредитовИДепозитов КАК График
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК Договор
	|	ПО График.ВариантГрафика.Владелец = Договор.Ссылка
	|		И Договор.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|		И График.ВариантГрафика.Используется
	|		И График.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|ГДЕ
	|	Договор.Организация В (&МассивОрганизаций)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Договоры.Организация,
	|	Расчеты.Договор КАК Договор,
	|	0 КАК ПроцентНачисленияПлан,
	|	0 КАК КомиссияНачисленияПлан,
	|	ВЫБОР КОГДА Расчеты.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Проценты)
	|		ТОГДА Расчеты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПроцентНачисленияФакт,
	|	ВЫБОР КОГДА Расчеты.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Комиссия)
	|		ТОГДА Расчеты.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КомиссияНачисленияФакт
	|ИЗ
	|	РегистрНакопления.РасчетыПоФинансовымИнструментам КАК Расчеты
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК Договоры
	|	ПО Расчеты.Договор = Договоры.Ссылка
	|		И Договоры.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|		И Расчеты.ТипГрафика = ЗНАЧЕНИЕ(Перечисление.ТипыГрафиковФинансовыхИнструментов.Начисления)
	|		И Расчеты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|ГДЕ
	|	Договоры.Организация В (&МассивОрганизаций)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПланФакт.Организация КАК Организация,
	|	втПланФакт.Договор КАК Договор,
	|	СУММА(втПланФакт.ПроцентНачисленияПлан) КАК ПроцентНачисленияПлан,
	|	СУММА(втПланФакт.КомиссияНачисленияПлан) КАК КомиссияНачисленияПлан,
	|	СУММА(втПланФакт.ПроцентНачисленияФакт) КАК ПроцентНачисленияФакт,
	|	СУММА(втПланФакт.КомиссияНачисленияФакт) КАК КомиссияНачисленияФакт
	|ПОМЕСТИТЬ Отклонения
	|ИЗ
	|	втПланФактРазвернуто КАК втПланФакт
	|СГРУППИРОВАТЬ ПО
	|	втПланФакт.Организация,
	|	втПланФакт.Договор
	|ИМЕЮЩИЕ
	|	СУММА(втПланФакт.ПроцентНачисленияПлан) - СУММА(втПланФакт.ПроцентНачисленияФакт) > 0
	|		ИЛИ СУММА(втПланФакт.КомиссияНачисленияПлан) - СУММА(втПланФакт.КомиссияНачисленияФакт) > 0";
	
	Запрос.Выполнить();
	
	РазмерыВременныхТаблиц = РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.Графики = 0 Тогда
			
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Нет графиков начислений и оплат по договорам кредитов и депозитов.'"));
		
	Иначе
		
		ЗафиксироватьРезультатыОбработчикаИспользованияПоОрганизациям(
			ПараметрыОбработчика,
			НСтр("ru='По организации ""%1"" за период %2 есть отклонения в плановых и фактических начислениях по договорам кредитов и депозитов.'"),
			Запрос,
			"Отклонения",
			Ложь,
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Группа_Взаиморасчеты

#Область ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов

// Обработчики этапа.

Процедура Использование_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Расчеты.АналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитики
	|	ПО Расчеты.АналитикаУчетаПоПартнерам = Аналитики.Ссылка
	|ГДЕ
	|	Расчеты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Аналитики.Организация В (&МассивОрганизаций)
	|	И Расчеты.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Расчеты.АналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитики
	|	ПО Расчеты.АналитикаУчетаПоПартнерам = Аналитики.Ссылка
	|ГДЕ
	|	Расчеты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Аналитики.Организация В (&МассивОрганизаций)
	|	И Расчеты.Активность";
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, ПараметрыРасчета.МассивОрганизаций.Количество());
	
	ЕстьДвиженияПоРасчетам = НЕ Запрос.Выполнить().Пустой();
	
	Если НЕ ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		
		АналитикиРасчета = РаспределениеВзаиморасчетовВызовСервера.АналитикиРасчета();
		АналитикиРасчета.Организации = ПараметрыРасчета.МассивОрганизаций;
		
		НачалоРасчета = РаспределениеВзаиморасчетовВызовСервера.НачалоРасчетов(КонецМесяца(ПараметрыРасчета.Период), АналитикиРасчета);
		ПериодВДиапазонеПересчета = (ЗначениеЗаполнено(НачалоРасчета) И НачалоРасчета <= ПараметрыРасчета.ПериодРегистрации);
		
	Иначе
		
		НачалоРасчета = НачалоРасчета(
			ПараметрыОбработчика.ДанныеЭтапа.Код,
			ПараметрыОбработчика.ПараметрыРасчета.КонецПериода,
			Неопределено,
			ПараметрыРасчета.МассивОрганизаций);
		
		ПериодВДиапазонеПересчета = ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Истина);
		ПараметрыОбработчика.ТаблицаПояснения.Очистить();
		
		Если ПериодВДиапазонеПересчета Тогда
			Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ПараметрыРасчета.ПериодРегистрации));
		Иначе
			Запрос.УстановитьПараметр("НачалоМесяца", Дата(1,1,1,1,1,2));
		КонецЕсли;
		
		Запрос.Текст = ОперативныеВзаиморасчетыСервер.ТекстЗапросаНекорректныхОстаткиВзаиморасчетовПоСрокам("ВТНекорректныеОстаткиВзаиморасчетов");
		Запрос.Выполнить();
		
		Запрос.Текст = "УНИЧТОЖИТЬ ВтАналитика";
		Запрос.Выполнить();
		
		Запрос.Текст = ОперативныеВзаиморасчетыСервер.ТекстЗапросаРазвернутоеСальдо("ВТРазвернутоеСальдоВзаиморасчетов");
		Запрос.Выполнить();
		
	КонецЕсли;
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	РегистрыДляРасчета = Документы.РасчетКурсовыхРазниц.РегистрыРасчета(Перечисления.ХозяйственныеОперации.ПереоценкаРасчетовСПоставщиками);
	РегистрыДляРасчета = Документы.РасчетКурсовыхРазниц.РегистрыРасчета(Перечисления.ХозяйственныеОперации.ПереоценкаРасчетовСКлиентами, РегистрыДляРасчета);
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, ПараметрыРасчета.МассивОрганизаций.Количество());
	
	ЕстьВалютныеОстатки = Документы.РасчетКурсовыхРазниц.ЕстьВалютныеОстатки(
		ПараметрыРасчета.МассивОрганизаций,
		ПараметрыРасчета.КонецПериода,
		РегистрыДляРасчета);
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, ПараметрыРасчета.МассивОрганизаций.Количество());
	
	ТребуетсяПереоценка = Документы.РасчетКурсовыхРазниц.ТребуетсяПереоценкаВзаиморасчетов(
		ПараметрыРасчета.МассивОрганизаций,
		ПараметрыРасчета.ПериодРегистрации);
		
	Если НЕ ТребуетсяПереоценка И НЕ ПериодВДиапазонеПересчета Тогда
		
		Если НЕ ЕстьДвиженияПоРасчетам Тогда
			
			// Расчет не требуется.
			УстановитьСостояниеНеТребуется(
				ПараметрыОбработчика,
				НСтр("ru='Нет движений по регистрам расчетов с клиентами и поставщиками.'"));
			
			Если НЕ ЕстьВалютныеОстатки Тогда
				УстановитьСостояниеНеТребуется(
					ПараметрыОбработчика,
					НСтр("ru='Нет валютных остатков по регистрам расчетов с клиентами и поставщиками.'"));
			КонецЕсли;
			
		Иначе
			// Расчет выполнен успешно.
		КонецЕсли;
		
	Иначе
		
		// Требуется перерасчет.
		Если ПериодВДиапазонеПересчета Тогда
			
			ПараметрыОбработчика.ДанныеЭтапа.ДатаНачалаРасчета = НачалоМесяца(НачалоРасчета);
			
			ТекстОперации = НСтр("ru='Формирование движений начиная с периода %1'");
			
			УстановитьСостояниеНеВыполнен(
				ПараметрыОбработчика,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстОперации,
					РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(НачалоРасчета)));
			
		КонецЕсли;
		
		Если ТребуетсяПереоценка Тогда
			
			ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
				Метаданные.Отчеты.СправкаРасчетПереоценкиВалютныхСредств.ПолноеИмя() + ".Форма", Истина);
			ДействиеПодробнее.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
			ДействиеПодробнее.ПараметрыФормы.Вставить("ВсеОрганизации", НЕ ЗначениеЗаполнено(ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций));
			
			Если ПериодВДиапазонеПересчета Тогда
				ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
					ПараметрыОбработчика,
					НСтр("ru = 'Расчет курсовых разниц по регистрам расчетов с клиентами и поставщиками.'", ОбщегоНазначения.КодОсновногоЯзыка()),
					ЗакрытиеМесяцаСервер.ТекстПодробнееПоУмолчанию(),
					ДействиеПодробнее);
			Иначе
				ЗакрытиеМесяцаСервер.УстановитьСостояниеВыполненСОшибками(
					ПараметрыОбработчика,
					НСтр("ru = 'Расчет курсовых разниц по регистрам расчетов с клиентами и поставщиками.'", ОбщегоНазначения.КодОсновногоЯзыка()),
					ЗакрытиеМесяцаСервер.ТекстПодробнееПоУмолчанию(),
					ДействиеПодробнее);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Оформление_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов(ПараметрыОбработчика) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		ПараметрыОбработчика.ДанныеЭтапа.Наименование = НСтр("ru = 'Актуализация движений документов по данным взаиморасчетов'");
		ПараметрыОбработчика.ДанныеЭтапа.ТекстВыполнить = НСтр("ru='Выполнить'");
	Иначе
		ПараметрыОбработчика.ДанныеЭтапа.Наименование = НСтр("ru = 'Формирование движений по данным взаиморасчетов'");
		ПараметрыОбработчика.ДанныеЭтапа.ТекстВыполнить = НСтр("ru='Сформировать'");
	КонецЕсли;
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика);
	
КонецПроцедуры

Процедура ОписаниеПроверок_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов(ТаблицаПроверок)
	
	Если Константы.НоваяАрхитектураВзаиморасчетов.Получить() Тогда
		
		// Расхождения остатков оперативных и финансовых регистров взаиморасчетов.
		ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
			"ПроверкаОстатковВзаиморасчетов",
			Перечисления.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов,
			Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
			"ЗакрытиеМесяцаСервер.ПроверкаОстатковВзаиморасчетов");
		
		ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
			НСтр("ru='Расхождения в регистрах взаиморасчетов'"),
			НСтр("ru='Существует 2 способа исправления: 
				|1) Закрытие месяца выявит расхождения и скорректирует остатки на начало закрываемого месяца.
				|Задания к переотражению в БУ, МФУ, НДС и к закрытию месяца при этом созданы не будут.
				|2) Для исправления движений документов, приведших к некорректным остаткам необходимо перепровести соответствующие документы.
				|'"));
		
		// Развернутое сальдо по взаиморасчетам.
		ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
			"ПроверкаРазвернутогоСальдо",
			Перечисления.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов,
			Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
			"ЗакрытиеМесяцаСервер.ПроверкаРазвернутогоСальдо");
		
		ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
			НСтр("ru='Развернутое сальдо по регистрам взаиморасчетов'"),
			НСтр("ru='При наличии развернутого сальдо по взаиморасчетам в рамках одного объекта расчетов и аналитики
				|могут возникать ошибки распределения взаиморасчетов в финансовых регистрах.'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаОстатковВзаиморасчетов(ПараметрыПроверки) Экспорт
	
	Если НЕ ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("ТипРасчетов", НСтр("ru='Тип расчетов'"));
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("АналитикаУчетаПоПартнерам", НСтр("ru='Аналитика учета по партнерам'"));
	СписокПолей.Добавить("ОбъектРасчетов",            НСтр("ru='Объект расчетов'"));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТНекорректныеОстаткиВзаиморасчетов",
		НСтр("ru='Исправление некорректных остатков по финансовым регистрам взаиморасчетов на начало периода %2.'"),
		СписокПолей,,);
		
	ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

Процедура ПроверкаРазвернутогоСальдо(ПараметрыПроверки) Экспорт 
	
	Если НЕ ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("ТипРасчетов", НСтр("ru='Тип расчетов'"));
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("АналитикаУчетаПоПартнерам", НСтр("ru='Аналитика учета по партнерам'"));
	СписокПолей.Добавить("ОбъектРасчетов",            НСтр("ru='Объект расчетов'"));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТРазвернутоеСальдоВзаиморасчетов",
		НСтр("ru='Исправление развернутого сальдо по финансовым регистрам взаиморасчетов на начало периода %2.'"),
		СписокПолей,,);
		
	ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации);
		
КонецПроцедуры

Процедура Выполнить_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	Если НЕ ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		
		АналитикиРасчета = РаспределениеВзаиморасчетовВызовСервера.АналитикиРасчета();
		АналитикиРасчета.Организации = ПараметрыРасчета.МассивОрганизаций;
		
		РаспределениеВзаиморасчетовВызовСервера.РассчитатьВсе(ПараметрыРасчета.КонецПериода, АналитикиРасчета);
		
		//Переоценка на конец месяца или по дням если не было взаиморасчетов
		Документы.РасчетКурсовыхРазниц.ПереоценитьРасчетыСКлиентами(
			ПараметрыРасчета.МассивОрганизаций,
			ПараметрыРасчета.ПериодРегистрации);
		Документы.РасчетКурсовыхРазниц.ПереоценитьРасчетыСПоставщиками(
			ПараметрыРасчета.МассивОрганизаций,
			ПараметрыРасчета.ПериодРегистрации);
		
	Иначе
		
		ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
		НачалоРасчета = НачалоРасчета(
			ПараметрыОбработчика.ДанныеЭтапа.Код,
			ПараметрыРасчета.КонецПериода,
			,
			ПараметрыРасчета.МассивОрганизаций);
			
		ИмяКлючевойОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ЗакрытиеМесяца.%1",
				СокрЛП(ПараметрыОбработчика.ДанныеЭтапа.Код));
		ОписаниеЗамера 		= ОценкаПроизводительности.НачатьЗамерДлительнойОперации(ИмяКлючевойОперации);
		КоличествоДанных	= 0;
		
		Пока НачалоРасчета <= ПараметрыОбработчика.ПараметрыРасчета.КонецПериода Цикл
		
			НомерЗадания 	 	= УвеличитьНомерЗадания();
			ОкончаниеПериода 	= КонецМесяца(НачалоРасчета);
			
			НачатьТранзакцию();
			
			Попытка
				
				ЗаблокироватьРегистрЗаданий(
					НомерЗадания,
					ПараметрыРасчета.МассивОрганизаций,
					ПараметрыОбработчика.ДанныеЭтапа.Код);
				
				ДанныеКРасчетуЗаМесяц = ЗаданияКРасчетуЗаМесяц(
					НачалоРасчета,
					ОкончаниеПериода,
					НомерЗадания,
					ПараметрыРасчета.МассивОрганизаций,
					ПараметрыОбработчика.ДанныеЭтапа.Код);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='При выполнении расчета за период %1 произошла ошибка:
						|%2'"),
					РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
					ПараметрыОбработчика,
					ТекстОшибки,
					ПараметрыРасчета.МассивОрганизаций,
					НачалоРасчета);
				
			КонецПопытки;
			
			//Исправления ошибок.
			
			ОперативныеВзаиморасчетыСервер.ИсправитьОстаткиВзаиморасчетов(НачалоРасчета, ДанныеКРасчетуЗаМесяц.Организация);
			ОперативныеВзаиморасчетыСервер.ИсправитьРазвернутоеСальдо(НачалоРасчета, ДанныеКРасчетуЗаМесяц.Организация);
			
			//Актуализация движений.
			
			Для Каждого Организация Из ДанныеКРасчетуЗаМесяц.Организация Цикл
				
				БылиОшибки = Ложь;
				
				Запрос = Новый Запрос;
				Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
				Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(ОкончаниеПериода, ВидГраницы.Включая));
				Запрос.УстановитьПараметр("КонецПериода", ОкончаниеПериода);
				Запрос.УстановитьПараметр("НачалоПериода", НачалоРасчета);
				Запрос.УстановитьПараметр("Организация",   Организация);
				Запрос.УстановитьПараметр("НоваяАрхитектураВзаиморасчетов", Истина);
				Запрос.УстановитьПараметр("ПоВсемДокументам", Ложь);
				Запрос.УстановитьПараметр("ВалютаУпрУчета", Константы.ВалютаУправленческогоУчета.Получить());
				Запрос.УстановитьПараметр("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
				
				#Область СуммыДокументовВВалютеРегл
				//Пересчет построчного распределения валютных сумм документов.
				
				Запрос.Текст = "
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	РасчетыСКлиентами.Регистратор КАК Регистратор,
				|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
				|	РасчетыСКлиентами.Период КАК Период
				|ПОМЕСТИТЬ РасчетыКОтражениюВУчете
				|ИЗ
				|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
				|ГДЕ 
				|	РасчетыСКлиентами.Период <= &КонецПериода И РасчетыСКлиентами.Период >= &НачалоПериода
				|	И РасчетыСКлиентами.АналитикаУчетаПоПартнерам.Организация = &Организация
				|	И РасчетыСКлиентами.Сумма <> 0
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	РасчетыСПоставщиками.Регистратор КАК Регистратор,
				|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
				|	РасчетыСПоставщиками.Период КАК Период
				|ИЗ
				|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
				|ГДЕ 
				|	РасчетыСПоставщиками.Период <= &КонецПериода И РасчетыСПоставщиками.Период >= &НачалоПериода
				|	И РасчетыСПоставщиками.АналитикаУчетаПоПартнерам.Организация = &Организация
				|	И РасчетыСПоставщиками.Сумма <> 0
				|;
				|////////////////////////////////////////////////////////////////////////////////
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Расчеты.Регистратор КАК ДокументРегистратор
				|ИЗ
				|	РасчетыКОтражениюВУчете КАК Расчеты";
				МассивВсехДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДокументРегистратор");
				РегистрыСведений.СуммыДокументовВВалютеРегл.РассчитатьСуммыДокументовВВалютеРегл(МассивВсехДокументов);
				
				
				
				КоличествоДанных = КоличествоДанных + МассивВсехДокументов.Количество();
				
				Запрос = Новый Запрос;
				Запрос.Текст = РегистрыСведений.СуммыДокументовВВалютеРегл.ТекстЗапросаДокументовДляПересчета();
				Запрос.УстановитьПараметр("МассивДокументов", МассивВсехДокументов);
				Запрос.УстановитьПараметр("ЭтоПроверка", Истина);
				Запрос.УстановитьПараметр("ВалютаУпрУчета", Константы.ВалютаУправленческогоУчета.Получить());
				Запрос.УстановитьПараметр("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
				Запрос.УстановитьПараметр("НоваяАрхитектураВзаиморасчетов", Истина);
				Запрос.УстановитьПараметр("ПоВсемДокументам", Ложь);
				
				ТаблицаНерассчитанныхДокументов = Запрос.Выполнить().Выгрузить();
				
				//Попытка перепровести проблемные документы.
				Для Каждого СтрокаДокумента Из ТаблицаНерассчитанныхДокументов Цикл
					Попытка
						Если НЕ ЗначениеЗаполнено(СтрокаДокумента.РасчетныйДокумент) Тогда
							Продолжить;
						КонецЕсли;
						ДокументОбъект = СтрокаДокумента.РасчетныйДокумент.ПолучитьОбъект();
						ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='При формировании движений по данным взаиморасчетов за период %1 
								|при попытке перепроведения документа %2 произошла ошибка:
								|%3'"),
							РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
							СтрокаДокумента.РасчетныйДокумент,
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						ЗаписьЖурналаРегистрации(
							НСтр("ru = 'Попытка перепроведения документов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
							УровеньЖурналаРегистрации.Ошибка,
							Метаданные.ОбщиеМодули.ЗакрытиеМесяцаСервер,
							,
							ТекстОшибки);
					КонецПопытки;
				КонецЦикла;
				
				Если ТаблицаНерассчитанныхДокументов.Количество() > 0 Тогда
					
					Шаблон = НСтр("ru='Не удалось выполнить распределение суммы взаиморасчетов на строки документа %1.
						|Итоги движений документа по регистрам взаиморасчетов отличается от движений по регистру сумм документа в валютах учёта.
						|Попробуйте перепровести документ вручную.'");
					
					ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемыРасчета(
						ПараметрыОбработчика.ДанныеЭтапа.Код,
						Организация,
						ПараметрыРасчета.ПериодРегистрации);
					
					Для Каждого СтрокаДокумента Из ТаблицаНерассчитанныхДокументов Цикл
						
						ГруппаПроблем = НСтр("ru='При выполнении операции были диагностированы ошибки'");
						
						ПолныйТекстПроблемы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, СтрокаДокумента.РасчетныйДокумент);
						
						ЗарегистрироватьПроблемуВыполненияРасчета(
							ПараметрыРегистрации,
							ГруппаПроблем,
							Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка,
							ПолныйТекстПроблемы,
							СтрокаДокумента.РасчетныйДокумент);
					КонецЦикла;
					
					БылиОшибки = Истина;
				КонецЕсли;
				
				//Обновление движений по оборотным регистрам платежных документов и взаимозачетов задолженности.
				РегистрыСведений.СуммыДокументовВВалютеРегл.ОбновитьДвиженияПоОборотнымРегистрамНепересчитываемыхДокументов(МассивВсехДокументов);
				
				Если БылиОшибки Тогда
					Возврат;
				КонецЕсли;
				
				#КонецОбласти
				
				//Переоценка на конец месяца или по дням если не было взаиморасчетов
				Документы.РасчетКурсовыхРазниц.ПереоценитьРасчетыСКлиентами(
					Организация,
					ОкончаниеПериода);
				Документы.РасчетКурсовыхРазниц.ПереоценитьРасчетыСПоставщиками(
					Организация,
					ОкончаниеПериода);
				
			КонецЦикла;
			
			НачатьТранзакцию();
			
			Попытка
				
				ЗаблокироватьРегистрЗаданий(
					НомерЗадания,
					ПараметрыРасчета.МассивОрганизаций,
					ПараметрыОбработчика.ДанныеЭтапа.Код);
				
				ЗафиксироватьРасчет(
					Неопределено,
					НомерЗадания,
					ПараметрыОбработчика.ДанныеЭтапа.Код,
					ДанныеКРасчетуЗаМесяц);
				
				РегистрыСведений.ЗаданияКЗакрытиюМесяца.СформироватьЗаданияНаСледующийПериод(
					ДанныеКРасчетуЗаМесяц.ВременныеТаблицы,
					ОкончаниеПериода + 1);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='При выполнении расчета за период %1 произошла ошибка:
						|%2'"),
					РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
					ПараметрыОбработчика,
					ТекстОшибки,
					ПараметрыРасчета.МассивОрганизаций,
					НачалоРасчета);
				
			КонецПопытки;
			
			НачалоРасчета = ОкончаниеПериода + 1;
			
		КонецЦикла;
		
		ТребуетсяПереоценка = Документы.РасчетКурсовыхРазниц.ТребуетсяПереоценкаВзаиморасчетов(
			ПараметрыРасчета.МассивОрганизаций,
			ПараметрыРасчета.КонецПериода);
		
		Если ТребуетсяПереоценка Тогда
			ОперативныеВзаиморасчетыСервер.ВыполнитьПереоценкуНаДату(ПараметрыРасчета.МассивОрганизаций, ПараметрыРасчета.КонецПериода);
		КонецЕсли;
		
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПереоценкаДенежныхСредствИФинансовыхИнструментов

// Обработчики этапа.

Процедура Использование_ПереоценкаДенежныхСредствИФинансовыхИнструментов(ПараметрыОбработчика) Экспорт
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют") Тогда
		
		УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru='Мультивалютный учет не ведется'"));
			
		Возврат;
		
	КонецЕсли;
	
	ДействиеПодробнее = ОписаниеДействия_ОткрытьФорму(
		Метаданные.Отчеты.СправкаРасчетПереоценкиВалютныхСредств.ПолноеИмя() + ".Форма", Истина);
	ДействиеПодробнее.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ДействиеПодробнее.ПараметрыФормы.Вставить("ВсеОрганизации", ПараметрыОбработчика.ПараметрыРасчета.ВсеОрганизации);
	
	Если ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Истина,,,ДействиеПодробнее) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	РегистрыДляРасчета = Документы.РасчетКурсовыхРазниц.РегистрыРасчета(Перечисления.ХозяйственныеОперации.ПереоценкаДенежныхСредств);
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов") Тогда
		РегистрыДляРасчета = Документы.РасчетКурсовыхРазниц.РегистрыРасчета(
			Перечисления.ХозяйственныеОперации.ПереоценкаФинансовыхИнструментов,
			РегистрыДляРасчета);
	КонецЕсли;
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, ПараметрыРасчета.МассивОрганизаций.Количество());
	
	ТребуетсяПереоценка = Документы.РасчетКурсовыхРазниц.ТребуетсяПереоценка(
		ПараметрыРасчета.МассивОрганизаций,
		ПараметрыРасчета.КонецПериода,
		РегистрыДляРасчета);
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, ПараметрыРасчета.МассивОрганизаций.Количество());
	
	ЕстьВалютныеОстатки = Документы.РасчетКурсовыхРазниц.ЕстьВалютныеОстатки(
		ПараметрыРасчета.МассивОрганизаций,
		ПараметрыРасчета.КонецПериода,
		РегистрыДляРасчета);
		
	Если ТребуетсяПереоценка Тогда
			
		УстановитьСостояниеВыполненСОшибками(
			ПараметрыОбработчика,
			НСтр("ru='Обнаружены курсовые разницы по регистрам учета денежных средств.'"),
			ТекстПодробнееПоУмолчанию(),
			ДействиеПодробнее);
		
	ИначеЕсли НЕ ЕстьВалютныеОстатки Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Нет валютных остатков по регистрам учета денежных средств.'"));
		
	КонецЕсли;
	
	УстановитьДополнительноеСвойствоОбработчика(ПараметрыОбработчика, "ТребуетсяПереоценка", ТребуетсяПереоценка);
	
КонецПроцедуры

Процедура Оформление_ПереоценкаДенежныхСредствИФинансовыхИнструментов(ПараметрыОбработчика) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		ПараметрыОбработчика.ДанныеЭтапа.Наименование = НСтр("ru = 'Переоценка денежных средств'");
	КонецЕсли;
	
	ПараметрыОбработчика.ДанныеЭтапа.ТекстВыполнить = НСтр("ru='Выполнить'");
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика);
	
КонецПроцедуры

Процедура Выполнить_ПереоценкаДенежныхСредствИФинансовыхИнструментов(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	НачалоРасчета = НачалоРасчета(
		ПараметрыОбработчика.ДанныеЭтапа.Код,
		ПараметрыОбработчика.ПараметрыРасчета.КонецПериода,
		Неопределено,
		ПараметрыРасчета.МассивОрганизаций);
	
	ПервыйПроход  = Истина;
	
	ТребуетсяПереоценка = ПолучитьДополнительноеСвойствоОбработчика(ПараметрыОбработчика, "ТребуетсяПереоценка", Ложь);
	ЕстьЗаданиеКРасчету = (НачалоРасчета <= ПараметрыРасчета.КонецПериода);
	
	Если ТребуетсяПереоценка И НЕ ЕстьЗаданиеКРасчету Тогда
		НачалоРасчета = ПараметрыРасчета.КонецПериода; // пересчитать только указанный месяц
	КонецЕсли;
	
	Пока НачалоРасчета <= ПараметрыРасчета.КонецПериода ИЛИ ТребуетсяПереоценка Цикл
		
		ОкончаниеПериода = КонецМесяца(НачалоРасчета);
		
		Если ЕстьЗаданиеКРасчету Тогда
			
			Если ПервыйПроход Тогда
				НомерЗаданияДоРасчета = УвеличитьНомерЗадания();
			КонецЕсли;
		
			НачатьТранзакцию();
			
			Попытка
				
				ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета, ПараметрыРасчета.МассивОрганизаций, ПараметрыОбработчика.ДанныеЭтапа.Код);
				
				ДанныеКПереоценкеЗаМесяц = ЗаданияКРасчетуЗаМесяц(
					НачалоРасчета,
					ОкончаниеПериода,
					НомерЗаданияДоРасчета,
					ПараметрыРасчета.МассивОрганизаций,
					ПараметрыОбработчика.ДанныеЭтапа.Код);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='При выполнении расчета за период %1 произошла ошибка:
						|%2'"),
					РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
					ПараметрыОбработчика,
					ТекстОшибки,
					ПараметрыРасчета.МассивОрганизаций,
					НачалоРасчета);
				
			КонецПопытки;
			
		Иначе
			
			ДанныеКПереоценкеЗаМесяц = Новый Структура("Организация", ПараметрыРасчета.МассивОрганизаций);
			
		КонецЕсли;
		
		Попытка
			РегистрыДляРасчета = Документы.РасчетКурсовыхРазниц.РегистрыРасчета(Перечисления.ХозяйственныеОперации.ПереоценкаДенежныхСредств);
			ОрганизацииКПереоценке = Документы.РасчетКурсовыхРазниц.ТребуетсяПереоценка(
										ПараметрыРасчета.МассивОрганизаций, ОкончаниеПериода, РегистрыДляРасчета,,Истина);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОрганизацииКПереоценке, ДанныеКПереоценкеЗаМесяц.Организация, Истина);
			
			Документы.РасчетКурсовыхРазниц.ПереоценитьДенежныеСредства(
				ОрганизацииКПереоценке,
				НачалоРасчета);
		Исключение
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Переоценка денежных средств за период %1 завершилась с ошибкой:
					|%2'"),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ТекстОшибки,
				ДанныеКПереоценкеЗаМесяц.Организация,
				НачалоРасчета);
			
		КонецПопытки;
		
		Попытка
			Если ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов") Тогда
				Документы.РасчетКурсовыхРазниц.ПереоценитьКредитыДепозитыЗаймы(
					ДанныеКПереоценкеЗаМесяц.Организация,
					НачалоРасчета);
			КонецЕсли;
		Исключение
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Переоценка кредитов, депозитов, займов за период %1 завершилась с ошибкой:
					|%2'"),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ТекстОшибки,
				ДанныеКПереоценкеЗаМесяц.Организация,
				НачалоРасчета);
			
		КонецПопытки;
		
		СледующийМесяц = СледующийМесяцКРасчетуДенежныхСредств(НачалоРасчета, ПараметрыРасчета.МассивОрганизаций);
		
		Если ЕстьЗаданиеКРасчету И ПараметрыОбработчика.ТаблицаПояснения.Количество() = 0 Тогда
			
			НачатьТранзакцию();
			
			Попытка
				
				ЗаблокироватьРегистрЗаданий(
					НомерЗаданияДоРасчета,
					ПараметрыРасчета.МассивОрганизаций,
					ПараметрыОбработчика.ДанныеЭтапа.Код);
				
				ЗафиксироватьРасчет(
					СледующийМесяц,
					НомерЗаданияДоРасчета,
					ПараметрыОбработчика.ДанныеЭтапа.Код,
					ДанныеКПереоценкеЗаМесяц);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='При выполнении расчета за период %1 произошла ошибка:
						|%2'"),
					РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
					ПараметрыОбработчика,
					ТекстОшибки,
					ПараметрыРасчета.МассивОрганизаций,
					НачалоРасчета);
				
			КонецПопытки;
			
		КонецЕсли;
		
		Если ЕстьЗаданиеКРасчету И ЗначениеЗаполнено(СледующийМесяц) Тогда
			НачалоРасчета = СледующийМесяц;
		Иначе
			Если ЕстьЗаданиеКРасчету Тогда
				НачалоРасчета = КонецМесяца(НачалоРасчета) + 1; // следующий месяц
			Иначе
				НачалоРасчета = ПараметрыРасчета.КонецПериода + 1; // выход из цикла
			КонецЕсли;
		КонецЕсли;
		
		ТребуетсяПереоценка = Ложь;
		ПервыйПроход = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

// Вспомогательные методы этапа.

Функция СледующийМесяцКРасчетуДенежныхСредств(ПериодРасчета, МассивОрганизаций)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ 
	|	МИНИМУМ(ДенежныеСредства.Месяц) КАК МесяцКРасчету
	|ИЗ
	|	(ВЫБРАТЬ
	|		МИНИМУМ(ДенежныеСредства.Период) КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваБезналичные КАК ДенежныеСредства
	|	ГДЕ
	|		(ДенежныеСредства.БанковскийСчет.ВалютаДенежныхСредств <> &ВалютаРегл
	|			ИЛИ ДенежныеСредства.БанковскийСчет.ВалютаДенежныхСредств <> &ВалютаУпр)
	|		И ДенежныеСредства.Период > &ОбработанныйМесяц
	|		И ДенежныеСредства.Организация В (&МассивОрганизаций)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		&СледующийМесяц КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваБезналичные.Остатки(
	|			&НаКонецРассчитанногоМесяца,
	|			Организация В (&МассивОрганизаций)
	|		) КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.БанковскийСчет.ВалютаДенежныхСредств <> &ВалютаРегл
	|			ИЛИ ДенежныеСредства.БанковскийСчет.ВалютаДенежныхСредств <> &ВалютаУпр
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		МИНИМУМ(ДенежныеСредства.Период) КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваВКассахККМ КАК ДенежныеСредства
	|	ГДЕ
	|		(ДенежныеСредства.КассаККМ.ВалютаДенежныхСредств <> &ВалютаРегл
	|			ИЛИ ДенежныеСредства.КассаККМ.ВалютаДенежныхСредств <> &ВалютаУпр)
	|		И ДенежныеСредства.Период > &ОбработанныйМесяц
	|		И ДенежныеСредства.Организация В (&МассивОрганизаций)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		&СледующийМесяц КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(
	|			&НаКонецРассчитанногоМесяца,
	|			Организация В (&МассивОрганизаций)
	|		) КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.КассаККМ.ВалютаДенежныхСредств <> &ВалютаРегл
	|			ИЛИ ДенежныеСредства.КассаККМ.ВалютаДенежныхСредств <> &ВалютаУпр
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		МИНИМУМ(ДенежныеСредства.Период) КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваВПути КАК ДенежныеСредства
	|	ГДЕ
	|		(ДенежныеСредства.Валюта <> &ВалютаРегл
	|			ИЛИ ДенежныеСредства.Валюта <> &ВалютаУпр)
	|		И ДенежныеСредства.Период > &ОбработанныйМесяц
	|		И ДенежныеСредства.Организация В (&МассивОрганизаций)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		&СледующийМесяц КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваВПути.Остатки(
	|			&НаКонецРассчитанногоМесяца,
	|			Организация В (&МассивОрганизаций)
	|		) КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.Валюта <> &ВалютаРегл
	|			ИЛИ ДенежныеСредства.Валюта <> &ВалютаУпр
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		МИНИМУМ(ДенежныеСредства.Период) КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваНаличные КАК ДенежныеСредства
	|	ГДЕ
	|		(ДенежныеСредства.Касса.ВалютаДенежныхСредств <> &ВалютаРегл
	|			ИЛИ ДенежныеСредства.Касса.ВалютаДенежныхСредств <> &ВалютаУпр)
	|		И ДенежныеСредства.Период > &ОбработанныйМесяц
	|		И ДенежныеСредства.Организация В (&МассивОрганизаций)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		&СледующийМесяц КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваНаличные.Остатки(
	|			&НаКонецРассчитанногоМесяца,
	|			Организация В (&МассивОрганизаций)
	|		) КАК ДенежныеСредства
	|	ГДЕ
	|		(ДенежныеСредства.Касса.ВалютаДенежныхСредств <> &ВалютаРегл
	|			ИЛИ ДенежныеСредства.Касса.ВалютаДенежныхСредств <> &ВалютаУпр)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		МИНИМУМ(ДенежныеСредства.Период) КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДенежныеСредства
	|	ГДЕ
	|		(ДенежныеСредства.Валюта <> &ВалютаРегл
	|			ИЛИ ДенежныеСредства.Валюта <> &ВалютаУпр)
	|		И ДенежныеСредства.Период > &ОбработанныйМесяц
	|		И ДенежныеСредства.Организация В (&МассивОрганизаций)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		&СледующийМесяц КАК Месяц
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.Остатки(
	|			&НаКонецРассчитанногоМесяца,
	|			Организация В (&МассивОрганизаций)
	|		) КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.Валюта <> &ВалютаРегл
	|			ИЛИ ДенежныеСредства.Валюта <> &ВалютаУпр
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		МИНИМУМ(ФинансовыеИнструменты.Период) КАК Месяц
	|	ИЗ
	|		РегистрНакопления.РасчетыПоФинансовымИнструментам КАК ФинансовыеИнструменты
	|	ГДЕ
	|		(ФинансовыеИнструменты.Валюта <> &ВалютаРегл
	|			ИЛИ ФинансовыеИнструменты.Валюта <> &ВалютаУпр)
	|		И ФинансовыеИнструменты.Период > &ОбработанныйМесяц
	|		И ФинансовыеИнструменты.АналитикаУчетаПоПартнерам.Организация В (&МассивОрганизаций)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		&СледующийМесяц КАК Месяц
	|	ИЗ
	|		РегистрНакопления.РасчетыПоФинансовымИнструментам.Остатки(
	|			&НаКонецРассчитанногоМесяца,
	|			АналитикаУчетаПоПартнерам.Организация В (&МассивОрганизаций)
	|		) КАК ФинансовыеИнструменты
	|	ГДЕ
	|		ФинансовыеИнструменты.Валюта <> &ВалютаРегл
	|			ИЛИ ФинансовыеИнструменты.Валюта <> &ВалютаУпр
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		МИНИМУМ(ЗаданияКПереоценке.Месяц) КАК Месяц
	|	ИЗ
	|		РегистрСведений.ЗаданияКЗакрытиюМесяца КАК ЗаданияКПереоценке
	|	ГДЕ
	|		ЗаданияКПереоценке.Месяц > &ОбработанныйМесяц
	|		И ЗаданияКПереоценке.Организация В (&МассивОрганизаций)
	|		И ЗаданияКПереоценке.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ПереоценкаДенежныхСредствИФинансовыхИнструментов)
	|
	|	) КАК ДенежныеСредства
	|ИМЕЮЩИЕ 
	|	НЕ (МИНИМУМ(ДенежныеСредства.Месяц) ЕСТЬ NULL)";
	
	Запрос.УстановитьПараметр("ВалютаРегл", 	   			Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаУпр", 		   			Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ОбработанныйМесяц", 			КонецМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("СледующийМесяц", 			КонецМесяца(ПериодРасчета) + 1);
	Запрос.УстановитьПараметр("НаКонецРассчитанногоМесяца", Новый Граница(КонецМесяца(ПериодРасчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("МассивОрганизаций", 			МассивОрганизаций);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), НачалоМесяца(Выборка.МесяцКРасчету), Дата(1, 1, 1));
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Группа_ФормированиеЗатрат


#Область АннулированиеПодарочныхСертификатов

// Обработчики этапа.

Процедура Использование_АннулированиеПодарочныхСертификатов(ПараметрыОбработчика) Экспорт
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты") Тогда
		УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru='Подарочные сертификаты не используются.'"));
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст = Документы.АннулированиеПодарочныхСертификатов.ТекстЗапросаСертификатыКАннулированию() + Символы.ПС + ";" + Символы.ПС + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Аннулирование.Организация КАК Организация
	|ПОМЕСТИТЬ АннулированныеСертификаты
	|ИЗ
	|	Документ.АннулированиеПодарочныхСертификатов КАК Аннулирование
	|ГДЕ
	|	Аннулирование.Организация В(&МассивОрганизаций)
	|	И Аннулирование.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Аннулирование.Проведен";
	
	Запрос.Выполнить();
	
	РазмерыВременныхТаблиц = РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.СертификатыКАннулированию > 0 Тогда
			
		ЗафиксироватьРезультатыОбработчикаИспользованияПоОрганизациям(
			ПараметрыОбработчика,
			НСтр("ru='По организации ""%1"" за период %2 есть сертификаты, которые необходимо аннулировать.'"),
			Запрос,
			"СертификатыКАннулированию",
			Ложь,
			Истина);
		
	ИначеЕсли РазмерыВременныхТаблиц.АннулированныеСертификаты = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Нет сертификатов, которые необходимо аннулировать.'"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Выполнить_АннулированиеПодарочныхСертификатов(ПараметрыОбработчика) Экспорт
	
	Документы.АннулированиеПодарочныхСертификатов.АннулироватьПодарочныеСертификатыПриЗакрытииМесяца(
		ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций,
		ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
	
КонецПроцедуры

#КонецОбласти




#КонецОбласти


#КонецОбласти

#Область Группа_ФормированиеФинансовогоРезультата

#Область ОформлениеДокументовРаспределенияРасходовПоНаправлениямДеятельности

Процедура Использование_ОформлениеДокументовРаспределенияРасходовПоНаправлениямДеятельности(ПараметрыОбработчика) Экспорт
	
	ПараметрыЗакрытия = РасчетСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров();
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	ПараметрыЗапроса = Документы.РаспределениеПрочихЗатрат.ОписаниеПараметровЗапросаПолученияДанныхДляРаспределения();
	ПараметрыЗапроса.Состояние = Перечисления.СостоянияРаспределенияРасходов.ТребуетсяСформироватьДокумент;
	ПараметрыЗапроса.ВариантРаспределения =
		ОбщегоНазначенияУТКлиентСервер.Массив(Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности);
	Документы.РаспределениеПрочихЗатрат.ИнициализироватьЗапросПолученияДанныхДляРаспределения(Запрос, ПараметрыЗапроса);
	
	Запрос.Текст = Документы.РаспределениеПрочихЗатрат.ТекстЗапросаДанныеДляРаспределения(, Истина);
	Запрос.Выполнить();	
	
	РазмерыВременныхТаблиц = РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.ВТДанныеДляРаспределения = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Нет данных для распределения расходов.'"));
		
		Возврат;
		
	КонецЕсли;
	
	Если РазмерыВременныхТаблиц.СостояниеРаспределенияРасходов = 0 Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='По всем расходам заданы настройки распределения.'"));
	Иначе
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			НСтр("ru='Требуется оформление документов распределения расходов.'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура Выполнить_ОформлениеДокументовРаспределенияРасходовПоНаправлениямДеятельности(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	СтатьиКРаспределению = Документы.РаспределениеПрочихЗатрат.СтатьиКРаспределению(
		ПараметрыРасчета.ПериодРегистрации,
		ПараметрыРасчета.МассивОрганизаций,
		Новый Массив,
		Перечисления.СостоянияРаспределенияРасходов.ТребуетсяСформироватьДокумент,
		Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности);
		
	Если СтатьиКРаспределению.Количество() = 0 Тогда // нет данных для распределения
		Возврат;
	КонецЕсли;
	
	СтатьиКРаспределению.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	СтатьиКРаспределению.Колонки.Добавить("ИДСтроки", Новый ОписаниеТипов("Число"));
	СтатьиКРаспределению.ЗаполнитьЗначения(КонецМесяца(ПараметрыРасчета.ПериодРегистрации), "Дата");
	
	ПараметрыРаспределения = Новый Структура("ПараметрыРасходов", СтатьиКРаспределению);
	
	Попытка
		РезультатыФормирования = Документы.РаспределениеПрочихЗатрат.СформироватьДокументы(ПараметрыРаспределения, Неопределено);
	Исключение
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось создать документы распределения расходов за период %1 из-за ошибки:
				|%2'"),
			РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
			ПараметрыОбработчика,
			ТекстОшибки);
		
	КонецПопытки;
	
	Для Каждого РезультатПоОрганизации Из РезультатыФормирования Цикл
		
		ДетализацияФормирования = РезультатПоОрганизации.Значение;
		
		Если Не ДетализацияФормирования.ТекстыОшибок.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекстОшибки Из ДетализацияФормирования.ТекстыОшибок Цикл
			ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ТекстОшибки,
				РезультатПоОрганизации.Ключ);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверки состояния системы, относящиеся к этапу.

Процедура ОписаниеПроверок_ОформлениеДокументовРаспределенияРасходовПоНаправлениямДеятельности(ТаблицаПроверок)
	
	// Настройка распределения расходов.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НеВыполненаОформлениеДокументовРаспределенияРасходовПоНаправлениямДеятельности",
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеДокументовРаспределенияРасходовПоНаправлениямДеятельности,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ПослеРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаНеобходимостиОформлениеДокументовРаспределенияРасходовПоНаправлениямДеятельности");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Есть неоформленные документы распределения расходов'"),
		НСтр("ru='Все производственные расходы должны быть распределены по направлениям деятельности.'"));
	
КонецПроцедуры

Процедура ПроверкаНеобходимостиОформлениеДокументовРаспределенияРасходовПоНаправлениямДеятельности(ПараметрыПроверки) Экспорт
	
	Если НЕ ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Подразделение", 			НСтр("ru='Подразделение'"));
	СписокПолей.Добавить("НаправлениеДеятельности", НСтр("ru='Направление деятельности'"));
	СписокПолей.Добавить("СтатьяРасходов", 			НСтр("ru='Статья расходов'"));
	СписокПолей.Добавить("АналитикаРасходов", 		НСтр("ru='Аналитика расходов'"));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"СостояниеРаспределенияРасходов",
		НСтр("ru='Есть неоформленные документы распределения расходов по организации ""%1"" на конец периода %2'"),
		СписокПолей);
	
	ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации);
		
КонецПроцедуры

#КонецОбласти

#Область РаспределениеРасходовПоНаправлениямДеятельности

Процедура Использование_РаспределениеРасходовПоНаправлениямДеятельности(ПараметрыОбработчика) Экспорт

	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	ПараметрыЗапроса = Документы.РаспределениеПрочихЗатрат.ОписаниеПараметровЗапросаПолученияДанныхДляРаспределения();
	ПараметрыЗапроса.ВариантРаспределения =
		ОбщегоНазначенияУТКлиентСервер.Массив(Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности);
	Документы.РаспределениеПрочихЗатрат.ИнициализироватьЗапросПолученияДанныхДляРаспределения(Запрос, ПараметрыЗапроса);
	
	Запрос.Текст = Документы.РаспределениеПрочихЗатрат.ТекстЗапросаДанныеДляРаспределения();
	Результат = Запрос.Выполнить();	
	
	РазмерыВременныхТаблиц = РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	ЕстьЗаданиеКРасчету = ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Ложь);
	Если РазмерыВременныхТаблиц.ВТДанныеДляРаспределения = 0 И Не ЕстьЗаданиеКРасчету Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Нет данных для распределения расходов.'"));
		
		Возврат;
		
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	*
		|ПОМЕСТИТЬ ВТОстаткиПрочихРасходов
		|ИЗ
		|	ВТДанныеДляРаспределения КАК Т
		|ГДЕ
		|	НЕ Т.РаспределеноВУУ
		|		И Т.ДокументУпр.НазначениеНастройкиРаспределения = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаФинансовыйРезультат)
		|	ИЛИ НЕ Т.РаспределеноВБУ
		|		И Т.ДокументРегл.НазначениеНастройкиРаспределения = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаФинансовыйРезультат)
		|	ИЛИ НЕ Т.РаспределеноВНУ
		|;
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	*
		|ИЗ
		|	ВТОстаткиПрочихРасходов";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Требуется пересчет за период %1.'"),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации)));
			
	КонецЕсли;
			
КонецПроцедуры

Процедура Выполнить_РаспределениеРасходовПоНаправлениямДеятельности(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	НачалоПериода = НачалоМесяца(ПараметрыРасчета.ПериодРегистрации);
	КонецПериода  = КонецМесяца(ПараметрыРасчета.ПериодРегистрации);
	
	НомерЗаданияДоРасчета = УвеличитьНомерЗадания();
	
	Попытка
		РассчитанныеОрганизации = Документы.РаспределениеПрочихЗатрат.РаспределитьРасходыНаФинансовыйРезультат(
			ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации, 
			ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
	Исключение
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Распределение расходов по направлениям деятельности за период %1 завершилось с ошибкой:
					|%2'"),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
			ПараметрыОбработчика,
			ТекстОшибки);
				
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", 		НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", 		КонецПериода);
	Запрос.УстановитьПараметр("ГраницаПериода", 	Новый Граница(КонецПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организации", 		РассчитанныеОрганизации);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.Организация КАК Организация,
		|	Т.Подразделение КАК Подразделение,
		|	Т.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	Т.СтатьяРасходов КАК СтатьяРасходов,
		|	Т.АналитикаРасходов КАК АналитикаРасходов
		|ПОМЕСТИТЬ СписаниеНУ
		|ИЗ
		|	РегистрНакопления.ПрочиеРасходы КАК Т
		|ГДЕ
		|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Т.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РаспределениеНормируемыхРасходовПоНУ)
		|	И Т.Организация В(&Организации)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Организация КАК Организация,
		|	МАКСИМУМ(Т.БылоСписаниеНУ) КАК БылоСписаниеНУ
		|ИЗ
		|	(ВЫБРАТЬ
		|		СписаниеНУ.Организация КАК Организация,
		|		ИСТИНА КАК БылоСписаниеНУ
		|	ИЗ
		|		СписаниеНУ КАК СписаниеНУ
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПрочиеРасходы.Остатки(
		|					&ГраницаПериода,
		|					(Организация, Подразделение, НаправлениеДеятельности, СтатьяРасходов, АналитикаРасходов) В
		|						(ВЫБРАТЬ
		|							Аналитики.Организация,
		|							Аналитики.Подразделение,
		|							Аналитики.НаправлениеДеятельности,
		|							Аналитики.СтатьяРасходов,
		|							Аналитики.АналитикаРасходов
		|						ИЗ
		|							СписаниеНУ КАК Аналитики)) КАК Остатки
		|			ПО СписаниеНУ.Организация = Остатки.Организация
		|				И СписаниеНУ.Подразделение = Остатки.Подразделение
		|				И СписаниеНУ.НаправлениеДеятельности = Остатки.НаправлениеДеятельности
		|				И СписаниеНУ.СтатьяРасходов = Остатки.СтатьяРасходов
		|				И СписаниеНУ.АналитикаРасходов = Остатки.АналитикаРасходов
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Т.Организация,
		|		ЛОЖЬ
		|	ИЗ
		|		РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Т
		|			ЛЕВОЕ СОЕДИНЕНИЕ СписаниеНУ КАК СписаниеНУ
		|			ПО Т.Организация = СписаниеНУ.Организация
		|	ГДЕ
		|		Т.Месяц = &НачалоПериода
		|		И Т.Организация В(&Организации)
		|		И Т.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.РаспределениеРасходовПоНаправлениямДеятельности)
		|		И СписаниеНУ.Организация ЕСТЬ NULL) КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.Организация";
	
	ДанныеПоСписаниюНУ = Запрос.Выполнить().Выгрузить();
	Если ДанныеПоСписаниюНУ.Количество() > 0 Тогда
		
		НачатьТранзакцию();
		
		Попытка
			
			ЗаблокироватьРегистрЗаданий(
				НомерЗаданияДоРасчета,
				ДанныеПоСписаниюНУ.ВыгрузитьКолонку("Организация"),
				ПараметрыОбработчика.ДанныеЭтапа.Код);
				
			Для Каждого Данные Из ДанныеПоСписаниюНУ Цикл
					
				// Очистка текущих заданий.
				НаборЗаписей = РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Месяц.Установить(НачалоПериода);
				НаборЗаписей.Отбор.Организация.Установить(Данные.Организация);
				НаборЗаписей.Отбор.Операция.Установить(ПараметрыОбработчика.ДанныеЭтапа.Код);
				НаборЗаписей.Записать();
				
				Если Данные.БылоСписаниеНУ Тогда
					РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьЗаписьРегистра(
						КонецПериода + 1, 
						,
						Данные.Организация, 
						ПараметрыОбработчика.ДанныеЭтапа.Код);
				КонецЕсли;
						
			КонецЦикла;

			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='При выполнении расчета за период %1 произошла ошибка:
					|%2'"),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ТекстОшибки,
				ДанныеПоСписаниюНУ.ВыгрузитьКолонку("Организация"),
				ПараметрыРасчета.ПериодРегистрации);
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверки состояния системы, относящиеся к этапу.

Процедура ОписаниеПроверок_РаспределениеРасходовПоНаправлениямДеятельности(ТаблицаПроверок)
	
	// Настройка распределения расходов.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"ПроверкаОстатковПрочихРасходов",
		Перечисления.ОперацииЗакрытияМесяца.РаспределениеРасходовПоНаправлениямДеятельности,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ПослеРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаОстатковПрочихРасходов");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Не распределены прочие расходы на финансовый результат'"),
		НСтр("ru='Все прочие расходы должны быть распределены на финансовый результат.'"));
	
КонецПроцедуры

Процедура ПроверкаОстатковПрочихРасходов(ПараметрыПроверки) Экспорт
	
	Если НЕ ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Подразделение", 			НСтр("ru='Подразделение'"));
	СписокПолей.Добавить("НаправлениеДеятельности", НСтр("ru='Направление деятельности'"));
	СписокПолей.Добавить("СтатьяРасходов", 			НСтр("ru='Статья расходов'"));
	СписокПолей.Добавить("АналитикаРасходов", 		НСтр("ru='Аналитика расходов'"));
	
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТОстаткиПрочихРасходов",
		НСтр("ru='По организации ""%1"" на конец периода %2 есть остатки по регистру прочих расходов.'"),
		СписокПолей,
		,
		Метаданные.РегистрыНакопления.ПрочиеРасходы.ПолноеИмя());
	
	ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации);
		
КонецПроцедуры

#КонецОбласти

#Область РаспределениеДоходовПоНаправлениямДеятельности

// Обработчики этапа.

Процедура Использование_РаспределениеДоходовПоНаправлениямДеятельности(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Доходы.Организация
	|ИЗ
	|	РегистрНакопления.ПрочиеДоходы.Обороты(&НачалоПериода, &ГраницаКонецПериода, , Организация В (&МассивОрганизаций)) КАК Доходы
	|ГДЕ
	|	Доходы.СуммаПриход <> 0
	|	ИЛИ Доходы.СуммаУпрПриход <> 0
	|	ИЛИ Доходы.СуммаРеглПриход <> 0
	|	ИЛИ Доходы.СуммаРасход <> 0
	|	ИЛИ Доходы.СуммаУпрРасход <> 0
	|	ИЛИ Доходы.СуммаРеглРасход <> 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, РезультатЗапроса.Выгрузить().Количество());
	
	ЕстьЗаданиеКРасчету = ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Ложь);
	Если РезультатЗапроса.Пустой() И Не ЕстьЗаданиеКРасчету Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Нет оборотов по регистрам прочих доходов за период %1'"),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации)));
		Возврат;
		
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Доходы.Организация КАК Организация,
		|	Доходы.Подразделение КАК Подразделение,
		|	Доходы.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	Доходы.СтатьяДоходов КАК СтатьяДоходов,
		|	Доходы.АналитикаДоходов КАК АналитикаДоходов
		|ПОМЕСТИТЬ ВТОстаткиПрочихДоходов
		|ИЗ
		|	РегистрНакопления.ПрочиеДоходы.Остатки(
		|		&ГраницаКонецПериода,
		|		Организация В (&МассивОрганизаций)
		|	) КАК Доходы
		|;
		|	
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Доходы.Организация
		|ИЗ
		|	ВТОстаткиПрочихДоходов КАК Доходы";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, Выборка.Количество());
	
	Если Выборка.Количество() > 0 Тогда
		
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Требуется пересчет за период %1.'"),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации)));
		
	КонецЕсли;
				
КонецПроцедуры

Процедура Выполнить_РаспределениеДоходовПоНаправлениямДеятельности(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	НачалоПериода = НачалоМесяца(ПараметрыРасчета.ПериодРегистрации);
	КонецПериода  = КонецМесяца(ПараметрыРасчета.ПериодРегистрации);
	
	НомерЗаданияДоРасчета = УвеличитьНомерЗадания();
	
	НачатьТранзакцию();
	
	Попытка
		
		ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета, ПараметрыРасчета.МассивОрганизаций, ПараметрыОбработчика.ДанныеЭтапа.Код);
		
		ДанныеКРаспределению = ЗаданияКРасчетуЗаМесяц(
			НачалоПериода,
			КонецПериода,
			НомерЗаданияДоРасчета,
			ПараметрыРасчета.МассивОрганизаций,
			ПараметрыОбработчика.ДанныеЭтапа.Код);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='При выполнении расчета за период %1 произошла ошибка:
				|%2'"),
			РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
			ПараметрыОбработчика,
			ТекстОшибки,
			ПараметрыРасчета.МассивОрганизаций,
			ПараметрыРасчета.ПериодРегистрации);
		
	КонецПопытки;
	
	РассчитанныеОрганизации = Новый Массив;
	Для Каждого ТекущаяОрганизация Из ПараметрыРасчета.МассивОрганизаций Цикл
		
		Попытка
			
			Документы.РаспределениеДоходовПоНаправлениямДеятельности.СоздатьДокументыЗаПериод(
				НачалоПериода, 
				ТекущаяОрганизация);
				
			Если Не ДанныеКРаспределению.Организация.Найти(ТекущаяОрганизация) = Неопределено
				И РассчитанныеОрганизации.Найти(ТекущаяОрганизация) = Неопределено Тогда
				РассчитанныеОрганизации.Добавить(ТекущаяОрганизация);
			КонецЕсли;
			
		Исключение
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Распределение доходов по направлениям деятельности за период %1 завершилось с ошибкой:
					|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(НачалоПериода),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ТекстОшибки,
				ТекущаяОрганизация);
			
		КонецПопытки;
			
	КонецЦикла;
	
	Если РассчитанныеОрганизации.Количество() > 0 Тогда
		
		НачатьТранзакцию();
		
		Попытка
			
			ЗаблокироватьРегистрЗаданий(
				НомерЗаданияДоРасчета,
				РассчитанныеОрганизации,
				ПараметрыОбработчика.ДанныеЭтапа.Код);
			
			ЗафиксироватьРасчет(
				Неопределено,
				НомерЗаданияДоРасчета,
				ПараметрыОбработчика.ДанныеЭтапа.Код,
				ДанныеКРаспределению);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='При выполнении расчета за период %1 произошла ошибка:
					|%2'"),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ТекстОшибки,
				РассчитанныеОрганизации,
				ПараметрыРасчета.ПериодРегистрации);
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверки состояния системы, относящиеся к этапу.

Процедура ОписаниеПроверок_РаспределениеДоходовПоНаправлениямДеятельности(ТаблицаПроверок)
	
	// Настройка распределения расходов.
	ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"ПроверкаОстатковПрочихДоходов",
		Перечисления.ОперацииЗакрытияМесяца.РаспределениеДоходовПоНаправлениямДеятельности,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ПослеРасчета,
		"ЗакрытиеМесяцаСервер.ПроверкаОстатковПрочихДоходов");
	
	ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Не распределены прочие доходы на финансовый результат'"),
		НСтр("ru='Все прочие доходы должны быть распределены на финансовый результат.'"));
	
КонецПроцедуры

Процедура ПроверкаОстатковПрочихДоходов(ПараметрыПроверки) Экспорт
	
	Если НЕ ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Подразделение", 			НСтр("ru='Подразделение'"));
	СписокПолей.Добавить("НаправлениеДеятельности", НСтр("ru='Направление деятельности'"));
	СписокПолей.Добавить("СтатьяДоходов", 			НСтр("ru='Статья доходов'"));
	СписокПолей.Добавить("АналитикаДоходов", 		НСтр("ru='Аналитика доходов'"));
		
	ПараметрыРегистрации = ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТОстаткиПрочихДоходов",
		НСтр("ru='По организации ""%1"" на конец периода %2 есть остатки по регистру прочих доходов.'"),
		СписокПолей,
		,
		Метаданные.РегистрыНакопления.ПрочиеДоходы.ПолноеИмя());
		
	ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации);
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Группа_РегламентированныйУчет


#КонецОбласти



#Область МетодыДляОписанияПроверокСостоянияСистемы

// Добавляет новую проверку состояния системы в таблицу проверок и заполняет ее ключевые поля.
//
// Параметры:
//	ТаблицаПроверок 			 - Таблица значений - см. АудитСостоянияСистемыПереопределяемый.ЗаполнитьПроверкиДляРегистрации()
//	Идентификатор 				 - Строка - уникальный строковый идентификатор (код) проверки
//	КонтекстВыполнения 			 - ПеречислениеСсылка.ОперацииЗакрытияМесяца - этап закрытия месяца (владелец), к которому относится проверка
//	УточнениеКонтекстаВыполнения - ПеречисленияСсылка.МоментЗапускаПроверкиОперацииЗакрытияМесяца - когда надо выполнять проверку
//	Обработчик 					 - Строка - полное имя экспортной процедуры-обработчика, вызываемого для выполнения проверки
//	Важность 					 - ПеречисленияСсылка.ВариантыВажностиПроблемыСостоянияСистемы - статус по умолчанию для результатов выполнения проверки.
// 
// Возвращаемое значение:
//	СтрокаТаблицыЗначений - добавленная строка таблицы проверок.
//
Функция ДобавитьОписаниеНовойПроверки(ТаблицаПроверок, Идентификатор, КонтекстВыполнения,
			УточнениеКонтекстаВыполнения, Обработчик, Важность = Неопределено) Экспорт
	
	ОписаниеПроверки = ТаблицаПроверок.Добавить();
	
	ОписаниеПроверки.Идентификатор 				  = Идентификатор;
	ОписаниеПроверки.ИдентификаторРодителя 		 = "ГруппаПроверокЭтапаЗакрытияМесяца";
	ОписаниеПроверки.КонтекстВыполнения 		  = КонтекстВыполнения;
	ОписаниеПроверки.УточнениеКонтекстаВыполнения = УточнениеКонтекстаВыполнения;
	ОписаниеПроверки.Обработчик 				  = Обработчик;
	ОписаниеПроверки.Важность 					  =
		?(ЗначениеЗаполнено(Важность), Важность, Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка);
		
	ОписаниеПроверки.ВыполняетсяТолькоВКонтексте = Ложь;
	ОписаниеПроверки.ВозможноИзменениеВажности   = Истина;
	
	ОписаниеПроверки.ДетализацияДоОрганизации    = Истина;
	ОписаниеПроверки.ДетализацияДоПериода        = Истина;
	ОписаниеПроверки.Используется			     = Ложь;
	
	Возврат ОписаниеПроверки;
	
КонецФункции

// Заполняет текстовые поля описания проверки состояния системы.
//
// Параметры:
//	ОписаниеПроверки - СтрокаТаблицыЗначений - строка таблицы проверок, добавленная в ДобавитьОписаниеНовойПроверки()
//	Наименование 	 - Строка - пользовательское представление проверки
//	Комментарий 	 - Строка - подробное описание проверки.
//
Процедура ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки, Наименование, Комментарий = "") Экспорт
	
	ОписаниеПроверки.Наименование = Наименование;
	ОписаниеПроверки.Комментарий  = Комментарий;
	
КонецПроцедуры

// Возвращает имя формы для вывода результатов выполнения указанной проверки.
// По умолчанию результаты всех проверок отображаются с использованием формы Обработки.ОперацииЗакрытияМесяца.Формы.РезультатыПроверки
// Если при выводе результатов надо предусмотреть нестандартное поведение, то в этой функции надо указать имя своей,
// особой формы.
//
// Параметры:
//	Проверка - СправочникСсылка.ПроверкиСостоянияСистемы - проверка состояния системы.
//
// Возвращаемое значение:
//	Строка, Неопределено - переопределенное имя формы для проверки; если форма не переопределяется, то возвращается Неопределено.
//
Функция ИмяФормыРасшифровкиРезультатовПроверки(Проверка) Экспорт
	
	ИмяФормы = Неопределено;
	
	// Для проверки можно переопределить открываемую по умолчанию форму.
	
	Возврат ИмяФормы;
	
КонецФункции

#КонецОбласти

#Область МетодыДляОписанияЭтапов

// Добавляет строку в таблицу этапов.
//
// Параметр:
//	ТаблицаЭтапов - Таблица значений - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуОписанияЭтапов()
//	Родитель - Строка - идентификатор группы, в которую входит данный этап, см. функции вида ИдентификаторГруппы...()
//	Код - ПеречислениеСсылка.ОперацииЗакрытияМесяца - добавляемый этап закрытия месяца
//	ОперативныйУчет - Булево - признак принадлежности этапа к оперативному учету
//	РегламентированныйУчет - Булево - признак принадлежности этапа к регламентированному учету
//	МеждународныйУчет - Булево - признак принадлежности этапа к международному учету.
//
// Возвращаемое значение:
//	СтрокаТаблицыЗначений - добавленная строка таблицы этапов.
//
Функция ДобавитьЭтапВТаблицу(ТаблицаЭтапов, Родитель, Код, ОперативныйУчет = Истина,
			РегламентированныйУчет = Ложь, МеждународныйУчет = Ложь, ПредшествующийЭтапУпорядочивание = Неопределено) Экспорт
	
	НоваяСтрока = ТаблицаЭтапов.Добавить();
	
	НоваяСтрока.Родитель 		  		= Родитель;
	НоваяСтрока.Код 			  		= Код;
	НоваяСтрока.ОперативныйУчет 		= ОперативныйУчет;
	НоваяСтрока.РегламентированныйУчет  = РегламентированныйУчет;
	НоваяСтрока.МеждународныйУчет 		= МеждународныйУчет;
	
	Возврат НоваяСтрока;
	
КонецФункции

#Область ОписанияВозможныхДействийЭтапов

// Описание шаблонов обработчиков событий этапа закрытия месяца.
// Используются для свойств "Действие..." этапа закрытия месяца.

// Описание действия "Выполнить указанную произвольную процедуру".
//
// Параметры:
//	Обработчик - Строка - полный путь к экспортной процедуре обработчика действия.
//
// Возвращаемое значение:
//	Структура - см. СтруктураОписанияДействия().
//
Функция ОписаниеДействия_СервернаяПроцедура(Обработчик) Экспорт
	
	Описание = СтруктураОписанияДействия();
	
	Описание.ВидДействия = Перечисления.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ВыполнитьСервернуюПроцедуру;
	Описание.Обработчик  = Обработчик;
	Описание.НаСервере   = Истина;
	
	Возврат Описание;
	
КонецФункции

// Описание действия "Открыть справку объекта".
//
// Параметры:
//	ОбъектМетаданных - Строка - полное имя объекта метаданных, справку которого надо открыть
//
// Возвращаемое значение:
//	Структура - см. СтруктураОписанияДействия().
//
Функция ОписаниеДействия_ОткрытьСправкуОбъекта(ОбъектМетаданных) Экспорт
	
	Описание = СтруктураОписанияДействия();
	
	Описание.ВидДействия 		  = Перечисления.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ОткрытьСправкуОбъекта;
	Описание.ИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();
	Описание.НаКлиенте   		  = Истина;
	
	Возврат Описание;
	
КонецФункции

// Описание действия "Выполнить расчет этапа".
//
// Параметры:
//	Обработчик - Строка - полный путь к экспортной процедуре обработчика действия.
//
// Возвращаемое значение:
//	Структура - см. СтруктураОписанияДействия().
//
Функция ОписаниеДействия_ВыполнитьРасчет(Обработчик) Экспорт
	
	Описание = СтруктураОписанияДействия();
	
	Описание.ВидДействия = Перечисления.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ВыполнитьРасчет;
	Описание.Обработчик  = Обработчик;
	Описание.НаСервере   = Истина;
	
	Возврат Описание;
	
КонецФункции

// Описание действия "Открыть результаты проверки указанного этапа".
//
// Параметры:
//	Проверка 		   - СправочникСсылка.ПроверкиСостоянияСистемы - проверка состояния системы; если не указана, то отображаются результаты всех проверок
//	Проблема 		   - УникальныйИдентификатор - проблема, найденная проверкой; если не указана, то отображаются все проблемы
//	КонтекстВыполнения - ПеречислениеСсылка.ОперацииЗакрытияМесяца - этап закрытия месяца (владелец), к которому относится проверки.
//
// Возвращаемое значение:
//	Структура - см. СтруктураОписанияДействия().
//
Функция ОписаниеДействия_ОткрытьРезультатыПроверки(Проверка = Неопределено, Проблема = Неопределено, КонтекстВыполнения = Неопределено) Экспорт
	Перем ИмяФормы;
	
	Описание = СтруктураОписанияДействия();
	
	Если ЗначениеЗаполнено(Проверка) Тогда
		ИмяФормы = ИмяФормыРасшифровкиРезультатовПроверки(Проверка);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИмяФормы) Тогда
		ИмяФормы = Метаданные.Обработки.ОперацииЗакрытияМесяца.Формы.РезультатыПроверки.ПолноеИмя();
	КонецЕсли;
	
	Описание.ВидДействия = Перечисления.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ОткрытьРезультатыПроверки;
	Описание.ИмяФормы    = ИмяФормы;
	Описание.НаКлиенте   = Истина;
	
	Описание.ПараметрыФормы.Вставить("Проверка", 		   Проверка);
	Описание.ПараметрыФормы.Вставить("Проблема", 		   ОбщегоНазначенияУТКлиентСервер.Массив(Проблема));
	Описание.ПараметрыФормы.Вставить("КонтекстВыполнения", КонтекстВыполнения);
	
	Возврат Описание;
	
КонецФункции

// Описание действия "Открыть произвольную форму".
//
// Параметры:
//	ИмяФормы 				 - Строка - имя открываемой формы 
//	ПараметрыВСтруктуреОтбор - Булево - признак того, что параметры открываемой формы надо передать внутри параметра Отбор с типом Структура.
//
// Возвращаемое значение:
//	Структура - см. СтруктураОписанияДействия().
//
Функция ОписаниеДействия_ОткрытьФорму(ИмяФормы, ПараметрыВСтруктуреОтбор = Ложь) Экспорт
	
	Описание = СтруктураОписанияДействия();
	
	Описание.ВидДействия = Перечисления.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ОткрытьФорму;
	Описание.ИмяФормы    = ИмяФормы;
	Описание.НаКлиенте   = Истина;
	
	ПоляПараметровФормы = "Организация, МассивОрганизаций, ПериодРегистрации, Период, НачалоПериода, КонецПериода, ДатаОкончанияПериода";
	Если ПараметрыВСтруктуреОтбор Тогда
		Описание.ПараметрыФормы.Вставить("Отбор", Новый Структура(ПоляПараметровФормы));
	Иначе
		Описание.Вставить("ПараметрыФормы", Новый Структура(ПоляПараметровФормы));
	КонецЕсли;
	
	Описание.ПараметрыФормы.Вставить(ИмяСлужебногоСвойстваОткрываемыхФорм(), Истина);
	
	Возврат Описание;
	
КонецФункции

// Описание действия "Показать ошибки указанного этапа в журнале регистрации".
//
// Параметры:
//	РассчитываемыйЭтап - ПеречислениеСсылка.ОперацииЗакрытияМесяца - этап закрытия месяца.
//
// Возвращаемое значение:
//	Структура - см. СтруктураОписанияДействия().
//
Функция ОписаниеДействия_ОткрытьЖурналРегистрации(РассчитываемыйЭтап) Экспорт
	
	Описание = СтруктураОписанияДействия();
	
	Описание.ВидДействия = Перечисления.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ОткрытьЖурналРегистрации;
	Описание.ИмяФормы    = Метаданные.Обработки.ЖурналРегистрации.Формы.ЖурналРегистрации.ПолноеИмя();
	Описание.НаКлиенте   = Истина;
	
	ОтборПоУровню = Новый СписокЗначений;
	ОтборПоУровню.Добавить("Ошибка", "Ошибка");
	
	СобытияЖурнала = Новый Массив;
	СобытияЖурнала.Добавить(ИмяСобытияЖурналаРегистрации(ОбщегоНазначения.ИмяЗначенияПеречисления(РассчитываемыйЭтап)));
	
	Описание.ПараметрыФормы.Вставить("ДатаНачала");
	Описание.ПараметрыФормы.Вставить("ДатаОкончания");
	Описание.ПараметрыФормы.Вставить("Уровень", ОтборПоУровню);
	Описание.ПараметрыФормы.Вставить("СобытиеЖурналаРегистрации", СобытияЖурнала);
	
	Возврат Описание;
	
КонецФункции


#КонецОбласти

#КонецОбласти


#Область МетодыДляПроверкиСостоянияЭтаповИВыполненияЭтапов

#Область РаботаСЗапросами

// Устанавливает общие параметры и менеджер временных таблиц для запросов, используемых в механизме закрытия месяца.
//
// Параметры:
//	Запрос 									- Запрос - используемый запрос
//	ПараметрыОбработчикаИлиПараметрыРасчета - Структура - параметры обработчика события этапа или параметры расчета этапа.
//
// Возвращаемое значение:
//	Булево - признак того, что в параметре обработчика был передан менеджер временных таблиц;
//		если менеджер не был передан, то он буден добавлен в параметры обработчика для его использования в следующих обработчиках.
//
Функция ИнициализироватьЗапрос(Запрос, ПараметрыОбработчикаИлиПараметрыРасчета) Экспорт
	
	ЭтоПараметрыОбработчика = ПараметрыОбработчикаИлиПараметрыРасчета.Свойство("ПараметрыРасчета");
	
	Если ЭтоПараметрыОбработчика Тогда
		ПараметрыРасчета = ПараметрыОбработчикаИлиПараметрыРасчета.ПараметрыРасчета;
	Иначе
		ПараметрыРасчета = ПараметрыОбработчикаИлиПараметрыРасчета;
	КонецЕсли;
	
	НачалоПериода = НачалоМесяца(ПараметрыРасчета.ПериодРегистрации);
	КонецПериода  = КонецМесяца(ПараметрыРасчета.ПериодРегистрации);
	
	// Общие параметры запроса.
	Запрос.УстановитьПараметр("НачалоПериода",				  	НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",				  	КонецПериода);
	Запрос.УстановитьПараметр("НачалоПредыдущегоПериода",	  	НачалоМесяца(НачалоПериода - 1));
	Запрос.УстановитьПараметр("КонецПредыдущегоПериода",	  	НачалоПериода - 1);
	Запрос.УстановитьПараметр("НачалоСледующегоПериода",	  	КонецПериода + 1);
	
	Запрос.УстановитьПараметр("ГраницаНачалоПериода",		  	Новый Граница(НачалоПериода, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ГраницаКонецПериода",		  	Новый Граница(КонецПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ГраницаКонецПредыдущегоПериода",	Новый Граница(НачалоПериода - 1, ВидГраницы.Включая));
	
	Запрос.УстановитьПараметр("МассивОрганизаций",			  	ПараметрыРасчета.МассивОрганизаций);
	
	// Параметры-значения функциональных опций.
	Запрос.УстановитьПараметр("ПартионныйУчетНеИспользуется",
		РасчетСебестоимостиПовтИсп.ПартионныйУчетНеИспользуется(НачалоПериода));
	Запрос.УстановитьПараметр("ПартионныйУчетВерсии21",
		РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии21(НачалоПериода));
	Запрос.УстановитьПараметр("ПартионныйУчетВерсии22",
		РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22(НачалоПериода));
	Запрос.УстановитьПараметр("ДатаПереходаНаПартионныйУчетВерсии22",
		РасчетСебестоимостиПовтИсп.ДатаПереходаНаПартионныйУчетВерсии22());
	
	
	// Менеджер временных таблиц.
	ДанныеИнициализированы = ЭтоПараметрыОбработчика И ПараметрыОбработчикаИлиПараметрыРасчета.Свойство("МенеджерВременныхТаблиц");
	
	Если ДанныеИнициализированы Тогда
		
		Запрос.МенеджерВременныхТаблиц = ПараметрыОбработчикаИлиПараметрыРасчета.МенеджерВременныхТаблиц;
		
	ИначеЕсли ЭтоПараметрыОбработчика Тогда
		
		ПараметрыОбработчикаИлиПараметрыРасчета.Вставить("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц);
		
		Запрос.МенеджерВременныхТаблиц = ПараметрыОбработчикаИлиПараметрыРасчета.МенеджерВременныхТаблиц;
		
	Иначе
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
	КонецЕсли;
	
	Возврат ДанныеИнициализированы;
	
КонецФункции

#КонецОбласти

#Область УниверсальныеПроверки

// Проверяет наличие заданий в регистре сведений вида "ЗаданияК...".
//
// Параметры:
//	ПараметрыОбработчика 		- Структура - параметры обработчика события этапа
//	ВыполнятьССамогоРаннего 	- Булево - признак того, что пересчет должен выполняться с самого первого задания до рассчитываемого периода
//									если Ложь, то анализируется только наличие заданий в рассчитываемом периоде
//	ИмяТаблицыОтбораОрганизаций - Строка - имя временной таблицы для отбора регистра заданий по организациям
//									организации в указанной таблице должны находиться в поле с именем "Ссылка"
//									если таблица не указана, то отбираются все организации из свойства МассивОрганизаций
//	ИмяРегистраЗаданий 			- Строка - имя регистра сведений с заданиями к пересчету
//									если регистра не указан, то выбираются данные регистра ЗаданияКЗакрытиюМесяца.
//	ДействиеПодробнее 	 		- Строка - см. функции вида "ОписаниеДействия_..."
//	
// Возвращаемое значение:
//	Булево - признак наличия записей регистра.
//
Функция ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, ВыполнятьССамогоРаннего,
			ИмяТаблицыОтбораОрганизаций = "", ИмяРегистраЗаданий = "", ДействиеПодробнее = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Если НЕ ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций) Тогда
		
		// Проверка по всем рассчитываемым организациям.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка
		|ПОМЕСТИТЬ ВТОрганизации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка В(&МассивОрганизаций)";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задания.Организация,
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(Задания.Месяц, МЕСЯЦ)) КАК Месяц
	|ПОМЕСТИТЬ ВТОрганизацииСЗаданиямиКЗакрытиюМесяца
	|ИЗ
	|	РегистрСведений.%1 КАК Задания
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ %3 КАК Организации
	|		ПО Задания.Организация = Организации.Ссылка
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(Задания.Месяц, МЕСЯЦ) <= &НачалоПериода
	|	И (Задания.Организация В (&МассивОрганизаций)
	|	  ИЛИ НЕ Задания.Организация.ПометкаУдаления)
	|	%2
	|
	|СГРУППИРОВАТЬ ПО
	|	Задания.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МИНИМУМ(Задания.Месяц), НЕОПРЕДЕЛЕНО) КАК Месяц
	|ИЗ
	|	ВТОрганизацииСЗаданиямиКЗакрытиюМесяца КАК Задания";
	
	Если НЕ ЗначениеЗаполнено(ИмяРегистраЗаданий) Тогда
		
		// Проверяем регистр ЗаданияКЗакрытиюМесяца 
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Запрос.Текст,
			"ЗаданияКЗакрытиюМесяца",
			"И Задания.Операция = &РассчитываемыйЭтап",
			?(ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций), ИмяТаблицыОтбораОрганизаций, "ВТОрганизации"));
		
		Запрос.УстановитьПараметр("РассчитываемыйЭтап", ПараметрыОбработчика.ДанныеЭтапа.Код);
		
	Иначе
		
		// Проверяем указанный регистр
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Запрос.Текст,
			ИмяРегистраЗаданий,
			"",
			?(ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций), ИмяТаблицыОтбораОрганизаций, "ВТОрганизации"));
		
	КонецЕсли;
	
	Если НЕ ВыполнятьССамогоРаннего Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "<=", "=")
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(Запрос,
		"ВТОрганизацииСЗаданиямиКЗакрытиюМесяца"
			+ ?(НЕ ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций), ", ВТОрганизации", ""));
	
	Если ЗначениеЗаполнено(Выборка.Месяц) Тогда
		
		ПараметрыОбработчика.ДанныеЭтапа.ДатаНачалаРасчета = Выборка.Месяц;
		
		УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Требуется пересчет операции %1 %2'"),
				?(ВыполнятьССамогоРаннего, НСтр("ru='начиная с периода'"), НСтр("ru='за период'")),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(Выборка.Месяц)),
				?(ЗначениеЗаполнено(ДействиеПодробнее),ТекстПодробнееПоУмолчанию(),""),
				ДействиеПодробнее);
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет наличие регламентного документа указанного вида.
//
// Параметры:
//	ПараметрыОбработчика 		- Структура - параметры обработчика события этапа
//	ИмяДокумента 				- Строка - имя регламентного документа, как оно указано в метаданных
//	ИмяТаблицыОтбораОрганизаций - Строка - имя временной таблицы для отбора документов по организациям
//									организации в указанной таблице должны находиться в поле с именем "Ссылка"
//									если таблица не указана, то отбираются все организации из свойства МассивОрганизаций.
//	
// Возвращаемое значение:
//	Булево - признак наличия документов.
//
Функция ПроверитьНаличиеРегламентногоДокументаЭтапаЗакрытияМесяца(ПараметрыОбработчика, ИмяДокумента, ИмяТаблицыОтбораОрганизаций = "") Экспорт
	
	Запрос = Новый Запрос;
	ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Если НЕ ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций) Тогда
		
		// Проверка по всем рассчитываемым организациям.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка
		|ПОМЕСТИТЬ ВТОрганизации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка В(&МассивОрганизаций)";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	ВТОрганизации КАК Организации
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.%1 КАК Т
	|		ПО Организации.Ссылка = Т.Организация
	|			И (Т.Дата МЕЖДУ &НачалоПериода И &КонецПериода)
	|			И (Т.Проведен)";
	
	Если ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОрганизации", ИмяТаблицыОтбораОрганизаций);
	КонецЕсли;
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, РезультатЗапроса.Выгрузить().Количество());
	
	Если РезультатЗапроса.Пустой() Тогда
		
		УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='За период %1 нет заданий для расчета данной операции и отсутствуют документы ""%2"".'"),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации),
				Метаданные.Документы[ИмяДокумента].Синоним));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций) Тогда
		РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(Запрос, "ВТОрганизации");
	КонецЕсли;
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции


#КонецОбласти


#Область ОпределениеИУстановкаСостоянияЭтапов

// Устанавливает состояние этапа "Не требуется".
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа
//	Пояснение 			 - Строка - текст пояснения для устанавливаемого состояния
//	ТекстПодробнее 		 - Строка - текст гиперссылки "Подробнее" вместо текста по умолчанию
//	ДействиеПодробнее 	 - Строка - см. функции вида "ОписаниеДействия_..."
//	Состояние 			 - ПеречисленияСсылка.ВариантыВажностиПроблемыСостоянияСистемы - статус пояснения, по умолчанию "Информация".
//
Процедура УстановитьСостояниеНеТребуется(ПараметрыОбработчика, Пояснение = "", ТекстПодробнее = "", ДействиеПодробнее = Неопределено, Состояние = Неопределено) Экспорт
	
	Если ПараметрыОбработчика.ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено
	 ИЛИ ПараметрыОбработчика.ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками Тогда
		Возврат; // если были диагностированы проблемы, то этап требует пересчета
	КонецЕсли;
	
	ПараметрыОбработчика.ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	
	Если ЗначениеЗаполнено(Пояснение) Тогда
		ДобавитьПоясняющуюИнформациюКЭтапу(ПараметрыОбработчика, Пояснение, ТекстПодробнее, ДействиеПодробнее, Состояние);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает состояние этапа "Отключен".
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа
//	Пояснение 			 - Строка - текст пояснения для устанавливаемого состояния
//	ТекстПодробнее 		 - Строка - текст гиперссылки "Подробнее" вместо текста по умолчанию
//	ДействиеПодробнее 	 - Строка - см. функции вида "ОписаниеДействия_..."
//	Состояние 			 - ПеречисленияСсылка.ВариантыВажностиПроблемыСостоянияСистемы - статус пояснения, по умолчанию "Информация".
//
Процедура УстановитьСостояниеОтключено(ПараметрыОбработчика, Пояснение = "", ТекстПодробнее = "", ДействиеПодробнее = Неопределено, Состояние = Неопределено) Экспорт
	
	ПараметрыОбработчика.ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	ПараметрыОбработчика.ДанныеЭтапа.Отключено = Истина;
	
	Если ЗначениеЗаполнено(Пояснение) Тогда
		ДобавитьПоясняющуюИнформациюКЭтапу(ПараметрыОбработчика, Пояснение, ТекстПодробнее, ДействиеПодробнее, Состояние);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает состояние этапа "Не выполнен".
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа
//	Пояснение 			 - Строка - текст пояснения для устанавливаемого состояния
//	ТекстПодробнее 		 - Строка - текст гиперссылки "Подробнее" вместо текста по умолчанию
//	ДействиеПодробнее 	 - Строка - см. функции вида "ОписаниеДействия_..."
//	Состояние 			 - ПеречисленияСсылка.ВариантыВажностиПроблемыСостоянияСистемы - статус пояснения, по умолчанию "Ошибка".
//
Процедура УстановитьСостояниеНеВыполнен(ПараметрыОбработчика, Пояснение = "", ТекстПодробнее = "", ДействиеПодробнее = Неопределено, Состояние = Неопределено) Экспорт
	
	ПараметрыОбработчика.ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	
	Если ЗначениеЗаполнено(Пояснение) Тогда
		
		Если НЕ ЗначениеЗаполнено(Состояние) Тогда
			Состояние = Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка;
		КонецЕсли;
		
		ДобавитьПоясняющуюИнформациюКЭтапу(ПараметрыОбработчика, Пояснение, ТекстПодробнее, ДействиеПодробнее, Состояние);
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает состояние этапа "Выполнен с ошибками".
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа
//	Пояснение 			 - Строка - текст пояснения для устанавливаемого состояния
//	ТекстПодробнее 		 - Строка - текст гиперссылки "Подробнее" вместо текста по умолчанию
//	ДействиеПодробнее 	 - Строка - см. функции вида "ОписаниеДействия_..."
//	Состояние 			 - ПеречисленияСсылка.ВариантыВажностиПроблемыСостоянияСистемы - статус пояснения, по умолчанию "Предупреждение".
//
Процедура УстановитьСостояниеВыполненСОшибками(ПараметрыОбработчика, Пояснение = "", ТекстПодробнее = "", ДействиеПодробнее = Неопределено, Состояние = Неопределено) Экспорт
	
	Если ПараметрыОбработчика.ДанныеЭтапа.Состояние <> Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		ПараметрыОбработчика.ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Пояснение) Тогда
		
		Если НЕ ЗначениеЗаполнено(Состояние) Тогда
			Состояние = Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Предупреждение;
		КонецЕсли;
		
		ДобавитьПоясняющуюИнформациюКЭтапу(ПараметрыОбработчика, Пояснение, ТекстПодробнее, ДействиеПодробнее, Состояние);
		
	КонецЕсли;
	
КонецПроцедуры


// Проверяет, что состояние этапа отличается от незаполненного состояния по умолчанию.
//
// Параметры:
//	ДанныеЭтапа - СтрокаТаблицыЗначений - строка таблицы этапов.
//
// Возвращаемое значение:
//	Булево - признак того, что состояния этапа отличается от "Неопределено".
//
Функция СостояниеЭтапаОпределено(ДанныеЭтапа) Экспорт
	
	Возврат ДанныеЭтапа.Состояние <> Перечисления.СостоянияОперацийЗакрытияМесяца.Неопределено;
	
КонецФункции

// Проверяет, что состояние этапа отличается от "Выполнен успешно" и "Не требуется".
//
// Параметры:
//	ДанныеЭтапа - СтрокаТаблицыЗначений - строка таблицы этапов.
//
// Возвращаемое значение:
//	Булево - признак необходимости пересчета этапа.
//
Функция ТребуетсяПересчетЭтапа(ДанныеЭтапа) Экспорт
	
	Возврат ДанныеЭтапа.Состояние <> Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно
		И ДанныеЭтапа.Состояние <> Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	
КонецФункции

// Проверяет, что состояние этапа равно "Не требуется".
//
// Параметры:
//	ДанныеЭтапа - СтрокаТаблицыЗначений - строка таблицы этапов.
//
// Возвращаемое значение:
//	Булево - признак этапа расчет которого не требуется.
//
Функция РасчетЭтапаНеТребуется(ДанныеЭтапа) Экспорт
	
	Возврат ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	
КонецФункции


// Добавляет поясняющую информацию к этапу.
// В дереве операций закрытия месяца отображается на третьем уровне.
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа
//	Пояснение 			 - Строка - текст пояснения для устанавливаемого состояния
//	ТекстПодробнее 		 - Строка - текст гиперссылки "Подробнее" вместо текста по умолчанию
//	ДействиеПодробнее 	 - Строка - см. функции вида "ОписаниеДействия_..."
//	Состояние 			 - ПеречисленияСсылка.ВариантыВажностиПроблемыСостоянияСистемы - статус пояснения, по умолчанию "Информация".
//
Процедура ДобавитьПоясняющуюИнформациюКЭтапу(ПараметрыОбработчика, Пояснение,
			ТекстПодробнее = "", ДействиеПодробнее = Неопределено, Состояние = Неопределено) Экспорт
	
	ОписаниеПояснения = ПараметрыОбработчика.ТаблицаПояснения.Добавить();
	
	ОписаниеПояснения.Код 				= Новый УникальныйИдентификатор;
	ОписаниеПояснения.Состояние	 		= ?(ЗначениеЗаполнено(Состояние),
		Состояние,
		Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Информация);
	ОписаниеПояснения.Родитель 			= ПараметрыОбработчика.ДанныеЭтапа.Код;
	
	ОписаниеПояснения.Наименование 		= Пояснение;
	ОписаниеПояснения.ТекстПодробнее 	= ТекстПодробнее;
	ОписаниеПояснения.ДействиеПодробнее = ДействиеПодробнее;
	
КонецПроцедуры

// Устанавливает состояние этапа по данным указанной временной таблицы.
//
// Параметры:
//	ПараметрыОбработчика 		 - Структура - параметры обработчика события этапа
//	ШаблонТекста 		 		 - Строка - шаблон текста пояснение, формируемого для каждой строки временной таблицы;
//									в шаблоне параметр %1 заменяется на организацию, а %2 - на рассчитываемый период
//	Запрос 				 		 - Запрос - запрос с менеджером временных таблиц
//	ИмяВременнойТаблицы  		 - Строка - имя временной таблицы для установки состояния этапа;
//									обязательная колонка временной таблицы - "Организация"
//	ПоРассчитываемымОрганизациям - Булево - признак отбора строк временной таблицы по организациям из свойства МассивОрганизаций
//	ЭтоОшибка 			 		 - Булево - признак того, что строки указанной временной таблицы содержат ошибки;
//									если Истина, то будет установлено состояние этапа "Не выполнен", иначе - "Не требуется".
//
Процедура ЗафиксироватьРезультатыОбработчикаИспользованияПоОрганизациям(ПараметрыОбработчика, ШаблонТекста, Запрос,
			ИмяВременнойТаблицы, ПоРассчитываемымОрганизациям, ЭтоОшибка = Ложь)
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИмяВременнойТаблицы КАК РезультатПроверки
	|		ПО Т.Ссылка = РезультатПроверки.Организация
	|ГДЕ
	|	Т.Ссылка В(&МассивОрганизаций)
	|	И ВЫБОР КОГДА РезультатПроверки.Организация ЕСТЬ NULL
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	  КОНЕЦ = &ПоРассчитываемымОрганизациям
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	
	Запрос.УстановитьПараметр("ПоРассчитываемымОрганизациям", ПоРассчитываемымОрганизациям);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, Выборка.Количество());
	
	Пока Выборка.Следующий() Цикл
		
		ТекстРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонТекста,
			Выборка.Организация,
			РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации));
		
		Если ЭтоОшибка Тогда
			УстановитьСостояниеНеВыполнен(ПараметрыОбработчика, ТекстРезультата);
		Иначе
			УстановитьСостояниеНеТребуется(ПараметрыОбработчика, ТекстРезультата);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


// Определяет состояние указанных этапов закрытия месяца.
//
// Параметры:
//  Этапы 							  - ПеречислениеСсылка.ОперацииЗакрытияМесяца, Массив - операции закрытия месяца
//	Период 							  - Дата - рассчитываемый период
//	МассивОрганизаций 				  - СправочникСсылка.Организации, Массив - рассчитываемые организации
//	УчетСостоянияПредшествующихЭтапов - Булево - учитывать состояние предыдущих этапов, от которых зависят указанные этапы
//	ВыполнятьПроверкиДоЭтапа 		  - Булево - выполнять проверки состояния системы, относящиеся к данной этапу.
//	ОбновитьТолькоОдинЭтап			  - ПеречислениеСсылка.ОперацииЗакрытияМесяца - экспресс-проверка состояния только указанного этапа
//										 при этом не проверяется определение состояния предшествующих этапов, влияющих на указанный этап
//
// Возвращаемое значение:
//	Соответствие
//		Ключ - ПеречислениеСсылка.ОперацииЗакрытияМесяца - этап
//		Значение - ПеречисленияСсылка.СостоянияОперацийЗакрытияМесяца - состояние этапа
//	Если в параметр Этапы передан один этап, то возвращается не Соответствие, а значение с типом ПеречисленияСсылка.СостоянияОперацийЗакрытияМесяца.
//
Функция ОпределитьСостояниеЭтаповРасчета(Этапы, Период, МассивОрганизаций = Неопределено,
			УчетСостоянияПредшествующихЭтапов = Истина, ВыполнятьПроверкиДоЭтапа = Ложь, ОбновитьТолькоОдинЭтап = Неопределено) Экспорт
	
	// Заполним состояния этапов.
	СтруктураДанных = Обработки.ОперацииЗакрытияМесяца.ИнициализироватьСтруктуруДанныхДляЗаполненияСостоянияЭтапов(
		НачалоМесяца(Период),
		МассивОрганизаций);
	
	ПараметрыЗапускаОбновленияСостояния =
		Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыЗапускаДляЗаполненияСостоянияЭтапов(СтруктураДанных,, ОбновитьТолькоОдинЭтап);
	
	ПараметрыЗапускаОбновленияСостояния.УчетСостоянияПредшествующихЭтапов = УчетСостоянияПредшествующихЭтапов;
	ПараметрыЗапускаОбновленияСостояния.ВыполнятьПроверкиДоЭтапа 		  = ВыполнятьПроверкиДоЭтапа;
	
	Обработки.ОперацииЗакрытияМесяца.ЗаполнитьСостоянияЭтапов(ПараметрыЗапускаОбновленияСостояния);
	
	// Вернем состояние требуемых этапов.
	МассивЭтапов = ОбщегоНазначенияУТКлиентСервер.Массив(Этапы);
	СостоянияЭтапов = Новый Соответствие;
	
	Для Каждого Этап Из МассивЭтапов Цикл
		
		СтрокаЭтапа = СтруктураДанных.ТаблицаЭтапы.Найти(Этап, "Код");
		
		Если СтрокаЭтапа <> Неопределено Тогда
			СостоянияЭтапов.Вставить(Этап, СтрокаЭтапа.Состояние);
		Иначе
			СостоянияЭтапов.Вставить(Этап, Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивЭтапов.Количество() = 1 Тогда
		Возврат СостоянияЭтапов[МассивЭтапов[0]];
	КонецЕсли;
	
	Возврат СостоянияЭтапов;
	
КонецФункции

#КонецОбласти

#Область ОбменДаннымиМеждуОбработчикамиЭтапа

// Устанавливает доп. свойство обработчика этапа для передачи его в следующие за ним обработчики этапа.
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа
//	ИмяСвойства 		 - Строка - ключ доп. свойства
//	ЗначениеСвойства 	 - Произвольный - значение доп. свойства.
//
Процедура УстановитьДополнительноеСвойствоОбработчика(ПараметрыОбработчика, ИмяСвойства, ЗначениеСвойства = Неопределено) Экспорт
	
	ПараметрыОбработчика.ДанныеЭтапа.ДополнительныеСвойства.Вставить(ИмяСвойства, ЗначениеСвойства);
	
КонецПроцедуры

// Возвращает доп. свойство обработчика этапа, установленное в предшествующих обработчиках этапа.
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа
//	ИмяСвойства 		 - Строка - ключ доп. свойства
//	ЗначениеПоУмолчанию  - Произвольный - возвращаемое значение в случае, если доп. свойство с указанным именем не существует.
//
Функция ПолучитьДополнительноеСвойствоОбработчика(ПараметрыОбработчика, ИмяСвойства, ЗначениеПоУмолчанию = Неопределено)
	
	Если НЕ ПараметрыОбработчика.ДанныеЭтапа.ДополнительныеСвойства.Свойство(ИмяСвойства) Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат ПараметрыОбработчика.ДанныеЭтапа.ДополнительныеСвойства[ИмяСвойства];
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область МетодыДляРаботыСПроблемамиСостоянияСистемы

#Область РегистрацияПроблемОбнаруженныхПриПроверкеСостоянияСистемы

// Формирует описание данных, на основании которых надо зарегистрировать найденные проблемы.
//
// Параметры:
//	ИмяВременнойТаблицы 	  - Строка - имя временной таблицы, в которой хранится информация о найденных проблемах
//								обязательное поле - "Организация"
//	ШаблонТекстаОшибки  	  - Строка - шаблон текста описания проблемы
//								в шаблоне параметр %1 заменяется на организацию, а %2 - на рассчитываемый период
//	СписокПолей 			  - СписокЗначений - список полей временной таблицы; Значение - имя поля, Представление (необязательный) - представление поля
//	ИмяПоляОбъекта 			  - Строка - имя поля, в котором хранится объект для расшифровки проблемы
//	ИмяРегистраДляРасшифровки - Строка - имя регистра, в котором зафиксирована проблема
//
// Возвращаемое значение:
//	Массив - массив описаний проблем, см. код ДополнитьПараметрыРегистрацииПроблемПроверки()
//
Функция ИнициализироватьПараметрыРегистрацииПроблемПроверки(ИмяВременнойТаблицы, ШаблонТекстаОшибки, СписокПолей, ИмяПоляОбъекта = "", ИмяРегистраДляРасшифровки = "") Экспорт
	
	ПараметрыРегистрации = Новый Массив;
	
	ДополнитьПараметрыРегистрацииПроблемПроверки(ПараметрыРегистрации, ИмяВременнойТаблицы, ШаблонТекстаОшибки, СписокПолей, ИмяПоляОбъекта, ИмяРегистраДляРасшифровки);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

// Добавляет к ранее сформированному описанию новые данные, на основании которых надо зарегистрировать найденные проблемы.
//
// Параметры:
//	ПараметрыРегистрации 	  - Массив - результат функции ИнициализироватьПараметрыРегистрацииПроблемПроверки()
//	ИмяВременнойТаблицы  	  - Строка - аналогично одноименному параметру ИнициализироватьПараметрыРегистрацииПроблемПроверки()
//	ШаблонТекстаОшибки   	  - Строка - аналогично одноименному параметру ИнициализироватьПараметрыРегистрацииПроблемПроверки()
//	СписокПолей 		 	  - СписокЗначений - аналогично одноименному параметру ИнициализироватьПараметрыРегистрацииПроблемПроверки()
//	ИмяПоляОбъекта 		 	  - Строка - аналогично одноименному параметру ИнициализироватьПараметрыРегистрацииПроблемПроверки()
//	ИмяРегистраДляРасшифровки - Строка - аналогично одноименному параметру ИнициализироватьПараметрыРегистрацииПроблемПроверки()
//
Процедура ДополнитьПараметрыРегистрацииПроблемПроверки(ПараметрыРегистрации, ИмяВременнойТаблицы, ШаблонТекстаОшибки, СписокПолей, ИмяПоляОбъекта = "", ИмяРегистраДляРасшифровки = "") Экспорт
	
	// Описание регистрации ошибки.
	ОписаниеРегистрации = Новый Структура;
	ОписаниеРегистрации.Вставить("ИмяВременнойТаблицы", 	  ИмяВременнойТаблицы);
	ОписаниеРегистрации.Вставить("ШаблонТекстаОшибки",  	  ШаблонТекстаОшибки);
	ОписаниеРегистрации.Вставить("СписокПолей", 			  СписокПолей);
	ОписаниеРегистрации.Вставить("ИмяПоляОбъекта", 	 		  ИмяПоляОбъекта);
	ОписаниеРегистрации.Вставить("ИмяРегистраДляРасшифровки", ИмяРегистраДляРасшифровки);
	ОписаниеРегистрации.Вставить("ТекстЗапросаВыборки", 	  "");
	
	// Текст запроса для выборки данных.
	ТекстПоляЗапроса = "";
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		ТекстПоляЗапроса = ТекстПоляЗапроса + ?(ТекстПоляЗапроса = "", "", ",
			|	") + "Т." + ЭлементСписка.Значение;
	КонецЦикла;
	
	ТекстЗапросаВыборки =
	"ВЫБРАТЬ
	|	%1
	|ИЗ
	|	%2 КАК Т
	|
	|УПОРЯДОЧИТЬ ПО
	|	%1
	|
	|ИТОГИ ПО
	|	Организация";
	
	ТекстЗапросаВыборки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстЗапросаВыборки,
		ТекстПоляЗапроса,
		ИмяВременнойТаблицы);
	
	ОписаниеРегистрации.ТекстЗапросаВыборки = ТекстЗапросаВыборки;
	
	ПараметрыРегистрации.Добавить(ОписаниеРегистрации);
	
КонецПроцедуры

// Записывает в ИБ информацию о проблеме, диагностированной при выполнении проверки этапа закрытия месяца.
//
// Параметры:
//	ПараметрыПроверки 			   - Структура - параметр процедуры-обработчика проверки, см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки()
//	ПараметрыРегистрации 		   - Массив - результат функции ИнициализироватьПараметрыРегистрацииПроблемПроверки()
//	ТекстЗапросаФормированияТаблиц - Строка - текст запроса для формирования временной таблицы с информацией о найденных проблемах
//	ДополнительныеПараметрыЗапроса - Структура - дополнительные параметры для запроса формирования временной таблицы, используемые только в данной проверке.
//	Важность 			 	  	   - ПеречисленияСсылка.ВариантыВажностиПроблемыСостоянияСистемы - статус проблемы; по умолчанию "Ошибка"
//
Процедура ЗарегистрироватьПроблемыВыполненияПроверки(ПараметрыПроверки, ПараметрыРегистрации,
			ТекстЗапросаФормированияТаблиц = "", ДополнительныеПараметрыЗапроса = Неопределено, Важность = Неопределено) Экспорт
	
	ПроверкаДоРасчета    = ЗначениеДополнительногоПараметраПроверки(ПараметрыПроверки, "ПроверкаДоРасчета",    Ложь);
	ПроверкаПослеРасчета = ЗначениеДополнительногоПараметраПроверки(ПараметрыПроверки, "ПроверкаПослеРасчета", Ложь);
	
	Если ПроверкаДоРасчета ИЛИ ПроверкаПослеРасчета Тогда
		
		ПараметрыОбработчика = ИнициализироватьПараметрыОбработчикаЭтапаЗакрытияМесяцаДляПроверки(ПараметрыПроверки);
		
		Если ПроверкаДоРасчета И РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
		
	Иначе
		
		ПараметрыРасчета = ИнициализироватьПараметрыРасчетаДляПроверки(ПараметрыПроверки);
		
	КонецЕсли;
	
	МаксКоличествоОшибок = КоличествоРегистрируемыхОднотипныхОшибок();
	
	Запрос = Новый Запрос;
	
	ИнициализироватьЗапрос(
		Запрос,
		?(ПроверкаДоРасчета ИЛИ ПроверкаПослеРасчета, ПараметрыОбработчика, ПараметрыРасчета)); // получим МенеджерВременныхТаблиц
	
	ОбщегоНазначенияУТ.УстановитьПараметрыЗапроса(
		Запрос,
		ДополнительныеПараметрыЗапроса); // установим уникальные доп. параметры для проверки
	
	Если ЗначениеЗаполнено(ТекстЗапросаФормированияТаблиц) Тогда
		
		// Таблица с данными формируется не в процедуре проверки использования этапа - сформируем ее здесь.
		Запрос.Текст = ТекстЗапросаФормированияТаблиц;
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Для Каждого ОписаниеРегистрации Из ПараметрыРегистрации Цикл
		
		Запрос.Текст = ОписаниеРегистрации.ТекстЗапросаВыборки;
		
		ВыборкаОрганизаций = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаОрганизаций.Следующий() Цикл
			
			// Зарегистрируем проблему.
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ОписаниеРегистрации.ШаблонТекстаОшибки,
				ВыборкаОрганизаций.Организация,
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации));
			
			АудитСостоянияСистемы.ДобавитьСтрокуВТаблицуВыявленныхПроблем(
				ПараметрыПроверки,
				ВыборкаОрганизаций.Организация,
				ПараметрыРасчета.ПериодРегистрации,
				ТекстОшибки,
				Важность);
			
			Выборка = ВыборкаОрганизаций.Выбрать();
			
			НомерОшибки = 0;
			
			Пока Выборка.Следующий() Цикл
				
				НомерОшибки = НомерОшибки + 1;
				
				Если МаксКоличествоОшибок > 0 И НомерОшибки > МаксКоличествоОшибок Тогда
					
					КоличествоНезарегистрированных = Выборка.Количество() - МаксКоличествоОшибок;
					
					ДобавитьИнформациюОНезарегистрированныхОбъектахКЗафиксированнойПроблеме(
						ПараметрыПроверки,
						ТекстОшибки,
						КоличествоНезарегистрированных);
					
					Прервать;
					
				КонецЕсли;
					
				// Добавим расшифровку проблемы по объектам.
				Если ЗначениеЗаполнено(ОписаниеРегистрации.ИмяПоляОбъекта) Тогда
					
					ДобавитьОбъектКЗафиксированнойПроблеме(
						ПараметрыПроверки,
						Выборка,
						ТекстОшибки,
						ОписаниеРегистрации.СписокПолей,
						ОписаниеРегистрации.ИмяПоляОбъекта);
					
				Иначе
					
					ДобавитьСоставнойОбъектКЗафиксированнойПроблеме(
						ПараметрыПроверки,
						Выборка,
						ТекстОшибки,
						ОписаниеРегистрации.СписокПолей,
						ОписаниеРегистрации.ИмяРегистраДляРасшифровки);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает дополнительные параметры проверки, переданные в нее механизмом закрытия месяца.
//
// Параметры:
//	ПараметрыПроверки - Структура - параметр процедуры-обработчика проверки, см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки().
//
// Возвращаемое значение:
//	Структура - структура дополнительных параметров запуска проверки; если проверка вызвана вне механизма закрытия месяца, то возвращается пустая структура.
//
Функция ДополнительныеПараметрыПроверки(ПараметрыПроверки) Экспорт
	
	Если ТипЗнч(ПараметрыПроверки.ДополнительныеПараметры) <> Тип("Структура")
	 И ТипЗнч(ПараметрыПроверки.ДополнительныеПараметры) <> Тип("ФиксированнаяСтруктура") Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	Возврат ПараметрыПроверки.ДополнительныеПараметры;
	
КонецФункции

// Возвращает значение указанного дополнительного параметра проверки, переданного в нее механизмом закрытия месяца.
// Если параметра с таким именем нет, то возвращается значение параметра по умолчанию.
//
// Параметры:
//	ПараметрыПроверки - Структура - параметр процедуры-обработчика проверки, см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки()
//	ИмяПараметра - Строка - ключ структуры дополнительных параметров
//	ЗначениеПоУмолчанию - Произвольный - значение, возвращаемое функцией если доп. параметра с указанным именем нет.
//
// Возвращаемое значение:
//	Произвольное - значение дополнительного параметра проверки.
//
Функция ЗначениеДополнительногоПараметраПроверки(ПараметрыПроверки, ИмяПараметра, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	ДополнительныеПараметры = ДополнительныеПараметрыПроверки(ПараметрыПроверки);
	
	Если ДополнительныеПараметры.Свойство(ИмяПараметра) Тогда
		Возврат ДополнительныеПараметры[ИмяПараметра];
	КонецЕсли;
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

// Возвращает признак того, что проверка вызвана механизмом закрытия месяца.
//
// Параметры:
//	ПараметрыПроверки - Структура - параметр процедуры-обработчика проверки, см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки().
//
// Возвращаемое значение:
//	Булево - проверка вызвана из Обработка.ОперацииЗакрытияМесяца.ВыполнитьПроверкиЭтапа().
//
Функция ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Экспорт
	
	Возврат ЗначениеДополнительногоПараметраПроверки(ПараметрыПроверки, "Состояние", Null) <> Null;
	
КонецФункции

#КонецОбласти

#Область РегистрацияПроблемОбнаруженныхПриРасчетеЭтапа

// Добавляет информацию о проблеме, диагностированной в ходе расчета, в общий список проблем расчета этапа.
// Запись информации о проблемах из этого списка будет выполнена централизованно самим механизмом закрытия месяца, после
// окончания расчета этапа. Использовать данную процедуру следует в случае, если в месте возникновения проблемы
// доступен универсальный параметр обработчика расчета - ПараметрыОбработчика.
// Если при расчете этапа этот параметр недоступен, то алгоритм расчета этапа
// должен регистрировать проблему самостоятельно, через ЗарегистрироватьПроблемуВыполненияРасчета().
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа
//	ТекстПодробно 		 - Строка - подробное описание проблемы; выводится в форме расшифровки проблем из формы закрытия месяца
//	Организация 		 - СправочникСсылка.Организации, Массив - организации, к которым относится данная ошибка
//							если не указано, то ошибка относится к каждой из рассчитываемых организаций
//	Период 				 - Дата - период, к которому относится ошибка
//							если не указано, то ошибка относится к периоду расчета
//	Важность 			 - ПеречисленияСсылка.ВариантыВажностиПроблемыСостоянияСистемы - статус проблемы; по умолчанию "Ошибка"
//	Объект 				 - Произвольный - объект для расшифровки проблемы.
//	
Процедура ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(ПараметрыОбработчика, ТекстПодробно,
			Организация = Неопределено, Период = Неопределено, Важность = Неопределено, Объект = Неопределено) Экспорт
	
	ОписаниеОшибки = ПараметрыОбработчика.ТаблицаПояснения.Добавить();
	
	ОписаниеОшибки.Родитель 		 = ПараметрыОбработчика.ДанныеЭтапа.Код;
	ОписаниеОшибки.Наименование 	 = ТекстПодробно;
	ОписаниеОшибки.Состояние 		 = Важность;
	ОписаниеОшибки.Организация 		 = Организация;
	ОписаниеОшибки.Период 			 = Период;
	ОписаниеОшибки.РасшифровкаОшибки = Объект;
	
КонецПроцедуры

// Формирует описание данных, на основании которых надо зарегистрировать проблему выполнения расчета.
//
// Параметры:
//  ЭтапРасчета	- ПеречислениеСсылка.ОперацииЗакрытияМесяца - этап закрытия месяца.
//	Организация - СправочникСсылка.Организации, Массив - организации, к которым относится данная проблема
//					если не указано, то проблема относится к каждой из рассчитываемых организаций
//  Период		- Дата - период расчета.
//
// Возвращаемое значение:
//	Структура - параметры регистрации проблемы расчета.
//
Функция ИнициализироватьПараметрыРегистрацииПроблемыРасчета(ЭтапРасчета, Организация, Период) Экспорт
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("ЭтапРасчета", ЭтапРасчета);
	ПараметрыРегистрации.Вставить("Организация", Организация);
	ПараметрыРегистрации.Вставить("Период", 	 Период);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

// Записывает в ИБ информацию о проблеме, диагностированной при выполнении расчета этапа закрытия месяца.
// Использовать данную процедуру следует в случае, если в месте возникновения проблемы
// недоступен универсальный параметр обработчика расчета - ПараметрыОбработчика.
// Если при расчете этапа этот параметр доступен, то алгоритм расчета этапа
// должен передавать информацию о проблеме механизму закрытия месяца через ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета().
//
// Параметры:
//	ПараметрыРегистрации - Структура - результат функции ИнициализироватьПараметрыРегистрацииПроблемыРасчета()
//	ТекстКратко 		 - Строка - краткая информация о проблеме; выводится в форме закрытия месяца
//	Важность 			 - ПеречисленияСсылка.ВариантыВажностиПроблемыСостоянияСистемы - статус проблемы; по умолчанию "Ошибка"
//	ТекстПодробно 		 - Строка - подробное описание проблемы; проблемы в форме закрытия месяца группируются по ТекстКратко + Важность, а данный текст выводится в форме расшифровки проблем
//	Объект 				 - Произвольный - объект для расшифровки проблемы.
//	
Процедура ЗарегистрироватьПроблемуВыполненияРасчета(ПараметрыРегистрации, ТекстКратко,
			Важность = Неопределено, ТекстПодробно = "", Объект = Неопределено) Экспорт
	
	Если НЕ ПривилегированныйРежим() Тогда		
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыРегистрации.Организация) Тогда
		МассивОрганизаций = Справочники.Организации.ДоступныеОрганизации();
	Иначе			
		МассивОрганизаций = ОбщегоНазначенияУТКлиентСервер.Массив(ПараметрыРегистрации.Организация);
	КонецЕсли;
	
	Проверка = СлужебнаяПроверкаЭтапа(ПараметрыРегистрации.ЭтапРасчета);
	
	Если НЕ ЗначениеЗаполнено(Важность) Тогда
		Важность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проверка, "Важность");
	КонецЕсли;
	
	Для Каждого ТекущаяОрганизация Из МассивОрганизаций Цикл
		
		ОписаниеПроблемы = АудитСостоянияСистемы.СформироватьОписаниеПроблемы(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстКратко,
				СокрЛП(ТекущаяОрганизация),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРегистрации.Период)),
			Важность,
			ТекстПодробно,
			Объект);
		
		АудитСостоянияСистемы.ЗарегистрироватьПроблему(
			Проверка,
			ТекущаяОрганизация,
			НачалоДня(ПараметрыРегистрации.Период),
			ОписаниеПроблемы);
		
	КонецЦикла;
	
	ПродублироватьВЖурналРегистрации(ПараметрыРегистрации.ЭтапРасчета, Важность, ТекстПодробно);
	
КонецПроцедуры

// Проверяет наличие ошибок, зарегистрированных при выполнении расчета указанного этапа закрытия месяца.
//
// Параметры:
//  ЭтапРасчета	 	  - ПеречислениеСсылка.ОперацииЗакрытияМесяца - этап закрытия месяца.
//  МассивОрганизаций - СправочникСсылка.Организации, Массив - проверяемые организаций.
//  Период		 	  - Дата - период расчета.
// 
// Возвращаемое значение:
//  Булево - признак наличия ошибок расчета.
//
Функция ЕстьОшибкиВыполненияРасчета(ЭтапРасчета, МассивОрганизаций, Период) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Количество
	|ИЗ
	|	РегистрСведений.ПроблемыСостоянияСистемы КАК Проблемы
	|ГДЕ
	|	Проблемы.Проверка = &Проверка
	|	И Проблемы.Организация В(&МассивОрганизаций)
	|	И НАЧАЛОПЕРИОДА(Проблемы.ПроверяемыйПериод, МЕСЯЦ) = &Период
	|	И Проблемы.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка)";
	
	Запрос.УстановитьПараметр("Проверка", 	 	   СлужебнаяПроверкаЭтапа(ЭтапРасчета));
	Запрос.УстановитьПараметр("МассивОрганизаций", ОбщегоНазначенияУТКлиентСервер.Массив(МассивОрганизаций));
	Запрос.УстановитьПараметр("Период", 	 	   НачалоМесяца(Период));
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();

КонецФункции

#КонецОбласти

#Область ЗаписьВЖурналРегистрации

Функция ДублироватьНайденныеПроблемыВЖурналеРегистрации()
	
	ЗначенияПараметров = РасчетСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров(
		Перечисления.ОперацииЗакрытияМесяца.ПустаяСсылка());
		
	Возврат ЗначенияПараметров.ДублироватьНайденныеПроблемыВЖурналеРегистрации;
	
КонецФункции

Процедура ПродублироватьВЖурналРегистрации(ЭтапРасчета, ИсточникОпределенияВажностиПроблемы, ТекстОшибки)
	
	Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат;
	ИначеЕсли НЕ ДублироватьНайденныеПроблемыВЖурналеРегистрации() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИсточникОпределенияВажностиПроблемы) Тогда
		Важность = Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка;
	ИначеЕсли ТипЗнч(ИсточникОпределенияВажностиПроблемы) = Тип("ПеречислениеСсылка.ВариантыВажностиПроблемыСостоянияСистемы") Тогда
		Важность = ИсточникОпределенияВажностиПроблемы;
	Иначе
		Важность = РасчетСебестоимостиПовтИсп.ВажностьПроверкиСостоянияСистемы(ИсточникОпределенияВажностиПроблемы);
	КонецЕсли;
	
	Если Важность = Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка Тогда
		УровеньЖР = УровеньЖурналаРегистрации.Ошибка;
	ИначеЕсли Важность = Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Предупреждение
	 ИЛИ Важность = Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.ВажнаяИнформация Тогда
		УровеньЖР = УровеньЖурналаРегистрации.Предупреждение;
	Иначе
		УровеньЖР = УровеньЖурналаРегистрации.Информация;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(ОбщегоНазначения.ИмяЗначенияПеречисления(ЭтапРасчета)),
		УровеньЖР,
		,
		,
		ТекстОшибки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область МетодыДляРаботыСЗаданияКЗакрытиюМесяца

// Возвращает итоговый текст запроса формирования заданий к закрытию месяца по 
// - имени контрольного регистра 
// - массиву текстов запросов по отдельным операциям закрытия месяца.
// 
// Параметры:
// 	ИмяРегистра - Строка - Имя контрольного регистра.
// 	МассивТекстовЗапросовПоОперациям - Массив - Массив текстов запросов формирования заданий по отдельным операция закрытия месяца. 
//
// Возвращаемое значение:
// 	ТекстЗапроса - Строка - Итоговый текст запроса формирования заданий к закрытию месяца по контрольному регистру.
//
Функция ТекстЗапросЗаданийКЗакрытиюМесяца(ИмяРегистра, МассивТекстовЗапросовПоОперациям) Экспорт
	
	ТекстЗапросаИнициализации = 
	"ВЫБРАТЬ
	|	ДАТАВРЕМЯ(1,1,1)                                           КАК Месяц,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ПустаяСсылка) КАК Операция,
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)              КАК Организация,
	|	НЕОПРЕДЕЛЕНО                                               КАК Документ
	|ПОМЕСТИТЬ %1ЗаданияКЗакрытиюМесяца
	|ГДЕ ЛОЖЬ
	|";
	ТекстЗапросаИнициализации = СтрШаблон(ТекстЗапросаИнициализации, ИмяРегистра);
	
	МассивТекстовЗапросовПоОперациям.Вставить(0, ТекстЗапросаИнициализации);
	
	Возврат СтрСоединить(МассивТекстовЗапросовПоОперациям, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
КонецФункции

// Возвращает текущее значение константы "НомерЗаданияК...".
//
// Параметры:
//	ИмяКонстанты - Строка - имя константы номера задания; если не задано, то "НомерЗаданияКЗакрытиюМесяца".
//
// Возвращаемое значение:
//	Число - значение константы "НомерЗаданияКЗакрытиюМесяца". Определяет текущий номер задания для которого будет производиться расчет.
//		Все последующие действия пользователей информационной базы в целях актуализации расчетов будут писаться под более высоким номером задания.
//
Функция ТекущийНомерЗадания(Знач ИмяКонстанты = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяКонстанты) Тогда
		ИмяКонстанты = Метаданные.Константы.НомерЗаданияКЗакрытиюМесяца.Имя;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Константы[ИмяКонстанты].Получить();
	
КонецФункции

// Увеличивает на 1 значение константы "НомерЗаданияК...".
//
// Параметры:
//	ИмяКонстанты - Строка - имя константы номера задания; если не задано, то "НомерЗаданияКЗакрытиюМесяца".
//
// Возвращаемое значение:
//	Число - исходный номер задания.
//
Функция УвеличитьНомерЗадания(Знач ИмяКонстанты = "") Экспорт
	
	НомерДоРасчета = 0;
	
	Если НЕ ЗначениеЗаполнено(ИмяКонстанты) Тогда
		ИмяКонстанты = Метаданные.Константы.НомерЗаданияКЗакрытиюМесяца.Имя;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Константа." + ИмяКонстанты);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();		
		
		НомерДоРасчета = ТекущийНомерЗадания(ИмяКонстанты);
		Константы[ИмяКонстанты].Установить(НомерДоРасчета + 1);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			+ " " + НСтр("ru = 'Значение константы'") + " " + ИмяКонстанты + " = " + НомерДоРасчета;
		
		ЗаписьЖурналаРегистрации(
		    ИмяСобытияЖурналаРегистрации(НСтр("ru='Увеличение номера задания для расчета'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ИнформацияОбОшибке);
			
		ВызватьИсключение ИнформацияОбОшибке;
		
	КонецПопытки;
	
	Возврат НомерДоРасчета;
	
КонецФункции

// Возвращает период с которого для данной операции закрытия месяца данные становятся неактуальными.
//
// Параметры:
//	ОперацияРасчета   - ПеречислениеСсылка.ОперацииЗакрытияМесяца - этап закрытия месяца
//	КонецРасчета 	  - Дата - Конец месяца, на который надо контролировать актуальность расчета.
//	НомерЗадания 	  - Число - Номер задания по которому контролируется актуальность записей в регистре задания.
//						Записи выбираются только те, которые не превышают указанного номера задания.
//	МассивОрганизаций - Массив - Массив организаций, для которых контролируется актуальность.
//
// Возвращаемое значение:
//	Дата - Начало месяца на который неактуально закрытие месяца. Если последовательность актуальна в периоде КонецРасчета,
//			то будет возвращено начало следующего месяца за КонецРасчета.
//
Функция НачалоРасчета(ОперацияРасчета, КонецРасчета, НомерЗадания = Неопределено, МассивОрганизаций = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(Задания.Месяц) КАК НачалоРасчета
	|ИЗ
	|	РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Задания
	|ГДЕ
	|	Задания.Месяц <= &КонецРасчета
	|	И Задания.Операция = &ОперацияРасчета
	|	И Задания.НомерЗадания <= &НомерЗадания
	|	И (Задания.Организация В (&МассивОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|ИМЕЮЩИЕ 
	|	НЕ (МИНИМУМ(Задания.Месяц) ЕСТЬ NULL)";
	
	Запрос.УстановитьПараметр("КонецРасчета", 	    КонецРасчета);
	Запрос.УстановитьПараметр("ОперацияРасчета", 	ОперацияРасчета);
	Запрос.УстановитьПараметр("МассивОрганизаций",  МассивОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(МассивОрганизаций));
	
	Если НЕ ЗначениеЗаполнено(НомерЗадания) Тогда
		Запрос.УстановитьПараметр("НомерЗадания", ТекущийНомерЗадания());
	Иначе
		Запрос.УстановитьПараметр("НомерЗадания", НомерЗадания);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.НачалоРасчета, КонецМесяца(КонецРасчета) + 1);
	
КонецФункции

// Фиксирует удачный пересчет. Вызывается когда выполнен пересчет, для очистки записей, указывавших на необходимость пересчета.
//
// Параметры:
//	СледующийМесяц 		  - Дата - указывает месяц на начало которого будет записана необходимость об актуализации данных расчета;
//	НомерЗаданияДоРасчета - Число - номер задания для которого производился расчет (см. ТекущийНомерЗадания()), если в процессе выполнения пересчета были опять изменены исходные данные,
//							  запись об этом изменении была произведена под новым номером задания (см. УвеличитьНомерЗадания());
//	ОперацияРасчета 	  - ПеречислениеСсылка.ОперацииЗакрытияМесяца - операция для которой производился расчет;
//	ДанныеКРаспределению  - Структура - Формируется в методе ЗаданияКРасчетуЗаМесяц().
//
Процедура ЗафиксироватьРасчет(СледующийМесяц, НомерЗаданияДоРасчета, ОперацияРасчета, ДанныеКРаспределению) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задания.Месяц,
	|	Задания.Операция,
	|	Задания.Организация,
	|	Задания.НомерЗадания,
	|	Задания.Документ
	|ИЗ
	|	КэшГраниц КАК Задания
	|;
	|/////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&СледующийМесяц                   КАК Месяц,
	|	Границы.Операция                  КАК Операция,
	|	Границы.Организация               КАК Организация,
	|	МАКСИМУМ(Границы.НомерЗадания)    КАК НомерЗадания,
	|	НЕОПРЕДЕЛЕНО                      КАК Документ
	|ИЗ
	|	КэшГраниц КАК Границы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Задания
	|	ПО &СледующийМесяц = Задания.Месяц
	|		И Границы.Операция = Задания.Операция
	|		И Границы.Организация = Задания.Организация
	|		И Границы.НомерЗадания = Задания.НомерЗадания
	|		И НЕОПРЕДЕЛЕНО = Задания.Документ
	|ГДЕ
	|	Задания.Месяц ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	Границы.Операция,
	|	Границы.Организация";
	
	Запрос.МенеджерВременныхТаблиц = ДанныеКРаспределению.ВременныеТаблицы;
	Запрос.УстановитьПараметр("СледующийМесяц", СледующийМесяц);
	
	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьНаборЗаписей();
		Набор.Отбор.Месяц.Установить(Выборка.Месяц);
		Набор.Отбор.Операция.Установить(Выборка.Операция);
		Набор.Отбор.Организация.Установить(Выборка.Организация);
		Набор.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
		Набор.Отбор.Документ.Установить(Выборка.Документ);
		Набор.Записать(); // Очистили рассчитанные аналитики в прошлом периоде
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СледующийМесяц) Тогда
		Выборка = Результат[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			Набор = РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьНаборЗаписей();
			Набор.Отбор.Месяц.Установить(Выборка.Месяц);
			Набор.Отбор.Операция.Установить(Выборка.Операция);
			Набор.Отбор.Организация.Установить(Выборка.Организация);
			Набор.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
			Набор.Отбор.Документ.Установить(Выборка.Документ);
			СтрокаНабора = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
			Набор.Записать(Истина); // Перенесли рассчитанные аналитики в новый период
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Блокирует регистр "Задания к закрытию месяца" по указанным аналитикам.
//
// Параметры:
//	НомерЗаданияДоРасчета - Число - Номер задания из константы "Номер задания к закрытию месяца".
//	Организации 		  - Массив, СправочникСсылка.Организации - Перечень организаций к блокировке.
//	Операция 			  - ПеречислениеСсылка.ОперацииЗакрытияМесяца - Операция, по которой блокируется регистр заданий.
//
Процедура ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета, Организации, Операция) Экспорт
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	
	ИмяРегистра = "РегистрСведений.ЗаданияКЗакрытиюМесяца";
	ЭлементБлокировки = Блокировка.Добавить(ИмяРегистра);
	ЭлементБлокировки.УстановитьЗначение("НомерЗадания", Новый Диапазон(Неопределено, НомерЗаданияДоРасчета));
	
	ЭлементБлокировки.УстановитьЗначение("Операция", Операция);
	
	ИсточникБлокировки = Новый ТаблицаЗначений;
	ИсточникБлокировки.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	Если ТипЗнч(Организации) = Тип("Массив") Тогда
		КоличествоСтрок = Организации.Количество();
		Если КоличествоСтрок <> 0 Тогда
			Счетчик = 0;
			Пока Счетчик < КоличествоСтрок Цикл
				ИсточникБлокировки.Добавить();
				Счетчик = Счетчик + 1;
			КонецЦикла;
			ИсточникБлокировки.ЗагрузитьКолонку(Организации, "Организация");
			ЭлементБлокировки.ИсточникДанных = ИсточникБлокировки;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
		КонецЕсли;
		// если массив пустой, то блокировка ставится по всем организациям.
	ИначеЕсли ТипЗнч(Организации) = Тип("СправочникСсылка.Организации")
		И ЗначениеЗаполнено(Организации) Тогда
		СтрокаБлокировки = ИсточникБлокировки.Добавить();
		СтрокаБлокировки.Организация = Организации;
		ЭлементБлокировки.ИсточникДанных = ИсточникБлокировки;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
	КонецЕсли;
	
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

// Считывает записи регистра "Задания к закрытию месяца" во временную таблицу за указанный период по отборам.
//
// Параметры:
//	НачалоПериода - Период - Начало периода выборки данных.
//	КонецПериода  - Период - Конец периода выборки данных.
//	НомерЗадания  - Число - Номер задания по которому контролируется актуальность записей в регистре задания.
//							Записи выбираются только те, которые не превышают указанного номера задания.
//	Организации   - Массив, СправочникСсылка.Организации - Фильтр по организации.
//	Операция 	  - ПеречислениеСсылка.ОперацииЗакрытияМесяца - Фильтр по типу операции.
//
// Возвращаемое значение:
//	Структура:
//		* Организации - Массив - Массив организаций, который неактуальны в указанном периоде.
//		* ВременныеТаблицы - МенеджерВременныхТаблиц - Содержит в себе временную таблицу КэшГраниц.
//
Функция ЗаданияКРасчетуЗаМесяц(НачалоПериода, КонецПериода, НомерЗадания, Организации, Операция) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задания.Месяц,
	|	Задания.Операция,
	|	Задания.Организация,
	|	Задания.НомерЗадания,
	|	Задания.Документ
	|ПОМЕСТИТЬ КэшГраниц
	|ИЗ
	|	РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Задания
	|ГДЕ
	|	Задания.Месяц МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Задания.НомерЗадания <= &НомерЗадания
	|	И Задания.Операция = &Операция
	|	И (Задания.Организация В (&Организации) ИЛИ &ПоВсемОрганизациям)
	|;
	|//////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КэшГраниц.Организация
	|ИЗ
	|	КэшГраниц КАК КэшГраниц";
	
	Запрос.УстановитьПараметр("НачалоПериода", 		НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  		КонецПериода);
	Запрос.УстановитьПараметр("НомерЗадания",  		НомерЗадания);
	Запрос.УстановитьПараметр("Операция", 	   		Операция);
	Запрос.УстановитьПараметр("Организации",   		Организации);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(Организации));
	
	Результат = Запрос.ВыполнитьПакет();
	
	ИсходныеДанные = Новый Структура;
	ИсходныеДанные.Вставить("Организация", 		Результат[1].Выгрузить().ВыгрузитьКолонку("Организация"));
	ИсходныеДанные.Вставить("ВременныеТаблицы", Запрос.МенеджерВременныхТаблиц);
	
	Возврат ИсходныеДанные;
	
КонецФункции

// Процедура формирует записи в регистре сведений "Задания к закрытию месяца",
// если текущий документ изменяет записи в оперативных регистрах.
//
// Параметры:
//	Документ 			   - ДокументСсылка - Ссылка на документ-регистратор
//	ДополнительныеСвойства - Структура - Коллекция, содержащая в себе менеджер временных таблиц.
//
Процедура ОтразитьЗаданияКЗакрытиюМесяца(Документ, ДополнительныеСвойства) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // задания устанавливаются только в главном узле.
		Возврат;
	КонецЕсли;
	
	КоллекцияКонтрольныхРегистров = КоллекцияКонтрольныхРегистров();
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	ВременныеТаблицы = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	ШаблонЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Месяц        КАК Месяц,
	|	Таблица.Организация  КАК Организация,
	|	Таблица.Операция     КАК Операция,
	|	Таблица.Документ     КАК Документ
	|ИЗ
	|	&КоллекцияДанных КАК Таблица
	|";
		
	ТекстВложенногоЗапроса = "";
	ТекстУничтожитьВт = "; ";
		
	Для Каждого КонтрольныйРегистр Из КоллекцияКонтрольныхРегистров Цикл
		
		Если ВременныеТаблицы.Таблицы.Найти(КонтрольныйРегистр) <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(ТекстВложенногоЗапроса) Тогда
				ТекстВложенногоЗапроса = ТекстВложенногоЗапроса + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|";
			КонецЕсли;
			
			ТекстВложенногоЗапроса = ТекстВложенногоЗапроса + СтрЗаменить(ШаблонЗапроса, "&КоллекцияДанных", КонтрольныйРегистр);
			ТекстУничтожитьВт = ТекстУничтожитьВт + "УНИЧТОЖИТЬ " + КонтрольныйРегистр + "; ";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстВложенногоЗапроса) Тогда // есть хотя бы один контрольный регистр.
		ТекстЗапроса = СтрЗаменить(ШаблонЗапроса, "&КоллекцияДанных", "(" + ТекстВложенногоЗапроса + ")")
			+ ТекстУничтожитьВт;
			
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
		НомерЗадания = ТекущийНомерЗадания();
		Выборка = Запрос.Выполнить().Выбрать();
		РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьЗаписиРегистраПоДаннымВыборки(Выборка);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область МетодыДляУстановкиОтборовВОткрываемыхФормах

// Проверяет режим открытия формы - открыта из обработки "Операции закрытия месяца" или не из нее.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка документов.
//
// Возвращаемое значение:
//	Булево - признак открытия формы из механизма закрытия месяца.
//
Функция ЭтаФормаОткрытаИзФормыЗакрытияМесяца(Форма) Экспорт
	
	Возврат Форма.Параметры.Свойство(ИмяСлужебногоСвойстваОткрываемыхФорм());
	
КонецФункции


// Устанавливает отборы в формах регламентных документов регламентированного и международного учета,
// открываемых из формы операций закрытия месяца.
//
// Параметры:
//	Форма 					  - ФормаКлиентскогоПриложения - форма списка документов
//	Список 					  - ДинамическийСписок - список документов в этой форме
//	ИмяПоляДляОтбораПоПериоду - Строка - имя поля для отбора по периоду, по умолчанию "Дата".
//
// Возвращаемое значение:
//	Булево - признак установки отборов; Истина, если форма открывалась из механизма закрытия месяца.
//
Функция УстановитьОтборыВФормеСпискаРегламентныхДокументов(Форма, Список, ИмяПоляДляОтбораПоПериоду = "Дата") Экспорт
	
	Если НЕ ЭтаФормаОткрытаИзФормыЗакрытияМесяца(Форма) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Список.КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
	
	Форма.Параметры.Отбор.Очистить();
	
	// Отбор по организации.
	Если Список.Параметры.Элементы.Найти("МассивОрганизаций") <> Неопределено Тогда
		
		Список.Параметры.УстановитьЗначениеПараметра("МассивОрганизаций", Форма.Параметры.МассивОрганизаций);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"Организация",
			Форма.Параметры.МассивОрганизаций,
			ВидСравненияКомпоновкиДанных.ВСписке,
			,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный,
			"ЗакрытиеМесяца_Организация");
		
	КонецЕсли;
	
	// Отбор по периоду.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		ИмяПоляДляОтбораПоПериоду,
		НачалоМесяца(Форма.Параметры.ПериодРегистрации),
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный,
		"ЗакрытиеМесяца_НачалоПериода");
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Список.КомпоновщикНастроек.Настройки.Отбор,
		ИмяПоляДляОтбораПоПериоду,
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		КонецМесяца(Форма.Параметры.ПериодРегистрации),
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный,
		"ЗакрытиеМесяца_КонецПериода");
	
	// Отбор по типу операции.
	Если Форма.Параметры.Свойство("ТипОперации") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"ТипОперации",
			Форма.Параметры.ТипОперации,
			ВидСравненияКомпоновкиДанных.ВСписке,
			,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный,
			"ЗакрытиеМесяца_ТипОперации");
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Очищает ранее установленные отборы в формах регламентных документов регламентированного и международного учета,
// открываемых из формы операций закрытия месяца.
//
// Параметры:
//	Форма     - ФормаКлиентскогоПриложения - форма списка документов
//	Список    - ДинамическийСписок - список документов в этой форме
//	Настройки - ПользовательскиеНастройкиКомпоновкиДанных - параметр процедуры ПередЗагрузкойПользовательскихНастроекНаСервере.
//
// Возвращаемое значение:
//	Булево - признак установки отборов; Истина, если форма открывалась из механизма закрытия месяца.
//
Функция ОчиститьРанееУстановленныеОтборыВФормеСпискаРегламентныхДокументов(Форма, Список, Настройки) Экспорт
	
	Если НЕ ЭтаФормаОткрытаИзФормыЗакрытияМесяца(Форма) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СохраняемыеНастройки = Новый Структура; // имена см. в УстановитьОтборыВФормеСпискаРегламентныхДокументов()
	СохраняемыеНастройки.Вставить("ЗакрытиеМесяца_Организация");
	СохраняемыеНастройки.Вставить("ЗакрытиеМесяца_НачалоПериода");
	СохраняемыеНастройки.Вставить("ЗакрытиеМесяца_КонецПериода");
	СохраняемыеНастройки.Вставить("ЗакрытиеМесяца_ТипОперации");
	
	Для Каждого КлючИЗначение Из СохраняемыеНастройки Цикл
		
		ОтборКомпоновки = Настройки.Элементы.Найти(КлючИЗначение.Ключ);
		
		Если ОтборКомпоновки <> Неопределено Тогда
			ОтборКомпоновки.Использование = Ложь;
			ОтборКомпоновки.ИдентификаторПользовательскойНастройки = "";
			ОтборКомпоновки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции


// Устанавливает отборы в формах списков регистров, открываемых из формы ошибок, найденных при проверке.
//
// Параметры:
//	Форма 					  - ФормаКлиентскогоПриложения - форма списка регистра
//	Список 					  - ДинамическийСписок - записи регистра в этой форме
//
// Возвращаемое значение:
//	Булево - признак установки отборов; Истина, если форма открывалась из механизма закрытия месяца
//
Функция УстановитьОтборыВФормеСпискаРегистра(Форма, Список) Экспорт
	
	Если НЕ ЭтаФормаОткрытаИзФормыЗакрытияМесяца(Форма) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Список.КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
	
	Форма.Параметры.Отбор.Очистить();
	
	ОтборДляРасшифровки = Форма.Параметры.ОтборДляРасшифровки;
	
	// Отбор по периоду.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Период",
		НачалоМесяца(ОтборДляРасшифровки.Период),
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный,
		СокрЛП(Новый УникальныйИдентификатор));
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Список.КомпоновщикНастроек.Настройки.Отбор,
		"Период",
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		КонецМесяца(ОтборДляРасшифровки.Период),
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный,
		СокрЛП(Новый УникальныйИдентификатор));
	
	// Отбор по остальным полям расшифровки.
	Для Каждого КлючИЗначение Из ОтборДляРасшифровки Цикл
		
		Если НРег(КлючИЗначение.Ключ) = НРег("Период") Тогда
			Продолжить; // этот отбор уже установлен
		ИначеЕсли Список.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.Элементы.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
			Продолжить; // нет такого поля в списке
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			КлючИЗначение.Ключ,
			КлючИЗначение.Значение,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный,
			СокрЛП(Новый УникальныйИдентификатор));
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти


#Область ОбщиеТекстыЗапросов


// Возвращает тексты запросов для получения таблицы изменений набора записей регистра накопления при его записи.
// Запросы составляются на основании метаданных регистра: измерений, ресурсов и реквизитов.
//
// Параметры:
//	МетаданныеРегистра - ОбъектМетаданных: РегистрНакопления - метаданные регистра, для которого составляется таблица изменений;
//
// Возвращаемое значение:
//	Структура
//		- ТекстВыборкиНачальныхДанных - Строка - запрос для выполнения в событии "ПередЗаписью" набора данных регистра накопления.
//			Формирует текущие записи регистра и сохраняет их во временную таблицу "НачальныеЗаписи";
//		- ТекстВыборкиТаблицыИзменений - Строка - запрос для получения итоговой таблицы изменений. Выполняется в событии "ПриЗаписи".
//			Составляется объединением таблицы НачальныеЗаписи и новой таблицы записей регистра. Выводятся только записи, по которым есть разницы (Сумма ресурсов не равна 0).
//
Функция ТекстыЗапросовДляПолученияТаблицыИзмененийРегистра(МетаданныеРегистра, Отбор, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Тестирование.ДополнительныеПараметрыФормированияЗапросаСравнения();
	КонецЕсли;
	
	ТаблицаРегистра = МетаданныеРегистра.ПолноеИмя();
	ЭтоРегистрБухгалтерии = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(МетаданныеРегистра) = "РегистрыБухгалтерии";
	Если Тестирование.РегистрыСоСлужебнымРегистратором().Найти(ТаблицаРегистра) <> Неопределено Тогда
		ДополнительныеПараметры.ИсключаемыеПоля.Вставить("Регистратор");
	КонецЕсли;
	
	Если ЭтоРегистрБухгалтерии Тогда
		
		ТаблицаРегистра = ТаблицаРегистра + ".ДвиженияССубконто(, , Регистратор = &Регистратор, , )";
		
	КонецЕсли;
	
	ТекстЗапросаВыборкиНачальныхЗаписей =
	"ВЫБРАТЬ
	|	&ВыборкаПолей
	|ПОМЕСТИТЬ #НачальныеЗаписи
	|ИЗ
	|	#ТаблицаРегистра КАК Записи
	|ГДЕ
	|	&УсловияОтбораПоРегистру
	|ИНДЕКСИРОВАТЬ ПО
	|	&ВыборкаИндексов";
	
	ТекстЗапросаВыборкиИзменений =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&ВыборкаПолейТаблицыИзменений
	|ПОМЕСТИТЬ #ТаблицаИзменений
	|ИЗ
	|	(ВЫБРАТЬ
	|		&ВыборкаПолейНачальныхЗаписей
	|	ИЗ
	|		#НачальныеЗаписи КАК НачальныеЗаписи
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&ВыборкаПолейНовыхЗаписей
	|	ИЗ
	|		#ТаблицаРегистра КАК Записи
	|	ГДЕ
	|		&УсловияОтбораПоРегистру) КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	&ВыборкаПолейГруппировки";
	
	ВыборкаПолей = Новый Массив;
	ВыборкаПолейТаблицыИзменений = Новый Массив;
	ВыборкаПолейНачальныхЗаписей = Новый Массив;
	ВыборкаПолейНовыхЗаписей = Новый Массив;
	ВыборкаПолейГруппировки = Новый Массив;
	ВыборкаПолейФильтра = Новый Массив;
	ВыборкаУсловийОтбораПоРегистру = Новый Массив;
	
	ПоляКоллекции = Тестирование.СтруктураПолейКоллекции(МетаданныеРегистра, ДополнительныеПараметры);
	МассивПолей = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПолей, ПоляКоллекции.Измерения, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПолей, ПоляКоллекции.Реквизиты, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПолей, ПоляКоллекции.Ресурсы, Истина);	
	МассивРесурсов = ПоляКоллекции.ЧисловыеПоля;
	МассивПолейИндексов = ПоляКоллекции.Измерения;
	
	Для каждого Поле Из МассивПолей Цикл
		
		ТекстПоля = "." + Поле + " КАК " + Поле;
		
		ВыборкаПолей.Добавить("Записи" + ТекстПоля);
		ВыборкаПолейТаблицыИзменений.Добавить("Таблица" + ТекстПоля); 
		ВыборкаПолейНачальныхЗаписей.Добавить("НачальныеЗаписи" + ТекстПоля);
		ВыборкаПолейНовыхЗаписей.Добавить("Записи" + ТекстПоля);
		ВыборкаПолейГруппировки.Добавить("Таблица." + Поле);
		
	КонецЦикла;
	
	Для каждого Ресурс Из МассивРесурсов Цикл
		
		ТекстПоля = "." + Ресурс + " КАК " + Ресурс;
		
		ВыборкаПолей.Добавить("Записи" + ТекстПоля);
		ВыборкаПолейТаблицыИзменений.Добавить("СУММА(Таблица." + Ресурс + ") КАК " + Ресурс); 
		ВыборкаПолейНачальныхЗаписей.Добавить("НачальныеЗаписи"+ТекстПоля);
		ВыборкаПолейНовыхЗаписей.Добавить("-Записи"+ТекстПоля);
		ВыборкаПолейФильтра.Добавить("СУММА(Таблица." + Ресурс + ") <> 0");
		
	КонецЦикла;
	
	Для каждого ЭлементОтбора Из Отбор Цикл
		Если ЭлементОтбора.Использование Тогда
			ВыборкаУсловийОтбораПоРегистру.Добавить("Записи." + ЭлементОтбора.Имя + " = " + "&" + ЭлементОтбора.Имя);
			ИндексМассива = МассивПолейИндексов.Найти(ЭлементОтбора.Имя);
			Если ИндексМассива <> Неопределено Тогда
				// удалим из индексов поле, по которому накладывается отбор
				МассивПолейИндексов.Удалить(ИндексМассива);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ВыборкаУсловийОтбораПоРегистру.Количество() = 0 Тогда
		ВыборкаУсловийОтбораПоРегистру.Добавить("ИСТИНА");
	КонецЕсли;
	
	Если ДополнительныеПараметры.ПроверятьКонтрольнуюСумму Тогда
		// Добавим проверку на контрольную сумму (на случай когда числовых ресурсов нет или они равны 0.
		ВыборкаПолейТаблицыИзменений.Добавить("СУММА(Таблица.КонтрольнаяСумма) КАК КонтрольнаяСумма");
		ВыборкаПолейНачальныхЗаписей.Добавить("1 КАК КонтрольнаяСумма");
		ВыборкаПолейНовыхЗаписей.Добавить("-1 КАК КонтрольнаяСумма");
		ВыборкаПолейФильтра.Добавить("СУММА(Таблица.КонтрольнаяСумма) <> 0");
	КонецЕсли;
	
	ТекстВыборкиПолей = СтрСоединить(ВыборкаПолей, "," + Символы.ПС + Символы.Таб);
	ТекстВыборкиПолейТаблицыИзменений = СтрСоединить(ВыборкаПолейТаблицыИзменений, "," + Символы.ПС + Символы.Таб);
	ТекстВыборкиПолейНачальныхЗаписей = СтрСоединить(ВыборкаПолейНачальныхЗаписей, "," + Символы.ПС + Символы.Таб + Символы.Таб);
	ТекстВыборкиПолейНовыхЗаписей = СтрСоединить(ВыборкаПолейНовыхЗаписей, "," + Символы.ПС + Символы.Таб + Символы.Таб);
	ТекстВыборкиПолейГруппировки = СтрСоединить(ВыборкаПолейГруппировки, "," + Символы.ПС + Символы.Таб);
	ТекстВыборкиПолейФильтра = СтрСоединить(ВыборкаПолейФильтра, Символы.ПС + Символы.Таб + "ИЛИ ");
	ТекстВыборкиПолейИндексов = СтрСоединить(МассивПолейИндексов, "," + Символы.ПС + Символы.Таб);
	
	ТекстЗапросаВыборкиНачальныхЗаписей = СтрЗаменить(ТекстЗапросаВыборкиНачальныхЗаписей, "&ВыборкаПолей", ТекстВыборкиПолей);
	ТекстЗапросаВыборкиНачальныхЗаписей = СтрЗаменить(ТекстЗапросаВыборкиНачальныхЗаписей, "#ТаблицаРегистра", ТаблицаРегистра);
	ТекстЗапросаВыборкиНачальныхЗаписей = СтрЗаменить(ТекстЗапросаВыборкиНачальныхЗаписей, "#НачальныеЗаписи", "НачальныеЗаписи"+МетаданныеРегистра.Имя);
	ТекстЗапросаВыборкиНачальныхЗаписей = СтрЗаменить(ТекстЗапросаВыборкиНачальныхЗаписей, "&УсловияОтбораПоРегистру",
		СтрСоединить(ВыборкаУсловийОтбораПоРегистру, Символы.ПС + Символы.Таб + "И "));
	ТекстЗапросаВыборкиНачальныхЗаписей = СтрЗаменить(ТекстЗапросаВыборкиНачальныхЗаписей, "&ВыборкаИндексов", ТекстВыборкиПолейИндексов);
	Если МассивПолейИндексов.Количество() = 0 Тогда
		ТекстЗапросаВыборкиНачальныхЗаписей = СтрЗаменить(ТекстЗапросаВыборкиНачальныхЗаписей, Символы.ПС + "ИНДЕКСИРОВАТЬ ПО" + Символы.ПС + Символы.Таб, "");
	КонецЕсли;
	
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "&ВыборкаПолейНачальныхЗаписей", ТекстВыборкиПолейНачальныхЗаписей);
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "&ВыборкаПолейНовыхЗаписей", ТекстВыборкиПолейНовыхЗаписей);
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "&ВыборкаПолейТаблицыИзменений", ТекстВыборкиПолейТаблицыИзменений);
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "&УсловияОтбораПоРегистру",
		СтрСоединить(ВыборкаУсловийОтбораПоРегистру, Символы.ПС + Символы.Таб + Символы.Таб + "И "));
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "#ТаблицаРегистра", ТаблицаРегистра);
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "#ТаблицаИзменений", "ТаблицаИзменений"+МетаданныеРегистра.Имя);
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "&ВыборкаПолейГруппировки", ТекстВыборкиПолейГруппировки);
	Если ЗначениеЗаполнено(ТекстВыборкиПолейФильтра) Тогда
		ТекстЗапросаВыборкиИзменений = ТекстЗапросаВыборкиИзменений + Символы.ПС + "ИМЕЮЩИЕ" + Символы.ПС + Символы.Таб + ТекстВыборкиПолейФильтра;
	КонецЕсли;
	
	ТекстЗапросаВыборкиИзменений = ТекстЗапросаВыборкиИзменений + Символы.ПС + ";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ #НачальныеЗаписи";
	
	ТекстЗапросаВыборкиИзменений = СтрЗаменить(ТекстЗапросаВыборкиИзменений, "#НачальныеЗаписи", "НачальныеЗаписи"+МетаданныеРегистра.Имя);
	
	Возврат Новый Структура("ТекстВыборкиНачальныхДанных, ТекстВыборкиТаблицыИзменений", ТекстЗапросаВыборкиНачальныхЗаписей, ТекстЗапросаВыборкиИзменений);
	
КонецФункции

#КонецОбласти

#Область ПредопределенныеТекстовыеДанные

// Возвращает текст по умолчанию для гиперссылки "Подробнее".
//
// Возвращаемое значение:
//	Строка - текст "Подробнее"
//
Функция ТекстПодробнееПоУмолчанию() Экспорт
	Возврат НСтр("ru='Подробнее'");
КонецФункции

// Возвращает имя события журнала регистрации для произвольного действия операции закрытия месяца.
//
// Параметры:
//	ДополнениеИмени - Строка - выполняемое действие.
//
// Возвращаемое значение:
//	Строка - имя события
//
Функция ИмяСобытияЖурналаРегистрации(ДополнениеИмени) Экспорт
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Закрытие месяца.%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		ДополнениеИмени);
	
КонецФункции

// Возвращает служебный символ, означающий что исключение было обработано в обработчике этапа закрытия месяца.
//
// Возвращаемое значение:
//	Строка - служебный символ
//
Функция СлужебныйСимвол_ИсключениеУжеОтработаноВЭтапеРасчета() Экспорт
	
	Возврат Символы.ПС + "#ИсключениеУжеЗафиксировано" + Символы.ПС;
	
КонецФункции

// Возвращает имя служебного свойства, передаваемого в параметры всех открываемых форм.
//
// Возвращаемое значение:
//	Строка - имя служебного свойства.
//
Функция ИмяСлужебногоСвойстваОткрываемыхФорм() Экспорт
	
	Возврат "ЗакрытиеМесяца";
	
КонецФункции

#КонецОбласти


#Область УстановкаБлокировкиФункционалаПриОбновленииИБ

// Проверяет возможность выполнения операции в зависимости от текущего состояния обновления ИБ.
// Если все входящие данные операции еще не обработаны, то операцию выполнять нельзя.
// В этом случае в журнал регистрации будет записана информация о необработанных данных и вызвано исключение.
//
// Параметры:
//	ВходящиеДанные 		  - Соответствие
//							  Ключ - Строка, ОбъектМетаданныхКонфигурации - входящие данные, используемые  операцией
//							  Значение - см. ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки, параметр Отбор
//	ПредставлениеОперации - Строка - пользовательское представление выполняемой операции.
//
Процедура ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(ВходящиеДанные, ПредставлениеОперации) Экспорт
	
	Если НеПроверятьБлокировкуВходящихДанныхПриОбновленииИБ() Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
		Возврат; // обновление ИБ завершено полностью
	КонецЕсли;
	
	ТекстОшибкиДляИсключение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1: выполнение невозможно - не завершено обновление ИБ.
			|Подробнее см. в Журнале регистрации.'"),
		ПредставлениеОперации);
	ТекстОшибкиДляЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1: выполнение невозможно - не завершено обновление ИБ.
		    |Корректное выполнение операции будет возможно после того,
			|когда будут успешно завершены все обработчики обновление исходных данных для этой операции.'"),
		ПредставлениеОперации);
	
	ДанныеСОтборомПоСсылкам = Новый Массив;
	ОтборПоСсылкам 			= Новый Массив;
	
	ДанныеЗаблокированы = Ложь;
	
	УстановитьПривилегированныйРежим(Истина); // у текущего пользователя может не быть прав на все входящие данные, но проверить надо все
	
	Для Каждого ОписаниеДанных Из ВходящиеДанные Цикл
		
		ОбъектМетаданных = ОписаниеДанных.Ключ;
		Если ТипЗнч(ОбъектМетаданных) = Тип("Строка") Тогда
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ОбъектМетаданных);
		КонецЕсли;
		
		Отбор = ?(ТипЗнч(ОписаниеДанных.Значение) = Тип("Булево"), Неопределено, ОписаниеДанных.Значение);
		
		Если (Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных)
		 И ОбъектМетаданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый)
		 ИЛИ ТипЗнч(Отбор) = Тип("Структура") Тогда
			// Проверку независимых регистров сведений выполняем по одному,
			// т.к. для них нет единообразных отборов (по регистратору).
			// Аналогично и для других типов метаданных, если для них задан "сложный" отбор в виде структуры.
			Если ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, ОбъектМетаданных, Отбор) Тогда
				
				ДанныеЗаблокированы = Истина;
				
				ЗаписьЖурналаРегистрации(
					ПредставлениеОперации,
					УровеньЖурналаРегистрации.Ошибка,
					ОбъектМетаданных,
					Отбор,
					ТекстОшибкиДляЖурнала);
				
			КонецЕсли;
		Иначе
			ДанныеСОтборомПоСсылкам.Добавить(ОбъектМетаданных.ПолноеИмя());
			Если ТипЗнч(Отбор) = Тип("Массив") Тогда
				// Добавим отбор-массив этого объекта метаданных в общий массив отборов
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтборПоСсылкам, Отбор, Истина);
			ИначеЕсли Отбор <> Неопределено Тогда
				// Добавим отбор-ссылку этого объекта метаданных в общий массив отборов
				Если ОтборПоСсылкам.Найти(Отбор) = Неопределено Тогда
					ОтборПоСсылкам.Добавить(Отбор);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеСОтборомПоСсылкам.Количество() > 0 Тогда
		
		Если ОтборПоСсылкам.Количество() = 0 Тогда
			ОтборПоСсылкам = Неопределено; // без отбора
		КонецЕсли;
		
		// Проверку всех объектов, для которых возможен отбор по ссылке/регистратору, выполним за один вызов.
		Если ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, ДанныеСОтборомПоСсылкам, ОтборПоСсылкам) Тогда
			
			ДанныеЗаблокированы = Истина;
			
			ТекстОшибкиДляЖурнала = ТекстОшибкиДляЖурнала + "
				|
				|" + НСтр("ru='Необходимо дождаться завершения обработки всех данных следующих типов:'");
			
			Для Каждого ИмяОбъектаМетаданных Из ДанныеСОтборомПоСсылкам Цикл
				// Перечислим имена объектов метаданных, среди которые есть еще не обработанные данные.
				ТекстОшибкиДляЖурнала = ТекстОшибкиДляЖурнала + "
					|- " + ИмяОбъектаМетаданных;
			КонецЦикла;
			
			ЗаписьЖурналаРегистрации(
				ПредставлениеОперации,
				УровеньЖурналаРегистрации.Ошибка,
				,
				ОтборПоСсылкам,
				ТекстОшибкиДляЖурнала);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЗаблокированы Тогда
		// Нельзя выполнять операцию - не завершено обновление всех ее входящих данных.
		ВызватьИсключение ТекстОшибкиДляИсключение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область МетодыФоновыхЗаданий

// Методы, содержащиеся в данной области, используются в качестве параметра
// платформенного механизма фоновых заданий ФоновыеЗадания.Выполнить()

// Вспомогательный метод формы обработки ОперацииЗакрытияМесяца.
// Выполняет заполнение состояния этапов в фоне.
//
Процедура ЗаполнитьСостоянияЭтаповВФоновомЗадании(ПараметрыЗапуска) Экспорт
	
	Обработки.ОперацииЗакрытияМесяца.ЗаполнитьСостоянияЭтапов(ПараметрыЗапуска);
	
КонецПроцедуры

// Вспомогательный метод формы обработки ОперацииЗакрытияМесяца.
// Выполняет расчет этапов в фоне.
//
Процедура ВыполнитьРасчетЭтаповВФоновомЗадании(ПараметрыЗапуска) Экспорт
	
	Обработки.ОперацииЗакрытияМесяца.ВыполнитьРасчетЭтапов(ПараметрыЗапуска);
	
КонецПроцедуры

// Вспомогательный метод регламентного задания "ЗакрытиеМесяца".
// Выполняет регламентное задание "ЗакрытиеМесяца" в фоне.
//
Процедура ВыполнитьЗакрытиеМесяцаВФоновомЗадании(ОписаниеЗадания, ИдентификаторРасчета) Экспорт
	
	ТекущийПериод = ОписаниеЗадания.ПервыйПериод;
	
	// Последовательное закрытие месяцев.
	Пока ТекущийПериод <= ОписаниеЗадания.ПоследнийПериод Цикл
		
		ЗакрыватьОУ = (ОписаниеЗадания.ЗакрываемыйПериодОУ = ТекущийПериод);
		ЗакрыватьРУ = (ОписаниеЗадания.ЗакрываемыйПериодРУ = ТекущийПериод);
		ЗакрыватьМУ = (ОписаниеЗадания.ЗакрываемыйПериодМУ = ТекущийПериод);
		
		Если НЕ ЗакрыватьОУ И НЕ ЗакрыватьРУ И НЕ ЗакрыватьМУ Тогда
			ТекущийПериод = ДобавитьМесяц(ТекущийПериод, 1);
			Продолжить;
		КонецЕсли;
		
		РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.ОбновитьПризнакЗапускаРасчета(
			ОписаниеЗадания.Организация,
			ИдентификаторРасчета,
			НСтр("ru='регламентное задание ""Закрытие месяца""'"),
			ТекущийПериод);
		
		// Заполним состояния этапов.
		СтруктураДанных = Обработки.ОперацииЗакрытияМесяца.ИнициализироватьСтруктуруДанныхДляЗаполненияСостоянияЭтапов(
			ТекущийПериод,
			ОписаниеЗадания.Организация);
		
		ПараметрыЗапускаОбновленияСостояния =
			Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыЗапускаДляЗаполненияСостоянияЭтапов(СтруктураДанных);
		
		ПараметрыЗапускаОбновленияСостояния.ПроверятьДатуЗапрета 	 = Истина;
		ПараметрыЗапускаОбновленияСостояния.ОбновлятьСписокПроверок  = Истина;
		ПараметрыЗапускаОбновленияСостояния.ВыполнятьПроверкиДоЭтапа = Истина;
		
		Обработки.ОперацииЗакрытияМесяца.ЗаполнитьСостоянияЭтапов(ПараметрыЗапускаОбновленияСостояния);
		
		ТекущийПериод = ДобавитьМесяц(ТекущийПериод, 1);
		
		Если СтруктураДанных.ИзмененияЗапрещены Тогда
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ЗакрытиеМесяца'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.ОбщиеМодули.ЗакрытиеМесяцаСервер,
				,
				СтруктураДанных.ПоясненияКЗапретуИзменений);
			
			Продолжить;
			
		КонецЕсли;
		
		// Последовательно выполним все этапы.
		Для Каждого ТекущаяСтрока Из СтруктураДанных.ТаблицаЭтапы Цикл
			
			Если ТекущаяСтрока.ВыполняетсяВручную Тогда
				Продолжить;
			КонецЕсли;
			
			Если (НЕ ЗакрыватьОУ И ТекущаяСтрока.ОперативныйУчет)
			 ИЛИ (НЕ ЗакрыватьРУ И ТекущаяСтрока.РегламентированныйУчет)
			 ИЛИ (НЕ ЗакрыватьМУ И ТекущаяСтрока.МеждународныйУчет) Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыЗапускаРасчета = Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыЗапускаДляРасчетаЭтапов(
				СтруктураДанных,
				ТекущаяСтрока.Код,
				СтруктураДанных.ТаблицаЭтапы[СтруктураДанных.ТаблицаЭтапы.Количество()-1].Код);
			
			Обработки.ОперацииЗакрытияМесяца.ВыполнитьРасчетЭтапов(ПараметрыЗапускаРасчета);
			
		КонецЦикла;
		
	КонецЦикла;
	
	РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.УстановитьПризнакОкончанияРасчета(ИдентификаторРасчета);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРегламентныхЗаданий

// Метод регламентного задания "РасчетКурсовыхРазниц".
//
Процедура ВыполнитьПереоценку() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.РасчетКурсовыхРазниц);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют") Тогда
		Возврат;
	КонецЕсли;
	
	Документы.РасчетКурсовыхРазниц.ВыполнитьПереоценку(ТекущаяДатаСеанса());
	
КонецПроцедуры

// Метод регламентного задания "ЗакрытиеМесяца".
//
Процедура ВыполнитьЗакрытиеМесяца(Организация = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЗакрытиеМесяца);
	
	Обработки.ОперацииЗакрытияМесяца.ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ();
	
	ОписаниеЗадания = РегистрыСведений.РегламентныеЗаданияЗакрытияМесяца.ПолучитьРегламентноеЗаданиеПоОрганизации(Организация);
	
	Если НЕ ОписаниеЗадания.НастройкаСуществует Тогда
		ВызватьИсключение НСтр("ru='Не задана настройка регламентного задания закрытия месяца.'");
	КонецЕсли;
	
	// Закрываемый период.
	Если ЗначениеЗаполнено(ОписаниеЗадания.ЗакрываемыйПериодМУ) Тогда 
		ПервыйПериод = ОписаниеЗадания.ЗакрываемыйПериодМУ;
	ИначеЕсли ЗначениеЗаполнено(ОписаниеЗадания.ЗакрываемыйПериодРУ) Тогда 
		ПервыйПериод = ОписаниеЗадания.ЗакрываемыйПериодРУ;
	ИначеЕсли ЗначениеЗаполнено(ОписаниеЗадания.ЗакрываемыйПериодОУ) Тогда 
		ПервыйПериод = ОписаниеЗадания.ЗакрываемыйПериодОУ;
	Иначе
		ВызватьИсключение НСтр("ru='Некорректная настройка регламентного задания закрытия месяца.'");
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(ОписаниеЗадания.ЗакрываемыйПериодМУ) И ЗначениеЗаполнено(ОписаниеЗадания.ЗакрываемыйПериодРУ)
	 		И ОписаниеЗадания.ЗакрываемыйПериодМУ > ОписаниеЗадания.ЗакрываемыйПериодРУ)
	 ИЛИ (ЗначениеЗаполнено(ОписаниеЗадания.ЗакрываемыйПериодРУ)
	 		И ОписаниеЗадания.ЗакрываемыйПериодРУ > ОписаниеЗадания.ЗакрываемыйПериодОУ) Тогда
		ВызватьИсключение НСтр("ru='Некорректная настройка регламентного задания закрытия месяца.'");
	КонецЕсли;
	
	ОписаниеЗадания.Вставить("ПервыйПериод", 	ПервыйПериод);
	ОписаниеЗадания.Вставить("ПоследнийПериод", ОписаниеЗадания.ЗакрываемыйПериодОУ);
	
	// Проверим возможность запуска расчета.
	РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.ОбновитьСостояниеАктивныхРасчетов();
	
	ИдентификаторРасчета = Новый УникальныйИдентификатор; // пишется в ключ фонового задания и в регистр выполнения операций
	
	АктивныеРасчеты = РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.УстановитьПризнакЗапускаРасчета(
		ОписаниеЗадания.Организация,
		ИдентификаторРасчета,
		НСтр("ru='регламентное задание ""Закрытие месяца""'"),
		ПервыйПериод);
	
	Если АктивныеРасчеты.ЕстьАктивныеРасчеты Тогда
		ВызватьИсключение АктивныеРасчеты.ТекстОшибки;
	КонецЕсли;
	
	// Запустим расчет в фоновом задании.
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ОписаниеЗадания);
	ПараметрыЭкспортнойПроцедуры.Добавить(ИдентификаторРасчета);
	
	ФоновыеЗадания.Выполнить(
		"ЗакрытиеМесяцаСервер.ВыполнитьЗакрытиеМесяцаВФоновомЗадании",
		ПараметрыЭкспортнойПроцедуры,
		ИмяФоновогоЗадания(ИдентификаторРасчета),
		НСтр("ru='Регламентное задание закрытия месяца'"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПодписокНаСобытия

// Вызывается из подписки на события ПередЗаписьюКурсовВалют.
//
// Параметры:
//	КурсыВалют - РегистрСведенийНаборЗаписей.КурсыВалют - записываемый набор
//	Движения   - КоллекцияДвижений - Коллекция движения текущего регистратора.
//	Отказ 	   - Булево - Признак отказа от проведения документа.
//
Процедура СчитатьКурсыВалютПередЗаписью(КурсыВалют, Движения, Отказ) Экспорт
	
	// Проверка на ОбменДанными.Загрузка исключена специально, поскольку данный механизм отрабатывает
	// при получении данных в РИБ.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Курсы.Период    КАК Период,
	|	Курсы.Валюта    КАК Валюта,
	|	Курсы.Курс      КАК Курс,
	|	Курсы.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалютПередЗаписью
	|ИЗ
	|	РегистрСведений.КурсыВалют КАК Курсы
	|ГДЕ
	|	Курсы.Период = &Период";
	
	КурсыВалют.ДополнительныеСвойства.Вставить("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц);
	
	Запрос.МенеджерВременныхТаблиц = КурсыВалют.ДополнительныеСвойства.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Период", КурсыВалют.Отбор.Период.Значение);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Вызывается из подписки на события ПроверитьНеобходимостьПереоценки.
// Если изменены курсы валют, то необходимо переоценить денежные и валютные средства, и пересчитать взаиморасчеты.
//
// Параметры:
//	КурсыВалют - РегистрСведенийНаборЗаписей.КурсыВалют - записываемый набор
//	Движения   - КоллекцияДвижений - Коллекция движения текущего регистратора.
//	Отказ 	   - Булево - Признак отказа от проведения документа.
//
Процедура ПроверитьНеобходимостьПереоценки(КурсыВалют, Движения, Отказ) Экспорт
	
	// Проверка на ОбменДанными.Загрузка не выполняется поскольку данный механизм отрабатывает при получении данных в РИБ.
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбменДаннымиСервер.ЭтоПодчиненныйУзелРИБ() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = КурсыВалют.ДополнительныеСвойства.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Период", КурсыВалют.Отбор.Период.Значение);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ) КАК Месяц,
	|	Т.Валюта КАК Валюта
	|ПОМЕСТИТЬ ВТИзмененныеКурсы
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.Период КАК Период,
	|		Т.Валюта КАК Валюта
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Т.Период КАК Период,
	|			Т.Валюта КАК Валюта,
	|			Т.Курс КАК Курс,
	|			Т.Кратность КАК Кратность
	|		ИЗ
	|			РегистрСведений.КурсыВалют КАК Т
	|		ГДЕ
	|			Т.Период = &Период
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			Т.Период,
	|			Т.Валюта,
	|			-Т.Курс,
	|			-Т.Кратность
	|		ИЗ
	|			КурсыВалютПередЗаписью КАК Т) КАК Т
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Т.Период,
	|		Т.Валюта
	|	
	|	ИМЕЮЩИЕ
	|		(СУММА(Т.Курс) <> 0
	|			ИЛИ СУММА(Т.Кратность) <> 0)) КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТИзмененныеКурсы.Месяц КАК Месяц
	|ИЗ
	|	ВТИзмененныеКурсы КАК ВТИзмененныеКурсы";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат; // курсы не изменились.
	КонецЕсли;
	
	// Создадим задания к закрытию месяца.
	Запрос.УстановитьПараметр("МассивОрганизаций", Справочники.Организации.ДоступныеОрганизации());
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Ссылка КАК Ссылка,
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(Политики.Период, МЕСЯЦ)) КАК НачалоВеденияУчета
	|ПОМЕСТИТЬ ВТОрганизации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК Политики
	|		ПО (Политики.Организация = Организации.Ссылка)
	|ГДЕ
	|	Организации.Ссылка В(&МассивОрганизаций)
	|
	|СГРУППИРОВАТЬ ПО
	|	Организации.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Ссылка КАК Организация,
	|	ИзмененныеКурсы.Месяц КАК Месяц,
	|	ИзмененныеКурсы.Валюта КАК Валюта
	|ПОМЕСТИТЬ ВТИзменения
	|ИЗ
	|	ВТОрганизации КАК Организации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИзмененныеКурсы КАК ИзмененныеКурсы
	|		ПО Организации.НачалоВеденияУчета <= ИзмененныеКурсы.Месяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Месяц КАК Месяц,
	|	Т.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ПереоценкаДенежныхСредствИФинансовыхИнструментов) КАК Операция
	|ИЗ
	|	ВТИзменения КАК Т
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц,
	|	Организация";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат; // нет данных для формирования заданий к расчету
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьЗаписиРегистраПоДаннымВыборки(Выборка);
	
	// Создадим задания к распределению расчетов.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Месяц КАК Месяц,
	|	Т.Валюта КАК Валюта
	|ИЗ
	|	ВТИзменения КАК Т
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""ЗаданияКРаспределениюРасчетовСКлиентами""      КАК ИмяРегистраЗаданий,
	|	Клиенты.АналитикаУчетаПоПартнерам                КАК АналитикаУчетаПоПартнерам,
	|	Клиенты.АналитикаУчетаПоПартнерам.Организация    КАК Организация,
	|	Клиенты.ЗаказКлиента                             КАК ОбъектРасчетов,
	|	&НачалоМесяца                                    КАК Месяц
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Клиенты
	|ГДЕ
	|	Клиенты.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И Клиенты.Валюта = &Валюта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""ЗаданияКРаспределениюРасчетовСПоставщиками""      КАК ИмяРегистраЗаданий,
	|	Поставщики.АналитикаУчетаПоПартнерам                КАК АналитикаУчетаПоПартнерам,
	|	Поставщики.АналитикаУчетаПоПартнерам.Организация    КАК Организация,
	|	Поставщики.ЗаказПоставщику                          КАК ОбъектРасчетов,
	|	&НачалоМесяца                                       КАК Месяц
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Поставщики
	|ГДЕ
	|	Поставщики.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И Поставщики.Валюта = &Валюта";
	
	Пока Выборка.Следующий() Цикл
		
		Запрос.УстановитьПараметр("Валюта", 	  Выборка.Валюта);
		Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Выборка.Месяц));
		Запрос.УстановитьПараметр("КонецМесяца",  КонецМесяца(Выборка.Месяц));
		
		ВыборкаРасчетов = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаРасчетов.Следующий() Цикл
			Задания = РегистрыСведений[ВыборкаРасчетов.ИмяРегистраЗаданий].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Задания, ВыборкаРасчетов);
			Задания.НомерЗадания = РегистрыСведений[ВыборкаРасчетов.ИмяРегистраЗаданий].ПолучитьНомерЗадания();
			Задания.Записать();
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Вызывается из подписки на события "ОчиститьЗаданияПередУдалениемДокумента".
// Производится очистка измерения "Документ" по регистрам "Задания...",
// где в текущих записях используется удаляемый документ.
//
// Параметры:
//  Источник - ДокументСсылка - Ссылка на удаляемый документ.
//	Отказ 	 - Булево - Признак необходимости прерывания удаления объекта.
//
Процедура ОчиститьЗаданияПередУдалениемДокумента(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Задания.ИмяРегистра               КАК ИмяРегистра,
	|	Задания.Месяц                     КАК Месяц,
	|	Задания.НомерЗадания              КАК НомерЗадания,
	|	Задания.Документ                  КАК Документ,
	|	Задания.Операция                  КАК Операция,
	|	Задания.Организация               КАК Организация,
	|	Задания.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Задания.ОбъектРасчетов            КАК ОбъектРасчетов,
	|	Задания.НомерПакета               КАК НомерПакета,
	|	Задания.ОбъектУчета               КАК ОбъектУчета,
	|	Задания.ОсновноеСредство          КАК ОсновноеСредство,
	|	Задания.Пропускать                КАК ПропускатьПриЗаписи
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		""ЗаданияКРасчетуСебестоимости"" КАК ИмяРегистра,
	|		
	|		Задания.Месяц        КАК Месяц,
	|		Задания.НомерЗадания КАК НомерЗадания,
	|		НЕОПРЕДЕЛЕНО         КАК Документ,
	|		НЕОПРЕДЕЛЕНО         КАК Операция,
	|		Задания.Организация  КАК Организация,
	|		НЕОПРЕДЕЛЕНО         КАК АналитикаУчетаПоПартнерам,
	|		НЕОПРЕДЕЛЕНО         КАК ОбъектРасчетов,
	|		НЕОПРЕДЕЛЕНО         КАК НомерПакета,
	|		НЕОПРЕДЕЛЕНО         КАК ОбъектУчета,
	|		НЕОПРЕДЕЛЕНО         КАК ОсновноеСредство,
	|		ВЫБОР КОГДА НЕ Дубли.Документ ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК            Пропускать
	|	ИЗ
	|		РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Задания
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Дубли
	|		ПО Задания.Месяц = Дубли.Месяц
	|			И Задания.НомерЗадания = Дубли.НомерЗадания
	|			И Задания.Организация = Дубли.Организация
	|			И НЕОПРЕДЕЛЕНО = Дубли.Документ
	|	ГДЕ
	|		Задания.Документ = &Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		""ЗаданияКЗакрытиюМесяца"" КАК ИмяРегистра,
	|		
	|		Задания.Месяц        КАК Месяц,
	|		Задания.НомерЗадания КАК НомерЗадания,
	|		НЕОПРЕДЕЛЕНО         КАК Документ,
	|		Задания.Операция     КАК Операция,
	|		Задания.Организация  КАК Организация,
	|		НЕОПРЕДЕЛЕНО         КАК АналитикаУчетаПоПартнерам,
	|		НЕОПРЕДЕЛЕНО         КАК ОбъектРасчетов,
	|		НЕОПРЕДЕЛЕНО         КАК НомерПакета,
	|		НЕОПРЕДЕЛЕНО         КАК ОбъектУчета,
	|		НЕОПРЕДЕЛЕНО         КАК ОсновноеСредство,
	|		ВЫБОР КОГДА НЕ Дубли.Документ ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК            Пропускать
	|	ИЗ
	|		РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Задания
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Дубли
	|		ПО Задания.Месяц = Дубли.Месяц
	|			И Задания.НомерЗадания = Дубли.НомерЗадания
	|			И НЕОПРЕДЕЛЕНО = Дубли.Документ
	|			И Задания.Операция = Дубли.Операция
	|			И Задания.Организация = Дубли.Организация
	|	ГДЕ
	|		Задания.Документ = &Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		""ЗаданияКРаспределениюРасчетовСКлиентами"" КАК ИмяРегистра,
	|		
	|		Задания.Месяц                     КАК Месяц,
	|		Задания.НомерЗадания              КАК НомерЗадания,
	|		НЕОПРЕДЕЛЕНО                      КАК Документ,
	|		НЕОПРЕДЕЛЕНО                      КАК Операция,
	|		Задания.Организация              КАК Организация,
	|		Задания.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Задания.ОбъектРасчетов            КАК ОбъектРасчетов,
	|		НЕОПРЕДЕЛЕНО                      КАК НомерПакета,
	|		НЕОПРЕДЕЛЕНО                      КАК ОбъектУчета,
	|		НЕОПРЕДЕЛЕНО                      КАК ОсновноеСредство,
	|		ВЫБОР КОГДА Задания.ОбъектРасчетов = &Ссылка ИЛИ НЕ Дубли.Документ ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ                             КАК Пропускать
	|	ИЗ
	|		РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами КАК Задания
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами КАК Дубли
	|		ПО Задания.Месяц = Дубли.Месяц
	|			И Задания.НомерЗадания = Дубли.НомерЗадания
	|			И НЕОПРЕДЕЛЕНО = Дубли.Документ
	|			И Задания.АналитикаУчетаПоПартнерам = Дубли.АналитикаУчетаПоПартнерам
	|			И Задания.Организация = Дубли.Организация
	|			И Задания.ОбъектРасчетов = Дубли.ОбъектРасчетов
	|	ГДЕ
	|		Задания.Документ = &Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		""ЗаданияКРаспределениюРасчетовСПоставщиками"" КАК ИмяРегистра,
	|		
	|		Задания.Месяц                     КАК Месяц,
	|		Задания.НомерЗадания              КАК НомерЗадания,
	|		НЕОПРЕДЕЛЕНО                      КАК Документ,
	|		НЕОПРЕДЕЛЕНО                      КАК Операция,
	|		Задания.Организация               КАК Организация,
	|		Задания.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Задания.ОбъектРасчетов            КАК ОбъектРасчетов,
	|		НЕОПРЕДЕЛЕНО                      КАК НомерПакета,
	|		НЕОПРЕДЕЛЕНО                      КАК ОбъектУчета,
	|		НЕОПРЕДЕЛЕНО                      КАК ОсновноеСредство,
	|		ВЫБОР КОГДА Задания.ОбъектРасчетов = &Ссылка ИЛИ НЕ Дубли.Документ ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ                             КАК Пропускать
	|	ИЗ
	|		РегистрСведений.ЗаданияКРаспределениюРасчетовСПоставщиками КАК Задания
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРаспределениюРасчетовСПоставщиками КАК Дубли
	|		ПО Задания.Месяц = Дубли.Месяц
	|			И Задания.НомерЗадания = Дубли.НомерЗадания
	|			И НЕОПРЕДЕЛЕНО = Дубли.Документ
	|			И Задания.АналитикаУчетаПоПартнерам = Дубли.АналитикаУчетаПоПартнерам
	|			И Задания.Организация = Дубли.Организация
	|			И Задания.ОбъектРасчетов = Дубли.ОбъектРасчетов
	|	ГДЕ
	|		Задания.Документ = &Ссылка
	|	) КАК Задания
	|ИТОГИ ПО
	|	Задания.ИмяРегистра
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	ВыборкаЗаданий = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЗаданий.Следующий() Цикл
		ЗаданияКОчистке = РегистрыСведений[ВыборкаЗаданий.ИмяРегистра].СоздатьНаборЗаписей();
		ЗаданияКОчистке.Отбор.Документ.Установить(Источник.Ссылка);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(ЗаданияКОчистке, Истина);
		
		ЗаданияКЗаписи = РегистрыСведений[ВыборкаЗаданий.ИмяРегистра].СоздатьНаборЗаписей();
		ВыборкаЗаписей = ВыборкаЗаданий.Выбрать();
		Пока ВыборкаЗаписей.Следующий() Цикл 
			Если Не ВыборкаЗаписей.ПропускатьПриЗаписи Тогда
				КЗаписи = ЗаданияКЗаписи.Добавить();
				ЗаполнитьЗначенияСвойств(КЗаписи, ВыборкаЗаписей);
			КонецЕсли;
		КонецЦикла;
		Попытка
			Если ЗаданияКЗаписи.Количество() <> 0 Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(ЗаданияКЗаписи, Ложь);
			КонецЕсли;
		Исключение
			Отказ = Истина;
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Удаление помеченных объектов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.ОбщиеМодули.ЗакрытиеМесяцаСервер,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОписаниеПроверокСостоянияСистемы

// Заполняет группы проверок, выполняемых в рамках закрытия месяца.
//
// Параметры:
//	ТаблицаГруппПроверок - Таблица значений - см. АудитСостоянияСистемыПереопределяемый.ЗаполнитьГруппыПроверокДляРегистрации().
//
Процедура ЗаполнитьГруппыПроверокДляРегистрации(ТаблицаГруппПроверок) Экспорт
	
	ОписаниеГруппыПроверок = ТаблицаГруппПроверок.Добавить();
	ОписаниеГруппыПроверок.ИдентификаторРодителя = "";
	ОписаниеГруппыПроверок.Наименование = НСтр("ru='Закрытие месяца'");
	ОписаниеГруппыПроверок.КонтекстВыполнения = Перечисления.ОперацииЗакрытияМесяца.ПустаяСсылка();
	ОписаниеГруппыПроверок.Идентификатор = "ЗакрытиеМесяца";
	
	ТаблицаЭтапов = Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца();
	
	Для Каждого ТекущаяСтрока Из ТаблицаЭтапов Цикл
		
		ОписаниеГруппыПроверок = ТаблицаГруппПроверок.Добавить();
		ОписаниеГруппыПроверок.ИдентификаторРодителя = "ЗакрытиеМесяца";
		ОписаниеГруппыПроверок.Наименование = ТекущаяСтрока.Наименование;
		ОписаниеГруппыПроверок.КонтекстВыполнения = ТекущаяСтрока.Код;
		ОписаниеГруппыПроверок.Идентификатор = "ГруппаПроверокЭтапаЗакрытияМесяца";
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет проверки, выполняемые в рамках закрытия месяца.
//
// Параметры:
//	ТаблицаПроверок - Таблица значений - см. АудитСостоянияСистемыПереопределяемый.ЗаполнитьПроверкиДляРегистрации().
//
Процедура ЗаполнитьПроверкиДляРегистрации(ТаблицаПроверок) Экспорт
	
	// Заполним проверки операций закрытия месяца.
	РасчетСебестоимостиКорректировкаСтоимости.ОписаниеПроверок_РасчетПартийИСебестоимости(ТаблицаПроверок);
	ОписаниеПроверок_ИсправлениеОшибокВИсходныхДанных(ТаблицаПроверок);
	ОписаниеПроверок_ИсправлениеОтрицательныхОстатковТоваровОрганизаций(ТаблицаПроверок);
	ОписаниеПроверок_РаспределениеРасходовБудущихПериодов(ТаблицаПроверок);
	ОписаниеПроверок_ОформлениеПередачТоваров(ТаблицаПроверок);
	ОписаниеПроверок_ОформлениеОстатковТоваровКПередаче(ТаблицаПроверок);
	ОписаниеПроверок_ОформлениеВыкупаТоваров(ТаблицаПроверок);
	ОписаниеПроверок_ОформлениеОтчетовПоКомиссииМеждуОрганизациями(ТаблицаПроверок);
	ОписаниеПроверок_ОформлениеОтчетовКомитентамОСписании(ТаблицаПроверок);
	ОписаниеПроверок_ОформлениеДокументовРаспределенияРасходовПоНаправлениямДеятельности(ТаблицаПроверок);
	УчетНДСРФ.ОписаниеПроверок_ФормированиеСводныхСправокНДС(ТаблицаПроверок);
	УчетНДСРФ.ОписаниеПроверок_ФормированиеДвиженийПоНДС(ТаблицаПроверок);
	ОписаниеПроверок_РаспределениеРасходовПоНаправлениямДеятельности(ТаблицаПроверок);
	ОписаниеПроверок_РаспределениеДоходовПоНаправлениямДеятельности(ТаблицаПроверок);
	ОписаниеПроверок_ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов(ТаблицаПроверок);
	
	// Также создадим служебные контекстные проверки,
	// к которым можно записывать сообщения о проблемах, диагностированных при выполнении расчета.
	Для Каждого МетаЗначение Из Метаданные.Перечисления.ОперацииЗакрытияМесяца.ЗначенияПеречисления Цикл
		
		ОписаниеПроверки = ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
			ИдентификаторСлужебнойПроверкиЭтапа(Перечисления.ОперацииЗакрытияМесяца[МетаЗначение.Имя]),
			Перечисления.ОперацииЗакрытияМесяца[МетаЗначение.Имя],
			Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ВоВремяРасчета,
			"");
		ОписаниеПроверки.ВыполняетсяТолькоВКонтексте = Истина;
		
		ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Проблемы, диагностированные при выполнении операции ""%1""'"),
				МетаЗначение.Синоним),
			НСтр("ru='Служебная контекстная проверка для регистрации проблем, диагностированных в ходе расчета.'"));
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает служебную проверку этапа закрытия месяца.
// К таким проверкам можно записывать сообщения о проблемах, диагностированных при выполнении расчета.
//
// Параметры:
//	ЭтапРасчета 				- ПеречислениеСсылка.ОперацииЗакрытияМесяца - этап закрытия месяца
//	ВыдаватьОшибкуПриОтсутствии - Булево - выдавать ошибку если служебная проверка этапа не найдена.
//
// Возвращаемое значение:
//	СправочникСсылка.ПроверкиСостоянияСистемы - служебная проверка этапа закрытия месяца.
//
Функция СлужебнаяПроверкаЭтапа(ЭтапРасчета, ВыдаватьОшибкуПриОтсутствии = Истина) Экспорт
	
	Проверка = АудитСостоянияСистемы.НайтиПроверкуПоКлючевымПолям(
		ЭтапРасчета,
		ИдентификаторСлужебнойПроверкиЭтапа(ЭтапРасчета));
	
	Если НЕ ЗначениеЗаполнено(Проверка) И ВыдаватьОшибкуПриОтсутствии Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не найдена служебная контекстная проверка для операции ""%1""'"),
			СокрЛП(ЭтапРасчета));
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Возврат Проверка;
	
КонецФункции

// Возвращает идентификатор служебной проверки этапа закрытия месяца.
//
// Параметры:
//	ЭтапРасчета - ПеречислениеСсылка.ОперацииЗакрытияМесяца - этап закрытия месяца.
//
// Возвращаемое значение:
//	Строка - идентификатор служебной проверки.
//
Функция ИдентификаторСлужебнойПроверкиЭтапа(ЭтапРасчета)
	
	Идентификатор =
		"СлужебнаяКонтекстнаяПоОрганизациямПоПериодам_"
		+ ОбщегоНазначения.ИмяЗначенияПеречисления(ЭтапРасчета);
	
	Возврат Идентификатор;
	
КонецФункции

#КонецОбласти

#Область ОписаниеПараметровОперацийЗакрытияМесяца

// Формирует описание группа технологических параметров механизма закрытия месяца.
//
Функция ОписаниеГруппПараметровОперацииЗакрытияМесяца() Экспорт
	
	ОписаниеГруппПараметров = Константы.НастройкиЗакрытияМесяца.СоздатьМенеджерЗначения().ИнициализироватьОписаниеГруппПараметровОперации();
	РежимОтладки 			= ОбщегоНазначенияКлиентСервер.РежимОтладки();
	
	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя 			= "РегистрацияОшибок";
	ОписаниеГруппы.Наименование = НСтр("ru='Регистрация ошибок'");
	ОписаниеГруппы.Описание 	=
		НСтр("ru='Параметры, влияющие на регистрацию ошибок при расчете этапов закрытия месяца.'");
	
	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя 			= "Отладка";
	ОписаниеГруппы.Наименование = НСтр("ru='Отладка расчета'");
	ОписаниеГруппы.Скрыть		= НЕ РежимОтладки;
	ОписаниеГруппы.Описание 	=
		НСтр("ru='Параметры, используемые для отладки этапов закрытия месяца.
		|Изменять данные параметры рекомендуется только в тестовых информационных базах!'");
		
	Возврат ОписаниеГруппПараметров;
	
КонецФункции

// Формирует описание технологических параметров механизма закрытия месяца.
//
// Возвращаемое значение:
//	ТаблицаЗначений - см. ИнициализироватьОписаниеПараметровОперации() в модуле менеджера значения константы НастройкиЗакрытияМесяца.
//
Функция ОписаниеТехнологическихПараметровЗакрытияМесяца() Экспорт
	
	ОписаниеПараметров = Константы.НастройкиЗакрытияМесяца.СоздатьМенеджерЗначения().ИнициализироватьОписаниеПараметровОперации();
	РежимОтладки	   = ОбщегоНазначенияКлиентСервер.РежимОтладки();
	
	Родитель = "РегистрацияОшибок";
	
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель 			  = Родитель;
	ОписаниеПараметра.Имя 				  = "КоличествоРегистрируемыхОднотипныхОшибок";
	ОписаниеПараметра.Наименование 		  = НСтр("ru='Количество регистрируемых ошибок одного вида'");
	ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(6, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеПараметра.ДиапазонС     	  = 0;
	ОписаниеПараметра.ЗначениеПоУмолчанию = 100;
	ОписаниеПараметра.Описание =
		НСтр("ru='Предназначен для ускорения обновления состояния и выполнения расчета операций.
		|Если в результате выполнения какой-либо проверки найдено большое количество однотипных ошибок,
		|то как правило нет смысла регистрировать их все - надо разбираться с причинами возникновения этих ошибок.
		|Если указано значение 0, то будут зарегистрированы все найденные ошибки.'");
	
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель 			  = Родитель;
	ОписаниеПараметра.Имя 				  = "ДублироватьНайденныеПроблемыВЖурналеРегистрации";
	ОписаниеПараметра.Наименование 		  = НСтр("ru='Дублировать найденные проблемы в журнале регистрации'");
	ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
	ОписаниеПараметра.ЗначениеПоУмолчанию = Истина;
	ОписаниеПараметра.Описание =
		НСтр("ru='Определяет поведение механизма закрытия месяца в части работы с журналом регистрации.
		|Если установлено значение Истина, то информация о всех найденных проблемах, регистрируемые в механизме ""Аудит состояния системы"",
		|будет дублироваться в журнале регистрации.'");
	
	Родитель = "Отладка";
	
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Родитель 			  = Родитель;
	ОписаниеПараметра.Имя 				  = "НеПроверятьБлокировкуВходящихДанныхПриОбновленииИБ";
	ОписаниеПараметра.Наименование 		  = НСтр("ru='Не проверять окончание обновления информационной базы'");
	ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
	ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
	ОписаниеПараметра.Скрыть			  = НЕ РежимОтладки;
	ОписаниеПараметра.Описание =
		НСтр("ru='Позволяет пропустить проверку окончания обновления информационной базы.
		|Если это свойство не установлено и обновление входящих данных механизма расчета еще не завершено,
		|то расчет выполняться не будет, т.к. его входящие данные могут быть некорректны.'");
	
	Возврат ОписаниеПараметров;
	
КонецФункции

#КонецОбласти

#Область МетодыДляОписанияЭтапов

Функция СтруктураОписанияДействия()
	
	Описание = Новый Структура;
	
	Описание.Вставить("ВидДействия", 					  Перечисления.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ПустаяСсылка());
	Описание.Вставить("Обработчик",  					  "");
	Описание.Вставить("ИмяФормы",    					  "");
	Описание.Вставить("ИмяОбъектаМетаданных",			  "");
	Описание.Вставить("НаКлиенте",   					  Ложь);
	Описание.Вставить("НаСервере",   					  Ложь);
	Описание.Вставить("ОткрыватьВместоЖР", 				  Ложь);
	Описание.Вставить("НеТребуетсяПриУспешномВыполнении", Ложь);
	
	Описание.Вставить("ПараметрыФормы", 				  Новый Структура);
	
	Возврат Описание;
	
КонецФункции

#КонецОбласти

#Область МетодыДляРаботыСПроблемамиСостоянияСистемы

Функция КоличествоРегистрируемыхОднотипныхОшибок()
	
	ЗначенияПараметров = РасчетСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров(
		Перечисления.ОперацииЗакрытияМесяца.ПустаяСсылка());
		
	Возврат ЗначенияПараметров.КоличествоРегистрируемыхОднотипныхОшибок;
	
КонецФункции

Функция ИнициализироватьПараметрыРасчетаДляПроверки(ПараметрыПроверки)
	
	// Подготовка параметров расчета.
	ПараметрыРасчета = Новый Структура("ПериодРегистрации, МассивОрганизаций");
	
	ДополнительныеПараметры = ДополнительныеПараметрыПроверки(ПараметрыПроверки);
	
	// Отбор по периоду.
	Если ДополнительныеПараметры.Свойство("Период") Тогда
		Если ТипЗнч(ДополнительныеПараметры.Период) = Тип("СтандартныйПериод") Тогда
			ПараметрыРасчета.ПериодРегистрации = НачалоМесяца(ДополнительныеПараметры.Период.ДатаНачала);
		Иначе // тип значения - Дата
			ПараметрыРасчета.ПериодРегистрации = НачалоМесяца(ДополнительныеПараметры.Период);
		КонецЕсли;
	ИначеЕсли ДополнительныеПараметры.Свойство("ПериодРегистрации") Тогда
		ПараметрыРасчета.ПериодРегистрации = НачалоМесяца(ДополнительныеПараметры.ПериодРегистрации);
	Иначе
		ПараметрыРасчета.ПериодРегистрации = НачалоМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	
	// Отбор по организациям.
	Если ДополнительныеПараметры.Свойство("МассивОрганизаций") Тогда
		ПараметрыРасчета.МассивОрганизаций = ОбщегоНазначенияУТКлиентСервер.Массив(ДополнительныеПараметры.МассивОрганизаций);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыРасчета.МассивОрганизаций) Тогда
		ПараметрыРасчета.МассивОрганизаций = Справочники.Организации.ДоступныеОрганизации();
	КонецЕсли;
	
	// Заполним отборы в параметрах проверки.
	ПараметрыПроверки.Отборы.Очистить();
	
	Для Каждого ТекущаяОрганизация Из ПараметрыРасчета.МассивОрганизаций Цикл
		НоваяСтрока = ПараметрыПроверки.Отборы.Добавить();
		НоваяСтрока.Организация 	  = ТекущаяОрганизация;
		НоваяСтрока.ПроверяемыйПериод = ПараметрыРасчета.ПериодРегистрации;
	КонецЦикла;
	
	Возврат ПараметрыРасчета;
	
КонецФункции

Функция ИнициализироватьПараметрыОбработчикаЭтапаЗакрытияМесяцаДляПроверки(ПараметрыПроверки)
	
	ПараметрыРасчета = ИнициализироватьПараметрыРасчетаДляПроверки(ПараметрыПроверки);
	
	ДополнительныеПараметры = ДополнительныеПараметрыПроверки(ПараметрыПроверки);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ПараметрыРасчета", ПараметрыРасчета);
	ПараметрыОбработчика.Вставить("ДанныеЭтапа",	  СформироватьОписаниеДанныхЭтапа(ПараметрыПроверки.КонтекстВыполнения));
	ПараметрыОбработчика.Вставить("ТаблицаПояснения", Обработки.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуПоясненийКЭтапам());
	
	Если ДополнительныеПараметры.Свойство("МенеджерВременныхТаблиц") Тогда
		// Данные для проверки уже подготовлены - ее надо выполнить безусловно.
		ПараметрыОбработчика.Вставить("МенеджерВременныхТаблиц", ДополнительныеПараметры.МенеджерВременныхТаблиц);
	Иначе
		Если ДополнительныеПараметры.Свойство("Состояние")
		 И СостояниеЭтапаОпределено(ДополнительныеПараметры) И ТребуетсяПересчетЭтапа(ДополнительныеПараметры) Тогда
			// Проверять состояние уже не надо - оно известно (требуется пересчет этапа)
		Иначе
			// Проверим использование этапа расчета (необходимость выполнения проверки)
			// и заодно подготовим необходимые данные для проверки в процедуре проверки использования этапа.
			Обработки.ОперацииЗакрытияМесяца.ПроверитьИспользованиеЭтапа(ПараметрыОбработчика);
		КонецЕсли;
	КонецЕсли;
	 
	Возврат ПараметрыОбработчика;
	
КонецФункции

Функция СформироватьОписаниеДанныхЭтапа(Код)
	
	ТаблицаЭтапы = Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца();
	СтрокаЭтапа  = ТаблицаЭтапы.Найти(Код, "Код"); 
	
	Если СтрокаЭтапа = Неопределено Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не найдено описание операции закрытия месяца ""%1""'"),
			СокрЛП(Код));
			
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ДанныеЭтапа = ОбщегоНазначенияУТ.ПреобразоватьСтрокуТаблицыВСтруктуру(СтрокаЭтапа);
	
	Возврат ДанныеЭтапа;
	
КонецФункции


Процедура ДобавитьОбъектКЗафиксированнойПроблеме(ПараметрыПроверки, ИсточникДанных, ОписаниеПроблемы, СписокПолей, ИмяПоляОбъекта)
	
	Представление = "";
	
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		
		ИмяПоля = ЭлементСписка.Значение;
		ЗначениеПоля = ИсточникДанных[ИмяПоля];
		
		Если ЗначениеЗаполнено(ЭлементСписка.Представление) И ЗначениеЗаполнено(ЗначениеПоля) Тогда
			Представление = Представление + ?(Представление = "", "", "; ")
				+ ЭлементСписка.Представление + ": """
				+ СокрЛП(ЗначениеПоля) + """";
		КонецЕсли;
		
	КонецЦикла;
	
	Представление = ОписаниеПроблемы + ":
		|" + Представление;
	
	АудитСостоянияСистемы.ДобавитьОбъектКЗафиксированнойПроблеме(
		ПараметрыПроверки,
		ИсточникДанных[ИмяПоляОбъекта],
		Представление);
		
	ПродублироватьВЖурналРегистрации(ПараметрыПроверки.КонтекстВыполнения, ПараметрыПроверки.Проверка, Представление);
		
КонецПроцедуры

Процедура ДобавитьСоставнойОбъектКЗафиксированнойПроблеме(ПараметрыПроверки, ИсточникДанных, ОписаниеПроблемы, СписокПолей, ИмяРегистраДляРасшифровки = "")
	
	Расшифровка   = Новый Структура("ИмяРегистраДляРасшифровки", ИмяРегистраДляРасшифровки);
	Представление = "";
	
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		
		ИмяПоля = ЭлементСписка.Значение;
		ЗначениеПоля = ИсточникДанных[ИмяПоля];
		
		Расшифровка.Вставить(ИмяПоля, ЗначениеПоля);
		
		Если ЗначениеЗаполнено(ЭлементСписка.Представление) И ЗначениеЗаполнено(ЗначениеПоля) Тогда
			Представление = Представление + ?(Представление = "", "", "; ")
				+ ЭлементСписка.Представление + ": """
				+ СокрЛП(ЗначениеПоля) + """";
		КонецЕсли;
		
	КонецЦикла;
	
	Представление = ОписаниеПроблемы + ":
		|" + Представление;
	
	АудитСостоянияСистемы.ДобавитьСоставнойОбъектКЗафиксированнойПроблеме(
		ПараметрыПроверки,
		Расшифровка,
		Представление);
	
	ПродублироватьВЖурналРегистрации(ПараметрыПроверки.КонтекстВыполнения, ПараметрыПроверки.Проверка, Представление);
	
КонецПроцедуры

Процедура ДобавитьИнформациюОНезарегистрированныхОбъектахКЗафиксированнойПроблеме(ПараметрыПроверки, ОписаниеПроблемы, КоличествоОбъектов)
	
	Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Еще найдено аналогичных проблем: %1'"),
		СокрЛП(КоличествоОбъектов));
	
	АудитСостоянияСистемы.ДобавитьОбъектКЗафиксированнойПроблеме(
		ПараметрыПроверки,
		Неопределено,
		Представление);
	
	Представление = ОписаниеПроблемы + ":
		|" + Представление;
	
	ПродублироватьВЖурналРегистрации(ПараметрыПроверки.КонтекстВыполнения, ПараметрыПроверки.Проверка, Представление);
	
КонецПроцедуры

#КонецОбласти

#Область МетодыДляРаботыСЗаданияКЗакрытиюМесяца

Функция КоллекцияКонтрольныхРегистров()
	
	Коллекция = Новый Массив();
	Коллекция.Добавить("СостоянияНМАОрганизацийЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("СостоянияОСОрганизацийЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ВыручкаИСебестоимостьПродажЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ДвиженияДенежныеСредстваДоходыРасходыЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ДвиженияДоходыРасходыПрочиеАктивыПассивыЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ДвиженияКонтрагентДоходыРасходы");
	Коллекция.Добавить("ДенежныеДокументыЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ДенежныеСредстваБезналичныеЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ДенежныеСредстваВКассахККМЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ДенежныеСредстваВПутиЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ДенежныеСредстваНаличныеЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ДенежныеСредстваУПодотчетныхЛицЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("КнигаУчетаДоходовИРасходовЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ПартииПрочихРасходовЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ПартииНДСКРаспределениюЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("РасходыПриУСНЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("РасходыПриУСНМатериалыЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("РасходыПриУСНОСиНМАЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("РасходыПриУСНТоварыЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("РасчетыПоФинансовымИнструментамЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("СтоимостьОСЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("СтоимостьНМАЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ПервоначальныеСведенияНМАЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ПервоначальныеСведенияНМАНалоговыйУчетЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ПервоначальныеСведенияОСЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ПервоначальныеСведенияОСНалоговыйУчетЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("РезервыПоСомнительнымДолгамЗаданияКЗакрытиюМесяца");
	Коллекция.Добавить("ДанныеОснованийСчетовФактурЗаданияКЗакрытиюМесяца");
	Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		Коллекция.Добавить("РасчетыСКлиентамиЗаданияКЗакрытиюМесяца");
		Коллекция.Добавить("РасчетыСПоставщикамиЗаданияКЗакрытиюМесяца");
		Коллекция.Добавить("СуммыДокументовВВалютеРеглЗаданияКЗакрытиюМесяца");
	КонецЕсли;
	
	Возврат Коллекция;
	
КонецФункции

#КонецОбласти

#Область МетодыДляРаботыСФоновымиЗаданиямиЗакрытияМесяца

Функция ТекущееСостояниеФоновогоЗадания(КлючИлиИдентификаторЗадания) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Наименование", "");
	Результат.Вставить("НеНайдено", Ложь);
	Результат.Вставить("Активно", Ложь);
	Результат.Вставить("Завершено", Ложь);
	Результат.Вставить("ЗавершеноАварийно", Ложь);
	Результат.Вставить("Отменено", Ложь);
	Результат.Вставить("Начало");
	Результат.Вставить("Конец");
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("Задание");
	
	Если ТипЗнч(КлючИлиИдентификаторЗадания) = Тип("Строка") Тогда
		
		ОтборЗаданий = Новый Структура("Ключ", КлючИлиИдентификаторЗадания);
		Задания      = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборЗаданий);
		
		Если Задания.Количество() = 0 Тогда
			Задание = Неопределено;
		Иначе
			Задание = Задания[0];
		КонецЕсли;
		
	Иначе
		Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(КлючИлиИдентификаторЗадания);
	КонецЕсли;
	
	Если Задание = Неопределено Тогда
		
		Результат.НеНайдено = Истина;
		
		Если ТипЗнч(КлючИлиИдентификаторЗадания) = Тип("Строка") Тогда
			Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Фоновое задание с ключом ""%1"" не найдено.'"),
				СокрЛП(КлючИлиИдентификаторЗадания));
		Иначе
			Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Фоновое задание с идентификатором ""%1"" не найдено.'"),
				СокрЛП(КлючИлиИдентификаторЗадания));
		КонецЕсли;
		
		Возврат Результат;
		
	КонецЕсли;
	
	Результат.Задание 	   = Задание;
	Результат.Наименование = Задание.Наименование;
	Результат.Начало 	   = Задание.Начало;
	Результат.Конец 	   = Задание.Конец;
	
	Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Результат.Активно = Истина;
	ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
		Результат.Завершено = Истина;
	ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
		Результат.ЗавершеноАварийно = Истина;
		Результат.ТекстОшибки = ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
	ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
		Результат.Отменено = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтменитьВыполнениеФоновогоЗадания(ИдентификаторЗадания) Экспорт 
	
	СостояниеЗадания = ТекущееСостояниеФоновогоЗадания(ИдентификаторЗадания);
	
	Если СостояниеЗадания.Активно Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Попытка
			СостояниеЗадания.Задание.Отменить();
		Исключение
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(НСтр("ru = 'Отмена выполнения фонового задания'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ТекстОшибки);
			
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает имя уникального фонового задания закрытия месяца
//
// Возвращаемое значение:
//	Строка - Имя фонового задания с идентификатором расчета.
//
Функция ИмяФоновогоЗадания(ИдентификаторРасчета) Экспорт
	
	Возврат "ЗакрытиеМесяца_" + СокрЛП(ИдентификаторРасчета);
	
КонецФункции

#КонецОбласти

#Область МетодыДляЗамераПроизводительности

Процедура УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, КоличествоДанных = 1) Экспорт
	
	Обработки.ОперацииЗакрытияМесяца.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, КоличествоДанных);
	
КонецПроцедуры

Функция РазмерыВременныхТаблиц(КонтейнерВременныхТаблиц, ПараметрыОбработчика = Неопределено) Экспорт
	
	РазмерыВременныхТаблиц = РасчетСебестоимостиПрикладныеАлгоритмы.РазмерыВременныхТаблиц(КонтейнерВременныхТаблиц);
	
	Если ЗначениеЗаполнено(ПараметрыОбработчика) Тогда
		УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, РазмерыВременныхТаблиц.ОбщийРазмерТаблиц);
	КонецЕсли;
	
	Возврат РазмерыВременныхТаблиц;
	
КонецФункции

Функция РазмерВременнойТаблицы(КонтейнерВременныхТаблиц, ИмяТаблицы, ПараметрыОбработчика = Неопределено) Экспорт
	
	КоличествоДанных = РасчетСебестоимостиПрикладныеАлгоритмы.РазмерВременнойТаблицы(КонтейнерВременныхТаблиц, ИмяТаблицы);
	
	Если ЗначениеЗаполнено(ПараметрыОбработчика) Тогда
		УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, КоличествоДанных);
	КонецЕсли;
	
	Возврат КоличествоДанных;
	
КонецФункции

#КонецОбласти

#Область МетодыДляТестированияЗакрытияМесяца

#Область ПроверкаРасчетаЭтапов

// Выполняется в фоновом задании, создаваемом в обработке ТестированиеОперацийЗакрытийМесяца.
//
// Параметры:
//	Период - Дата - тестируемый период.
//
Процедура ТестированиеЗакрытияМесяца(Период) Экспорт
	
	// Проверим возможность запуска расчета.
	РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.ОбновитьСостояниеАктивныхРасчетов();
	
	ИдентификаторРасчета = Новый УникальныйИдентификатор; // пишется в ключ фонового задания и в регистр выполнения операций
	
	АктивныеРасчеты = РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.УстановитьПризнакЗапускаРасчета(
		,
		ИдентификаторРасчета,
		НСтр("ru='Тестирование операций закрытия месяца'"),
		Период);
	
	Если АктивныеРасчеты.ЕстьАктивныеРасчеты Тогда
		ВызватьИсключение АктивныеРасчеты.ТекстОшибки;
	КонецЕсли;
	
	// Заполним состояния этапов.
	СтруктураДанных = ОпределитьСостояниеЭтаповЗакрытияМесяцаДляТестирования(Период);
	
	// Последовательно выполним все этапы (в т.ч. этапы в статусе "Выполнен успешно").
	Для Каждого ТекущаяСтрока Из СтруктураДанных.ТаблицаЭтапы Цикл
		
		Если ТекущаяСтрока.ВыполняетсяВручную
		 И ТекущаяСтрока.Состояние <> Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется Тогда
			
			СтруктураПоиска = Новый Структура("Родитель", ТекущаяСтрока.Код);
			СтрокиПояснений = СтруктураДанных.ТаблицаПоясненияЭтапов.НайтиСтроки(СтруктураПоиска);

			Для Каждого СтрокаПояснения Из СтрокиПояснений Цикл
				
				Если СтрокаПояснения.Состояние <> Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка Тогда
					Продолжить;
				КонецЕсли;
				
				// Продублируем проблемы, диагностированные для ручной операции, в журнале регистрации для последующего анализа.
				ЗаписьЖурналаРегистрации(
					ИмяСобытияЖурналаРегистрации(
						ОбщегоНазначения.ИмяЗначенияПеречисления(ТекущаяСтрока.Код)),
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					СтрокаПояснения.Наименование);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ТекущаяСтрока.ВыполняетсяВручную
		 ИЛИ ТекущаяСтрока.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяСтрока.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
		
		ПараметрыЗапускаРасчета = Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыЗапускаДляРасчетаЭтапов(
			СтруктураДанных,
			ТекущаяСтрока.Код,
			СтруктураДанных.ТаблицаЭтапы[СтруктураДанных.ТаблицаЭтапы.Количество()-1].Код);
		
		ПараметрыЗапускаРасчета.АвтоматическоеТестирование = Истина;
		
		Обработки.ОперацииЗакрытияМесяца.ВыполнитьРасчетЭтапов(ПараметрыЗапускаРасчета);
		
	КонецЦикла;
	
	РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.УстановитьПризнакОкончанияРасчета(ИдентификаторРасчета);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаСостоянияЭтапов

// Определяет состояние этапов закрытия месяца для целей тестирования.
//
// Параметры:
//	Период 			  - Дата - тестируемый период
//	МассивОрганизаций - СправочникСсылка.Организация, Массив - организации для тестирования.
//
// Возвращаемое значение:
//	Структура - описание этапов закрытия месяца, см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьСтруктуруДанныхДляЗаполненияСостоянияЭтапов().
//
Функция ОпределитьСостояниеЭтаповЗакрытияМесяцаДляТестирования(Период, МассивОрганизаций = Неопределено) Экспорт
	
	СтруктураДанных = Обработки.ОперацииЗакрытияМесяца.ИнициализироватьСтруктуруДанныхДляЗаполненияСостоянияЭтапов(
		НачалоМесяца(Период),
		МассивОрганизаций);
	
	ПараметрыЗапускаОбновленияСостояния =
		Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыЗапускаДляЗаполненияСостоянияЭтапов(СтруктураДанных);
	
	ПараметрыЗапускаОбновленияСостояния.ОбновлятьСписокПроверок    = Истина;
	ПараметрыЗапускаОбновленияСостояния.АвтоматическоеТестирование = Истина;
	
	Обработки.ОперацииЗакрытияМесяца.ЗаполнитьСостоянияЭтапов(ПараметрыЗапускаОбновленияСостояния);
	
	Возврат СтруктураДанных;
	
КонецФункции

// Сохраняет информацию о состоянии закрытия месяца в файлы.
// Сохраняются значимые колонки таблиц ТаблицаЭтапы и ТаблицаСгруппированныхПояснений.
// Сравнив выгруженные файлы разных версий можно получить различия в состоянии этапов закрытия месяца
// и таким образом выявить "раскрывшиеся" периоды, которые в предыдущей версии были закрыты.
//
// Сохраняемые файлы имеют формат имени "<Тип выгруженных данных>_<Тестируемый период>.mxl",
// поэтому выгрузку данных одного и того же периода в разных ИБ надо выполнять в разные каталоги,
// иначе вторая выгрузка затрет результаты первой.
//
// Параметры:
//	КаталогДляВыгрузки - Строка - путь к каталогу для сохранения данных
//	Период 			   - Дата - тестируемый период
//	МассивОрганизаций  - СправочникСсылка.Организация, Массив - организации для тестирования.
//
// Возвращаемое значение:
//	Строка - информация об ошибке записи файла; если ошибок не было то возвращается пустая строка.
//
Функция СохранитьСостояниеЭтаповЗакрытияМесяцаДляТестирования(КаталогДляВыгрузки, Период, МассивОрганизаций = Неопределено) Экспорт
	
	// Проверим некорректный вызов процедуры.
	Если НЕ ЗначениеЗаполнено(Период) ИЛИ НЕ ЗначениеЗаполнено(КаталогДляВыгрузки) Тогда
		Возврат НСтр("ru='Не указаны обязательные параметры'");
	КонецЕсли;
	
	// Заполним состояния этапов.
	СтруктураДанных = ОпределитьСостояниеЭтаповЗакрытияМесяцаДляТестирования(Период, МассивОрганизаций);
	
	ТаблицаЭтапы = СтруктураДанных.ТаблицаЭтапы.Скопировать(, "Код, Состояние");
	ТаблицаСгруппированныхПояснений = СтруктураДанных.ТаблицаСгруппированныхПояснений.Скопировать(, "Родитель, Наименование, Состояние");
	
	// Колонку этапа сохраним в виде имени значения перечисления.
	ЗаполнитьКолонкуИмениЭтапаДляТестирования(ТаблицаЭтапы, "Код");
	ТаблицаЭтапы.Колонки.Удалить("Код");
	
	ЗаполнитьКолонкуИмениЭтапаДляТестирования(ТаблицаСгруппированныхПояснений, "Родитель");
	ТаблицаСгруппированныхПояснений.Колонки.Удалить("Родитель");
	
	ТаблицаЭтапы.Сортировать("Этап, Состояние");
	ТаблицаСгруппированныхПояснений.Сортировать("Этап, Наименование, Состояние");
	
	// Сохраним таблицы в файлах.
	Каталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(СокрЛП(КаталогДляВыгрузки));
	
	СоздатьКаталог(Каталог);
	
	ИменаФайлов = ИменаФайловВыгрузкиСостояниеЭтаповДляТестирования(Период);
	
	ТекстОшибки = ОбщегоНазначенияУТ.СохранитьТаблицуЗначенийВФайл(
		ТаблицаЭтапы,
		Каталог + ИменаФайлов.ТаблицаЭтапы);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат ТекстОшибки;
	КонецЕсли;
	
	ТекстОшибки = ОбщегоНазначенияУТ.СохранитьТаблицуЗначенийВФайл(
		ТаблицаСгруппированныхПояснений,
		Каталог + ИменаФайлов.ТаблицаСгруппированныхПояснений);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Сравнивает две выгрузки состояний операций закрытия месяца.
// Выгрузка выполняется функцией СохранитьСостояниеЭтаповЗакрытияМесяцаДляТестирования().
//
// Параметры:
//	Период 			      - Дата - тестируемый период
//	КаталогДляВыгрузки1   - Строка - путь к каталогу для сохранения данных №1
//	КаталогДляВыгрузки2   - Строка - путь к каталогу для сохранения данных №2
//	НеВыводитьНовыеЭтапы  - Булево - если Истина, то не будет выводиться отличие в операции,
//									 которая есть только в одной из версий сравниваемых конфигураций
//	НеВыводитьНеИзменившиесяЭтапы - Булево - если Истина, то не будут выводиться операции с одинаковым статусом.
//
// Возвращаемое значение:
//	Строка - информация о сравнении выгрузок, может быть одного из следующих видов:
//		- информация об ошибке сравнения, если что-то не так с файлами выгрузки
//		- отчет о сравнении, содержащий описание отличий в состоянии/пояснениях операций
//		- пустая строка, если нет ни ошибок, ни отличий.
//
Функция СравнитьСостояниеЭтаповЗакрытияМесяцаДляТестирования(Период,
			КаталогДляВыгрузки1, КаталогДляВыгрузки2, НеВыводитьНовыеЭтапы = Ложь, НеВыводитьНеИзменившиесяЭтапы = Ложь) Экспорт
	
	ТекстыСообщений = Новый Массив;
	
	#Область ПроверкаФайлов
	
	Каталог1 = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(СокрЛП(КаталогДляВыгрузки1));
	Каталог2 = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(СокрЛП(КаталогДляВыгрузки2));
	
	Если НРег(Каталог1) = НРег(Каталог2) Тогда
		ТекстыСообщений.Добавить(НСтр("ru='Имена каталогов выгрузки №1 И №2 не должны совпадать'"));
		Возврат СтрСоединить(ТекстыСообщений, Символы.ПС); // дальнейшее сравнение невозможно
	КонецЕсли;
	
	// Проверим наличие файлов выгрузки данных за указанные периоды в указанных каталогах.
	ИменаФайлов = ИменаФайловВыгрузкиСостояниеЭтаповДляТестирования(Период);
	
	ПроверитьНаличиеФайлаВыгрузкиСостояниеЭтаповДляТестирования(
		Каталог1,
		ИменаФайлов.ТаблицаЭтапы,
		НСтр("ru='операций'"),
		ТекстыСообщений);
	
	ПроверитьНаличиеФайлаВыгрузкиСостояниеЭтаповДляТестирования(
		Каталог1,
		ИменаФайлов.ТаблицаСгруппированныхПояснений,
		НСтр("ru='пояснений'"),
		ТекстыСообщений);
	
	ПроверитьНаличиеФайлаВыгрузкиСостояниеЭтаповДляТестирования(
		Каталог2,
		ИменаФайлов.ТаблицаЭтапы,
		НСтр("ru='операций'"),
		ТекстыСообщений);
	
	ПроверитьНаличиеФайлаВыгрузкиСостояниеЭтаповДляТестирования(
		Каталог2,
		ИменаФайлов.ТаблицаСгруппированныхПояснений,
		НСтр("ru='пояснений'"),
		ТекстыСообщений);
	
	Если ЗначениеЗаполнено(ТекстыСообщений) Тогда
		Возврат СтрСоединить(ТекстыСообщений, Символы.ПС); // дальнейшее сравнение невозможно
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ЧтениеФайлов
	
	// Прочитаем таблицы из файлов.
	ТаблицаЭтапы1 =
		ОбщегоНазначенияУТ.ПолучитьТаблицуЗначенийИзФайла(Каталог1 + ИменаФайлов.ТаблицаЭтапы);
	
	Если ТипЗнч(ТаблицаЭтапы1) = Тип("Строка") Тогда
		ТекстыСообщений.Добавить(ТаблицаЭтапы1);
	КонецЕсли;
	
	ТаблицаСгруппированныхПояснений1 =
		ОбщегоНазначенияУТ.ПолучитьТаблицуЗначенийИзФайла(Каталог1 + ИменаФайлов.ТаблицаСгруппированныхПояснений);
	
	Если ТипЗнч(ТаблицаСгруппированныхПояснений1) = Тип("Строка") Тогда
		ТекстыСообщений.Добавить(ТаблицаСгруппированныхПояснений1);
	КонецЕсли;
	
	ТаблицаЭтапы2 =
		ОбщегоНазначенияУТ.ПолучитьТаблицуЗначенийИзФайла(Каталог2 + ИменаФайлов.ТаблицаЭтапы);
	
	Если ТипЗнч(ТаблицаЭтапы2) = Тип("Строка") Тогда
		ТекстыСообщений.Добавить(ТаблицаЭтапы2);
	КонецЕсли;
	
	ТаблицаСгруппированныхПояснений2 =
		ОбщегоНазначенияУТ.ПолучитьТаблицуЗначенийИзФайла(Каталог2 + ИменаФайлов.ТаблицаСгруппированныхПояснений);
	
	Если ТипЗнч(ТаблицаСгруппированныхПояснений2) = Тип("Строка") Тогда
		ТекстыСообщений.Добавить(ТаблицаСгруппированныхПояснений2);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстыСообщений) Тогда
		Возврат СтрСоединить(ТекстыСообщений, Символы.ПС); // дальнейшее сравнение невозможно
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СравнениеФайлов
	
	// Сформируем таблицы различий.
	ТаблицаОтличийЭтапы = ОбщегоНазначенияУТ.СравнитьТаблицыЗначений(
		ТаблицаЭтапы1,
		ТаблицаЭтапы2);
	
	Если ТипЗнч(ТаблицаОтличийЭтапы) = Тип("Строка") Тогда
		ТекстыСообщений.Добавить(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Невозможно сравнить таблицы состояния этапов:
					|%1'"),
				ТаблицаОтличийЭтапы));
	КонецЕсли;
	
	ТаблицаОтличийПояснения = ОбщегоНазначенияУТ.СравнитьТаблицыЗначений(
		ТаблицаСгруппированныхПояснений1,
		ТаблицаСгруппированныхПояснений2);
	
	Если ТипЗнч(ТаблицаОтличийПояснения) = Тип("Строка") Тогда
		ТекстыСообщений.Добавить(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Невозможно сравнить таблицы пояснений к этапам:
					|%1'"),
				ТаблицаОтличийПояснения));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстыСообщений) Тогда
		Возврат СтрСоединить(ТекстыСообщений, Символы.ПС); // дальнейшее сравнение невозможно
	ИначеЕсли ТаблицаОтличийЭтапы.Количество() = 0 И ТаблицаОтличийПояснения.Количество() = 0 Тогда
		Возврат ""; // нет отличий
	КонецЕсли;
	
	// Добавим индексы для поиска по таблицам.
	ТаблицаЭтапы1.Индексы.Добавить("Этап");
	ТаблицаОтличийЭтапы.Индексы.Добавить("Этап");
	ТаблицаОтличийПояснения.Индексы.Добавить("Этап");
	
	#КонецОбласти
	
	#Область ФормированиеМассиваОтличающихсяЭтапов
	
	Этапы = ТаблицаОтличийЭтапы.Скопировать(, "Этап");
	Этапы.Свернуть("Этап", "");
	
	МассивЭтапов = Этапы.ВыгрузитьКолонку("Этап");
	
	Этапы = ТаблицаОтличийПояснения.Скопировать(, "Этап");
	Этапы.Свернуть("Этап", "");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		МассивЭтапов, 
		Этапы.ВыгрузитьКолонку("Этап"), Истина);
	
	#КонецОбласти
	
	#Область ФормированиеОтчета
	
	ТекстыСообщений.Очистить();
	
	ОбщегоНазначенияУТКлиентСервер.СортироватьМассив(МассивЭтапов);
	
	Для Каждого ТекущийЭтап Из МассивЭтапов Цикл
		
		Состояние1 = Неопределено;
		Состояние2 = Неопределено;
		
		// Проверим изменение состояния этапа.
		СтрокиЭтапа = ТаблицаОтличийЭтапы.НайтиСтроки(Новый Структура("Этап", ТекущийЭтап));
		
		Для Каждого СтрокаЭтапа Из СтрокиЭтапа Цикл
			
			Если СтрокаЭтапа.СчетчикСтрокСравниваемыхТаблиц > 0 Тогда
				Состояние1 = СтрокаЭтапа.Состояние;
			Иначе
				Состояние2 = СтрокаЭтапа.Состояние;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(Состояние1) И НЕ ЗначениеЗаполнено(Состояние2) Тогда
			
			// Состояние не изменилось - прочитаем его из исходной таблицы.
			СтрокаИсходнойТаблицы = ТаблицаЭтапы1.Найти(ТекущийЭтап, "Этап");
			
			Если СтрокаИсходнойТаблицы = Неопределено Тогда
				
				ТекстыСообщений.Добавить("");
				ТекстыСообщений.Добавить("////////////////////////////////////////////////////////////////////////////////");
		
				ТекстыСообщений.Добавить(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Ошибка: операция ""%1"" отсутствует в таблице выгрузки операций'"),
						ТекущийЭтап));
				
				Продолжить;
				
			КонецЕсли;
			
			Состояние1 = СтрокаИсходнойТаблицы.Состояние;
			Состояние2 = Состояние1;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Состояние1) И ЗначениеЗаполнено(Состояние2) Тогда
			
			Если НеВыводитьНовыеЭтапы Тогда
				Продолжить; // этап есть только в выгрузке №2
			КонецЕсли;
			
			ТекстОтличия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Операция присутствует только в выгрузке №2: ""%1""'"),
				Состояние2);
			
		ИначеЕсли НЕ ЗначениеЗаполнено(Состояние2) И ЗначениеЗаполнено(Состояние1) Тогда
			
			Если НеВыводитьНовыеЭтапы Тогда
				Продолжить; // этап есть только в выгрузке №1
			КонецЕсли;
			
			ТекстОтличия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Операция присутствует только в выгрузке №1: ""%1""'"),
				Состояние1);
				
		ИначеЕсли Состояние1 <> Состояние2 Тогда
			ТекстОтличия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Изменилось состояние операции: ""%1"" - ""%2""'"),
				Состояние1,
				Состояние2);
		Иначе
			
			Если НеВыводитьНеИзменившиесяЭтапы Тогда
				Продолжить; // этап не изменился
			КонецЕсли;
			
			ТекстОтличия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Состояние операции не изменилось: ""%1""'"),
				Состояние1);
			
		КонецЕсли;
		
		ТекстыСообщений.Добавить("");
		ТекстыСообщений.Добавить("////////////////////////////////////////////////////////////////////////////////");
		
		ТекстыСообщений.Добавить(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Операция ""%1""'"),
				ТекущийЭтап));
		
		ТекстыСообщений.Добавить(ТекстОтличия);
		
		// Проверим изменение пояснений этапа.
		
		СтрокиЭтапа = ТаблицаОтличийПояснения.НайтиСтроки(Новый Структура("Этап", ТекущийЭтап));
		
		Если СтрокиЭтапа.Количество() = 0 Тогда 
			ТекстыСообщений.Добавить(НСтр("ru='Отличий в пояснениях к этапу нет'"));
			Продолжить;
		КонецЕсли;
		
		ТекстыСообщений.Добавить(НСтр("ru='Изменились пояснения к этапу'") + ":");
		
		ШаблонТекстОтличия = "	" + НСтр("ru='Есть только в выгрузке №%1: ""%2"" - ""%3""'");
		
		Для Каждого СтрокаЭтапа Из СтрокиЭтапа Цикл
			
			Если СтрокаЭтапа.СчетчикСтрокСравниваемыхТаблиц > 0 Тогда
				ТекстВыгрузка = "1";
			Иначе
				ТекстВыгрузка = "2";
			КонецЕсли;
			
			ТекстыСообщений.Добавить(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонТекстОтличия,
					ТекстВыгрузка,
					СтрокаЭтапа.Состояние,
					СтрокаЭтапа.Наименование));
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТекстыСообщений.Количество() = 0 Тогда 
		Возврат "";
	КонецЕсли;
	
	ТекстыСообщений.Вставить(0,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Отчет о сравнении состояний операций закрытия месяца.
			|В отчет включены только операции, имеющие различия в состоянии и/или в описании проблем (пояснениях).
			|
			|Проверяемый период: %1
			|Выгрузка №1: ""%2""
			|Выгрузка №2: ""%3""'"),
			Формат(Период, "ДФ='ММММ гггг'"),
			Каталог1,
			Каталог2));
		
	ТекстыСообщений.Добавить("");
	
	#КонецОбласти
	
	Возврат СтрСоединить(ТекстыСообщений, Символы.ПС);
	
КонецФункции

// Вспомогательные методы.

// Заполняет колонку "Этап" именем значения перечисления ОперацииЗакрытияМесяца.
//
Процедура ЗаполнитьКолонкуИмениЭтапаДляТестирования(Таблица, КолонкаЭтапа)
	
	Таблица.Колонки.Вставить(0, "Этап", Новый ОписаниеТипов("Строка"));
	
	Для Каждого Строка Из Таблица Цикл
		Строка.Этап = ОбщегоНазначения.ИмяЗначенияПеречисления(Строка[КолонкаЭтапа]);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает имена файлов для выгрузки состояний и пояснений операций закрытия месяца.
//
Функция ИменаФайловВыгрузкиСостояниеЭтаповДляТестирования(Период)
	
	СуффиксИмениФайла = "_" + Формат(Период, "ДФ=MM-yy") + ".mxl";
	
	Результат = Новый Структура;
	
	Результат.Вставить("ТаблицаЭтапы",
		"ЗакрытиеМесяца_ТаблицаЭтапы" + СуффиксИмениФайла);
	Результат.Вставить("ТаблицаСгруппированныхПояснений",
		"ЗакрытиеМесяца_ТаблицаСгруппированныхПояснений" + СуффиксИмениФайла);
	
	Возврат Результат;
	
КонецФункции

// Проверяет наличие файлов выгрузки состояний/пояснений операций закрытия месяца.
//
Процедура ПроверитьНаличиеФайлаВыгрузкиСостояниеЭтаповДляТестирования(Каталог, ИмяФайла, НазначениеФайла, ТекстыСообщений)
	
	Файлы = НайтиФайлы(Каталог, ИмяФайла, Ложь);
	
	Если Файлы.Количество() <> 1 Тогда
		
		ТекстыСообщений.Добавить(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не найден файл выгрузки таблицы %1 ""%2""'"),
				НазначениеФайла,
				Каталог + ИмяФайла));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Отладка

Функция НеПроверятьБлокировкуВходящихДанныхПриОбновленииИБ()
	
	ЗначенияПараметров = РасчетСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров(
		Перечисления.ОперацииЗакрытияМесяца.ПустаяСсылка());
		
	Возврат ЗначенияПараметров.НеПроверятьБлокировкуВходящихДанныхПриОбновленииИБ;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти
