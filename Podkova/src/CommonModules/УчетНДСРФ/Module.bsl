#Область ПрограммныйИнтерфейс

// Ищет имеющиеся и создает новые счета-фактуры полученные или иные документы подтверждения НДС
// по таблице оснований 
//
// Параметры:
//   ТаблицаОснований - ТаблицаЗначений - Таблица с данными для регистрации счетов-фактур, содержащая колонки:
//          * ИдентификаторСтроки - Строка - Идентификатор строки
//          * Контрагент - СправочникСсылка.Контрагенты - Поставщик
//          * Дата - Дата - дата документа приобретения ценностей
//          * Валюта - СправочникСсылка.Валюты - Валюта счета-фактуры
//          * ПредъявленСФ - Булево - Истина, если предъявлен счет-фактура, иначе считается, что это иной документ
//          * НомерСФ - Строка - Входящий номер счета-фактуры
//          * ДатаСФ - Дата - Входящая дата счета-фактуры (дата составления)
//          * НаименованиеДокумента - Строка - Наименование иного документа подтверждения НДС
//          * НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Тип налогообложение НДС поставщика
// 
// Возвращаемое значение:
//   СчетаФактуры - ТаблицаЗначений - таблица с колонками СчетФактура, ДокументОснование и ИдентификаторСтроки
//
Функция ЗарегистрироватьСчетаФактурыПолученныеПоТаблицеОснований(ТаблицаОснований) Экспорт
	
	ТаблицаСФ = ТаблицаОснований.Скопировать(,"ИдентификаторСтроки,ДокументОснование");
	ТаблицаСФ.Колонки.Добавить("СчетФактура");
	ТаблицаСФ.Индексы.Добавить("ДокументОснование");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОснований", ТаблицаОснований);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОснований.ДокументОснование,
	|	ТаблицаОснований.ПредъявленСФ,
	|	ТаблицаОснований.НаименованиеДокумента,
	|	ТаблицаОснований.НомерСФ,
	|	ТаблицаОснований.ДатаСФ,
	|	ТаблицаОснований.Контрагент,
	|	ТаблицаОснований.Организация,
	|	ТаблицаОснований.Валюта,
	|	ТаблицаОснований.Дата,
	|	ТаблицаОснований.НалогообложениеНДС
	|ПОМЕСТИТЬ СчетаФактурыИтог
	|ИЗ
	|	&ТаблицаОснований КАК ТаблицаОснований
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаОснований.ПредъявленСФ
	|;
	|
	|ВЫБРАТЬ
	|	СчетаФактурыИтог.ПредъявленСФ,
	|	СчетаФактурыИтог.ДокументОснование,
	|	СчетаФактурыИтог.Организация,
	|	СчетаФактурыИтог.Дата,
	|	СчетаФактурыИтог.НомерСФ,
	|	СчетаФактурыИтог.ДатаСФ,
	|	СчетаФактурыИтог.Контрагент,
	|	СчетаФактурыИтог.Валюта,
	|	СчетаФактурыИтог.НалогообложениеНДС,
	|	NULL КАК НаименованиеДокумента,
	|	СозданныеСчетаФактуры.Ссылка КАК СчетФактура,
	|	СозданныеСчетаФактуры.Ссылка ЕСТЬ NULL КАК СчетФактураОтсутствует
	|ИЗ
	|	СчетаФактурыИтог
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.СчетФактураПолученный.ДокументыОснования КАК СозданныеСчетаФактуры
	|		
	|	ПО
	|		СозданныеСчетаФактуры.Ссылка.Номер = СчетаФактурыИтог.НомерСФ
	|		И СозданныеСчетаФактуры.Ссылка.ДатаСоставления = СчетаФактурыИтог.ДатаСФ
	|		И СозданныеСчетаФактуры.Ссылка.Контрагент = СчетаФактурыИтог.Контрагент
	|		И СозданныеСчетаФактуры.Ссылка.Валюта = СчетаФактурыИтог.Валюта
	|		И СозданныеСчетаФактуры.Ссылка.Организация = СчетаФактурыИтог.Организация
	|		И СозданныеСчетаФактуры.ДокументОснование = СчетаФактурыИтог.ДокументОснование
	|ГДЕ
	|	СчетаФактурыИтог.ПредъявленСФ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетаФактурыИтог.ПредъявленСФ,
	|	СчетаФактурыИтог.ДокументОснование,
	|	СчетаФактурыИтог.Организация,
	|	СчетаФактурыИтог.Дата,
	|	СчетаФактурыИтог.НомерСФ,
	|	СчетаФактурыИтог.ДатаСФ,
	|	СчетаФактурыИтог.Контрагент,
	|	NULL,
	|	NULL,
	|	СчетаФактурыИтог.НаименованиеДокумента,
	|	СозданныеСчетаФактуры.Ссылка КАК СчетФактура,
	|	СозданныеСчетаФактуры.Ссылка ЕСТЬ NULL КАК СчетФактураОтсутствует
	|ИЗ
	|	СчетаФактурыИтог
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ИнойДокументПодтвержденияНДС КАК СозданныеСчетаФактуры
	|		
	|	ПО
	|		СозданныеСчетаФактуры.НомерВходящегоДокумента = СчетаФактурыИтог.НомерСФ
	|		И СозданныеСчетаФактуры.ДатаВходящегоДокумента = СчетаФактурыИтог.ДатаСФ
	|		И СозданныеСчетаФактуры.НаименованиеДокумента = СчетаФактурыИтог.НаименованиеДокумента
	|		И СозданныеСчетаФактуры.Контрагент = СчетаФактурыИтог.Контрагент
	|		И СозданныеСчетаФактуры.Организация = СчетаФактурыИтог.Организация
	|		И СозданныеСчетаФактуры.ДокументОснование = СчетаФактурыИтог.ДокументОснование
	|ГДЕ
	|	НЕ СчетаФактурыИтог.ПредъявленСФ
	|";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СчетФактураОтсутствует Тогда
			Если Выборка.ПредъявленСФ Тогда
				Если Выборка.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя Тогда
					ПолноеИмяДокумента = "СчетФактураПолученныйНалоговыйАгент";
				Иначе
					ПолноеИмяДокумента = "СчетФактураПолученный";
				КонецЕсли;
			Иначе
				ПолноеИмяДокумента = "ИнойДокументПодтвержденияНДС";
			КонецЕсли;
			ДокументОбъект = Документы[ПолноеИмяДокумента].СоздатьДокумент();
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("Организация", Выборка.Организация);
			ДанныеЗаполнения.Вставить("Контрагент", Выборка.Контрагент);
			ДанныеЗаполнения.Вставить("Дата", Выборка.Дата);
			ДанныеЗаполнения.Вставить("НомерСФ", Выборка.НомерСФ);
			ДанныеЗаполнения.Вставить("ДатаСоставления", Выборка.ДатаСФ);
			ДанныеЗаполнения.Вставить("ДокументОснование", Выборка.ДокументОснование);
			ДанныеЗаполнения.Вставить("НаименованиеДокумента", Выборка.НаименованиеДокумента);
			ДокументОбъект.Заполнить(ДанныеЗаполнения);
			ДокументОбъект.Записать();
			СчетФактура = ДокументОбъект.Ссылка;
		Иначе
			СчетФактура = Выборка.СчетФактура;
		КонецЕсли;
		
		СтрокиТЧ = ТаблицаСФ.НайтиСтроки(Новый Структура("ДокументОснование", Выборка.ДокументОснование));
		Для каждого СтрокаТЧ Из СтрокиТЧ Цикл
			СтрокаТЧ.СчетФактура = СчетФактура;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаСФ.Индексы.Добавить("ИдентификаторСтроки");
	Возврат ТаблицаСФ;
	
КонецФункции

// Возвращает массив типов документов, для которых используется ручная корректировка журнала счетов-фактур.
//	ВозвращаемоеЗначение:
//		Массив - массив типов документов.
//
Функция КорректируютсяЗаписиВЖурналеСФ() Экспорт
	
	МассивВозврата = Новый Массив;
	
	МассивВозврата.Добавить(Тип("ДокументСсылка.ЗаписьКнигиПокупок"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.ИнойДокументПодтвержденияНДС"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.СводнаяСправкаНДС"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.СчетФактураВыданный"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.СчетФактураВыданныйАванс"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.СчетФактураКомиссионеру"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.СчетФактураКомитента"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.СчетФактураНалоговыйАгент"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.СчетФактураНаНеподтвержденнуюРеализацию0"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.СчетФактураПолученный"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.СчетФактураПолученныйАванс"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.СчетФактураПолученныйНалоговыйАгент"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт"));
	
	Возврат МассивВозврата;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ПолучениеНастроекИПараметровУчетаНДС

// Возвращает дату начала отражения возвратов корректировочными счетами-фактурами 
//
// Возвращаемое значение:
//   Дата   - по умолчанию 01 января 2019 года
//
Функция ДатаОтраженияВозвратовКорректировочнымиСФ() Экспорт

	Возврат '20190101';

КонецФункции

// Возвращает Истина, если указанная дата меньше даты начала действия закона 150-ФЗ
// В противном случае - Ложь.
// 
// Параметры:
//   Дата - проверяемая дата
// 
// Возвращаемое значение:
//   Результат - Булево
//
Функция УпрощенныйПорядокВычетаНДСПоНесырьевомуЭкспорту(Дата) Экспорт
	
	Возврат УчетНДСУП.НастройкиУчета().ДатаРазделенияЭкспорта <= Дата;
	
КонецФункции

// Определяет, является ли страна членом Таможенного союза
//
// Параметры:
//	Страна - СправочникСсылка.СтраныМира - Страна, для которой нужно определить членство в Таможенном союзе
//	Период - Дата - Дата, на которую необходимо определить членство в Таможенном союзе для страны. 
//			 Если не указано, то членство определяется на текущую дату.
//
// Возвращаемое значение:
//	Булево - Истина, если страна является членом Таможенного союза, иначе - Ложь.
//
Функция СтранаЯвляетсяЧленомТаможенногоСоюза(Страна, Период = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Страна) 
		ИЛИ ТипЗнч(Страна) <> Тип("СправочникСсылка.СтраныМира") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	КодСтраны = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Страна, "Код");
	
	Если Период = Неопределено Тогда
		Период = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если Период >= '2015-01-01' 
			И (КодСтраны = "112" ИЛИ КодСтраны = "398") Тогда // Казахстан, Беларусь
		Возврат Истина;
	КонецЕсли;
	
	Если Период >= '2015-01-02' И КодСтраны = "051" Тогда // Армения
		Возврат Истина;
	КонецЕсли;
	
	Если Период >= '2015-08-12' И КодСтраны = "417" Тогда // Киргизия
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область СтавкиНДС

// Возвращает текст выбора ставки НДС по умолчанию для подстановки в запрос.
//
// Параметры:
//  ИсточникДаты - Строка - путь к дате в запросе на которую необходимо получить ставку НДС по умолчанию,
//               если дата пустая, то будет получена ставка НДС на текущую дату
//  РасчетнаяСтавка - Булево - указывает необходимость получения расчетной ставки НДС X/(100 + X).
//
// Возвращаемое значение:
//	Строка - текст выбора ставки НДС.
//
Функция ТекстВыбораСтавкиНДСПоУмолчанию(ИсточникДаты = Неопределено, РасчетнаяСтавка = Ложь) Экспорт
	
	Если РасчетнаяСтавка Тогда
		Если ИсточникДаты = Неопределено Тогда
			Если ТекущаяДатаСеанса() > '20190101' Тогда
				Возврат "ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)";
			Иначе
				Возврат "ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)";
			КонецЕсли;
		Иначе
			Возврат СтрШаблон(
				"ВЫБОР
				|	КОГДА %1 >= ДАТАВРЕМЯ(2019, 1, 1) ИЛИ (%1 = ДАТАВРЕМЯ(1, 1, 1) И ДАТАВРЕМЯ(%2) >= ДАТАВРЕМЯ(2019, 1, 1))
				|		ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
				|	ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
				|КОНЕЦ", ИсточникДаты, Формат(ТекущаяДатаСеанса(), "ДФ='yyyy, MM, dd'"));
		КонецЕсли;
	Иначе
		Если ИсточникДаты = Неопределено Тогда
			Если ТекущаяДатаСеанса() > '20190101' Тогда
				Возврат "ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)";
			Иначе
				Возврат "ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)";
			КонецЕсли;
		Иначе
			Возврат СтрШаблон(
				"ВЫБОР
				|	КОГДА %1 >= ДАТАВРЕМЯ(2019, 1, 1) ИЛИ (%1 = ДАТАВРЕМЯ(1, 1, 1) И ДАТАВРЕМЯ(%2) >= ДАТАВРЕМЯ(2019, 1, 1))
				|		ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
				|	ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
				|КОНЕЦ", ИсточникДаты, Формат(ТекущаяДатаСеанса(), "ДФ='yyyy, MM, dd'"));
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Возвращает текст выбора процента НДС для подстановки в запрос.
//
// Параметры:
//  ИсточникСтавкаНДС - Строка - путь к ставке НДС в запросе для которой необходимо получить процент НДС.
//
// Возвращаемое значение:
//	Строка - текст выбора процента НДС.
//
Функция ТекстВыбораПроцентаНДС(ИсточникСтавкаНДС) Экспорт
	
	Возврат СтрШаблон(
		"ВЫБОР %1
		|	КОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
		|		ТОГДА 20
		|	КОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
		|		ТОГДА 20
		|	КОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
		|		ТОГДА 18
		|	КОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
		|		ТОГДА 18
		|	КОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
		|		ТОГДА 10
		|	КОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
		|		ТОГДА 10
		|	ИНАЧЕ 0
		|КОНЕЦ", ИсточникСтавкаНДС);

	
КонецФункции

// Возвращает ставку НДС на дату, исходя из налогообложения и свойств товара.
//
// Параметры:
//   НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - налогообложение НДС
//   Дата - Дата - дата, на которую необходимо получить ставку НДС
//   ПодакцизныйТовар - Булево - облагается ли товар акцизами
//   СтавкаНДСТовара - ПеречислениеСсылка.СтавкиНДС - ставка НДС, указанная для товара.
//
// Возвращаемое значение:
//   ПеречислениеСсылка.СтавкиНДС
//
Функция СтавкаНДС(НалогообложениеНДС, Дата, ПодакцизныйТовар, СтавкаНДСТовара) Экспорт
	
	СтрокаНоменклатуры   = Новый Структура("Номенклатура, СтавкаНДС", Справочники.Номенклатура.ПустаяСсылка());
	
	ПараметрыЗаполненияНДС = Новый Структура("НалогообложениеНДС, Дата", НалогообложениеНДС, Дата);
	ДействиеЗаполнитьНДС = Новый Структура("ЗаполнитьСтавкуНДС", ПараметрыЗаполненияНДС);
	
	КэшированныеЗначения = Новый Структура("РеквизитыНоменклатуры", Новый Соответствие);
	ПараметрыНоменклатуры = Новый Структура("ПодакцизныйТовар, СтавкаНДС", ПодакцизныйТовар, СтавкаНДСТовара);
	КэшированныеЗначения.РеквизитыНоменклатуры.Вставить(Справочники.Номенклатура.ПустаяСсылка(), ПараметрыНоменклатуры);
	
	УчетНДСУП.ЗаполнитьСтавкуНДСВСтрокеТЧ(СтрокаНоменклатуры, ДействиеЗаполнитьНДС, КэшированныеЗначения);
	
	Возврат СтрокаНоменклатуры.СтавкаНДС;
	
КонецФункции

#КонецОбласти

#Область УчетВходящегоНДС

#Область РегистрацияСчетовФактурПолученных

// см. УчетНДСУП.АктуализироватьСчетаФактурыПолученныеПередЗаписью
Процедура АктуализироватьСчетаФактурыПолученныеПередЗаписью(ПараметрыРегистрации, Знач РежимЗаписи, Знач ПометкаУдаления, Знач Проведен) Экспорт
	
	СчетФактураНеТребуется = СчетФактураПолученныйНеТребуется(ПараметрыРегистрации);
	
	ДокументПроведен = Ложь;
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ДокументПроведен = Истина;
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Запись И Проведен Тогда
		ДокументПроведен = Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОснований.Ссылка
	|ПОМЕСТИТЬ СчетаФактуры
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК ТаблицаОснований
	|ГДЕ
	|	ТаблицаОснований.ДокументОснование = &ДокументЗакупки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОснований.Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК ТаблицаОснований
	|ГДЕ
	|	ТаблицаОснований.ДокументОснование = &ДокументЗакупки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаФактуры.Ссылка КАК Ссылка,
	|	СчетаФактуры.Ссылка.Проведен КАК Проведен,
	|	СчетаФактуры.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
	|	СчетаФактуры.Ссылка.Организация КАК Организация,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаОснований.ДокументОснование) КАК КоличествоОснований
	|ИЗ
	|	СчетаФактуры КАК СчетаФактуры
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СчетФактураПолученный.ДокументыОснования КАК ТаблицаОснований
	|	ПО 
	|		СчетаФактуры.Ссылка = ТаблицаОснований.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаФактуры.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетаФактуры.Ссылка КАК Ссылка,
	|	СчетаФактуры.Ссылка.Проведен КАК Проведен,
	|	СчетаФактуры.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
	|	СчетаФактуры.Ссылка.Организация КАК Организация,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаОснований.ДокументОснование) КАК КоличествоОснований
	|ИЗ
	|	СчетаФактуры КАК СчетаФактуры
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК ТаблицаОснований
	|	ПО 
	|		СчетаФактуры.Ссылка = ТаблицаОснований.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаФактуры.Ссылка
	|";
	Запрос.УстановитьПараметр("ДокументЗакупки", ПараметрыРегистрации.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПометитьНаУдаление = Ложь;
		ОтменитьПроведение = Ложь;
		
		// Проверка типа счета-фактуры по налогообложению.
		Если (ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный") 
				И ПараметрыРегистрации.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
			 ИЛИ (ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.СчетФактураПолученныйНалоговыйАгент")
				И ПараметрыРегистрации.НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)Тогда
			ПометитьНаУдаление = Истина;
		КонецЕсли;
		
		// Синхронизация проведения и пометки удаления.
		Если НЕ Выборка.ПометкаУдаления
			 И (ПометкаУдаления
			    Или Выборка.Организация <> ПараметрыРегистрации.Организация
			    Или СчетФактураНеТребуется) Тогда
			ПометитьНаУдаление = Истина;
		ИначеЕсли Выборка.Проведен И НЕ ДокументПроведен Тогда
			ОтменитьПроведение = Истина;
		КонецЕсли;
		
		Если ПометитьНаУдаление Или ОтменитьПроведение Тогда
			ИмяДокумента = Выборка.Ссылка.Метаданные().ПолноеИмя();
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ИмяДокумента);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
		КонецЕсли;
		
		Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный")
		 Или Не ТипЗнч(ПараметрыРегистрации.Ссылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
		 Или Не Выборка.Проведен Тогда
			Если ПометитьНаУдаление Тогда
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				Если Выборка.КоличествоОснований = 1 Тогда
					ДокументОбъект.УстановитьПометкуУдаления(Истина);
				Иначе
					СтрокаКУдалению = ДокументОбъект.ДокументыОснования.Найти(ПараметрыРегистрации.Ссылка);
					Если СтрокаКУдалению <> Неопределено Тогда
						ДокументОбъект.ДокументыОснования.Удалить(СтрокаКУдалению);
						Если ДокументОбъект.Проведен Тогда
							РежимЗаписи = РежимЗаписиДокумента.Проведение;
						Иначе
							РежимЗаписи = РежимЗаписиДокумента.Запись;
						КонецЕсли;
						ДокументОбъект.Записать(РежимЗаписи);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ОтменитьПроведение Тогда
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				Если Выборка.КоличествоОснований = 1 Тогда
					ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Иначе
					СтрокаКУдалению = ДокументОбъект.ДокументыОснования.Найти(ПараметрыРегистрации.Ссылка);
					Если СтрокаКУдалению <> Неопределено Тогда
						ДокументОбъект.ДокументыОснования.Удалить(СтрокаКУдалению);
						Если ДокументОбъект.Проведен Тогда
							РежимЗаписи = РежимЗаписиДокумента.Проведение;
						Иначе
							РежимЗаписи = РежимЗаписиДокумента.Запись;
						КонецЕсли;
						ДокументОбъект.Записать(РежимЗаписи);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ПометитьНаУдаление Или ОтменитьПроведение Тогда
			УчетНДСРФВызовСервера.ОчиститьДокументПриобретенияВСчетеФактуреПолученномНалоговогоАгента(Выборка.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// см. УчетНДСУП.АктуализироватьСчетаФактурыПолученныеПриПроведении
Процедура АктуализироватьСчетаФактурыПолученныеПриПроведении(ПараметрыРегистрации) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОснований.Ссылка КАК Ссылка,
	|	ТаблицаОснований.Ссылка.Проведен КАК Проведен
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК ТаблицаОснований
	|ГДЕ
	|	ТаблицаОснований.ДокументОснование = &ДокументЗакупки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОснований.Ссылка КАК Ссылка,
	|	ТаблицаОснований.Проведен КАК Проведен
	|ИЗ
	|	Документ.ИнойДокументПодтвержденияНДС КАК ТаблицаОснований
	|ГДЕ
	|	ТаблицаОснований.ДокументОснование = &ДокументЗакупки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОснований.Ссылка КАК Ссылка,
	|	ТаблицаОснований.Ссылка.Проведен КАК Проведен
	|ИЗ
	|	Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК ТаблицаОснований
	|ГДЕ
	|	ТаблицаОснований.ДокументОснование = &ДокументЗакупки
	|";
	Запрос.УстановитьПараметр("ДокументЗакупки", ПараметрыРегистрации.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Блокировка = Новый БлокировкаДанных;
		Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			ЭлементБлокировки = Блокировка.Добавить("Документ.СчетФактураПолученный");
		ИначеЕсли ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ИнойДокументПодтвержденияНДС") Тогда
			ЭлементБлокировки = Блокировка.Добавить("Документ.ИнойДокументПодтвержденияНДС");
		Иначе
			ЭлементБлокировки = Блокировка.Добавить("Документ.СчетФактураПолученныйНалоговыйАгент");
		КонецЕсли;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный")
		 Или Не ТипЗнч(ПараметрыРегистрации.Ссылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
		 Или Не Выборка.Проведен Тогда
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ДополнительныеСвойства.Вставить("ПроверкаДокументов_Отключить", Истина);
			Если ТипЗнч(Выборка.Ссылка) <> Тип("ДокументСсылка.ИнойДокументПодтвержденияНДС") Тогда
				ДокументОбъект.ЗаполнитьПараметрыСчетаФактурыПоОснованию();
			КонецЕсли;
			Если Выборка.Проведен Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		Иначе
			УчетНДСРФВызовСервера.ОтразитьПолучениеТовараСОбратнымОбложениемНДС(Выборка.Ссылка, ПараметрыРегистрации.Ссылка);
		КонецЕсли;
			
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не СчетФактураПолученныйНеТребуется(ПараметрыРегистрации) Тогда
		ОснованияСчетаФактуры = Новый Массив;
		ОснованияСчетаФактуры.Добавить(ПараметрыРегистрации.Ссылка);
		РегистрыСведений.ТребуетсяОформлениеСчетаФактуры.ОбновитьСостояние(ПараметрыРегистрации.Ссылка, ОснованияСчетаФактуры);
	КонецЕсли;

КонецПроцедуры

// см. УчетНДСУП.АктуализироватьСчетаФактурыПолученныеПриУдаленииПроведения
Процедура АктуализироватьСчетаФактурыПолученныеПриУдаленииПроведения(ПараметрыРегистрации) Экспорт
	
	ОснованияСчетаФактуры = Новый Массив;
	ОснованияСчетаФактуры.Добавить(ПараметрыРегистрации.Ссылка);
	РегистрыСведений.ТребуетсяОформлениеСчетаФактуры.ОбновитьСостояние(ПараметрыРегистрации.Ссылка, ОснованияСчетаФактуры, Истина);
	
КонецПроцедуры

// см. УчетНДСУП.СчетаФактурыПолученныеНаОсновании
Функция СчетаФактурыПолученныеНаОсновании(ПараметрыРегистрации) Экспорт
	
	Если ПараметрыРегистрации.ВвозТоваровИзТаможенногоСоюза Тогда
		Возврат ЗаявленияОВвозеТоваровПоДокументуЗакупки(ПараметрыРегистрации);
	Иначе
		Возврат СчетаФактурыПолученныеПоДокументуЗакупки(ПараметрыРегистрации);
	КонецЕсли;
	
КонецФункции

// см. УчетНДСУП.СчетаФактурыПолученныеПоДокументамОснованиям
Функция СчетаФактурыПолученныеПоДокументамОснованиям(ДокументыОснования, ТолькоПроведенные) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОснований.ДокументОснование КАК ДокументОснование,
	|	ТаблицаОснований.Ссылка КАК Ссылка,
	|	ТаблицаОснований.Ссылка.ДатаСоставления КАК ДатаСоставления,
	|	ТаблицаОснований.Ссылка.ДатаИсправления КАК ДатаИсправления,
	|	ТаблицаОснований.Ссылка.РучнаяКорректировкаСуммДокумента КАК РучнаяКорректировкаСуммДокумента
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК ТаблицаОснований
	|ГДЕ
	|	ТаблицаОснований.ДокументОснование В (&ДокументыОснования)
	|	И НЕ ТаблицаОснований.Ссылка.ПометкаУдаления
	|	И (ТаблицаОснований.Ссылка.Проведен 
	|		ИЛИ НЕ &ТолькоПроведенные)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОснований.ДокументОснование КАК ДокументОснование,
	|	ТаблицаОснований.Ссылка КАК Ссылка,
	|	ТаблицаОснований.Ссылка.ДатаСоставления,
	|	ТаблицаОснований.Ссылка.ДатаИсправления,
	|	ЛОЖЬ КАК РучнаяКорректировкаСуммДокумента
	|ИЗ
	|	Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК ТаблицаОснований
	|ГДЕ
	|	ТаблицаОснований.ДокументОснование В (&ДокументыОснования)
	|	И НЕ ТаблицаОснований.Ссылка.ПометкаУдаления
	|	И (ТаблицаОснований.Ссылка.Проведен 
	|		ИЛИ НЕ &ТолькоПроведенные)
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСоставления ВОЗР,
	|	ДатаИсправления ВОЗР
	|";
	
	Запрос.УстановитьПараметр("ДокументыОснования", ДокументыОснования);
	Запрос.УстановитьПараметр("ТолькоПроведенные",  ТолькоПроведенные);
	
	СчетаФактуры = Запрос.Выполнить().Выгрузить();
	СчетаФактуры.Свернуть("ДокументОснование,Ссылка,РучнаяКорректировкаСуммДокумента");

	Возврат СчетаФактуры;

КонецФункции

Функция СчетаФактурыПолученныеПоДокументуЗакупки(ПараметрыРегистрации)
	
	СчетаФактуры = Новый Массив;
	ТекстСчетФактура = НСтр("ru='Регистрация счета-фактуры не требуется'");
	НавигационнаяСсылка = "";
	ЕстьПравоИнтерактивногоДобавленияДокументаПоОснованию = Ложь;
	ЕстьРасхождения = Ложь;
	
	СчетФактураТребуется = Не СчетФактураПолученныйНеТребуется(ПараметрыРегистрации);
	Если СчетФактураТребуется Тогда
		
		Если ПараметрыРегистрации.ИнойДокументПодтвержденияНДС Тогда
			ТаблицаСчетаФактуры = Документы.ИнойДокументПодтвержденияНДС.СчетаФактурыПоОснованию(ПараметрыРегистрации.Ссылка, ПараметрыРегистрации.Организация, , Ложь);
			Если ТаблицаСчетаФактуры.Количество() > 0 Тогда
				СчетФактураТребуется = Ложь;
				СчетФактура = ТаблицаСчетаФактуры[0];
				ТекстСчетФактура = Документы.ИнойДокументПодтвержденияНДС.ПредставлениеСчетаФактуры(
					СчетФактура.НаименованиеДокумента, 
					СчетФактура.Номер, 
					?(СчетФактура.Исправление, СчетФактура.ДатаИсправления, СчетФактура.ДатаСоставления),
					СчетФактура.Проведен);
				НавигационнаяСсылка = "ОткрытьИнойДокументПодтвержденияНДС";
			КонецЕсли;
		КонецЕсли;
		
		Если СчетФактураТребуется Тогда
			Если ПараметрыРегистрации.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя Тогда
				ПолноеИмяДокумента = "Документ.СчетФактураПолученныйНалоговыйАгент";
			Иначе
				ПолноеИмяДокумента = "Документ.СчетФактураПолученный";
			КонецЕсли;
			ЕстьПравоИнтерактивногоДобавленияДокументаПоОснованию = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.НайтиПоПолномуИмени(ПолноеИмяДокумента));
			
			МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяДокумента);
			ТаблицаСчетаФактуры = МенеджерДокумента.СчетаФактурыПоОснованию(ПараметрыРегистрации.Ссылка, ПараметрыРегистрации.Организация, , Ложь);
			Если ТаблицаСчетаФактуры.Количество() > 0 Тогда
				Если ТаблицаСчетаФактуры.Количество() > 1 Тогда
					ТекстСчетФактура = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					                      НСтр("ru='Счета-фактуры (%1)'"),
					                      Строка(ТаблицаСчетаФактуры.Количество()));
					НавигационнаяСсылка = "ОткрытьСписокСчетовФактурПолученных";
				Иначе
					СчетФактура = ТаблицаСчетаФактуры[0];
					ТекстСчетФактура = МенеджерДокумента.ПредставлениеСчетаФактуры(
						СчетФактура.Номер, 
						?(СчетФактура.Исправление, СчетФактура.ДатаИсправления, СчетФактура.ДатаСоставления),
						СчетФактура.Проведен);
					НавигационнаяСсылка = "ОткрытьСчетФактуруПолученный";
				КонецЕсли;
				
				Расхождения = НайтиРасхожденияТорговыхДокументовИСчетовФактурПолученных(ПараметрыРегистрации.Ссылка);
				ЕстьРасхождения = Не Расхождения.Пустой();
				Если ЕстьРасхождения Тогда
					ТекстСчетФактура = ТекстСчетФактура + " " + НСтр("ru = '(суммы изменены)'");
				КонецЕсли;
				
			ИначеЕсли ЕстьПравоИнтерактивногоДобавленияДокументаПоОснованию Тогда
				ТекстСчетФактура = НСтр("ru='Зарегистрировать счет-фактуру'");
				НавигационнаяСсылка = "ВвестиНовыйСчетФактуру";
			Иначе
				ТекстСчетФактура = НСтр("ru='Счет-фактура не зарегистрирован'");
			КонецЕсли;
		КонецЕсли;
		
		СчетаФактуры = ТаблицаСчетаФактуры.ВыгрузитьКолонку("Ссылка");
		
	КонецЕсли;
	
	Если ЕстьРасхождения Тогда
		ЦветТекста = ЦветаСтиля.ПросроченныеДанныеЦвет;
	ИначеЕсли ЗначениеЗаполнено(НавигационнаяСсылка) Тогда
		ЦветТекста = ЦветаСтиля.ЦветГиперссылки;
	Иначе
		ЦветТекста = Неопределено;
	КонецЕсли;
	
	Представление = Новый ФорматированнаяСтрока(ТекстСчетФактура, , ЦветТекста, , НавигационнаяСсылка);
	
	Результат = Новый Структура;
	Результат.Вставить("Представление", Представление);
	Результат.Вставить("СчетаФактуры", СчетаФактуры);
	Результат.Вставить("ДокументПоОснованиюТребуется", СчетФактураТребуется);
	Результат.Вставить("ЕстьПравоИнтерактивногоДобавленияДокументаПоОснованию", ЕстьПравоИнтерактивногоДобавленияДокументаПоОснованию);
	
	Возврат Результат;
	
КонецФункции

Функция ЗаявленияОВвозеТоваровПоДокументуЗакупки(ПараметрыРегистрации)
	
	ТаблицаЗаявленияОВвозе = Документы.ЗаявлениеОВвозеТоваров.ЗаявленияОВвозеТоваровПоОснованию(
								ПараметрыРегистрации.Ссылка,
								ПараметрыРегистрации.Организация,
								Ложь);
	ТекстЗаявленияОВвозе = "";
	НавигационнаяСсылка = "";
	
	ЕстьПравоИнтерактивногоДобавленияДокументаПоОснованию = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ЗаявлениеОВвозеТоваров);
	
	Если ТаблицаЗаявленияОВвозе.Количество() > 0 Тогда
		ЗаявлениеОВвозе = ТаблицаЗаявленияОВвозе[0];
		ТекстЗаявленияОВвозе = Документы.ЗаявлениеОВвозеТоваров.ПредставлениеЗаявленияОВвозеТоваров(
		                         ЗаявлениеОВвозе.Номер,
		                         ЗаявлениеОВвозе.Дата,
		                         ЗаявлениеОВвозе.Проведен,
		                         ЗаявлениеОВвозе.ДатаПодтвержденияОплаты);
		НавигационнаяСсылка = "ОткрытьЗаявлениеОВвозеТоваров";
	ИначеЕсли ЕстьПравоИнтерактивногоДобавленияДокументаПоОснованию Тогда
		ТекстЗаявленияОВвозе = НСтр("ru='Зарегистрировать заявление о ввозе товаров'");
		НавигационнаяСсылка = "ВвестиНовыйЗаявлениеОВвозеТоваров";
	Иначе
		ТекстЗаявленияОВвозе = НСтр("ru='Заявление о ввозе товаров не зарегистрировано'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НавигационнаяСсылка) Тогда
		ЦветТекста = ЦветаСтиля.ЦветГиперссылки;
	Иначе
		ЦветТекста = Неопределено;
	КонецЕсли;

	Представление = Новый ФорматированнаяСтрока(ТекстЗаявленияОВвозе, , ЦветТекста, , НавигационнаяСсылка);
	
	Результат = Новый Структура;
	Результат.Вставить("Представление", Представление);
	Результат.Вставить("СчетаФактуры",  ТаблицаЗаявленияОВвозе.ВыгрузитьКолонку("Ссылка"));
	Результат.Вставить("ДокументПоОснованиюТребуется",  Истина);
	Результат.Вставить("ЕстьПравоИнтерактивногоДобавленияДокументаПоОснованию", ЕстьПравоИнтерактивногоДобавленияДокументаПоОснованию);
	Результат.Вставить("ЕстьРасхождения", Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция СчетФактураПолученныйНеТребуется(ПараметрыРегистрации)
	
	СчетФактураНеТребуется = Ложь;
	
	Если Не ПараметрыРегистрации.ПриобретениеТоваровРаботУслуг
		И Не ПараметрыРегистрации.ЗакупкаЧерезПодотчетноеЛицо
		И Не ПараметрыРегистрации.ВозвратТоваровОтПлательщикаНДС
		И Не ПараметрыРегистрации.ИсправлениеОшибок
		И Не ПараметрыРегистрации.КорректировкаПоСогласованиюСторон Тогда
		СчетФактураНеТребуется = Истина;
	ИначеЕсли ПараметрыРегистрации.ВозвратТоваровОтПлательщикаНДС
		И (ПараметрыРегистрации.КорректировкаПоСогласованиюСторон
				И ПараметрыРегистрации.Дата < ДатаОтраженияВозвратовКорректировочнымиСФ()
			ИЛИ Не ПараметрыРегистрации.КорректировкаПоСогласованиюСторон
				И ПараметрыРегистрации.Дата >= ДатаОтраженияВозвратовКорректировочнымиСФ()) Тогда
		СчетФактураНеТребуется = Истина;
	ИначеЕсли ПараметрыРегистрации.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НалоговыйАгентПоНДС Тогда
		СчетФактураНеТребуется = Истина;
	ИначеЕсли ПараметрыРегистрации.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ЭлектронныеУслуги Тогда
		СчетФактураНеТребуется = Истина;
	ИначеЕсли ТипЗнч(ПараметрыРегистрации.Контрагент) = Тип("СправочникСсылка.Организации")
		И ПараметрыРегистрации.НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя Тогда
		// При отражении операций между организациями напрямую, регистрация счета-фактуры полученного не требуется.
		// В этом случае счет-фактура выданный в одной организации отражается полученным в другой.
		// Исключение - операции с обратным налогообложением. 
		СчетФактураНеТребуется = Истина;
	КонецЕсли;
	
	Возврат СчетФактураНеТребуется;
	
КонецФункции

#КонецОбласти

#Область ПоискРасхожденийСчетовФактурПолученныхСПервичнымиДокументами

// Возвращает результат запроса со счетами-фактурами полученными, по которым есть расхождения с суммами документов-оснований.
// Анализируются только торговые документы, по которым выставлен и проведен счет-фактура полученный. Анализируются только
// счета-фактуры, в которые вручную вносились изменения в суммы документа (установлен флаг РучнаяКорректировкаСуммДокумента).
//
// Параметры:
//   ДокументыОснования - ДокументСсылка - проверяемые документы-основания (торговые документы)
//   РучнаяКорректировка - Булево - если Истина, то отбираются только счета-фактуры с ручными корректировками, Ложь - иначе
// 
// Возвращаемое значение:
//   Результат - РезультатЗапроса - таблица значений с колонками Организация, СчетФактура
//
Функция НайтиРасхожденияТорговыхДокументовИСчетовФактурПолученных(ДокументыОснования, РучнаяКорректировка = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРасхожденияТорговыхДокументовИСчетовФактурПолученных();
	Запрос.УстановитьПараметр("ДокументыОснования", ДокументыОснования);
	Запрос.УстановитьПараметр("РучнаяКорректировка", РучнаяКорректировка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Помещает во временную таблицу счета-фактуры, в которых найдены расхождения сумм с торговыми документами.
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - в него помещаем новую временную таблицу
//  ИмяВременнойТаблицы - Строка - с этим именем таблица добавится в менеджер временных таблиц
//  ДополнительныеПараметры - Структура - структура параметров для запроса
//   - МассивОрганизаций - Массив - отбор по организациям
//   - НачалоПериода - Дата - начало периода отбора счетов-фактур полученных
//   - КонецПериода - Дата - окончание периода отбора счетов-фактур полученных
//   - ВсеОрганизации - Булево - Истина, если отбор необходимо вести по всем организациям и массив Организаций пустой или Неопределено
//   - РучнаяКорректировка - Булево - Истина, если отбираем только счета-фактуры с ручными корректировками сумм
//   
// Возвращаемое значение:
//  Число
//
Функция ПоместитьРасхожденияТорговыхДокументовИСчетовФактурПолученных(МенеджерВременныхТаблиц, ИмяВременнойТаблицы, ДополнительныеПараметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаТорговыеДокументыДляПроверкиРасхождений();

	ОбщегоНазначенияУТ.УстановитьПараметрыЗапроса(Запрос, ДополнительныеПараметры);
	ДокументыОснования = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДокументОснование");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапросаРасхожденияТорговыхДокументовИСчетовФактурПолученных(ИмяВременнойТаблицы);
	Запрос.УстановитьПараметр("ДокументыОснования", ДокументыОснования);
	Запрос.Выполнить();
	
	Возврат ДокументыОснования.Количество();
	
КонецФункции

Функция ТекстЗапросаРасхожденияТорговыхДокументовИСчетовФактурПолученных(ИмяВременнойТаблицы = Неопределено)
	
	// Для корректировочных счетов-фактур сравниваем суммы уменьшения и увеличения.
	// Для исправлений счетов-фактур не делаем проверку, т.к. в документе-основании хранятся только дельты.
	// Для обычных счетов-фактур сравниваем суммы с НДС.
	// Сравнение производим с учетом валюты счета-фактуры.
	
	Результат =
	"ВЫБРАТЬ
	|	СуммыДокументовВВалютеРегл.Регистратор КАК ДокументОснование,
	|	МАКСИМУМ(СуммыДокументовВВалютеРегл.Валюта) КАК Валюта,
	|	СУММА(СуммыДокументовВВалютеРегл.СуммаБезНДС + СуммыДокументовВВалютеРегл.СуммаНДС) КАК Сумма,
	|	СУММА((СуммыДокументовВВалютеРегл.СуммаБезНДС + СуммыДокументовВВалютеРегл.СуммаНДС) * ВЫБОР
	|			КОГДА СуммыДокументовВВалютеРегл.СуммаБезНДС + СуммыДокументовВВалютеРегл.СуммаНДС > 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаУвеличение,
	|	СУММА((СуммыДокументовВВалютеРегл.СуммаБезНДС + СуммыДокументовВВалютеРегл.СуммаНДС) * ВЫБОР
	|			КОГДА СуммыДокументовВВалютеРегл.СуммаБезНДС + СуммыДокументовВВалютеРегл.СуммаНДС > 0
	|				ТОГДА 0
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК СуммаУменьшение,
	|	СУММА(СуммыДокументовВВалютеРегл.СуммаНДС) КАК СуммаНДС,
	|	СУММА(СуммыДокументовВВалютеРегл.СуммаНДС * ВЫБОР
	|			КОГДА СуммыДокументовВВалютеРегл.СуммаНДС > 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНДСУвеличение,
	|	СУММА(СуммыДокументовВВалютеРегл.СуммаНДС * ВЫБОР
	|			КОГДА СуммыДокументовВВалютеРегл.СуммаНДС > 0
	|				ТОГДА 0
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК СуммаНДСУменьшение,
	|	СУММА(СуммыДокументовВВалютеРегл.БазаНДСРегл + СуммыДокументовВВалютеРегл.СуммаНДСРегл) КАК СуммаРегл,
	|	СУММА((СуммыДокументовВВалютеРегл.БазаНДСРегл + СуммыДокументовВВалютеРегл.СуммаНДСРегл) * ВЫБОР
	|			КОГДА СуммыДокументовВВалютеРегл.БазаНДСРегл + СуммыДокументовВВалютеРегл.СуммаНДСРегл > 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаУвеличениеРегл,
	|	СУММА((СуммыДокументовВВалютеРегл.БазаНДСРегл + СуммыДокументовВВалютеРегл.СуммаНДСРегл) * ВЫБОР
	|			КОГДА СуммыДокументовВВалютеРегл.БазаНДСРегл + СуммыДокументовВВалютеРегл.СуммаНДСРегл > 0
	|				ТОГДА 0
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК СуммаУменьшениеРегл,
	|	СУММА(СуммыДокументовВВалютеРегл.СуммаНДСРегл) КАК СуммаНДСРегл,
	|	СУММА(СуммыДокументовВВалютеРегл.СуммаНДСРегл * ВЫБОР
	|			КОГДА СуммыДокументовВВалютеРегл.СуммаНДСРегл > 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНДСУвеличениеРегл,
	|	СУММА(СуммыДокументовВВалютеРегл.СуммаНДСРегл * ВЫБОР
	|			КОГДА СуммыДокументовВВалютеРегл.СуммаНДСРегл > 0
	|				ТОГДА 0
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК СуммаНДСУменьшениеРегл
	|ПОМЕСТИТЬ вт_СуммыТорговыхДокументов
	|ИЗ
	|	РегистрСведений.СуммыДокументовВВалютеРегл КАК СуммыДокументовВВалютеРегл
	|ГДЕ
	|	СуммыДокументовВВалютеРегл.Регистратор В(&ДокументыОснования)
	|
	|СГРУППИРОВАТЬ ПО
	|	СуммыДокументовВВалютеРегл.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПервичныйДокумент.Ссылка,
	|	ПервичныйДокумент.Валюта,
	|	ПервичныйДокумент.СуммаРегл,
	|	NULL,
	|	NULL,
	|	0,
	|	NULL,
	|	NULL,
	|	ПервичныйДокумент.СуммаРегл,
	|	NULL,
	|	NULL,
	|	0,
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.ПервичныйДокумент КАК ПервичныйДокумент
	|ГДЕ
	|	ПервичныйДокумент.Ссылка В(&ДокументыОснования)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураПолученныйДокументыОснования.Ссылка.Организация КАК Организация,
	|	СчетФактураПолученныйДокументыОснования.Ссылка КАК СчетФактура,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.РучнаяКорректировкаСуммДокумента КАК РучнаяКорректировка,
	|	СчетФактураПолученныйДокументыОснования.ДокументОснование КАК ДокументОснование,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.Валюта КАК Валюта,
	|	СУММА(СчетФактураПолученныйДокументыОснования.Сумма) КАК Сумма,
	|	СУММА(СчетФактураПолученныйДокументыОснования.СуммаУвеличение) КАК СуммаУвеличение,
	|	СУММА(СчетФактураПолученныйДокументыОснования.СуммаУменьшение) КАК СуммаУменьшение,
	|	СУММА(СчетФактураПолученныйДокументыОснования.СуммаНДС) КАК СуммаНДС,
	|	СУММА(СчетФактураПолученныйДокументыОснования.СуммаНДСУвеличение) КАК СуммаНДСУвеличение,
	|	СУММА(СчетФактураПолученныйДокументыОснования.СуммаНДСУменьшение) КАК СуммаНДСУменьшение,
	|	МАКСИМУМ(СчетФактураПолученныйДокументыОснования.Ссылка.Исправление) КАК Исправление,
	|	МАКСИМУМ(СчетФактураПолученныйДокументыОснования.Ссылка.НомерИсправления) КАК НомерИсправления,
	|	МАКСИМУМ(СчетФактураПолученныйДокументыОснования.Ссылка.Корректировочный) КАК Корректировочный
	|ПОМЕСТИТЬ вт_СуммыСчетовФактур
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|ГДЕ
	|	СчетФактураПолученныйДокументыОснования.Ссылка.Проведен
	|	И СчетФактураПолученныйДокументыОснования.Ссылка.РучнаяКорректировкаСуммДокумента = &РучнаяКорректировка
	|	И СчетФактураПолученныйДокументыОснования.ДокументОснование В(&ДокументыОснования)
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетФактураПолученныйДокументыОснования.Ссылка,
	|	СчетФактураПолученныйДокументыОснования.ДокументОснование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_СуммыСчетовФактур.Организация КАК Организация,
	|	вт_СуммыСчетовФактур.СчетФактура КАК СчетФактура
	|//ПОМЕСТИТЬ
	|ИЗ
	|	вт_СуммыТорговыхДокументов КАК вт_СуммыТорговыхДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_СуммыСчетовФактур КАК вт_СуммыСчетовФактур
	|		ПО вт_СуммыТорговыхДокументов.ДокументОснование = вт_СуммыСчетовФактур.ДокументОснование
	|ГДЕ
	|	ВЫБОР
	|			КОГДА вт_СуммыСчетовФактур.Корректировочный
	|				ТОГДА НЕ ВЫБОР
	|								КОГДА вт_СуммыТорговыхДокументов.Валюта = вт_СуммыСчетовФактур.Валюта
	|									ТОГДА вт_СуммыТорговыхДокументов.СуммаУвеличение
	|								ИНАЧЕ вт_СуммыТорговыхДокументов.СуммаУвеличениеРегл
	|							КОНЕЦ = вт_СуммыСчетовФактур.СуммаУвеличение
	|						ИЛИ НЕ ВЫБОР
	|								КОГДА вт_СуммыТорговыхДокументов.Валюта = вт_СуммыСчетовФактур.Валюта
	|									ТОГДА вт_СуммыТорговыхДокументов.СуммаУменьшение
	|								ИНАЧЕ вт_СуммыТорговыхДокументов.СуммаУменьшениеРегл
	|							КОНЕЦ = вт_СуммыСчетовФактур.СуммаУменьшение
	|						ИЛИ НЕ ВЫБОР
	|								КОГДА вт_СуммыТорговыхДокументов.Валюта = вт_СуммыСчетовФактур.Валюта
	|									ТОГДА вт_СуммыТорговыхДокументов.СуммаНДСУменьшение
	|								ИНАЧЕ вт_СуммыТорговыхДокументов.СуммаНДСУменьшениеРегл
	|							КОНЕЦ = вт_СуммыСчетовФактур.СуммаНДСУменьшение
	|						ИЛИ НЕ ВЫБОР
	|								КОГДА вт_СуммыТорговыхДокументов.Валюта = вт_СуммыСчетовФактур.Валюта
	|									ТОГДА вт_СуммыТорговыхДокументов.СуммаНДСУменьшение
	|								ИНАЧЕ вт_СуммыТорговыхДокументов.СуммаНДСУменьшениеРегл
	|							КОНЕЦ = вт_СуммыСчетовФактур.СуммаНДСУменьшение
	|			КОГДА вт_СуммыСчетовФактур.Исправление И НЕ вт_СуммыСчетовФактур.НомерИсправления = ""1""
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ НЕ ВЫБОР
	|					КОГДА вт_СуммыТорговыхДокументов.Валюта = вт_СуммыСчетовФактур.Валюта
	|						ТОГДА вт_СуммыТорговыхДокументов.Сумма
	|					ИНАЧЕ вт_СуммыТорговыхДокументов.СуммаРегл
	|				КОНЕЦ = вт_СуммыСчетовФактур.Сумма
	|				ИЛИ НЕ ВЫБОР
	|					КОГДА вт_СуммыТорговыхДокументов.Валюта = вт_СуммыСчетовФактур.Валюта
	|						ТОГДА вт_СуммыТорговыхДокументов.СуммаНДС
	|					ИНАЧЕ вт_СуммыТорговыхДокументов.СуммаНДСРегл
	|				КОНЕЦ = вт_СуммыСчетовФактур.СуммаНДС
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_СуммыТорговыхДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_СуммыСчетовФактур";
	
	Если ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда
		Результат = СтрЗаменить(Результат, "//ПОМЕСТИТЬ", "ПОМЕСТИТЬ " + ИмяВременнойТаблицы);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаТорговыеДокументыДляПроверкиРасхождений()
	
	Возврат
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураПолученныйДокументыОснования.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|		ПО СчетФактураПолученный.Ссылка = СчетФактураПолученныйДокументыОснования.Ссылка
	|ГДЕ
	|	СчетФактураПолученный.Проведен
	|	И СчетФактураПолученный.РучнаяКорректировкаСуммДокумента = &РучнаяКорректировка
	|	И (&ВсеОрганизации
	|			ИЛИ СчетФактураПолученный.Организация В (&МассивОрганизаций))
	|	И СчетФактураПолученный.Дата МЕЖДУ &НачалоПериода И &КонецПериода";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область УчетИсходящегоНДС

#Область ФормированиеСчетовФактурВыданных

// см. УчетНДСУП.СчетаФактурыВыданныеНаОсновании
Функция СчетаФактурыВыданныеНаОсновании(ПараметрыРегистрации) Экспорт
	
	СчетаФактуры = Новый Массив;
	ТекстСчетФактура = НСтр("ru='Оформление счета-фактуры не требуется'");
	НавигационнаяСсылка = "";
	ЕстьПравоИнтерактивногоДобавленияДокументаПоОснованию = Ложь;
	
	СчетФактураТребуется = Не СчетФактураВыданныйНеТребуется(ПараметрыРегистрации);
	Если СчетФактураТребуется Тогда
		ЕстьПравоИнтерактивногоДобавленияДокументаПоОснованию = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.СчетФактураВыданный);
		
		Отбор = Новый Структура();
		Отбор.Вставить("Организация", ПараметрыРегистрации.Организация);
		ТаблицаСчетаФактуры = Документы.СчетФактураВыданный.СчетаФактурыПоОснованию(ПараметрыРегистрации.Ссылка, Отбор,	Неопределено, Ложь);
		ТаблицаСчетаФактуры.Свернуть("Номер,Дата,Проведен,Ссылка");
		
		Если ТаблицаСчетаФактуры.Количество() > 0 Тогда
			Если ТаблицаСчетаФактуры.Количество() > 1 Тогда
				ТекстСчетФактура = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				                      НСтр("ru='Счета-фактуры (%1)'"),
				                      Строка(ТаблицаСчетаФактуры.Количество()));
				НавигационнаяСсылка = "ОткрытьСписокСчетовФактурВыданных";
			Иначе
				СчетФактура = ТаблицаСчетаФактуры[0];
				ТекстСчетФактура = Документы.СчетФактураВыданный.ПредставлениеСчетаФактуры(
										СчетФактура.Номер, СчетФактура.Дата, СчетФактура.Проведен);
				НавигационнаяСсылка = "ОткрытьСчетФактуруВыданный";
			КонецЕсли;
		ИначеЕсли ЕстьПравоИнтерактивногоДобавленияДокументаПоОснованию Тогда
			ТекстСчетФактура = НСтр("ru='Оформить счет-фактуру'");
			НавигационнаяСсылка = "ВвестиНовыйСчетФактуруВыданный";
		Иначе
			ТекстСчетФактура = НСтр("ru='Счет-фактура не оформлен'");
		КонецЕсли;
		
		СчетаФактуры = ТаблицаСчетаФактуры.ВыгрузитьКолонку("Ссылка");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НавигационнаяСсылка) Тогда
		ЦветТекста = ЦветаСтиля.ЦветГиперссылки;
	Иначе
		ЦветТекста = Неопределено;
	КонецЕсли;
	
	Представление = Новый ФорматированнаяСтрока(ТекстСчетФактура, , ЦветТекста, , НавигационнаяСсылка);
	
	Результат = Новый Структура;
	Результат.Вставить("Представление", Представление);
	Результат.Вставить("СчетаФактуры",  СчетаФактуры);
	Результат.Вставить("ДокументПоОснованиюТребуется",  СчетФактураТребуется);
	Результат.Вставить("ЕстьПравоИнтерактивногоДобавленияДокументаПоОснованию", ЕстьПравоИнтерактивногоДобавленияДокументаПоОснованию);
	
	Возврат Результат;
	
КонецФункции

// см. УчетНДСУП.СчетаФактурыВыданныеПоДокументамОснованиям
Функция СчетаФактурыВыданныеПоДокументамОснованиям(ДокументыОснования, ТолькоПроведенные) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОснований.ДокументОснование КАК ДокументОснование,
	|	ТаблицаОснований.Ссылка КАК Ссылка,
	|	ТаблицаОснований.Ссылка.Корректировочный,
	|	ТаблицаОснований.Ссылка.Исправление,
	|	ТаблицаОснований.Ссылка.РучнаяКорректировкаСуммДокумента КАК РучнаяКорректировкаСуммДокумента
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК ТаблицаОснований
	|ГДЕ
	|	ТаблицаОснований.ДокументОснование В (&ДокументыОснования)
	|	И НЕ ТаблицаОснований.Ссылка.ПометкаУдаления
	|	И (ТаблицаОснований.Ссылка.Проведен 
	|		ИЛИ НЕ &ТолькоПроведенные)
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОснований.Ссылка.Дата ВОЗР
	|";
	Запрос.УстановитьПараметр("ДокументыОснования", ДокументыОснования);
	Запрос.УстановитьПараметр("ТолькоПроведенные", ТолькоПроведенные);
	
	СчетаФактуры = Запрос.Выполнить().Выгрузить();
	
	Возврат СчетаФактуры;

КонецФункции

// см. УчетНДСУП.АктуализироватьСчетаФактурыВыданныеПередЗаписью
Процедура АктуализироватьСчетаФактурыВыданныеПередЗаписью(ПараметрыРегистрации, Знач РежимЗаписи, Знач ПометкаУдаления, Знач Проведен) Экспорт
	
	СчетФактураВыданныйНеТребуется = СчетФактураВыданныйНеТребуется(ПараметрыРегистрации);
	ДокументПроведен = Ложь;
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ДокументПроведен = Истина;
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Запись И Проведен Тогда
		ДокументПроведен = Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОснований.Ссылка
	|ПОМЕСТИТЬ СчетаФактуры
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК ТаблицаОснований
	|ГДЕ
	|	ТаблицаОснований.ДокументОснование = &ДокументПродажи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаФактуры.Ссылка КАК Ссылка,
	|	СчетаФактуры.Ссылка.Проведен КАК Проведен,
	|	СчетаФактуры.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
	|	СчетаФактуры.Ссылка.Организация КАК Организация,
	|	КОЛИЧЕСТВО(ТаблицаОснований.ДокументОснование) КАК КоличествоОснований
	|ИЗ
	|	СчетаФактуры КАК СчетаФактуры
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СчетФактураВыданный.ДокументыОснования КАК ТаблицаОснований
	|	ПО 
	|		СчетаФактуры.Ссылка = ТаблицаОснований.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаФактуры.Ссылка
	|";
	Запрос.УстановитьПараметр("ДокументПродажи", ПараметрыРегистрации.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПометитьНаУдаление = Ложь;
		ОтменитьПроведение = Ложь;
		
		Если НЕ Выборка.ПометкаУдаления
			 И (ПометкаУдаления
			    Или Выборка.Организация <> ПараметрыРегистрации.Организация
			    Или СчетФактураВыданныйНеТребуется) Тогда
			ПометитьНаУдаление = Истина;
		ИначеЕсли Выборка.Проведен И НЕ ДокументПроведен Тогда
			ОтменитьПроведение = Истина;
		КонецЕсли;
		
		Если ПометитьНаУдаление Или ОтменитьПроведение Тогда
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.СчетФактураВыданный");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
		КонецЕсли;
		
		Если ПометитьНаУдаление Тогда
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если Выборка.КоличествоОснований = 1 Тогда
				ДокументОбъект.УстановитьПометкуУдаления(Истина);
			Иначе
				СтрокаКУдалению = ДокументОбъект.ДокументыОснования.Найти(ПараметрыРегистрации.Ссылка);
				Если СтрокаКУдалению <> Неопределено Тогда
					ДокументОбъект.ДокументыОснования.Удалить(СтрокаКУдалению);
					Если ДокументОбъект.Проведен Тогда
						РежимЗаписи = РежимЗаписиДокумента.Проведение;
					Иначе
						РежимЗаписи = РежимЗаписиДокумента.Запись;
					КонецЕсли;
					ДокументОбъект.Записать(РежимЗаписи);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ОтменитьПроведение Тогда
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если Выборка.КоличествоОснований = 1 Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				СтрокаКУдалению = ДокументОбъект.ДокументыОснования.Найти(ПараметрыРегистрации.Ссылка);
				Если СтрокаКУдалению <> Неопределено Тогда
					ДокументОбъект.ДокументыОснования.Удалить(СтрокаКУдалению);
					Если ДокументОбъект.Проведен Тогда
						РежимЗаписи = РежимЗаписиДокумента.Проведение;
					Иначе
						РежимЗаписи = РежимЗаписиДокумента.Запись;
					КонецЕсли;
					ДокументОбъект.Записать(РежимЗаписи);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// см. УчетНДСУП.АктуализироватьСчетаФактурыВыданныеПриПроведении
Процедура АктуализироватьСчетаФактурыВыданныеПриПроведении(ПараметрыРегистрации) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОснований.Ссылка КАК Ссылка,
	|	ТаблицаОснований.Ссылка.Контрагент КАК Контрагент
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК ТаблицаОснований
	|ГДЕ
	|	ТаблицаОснований.ДокументОснование = &ДокументПродажи
	|	И ТаблицаОснований.Ссылка.Проведен
	|";
	Запрос.УстановитьПараметр("ДокументПродажи", ПараметрыРегистрации.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.СчетФактураВыданный");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ДополнительныеСвойства.Вставить("АктуализацияДвижений", Истина);
		ДокументОбъект.ДополнительныеСвойства.Вставить("ПроверкаДокументов_Отключить", Истина);
		
		Если Выборка.Контрагент <> ПараметрыРегистрации.Контрагент Тогда
			ДокументОбъект.ЗаполнитьПараметрыСчетаФактурыПоОснованию();
		КонецЕсли;
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	ОснованияСчетаФактуры = Новый Массив;
	ОснованияСчетаФактуры.Добавить(ПараметрыРегистрации.Ссылка);
	РегистрыСведений.ТребуетсяОформлениеСчетаФактуры.ОбновитьСостояние(ПараметрыРегистрации.Ссылка, ОснованияСчетаФактуры);
	
КонецПроцедуры

// см. УчетНДСУП.АктуализироватьСчетаФактурыВыданныеПриУдаленииПроведения
Процедура АктуализироватьСчетаФактурыВыданныеПриУдаленииПроведения(ПараметрыРегистрации) Экспорт
	
	ОснованияСчетаФактуры = Новый Массив;
	ОснованияСчетаФактуры.Добавить(ПараметрыРегистрации.Ссылка);
	РегистрыСведений.ТребуетсяОформлениеСчетаФактуры.ОбновитьСостояние(ПараметрыРегистрации.Ссылка, ОснованияСчетаФактуры, Истина);
	
КонецПроцедуры

// см. УчетНДСУП.ЗаполнитьСчетФактураВыданный
Функция ЗаполнитьСчетФактураВыданный(СчетФактура, ПараметрыРегистрации) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Проведен", Истина);
	Результат.Вставить("СообщениеОбОшибке", "");
	
	СчетФактураОбъект = СчетФактура;
	Если ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
	КонецЕсли;
	
	СчетФактураОбъект.ДокументыОснования.Очистить();
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ДокументОснование", ПараметрыРегистрации.Ссылка);
	ДанныеЗаполнения.Вставить("Организация", ПараметрыРегистрации.Организация);
	ДанныеЗаполнения.Вставить("Контрагент", ПараметрыРегистрации.Контрагент);
	ДанныеЗаполнения.Вставить("Исправление", ПараметрыРегистрации.ИсправлениеОшибок);
	ДанныеЗаполнения.Вставить("Корректировочный", ПараметрыРегистрации.КорректировкаПоСогласованиюСторон);
	
	СчетФактураОбъект.Заполнить(ДанныеЗаполнения);
	Попытка
		Результат.Проведен = Истина;
		СчетФактураОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Результат.Проведен = Ложь;
		Результат.СообщениеОбОшибке = ОписаниеОшибки();
		СчетФактураОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// см. УчетНДСУП.СформироватьИсправительныеСчетаФактурыПоИзмененнымДокументам
Функция СформироватьИсправительныеСчетаФактурыПоИзмененнымДокументам(ТаблицаИзмененныхДокументов) Экспорт
	
	СформированныеДокументы = Новый Массив;
	
	КодЯзыка = Метаданные.ОсновнойЯзык.КодЯзыка;
	
	СформированныеДокументы = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ТаблицаИзмененныхДокументов Цикл
		
		СтруктураОснование = Новый Структура;
		СтруктураОснование.Вставить("ДокументОснование", СтрокаТаблицы.Документ);
		СтруктураОснование.Вставить("Организация",       СтрокаТаблицы.Организация);
		СтруктураОснование.Вставить("Дата",              СтрокаТаблицы.Дата);
		СтруктураОснование.Вставить("Исправление",       Истина);
		
		НовыйДокумент = Документы.СчетФактураВыданный.СоздатьДокумент();
		НовыйДокумент.Заполнить(СтруктураОснование);
		Попытка
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			ДокументСозданУспешно = Истина;
		Исключение
			ДокументСозданУспешно = Ложь;
		КонецПопытки;
		
		Если ДокументСозданУспешно Тогда
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Сформирован исправительный счет-фактура'", КодЯзыка),
				УровеньЖурналаРегистрации.Информация,
				НовыйДокумент.Метаданные(),
				НовыйДокумент.Ссылка,
				НСтр("ru = 'Сформирован исправительный счет-фактура для документа реализации товаров'", КодЯзыка),
				РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		КонецЕсли;
		
		СформированныеДокументы.Добавить(НовыйДокумент.Ссылка);
		
	КонецЦикла;
	
	Возврат СформированныеДокументы;
	
КонецФункции

Процедура ОбновитьСостояниеТребованийОформленияСчетовФактур(МассивОрганизаций = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВсеОрганизации", Не ЗначениеЗаполнено(МассивОрганизаций));
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Основание КАК Основание
	|ИЗ
	|	РегистрСведений.ТребуетсяОформлениеСчетаФактуры КАК Т
	|ГДЕ
	|	&ВсеОрганизации ИЛИ Т.Организация В (&МассивОрганизаций)";
	
	ДокументыОснования = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Основание");
	РегистрыСведений.ТребуетсяОформлениеСчетаФактуры.ОбновитьСостояние(Неопределено, ДокументыОснования);
	
КонецПроцедуры

Функция СчетФактураВыданныйНеТребуется(ПараметрыРегистрации)
	
	СчетФактураНеТребуется = Ложь;
	
	Если НЕ ПараметрыРегистрации.РеализацияТоваров
	     И НЕ ПараметрыРегистрации.РеализацияРаботУслуг
	     И НЕ ПараметрыРегистрации.РеализацияПрочихАктивов
	     И НЕ ПараметрыРегистрации.ВозвратТоваровПоставщику
	     И НЕ ПараметрыРегистрации.ПрочееНачислениеНДС
	     И НЕ ПараметрыРегистрации.ИсправлениеОшибок
	     И НЕ ПараметрыРегистрации.КорректировкаПоСогласованиюСторон Тогда
		СчетФактураНеТребуется = Истина;
	ИначеЕсли ПараметрыРегистрации.ВозвратТоваровПоставщику
		И (ПараметрыРегистрации.КорректировкаПоСогласованиюСторон
				И ПараметрыРегистрации.Дата < ДатаОтраженияВозвратовКорректировочнымиСФ()
			ИЛИ Не ПараметрыРегистрации.КорректировкаПоСогласованиюСторон
				И ПараметрыРегистрации.Дата >= ДатаОтраженияВозвратовКорректировочнымиСФ()) Тогда
		СчетФактураНеТребуется = Истина;
	КонецЕсли;
	
	Возврат СчетФактураНеТребуется;
	
КонецФункции

#КонецОбласти

#Область ФормированиеСчетовФактурКомиссионеру

// см. УчетНДСУП.СчетаФактурыКомиссионеруНаОсновании
Функция СчетаФактурыКомиссионеруНаОсновании(ПараметрыРегистрации) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Представление", Новый ФорматированнаяСтрока(""));
	Результат.Вставить("СчетаФактуры",  Новый Массив);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетаФактурыКомитентов.Покупатель,
	|	СчетаФактурыКомитентов.НомерСчетаФактуры,
	|	СчетаФактурыКомитентов.ДатаСчетаФактуры
	|ИЗ
	|	РегистрСведений.СчетаФактурыКомиссионерамКОформлению КАК СчетаФактурыКомитентов
	|ГДЕ
	|	СчетаФактурыКомитентов.ОтчетКомиссионера = &Ссылка
	|";
	
	Запрос.УстановитьПараметр("Ссылка", ПараметрыРегистрации.Ссылка);
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	НавигационнаяСсылка = "";
	СчетаФактуры = Новый Массив;;
	Если Не РезультатЗапроса.Пустой() Тогда
		
		КоличествоКОформлению = РезультатЗапроса.Выбрать().Количество();
		ТекстСчетФактура = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		                      НСтр("ru='Требуется оформление счетов-фактур комиссионеру (%1)'"),
		                      Строка(КоличествоКОформлению));
		НавигационнаяСсылка = "ОткрытьСчетаФактурыКомиссионеруКОформлению";
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыРегистрации.Ссылка) Тогда
		
		ТаблицаСчетаФактуры = Документы.СчетФактураКомиссионеру.СчетаФактурыПоОснованию(ПараметрыРегистрации.Ссылка, ПараметрыРегистрации.Организация);
		Если ТаблицаСчетаФактуры.Количество() > 1 Тогда
			ТекстСчетФактура = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                      НСтр("ru='Счета-фактуры выданные комиссионеру (%1)'"),
			                      Строка(ТаблицаСчетаФактуры.Количество()));
			НавигационнаяСсылка = "ОткрытьСписокСчетовФактурКомиссионеру";
		ИначеЕсли ТаблицаСчетаФактуры.Количество() = 1 Тогда
			СчетФактура = ТаблицаСчетаФактуры[0];
			ТекстСчетФактура = Документы.СчетФактураКомиссионеру.ПредставлениеСчетаФактуры(
			                      СчетФактура.Номер, СчетФактура.Дата, СчетФактура.Проведен);
			НавигационнаяСсылка = "ОткрытьСчетФактуруКомиссионеру";
		Иначе
			ТекстСчетФактура = НСтр("ru='Оформление счетов-фактур комиссионеру не требуется'");
		КонецЕсли;
		СчетаФактуры = ТаблицаСчетаФактуры.ВыгрузитьКолонку("Ссылка");
		
	Иначе
		ТекстСчетФактура = НСтр("ru='Счета-фактуры комиссионеру'");
		НавигационнаяСсылка = "ОткрытьСчетаФактурыКомиссионеруКОформлению";
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
		
	Если ЗначениеЗаполнено(НавигационнаяСсылка) Тогда
		ЦветТекста = ЦветаСтиля.ЦветГиперссылки;
	Иначе
		ЦветТекста = Неопределено;
	КонецЕсли;
	
	Представление = Новый ФорматированнаяСтрока(ТекстСчетФактура, , ЦветТекста, , НавигационнаяСсылка);
	
	Результат = Новый Структура;
	Результат.Вставить("Представление", Представление);
	Результат.Вставить("СчетаФактуры",  СчетаФактуры);
	
	Возврат Результат;
	
КонецФункции

// см. УчетНДСУП.АктуализироватьСчетаФактурыКомиссионеруПередЗаписью
Процедура АктуализироватьСчетаФактурыКомиссионеруПередЗаписью(ПараметрыРегистрации, Знач РежимЗаписи, Знач ПометкаУдаления, Знач Проведен) Экспорт
	
	ДокументПроведен = Ложь;
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ДокументПроведен = Истина;
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Запись И Проведен Тогда
		ДокументПроведен = Истина;
	КонецЕсли;  
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураКомиссионеру.Ссылка КАК Ссылка,
	|	СчетФактураКомиссионеру.ПометкаУдаления КАК ПометкаУдаления,
	|	СчетФактураКомиссионеру.Проведен КАК Проведен,
	|	СчетФактураКомиссионеру.Организация КАК Организация
	|ИЗ
	|	Документ.СчетФактураКомиссионеру КАК СчетФактураКомиссионеру
	|ГДЕ
	|	СчетФактураКомиссионеру.ДокументОснование = &ОтчетКомиссионера
	|";
	Запрос.УстановитьПараметр("ОтчетКомиссионера", ПараметрыРегистрации.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПометитьНаУдаление = Ложь;
		ОтменитьПроведение = Ложь;
		
		Если НЕ Выборка.ПометкаУдаления
			 И (ПометкаУдаления Или Выборка.Организация <> ПараметрыРегистрации.Организация) Тогда
			ПометитьНаУдаление = Истина;
		ИначеЕсли Выборка.Проведен И НЕ ДокументПроведен Тогда
			ОтменитьПроведение = Истина;
		КонецЕсли;
		
		Если ПометитьНаУдаление Или ОтменитьПроведение Тогда
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.СчетФактураКомиссионеру");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ПометитьНаУдаление Тогда
				ДокументОбъект.УстановитьПометкуУдаления(Истина); 
			КонецЕсли;
			
			Если ОтменитьПроведение Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// см. УчетНДСУП.АктуализироватьСчетаФактурыКомиссионеруПриПроведении
Процедура АктуализироватьСчетаФактурыКомиссионеруПриПроведении(ПараметрыРегистрации) Экспорт
	
	Запрос = Новый Запрос; 
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураКомиссионеру.Ссылка
	|ИЗ
	|	Документ.СчетФактураКомиссионеру КАК СчетФактураКомиссионеру
	|ГДЕ
	|	СчетФактураКомиссионеру.ДокументОснование = &ОтчетКомиссионера
	|	И СчетФактураКомиссионеру.Проведен
	|";
	Запрос.УстановитьПараметр("ОтчетКомиссионера", ПараметрыРегистрации.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.СчетФактураКомиссионеру");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ДополнительныеСвойства.Вставить("АктуализацияДвижений", Истина);
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	МассивОснований = Новый Массив;
	МассивОснований.Добавить(ПараметрыРегистрации.Ссылка);
	РегистрыСведений.СчетаФактурыКомиссионерамКОформлению.ОбновитьСостояние(МассивОснований);
	
КонецПроцедуры

// см. УчетНДСУП.АктуализироватьСчетаФактурыКомиссионеруПриУдаленииПроведения
Процедура АктуализироватьСчетаФактурыКомиссионеруПриУдаленииПроведения(ПараметрыРегистрации) Экспорт
	
	МассивОснований = Новый Массив;
	МассивОснований.Добавить(ПараметрыРегистрации.Ссылка);
	РегистрыСведений.СчетаФактурыКомиссионерамКОформлению.ОбновитьСостояние(МассивОснований);

КонецПроцедуры

#КонецОбласти

#Область РегистрацияСчетовФактурКомитента

// см. УчетНДСУП.АктуализироватьСчетаФактурыКомитентаПриПроведении
Процедура АктуализироватьСчетаФактурыКомитентаПриПроведении(СчетаФактурыВыданныеПокупателям) Экспорт
	
	РегистрыСведений.СчетаФактурыКомитентовКРегистрации.ОбновитьСостояние(СчетаФактурыВыданныеПокупателям);

КонецПроцедуры

// см. УчетНДСУП.АктуализироватьСчетаФактурыКомитентаПриУдаленииПроведения
Процедура АктуализироватьСчетаФактурыКомитентаПриУдаленииПроведения(СчетаФактурыВыданныеПокупателям) Экспорт
	
	РегистрыСведений.СчетаФактурыКомитентовКРегистрации.ОбновитьСостояние(СчетаФактурыВыданныеПокупателям);
	
КонецПроцедуры

// См. УчетНДСУП.ДополнитьТаблицуДаннымиСчетовФактурВыданныхПокупателям
Функция ТекстЗапросаСчетовФактурВыданныхПокупателямДляОтчетаКомитенту() Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&ПоляТаблицы,
	|	ИмяТаблицы.ДокументРеализации КАК ДокументРеализации,
	|	НАЧАЛОПЕРИОДА(ЕСТЬNULL(СчетФактураВыданныйПоРеализации.Ссылка.Дата, 
	|		ЕСТЬNULL(СчетФактураВыданныйПоДатеИНомеру.Ссылка.Дата,
	|			ЕСТЬNULL(СчетФактураКомиссионеруПоДатеИНомеру.Ссылка.Дата,
	|				ИмяТаблицы.ДатаСчетаФактуры))), ДЕНЬ) КАК ДатаСчетаФактуры,
	|	ЕСТЬNULL(СчетФактураВыданныйПоРеализации.Ссылка.Номер,
	|		ЕСТЬNULL(СчетФактураВыданныйПоДатеИНомеру.Ссылка.Номер,
	|			ЕСТЬNULL(СчетФактураКомиссионеруПоДатеИНомеру.Ссылка.Номер,
	|				ИмяТаблицы.НомерСчетаФактуры))) КАК НомерСчетаФактуры,
	|	ЕСТЬNULL(СчетФактураВыданныйПоРеализации.Ссылка.Контрагент,
	|		ЕСТЬNULL(СчетФактураВыданныйПоДатеИНомеру.Контрагент,
	|			ЕСТЬNULL(СчетФактураКомиссионеруПоДатеИНомеру.Покупатель,
	|				ИмяТаблицы.Покупатель))) КАК Покупатель,
	|	ЕСТЬNULL(СчетФактураВыданныйПоРеализации.Ссылка,
	|		ЕСТЬNULL(СчетФактураВыданныйПоДатеИНомеру.Ссылка,
	|				СчетФактураКомиссионеруПоДатеИНомеру.Ссылка))  КАК СчетФактура
	|ПОМЕСТИТЬ ИмяТаблицыПредварительная
	|ИЗ
	|	ИмяТаблицы КАК ИмяТаблицы
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйПоРеализации
	|	ПО
	|		СчетФактураВыданныйПоРеализации.ДокументОснование = ИмяТаблицы.ДокументРеализации
	|		И СчетФактураВыданныйПоРеализации.Ссылка.Организация = ИмяТаблицы.Организация
	|		И СчетФактураВыданныйПоРеализации.Ссылка.Проведен
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.СчетФактураВыданный КАК СчетФактураВыданныйПоДатеИНомеру
	|	ПО
	|		НАЧАЛОПЕРИОДА(СчетФактураВыданныйПоДатеИНомеру.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(ИмяТаблицы.ДатаСчетаФактуры, ДЕНЬ)
	|		И СчетФактураВыданныйПоДатеИНомеру.Номер = ИмяТаблицы.НомерСчетаФактуры
	|		И СчетФактураВыданныйПоДатеИНомеру.Контрагент = ИмяТаблицы.Покупатель
	|		И СчетФактураВыданныйПоДатеИНомеру.Организация = ИмяТаблицы.Организация
	|		И СчетФактураВыданныйПоДатеИНомеру.Ссылка.Проведен
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.СчетФактураКомиссионеру.Покупатели КАК СчетФактураКомиссионеруПоДатеИНомеру
	|	ПО
	|		НАЧАЛОПЕРИОДА(СчетФактураКомиссионеруПоДатеИНомеру.Ссылка.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(ИмяТаблицы.ДатаСчетаФактуры, ДЕНЬ)
	|		И СчетФактураКомиссионеруПоДатеИНомеру.НомерСчетаФактуры = ИмяТаблицы.НомерСчетаФактуры
	|		И СчетФактураКомиссионеруПоДатеИНомеру.Покупатель = ИмяТаблицы.Покупатель
	|		И СчетФактураКомиссионеруПоДатеИНомеру.Ссылка.Организация = ИмяТаблицы.Организация
	|		И СчетФактураКомиссионеруПоДатеИНомеру.Ссылка.Проведен
	|;
	|
	|/////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИмяТаблицы
	|;
	|
	|/////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ИмяТаблицы
	|ИЗ
	|	ИмяТаблицыПредварительная";

	Возврат ТекстЗапроса
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбщиеПроцедурыСчетовФактур

// Устанавливает параметры запроса проведения по журналу счетов-фактур для счета-фактуры выставленного: 
//  ДатаВыставления и КодВидаОперацииКомиссия
//
// Параметры:
//  Реквизиты - ВыборкаИзРезультатаЗапроса - Выборка реквизитов шапки документа
//   *Необходимые реквизиты: Период, ДатаВыставления/ДатаПолучения, Исправление, ДатаСчетаФактурыОснования, КодВидаОперации
//  Запрос - Запрос - Запрос проведения документа
//
Процедура УстановитьПараметрыЗапросаПроведенияПоЖурналуСчетаФактурыВыставленного(Реквизиты, Запрос) Экспорт
	
	ВерсияПостановления1137 = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(Макс(Реквизиты.ДатаВыставления,Реквизиты.Период));
	
	Если Не ЗначениеЗаполнено(Реквизиты.ДатаВыставления) Тогда
		ДатаВыставления = Реквизиты.Период;
	ИначеЕсли ВерсияПостановления1137 >= 4 Тогда
		ДатаВыставления = ?(Реквизиты.Исправление, Реквизиты.ДатаСчетаФактурыОснования, Реквизиты.Период);
	Иначе
		ДатаВыставления = Реквизиты.ДатаВыставления;
	КонецЕсли;
		
	КодВидаОперацииКомиссия = 
		УчетНДСПереопределяемый.КодВидаОперацииКомиссия(Реквизиты.КодВидаОперации, ДатаВыставления);
	
	Запрос.УстановитьПараметр("ДатаВыставления",         ДатаВыставления);
	Запрос.УстановитьПараметр("КодВидаОперацииКомиссия", КодВидаОперацииКомиссия);
	
КонецПроцедуры

// Устанавливает параметры запроса проведения по журналу счетов-фактур для счета-фактуры полученного:
//  ДатаПолучения и КодВидаОперацииКомиссия
//
// Параметры:
//  Реквизиты - ВыборкаИзРезультатаЗапроса - Выборка реквизитов шапки документа
//   *Необходимые реквизиты: Период, ДатаПолучения, Исправление, ДатаИсправления, КодВидаОперации
//  Запрос - Запрос - Запрос проведения документа
//
Процедура УстановитьПараметрыЗапросаПроведенияПоЖурналуСчетаФактурыПолученного(Реквизиты, Запрос) Экспорт
	
	ВерсияПостановления1137 = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(Макс(Реквизиты.ДатаПолучения,Реквизиты.Период));
	
	Если Не ЗначениеЗаполнено(Реквизиты.ДатаПолучения) Тогда
		ДатаПолучения = Реквизиты.Период;
	ИначеЕсли ВерсияПостановления1137 >= 4 Тогда
		ДатаПолучения = ?(Реквизиты.Исправление, Реквизиты.ДатаИсправления, Реквизиты.Период);
	Иначе
		ДатаПолучения = Реквизиты.ДатаПолучения;
	КонецЕсли;
		
	КодВидаОперацииКомиссия = 
		УчетНДСПереопределяемый.КодВидаОперацииКомиссия(Реквизиты.КодВидаОперации, ДатаПолучения);
	
	Запрос.УстановитьПараметр("ДатаПолучения",           ДатаПолучения);
	Запрос.УстановитьПараметр("КодВидаОперацииКомиссия", КодВидаОперацииКомиссия);
	
	СтавкиБезНДС = Новый Массив;
	СтавкиБезНДС.Добавить(Перечисления.СтавкиНДС.БезНДС);
	СтавкиБезНДС.Добавить(Перечисления.СтавкиНДС.НДС0);
	Запрос.УстановитьПараметр("СтавкиБезНДС", СтавкиБезНДС);

КонецПроцедуры

Процедура ЗаполнитьЗависимыеОтКонтрагентаРеквизитыФормы(Форма, ДатаСведений, ИзменятьИННКПП = Ложь) Экспорт
	
	Форма.КонтрагентЮрЛицо                        = Ложь;
	Форма.НеобходимоЗаполнитьГоловногоКонтрагента = Ложь;
	
	Форма.СписокВыбораКПП.Очистить();
	
	Если ЗначениеЗаполнено(Форма.Объект.Контрагент) И ТипЗнч(Форма.Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		РеквизитыКлиента = Справочники.Контрагенты.РеквизитыКонтрагента(Форма.Объект.Контрагент, ДатаСведений);
		
		Форма.НеобходимоЗаполнитьГоловногоКонтрагента = (РеквизитыКлиента.ОбособленноеПодразделение = Истина
			И Не ЗначениеЗаполнено(РеквизитыКлиента.ГоловнойКонтрагент));
		Форма.КонтрагентЮрЛицо = (РеквизитыКлиента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо);
		
		Если ИзменятьИННКПП Тогда
			Форма.Объект.ИННКонтрагента = РеквизитыКлиента.ИНН;
			Форма.Объект.КППКонтрагента = РеквизитыКлиента.КПП;
		КонецЕсли;
		
	Иначе
		
		Форма.Объект.ИННКонтрагента = "";
		Форма.Объект.КППКонтрагента = "";
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСписокВыбораКППСчетФактурыВыданные(СписокВыбора, Контрагент, ДатаСведений) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ КонтрагентыХолдинга
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = &Контрагент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.Ссылка = &Контрагент
	|	И Контрагенты.ГоловнойКонтрагент = &Контрагент
	|	И Контрагенты.ОбособленноеПодразделение
	|	И НЕ Контрагенты.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ИсторияКППКонтрагентов.Период) КАК Период,
	|	ИсторияКППКонтрагентов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ЗначенияКПП
	|ИЗ
	|	Справочник.Контрагенты.ИсторияКПП КАК ИсторияКППКонтрагентов
	|ГДЕ
	|	ИсторияКППКонтрагентов.Ссылка  В (ВЫБРАТЬ РАЗЛИЧНЫЕ КонтрагентыХолдинга.Ссылка ИЗ КонтрагентыХолдинга КАК КонтрагентыХолдинга)
	|	И ИсторияКППКонтрагентов.Период <= &ДатаСведений
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсторияКППКонтрагентов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ИсторияКППКонтрагентов.КПП КАК КПП,
	|	ИсторияКППКонтрагентов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ИсторическоеЗначениеКПП
	|ИЗ
	|	ЗначенияКПП КАК ЗначенияКПП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ИсторияКПП КАК ИсторияКППКонтрагентов
	|		ПО ЗначенияКПП.Ссылка = ИсторияКППКонтрагентов.Ссылка
	|			И ЗначенияКПП.Период = ИсторияКППКонтрагентов.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ИсторическоеЗначениеКПП.КПП, Контрагенты.КПП) КАК КПП,
	|	Контрагенты.Представление КАК ПредставлениеКонтрагента
	|ПОМЕСТИТЬ ДанныеКонтрагентов
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КонтрагентыХолдинга КАК КонтрагентыХолдинга
	|			ПО Контрагенты.Ссылка = КонтрагентыХолдинга.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИсторическоеЗначениеКПП КАК ИсторическоеЗначениеКПП
	|			ПО ИсторическоеЗначениеКПП.Ссылка = Контрагенты.Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	КПП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	СчетФактураВыданный.КППКонтрагента КАК КПП
	|ПОМЕСТИТЬ ДанныеСчетовФактуры
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Контрагент = &Контрагент
	|	И СчетФактураВыданный.Проведен
	|	И НЕ СчетФактураВыданный.КППКонтрагента = """"
	|	И НЕ СчетФактураВыданный.КППКонтрагента В
	|				(ВЫБРАТЬ
	|					ДанныеКонтрагентов.КПП
	|				ИЗ
	|					ДанныеКонтрагентов КАК ДанныеКонтрагентов)
	|	
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ 
	|	СчетФактураВыданныйАванс.КППКонтрагента КАК КПП
	|ИЗ
	|	Документ.СчетФактураВыданныйАванс КАК СчетФактураВыданныйАванс
	|ГДЕ
	|	СчетФактураВыданныйАванс.Контрагент = &Контрагент
	|	И СчетФактураВыданныйАванс.Проведен
	|	И НЕ СчетФактураВыданныйАванс.КППКонтрагента = """"
	|	И НЕ СчетФактураВыданныйАванс.КППКонтрагента В
	|				(ВЫБРАТЬ
	|					ДанныеКонтрагентов.КПП
	|				ИЗ
	|					ДанныеКонтрагентов КАК ДанныеКонтрагентов)
	|	
	|ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ
	|	СчетФактураКомиссионеру.КПППокупателя
	|ИЗ
	|	Документ.СчетФактураКомиссионеру.Покупатели КАК СчетФактураКомиссионеру
	|ГДЕ
	|	СчетФактураКомиссионеру.Покупатель = &Контрагент
	|	И СчетФактураКомиссионеру.Ссылка.Проведен
	|	И НЕ СчетФактураКомиссионеру.КПППокупателя = """"
	|	И НЕ СчетФактураКомиссионеру.КПППокупателя В
	|				(ВЫБРАТЬ
	|					ДанныеКонтрагентов.КПП
	|				ИЗ
	|					ДанныеКонтрагентов КАК ДанныеКонтрагентов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКонтрагентов.КПП КАК КПП,
	|	ДанныеКонтрагентов.ПредставлениеКонтрагента КАК ПредставлениеКонтрагента
	|ИЗ
	|	ДанныеКонтрагентов КАК ДанныеКонтрагентов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеСчетовФактуры.КПП,
	|	""""
	|ИЗ
	|	ДанныеСчетовФактуры КАК ДанныеСчетовФактуры";
	

	СписокВыбора.Очистить();
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		ПредставлениеКПП = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2",
			?(ПустаяСтрока(Выборка.КПП), Нстр("ru = '<не задан>'"), Выборка.КПП),
			?(ПустаяСтрока(Выборка.ПредставлениеКонтрагента), "", "(" + Выборка.ПредставлениеКонтрагента + ")"));
		СписокВыбора.Добавить(Выборка.КПП, ПредставлениеКПП);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСписокВыбораКППСчетФактурыПолученные(СписокВыбора, Контрагент, ДатаСведений) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ КонтрагентыХолдинга
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = &Контрагент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.Ссылка = &Контрагент
	|	И Контрагенты.ГоловнойКонтрагент = &Контрагент
	|	И Контрагенты.ОбособленноеПодразделение
	|	И НЕ Контрагенты.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	МАКСИМУМ(ИсторияКППКонтрагентов.Период) КАК Период,
	|	ИсторияКППКонтрагентов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ЗначенияКПП
	|ИЗ
	|	Справочник.Контрагенты.ИсторияКПП КАК ИсторияКППКонтрагентов
	|ГДЕ
	|	ИсторияКППКонтрагентов.Ссылка  В (ВЫБРАТЬ РАЗЛИЧНЫЕ КонтрагентыХолдинга.Ссылка ИЗ КонтрагентыХолдинга КАК КонтрагентыХолдинга)
	|	И ИсторияКППКонтрагентов.Период <= &ДатаСведений
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсторияКППКонтрагентов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ИсторияКППКонтрагентов.КПП КАК КПП,
	|	ИсторияКППКонтрагентов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ИсторическоеЗначениеКПП
	|ИЗ
	|	ЗначенияКПП КАК ЗначенияКПП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ИсторияКПП КАК ИсторияКППКонтрагентов
	|		ПО ЗначенияКПП.Ссылка = ИсторияКППКонтрагентов.Ссылка
	|			И ЗначенияКПП.Период = ИсторияКППКонтрагентов.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ 
	|	ЕСТЬNULL(ИсторическоеЗначениеКПП.КПП, Контрагенты.КПП) КАК КПП,
	|	Контрагенты.Представление КАК ПредставлениеКонтрагента
	|ПОМЕСТИТЬ ДанныеКонтрагентов
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КонтрагентыХолдинга КАК КонтрагентыХолдинга
	|			ПО Контрагенты.Ссылка = КонтрагентыХолдинга.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИсторическоеЗначениеКПП КАК ИсторическоеЗначениеКПП
	|			ПО ИсторическоеЗначениеКПП.Ссылка = Контрагенты.Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	КПП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	СчетФактураПолученный.КППКонтрагента КАК КПП
	|ПОМЕСТИТЬ ДанныеСчетовФактуры
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.Контрагент = &Контрагент
	|	И СчетФактураПолученный.Проведен
	|	И НЕ СчетФактураПолученный.КППКонтрагента = """"
	|	И НЕ СчетФактураПолученный.КППКонтрагента В
	|				(ВЫБРАТЬ
	|					ДанныеКонтрагентов.КПП
	|				ИЗ
	|					ДанныеКонтрагентов КАК ДанныеКонтрагентов)
	|	
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ 
	|	СчетФактураПолученный.КППКонтрагента КАК КПП
	|ИЗ
	|	Документ.СчетФактураПолученныйНалоговыйАгент КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.Контрагент = &Контрагент
	|	И СчетФактураПолученный.Проведен
	|	И НЕ СчетФактураПолученный.КППКонтрагента = """"
	|	И НЕ СчетФактураПолученный.КППКонтрагента В
	|				(ВЫБРАТЬ
	|					ДанныеКонтрагентов.КПП
	|				ИЗ
	|					ДанныеКонтрагентов КАК ДанныеКонтрагентов)
	|	
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ 
	|	СчетФактураПолученныйАванс.КППКонтрагента КАК КПП
	|ИЗ
	|	Документ.СчетФактураПолученныйАванс КАК СчетФактураПолученныйАванс
	|ГДЕ
	|	СчетФактураПолученныйАванс.Контрагент = &Контрагент
	|	И СчетФактураПолученныйАванс.Проведен
	|	И НЕ СчетФактураПолученныйАванс.КППКонтрагента = """"
	|	И НЕ СчетФактураПолученныйАванс.КППКонтрагента В
	|				(ВЫБРАТЬ
	|					ДанныеКонтрагентов.КПП
	|				ИЗ
	|					ДанныеКонтрагентов КАК ДанныеКонтрагентов)
	|	
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ 
	|	ЗаписьКнигиПокупок.КППКонтрагента КАК КПП
	|ИЗ
	|	Документ.ЗаписьКнигиПокупок КАК ЗаписьКнигиПокупок
	|ГДЕ
	|	ЗаписьКнигиПокупок.Контрагент = &Контрагент
	|	И ЗаписьКнигиПокупок.Проведен
	|	И НЕ ЗаписьКнигиПокупок.КППКонтрагента = """"
	|	И НЕ ЗаписьКнигиПокупок.КППКонтрагента В
	|				(ВЫБРАТЬ
	|					ДанныеКонтрагентов.КПП
	|				ИЗ
	|					ДанныеКонтрагентов КАК ДанныеКонтрагентов)
	|	
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ 
	|	СчетФактураНаНеподтвержденнуюРеализацию0.КППКонтрагента КАК КПП
	|ИЗ
	|	Документ.СчетФактураНаНеподтвержденнуюРеализацию0 КАК СчетФактураНаНеподтвержденнуюРеализацию0
	|ГДЕ
	|	СчетФактураНаНеподтвержденнуюРеализацию0.Контрагент = &Контрагент
	|	И СчетФактураНаНеподтвержденнуюРеализацию0.Проведен
	|	И НЕ СчетФактураНаНеподтвержденнуюРеализацию0.КППКонтрагента = """"
	|	И НЕ СчетФактураНаНеподтвержденнуюРеализацию0.КППКонтрагента В
	|				(ВЫБРАТЬ
	|					ДанныеКонтрагентов.КПП
	|				ИЗ
	|					ДанныеКонтрагентов КАК ДанныеКонтрагентов)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ 
	|	СчетФактураКомитента.КППКомитента КАК КПП
	|ИЗ
	|	Документ.СчетФактураКомитента КАК СчетФактураКомитента
	|ГДЕ
	|	СчетФактураКомитента.Комитент = &Контрагент
	|	И СчетФактураКомитента.Проведен
	|	И НЕ СчетФактураКомитента.КППКомитента = """"
	|	И НЕ СчетФактураКомитента.КППКомитента В
	|				(ВЫБРАТЬ
	|					ДанныеКонтрагентов.КПП
	|				ИЗ
	|					ДанныеКонтрагентов КАК ДанныеКонтрагентов)
	|ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ
	|	СчетФактураКомитентаПокупатели.КППСубкомиссионера
	|ИЗ
	|	Документ.СчетФактураКомитента.Покупатели КАК СчетФактураКомитентаПокупатели
	|ГДЕ
	|	СчетФактураКомитентаПокупатели.Покупатель = &Контрагент
	|	И СчетФактураКомитентаПокупатели.Ссылка.Проведен
	|	И НЕ СчетФактураКомитентаПокупатели.КППСубкомиссионера = """"
	|	И НЕ СчетФактураКомитентаПокупатели.КППСубкомиссионера В
	|				(ВЫБРАТЬ
	|					ДанныеКонтрагентов.КПП
	|				ИЗ
	|					ДанныеКонтрагентов КАК ДанныеКонтрагентов)
	|	
	|ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ
	|	СчетФактураПолученныйПродавцы.КПППродавца
	|ИЗ
	|	Документ.СчетФактураПолученный.Продавцы КАК СчетФактураПолученныйПродавцы
	|ГДЕ
	|	СчетФактураПолученныйПродавцы.Продавец = &Контрагент
	|	И СчетФактураПолученныйПродавцы.Ссылка.Проведен
	|	И НЕ СчетФактураПолученныйПродавцы.КПППродавца = """"
	|	И НЕ СчетФактураПолученныйПродавцы.КПППродавца В
	|				(ВЫБРАТЬ
	|					ДанныеКонтрагентов.КПП
	|				ИЗ
	|					ДанныеКонтрагентов КАК ДанныеКонтрагентов)
	|	
	|ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ
	|	СчетФактураПолученныйАвансПродавцы.КПППродавца
	|ИЗ
	|	Документ.СчетФактураПолученныйАванс.Продавцы КАК СчетФактураПолученныйАвансПродавцы
	|ГДЕ
	|	СчетФактураПолученныйАвансПродавцы.Продавец = &Контрагент
	|	И СчетФактураПолученныйАвансПродавцы.Ссылка.Проведен
	|	И НЕ СчетФактураПолученныйАвансПродавцы.КПППродавца = """"
	|	И НЕ СчетФактураПолученныйАвансПродавцы.КПППродавца В
	|				(ВЫБРАТЬ
	|					ДанныеКонтрагентов.КПП
	|				ИЗ
	|					ДанныеКонтрагентов КАК ДанныеКонтрагентов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКонтрагентов.КПП КАК КПП,
	|	ДанныеКонтрагентов.ПредставлениеКонтрагента КАК ПредставлениеКонтрагента
	|ИЗ
	|	ДанныеКонтрагентов КАК ДанныеКонтрагентов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеСчетовФактуры.КПП,
	|	""""
	|ИЗ
	|	ДанныеСчетовФактуры КАК ДанныеСчетовФактуры";
	

	СписокВыбора.Очистить();
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		ПредставлениеКПП = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2",
			?(ПустаяСтрока(Выборка.КПП), Нстр("ru = '<не задан>'"), Выборка.КПП),
			?(ПустаяСтрока(Выборка.ПредставлениеКонтрагента), "", "(" + Выборка.ПредставлениеКонтрагента + ")"));
		СписокВыбора.Добавить(Выборка.КПП, ПредставлениеКПП);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПродавцов(Форма, СписокПродавцов, ДатаСведений, ПолучатьИННКПП = Ложь) Экспорт
	
	Форма.Объект.Продавцы.Очистить();
	Для Каждого Элемент Из СписокПродавцов Цикл
		НоваяСтрока = Форма.Объект.Продавцы.Добавить();
		Если ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
		Иначе
			НоваяСтрока.Продавец = Элемент.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если ПолучатьИННКПП Тогда
		
		Продавцы = Новый Массив;
		Для каждого Строка Из Форма.Объект.Продавцы Цикл
			Если ЗначениеЗаполнено(Строка.Продавец) Тогда
				Продавцы.Добавить(Строка.Продавец);
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ИсторияКППКонтрагентов.Период) КАК Период,
		|	ИсторияКППКонтрагентов.Ссылка           КАК Ссылка
		|ПОМЕСТИТЬ ЗначенияКПП
		|ИЗ
		|	Справочник.Контрагенты.ИсторияКПП КАК ИсторияКППКонтрагентов
		|ГДЕ
		|	ИсторияКППКонтрагентов.Ссылка  В (&Контрагенты)
		|	И ИсторияКППКонтрагентов.Период <= &ДатаСведений
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсторияКППКонтрагентов.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ИсторияКППКонтрагентов.КПП    КАК КПП,
		|	ИсторияКППКонтрагентов.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ИсторическоеЗначениеКПП
		|ИЗ
		|	ЗначенияКПП КАК ЗначенияКПП
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ИсторияКПП КАК ИсторияКППКонтрагентов
		|		ПО ЗначенияКПП.Ссылка = ИсторияКППКонтрагентов.Ссылка
		|			И ЗначенияКПП.Период = ИсторияКППКонтрагентов.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка                                     КАК Продавец,
		|	ЕСТЬNULL(ИсторическоеЗначениеКПП.КПП, Контрагенты.КПП) КАК КПППродавца,
		|	Контрагенты.ИНН                                        КАК ИННПродавца,
		|	ВЫБОР
		|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                                 КАК ЮрЛицо
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|	ЛЕВОЕ СОЕДИНЕНИЕ ИсторическоеЗначениеКПП КАК ИсторическоеЗначениеКПП
		|		ПО ИсторическоеЗначениеКПП.Ссылка = Контрагенты.Ссылка
		|ГДЕ
		|	Контрагенты.Ссылка В (&Контрагенты)
		|";
		
		Запрос.УстановитьПараметр("Контрагенты",  Продавцы);
		Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
		
		Форма.Объект.Продавцы.Загрузить(Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
	ДокументОбъект = Форма.РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьКодВидаОперации();
	Форма.ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

// Проверяет выбранные в табличной части виды ценностей. Они не должны относиться одновременно к отгрузкам и оплатам.
//
// Параметры:
// 	Объект - ДокументОбъект - Объект для проверки
// 	ИмяТабличнойЧасти - Строка - Имя табличной части с видами ценностей
// 	Отказ - Булево - Отказ в проведении документа.
//
Процедура ПроверитьСовместимостьВидовЦенностейТабличнойЧасти(Объект, ИмяТабличнойЧасти, Отказ) Экспорт
	
	Если Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокВидовЦенностейОплаты = Новый СписокЗначений;
	СписокВидовЦенностейОплаты.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	СписокВидовЦенностейОплаты.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	СписокВидовЦенностейОплаты.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	СписокВидовЦенностейОплаты.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	
	// Все виды ценностей в ТЧ должны быть связаны с отгрузкой или с оплатой.
	// Определяем, куда относится вид ценностей в первой строке, и считаем, что все остальные должны относиться туда же.
	ОсновнойВидЦенности = Объект[ИмяТабличнойЧасти][0].ВидЦенности;
	ТолькоОплаты = СписокВидовЦенностейОплаты.НайтиПоЗначению(ОсновнойВидЦенности) <> Неопределено;
	
	ШаблонСообщения = НСтр("ru = 'В строке ""%1"" выбран вид ценностей ""%2"", а в первой строке - ""%3"". 
		|В одном документе нельзя указывать виды ценностей связанные и не связанные с оплатой.'");
	
	
	Для Каждого СтрокаТЧ Из Объект[ИмяТабличнойЧасти] Цикл
		СвязанСОплатой = СписокВидовЦенностейОплаты.НайтиПоЗначению(СтрокаТЧ.ВидЦенности) <> Неопределено;
		Если ТолькоОплаты <> СвязанСОплатой Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаТЧ.НомерСтроки, СтрокаТЧ.ВидЦенности, ОсновнойВидЦенности);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, СтрокаТЧ.НомерСтроки, "ВидЦенности");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, 
				Неопределено, 
				Поле, 
				"Объект",
				Отказ);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	

#КонецОбласти

#Область ОформлениеСчетовФактурИТаможенныхДокументов

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - (См. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца)
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_ОформлениеСчетовФактурИТаможенныхДокументов(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеСчетовФактурИТаможенныхДокументов,
		Ложь, Истина, Ложь,
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеОтчетовКомитентамОСписании);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстВыполнить     = НСтр("ru='Оформить'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"УчетНДСРФ.Использование_ОформлениеСчетовФактурИТаможенныхДокументов");
	Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		НоваяСтрока.Наименование = НСтр("ru='Оформление счетов-фактур'");
		НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
			Метаданные.Обработки.ЖурналДокументовНДС.Формы.СписокДокументов.ПолноеИмя());
	Иначе
		НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
			Метаданные.Обработки.ПомощникПоУчетуНДС.Формы.Форма.ПолноеИмя());
		// Доп. параметры формы.
		НоваяСтрока.ДействиеВыполнить.ПараметрыФормы.Вставить("ТолькоОформлениеДокументов", Истина);
	КонецЕсли;
	
КонецПроцедуры

// Обработчики этапа.
Процедура Использование_ОформлениеСчетовФактурИТаможенныхДокументов(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	ОрганизацииКОбработке = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыРасчета.МассивОрганизаций);
	
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(
		ОрганизацииКОбработке,
		Справочники.Организации.УправленческаяОрганизация);
	
	Если ОрганизацииКОбработке.Количество() = 0 Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Для управленческой организации данные документы не оформляются.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыУчетаНДС = Новый Структура;
	ПараметрыУчетаНДС.Вставить("НачалоПериода", 	НачалоМесяца(ПараметрыРасчета.ПериодРегистрации));
	ПараметрыУчетаНДС.Вставить("КонецПериода",  	КонецМесяца(ПараметрыРасчета.ПериодРегистрации));
	ПараметрыУчетаНДС.Вставить("МассивОрганизаций", ОрганизацииКОбработке);
	
	Результат = Обработки.ПомощникПоУчетуНДС.ОперацииПоНДСКВыполнению(ПараметрыУчетаНДС);
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика,
		Результат.НевыполненныеОперации + Результат.ОбязательныеНевыполненныеОперации);
	
	Если НЕ Результат.ЕстьОбязательныеОперацииКВыполнению Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru='Нет неоформленных документов.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	Иначе
		
		ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Требуется оформление документов по учету НДС (%1 шт.)'", ОбщегоНазначения.КодОсновногоЯзыка()),
			Результат.ОбязательныеНевыполненныеОперации);
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			ТекстПояснения,
			,
			,
			Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Предупреждение);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПеречислениеНДСВБюджет

#Область ПеречислениеНДСВБюджетПоОтдельнымОперациям

// см. УчетНДСУП.ЗарегистрироватьСчетаФактурыОжидаетОплатыНДС
Процедура ЗарегистрироватьСчетаФактурыОжидаетОплатыНДС(СчетаФактуры, ДокументРегистратор, Проведен) Экспорт

	РегистрыСведений.ПодтверждениеОплатыНДСВБюджет.ЗарегистрироватьСчетаФактурыОжидаетОплатыНДС(СчетаФактуры, ДокументРегистратор, Проведен);

КонецПроцедуры

// см. УчетНДСУП.ЗарегистрироватьПланированиеОплатыНДСПоСчетамФактурам
Процедура ЗарегистрироватьПланированиеОплатыНДСПоСчетамФактурам(СчетаФактуры, ТипНалога, ДокументРегистратор, Проведен) Экспорт

	РегистрыСведений.ПодтверждениеОплатыНДСВБюджет.ЗарегистрироватьПланированиеОплатыНДСПоСчетамФактурам(СчетаФактуры, ТипНалога, ДокументРегистратор, Проведен);

КонецПроцедуры

// см. УчетНДСУП.ЗарегистрироватьОплатуНДСПоСчетамФактурам
Процедура ЗарегистрироватьОплатуНДСПоСчетамФактурам(СчетаФактуры, ДокументРегистратор, РеквизитыДокументаОплаты, Проведен) Экспорт

	РегистрыСведений.ПодтверждениеОплатыНДСВБюджет.ЗарегистрироватьОплатуНДСПоСчетамФактурам(СчетаФактуры,
																							ДокументРегистратор,
																							РеквизитыДокументаОплаты,
																							Проведен);

КонецПроцедуры

// см. УчетНДСУП.ПолучитьЗаголовокСостоянияОплатыНДСПоСчетуФактуре
Процедура ПолучитьЗаголовокСостоянияОплатыНДСПоСчетуФактуре(Заголовок, СчетФактура) Экспорт
	
	Заголовок = РегистрыСведений.ПодтверждениеОплатыНДСВБюджет.ТекстСостояниеОплатыНДСВБюджет(СчетФактура);

КонецПроцедуры

#КонецОбласти


#КонецОбласти

#Область СформироватьЗаданияПоДокументам

Процедура СформироватьЗаданияПоДокументамЗаявлениеОВвозеТоваров(МассивСсылок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ПодтверждениеОплатыНДСВБюджет.ДатаПодтвержденияОплаты, МЕСЯЦ) КАК Месяц,
	|	Операция.Организация КАК Организация,
	|	Операция.Ссылка КАК СчетФактура
	|ИЗ
	|	РегистрСведений.ПодтверждениеОплатыНДСВБюджет КАК ПодтверждениеОплатыНДСВБюджет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров КАК Операция
	|		ПО ПодтверждениеОплатыНДСВБюджет.СчетФактура = Операция.Ссылка
	|ГДЕ
	|	Операция.Ссылка В(&Ссылка)
	|	И ПодтверждениеОплатыНДСВБюджет.ДатаПодтвержденияОплаты <> ДАТАВРЕМЯ(1,1,1)
	|	И ПодтверждениеОплатыНДСВБюджет.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение)";
	
	Запрос.УстановитьПараметр("Ссылка", МассивСсылок);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	РегистрыСведений.ЗаданияКФормированиюДвиженийПоНДС.СоздатьЗаписиРегистраПоДаннымВыборки(Выборка);
	
КонецПроцедуры

Процедура СформироватьЗаданияПоДокументамРаспределениеНДС(МассивСсылок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Партии.Период, МЕСЯЦ) КАК Месяц,
	|	Партии.Организация КАК Организация,
	|	Партии.ДокументПоступленияРасходов КАК СчетФактура
	|ИЗ
	|	РегистрНакопления.ПартииНДСКРаспределению КАК Партии
	|ГДЕ
	|	Партии.КорВидДеятельностиНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|	И Партии.ВидДеятельностиНДС <> Партии.КорВидДеятельностиНДС
	|	И Партии.Регистратор В(&Ссылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(НДСПредъявленный.Период, МЕСЯЦ) КАК Месяц,
	|	НДСПредъявленный.Организация КАК Организация,
	|	НДСПредъявленный.СчетФактура КАК СчетФактура
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|ГДЕ
	|	НДСПредъявленный.Регистратор В (&Ссылка)
	|	И НДСПредъявленный.РегламентнаяОперация";
	
	Запрос.УстановитьПараметр("Ссылка", МассивСсылок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	РегистрыСведений.ЗаданияКФормированиюДвиженийПоНДС.СоздатьЗаписиРегистраПоДаннымВыборки(Выборка);
	
КонецПроцедуры

Процедура СформироватьЗаданияПоДокументамСчетФактураВыданный(МассивСсылок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Операция.Дата, МЕСЯЦ) КАК Месяц,
	|	Операция.Контрагент КАК Организация,
	|	ТаблицаДокументыОснования.ДокументОснование КАК СчетФактура
	|ИЗ
	|	Документ.СчетФактураВыданный КАК Операция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК ТаблицаДокументыОснования
	|		ПО Операция.Ссылка = ТаблицаДокументыОснования.Ссылка
	|ГДЕ
	|	Операция.Контрагент ССЫЛКА Справочник.Организации
	|	И Операция.Ссылка В(&Ссылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Операция.ДатаВыставления, МЕСЯЦ) КАК Месяц,
	|	Операция.Контрагент КАК Организация,
	|	ТаблицаДокументыОснования.ДокументОснование КАК СчетФактура
	|ИЗ
	|	Документ.СчетФактураВыданный КАК Операция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК ТаблицаДокументыОснования
	|		ПО Операция.Ссылка = ТаблицаДокументыОснования.Ссылка
	|ГДЕ
	|	Операция.Контрагент ССЫЛКА Справочник.Организации
	|	И Операция.Ссылка В(&Ссылка)
	|	И Операция.ДатаВыставления <> ДАТАВРЕМЯ(1,1,1)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(НДСПредъявленный.Период, МЕСЯЦ) КАК Месяц,
	|	НДСПредъявленный.Организация КАК Организация,
	|	НДСПредъявленный.СчетФактура КАК СчетФактура
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|ГДЕ
	|	НДСПредъявленный.Регистратор В (&Ссылка)
	|	И НДСПредъявленный.РегламентнаяОперация
	|";
	
	Запрос.УстановитьПараметр("Ссылка", МассивСсылок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	РегистрыСведений.ЗаданияКФормированиюДвиженийПоНДС.СоздатьЗаписиРегистраПоДаннымВыборки(Выборка);
	
КонецПроцедуры

Процедура СформироватьЗаданияПоДокументамСчетФактураПолученный(МассивСсылок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ДокументыОснования.Ссылка.Дата, МЕСЯЦ) КАК Месяц,
	|	ДокументыОснования.Ссылка.Организация КАК Организация,
	|	ДокументыОснования.ДокументОснование КАК СчетФактура
	|ПОМЕСТИТЬ ВТ_ДокументыОснования
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК ДокументыОснования
	|ГДЕ
	|	ДокументыОснования.Ссылка В(&Ссылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ДокументыОснования.Ссылка.ДатаЗаписиКнигиПокупок, МЕСЯЦ) КАК Месяц,
	|	ДокументыОснования.Ссылка.Организация КАК Организация,
	|	ДокументыОснования.ДокументОснование КАК СчетФактура
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК ДокументыОснования
	|ГДЕ
	|	ДокументыОснования.Ссылка В(&Ссылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|		КОГДА СчетаФактуры.ДатаПереходаПраваСобственности > СчетаФактуры.Дата
	|			ТОГДА СчетаФактуры.ДатаПереходаПраваСобственности
	|		ИНАЧЕ СчетаФактуры.Дата
	|	КОНЕЦ, МЕСЯЦ) КАК Месяц,
	|	СчетаФактуры.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА СчетаФактуры.Исправление
	|			ТОГДА СчетаФактуры.СчетФактураОснование
	|		ИНАЧЕ СчетаФактуры.Ссылка
	|	КОНЕЦ
	|ИЗ
	|	Документ.СчетФактураПолученныйНалоговыйАгент КАК СчетаФактуры
	|ГДЕ
	|	СчетаФактуры.Ссылка В(&Ссылка)
	|	И СчетаФактуры.ДатаПереходаПраваСобственности <> ДАТАВРЕМЯ(1,1,1)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|		КОГДА СчетаФактуры.ДатаПереходаПраваСобственности > СчетаФактуры.ДатаЗаписиКнигиПокупок
	|			ТОГДА СчетаФактуры.ДатаПереходаПраваСобственности
	|		ИНАЧЕ СчетаФактуры.ДатаЗаписиКнигиПокупок
	|	КОНЕЦ, МЕСЯЦ) КАК Месяц,
	|	СчетаФактуры.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА СчетаФактуры.Исправление
	|			ТОГДА СчетаФактуры.СчетФактураОснование
	|		ИНАЧЕ СчетаФактуры.Ссылка
	|	КОНЕЦ
	|ИЗ
	|	Документ.СчетФактураПолученныйНалоговыйАгент КАК СчетаФактуры
	|ГДЕ
	|	СчетаФактуры.Ссылка В(&Ссылка)
	|	И СчетаФактуры.ДатаПереходаПраваСобственности <> ДАТАВРЕМЯ(1,1,1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ДокументыОснования.Месяц КАК Месяц,
	|	ВТ_ДокументыОснования.Организация КАК Организация,
	|	ВТ_ДокументыОснования.СчетФактура КАК СчетФактура
	|ИЗ
	|	ВТ_ДокументыОснования КАК ВТ_ДокументыОснования
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ДокументыОснования.Месяц,
	|	ВТ_ДокументыОснования.Организация,
	|	КорректировкаПриобретения.ДокументОснование
	|ИЗ
	|	ВТ_ДокументыОснования КАК ВТ_ДокументыОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаПриобретения КАК КорректировкаПриобретения
	|		ПО ВТ_ДокументыОснования.СчетФактура = КорректировкаПриобретения.Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ДокументыОснования.Месяц,
	|	ВТ_ДокументыОснования.Организация,
	|	ДругиеКорректировкиОснования.Ссылка
	|ИЗ
	|	ВТ_ДокументыОснования КАК ВТ_ДокументыОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаПриобретения КАК КорректировкаПриобретенияОснование
	|		ПО ВТ_ДокументыОснования.СчетФактура = КорректировкаПриобретенияОснование.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаПриобретения КАК ДругиеКорректировкиОснования
	|		ПО (КорректировкаПриобретенияОснование.ДокументОснование = ДругиеКорректировкиОснования.ДокументОснование)
	|			И (ДругиеКорректировкиОснования.ВидКорректировки = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(НДСПредъявленный.Период, МЕСЯЦ) КАК Месяц,
	|	НДСПредъявленный.Организация КАК Организация,
	|	НДСПредъявленный.СчетФактура КАК СчетФактура
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|ГДЕ
	|	НДСПредъявленный.Регистратор В (&Ссылка)
	|	И НДСПредъявленный.РегламентнаяОперация
	|";
	
	Запрос.УстановитьПараметр("Ссылка", МассивСсылок);
	Выборка = Запрос.Выполнить().Выбрать();
	РегистрыСведений.ЗаданияКФормированиюДвиженийПоНДС.СоздатьЗаписиРегистраПоДаннымВыборки(Выборка);
	
КонецПроцедуры

Процедура СформироватьЗаданияПоДокументамСчетФактураАванс(МассивСсылок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Операция.Дата, МЕСЯЦ) КАК Месяц,
	|	Операция.Организация КАК Организация,
	|	Операция.Ссылка КАК СчетФактура
	|ИЗ
	|	Документ.СчетФактураВыданныйАванс КАК Операция
	|ГДЕ
	|	Операция.Ссылка В(&Ссылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Операция.Дата, МЕСЯЦ),
	|	Операция.Организация,
	|	Операция.Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученныйАванс КАК Операция
	|ГДЕ
	|	Операция.Ссылка В(&Ссылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупок.Период, МЕСЯЦ),
	|	НДСЗаписиКнигиПокупок.Организация,
	|	НДСЗаписиКнигиПокупок.Регистратор
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|ГДЕ
	|	НДСЗаписиКнигиПокупок.Регистратор В(&Ссылка)
	|	И НДСЗаписиКнигиПокупок.РегламентнаяОперация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродаж.Период, МЕСЯЦ),
	|	НДСЗаписиКнигиПродаж.Организация,
	|	НДСЗаписиКнигиПродаж.Регистратор
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	НДСЗаписиКнигиПродаж.Регистратор В(&Ссылка)
	|	И НДСЗаписиКнигиПродаж.РегламентнаяОперация";
	
	Запрос.УстановитьПараметр("Ссылка", МассивСсылок);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	РегистрыСведений.ЗаданияКФормированиюДвиженийПоНДС.СоздатьЗаписиРегистраПоДаннымВыборки(Выборка);
	
КонецПроцедуры

Процедура СформироватьЗаданияПоИнымДокументамПодтвержденияНДС(МассивСсылок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ИнойДокументПодтвержденияНДС.Дата, МЕСЯЦ) КАК Месяц,
	|	ИнойДокументПодтвержденияНДС.Организация КАК Организация,
	|	ИнойДокументПодтвержденияНДС.ДокументОснование КАК СчетФактура
	|ПОМЕСТИТЬ ВТ_ДокументыОснования
	|ИЗ
	|	Документ.ИнойДокументПодтвержденияНДС КАК ИнойДокументПодтвержденияНДС
	|ГДЕ
	|	ИнойДокументПодтвержденияНДС.Ссылка В(&Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ДокументыОснования.Месяц КАК Месяц,
	|	ВТ_ДокументыОснования.Организация КАК Организация,
	|	ВТ_ДокументыОснования.СчетФактура КАК СчетФактура
	|ИЗ
	|	ВТ_ДокументыОснования КАК ВТ_ДокументыОснования
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(НДСПредъявленный.Период, МЕСЯЦ) КАК Месяц,
	|	НДСПредъявленный.Организация КАК Организация,
	|	НДСПредъявленный.СчетФактура КАК СчетФактура
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|ГДЕ
	|	НДСПредъявленный.Регистратор В (&Ссылка)
	|	И НДСПредъявленный.РегламентнаяОперация
	|";
	
	Запрос.УстановитьПараметр("Ссылка", МассивСсылок);
	Выборка = Запрос.Выполнить().Выбрать();
	РегистрыСведений.ЗаданияКФормированиюДвиженийПоНДС.СоздатьЗаписиРегистраПоДаннымВыборки(Выборка);
	
КонецПроцедуры

#КонецОбласти

#Область РегламентнаяОперацияПоНДС

// См. УчетНДСУПСлужебный.ВыполнитьРасчет
Процедура ВыполнитьРасчет(ПараметрыРасчета) Экспорт
	
	// Расчет налоговых регистров
	СформироватьДанныеПоЗачетамАвансов(ПараметрыРасчета);
	СформироватьНДСЗаписиКнигиПокупок(ПараметрыРасчета);
	СформироватьНДСЗаписиКнигиПродаж(ПараметрыРасчета);

КонецПроцедуры

// См. УчетНДСУПСлужебный.ЗафиксироватьРезультат
Процедура ЗафиксироватьРезультат(ПараметрыРасчета) Экспорт
	
	МВТ = ПараметрыРасчета.МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	
	Запрос.УстановитьПараметр("НачалоПериода",     ПараметрыРасчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",      ПараметрыРасчета.КонецПериода);
	Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыРасчета.МассивОрганизаций);
	Запрос.УстановитьПараметр("НомерЗадания",      ПараметрыРасчета.НомерЗадания);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Задания.Организация,
	|	Задания.СчетФактура,
	|	НДСЗаписиКнигиПродаж.СчетФактура КАК ДокументОплаты
	|ПОМЕСТИТЬ ДокументыОплатыБезЗачетов
	|ИЗ
	|	Задания КАК Задания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|		ПО Задания.Организация = НДСЗаписиКнигиПродаж.Организация
	|			И Задания.СчетФактура = НДСЗаписиКнигиПродаж.Регистратор
	|			И (НДСЗаписиКнигиПродаж.Период МЕЖДУ &НачалоПериода И &КонецПериода)
	|			И НДСЗаписиКнигиПродаж.Активность
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|		ПО Задания.Организация = НДСЗаписиКнигиПокупок.Организация
	|			И Задания.СчетФактура = НДСЗаписиКнигиПокупок.Регистратор
	|			И (НДСЗаписиКнигиПокупок.Период > &КонецПериода)
	|			И НДСЗаписиКнигиПокупок.Активность
	|ГДЕ
	|	Задания.СчетФактура ССЫЛКА Документ.СчетФактураВыданныйАванс
	|	И НДСЗаписиКнигиПокупок.Регистратор ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Задания.Организация,
	|	Задания.СчетФактура,
	|	НДСЗаписиКнигиПокупок.СчетФактура КАК ДокументОплаты
	|ИЗ
	|	Задания КАК Задания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|		ПО Задания.Организация = НДСЗаписиКнигиПокупок.Организация
	|			И Задания.СчетФактура = НДСЗаписиКнигиПокупок.Регистратор
	|			И (НДСЗаписиКнигиПокупок.Период МЕЖДУ &НачалоПериода И &КонецПериода)
	|			И НДСЗаписиКнигиПокупок.Активность
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|		ПО Задания.Организация = НДСЗаписиКнигиПродаж.Организация
	|			И Задания.СчетФактура = НДСЗаписиКнигиПродаж.Регистратор
	|			И (НДСЗаписиКнигиПродаж.Период > &КонецПериода)
	|			И НДСЗаписиКнигиПродаж.Активность
	|ГДЕ
	|	Задания.СчетФактура ССЫЛКА Документ.СчетФактураПолученныйАванс
	|	И НДСЗаписиКнигиПродаж.Регистратор ЕСТЬ NULL
	|";
	
	Запрос.Выполнить();
	
	
	ПараметрыРасчетаАвансов = УчетНДСУПСлужебный.ИнициализироватьПараметрыПодготовкиРасчетовАвансовВЦеляхНДС();
	
	ПараметрыРасчетаАвансов.ДатаНачала                                            = ПараметрыРасчета.КонецПериода + 1;
	ПараметрыРасчетаАвансов.ПараметрыОтбораПоРасчетномуДокументу.ИмяПоля          = "ДокументОплаты";
	ПараметрыРасчетаАвансов.ПараметрыОтбораПоРасчетномуДокументу.ИмяТаблицыОтбора = "ДокументыОплатыБезЗачетов";
	ПараметрыРасчетаАвансов.ВключитьДанныеПодарочныхСертификатов                  = Истина;
	ПараметрыРасчетаАвансов.ВключитьДанныеФинансовыхИнструментов                  = Истина;
	
	УчетНДСУПСлужебный.ПодготовитьВТ_АвансыПолученные_Погашения(МВТ, ПараметрыРасчетаАвансов, ПараметрыРасчета.ТаблицаНастроек);
	УчетНДСУПСлужебный.ПодготовитьВТ_АвансыВыданные_Погашения(МВТ, ПараметрыРасчетаАвансов, ПараметрыРасчета.ТаблицаНастроек);
	
	ПараметрыПоиска = ВзаиморасчетыСервер.ИнициализироватьПараметрыПоискаОснованийИДокументовОплаты();
	ПараметрыПоиска.ПараметрыОтбораПоТаблицеДокументов.ИмяПоля          = "СчетФактура";
	ПараметрыПоиска.ПараметрыОтбораПоТаблицеДокументов.ИмяТаблицыОтбора = "ПриобретенияЭлектронныхУслуг";
	ПараметрыПоиска.Организации                                         = ПараметрыРасчета.МассивОрганизаций;
	
	ВзаиморасчетыСервер.ПодготовитьВТ_РасчетыСПоставщиками_ОснованияИДокументыОплаты(
		ПараметрыРасчета.МенеджерВременныхТаблиц,
		ПараметрыПоиска);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Задания.Месяц                                 КАК Месяц,
	|	Задания.НомерЗадания                          КАК НомерЗадания,
	|	Задания.Организация                           КАК Организация,
	|	Задания.СчетФактура                           КАК СчетФактура
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(НДССостояниеРеализации0.ДатаПодтверждения, МЕСЯЦ) КАК Месяц,
	|		&НомерЗадания                                КАК НомерЗадания,
	|		Партии.Организация                           КАК Организация,
	|		Партии.СчетФактура                           КАК СчетФактура
	|	ИЗ
	|		Партии КАК Партии
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НДССостояниеРеализации0 КАК НДССостояниеРеализации0
	|		ПО Партии.Организация = НДССостояниеРеализации0.Организация
	|			И Партии.ДокументРеализации = НДССостояниеРеализации0.ДокументРеализации
	|			И НДССостояниеРеализации0.Состояние В (
	|				ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.ПодтвержденаРеализация0),
	|				ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.НеПодтвержденаРеализация0))
	|			И НДССостояниеРеализации0.ДатаПодтверждения > &КонецПериода
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(АвансыПолученные_Погашения.ДатаПогашения, МЕСЯЦ),
	|		&НомерЗадания,
	|		ДокументыОплатыБезЗачетов.Организация,
	|		ДокументыОплатыБезЗачетов.СчетФактура
	|	ИЗ
	|		АвансыПолученные_Погашения КАК АвансыПолученные_Погашения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыОплатыБезЗачетов КАК ДокументыОплатыБезЗачетов
	|			ПО АвансыПолученные_Погашения.РасчетныйДокумент = ДокументыОплатыБезЗачетов.ДокументОплаты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(АвансыВыданные_Погашения.ДатаПогашения, МЕСЯЦ),
	|		&НомерЗадания,
	|		ДокументыОплатыБезЗачетов.Организация,
	|		ДокументыОплатыБезЗачетов.СчетФактура
	|	ИЗ
	|		АвансыВыданные_Погашения КАК АвансыВыданные_Погашения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыОплатыБезЗачетов КАК ДокументыОплатыБезЗачетов
	|			ПО АвансыВыданные_Погашения.РасчетныйДокумент = ДокументыОплатыБезЗачетов.ДокументОплаты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(Операция.ДатаЗаписиКнигиПокупок, МЕСЯЦ) КАК Месяц,
	|		&НомерЗадания                                 КАК НомерЗадания,
	|		Задания.Организация                           КАК Организация,
	|		Задания.СчетФактура                           КАК СчетФактура
	|	ИЗ
	|		Задания КАК Задания
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК Строки
	|		ПО Задания.СчетФактура = Строки.ДокументОснование
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК Операция
	|		ПО Задания.Организация = Операция.Организация
	|			И Строки.Ссылка = Операция.Ссылка
	|			И Операция.ДатаЗаписиКнигиПокупок > &КонецПериода
	|	ГДЕ
	|		Операция.Проведен
	|		И НЕ Операция.Исправление
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(Операция.ДатаЗаписиКнигиПокупок, МЕСЯЦ) КАК Месяц,
	|		&НомерЗадания                                 КАК НомерЗадания,
	|		Задания.Организация                           КАК Организация,
	|		Задания.СчетФактура                           КАК СчетФактура
	|	ИЗ
	|		Задания КАК Задания
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК Строки
	|		ПО Задания.СчетФактура = Строки.ДокументОснование
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйНалоговыйАгент КАК Операция
	|		ПО Задания.Организация = Операция.Организация
	|			И Строки.Ссылка = Операция.Ссылка
	|			И Операция.ДатаЗаписиКнигиПокупок > &КонецПериода
	|	ГДЕ
	|		Операция.Проведен
	|		И НЕ Операция.Исправление
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(ПодтверждениеОплатыНДСВБюджет.ДатаПодтвержденияОплаты, МЕСЯЦ) КАК Месяц,
	|		&НомерЗадания                                 КАК НомерЗадания,
	|		Задания.Организация                           КАК Организация,
	|		Задания.СчетФактура                           КАК СчетФактура
	|	ИЗ
	|		Задания КАК Задания
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодтверждениеОплатыНДСВБюджет КАК ПодтверждениеОплатыНДСВБюджет
	|		ПО Задания.СчетФактура = ПодтверждениеОплатыНДСВБюджет.СчетФактура
	|			И ПодтверждениеОплатыНДСВБюджет.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение)
	|			И ПодтверждениеОплатыНДСВБюджет.ДатаПодтвержденияОплаты > &КонецПериода
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(СостоянияБлокировкиВычетаНДСПоСчетамФактурам.Период, МЕСЯЦ) КАК Месяц,
	|		&НомерЗадания                                 КАК НомерЗадания,
	|		Задания.Организация                           КАК Организация,
	|		Задания.СчетФактура                           КАК СчетФактура
	|	ИЗ
	|		Задания КАК Задания
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияБлокировкиВычетаНДСПоСчетамФактурам КАК СостоянияБлокировкиВычетаНДСПоСчетамФактурам
	|		ПО Задания.Организация = СостоянияБлокировкиВычетаНДСПоСчетамФактурам.Организация
	|			И Задания.СчетФактура = СостоянияБлокировкиВычетаНДСПоСчетамФактурам.СчетФактура
	|			И СостоянияБлокировкиВычетаНДСПоСчетамФактурам.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБлокировкиВычетаНДС.Снята)
	|			И СостоянияБлокировкиВычетаНДСПоСчетамФактурам.Период > &КонецПериода
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(ДанныеПервичныхДокументов.ДатаРегистратора, МЕСЯЦ) КАК Месяц,
	|		&НомерЗадания                            КАК НомерЗадания,
	|		ПриобретенияЭлектронныхУслуг.Организация КАК Организация,
	|		ПриобретенияЭлектронныхУслуг.СчетФактура КАК СчетФактура
	|	ИЗ
	|		РасчетыСПоставщиками_ОснованияИДокументыОплаты КАК Оплаты
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПриобретенияЭлектронныхУслуг КАК ПриобретенияЭлектронныхУслуг
	|		ПО
	|			Оплаты.АналитикаУчетаПоПартнерам = ПриобретенияЭлектронныхУслуг.АналитикаУчетаПоПартнерам
	|			И Оплаты.ОснованиеОплаты = ПриобретенияЭлектронныхУслуг.СчетФактура
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО
	|			Оплаты.АналитикаУчетаПоПартнерам.Организация = ДанныеПервичныхДокументов.Организация
	|			И Оплаты.ДокументОплаты = ДанныеПервичныхДокументов.Документ
	|	
	|	ГДЕ
	|		ПриобретенияЭлектронныхУслуг.СчетФактура <> Оплаты.ДокументОплаты
	|		И ДанныеПервичныхДокументов.ДатаРегистратора > &КонецПериода) КАК Задания";
	
	ВыборкаДляЗаписи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДляЗаписи.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ЗаданияКФормированиюДвиженийПоНДС.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаДляЗаписи);
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
КонецПроцедуры

#Область ПолучениеДанныхДляРасчета

// См. УчетНДСУПСлужебный.ПолучитьПартии
Процедура ПолучитьПартии(ПараметрыРасчета) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Партии.МоментВремени КАК МоментВремени,
	|	Партии.Период КАК Период,
	|	Партии.Регистратор КАК Регистратор,
	|	Партии.Организация КАК Организация,
	|	Партии.АналитикаУчетаПартий.Контрагент КАК Контрагент,
	|	Партии.ДокументПоступления КАК СчетФактура,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПоступления,
	|	ВЫБОР 
	|		КОГДА Партии.ДокументПоступления ССЫЛКА Документ.СчетФактураПолученныйНалоговыйАгент
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТоварыНалоговыйАгент)
	|		КОГДА Партии.ДокументПоступления ССЫЛКА Документ.СчетФактураНалоговыйАгент ТОГДА
	|			ВЫБОР 
	|				КОГДА ВЫРАЗИТЬ(Партии.ДокументПоступления КАК Документ.СчетФактураНалоговыйАгент).ВидАгентскогоДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыАгентскихДоговоров.Аренда)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентАренда)
	|				КОГДА ВЫРАЗИТЬ(Партии.ДокументПоступления КАК Документ.СчетФактураНалоговыйАгент).ВидАгентскогоДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыАгентскихДоговоров.РеализацияИмущества)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентРеализацияИмущества)
	|				КОГДА ВЫРАЗИТЬ(Партии.ДокументПоступления КАК Документ.СчетФактураНалоговыйАгент).ВидАгентскогоДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыАгентскихДоговоров.НерезидентЭлектронныеУслуги)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентЭлектронныеУслуги)
	|				КОГДА ВЫРАЗИТЬ(Партии.ДокументПоступления КАК Документ.СчетФактураНалоговыйАгент).ВидАгентскогоДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыАгентскихДоговоров.Нерезидент)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентИностранцы)
	|			КОНЕЦ
	|		КОГДА Партии.ДокументПоступления ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт 
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныеПлатежи)
	|		КОГДА Партии.ДокументПоступления ССЫЛКА Документ.ЗаявлениеОВвозеТоваров 
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныйСоюз)
	|		ИНАЧЕ Партии.ВидЦенности 
	|	КОНЕЦ КАК ВидЦенности,
	|	Партии.АналитикаУчетаПартий.СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА Партии.НалогообложениеПартии = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
	|		КОГДА Партии.НалогообложениеПартии = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|		КОГДА Партии.НалогообложениеПартии = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров)
	|			И  ЕСТЬNULL(ДанныеПервичныхДокументов.ДатаРегистратора, ДАТАВРЕМЯ(1,1,1)) >= &ДатаНачалаДействия150ФЗ
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|		КОГДА Партии.НалогообложениеПартии = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.РеализацияРаботУслугНаЭкспорт)
	|			И ЕСТЬNULL(ДанныеПервичныхДокументов.ДатаРегистратора, ДАТАВРЕМЯ(1,1,1)) >= &ДатаВозможностиВычетаПриОказанииУслугНеВРФ
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|		КОГДА Партии.НалогообложениеПартии = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.РеализацияРаботУслугНаЭкспорт)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
	|		ИНАЧЕ Партии.НалогообложениеПартии
	|	КОНЕЦ КАК ВидДеятельностиНДС,
	|
	|	ВЫБОР
	|		КОГДА Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
	|		КОГДА Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|		КОГДА Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров)
	|			И  ЕСТЬNULL(ДанныеПервичныхДокументов.ДатаРегистратора, ДАТАВРЕМЯ(1,1,1)) >= &ДатаНачалаДействия150ФЗ
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|		КОГДА Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.РеализацияРаботУслугНаЭкспорт)
	|			И ЕСТЬNULL(ДанныеПервичныхДокументов.ДатаРегистратора, ДАТАВРЕМЯ(1,1,1)) >= &ДатаВозможностиВычетаПриОказанииУслугНеВРФ
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|		КОГДА Партии.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.РеализацияРаботУслугНаЭкспорт)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
	|		ИНАЧЕ Партии.НалогообложениеНДС
	|	КОНЕЦ КАК КорВидДеятельностиНДС,
	|	
	|	Партии.СтатьяСписанияНДС КАК СтатьяСписанияНДС,
	|	ВЫБОР 
	|		КОГДА Партии.СтатьяСписанияНДС <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка) 
	|			ТОГДА Партии.АналитикаСписанияНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК АналитикаСписанияНДС,
	|	ВЫБОР 
	|		КОГДА Партии.СтатьяСписанияНДС <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка) 
	|			ТОГДА Партии.НаправлениеДеятельности
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК НаправлениеДеятельностиСписанияНДС,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(ДанныеПервичныхДокументов.ДатаРегистратора, ДАТАВРЕМЯ(1,1,1)) >= &ДатаНачалаУчетаНДСПоНаправлениямДеятельности
	|			ТОГДА Партии.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(ДанныеПервичныхДокументов.ДатаРегистратора, ДАТАВРЕМЯ(1,1,1)) >= &ДатаНачалаУчетаНДСПоНаправлениямДеятельности
	|			ТОГДА Партии.КорНаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ КАК КорНаправлениеДеятельности,
	|	ВЫБОР 
	|		КОГДА Партии.СтатьяСписанияНДС <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка) 
	|			ТОГДА Партии.ПодразделениеСписанияНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ПодразделениеСписанияНДС,
	|	
	|	Партии.ДокументРеализации КАК ДокументРеализации,
	|	
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Партии.ДокументПоступления) В 
	|			(ТИП(Документ.ЗаявлениеОВвозеТоваров),
	|			 ТИП(Документ.СчетФактураПолученныйНалоговыйАгент),
	|			 ТИП(Документ.СчетФактураНалоговыйАгент)) ТОГДА 
	|			0
	|		ИНАЧЕ
	|			Партии.СтоимостьРегл 
	|	КОНЕЦ КАК СуммаБезНДС,
	|	Партии.НДСРегл КАК НДС,
	|	Партии.НДСУпр КАК НДСУпр
	|
	|ПОМЕСТИТЬ ПартииПредварительная
	|ИЗ (
	|	ВЫБРАТЬ
	|		Партии.МоментВремени,
	|		Партии.Период,
	|		Партии.Регистратор,
	|		Партии.Организация,
	|		Партии.СтоимостьРегл,
	|		Партии.НДСРегл,
	|		0 КАК НДСУпр,
	|		Партии.ДокументПоступления,
	|		Партии.АналитикаУчетаПартий,
	|		ВЫБОР 
	|			КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета ТОГДА
	|				ЕСТЬNULL(Партии.ВидЗапасов.ГруппаФинансовогоУчета.ВидЦенностиНДС, ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Товары))
	|			ИНАЧЕ ЕСТЬNULL(Партии.АналитикаУчетаНоменклатуры.Номенклатура.ГруппаФинансовогоУчета.ВидЦенностиНДС ,ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Товары)) 
	|		КОНЕЦ КАК ВидЦенности,
	|		Партии.АналитикаУчетаПартий.НалогообложениеНДС КАК НалогообложениеПартии,
	|		Партии.НалогообложениеНДС,
	|		Партии.АналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		Партии.КорАналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности КАК КорНаправлениеДеятельности,
	|		ВЫБОР 
	|			КОГДА Партии.АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Склад)
	|				ТОГДА Партии.АналитикаУчетаНоменклатуры.СкладскаяТерритория.Подразделение
	|			КОГДА Партии.АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Подразделение)
	|				ТОГДА Партии.АналитикаУчетаНоменклатуры.Подразделение
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ КАК ПодразделениеСписанияНДС,
	|		Партии.СтатьяСписанияНДС,
	|		Партии.АналитикаСписанияНДС,
	|		ВЫБОР 
	|			КОГДА ТИПЗНАЧЕНИЯ(Партии.Регистратор) В (&ТипыДокументовЭкспорта)
	|				ТОГДА Партии.Регистратор
	|			КОГДА ТИПЗНАЧЕНИЯ(Партии.Регистратор) = ТИП(Документ.КорректировкаРеализации)
	|				ТОГДА ВЫРАЗИТЬ(Партии.Регистратор КАК Документ.КорректировкаРеализации).ДокументОснование
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ КАК ДокументРеализации
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровОрганизаций КАК Партии
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			Справочник.КлючиАналитикиУчетаПартий КАК АналитикаПартий
	|		ПО 
	|			АналитикаПартий.Ссылка = Партии.АналитикаУчетаПартий
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			Справочник.КлючиАналитикиУчетаНоменклатуры КАК АналитикаНоменклатуры
	|		ПО 
	|			АналитикаНоменклатуры.Ссылка = Партии.АналитикаУчетаНоменклатуры
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Задания КАК Задания
	|		ПО
	|			Задания.Организация = Партии.Организация
	|			И Задания.СчетФактура = Партии.ДокументПоступления
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Активность
	|		И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Партии.НДСРегл <> 0.
	|		И Партии.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|		И Партии.НалогообложениеНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Партии.МоментВремени КАК МоментВремени,
	|		Партии.Период КАК Период,
	|		Партии.Регистратор КАК Регистратор,
	|		Партии.Организация КАК Организация,
	|		Партии.СтоимостьРегл КАК СтоимостьРегл,
	|		Партии.НДСРегл КАК НДСРегл,
	|		0 КАК НДСУпр,
	|		Партии.ДокументПоступления КАК ДокументПоступления,
	|		Партии.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|		ВЫБОР КОГДА Партии.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры В (
	|							ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|							ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|			ТОГДА 
	|				ВЫБОР 
	|					КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета ТОГДА
	|						ЕСТЬNULL(Партии.ВидЗапасов.ГруппаФинансовогоУчета.ВидЦенностиНДС, ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Товары))
	|					ИНАЧЕ ЕСТЬNULL(Партии.АналитикаУчетаНоменклатуры.Номенклатура.ГруппаФинансовогоУчета.ВидЦенностиНДС, ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Товары)) 
	|				КОНЕЦ
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПрочиеРаботыИУслуги) 
	|		КОНЕЦ КАК ВидЦенности,
	|		Партии.АналитикаУчетаПартий.НалогообложениеНДС КАК НалогообложениеПартии,
	|		Партии.НалогообложениеНДС КАК НалогообложениеНДС,
	|		Партии.АналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности,
	|		Партии.АналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности,
	|		ВЫБОР 
	|			КОГДА Партии.АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Склад)
	|				ТОГДА Партии.АналитикаУчетаНоменклатуры.СкладскаяТерритория.Подразделение
	|			КОГДА Партии.АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Подразделение)
	|				ТОГДА Партии.АналитикаУчетаНоменклатуры.Подразделение
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ,
	|		Партии.СтатьяСписанияНДС,
	|		Партии.АналитикаСписанияНДС,
	|		ВЫБОР 
	|			КОГДА ТИПЗНАЧЕНИЯ(Партии.Регистратор) В (&ТипыДокументовЭкспорта)
	|				ТОГДА Партии.Регистратор
	|			КОГДА ТИПЗНАЧЕНИЯ(Партии.Регистратор) = ТИП(Документ.КорректировкаРеализации)
	|				ТОГДА ВЫРАЗИТЬ(Партии.Регистратор КАК Документ.КорректировкаРеализации).ДокументОснование
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ КАК ДокументРеализации
	|	ИЗ
	|		РегистрНакопления.ПартииЗатратНаВыпуск КАК Партии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			Справочник.КлючиАналитикиУчетаПартий КАК АналитикаПартий
	|		ПО 
	|			АналитикаПартий.Ссылка = Партии.АналитикаУчетаПартий
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			Справочник.КлючиАналитикиУчетаНоменклатуры КАК АналитикаНоменклатуры
	|		ПО 
	|			АналитикаНоменклатуры.Ссылка = Партии.АналитикаУчетаНоменклатуры
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Задания КАК Задания
	|		ПО
	|			Задания.Организация = Партии.Организация
	|			И Задания.СчетФактура = Партии.ДокументПоступления
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Активность
	|		И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Партии.НДСРегл <> 0
	|		И Партии.НалогообложениеНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Партии.МоментВремени КАК МоментВремени,
	|		Партии.Период КАК Период,
	|		Партии.Регистратор КАК Регистратор,
	|		Партии.Организация КАК Организация,
	|		(ВЫБОР
	|			КОГДА Партии.ДокументПоступления ССЫЛКА Документ.ТаможеннаяДекларацияИмпорт ТОГДА
	|				(ВЫБОР Партии.АналитикаУчетаПартий.СтавкаНДС
	|					КОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20) ТОГДА Партии.НДСРегл * 100 / 20
	|					КОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18) ТОГДА Партии.НДСРегл * 100 / 18
	|					КОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10) ТОГДА Партии.НДСРегл * 100 / 10
	|					ИНАЧЕ 0 КОНЕЦ)
	|			ИНАЧЕ Партии.СтоимостьРегл КОНЕЦ) КАК СтоимостьРегл,
	|		Партии.НДСРегл КАК НДСРегл,
	|		0 КАК НДСУпр,
	|		Партии.ДокументПоступленияРасходов КАК ДокументПоступления,
	|		Партии.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|		ВЫБОР 
	|			КОГДА НЕ СтатьиРасходов.Ссылка ЕСТЬ NULL 
	|				ТОГДА СтатьиРасходов.ВидЦенностиНДС
	|			КОГДА Партии.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры В (
	|							ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|							ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|				ТОГДА 
	|					ВЫБОР 
	|						КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета ТОГДА
	|							ЕСТЬNULL(Партии.ВидЗапасов.ГруппаФинансовогоУчета.ВидЦенностиНДС, ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Товары))
	|						ИНАЧЕ ЕСТЬNULL(Партии.АналитикаУчетаНоменклатуры.Номенклатура.ГруппаФинансовогоУчета.ВидЦенностиНДС, ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Товары)) 
	|					КОНЕЦ
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПрочиеРаботыИУслуги)
	|		КОНЕЦ КАК ВидЦенности,
	|		Партии.АналитикаУчетаПартий.НалогообложениеНДС КАК НалогообложениеПартии,
	|		Партии.НалогообложениеНДС КАК НалогообложениеНДС,
	|		Партии.АналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности,
	|		Партии.КорАналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности,
	|		ВЫБОР 
	|			КОГДА Партии.АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Склад)
	|				ТОГДА Партии.АналитикаУчетаНоменклатуры.СкладскаяТерритория.Подразделение
	|			КОГДА Партии.АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Подразделение)
	|				ТОГДА Партии.АналитикаУчетаНоменклатуры.Подразделение
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ,
	|		Партии.СтатьяСписанияНДС,
	|		Партии.АналитикаСписанияНДС,
	|		ВЫБОР 
	|			КОГДА ТИПЗНАЧЕНИЯ(Партии.Регистратор) В (&ТипыДокументовЭкспорта)
	|				ТОГДА Партии.Регистратор
	|			КОГДА ТИПЗНАЧЕНИЯ(Партии.Регистратор) = ТИП(Документ.КорректировкаРеализации)
	|				ТОГДА ВЫРАЗИТЬ(Партии.Регистратор КАК Документ.КорректировкаРеализации).ДокументОснование
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ КАК ДокументРеализации
	|	ИЗ
	|		РегистрНакопления.ПартииРасходовНаСебестоимостьТоваров КАК Партии
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			Справочник.КлючиАналитикиУчетаПартий КАК АналитикаПартий
	|		ПО 
	|			АналитикаПартий.Ссылка = Партии.АналитикаУчетаПартий
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			Справочник.КлючиАналитикиУчетаНоменклатуры КАК АналитикаНоменклатуры
	|		ПО 
	|			АналитикаНоменклатуры.Ссылка = Партии.АналитикаУчетаНоменклатуры
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|		ПО 
	|			Партии.СтатьяРасходов = СтатьиРасходов.Ссылка
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Задания КАК Задания
	|		ПО
	|			Задания.Организация = Партии.Организация
	|			И Задания.СчетФактура = Партии.ДокументПоступленияРасходов
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Активность
	|		И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Партии.НДСРегл <> 0
	|		И Партии.НалогообложениеНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Партии.МоментВремени КАК МоментВремени,
	|		Партии.Период КАК Период,
	|		Партии.Регистратор КАК Регистратор,
	|		Партии.Организация КАК Организация,
	|		Партии.СтоимостьРегл КАК СтоимостьРегл,
	|		Партии.НДСРегл КАК НДСРегл,
	|		Партии.НДСУпр КАК НДСУпр,
	|		Партии.ДокументПоступленияРасходов КАК ДокументПоступления,
	|		Партии.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|		ВЫБОР 
	|			КОГДА Партии.АналитикаУчетаПартий.ВидЦенности <> ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПустаяСсылка)
	|				ТОГДА Партии.АналитикаУчетаПартий.ВидЦенности        // Версия ПартионногоУчета 2.2
	|			ИНАЧЕ ЕСТЬNULL(СтатьиРасходов.ВидЦенностиНДС, ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПрочиеРаботыИУслуги))
	|		КОНЕЦ КАК ВидЦенности,
	|		ВЫБОР
	|			КОГДА Партии.ВидДеятельностиНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|				ТОГДА Партии.ВидДеятельностиНДС // Версия ПартионногоУчета 2.2
	|			ИНАЧЕ Партии.АналитикаУчетаПартий.НалогообложениеНДС     // Версия ПартионногоУчета 2.1
	|		КОНЕЦ                     КАК НалогообложениеПартии,
	|		Партии.НалогообложениеНДС КАК НалогообложениеНДС,
	|		Партии.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		Партии.НаправлениеДеятельности КАК КорНаправлениеДеятельности,
	|		НЕОПРЕДЕЛЕНО КАК ПодразделениеСписанияНДС,
	|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка) КАК СтатьяСписанияНДС,
	|		НЕОПРЕДЕЛЕНО КАК АналитикаСписанияНДС,
	|		Партии.ДокументРеализации КАК ДокументРеализации
	|	ИЗ
	|		РегистрНакопления.ПартииПрочихРасходов КАК Партии
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Задания КАК Задания
	|		ПО
	|			Задания.Организация = Партии.Организация
	|			И Задания.СчетФактура = Партии.ДокументПоступленияРасходов
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|		ПО 
	|			Партии.СтатьяРасходов = СтатьиРасходов.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО
	|			Партии.АналитикаУчетаНоменклатуры.Номенклатура = СпрНоменклатура.Ссылка
	|		
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Активность
	|		И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Партии.НДСРегл <> 0
	|		И Партии.НалогообложениеНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Партии.МоментВремени,
	|		Партии.Период,
	|		Партии.Регистратор,
	|		Партии.Организация,
	|		Партии.СтоимостьРегл,
	|		Партии.НДСРегл,
	|		0 КАК НДСУпр,
	|		Партии.ДокументПоступления,
	|		Партии.АналитикаУчетаПартий,
	|		ВЫБОР КОГДА Партии.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры В (
	|							ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|							ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Товары) 
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПрочиеРаботыИУслуги) 
	|		КОНЕЦ КАК ВидЦенности,
	|		Партии.АналитикаУчетаПартий.НалогообложениеНДС КАК НалогообложениеПартии,
	|		Партии.НалогообложениеНДС,
	|		Партии.АналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности,
	|		Партии.КорАналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности,
	|		ВЫБОР 
	|			КОГДА Партии.АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Склад)
	|				ТОГДА Партии.АналитикаУчетаНоменклатуры.СкладскаяТерритория.Подразделение
	|			КОГДА Партии.АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Подразделение)
	|				ТОГДА Партии.АналитикаУчетаНоменклатуры.Подразделение
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ,
	|		Партии.СтатьяСписанияНДС,
	|		Партии.АналитикаСписанияНДС,
	|		ВЫБОР 
	|			КОГДА ТИПЗНАЧЕНИЯ(Партии.Регистратор) В (&ТипыДокументовЭкспорта)
	|				ТОГДА Партии.Регистратор
	|			КОГДА ТИПЗНАЧЕНИЯ(Партии.Регистратор) = ТИП(Документ.КорректировкаРеализации)
	|				ТОГДА ВЫРАЗИТЬ(Партии.Регистратор КАК Документ.КорректировкаРеализации).ДокументОснование
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ КАК ДокументРеализации
	|	ИЗ
	|		РегистрНакопления.ПартииПроизводственныхЗатрат КАК Партии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Задания КАК Задания
	|		ПО
	|			Задания.Организация = Партии.Организация
	|			И Задания.СчетФактура = Партии.ДокументПоступления
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Активность
	|		И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Партии.НДСРегл <> 0
	|		И Партии.НалогообложениеНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Партии.МоментВремени,
	|		Партии.Период,
	|		Партии.Регистратор,
	|		Партии.Организация,
	|		Партии.СтоимостьРегл,
	|		Партии.НДСРегл,
	|		0 КАК НДСУпр,
	|		Партии.ДокументПоступления,
	|		Партии.АналитикаУчетаПартий,
	|		ВЫБОР КОГДА Партии.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры В (
	|							ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|							ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|			ТОГДА 
	|				ВЫБОР 
	|					КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета ТОГДА
	|						ЕСТЬNULL(Партии.ВидЗапасов.ГруппаФинансовогоУчета.ВидЦенностиНДС, ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Товары))
	|					ИНАЧЕ ЕСТЬNULL(Партии.АналитикаУчетаНоменклатуры.Номенклатура.ГруппаФинансовогоУчета.ВидЦенностиНДС, ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Товары)) 
	|				КОНЕЦ 
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПрочиеРаботыИУслуги) 
	|		КОНЕЦ КАК ВидЦенности,
	|		Партии.АналитикаУчетаПартий.НалогообложениеНДС КАК НалогообложениеПартии,
	|		Партии.НалогообложениеНДС,
	|		Партии.АналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности,
	|		Партии.КорАналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности,
	|		НЕОПРЕДЕЛЕНО КАК ПодразделениеСписанияНДС,
	|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка) КАК СтатьяСписанияНДС,
	|		НЕОПРЕДЕЛЕНО КАК АналитикаСписанияНДС,
	|		ВЫБОР 
	|			КОГДА ТИПЗНАЧЕНИЯ(Партии.Регистратор) В (
	|					ТИП(Документ.ОтчетКомиссионера), 
	|					ТИП(Документ.ОтчетПоКомиссииМеждуОрганизациями))
	|				ТОГДА Партии.Регистратор
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ КАК ДокументРеализации
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровПереданныеНаКомиссию КАК Партии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Задания КАК Задания
	|		ПО
	|			Задания.Организация = Партии.Организация
	|			И Задания.СчетФактура = Партии.ДокументПоступления
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Активность
	|		И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Партии.НДСРегл <> 0
	|		И Партии.НалогообложениеНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|		И Партии.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Партии.МоментВремени,
	|		Партии.Период,
	|		Партии.Регистратор,
	|		Партии.Организация,
	|		Партии.СтоимостьБезНДС КАК СтоимостьРегл,
	|		Партии.НДС КАК НДСРегл,
	|		Партии.НДСУпр КАК НДСУпр,
	|		Партии.ДокументПоступления,
	|		Партии.АналитикаУчетаПартий,
	|		ЕСТЬNULL(Партии.АналитикаУчетаПартий.ВидЦенности, ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Товары)) КАК ВидЦенности,
	|		Партии.ВидДеятельностиНДС КАК НалогообложениеПартии,
	|		Партии.КорВидДеятельностиНДС КАК НалогообложениеНДС,
	|		Партии.АналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности,
	|		ЕСТЬNULL(Партии.КорАналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности,Партии.КорНаправлениеДеятельности),
	|		ВЫБОР 
	|			КОГДА Партии.АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Склад)
	|				ТОГДА Партии.АналитикаУчетаНоменклатуры.СкладскаяТерритория.Подразделение
	|			КОГДА Партии.АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Подразделение)
	|				ТОГДА Партии.АналитикаУчетаНоменклатуры.Подразделение
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ,
	|		Партии.СтатьяСписанияНДС,
	|		Партии.АналитикаСписанияНДС,
	|		ВЫБОР 
	|			КОГДА ТИПЗНАЧЕНИЯ(Партии.Регистратор) В (&ТипыДокументовЭкспорта)
	|				ТОГДА Партии.Регистратор
	|			КОГДА ТИПЗНАЧЕНИЯ(Партии.Регистратор) = ТИП(Документ.КорректировкаРеализации)
	|				ТОГДА ВЫРАЗИТЬ(Партии.Регистратор КАК Документ.КорректировкаРеализации).ДокументОснование
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ КАК ДокументРеализации
	|	ИЗ
	|		РегистрНакопления.ДетализацияПартийТоваровДляНДСиУСН КАК Партии
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Задания КАК Задания
	|		ПО
	|			Задания.Организация = Партии.Организация
	|			И Задания.СчетФактура = Партии.ДокументПоступления
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Активность
	|		И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Партии.НДС <> 0
	|		И Партии.КорВидДеятельностиНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|		И Партии.РазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыВПути)
	|		И НЕ Партии.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиентаПрошлыхПериодов),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровПоставщику))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Партии.МоментВремени,
	|		Партии.Период,
	|		Партии.Регистратор,
	|		Партии.Организация,
	|		-Партии.СтоимостьБезНДС КАК СтоимостьРегл,
	|		-Партии.НДС КАК НДСРегл,
	|		-Партии.НДСУпр КАК НДСУпр,
	|		Партии.ДокументПоступления,
	|		Партии.АналитикаУчетаПартий,
	|		ЕСТЬNULL(Партии.АналитикаУчетаПартий.ВидЦенности, ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Товары)) КАК ВидЦенности,
	|		Партии.ВидДеятельностиНДС КАК НалогообложениеПартии,
	|		ВЫБОР 
	|			КОГДА Партии.КорВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПоФактическомуИспользованию)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|			ИНАЧЕ Партии.КорВидДеятельностиНДС
	|		КОНЕЦ КАК НалогообложениеНДС,
	|		Партии.АналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности,
	|		ЕСТЬNULL(Партии.КорАналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности,Партии.КорНаправлениеДеятельности),
	|		ВЫБОР 
	|			КОГДА Партии.АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Склад)
	|				ТОГДА Партии.АналитикаУчетаНоменклатуры.СкладскаяТерритория.Подразделение
	|			КОГДА Партии.АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Подразделение)
	|				ТОГДА Партии.АналитикаУчетаНоменклатуры.Подразделение
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ,
	|		Партии.СтатьяСписанияНДС,
	|		Партии.АналитикаСписанияНДС,
	|		НЕОПРЕДЕЛЕНО КАК ДокументРеализации
	|	ИЗ
	|		РегистрНакопления.ДетализацияПартийТоваровДляНДСиУСН КАК Партии
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Задания КАК Задания
	|		ПО
	|			Задания.Организация = Партии.Организация
	|			И Задания.СчетФактура = Партии.ДокументПоступления
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Активность
	|		И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) //Корректировка приобретения
	|		И Партии.НДС <> 0
	|		И Партии.КорВидДеятельностиНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|		И Партии.РазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыВПути)
	|		И Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровПоставщику)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Партии.МоментВремени,
	|		Партии.Период,
	|		Партии.Регистратор,
	|		Партии.Организация,
	|		Партии.СтоимостьБезНДС КАК СтоимостьРегл,
	|		Партии.НДС КАК НДСРегл,
	|		Партии.НДСУпр КАК НДСУпр,
	|		Партии.ДокументПоступления,
	|		Партии.АналитикаУчетаПартий,
	|		ЕСТЬNULL(Партии.АналитикаУчетаПартий.ВидЦенности, ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Товары)) КАК ВидЦенности,
	|		Партии.ВидДеятельностиНДС КАК НалогообложениеПартии,
	|		Партии.КорВидДеятельностиНДС КАК НалогообложениеНДС,
	|		Партии.АналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности,
	|		ЕСТЬNULL(Партии.КорАналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности,Партии.КорНаправлениеДеятельности),
	|		ВЫБОР 
	|			КОГДА Партии.АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Склад)
	|				ТОГДА Партии.АналитикаУчетаНоменклатуры.СкладскаяТерритория.Подразделение
	|			КОГДА Партии.АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Подразделение)
	|				ТОГДА Партии.АналитикаУчетаНоменклатуры.Подразделение
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ,
	|		Партии.СтатьяСписанияНДС,
	|		Партии.АналитикаСписанияНДС,
	|		НЕОПРЕДЕЛЕНО КАК ДокументРеализации
	|	ИЗ
	|		РегистрНакопления.ДетализацияПартийТоваровДляНДСиУСН КАК Партии
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Задания КАК Задания
	|		ПО
	|			Задания.Организация = Партии.Организация
	|			И Задания.СчетФактура = Партии.ДокументПоступления
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Активность
	|		И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Партии.НДС <> 0
	|		И Партии.КорВидДеятельностиНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|		И Партии.РазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыВПути)
	|		И НЕ Партии.ВидДеятельностиНДС В (&ВидыДеятельностиНДСУчитываетсяВСтоимости)
	|		И Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровПоставщику)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Партии.МоментВремени,
	|		Партии.Период,
	|		Партии.Регистратор,
	|		Партии.Организация,
	|		Партии.СтоимостьБезНДС КАК СтоимостьРегл,
	|		Партии.НДС КАК НДСРегл,
	|		Партии.НДСУпр КАК НДСУпр,
	|		Партии.ДокументПоступления,
	|		Партии.АналитикаУчетаДокументаПоступления,
	|		ЕСТЬNULL(Партии.АналитикаУчетаДокументаПоступления.ВидЦенности, ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Товары)) КАК ВидЦенности,
	|		Партии.ВидДеятельностиНДС КАК НалогообложениеПартии,
	|		Партии.КорВидДеятельностиНДС КАК НалогообложениеНДС,
	|		Партии.НаправлениеДеятельности,
	|		ЕСТЬNULL(Партии.КорАналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности,Партии.КорНаправлениеДеятельности),
	|		НЕОПРЕДЕЛЕНО,
	|		Партии.СтатьяСписанияНДС,
	|		Партии.АналитикаСписанияНДС,
	|		ВЫБОР 
	|			КОГДА ТИПЗНАЧЕНИЯ(Партии.Регистратор) В (&ТипыДокументовЭкспорта)
	|				ТОГДА Партии.Регистратор
	|			КОГДА ТИПЗНАЧЕНИЯ(Партии.Регистратор) = ТИП(Документ.КорректировкаРеализации)
	|				ТОГДА ВЫРАЗИТЬ(Партии.Регистратор КАК Документ.КорректировкаРеализации).ДокументОснование
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ КАК ДокументРеализации
	|	ИЗ
	|		РегистрНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4 КАК Партии
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Задания КАК Задания
	|		ПО
	|			Задания.Организация = Партии.Организация
	|			И Задания.СчетФактура = Партии.ДокументПоступления
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Активность
	|		И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Партии.НДС <> 0
	|		И Партии.КорВидДеятельностиНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|		И НЕ Партии.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиентаПрошлыхПериодов),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровПоставщику))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Партии.МоментВремени,
	|		Партии.Период,
	|		Партии.Регистратор,
	|		Партии.Организация,
	|		-Партии.СтоимостьБезНДС КАК СтоимостьРегл,
	|		-Партии.НДС КАК НДСРегл,
	|		-Партии.НДСУпр КАК НДСУпр,
	|		Партии.ДокументПоступления,
	|		Партии.АналитикаУчетаДокументаПоступления,
	|		ЕСТЬNULL(Партии.АналитикаУчетаДокументаПоступления.ВидЦенности, ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Товары)) КАК ВидЦенности,
	|		Партии.ВидДеятельностиНДС КАК НалогообложениеПартии,
	|		ВЫБОР 
	|			КОГДА Партии.КорВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПоФактическомуИспользованию)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|			ИНАЧЕ Партии.КорВидДеятельностиНДС
	|		КОНЕЦ КАК НалогообложениеНДС,
	|		Партии.НаправлениеДеятельности,
	|		ЕСТЬNULL(Партии.КорАналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности,Партии.КорНаправлениеДеятельности),
	|		НЕОПРЕДЕЛЕНО,
	|		Партии.СтатьяСписанияНДС,
	|		Партии.АналитикаСписанияНДС,
	|		НЕОПРЕДЕЛЕНО КАК ДокументРеализации
	|	ИЗ
	|		РегистрНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4 КАК Партии
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Задания КАК Задания
	|		ПО
	|			Задания.Организация = Партии.Организация
	|			И Задания.СчетФактура = Партии.ДокументПоступления
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Активность
	|		И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) //корректировка приобретения
	|		И Партии.НДС <> 0
	|		И Партии.КорВидДеятельностиНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|		И Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровПоставщику)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Партии.МоментВремени,
	|		Партии.Период,
	|		Партии.Регистратор,
	|		Партии.Организация,
	|		Партии.СтоимостьБезНДС КАК СтоимостьРегл,
	|		Партии.НДС КАК НДСРегл,
	|		Партии.НДСУпр КАК НДСУпр,
	|		Партии.ДокументПоступления,
	|		Партии.АналитикаУчетаДокументаПоступления,
	|		ЕСТЬNULL(Партии.АналитикаУчетаДокументаПоступления.ВидЦенности, ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Товары)) КАК ВидЦенности,
	|		Партии.ВидДеятельностиНДС КАК НалогообложениеПартии,
	|		Партии.КорВидДеятельностиНДС КАК НалогообложениеНДС,
	|		Партии.НаправлениеДеятельности,
	|		ЕСТЬNULL(Партии.КорАналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности,Партии.КорНаправлениеДеятельности),
	|		НЕОПРЕДЕЛЕНО,
	|		Партии.СтатьяСписанияНДС,
	|		Партии.АналитикаСписанияНДС,
	|		НЕОПРЕДЕЛЕНО КАК ДокументРеализации
	|	ИЗ
	|		РегистрНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4 КАК Партии
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Задания КАК Задания
	|		ПО
	|			Задания.Организация = Партии.Организация
	|			И Задания.СчетФактура = Партии.ДокументПоступления
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Активность
	|		И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Партии.НДС <> 0
	|		И Партии.КорВидДеятельностиНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|		И НЕ Партии.ВидДеятельностиНДС В (&ВидыДеятельностиНДСУчитываетсяВСтоимости)
	|		И Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровПоставщику)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Партии.МоментВремени,
	|		Партии.Период,
	|		Партии.Регистратор,
	|		Партии.Организация,
	|		Партии.СтоимостьБезНДС КАК СтоимостьРегл,
	|		Партии.НДС КАК НДСРегл,
	|		Партии.НДСУпр КАК НДСУпр,
	|		Партии.ДокументПоступления,
	|		Партии.АналитикаУчетаДокументаПоступления,
	|		ЕСТЬNULL(Партии.АналитикаУчетаДокументаПоступления.ВидЦенности, ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Товары)) КАК ВидЦенности,
	|		Партии.ВидДеятельностиНДС КАК НалогообложениеПартии,
	|		Партии.КорВидДеятельностиНДС КАК НалогообложениеНДС,
	|		Партии.НаправлениеДеятельности,
	|		ЕСТЬNULL(Партии.КорАналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности,Партии.КорНаправлениеДеятельности),
	|		НЕОПРЕДЕЛЕНО,
	|		Партии.СтатьяСписанияНДС,
	|		Партии.АналитикаСписанияНДС,
	|		ВЫБОР 
	|			КОГДА ТИПЗНАЧЕНИЯ(Партии.Регистратор) В (&ТипыДокументовЭкспорта)
	|				ТОГДА Партии.Регистратор
	|			КОГДА ТИПЗНАЧЕНИЯ(Партии.Регистратор) = ТИП(Документ.КорректировкаРеализации)
	|				ТОГДА ВЫРАЗИТЬ(Партии.Регистратор КАК Документ.КорректировкаРеализации).ДокументОснование
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ КАК ДокументРеализации
	|	ИЗ
	|		РегистрНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4 КАК Партии
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Задания КАК Задания
	|		ПО
	|			Задания.Организация = Партии.Организация
	|			И Задания.СчетФактура = Партии.ДокументПоступления
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Активность
	|		И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Партии.НДС <> 0
	|		И Партии.КорВидДеятельностиНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|		И Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности)
	|		И Партии.Регистратор <> Партии.Партия
	|	) КАК Партии
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|	ПО
	|		ДанныеПервичныхДокументов.Организация.ГоловнаяОрганизация = Партии.Организация.ГоловнаяОрганизация
	|		И ДанныеПервичныхДокументов.Документ = Партии.ДокументПоступления
	|	
	|ГДЕ
	|	Партии.НалогообложениеПартии <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Партии.МоментВремени КАК МоментВремени,
	|	Партии.Период КАК Период,
	|	Партии.Регистратор КАК Регистратор,
	|	Партии.Организация КАК Организация,
	|	Партии.Поставщик КАК Контрагент,
	|	Партии.ДокументПоступленияРасходов КАК СчетФактура,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПоступления,
	|	Партии.ВидЦенности КАК ВидЦенности,
	|	Партии.СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА Партии.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
	|		КОГДА Партии.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|		КОГДА Партии.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров)
	|			И  ЕСТЬNULL(ДанныеПервичныхДокументов.ДатаРегистратора, ДАТАВРЕМЯ(1,1,1)) >= &ДатаНачалаДействия150ФЗ
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|		КОГДА Партии.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.РеализацияРаботУслугНаЭкспорт)
	|			И ЕСТЬNULL(ДанныеПервичныхДокументов.ДатаРегистратора, ДАТАВРЕМЯ(1,1,1)) >= &ДатаВозможностиВычетаПриОказанииУслугНеВРФ
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|		КОГДА Партии.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.РеализацияРаботУслугНаЭкспорт)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
	|		ИНАЧЕ Партии.ВидДеятельностиНДС
	|	КОНЕЦ КАК ВидДеятельностиНДС,
	|	ВЫБОР
	|		КОГДА Партии.КорВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
	|		КОГДА Партии.КорВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|		КОГДА Партии.КорВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров)
	|			И  ЕСТЬNULL(ДанныеПервичныхДокументов.ДатаРегистратора, ДАТАВРЕМЯ(1,1,1)) >= &ДатаНачалаДействия150ФЗ
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|		КОГДА Партии.КорВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.РеализацияРаботУслугНаЭкспорт)
	|			И ЕСТЬNULL(ДанныеПервичныхДокументов.ДатаРегистратора, ДАТАВРЕМЯ(1,1,1)) >= &ДатаВозможностиВычетаПриОказанииУслугНеВРФ
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|		КОГДА Партии.КорВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.РеализацияРаботУслугНаЭкспорт)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
	|		ИНАЧЕ Партии.КорВидДеятельностиНДС
	|	КОНЕЦ КАК КорВидДеятельностиНДС,
	|	Партии.СтатьяОтраженияРасходов КАК СтатьяСписанияНДС,
	|	Партии.АналитикаОтраженияРасходов КАК АналитикаСписанияНДС,
	|	Партии.НаправлениеДеятельности КАК НаправлениеДеятельностиСписанияНДС,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(ДанныеПервичныхДокументов.ДатаРегистратора, ДАТАВРЕМЯ(1,1,1)) >= &ДатаНачалаУчетаНДСПоНаправлениямДеятельности
	|			ТОГДА Партии.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(ДанныеПервичныхДокументов.ДатаРегистратора, ДАТАВРЕМЯ(1,1,1)) >= &ДатаНачалаУчетаНДСПоНаправлениямДеятельности
	|			ТОГДА Партии.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ КАК КорНаправлениеДеятельности,
	|	Партии.Подразделение КАК ПодразделениеСписанияНДС,
	|	Партии.ДокументРеализации КАК ДокументРеализации,
	|	Партии.СтоимостьРегл КАК СуммаБезНДС,
	|	Партии.НДСРегл КАК НДС,
	|	Партии.НДСУпр КАК НДСУпр
	|ИЗ
	|	РегистрНакопления.ПартииНДСКРаспределению КАК Партии
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Задания КАК Задания
	|	ПО
	|		Задания.Организация = Партии.Организация
	|		И Задания.СчетФактура = Партии.ДокументПоступленияРасходов
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|	ПО
	|		ДанныеПервичныхДокументов.Организация.ГоловнаяОрганизация = Партии.Организация.ГоловнаяОрганизация
	|		И ДанныеПервичныхДокументов.Документ = Партии.ДокументПоступленияРасходов
	|		
	|ГДЕ
	|	Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Партии.Активность
	|	И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И Партии.НДСРегл <> 0
	|	И Партии.КорВидДеятельностиНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Партии.МоментВремени КАК МоментВремени,
	|	Партии.Период КАК Период,
	|	Партии.Регистратор КАК Регистратор,
	|	Партии.Организация КАК Организация,
	|	Партии.Контрагент КАК Контрагент,
	|	Партии.СчетФактура КАК СчетФактура,
	|	Партии.ДатаПоступления КАК ДатаПоступления,
	|	Партии.ВидЦенности КАК ВидЦенности,
	|	Партии.СтавкаНДС КАК СтавкаНДС,
	|	Партии.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	Партии.КорВидДеятельностиНДС КАК КорВидДеятельностиНДС,
	|	Партии.СтатьяСписанияНДС КАК СтатьяСписанияНДС,
	|	Партии.АналитикаСписанияНДС КАК АналитикаСписанияНДС,
	|	Партии.НаправлениеДеятельностиСписанияНДС КАК НаправлениеДеятельностиСписанияНДС,
	|	ЕСТЬNULL(Партии.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) КАК НаправлениеДеятельности,
	|	ЕСТЬNULL(Партии.КорНаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) КАК КорНаправлениеДеятельности,
	|	Партии.ПодразделениеСписанияНДС КАК ПодразделениеСписанияНДС,
	|	Партии.ДокументРеализации КАК ДокументРеализации,
	|	СУММА(Партии.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(Партии.НДС) КАК НДС,
	|	СУММА(Партии.НДСУпр) КАК НДСУпр
	|ПОМЕСТИТЬ Партии
	|ИЗ
	|	ПартииПредварительная КАК Партии
	|
	|СГРУППИРОВАТЬ ПО
	|	Партии.МоментВремени,
	|	Партии.Период,
	|	Партии.Регистратор,
	|	Партии.Организация,
	|	Партии.Контрагент,
	|	Партии.СчетФактура,
	|	Партии.ДатаПоступления,
	|	Партии.ВидЦенности,
	|	Партии.СтавкаНДС,
	|	Партии.ВидДеятельностиНДС,
	|	Партии.КорВидДеятельностиНДС,
	|	Партии.СтатьяСписанияНДС,
	|	Партии.АналитикаСписанияНДС,
	|	Партии.НаправлениеДеятельностиСписанияНДС,
	|	ЕСТЬNULL(Партии.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)),
	|	ЕСТЬNULL(Партии.КорНаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)),
	|	Партии.ПодразделениеСписанияНДС,
	|	Партии.ДокументРеализации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПартииПредварительная
	|";
	
	Запрос.УстановитьПараметр("НачалоПериода",           ПараметрыРасчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",            ПараметрыРасчета.КонецПериода);
	Запрос.УстановитьПараметр("МассивОрганизаций",       ПараметрыРасчета.МассивОрганизаций);
	Запрос.УстановитьПараметр("ДатаНачалаДействия150ФЗ", УчетНДСУП.НастройкиУчета().ДатаРазделенияЭкспорта);
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета"));
	Запрос.УстановитьПараметр("ДатаНачалаУчетаНДСПоНаправлениямДеятельности", УчетНДСУП.НастройкиУчета().ДатаНачалаУчетаНДСПоНаправлениямДеятельности);
	Запрос.УстановитьПараметр("ДатаВозможностиВычетаПриОказанииУслугНеВРФ", Дата("20190701"));
	Запрос.УстановитьПараметр("ТипыДокументовЭкспорта",  Метаданные.РегистрыНакопления.НДСПредъявленный.Измерения.РеализацияЭкспорт.Тип.Типы());
	Запрос.УстановитьПараметр("ВидыДеятельностиНДСУчитываетсяВСтоимости", УчетНДСУП.ВидыДеятельностиНДСУчитываетсяВСтоимости());
	
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

// См. УчетНДСУПСлужебный.ПолучитьСчетаФактурыДокументы
Процедура ПолучитьСчетаФактурыДокументы(ПараметрыРасчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Задания.Организация      КАК Организация,
	|	Задания.СчетФактура      КАК СчетФактура,
	|	Операция.Ссылка          КАК Ссылка,
	|	Операция.ДатаСоставления КАК Дата,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НЕ ПартииНДСКРаспределению.Регистратор ЕСТЬ NULL
	|			ТОГДА КОНЕЦПЕРИОДА(Операция.ДатаЗаписиКнигиПокупок, КВАРТАЛ)
	|		КОГДА Операция.ДатаЗаписиКнигиПокупок = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА Операция.Дата
	|		ИНАЧЕ
	|			Операция.ДатаЗаписиКнигиПокупок
	|	КОНЕЦ)              КАК ДатаЗаписиКнигиПокупок,
	|	НЕОПРЕДЕЛЕНО        КАК ДокументОплаты,
	|	НЕОПРЕДЕЛЕНО        КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ СчетаФактурыДокументы
	|ИЗ
	|	Документ.СчетФактураПолученный КАК Операция
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		Документ.СчетФактураПолученный.ДокументыОснования КАК Строки
	|	ПО 
	|		Операция.Ссылка = Строки.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		Задания КАК Задания
	|	ПО 
	|		Операция.Организация = Задания.Организация
	|		И Строки.ДокументОснование = Задания.СчетФактура
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ПартииНДСКРаспределению КАК ПартииНДСКРаспределению
	|	ПО
	|		Операция.Корректировочный
	|		И ПартииНДСКРаспределению.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Строки.ДокументОснование = ПартииНДСКРаспределению.Регистратор
	|		И ПартииНДСКРаспределению.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|ГДЕ
	|	Операция.Проведен
	|	И НЕ Операция.Исправление
	|
	|СГРУППИРОВАТЬ ПО
	|	Задания.Организация,
	|	Задания.СчетФактура,
	|	Операция.Ссылка,
	|	Операция.Дата 
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НЕ ПартииНДСКРаспределению.Регистратор ЕСТЬ NULL
	|			ТОГДА КОНЕЦПЕРИОДА(Операция.ДатаЗаписиКнигиПокупок, КВАРТАЛ)
	|		КОГДА Операция.ДатаЗаписиКнигиПокупок = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА Операция.Дата
	|		ИНАЧЕ
	|			Операция.ДатаЗаписиКнигиПокупок
	|	КОНЕЦ) <= &КонецПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Задания.Организация      КАК Организация,
	|	Задания.СчетФактура      КАК СчетФактура,
	|	Операция.Ссылка          КАК Ссылка,
	|	Операция.ДатаСоставления КАК Дата,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НЕ ПартииНДСКРаспределению.Регистратор ЕСТЬ NULL
	|			ТОГДА КОНЕЦПЕРИОДА(Операция.ДатаЗаписиКнигиПокупок, КВАРТАЛ)
	|		КОГДА Операция.ДатаЗаписиКнигиПокупок = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА Операция.Дата
	|		ИНАЧЕ
	|			Операция.ДатаЗаписиКнигиПокупок
	|	КОНЕЦ)              КАК ДатаЗаписиКнигиПокупок,
	|	НЕОПРЕДЕЛЕНО        КАК ДокументОплаты,
	|	НЕОПРЕДЕЛЕНО        КАК ДоговорКонтрагента
	|ИЗ
	|	Документ.СчетФактураПолученныйНалоговыйАгент КАК Операция
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		Задания КАК Задания
	|	ПО 
	|		Операция.Организация = Задания.Организация
	|		И Операция.Ссылка = Задания.СчетФактура
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ПартииНДСКРаспределению КАК ПартииНДСКРаспределению
	|	ПО
	|		Операция.Корректировочный
	|		И ПартииНДСКРаспределению.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Операция.Ссылка = ПартииНДСКРаспределению.ДокументПоступленияРасходов
	|		И ПартииНДСКРаспределению.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|ГДЕ
	|	Операция.Проведен
	|	И НЕ Операция.Исправление
	|
	|СГРУППИРОВАТЬ ПО
	|	Задания.Организация,
	|	Задания.СчетФактура,
	|	Операция.Ссылка,
	|	Операция.Дата 
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НЕ ПартииНДСКРаспределению.Регистратор ЕСТЬ NULL
	|			ТОГДА КОНЕЦПЕРИОДА(Операция.ДатаЗаписиКнигиПокупок, КВАРТАЛ)
	|		КОГДА Операция.ДатаЗаписиКнигиПокупок = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА Операция.Дата
	|		ИНАЧЕ
	|			Операция.ДатаЗаписиКнигиПокупок
	|	КОНЕЦ) <= &КонецПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Задания.Организация КАК Организация,
	|	Задания.СчетФактура КАК СчетФактура,
	|	Операция.Ссылка     КАК Ссылка,
	|	Операция.ДатаВыставления КАК Дата,
	|	Операция.ДатаВыставления КАК ДатаЗаписиКнигиПокупок,
	|	НЕОПРЕДЕЛЕНО        КАК ДокументОплаты,
	|	НЕОПРЕДЕЛЕНО        КАК ДоговорКонтрагента
	|ИЗ
	|	Документ.СчетФактураВыданный КАК Операция
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК Строки
	|		ПО Операция.Ссылка = Строки.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задания КАК Задания
	|		ПО Операция.Контрагент = Задания.Организация
	|		И Строки.ДокументОснование = Задания.СчетФактура
	|		И ЕСТЬNULL(ВЫРАЗИТЬ(Строки.ДокументОснование КАК Документ.ПередачаТоваровМеждуОрганизациями).НалогообложениеНДС,
	|								ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)) 
	|							<> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
	|ГДЕ
	|	Операция.ДатаВыставления <= &КонецПериода
	|	И Операция.ДатаВыставления <> ДАТАВРЕМЯ(1, 1, 1)
	|	И Операция.Проведен
	|	И НЕ Операция.Исправление
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Задания.Организация КАК Организация,
	|	Задания.СчетФактура КАК СчетФактура,
	|	Операция.Ссылка     КАК Ссылка,
	|	Операция.Дата       КАК Дата,
	|	Операция.Дата       КАК ДатаЗаписиКнигиПокупок,
	|	НЕОПРЕДЕЛЕНО        КАК ДокументОплаты,
	|	НЕОПРЕДЕЛЕНО        КАК ДоговорКонтрагента
	|ИЗ
	|	Документ.ИнойДокументПодтвержденияНДС КАК Операция
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		Задания КАК Задания
	|	ПО 
	|		Операция.Организация = Задания.Организация
	|		И Операция.ДокументОснование = Задания.СчетФактура
	|ГДЕ
	|	Операция.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураНалоговыйАгент.Организация КАК Организация,
	|	СчетФактураНалоговыйАгент.Ссылка  КАК СчетФактура,
	|	СчетФактураНалоговыйАгент.Ссылка  КАК Ссылка,
	|	СчетФактураНалоговыйАгент.Дата КАК Дата,
	|	ДАТАВРЕМЯ(1,1,1) КАК ДатаЗаписиКнигиПокупок, // Определяется периодом оплаты НДС в бюджет
	|	СчетФактураНалоговыйАгент.ДокументОснование              КАК ДокументОплаты,
	|	СчетФактураНалоговыйАгент.Договор                        КАК ДоговорКонтрагента
	|ИЗ
	|	Документ.СчетФактураНалоговыйАгент КАК СчетФактураНалоговыйАгент
	|ГДЕ
	|	СчетФактураНалоговыйАгент.Проведен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация, 
	|	СчетФактура
	|";
	
	Запрос.УстановитьПараметр("НачалоПериода",     ПараметрыРасчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",      ПараметрыРасчета.КонецПериода);
	Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыРасчета.МассивОрганизаций);
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

// См. УчетНДСУПСлужебный.ПолучитьИсправительныеСчетаФактурыДокументы
Процедура ПолучитьИсправительныеСчетаФактурыДокументы(ПараметрыРасчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	0 КАК Приоритет,
	|	Задания.Организация КАК Организация,
	|	Задания.СчетФактура КАК СчетФактура,
	|	КорректировкаПриобретенияИсправление.Ссылка КАК ИсправительныйСчетФактура,
	|	ИсправительныйСчетФактура.Ссылка КАК Ссылка,
	|	ИсправительныйСчетФактура.Ссылка.НомерИсправления КАК НомерИсправления,
	|	ИсправительныйСчетФактура.Ссылка.ДатаИсправления КАК ДатаИсправления,
	|	ВЫБОР
	|		КОГДА ИсправительныйСчетФактура.Ссылка.ДатаЗаписиКнигиПокупок = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ИсправительныйСчетФактура.Ссылка.ДатаИсправления
	|		ИНАЧЕ ИсправительныйСчетФактура.Ссылка.ДатаЗаписиКнигиПокупок
	|	КОНЕЦ КАК ДатаЗаписиКнигиПокупок,
	|	КорректировкаПриобретенияИсправление.МоментВремени КАК МоментВремени,
	|	ИсправительныйСчетФактура.Ссылка.Дата КАК ДатаПолучения,
	|	ИсправительныйСчетФактура.Ссылка.ОтнестиКПредыдущемуОтчетномуКварталу КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР КОГДА ИсправительныйСчетФактура.Ссылка.ОтнестиКПредыдущемуОтчетномуКварталу 
	|		ТОГДА ИсправительныйСчетФактура.Ссылка.ДатаСоставления
	|	ИНАЧЕ ДАТАВРЕМЯ(1,1,1) КОНЕЦ КАК КорректируемыйПериод
	|ПОМЕСТИТЬ ВсеИсправительныеСчетаФактуры
	|ИЗ
	|	Задания КАК Задания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаПриобретения КАК КорректировкаПриобретенияИсправление
	|		ПО Задания.СчетФактура = КорректировкаПриобретенияИсправление.ДокументОснование
	|			И (КорректировкаПриобретенияИсправление.ВидКорректировки = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ИсправлениеОшибок))
	|			И (КорректировкаПриобретенияИсправление.Проведен)
	|			И (КорректировкаПриобретенияИсправление.Дата <= &КонецПериода)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК ИсправительныйСчетФактура
	|		ПО (КорректировкаПриобретенияИсправление.Ссылка = ИсправительныйСчетФактура.ДокументОснование)
	|			И (ИсправительныйСчетФактура.Ссылка.Проведен)
	|			И (ИсправительныйСчетФактура.Ссылка.Исправление)
	|			И (ИсправительныйСчетФактура.Ссылка.Дата <= &КонецПериода)
	|			И (НЕ ИсправительныйСчетФактура.Ссылка.Корректировочный)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК ДругиеИсправительныеСчетаФактуры
	|		ПО (ИсправительныйСчетФактура.Ссылка.СчетФактураОснование = ДругиеИсправительныеСчетаФактуры.СчетФактураОснование)
	|			И (ИсправительныйСчетФактура.Ссылка.НомерИсправления > ДругиеИсправительныеСчетаФактуры.НомерИсправления)
	|			И (ДругиеИсправительныеСчетаФактуры.Проведен)
	|			И (ДругиеИсправительныеСчетаФактуры.Исправление)
	|			И (ДругиеИсправительныеСчетаФактуры.Дата <= &КонецПериода)
	|			И (НЕ ДругиеИсправительныеСчетаФактуры.Корректировочный)
	|ГДЕ
	|	ДругиеИсправительныеСчетаФактуры.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	0 КАК Приоритет,
	|	Задания.Организация,
	|	Задания.СчетФактура,
	|	КорректировкаПриобретенияИсправление.Ссылка,
	|	ИсправительныйСчетФактура.Ссылка,
	|	ИсправительныйСчетФактура.Ссылка.НомерИсправления,
	|	ИсправительныйСчетФактура.Ссылка.ДатаИсправления,
	|	ВЫБОР
	|		КОГДА ИсправительныйСчетФактура.Ссылка.ДатаЗаписиКнигиПокупок = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ИсправительныйСчетФактура.Ссылка.ДатаИсправления
	|		ИНАЧЕ ИсправительныйСчетФактура.Ссылка.ДатаЗаписиКнигиПокупок
	|	КОНЕЦ,
	|	КорректировкаПриобретенияИсправление.МоментВремени КАК МоментВремени,
	|	ИсправительныйСчетФактура.Ссылка.Дата,
	|	ИсправительныйСчетФактура.Ссылка.ОтнестиКПредыдущемуОтчетномуКварталу,
	|	ВЫБОР КОГДА ИсправительныйСчетФактура.Ссылка.ОтнестиКПредыдущемуОтчетномуКварталу 
	|		ТОГДА ИсправительныйСчетФактура.Ссылка.ДатаСоставления
	|	ИНАЧЕ ДАТАВРЕМЯ(1,1,1) КОНЕЦ
	|ИЗ
	|	Задания КАК Задания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаПриобретения КАК КорректировкаПриобретенияПоСогласованию
	|		ПО Задания.СчетФактура = КорректировкаПриобретенияПоСогласованию.Ссылка
	|			И (КорректировкаПриобретенияПоСогласованию.ВидКорректировки = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон))
	|			И (КорректировкаПриобретенияПоСогласованию.Проведен)
	|			И (КорректировкаПриобретенияПоСогласованию.Дата <= &КонецПериода)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаПриобретения КАК КорректировкаПриобретенияИсправление
	|		ПО (КорректировкаПриобретенияПоСогласованию.ДокументОснование = КорректировкаПриобретенияИсправление.ДокументОснование)
	|			И (КорректировкаПриобретенияПоСогласованию.Дата < КорректировкаПриобретенияИсправление.Дата)
	|			И (КорректировкаПриобретенияИсправление.ВидКорректировки = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ИсправлениеОшибок))
	|			И (КорректировкаПриобретенияИсправление.Проведен)
	|			И (КорректировкаПриобретенияИсправление.Дата <= &КонецПериода)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК ИсправительныйСчетФактура
	|		ПО (КорректировкаПриобретенияИсправление.Ссылка = ИсправительныйСчетФактура.ДокументОснование)
	|			И (ИсправительныйСчетФактура.Ссылка.Проведен)
	|			И (ИсправительныйСчетФактура.Ссылка.Исправление)
	|			И (ИсправительныйСчетФактура.Ссылка.Дата <= &КонецПериода)
	|			И (ИсправительныйСчетФактура.Ссылка.Корректировочный)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК ДругиеИсправительныеСчетаФактуры
	|		ПО (ИсправительныйСчетФактура.Ссылка.СчетФактураОснование = ДругиеИсправительныеСчетаФактуры.СчетФактураОснование)
	|			И (ИсправительныйСчетФактура.Ссылка.НомерИсправления > ДругиеИсправительныеСчетаФактуры.НомерИсправления)
	|			И (ДругиеИсправительныеСчетаФактуры.Проведен)
	|			И (ДругиеИсправительныеСчетаФактуры.Исправление)
	|			И (ДругиеИсправительныеСчетаФактуры.Дата <= &КонецПериода)
	|			И (НЕ ДругиеИсправительныеСчетаФактуры.Корректировочный)
	|ГДЕ
	|	ДругиеИсправительныеСчетаФактуры.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	1 КАК Приоритет,
	|	Задания.Организация,
	|	Задания.СчетФактура,
	|	ИсправительныйСчетФактура.Ссылка,
	|	ИсправительныйСчетФактура.Ссылка,
	|	ИсправительныйСчетФактура.Ссылка.НомерИсправления,
	|	ИсправительныйСчетФактура.Ссылка.ДатаИсправления,
	|	ИсправительныйСчетФактура.Ссылка.ДатаЗаписиКнигиПокупок,
	|	ИсправительныйСчетФактура.Ссылка.МоментВремени,
	|	ИсправительныйСчетФактура.Ссылка.Дата,
	|	ИсправительныйСчетФактура.Ссылка.ОтнестиКПредыдущемуОтчетномуКварталу,
	|	ВЫБОР КОГДА ИсправительныйСчетФактура.Ссылка.ОтнестиКПредыдущемуОтчетномуКварталу 
	|		ТОГДА ИсправительныйСчетФактура.Ссылка.ДатаСоставления
	|	ИНАЧЕ ДАТАВРЕМЯ(1,1,1) КОНЕЦ
	|ИЗ
	|	Задания КАК Задания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК ИсправительныйСчетФактура
	|		ПО Задания.СчетФактура = ИсправительныйСчетФактура.ДокументОснование
	|			И (ИсправительныйСчетФактура.Ссылка.Проведен)
	|			И (ИсправительныйСчетФактура.Ссылка.Исправление)
	|			И (ИсправительныйСчетФактура.Ссылка.Дата <= &КонецПериода)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	1,
	|	Задания.Организация,
	|	Задания.СчетФактура,
	|	ИсправительныйСчетФактура.Ссылка,
	|	ИсправительныйСчетФактура.Ссылка,
	|	ИсправительныйСчетФактура.Ссылка.НомерИсправления,
	|	ИсправительныйСчетФактура.Ссылка.ДатаИсправления,
	|	ИсправительныйСчетФактура.Ссылка.ДатаЗаписиКнигиПокупок,
	|	ИсправительныйСчетФактура.Ссылка.МоментВремени,
	|	ИсправительныйСчетФактура.Ссылка.Дата,
	|	ИсправительныйСчетФактура.Ссылка.ОтнестиКПредыдущемуОтчетномуКварталу,
	|	ВЫБОР КОГДА ИсправительныйСчетФактура.Ссылка.ОтнестиКПредыдущемуОтчетномуКварталу 
	|		ТОГДА ИсправительныйСчетФактура.Ссылка.ДатаСоставления
	|	ИНАЧЕ ДАТАВРЕМЯ(1,1,1) КОНЕЦ
	|ИЗ
	|	Задания КАК Задания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйОснования
	|		ПО Задания.СчетФактура = СчетФактураПолученныйОснования.ДокументОснование
	|			И (СчетФактураПолученныйОснования.Ссылка.Проведен)
	|			И (СчетФактураПолученныйОснования.Ссылка.Дата <= &КонецПериода)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК ИсправительныйСчетФактура
	|		ПО (СчетФактураПолученныйОснования.Ссылка = ИсправительныйСчетФактура.СчетФактураОснование)
	|			И (ИсправительныйСчетФактура.Ссылка.Проведен)
	|			И (ИсправительныйСчетФактура.Ссылка.Исправление)
	|			И (ИсправительныйСчетФактура.Ссылка.Дата <= &КонецПериода)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	0 КАК Приоритет,
	|	Задания.Организация,
	|	Задания.СчетФактура,
	|	ИсправительныйСчетФактура.Ссылка,
	|	ИсправительныйСчетФактура.Ссылка,
	|	ИсправительныйСчетФактура.НомерИсправления,
	|	ИсправительныйСчетФактура.ДатаИсправления,
	|	ИсправительныйСчетФактура.ДатаЗаписиКнигиПокупок,
	|	ИсправительныйСчетФактура.МоментВремени,
	|	ИсправительныйСчетФактура.Дата,
	|	ИсправительныйСчетФактура.ОтнестиКПредыдущемуОтчетномуКварталу,
	|	ВЫБОР КОГДА ИсправительныйСчетФактура.ОтнестиКПредыдущемуОтчетномуКварталу 
	|		ТОГДА ИсправительныйСчетФактура.ДатаСоставления
	|	ИНАЧЕ ДАТАВРЕМЯ(1,1,1) КОНЕЦ
	|ИЗ
	|	Задания КАК Задания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйНалоговыйАгент КАК ИсправительныйСчетФактура
	|		ПО Задания.СчетФактура = ИсправительныйСчетФактура.СчетФактураОснование
	|			И (ИсправительныйСчетФактура.Проведен)
	|			И (ИсправительныйСчетФактура.Исправление)
	|			И (ИсправительныйСчетФактура.Дата <= &КонецПериода)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	1,
	|	Задания.Организация,
	|	Задания.СчетФактура,
	|	ИсправительныйСчетФактура.Ссылка,
	|	ИсправительныйСчетФактура.Ссылка,
	|	ИсправительныйСчетФактура.Ссылка.НомерИсправления,
	|	ИсправительныйСчетФактура.Ссылка.ДатаИсправления,
	|	ИсправительныйСчетФактура.Ссылка.ДатаЗаписиКнигиПокупок,
	|	ИсправительныйСчетФактура.Ссылка.МоментВремени,
	|	ИсправительныйСчетФактура.Ссылка.Дата,
	|	ИсправительныйСчетФактура.Ссылка.ОтнестиКПредыдущемуОтчетномуКварталу,
	|	ВЫБОР КОГДА ИсправительныйСчетФактура.Ссылка.ОтнестиКПредыдущемуОтчетномуКварталу 
	|		ТОГДА ИсправительныйСчетФактура.Ссылка.ДатаСоставления
	|	ИНАЧЕ ДАТАВРЕМЯ(1,1,1) КОНЕЦ
	|ИЗ
	|	Задания КАК Задания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК СчетФактураПолученныйОснования
	|		ПО Задания.СчетФактура = СчетФактураПолученныйОснования.ДокументОснование
	|			И (СчетФактураПолученныйОснования.Ссылка.Проведен)
	|			И (СчетФактураПолученныйОснования.Ссылка.Дата <= &КонецПериода)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйНалоговыйАгент КАК ИсправительныйСчетФактура
	|		ПО (СчетФактураПолученныйОснования.Ссылка = ИсправительныйСчетФактура.СчетФактураОснование)
	|			И (ИсправительныйСчетФактура.Ссылка.Проведен)
	|			И (ИсправительныйСчетФактура.Ссылка.Исправление)
	|			И (ИсправительныйСчетФактура.Ссылка.Дата <= &КонецПериода)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	1 КАК Приоритет,
	|	Задания.Организация,
	|	Задания.СчетФактура,
	|	ИсправительныйСчетФактура.Ссылка,
	|	ИсправительныйСчетФактура.Ссылка,
	|	ИсправительныйСчетФактура.Ссылка.НомерИсправления,
	|	ИсправительныйСчетФактура.Ссылка.Дата,
	|	ИсправительныйСчетФактура.Ссылка.Дата,
	|	ИсправительныйСчетФактура.Ссылка.МоментВремени,
	|	ИсправительныйСчетФактура.Ссылка.Дата,
	|	ЛОЖЬ,
	|	ДАТАВРЕМЯ(1,1,1)
	|ИЗ
	|	Задания КАК Задания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК ИсправительныйСчетФактура
	|		ПО Задания.СчетФактура = ИсправительныйСчетФактура.ДокументОснование
	|			И (ИсправительныйСчетФактура.Ссылка.Проведен)
	|			И (ИсправительныйСчетФактура.Ссылка.Исправление)
	|			И (ИсправительныйСчетФактура.Ссылка.Дата <= &КонецПериода)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсправительныеСчетаФактуры.Приоритет КАК Приоритет,
	|	ИсправительныеСчетаФактуры.Организация КАК Организация,
	|	ИсправительныеСчетаФактуры.СчетФактура КАК СчетФактура,
	|	ИсправительныеСчетаФактуры.ИсправительныйСчетФактура КАК ИсправительныйСчетФактура,
	|	ИсправительныеСчетаФактуры.Ссылка КАК Ссылка,
	|	ИсправительныеСчетаФактуры.ДатаИсправления КАК ДатаИсправления,
	|	ИсправительныеСчетаФактуры.ДатаЗаписиКнигиПокупок КАК ДатаЗаписиКнигиПокупок,
	|	ИсправительныеСчетаФактуры.МоментВремени КАК МоментВремени,
	|	ИсправительныеСчетаФактуры.ДатаПолучения,
	|	ИсправительныеСчетаФактуры.ЗаписьДополнительногоЛиста,
	|	ИсправительныеСчетаФактуры.КорректируемыйПериод
	|ПОМЕСТИТЬ ИсправительныеСчетаФактурыПредварительная
	|ИЗ
	|	ВсеИсправительныеСчетаФактуры КАК ИсправительныеСчетаФактуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВсеИсправительныеСчетаФактуры КАК ОтборПоследнееИсправление
	|		ПО ИсправительныеСчетаФактуры.Организация = ОтборПоследнееИсправление.Организация
	|			И ИсправительныеСчетаФактуры.СчетФактура = ОтборПоследнееИсправление.СчетФактура
	|			И ИсправительныеСчетаФактуры.НомерИсправления < ОтборПоследнееИсправление.НомерИсправления
	|
	|ГДЕ
	|	ОтборПоследнееИсправление.ИсправительныйСчетФактура ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсправительныеСчетаФактуры.Организация КАК Организация,
	|	ИсправительныеСчетаФактуры.СчетФактура КАК СчетФактура,
	|	ИсправительныеСчетаФактуры.ИсправительныйСчетФактура КАК ИсправительныйСчетФактура,
	|	ИсправительныеСчетаФактуры.Ссылка КАК Ссылка,
	|	ИсправительныеСчетаФактуры.ДатаИсправления КАК ДатаИсправления,
	|	ИсправительныеСчетаФактуры.ДатаЗаписиКнигиПокупок КАК ДатаЗаписиКнигиПокупок,
	|	ИсправительныеСчетаФактуры.МоментВремени КАК МоментВремени,
	|	ИсправительныеСчетаФактуры.ДатаПолучения,
	|	ИсправительныеСчетаФактуры.ЗаписьДополнительногоЛиста,
	|	ИсправительныеСчетаФактуры.КорректируемыйПериод
	|ПОМЕСТИТЬ ИсправительныеСчетаФактурыПоследние
	|ИЗ
	|	ИсправительныеСчетаФактурыПредварительная КАК ИсправительныеСчетаФактуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИсправительныеСчетаФактурыПредварительная КАК ОтборПриоритет
	|		ПО ИсправительныеСчетаФактуры.Организация = ОтборПриоритет.Организация
	|			И ИсправительныеСчетаФактуры.СчетФактура = ОтборПриоритет.СчетФактура
	|			И ИсправительныеСчетаФактуры.Приоритет > ОтборПриоритет.Приоритет
	|
	|ГДЕ
	|	ОтборПриоритет.Ссылка ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ИсправительныйСчетФактура
	|;
	|
	|ВЫБРАТЬ
	|	ИсправительныеСчетаФактуры.Организация КАК Организация,
	|	ИсправительныеСчетаФактуры.СчетФактура КАК СчетФактура,
	|	ИсправительныеСчетаФактуры.ИсправительныйСчетФактура КАК ИсправительныйСчетФактура,
	|	ИсправительныеСчетаФактуры.Ссылка КАК Ссылка,
	|	ИсправительныеСчетаФактуры.ДатаИсправления КАК ДатаИсправления,
	|	ИсправительныеСчетаФактуры.МоментВремени КАК МоментВремени,
	|	ИсправительныеСчетаФактуры.ДатаПолучения КАК ДатаПолучения,
	|	МАКСИМУМ(ВЫБОР 
	|		КОГДА НЕ ПартииНДСКРаспределению.Регистратор ЕСТЬ NULL 
	|			ТОГДА КОНЕЦПЕРИОДА(ИсправительныеСчетаФактуры.ДатаЗаписиКнигиПокупок, КВАРТАЛ)
	|		ИНАЧЕ ИсправительныеСчетаФактуры.ДатаЗаписиКнигиПокупок
	|	КОНЕЦ) КАК ДатаЗаписиКнигиПокупок,
	|	ИсправительныеСчетаФактуры.ЗаписьДополнительногоЛиста,
	|	ИсправительныеСчетаФактуры.КорректируемыйПериод
	|
	|ПОМЕСТИТЬ ИсправительныеСчетаФактуры
	|ИЗ
	|	ИсправительныеСчетаФактурыПоследние КАК ИсправительныеСчетаФактуры
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ПартииНДСКРаспределению КАК ПартииНДСКРаспределению
	|	ПО
	|		ПартииНДСКРаспределению.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ИсправительныеСчетаФактуры.ИсправительныйСчетФактура = ПартииНДСКРаспределению.Регистратор
	|		И ПартииНДСКРаспределению.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсправительныеСчетаФактуры.Организация,
	|	ИсправительныеСчетаФактуры.СчетФактура,
	|	ИсправительныеСчетаФактуры.ИсправительныйСчетФактура,
	|	ИсправительныеСчетаФактуры.Ссылка,
	|	ИсправительныеСчетаФактуры.ДатаИсправления,
	|	ИсправительныеСчетаФактуры.МоментВремени,
	|	ИсправительныеСчетаФактуры.ДатаПолучения,
	|	ИсправительныеСчетаФактуры.ЗаписьДополнительногоЛиста,
	|	ИсправительныеСчетаФактуры.КорректируемыйПериод
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ВЫБОР 
	|		КОГДА НЕ ПартииНДСКРаспределению.Регистратор ЕСТЬ NULL 
	|			ТОГДА КОНЕЦПЕРИОДА(ИсправительныеСчетаФактуры.ДатаЗаписиКнигиПокупок, КВАРТАЛ)
	|		ИНАЧЕ ИсправительныеСчетаФактуры.ДатаЗаписиКнигиПокупок
	|	КОНЕЦ) <= &КонецПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СчетФактура,
	|	ИсправительныйСчетФактура
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВсеИсправительныеСчетаФактуры
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИсправительныеСчетаФактурыПредварительная
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИсправительныеСчетаФактурыПоследние
	|";
	
	Запрос.УстановитьПараметр("НачалоПериода",     ПараметрыРасчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",      ПараметрыРасчета.КонецПериода);
	Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыРасчета.МассивОрганизаций);
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

// См. УчетНДСУПСлужебный.ПолучитьКорректировочныеСчетаФактурыДокументы
Процедура ПолучитьКорректировочныеСчетаФактурыДокументы(ПараметрыРасчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Задания.Организация КАК Организация,
	|	Задания.СчетФактура КАК СчетФактура
	|ПОМЕСТИТЬ КорректировочныеСчетаФактуры
	|ИЗ
	|	Задания КАК Задания
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.КорректировкаПриобретения КАК КорректировкаПоСогласованиюСторон
	|	ПО
	|		Задания.СчетФактура = КорректировкаПоСогласованиюСторон.Ссылка
	|		И Задания.Организация = КорректировкаПоСогласованиюСторон.Организация
	|		И КорректировкаПоСогласованиюСторон.ВидКорректировки = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.СчетФактураПолученныйНалоговыйАгент КАК КорректировочныйСчетФактура
	|	ПО
	|		Задания.СчетФактура = КорректировочныйСчетФактура.Ссылка
	|		И Задания.Организация = КорректировочныйСчетФактура.Организация
	|		И КорректировочныйСчетФактура.Корректировочный
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|	ПО
	|		Задания.СчетФактура = ВозвратТоваровПоставщику.Ссылка
	|		И Задания.Организация = ВозвратТоваровПоставщику.Организация
	|		И ВозвратТоваровПоставщику.Дата >= &ДатаОтраженияВозвратовКорректировочнымиСФ
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ВозвратТоваровМеждуОрганизациями КАК ВозвратТоваровМеждуОрганизациями
	|	ПО
	|		Задания.СчетФактура = ВозвратТоваровМеждуОрганизациями.Ссылка
	|		И Задания.Организация = ВозвратТоваровМеждуОрганизациями.Организация
	|		И ВозвратТоваровМеждуОрганизациями.Дата >= &ДатаОтраженияВозвратовКорректировочнымиСФ
	|ГДЕ
	|	НЕ КорректировкаПоСогласованиюСторон.Ссылка ЕСТЬ NULL
	|	ИЛИ НЕ КорректировочныйСчетФактура.Ссылка ЕСТЬ NULL
	|	ИЛИ НЕ ВозвратТоваровПоставщику.Ссылка ЕСТЬ NULL
	|	ИЛИ НЕ ВозвратТоваровМеждуОрганизациями.Ссылка ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СчетФактура
	|";
	
	Запрос.УстановитьПараметр("ДатаОтраженияВозвратовКорректировочнымиСФ", ДатаОтраженияВозвратовКорректировочнымиСФ());
	
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

// См. УчетНДСУПСлужебный.ПолучитьРазрезыВычетаНДС
Процедура ПолучитьРазрезыВычетаНДС(ПараметрыРасчета) Экспорт
	
	ПолучитьДокументыОплатыЭлектронныхУслуг(ПараметрыРасчета);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Оплаты.Организация КАК Организация,
	|	Оплаты.СчетФактура КАК СчетФактура,
	|	МАКСИМУМ(ДанныеПервичныхДокументов.ДатаРегистратора) КАК ДатаПолнойОплаты
	|ПОМЕСТИТЬ ПолностьюОплаченныеЭлектронныеУслуги
	|ИЗ
	|	ДокументыОплатыЭлектронныхУслуг КАК Оплаты
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|	ПО
	|		Оплаты.Организация = ДанныеПервичныхДокументов.Организация
	|		И Оплаты.ДокументОплаты = ДанныеПервичныхДокументов.Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	Оплаты.Организация,
	|	Оплаты.СчетФактура
	|
	|ИМЕЮЩИЕ
	|	СУММА(Оплаты.СуммаОплаты) >= МАКСИМУМ(Оплаты.СуммаПриобретения)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СчетФактура
	|;
	|
	|///////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БлокировкаВычетаНДС.Организация КАК Организация,
	|	БлокировкаВычетаНДС.СчетФактура КАК СчетФактура
	|ПОМЕСТИТЬ БлокировкаВычетаНДС
	|ИЗ
	|	РегистрСведений.СостоянияБлокировкиВычетаНДСПоСчетамФактурам.СрезПоследних(
	|		&КонецПериода,
	|		(Организация, СчетФактура) В
	|			(ВЫБРАТЬ
	|				Задания.Организация,
	|				Задания.СчетФактура
	|			ИЗ
	|				Задания КАК Задания)
	|			) КАК БлокировкаВычетаНДС
	|ГДЕ
	|	БлокировкаВычетаНДС.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБлокировкиВычетаНДС.Установлена)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РазрезыВычетаНДС.Организация КАК Организация,
	|	РазрезыВычетаНДС.СчетФактура КАК СчетФактура,
	|	РазрезыВычетаНДС.ВидДеятельностиНДС  КАК ВидДеятельностиНДС,
	|	РазрезыВычетаНДС.ВидЦенности КАК ВидЦенности,
	|	РазрезыВычетаНДС.РеализацияЭкспорт КАК РеализацияЭкспорт,
	|	
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НДССостояниеРеализации0.Состояние, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.ПодтвержденаРеализация0)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.ПодтвержденаСтавка0)
	|		КОГДА ЕСТЬNULL(НДССостояниеРеализации0.Состояние, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.НеПодтвержденаРеализация0)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.НеПодтвержденаСтавка0)
	|		КОГДА РазрезыВычетаНДС.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПроизводствоСДЦ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.НДСПоДЦПринятКВычету)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.НДСПринятКВычету)
	|	КОНЕЦ КАК Событие,
	|	
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИсправительныеСчетаФактуры.ДатаЗаписиКнигиПокупок, ЕСТЬNULL(СчетаФактурыДокументы.ДатаЗаписиКнигиПокупок, ДАТАВРЕМЯ(1,1,1))) < &НачалоПериода
	|				И ЕСТЬNULL(НДССостояниеРеализации0.ДатаПодтверждения, ДАТАВРЕМЯ(1,1,1)) < &НачалоПериода 
	|				И ЕСТЬNULL(ПодтверждениеОплатыНДСВБюджет.ДатаПодтвержденияОплаты, ДАТАВРЕМЯ(1,1,1)) < &НачалоПериода
	|				И ЕСТЬNULL(ДанныеПервичныхДокументовРеализацияЭкспорт.ДатаРегистратора, ДАТАВРЕМЯ(1,1,1)) < &НачалоПериода
	|				И ЕСТЬNULL(ПолностьюОплаченныеЭлектронныеУслуги.ДатаПолнойОплаты, ДАТАВРЕМЯ(1,1,1)) < &НачалоПериода
	|			ТОГДА &КонецПериода
	|			
	|		КОГДА ЕСТЬNULL(ИсправительныеСчетаФактуры.ДатаЗаписиКнигиПокупок, ЕСТЬNULL(СчетаФактурыДокументы.ДатаЗаписиКнигиПокупок, ДАТАВРЕМЯ(1,1,1)))
	|					>= ЕСТЬNULL(НДССостояниеРеализации0.ДатаПодтверждения, ДАТАВРЕМЯ(1,1,1))
	|				И ЕСТЬNULL(ИсправительныеСчетаФактуры.ДатаЗаписиКнигиПокупок, ЕСТЬNULL(СчетаФактурыДокументы.ДатаЗаписиКнигиПокупок, ДАТАВРЕМЯ(1,1,1)))
	|					>= ЕСТЬNULL(ПодтверждениеОплатыНДСВБюджет.ДатаПодтвержденияОплаты, ДАТАВРЕМЯ(1,1,1))
	|				И ЕСТЬNULL(ИсправительныеСчетаФактуры.ДатаЗаписиКнигиПокупок, ЕСТЬNULL(СчетаФактурыДокументы.ДатаЗаписиКнигиПокупок, ДАТАВРЕМЯ(1,1,1)))
	|					>= ЕСТЬNULL(ДанныеПервичныхДокументовРеализацияЭкспорт.ДатаРегистратора, ДАТАВРЕМЯ(1,1,1))
	|				И ЕСТЬNULL(ИсправительныеСчетаФактуры.ДатаЗаписиКнигиПокупок, ЕСТЬNULL(СчетаФактурыДокументы.ДатаЗаписиКнигиПокупок, ДАТАВРЕМЯ(1,1,1)))
	|					>= ЕСТЬNULL(ПолностьюОплаченныеЭлектронныеУслуги.ДатаПолнойОплаты, ДАТАВРЕМЯ(1,1,1))
	|			ТОГДА ЕСТЬNULL(ИсправительныеСчетаФактуры.ДатаЗаписиКнигиПокупок, ЕСТЬNULL(СчетаФактурыДокументы.ДатаЗаписиКнигиПокупок, ДАТАВРЕМЯ(1,1,1)))
	|			
	|		КОГДА ЕСТЬNULL(НДССостояниеРеализации0.ДатаПодтверждения, ДАТАВРЕМЯ(1,1,1))
	|					>= ЕСТЬNULL(ИсправительныеСчетаФактуры.ДатаЗаписиКнигиПокупок, ЕСТЬNULL(СчетаФактурыДокументы.ДатаЗаписиКнигиПокупок, ДАТАВРЕМЯ(1,1,1)))
	|				И ЕСТЬNULL(НДССостояниеРеализации0.ДатаПодтверждения, ДАТАВРЕМЯ(1,1,1))
	|					>= ЕСТЬNULL(ПодтверждениеОплатыНДСВБюджет.ДатаПодтвержденияОплаты, ДАТАВРЕМЯ(1,1,1))
	|				И ЕСТЬNULL(НДССостояниеРеализации0.ДатаПодтверждения, ДАТАВРЕМЯ(1,1,1))
	|					>= ЕСТЬNULL(ДанныеПервичныхДокументовРеализацияЭкспорт.ДатаРегистратора, ДАТАВРЕМЯ(1,1,1))
	|				И ЕСТЬNULL(НДССостояниеРеализации0.ДатаПодтверждения, ДАТАВРЕМЯ(1,1,1))
	|					>= ЕСТЬNULL(ПолностьюОплаченныеЭлектронныеУслуги.ДатаПолнойОплаты, ДАТАВРЕМЯ(1,1,1))
	|			ТОГДА ЕСТЬNULL(НДССостояниеРеализации0.ДатаПодтверждения, ДАТАВРЕМЯ(1,1,1))
	|		
	|		КОГДА ЕСТЬNULL(ПодтверждениеОплатыНДСВБюджет.ДатаПодтвержденияОплаты, ДАТАВРЕМЯ(1,1,1))
	|					>= ЕСТЬNULL(НДССостояниеРеализации0.ДатаПодтверждения, ДАТАВРЕМЯ(1,1,1))
	|				И ЕСТЬNULL(ПодтверждениеОплатыНДСВБюджет.ДатаПодтвержденияОплаты, ДАТАВРЕМЯ(1,1,1))
	|					>= ЕСТЬNULL(ИсправительныеСчетаФактуры.ДатаЗаписиКнигиПокупок, ЕСТЬNULL(СчетаФактурыДокументы.ДатаЗаписиКнигиПокупок, ДАТАВРЕМЯ(1,1,1)))
	|				И ЕСТЬNULL(ПодтверждениеОплатыНДСВБюджет.ДатаПодтвержденияОплаты, ДАТАВРЕМЯ(1,1,1))
	|					>= ЕСТЬNULL(ДанныеПервичныхДокументовРеализацияЭкспорт.ДатаРегистратора, ДАТАВРЕМЯ(1,1,1))
	|				И ЕСТЬNULL(ПодтверждениеОплатыНДСВБюджет.ДатаПодтвержденияОплаты, ДАТАВРЕМЯ(1,1,1))
	|					>= ЕСТЬNULL(ПолностьюОплаченныеЭлектронныеУслуги.ДатаПолнойОплаты, ДАТАВРЕМЯ(1,1,1))
	|			ТОГДА ЕСТЬNULL(ПодтверждениеОплатыНДСВБюджет.ДатаПодтвержденияОплаты, ДАТАВРЕМЯ(1,1,1))
	|		
	|		КОГДА ЕСТЬNULL(ДанныеПервичныхДокументовРеализацияЭкспорт.ДатаРегистратора, ДАТАВРЕМЯ(1,1,1))
	|					>= ЕСТЬNULL(НДССостояниеРеализации0.ДатаПодтверждения, ДАТАВРЕМЯ(1,1,1))
	|				И ЕСТЬNULL(ДанныеПервичныхДокументовРеализацияЭкспорт.ДатаРегистратора, ДАТАВРЕМЯ(1,1,1))
	|					>= ЕСТЬNULL(ПодтверждениеОплатыНДСВБюджет.ДатаПодтвержденияОплаты, ДАТАВРЕМЯ(1,1,1))
	|				И ЕСТЬNULL(ДанныеПервичныхДокументовРеализацияЭкспорт.ДатаРегистратора, ДАТАВРЕМЯ(1,1,1))
	|					>= ЕСТЬNULL(ИсправительныеСчетаФактуры.ДатаЗаписиКнигиПокупок, ЕСТЬNULL(СчетаФактурыДокументы.ДатаЗаписиКнигиПокупок, ДАТАВРЕМЯ(1,1,1)))
	|				И ЕСТЬNULL(ДанныеПервичныхДокументовРеализацияЭкспорт.ДатаРегистратора, ДАТАВРЕМЯ(1,1,1))
	|					>= ЕСТЬNULL(ПолностьюОплаченныеЭлектронныеУслуги.ДатаПолнойОплаты, ДАТАВРЕМЯ(1,1,1))
	|			ТОГДА ЕСТЬNULL(ДанныеПервичныхДокументовРеализацияЭкспорт.ДатаРегистратора, ДАТАВРЕМЯ(1,1,1))
	|		
	|		КОГДА ЕСТЬNULL(ПолностьюОплаченныеЭлектронныеУслуги.ДатаПолнойОплаты, ДАТАВРЕМЯ(1,1,1))
	|					>= ЕСТЬNULL(НДССостояниеРеализации0.ДатаПодтверждения, ДАТАВРЕМЯ(1,1,1))
	|				И ЕСТЬNULL(ПолностьюОплаченныеЭлектронныеУслуги.ДатаПолнойОплаты, ДАТАВРЕМЯ(1,1,1))
	|					>= ЕСТЬNULL(ПодтверждениеОплатыНДСВБюджет.ДатаПодтвержденияОплаты, ДАТАВРЕМЯ(1,1,1))
	|				И ЕСТЬNULL(ПолностьюОплаченныеЭлектронныеУслуги.ДатаПолнойОплаты, ДАТАВРЕМЯ(1,1,1))
	|					>= ЕСТЬNULL(ИсправительныеСчетаФактуры.ДатаЗаписиКнигиПокупок, ЕСТЬNULL(СчетаФактурыДокументы.ДатаЗаписиКнигиПокупок, ДАТАВРЕМЯ(1,1,1)))
	|				И ЕСТЬNULL(ПолностьюОплаченныеЭлектронныеУслуги.ДатаПолнойОплаты, ДАТАВРЕМЯ(1,1,1))
	|					>= ЕСТЬNULL(ДанныеПервичныхДокументовРеализацияЭкспорт.ДатаРегистратора, ДАТАВРЕМЯ(1,1,1))
	|			ТОГДА ЕСТЬNULL(ПолностьюОплаченныеЭлектронныеУслуги.ДатаПолнойОплаты, ДАТАВРЕМЯ(1,1,1))
	|		
	|		КОГДА НЕ ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора ЕСТЬ NULL
	|			ТОГДА ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|			
	|		ИНАЧЕ &КонецПериода
	|	КОНЕЦ КАК Период,
	|	
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(ИсправительныеСчетаФактуры.ДатаЗаписиКнигиПокупок, ЕСТЬNULL(СчетаФактурыДокументы.ДатаЗаписиКнигиПокупок, ДАТАВРЕМЯ(1,1,1)))
	|					>= ЕСТЬNULL(НДССостояниеРеализации0.ДатаПодтверждения, ДАТАВРЕМЯ(1,1,1))
	|				И ЕСТЬNULL(ИсправительныеСчетаФактуры.ДатаЗаписиКнигиПокупок, ЕСТЬNULL(СчетаФактурыДокументы.ДатаЗаписиКнигиПокупок, ДАТАВРЕМЯ(1,1,1)))
	|					>= ЕСТЬNULL(ПодтверждениеОплатыНДСВБюджет.ДатаПодтвержденияОплаты, ДАТАВРЕМЯ(1,1,1))
	|				И ЕСТЬNULL(ИсправительныеСчетаФактуры.ДатаЗаписиКнигиПокупок, ЕСТЬNULL(СчетаФактурыДокументы.ДатаЗаписиКнигиПокупок, ДАТАВРЕМЯ(1,1,1)))
	|					>= ЕСТЬNULL(ДанныеПервичныхДокументовРеализацияЭкспорт.ДатаРегистратора, ДАТАВРЕМЯ(1,1,1))
	|				И ЕСТЬNULL(ИсправительныеСчетаФактуры.ДатаЗаписиКнигиПокупок, ЕСТЬNULL(СчетаФактурыДокументы.ДатаЗаписиКнигиПокупок, ДАТАВРЕМЯ(1,1,1)))
	|					>= ЕСТЬNULL(ПолностьюОплаченныеЭлектронныеУслуги.ДатаПолнойОплаты, ДАТАВРЕМЯ(1,1,1))
	|				И НЕ ЕСТЬNULL(ИсправительныеСчетаФактуры.Ссылка, СчетаФактурыДокументы.Ссылка) ЕСТЬ NULL
	|			ТОГДА ЕСТЬNULL(ИсправительныеСчетаФактуры.Ссылка, СчетаФактурыДокументы.Ссылка)
	|		
	|		КОГДА ЕСТЬNULL(НДССостояниеРеализации0.ДатаПодтверждения, ДАТАВРЕМЯ(1,1,1))
	|					>= ЕСТЬNULL(ИсправительныеСчетаФактуры.ДатаЗаписиКнигиПокупок, ЕСТЬNULL(СчетаФактурыДокументы.ДатаЗаписиКнигиПокупок, ДАТАВРЕМЯ(1,1,1)))
	|				И ЕСТЬNULL(НДССостояниеРеализации0.ДатаПодтверждения, ДАТАВРЕМЯ(1,1,1))
	|					>= ЕСТЬNULL(ПодтверждениеОплатыНДСВБюджет.ДатаПодтвержденияОплаты, ДАТАВРЕМЯ(1,1,1))
	|				И ЕСТЬNULL(НДССостояниеРеализации0.ДатаПодтверждения, ДАТАВРЕМЯ(1,1,1))
	|					>= ЕСТЬNULL(ДанныеПервичныхДокументовРеализацияЭкспорт.ДатаРегистратора, ДАТАВРЕМЯ(1,1,1))
	|				И ЕСТЬNULL(НДССостояниеРеализации0.ДатаПодтверждения, ДАТАВРЕМЯ(1,1,1))
	|					>= ЕСТЬNULL(ПолностьюОплаченныеЭлектронныеУслуги.ДатаПолнойОплаты, ДАТАВРЕМЯ(1,1,1))
	|				И НЕ НДССостояниеРеализации0.ДокументРеализации ЕСТЬ NULL
	|				И ТИПЗНАЧЕНИЯ(НДССостояниеРеализации0.ДокументРеализации) В (&ТипыДокументовВычетаНДС)
	|			ТОГДА НДССостояниеРеализации0.ДокументРеализации
	|		
	|		КОГДА ЕСТЬNULL(ПодтверждениеОплатыНДСВБюджет.ДатаПодтвержденияОплаты, ДАТАВРЕМЯ(1,1,1))
	|					>= ЕСТЬNULL(НДССостояниеРеализации0.ДатаПодтверждения, ДАТАВРЕМЯ(1,1,1))
	|				И ЕСТЬNULL(ПодтверждениеОплатыНДСВБюджет.ДатаПодтвержденияОплаты, ДАТАВРЕМЯ(1,1,1))
	|					>= ЕСТЬNULL(ИсправительныеСчетаФактуры.ДатаЗаписиКнигиПокупок, ЕСТЬNULL(СчетаФактурыДокументы.ДатаЗаписиКнигиПокупок, ДАТАВРЕМЯ(1,1,1)))
	|				И ЕСТЬNULL(ПодтверждениеОплатыНДСВБюджет.ДатаПодтвержденияОплаты, ДАТАВРЕМЯ(1,1,1))
	|					>= ЕСТЬNULL(ДанныеПервичныхДокументовРеализацияЭкспорт.ДатаРегистратора, ДАТАВРЕМЯ(1,1,1))
	|				И ЕСТЬNULL(ПодтверждениеОплатыНДСВБюджет.ДатаПодтвержденияОплаты, ДАТАВРЕМЯ(1,1,1))
	|					>= ЕСТЬNULL(ПолностьюОплаченныеЭлектронныеУслуги.ДатаПолнойОплаты, ДАТАВРЕМЯ(1,1,1))
	|				И НЕ ПодтверждениеОплатыНДСВБюджет.СчетФактура ЕСТЬ NULL
	|				И ТИПЗНАЧЕНИЯ(ПодтверждениеОплатыНДСВБюджет.СчетФактура) В (&ТипыДокументовВычетаНДС)
	|			ТОГДА ПодтверждениеОплатыНДСВБюджет.СчетФактура
	|		
	|		КОГДА ЕСТЬNULL(ДанныеПервичныхДокументовРеализацияЭкспорт.ДатаРегистратора, ДАТАВРЕМЯ(1,1,1))
	|					>= ЕСТЬNULL(НДССостояниеРеализации0.ДатаПодтверждения, ДАТАВРЕМЯ(1,1,1))
	|				И ЕСТЬNULL(ДанныеПервичныхДокументовРеализацияЭкспорт.ДатаРегистратора, ДАТАВРЕМЯ(1,1,1))
	|					>= ЕСТЬNULL(ПодтверждениеОплатыНДСВБюджет.ДатаПодтвержденияОплаты, ДАТАВРЕМЯ(1,1,1))
	|				И ЕСТЬNULL(ДанныеПервичныхДокументовРеализацияЭкспорт.ДатаРегистратора, ДАТАВРЕМЯ(1,1,1))
	|					>= ЕСТЬNULL(ИсправительныеСчетаФактуры.ДатаЗаписиКнигиПокупок, ЕСТЬNULL(СчетаФактурыДокументы.ДатаЗаписиКнигиПокупок, ДАТАВРЕМЯ(1,1,1)))
	|				И ЕСТЬNULL(ДанныеПервичныхДокументовРеализацияЭкспорт.ДатаРегистратора, ДАТАВРЕМЯ(1,1,1))
	|					>= ЕСТЬNULL(ПолностьюОплаченныеЭлектронныеУслуги.ДатаПолнойОплаты, ДАТАВРЕМЯ(1,1,1))
	|				И НЕ ДанныеПервичныхДокументовРеализацияЭкспорт.Документ ЕСТЬ NULL
	|				И ТИПЗНАЧЕНИЯ(ДанныеПервичныхДокументовРеализацияЭкспорт.Документ) В (&ТипыДокументовВычетаНДС)
	|			ТОГДА ДанныеПервичныхДокументовРеализацияЭкспорт.Документ
	|		
	|		КОГДА ЕСТЬNULL(ПолностьюОплаченныеЭлектронныеУслуги.ДатаПолнойОплаты, ДАТАВРЕМЯ(1,1,1))
	|					>= ЕСТЬNULL(НДССостояниеРеализации0.ДатаПодтверждения, ДАТАВРЕМЯ(1,1,1))
	|				И ЕСТЬNULL(ПолностьюОплаченныеЭлектронныеУслуги.ДатаПолнойОплаты, ДАТАВРЕМЯ(1,1,1))
	|					>= ЕСТЬNULL(ПодтверждениеОплатыНДСВБюджет.ДатаПодтвержденияОплаты, ДАТАВРЕМЯ(1,1,1))
	|				И ЕСТЬNULL(ПолностьюОплаченныеЭлектронныеУслуги.ДатаПолнойОплаты, ДАТАВРЕМЯ(1,1,1))
	|					>= ЕСТЬNULL(ИсправительныеСчетаФактуры.ДатаЗаписиКнигиПокупок, ЕСТЬNULL(СчетаФактурыДокументы.ДатаЗаписиКнигиПокупок, ДАТАВРЕМЯ(1,1,1)))
	|				И ЕСТЬNULL(ПолностьюОплаченныеЭлектронныеУслуги.ДатаПолнойОплаты, ДАТАВРЕМЯ(1,1,1))
	|					>= ЕСТЬNULL(ДанныеПервичныхДокументовРеализацияЭкспорт.ДатаРегистратора, ДАТАВРЕМЯ(1,1,1))
	|				И НЕ ПолностьюОплаченныеЭлектронныеУслуги.СчетФактура ЕСТЬ NULL
	|				И ТИПЗНАЧЕНИЯ(ПолностьюОплаченныеЭлектронныеУслуги.СчетФактура) В (&ТипыДокументовВычетаНДС)
	|			ТОГДА ПолностьюОплаченныеЭлектронныеУслуги.СчетФактура
	|		
	|		КОГДА НЕ ЕСТЬNULL(ИсправительныеСчетаФактуры.Ссылка, СчетаФактурыДокументы.Ссылка) ЕСТЬ NULL
	|			ТОГДА ЕСТЬNULL(ИсправительныеСчетаФактуры.Ссылка, СчетаФактурыДокументы.Ссылка)
	|		
	|		ИНАЧЕ РазрезыВычетаНДС.СчетФактура
	|	КОНЕЦ КАК Регистратор
	|
	|ПОМЕСТИТЬ РазрезыВычетаНДС
	|ИЗ
	|	ВозможныеРазрезыВычетаНДС КАК РазрезыВычетаНДС
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактурыДокументы КАК СчетаФактурыДокументы
	|	ПО
	|		РазрезыВычетаНДС.Организация = СчетаФактурыДокументы.Организация
	|		И РазрезыВычетаНДС.СчетФактура = СчетаФактурыДокументы.СчетФактура
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ИсправительныеСчетаФактуры КАК ИсправительныеСчетаФактуры
	|	ПО
	|		РазрезыВычетаНДС.Организация = ИсправительныеСчетаФактуры.Организация
	|		И РазрезыВычетаНДС.СчетФактура = ИсправительныеСчетаФактуры.СчетФактура
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ПодтверждениеОплатыНДСВБюджет КАК ПодтверждениеОплатыНДСВБюджет
	|	ПО
	|		РазрезыВычетаНДС.СчетФактура = ПодтверждениеОплатыНДСВБюджет.СчетФактура
	|		И ПодтверждениеОплатыНДСВБюджет.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение)
	|		И ПодтверждениеОплатыНДСВБюджет.ДатаПодтвержденияОплаты <= &КонецПериода
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПолностьюОплаченныеЭлектронныеУслуги КАК ПолностьюОплаченныеЭлектронныеУслуги
	|	ПО
	|		РазрезыВычетаНДС.Организация = ПолностьюОплаченныеЭлектронныеУслуги.Организация
	|		И РазрезыВычетаНДС.СчетФактура = ПолностьюОплаченныеЭлектронныеУслуги.СчетФактура
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.НДССостояниеРеализации0 КАК НДССостояниеРеализации0
	|	ПО
	|		РазрезыВычетаНДС.Организация = НДССостояниеРеализации0.Организация
	|		И РазрезыВычетаНДС.РеализацияЭкспорт = НДССостояниеРеализации0.ДокументРеализации
	|		И НДССостояниеРеализации0.Состояние В (
	|				ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.ПодтвержденаРеализация0),
	|				ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.НеПодтвержденаРеализация0))
	|		И НДССостояниеРеализации0.ДатаПодтверждения <= &КонецПериода
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументовСчетФактура
	|	ПО
	|		РазрезыВычетаНДС.Организация = ДанныеПервичныхДокументовСчетФактура.Организация
	|		И РазрезыВычетаНДС.СчетФактура = ДанныеПервичныхДокументовСчетФактура.Документ
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументовРеализацияЭкспорт
	|	ПО
	|		РазрезыВычетаНДС.Организация = ДанныеПервичныхДокументовРеализацияЭкспорт.Организация
	|		И РазрезыВычетаНДС.РеализацияЭкспорт = ДанныеПервичныхДокументовРеализацияЭкспорт.Документ
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		БлокировкаВычетаНДС КАК БлокировкаВычетаНДС
	|	ПО
	|		БлокировкаВычетаНДС.Организация = РазрезыВычетаНДС.Организация
	|		И БлокировкаВычетаНДС.СчетФактура = РазрезыВычетаНДС.СчетФактура
	|ГДЕ
	|	ВЫБОР
	|		КОГДА РазрезыВычетаНДС.ВидЦенности В (
	|								ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныеПлатежи),
	|								ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныеПлатежиОС),
	|								ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныйСоюз),
	|								ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентАренда),
	|								ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентИностранцы),
	|								ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент),
	|								ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентРеализацияИмущества),
	|								ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентЭлектронныеУслуги))
	|			ТОГДА НЕ ПодтверждениеОплатыНДСВБюджет.СчетФактура ЕСТЬ NULL
	|				И (ТИПЗНАЧЕНИЯ(РазрезыВычетаНДС.СчетФактура) В (&ТипыДокументовВычетаНДС)
	|					ИЛИ НЕ СчетаФактурыДокументы.СчетФактура ЕСТЬ NULL)
	|		КОГДА РазрезыВычетаНДС.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ЭлектронныеУслуги)
	|			ТОГДА НЕ ПолностьюОплаченныеЭлектронныеУслуги.СчетФактура ЕСТЬ NULL
	|		ИНАЧЕ НЕ СчетаФактурыДокументы.СчетФактура ЕСТЬ NULL ИЛИ НЕ ИсправительныеСчетаФактуры.СчетФактура ЕСТЬ NULL
	|	КОНЕЦ
	|	И ВЫБОР
	|		КОГДА РазрезыВычетаНДС.ВидДеятельностиНДС В (
	|								ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг),
	|								ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт))
	|			ТОГДА НЕ НДССостояниеРеализации0.Состояние ЕСТЬ NULL
	|		КОГДА РазрезыВычетаНДС.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров) ТОГДА
	|			ВЫБОР 
	|				КОГДА ЕСТЬNULL(ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора, ДАТАВРЕМЯ(1,1,1)) < &ДатаНачалаДействия150ФЗ
	|					ТОГДА НЕ НДССостояниеРеализации0.Состояние ЕСТЬ NULL
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|		КОГДА РазрезыВычетаНДС.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПроизводствоСДЦ)
	|			ТОГДА РазрезыВычетаНДС.РеализацияЭкспорт <> НЕОПРЕДЕЛЕНО
	|		КОГДА РазрезыВычетаНДС.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|	И БлокировкаВычетаНДС.СчетФактура ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СчетФактура
	|";
	
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаНачалаДействия150ФЗ", УчетНДСУП.НастройкиУчета().ДатаРазделенияЭкспорта);
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыРасчета.КонецПериода);
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыРасчета.НачалоПериода);
	Запрос.УстановитьПараметр("ТипыДокументовВычетаНДС",
		Метаданные.РегистрыНакопления.НДСПредъявленный.СтандартныеРеквизиты.Регистратор.Тип.Типы());
	Запрос.Выполнить();
	
КонецПроцедуры
#КонецОбласти


#КонецОбласти

#Область ОписаниеЭтаповЗакрытияМесяца

#Область ФормированиеДвиженийПоНДС

// Описание проверок этапа закрытия месяца.
//
// Параметры:
//	ТаблицаПроверок - ТаблицаЗначений - см. АудитСостоянияСистемыПереопределяемый.ЗаполнитьПроверкиДляРегистрации().
//
Процедура ОписаниеПроверок_ФормированиеДвиженийПоНДС(ТаблицаПроверок) Экспорт
	
	// Дополнительное предупреждение, если суммы документа скорректированы вручную и на момент закрытия месяца отличаются от сумм торгового документа.
	
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"ПроверкаРасхожденияСумм",
		Перечисления.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоНДС,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"УчетНДСРФ.ПроверкаРасхожденияСумм");
	
	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Есть расхождения сумм торговых документов и счетов-фактур'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецПроцедуры

// Регистрирует проблему выполнения проверки, если суммы документа Счет-фактура полученный скорректированы вручную
// и на момент закрытия месяца отличаются от сумм торгового документа.
//
Процедура ПроверкаРасхожденияСумм(ПараметрыПроверки) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", НСтр("ru='Организация'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СчетФактура", НСтр("ru = 'Счет-фактура полученный'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ПараметрыЗапросПолученияРасхождений = Новый Структура("НачалоПериода,КонецПериода,МассивОрганизаций");
	ЗаполнитьЗначенияСвойств(ПараметрыЗапросПолученияРасхождений, ПараметрыПроверки.ДополнительныеПараметры);
	ПараметрыЗапросПолученияРасхождений.Вставить("ВсеОрганизации", Ложь); // Массив организаций всегда не пустой
	ПараметрыЗапросПолученияРасхождений.Вставить("РучнаяКорректировка", Истина); // Здесь проверяем только счета-фактуры с ручными корректировками сумм
	
	МенеджерВременныхТаблиц = ПараметрыПроверки.ДополнительныеПараметры.МенеджерВременныхТаблиц;
	
	ОбработаноДокументов = ПоместитьРасхожденияТорговыхДокументовИСчетовФактурПолученных(
		МенеджерВременныхТаблиц,
		"вт_СчетаФактурыРасхождениеСумм",
		ПараметрыЗапросПолученияРасхождений);
	
	Если ЗначениеЗаполнено(ПараметрыПроверки.ДополнительныеПараметры) Тогда
		ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(
			ПараметрыПроверки.ДополнительныеПараметры,
			ОбработаноДокументов);
	КонецЕсли;
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"вт_СчетаФактурыРасхождениеСумм",
		НСтр("ru = 'По организации %1 обнаружено расхождение сумм счета-фактуры и торгового документа-основания.
		|Убедитесь в корректности сумм счета-фактуры полученного'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СписокПолей,
		"СчетФактура");
	
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации,,,
		Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.ПолезныйСовет);
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеСводныхСправок

// Добавляет этап закрытия месяца Формирование сводных справок НДС.
// 
// Параметры:
//  ТаблицаЭтапов - ТаблицаЗначений - таблица этапов, в которую требуется добавить новый этап
//  ТекущийРодитель - Строка - группа. в которую нужно добавить новый этап
//
Процедура ДобавитьЭтап_ФормированиеСводныхСправокНДС(ТаблицаЭтапов, ТекущийРодитель) Экспорт
	
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ФормированиеСводныхСправокНДС,
		Ложь, Истина, Ложь,
		Перечисления.ОперацииЗакрытияМесяца.РаспределениеДоходовПоНаправлениямДеятельности);
	НоваяСтрока.ТекстВыполнить = НСтр("ru='Сформировать'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"УчетНДСРФ.Использование_ФормированиеСводныхСправокНДС");
	НоваяСтрока.ДействиеВыполнить = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"УчетНДСРФ.Выполнить_ФормированиеСводныхСправокНДС");
	НоваяСтрока.ДействиеПодробнее = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ЖурналДокументовНДС.Формы.СписокДокументов.ПолноеИмя());
	
КонецПроцедуры

// Проверка необходимости использования этапа закрытия месяца.
//
// Параметры:
//  ПараметрыОбработчика - Структура - параметры обработчика события этапа.
//
Процедура Использование_ФормированиеСводныхСправокНДС(ПараметрыОбработчика) Экспорт
	
	Если ЗакрытиеМесяцаСервер.СостояниеЭтапаОпределено(ПараметрыОбработчика.ДанныеЭтапа)
	 И ЗакрытиеМесяцаСервер.ТребуетсяПересчетЭтапа(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетныеПолитики.Организация КАК Ссылка,
	|	УчетныеПолитики.УчетнаяПолитика.ПериодичностьОформленияСводныхСправок КАК ПериодичностьОформления
	|ПОМЕСТИТЬ ОрганизацииОСНО
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(
	|		&НачалоПериода,
	|		Организация В (&МассивОрганизаций)
	|		И Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)) КАК УчетныеПолитики
	|ГДЕ
	|	УчетныеПолитики.УчетнаяПолитика.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Общая)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОрганизацииОСНО.Ссылка КАК Организация
	|ПОМЕСТИТЬ НеСформированыСводныеСправки
	|ИЗ
	|	ОрганизацииОСНО КАК ОрганизацииОСНО
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.СводнаяСправкаНДС КАК СводнаяСправкаНДС
	|	ПО
	|		ОрганизацииОСНО.ПериодичностьОформления = СводнаяСправкаНДС.ПериодичностьОформления
	|		И ОрганизацииОСНО.Ссылка = СводнаяСправкаНДС.Организация
	|		И СводнаяСправкаНДС.Проведен
	|		И СводнаяСправкаНДС.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|ГДЕ
	|	КОНЕЦПЕРИОДА(&НачалоПериода, КВАРТАЛ) = КОНЕЦПЕРИОДА(&НачалоПериода, МЕСЯЦ)
	|	И ОрганизацииОСНО.ПериодичностьОформления = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|	И СводнаяСправкаНДС.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОрганизацииОСНО.Ссылка КАК Организация
	|ИЗ
	|	ОрганизацииОСНО КАК ОрганизацииОСНО
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.СводнаяСправкаНДС КАК СводнаяСправкаНДС
	|	ПО
	|		ОрганизацииОСНО.ПериодичностьОформления = СводнаяСправкаНДС.ПериодичностьОформления
	|		И ОрганизацииОСНО.Ссылка = СводнаяСправкаНДС.Организация
	|		И СводнаяСправкаНДС.Проведен
	|		И СводнаяСправкаНДС.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|ГДЕ
	|	ОрганизацииОСНО.ПериодичностьОформления = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|	И СводнаяСправкаНДС.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СводнаяСправкаНДС.Ссылка КАК СводнаяСправка,
	|	СводнаяСправкаНДС.Организация КАК Организация
	|ПОМЕСТИТЬ вт_РучныеКорректировкиСводныхСправок
	|ИЗ
	|	Документ.СводнаяСправкаНДС КАК СводнаяСправкаНДС
	|ГДЕ
	|	СводнаяСправкаНДС.Проведен
	|	И СводнаяСправкаНДС.РучнаяКорректировка
	|	И СводнаяСправкаНДС.Организация В (&МассивОрганизаций)
	|	И СводнаяСправкаНДС.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|";
	Запрос.Выполнить();
	РазмерыВременныхТаблиц = ЗакрытиеМесяцаСервер.РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если ПараметрыОбработчика.ПараметрыРасчета.НачалоПериода < Константы.ДатаНачалаПримененияСводныхСправок.Получить()
		ИЛИ РазмерыВременныхТаблиц.ОрганизацииОСНО = 0 Тогда
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Сводные справки не применяются'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ИначеЕсли ЗакрытиеМесяцаСервер.ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Ложь, "ОрганизацииОСНО")
		ИЛИ РазмерыВременныхТаблиц.НеСформированыСводныеСправки > 0 Тогда
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			НСтр("ru = 'Необходимо сформировать сводные справки'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Иначе
		ПараметрыОбработчика.ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	КонецЕсли;
	
КонецПроцедуры

// Выполнение этапа закрытия месяца.
//
// Параметры:
//  ПараметрыОбработчика - Структура - параметры обработчика события этапа.
//
Процедура Выполнить_ФормированиеСводныхСправокНДС(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	НачалоПериода = ЗакрытиеМесяцаСервер.НачалоРасчета(ПараметрыОбработчика.ДанныеЭтапа.Код, ПараметрыРасчета.КонецПериода,,
		ПараметрыРасчета.МассивОрганизаций);
		
	Если НачалоПериода > ПараметрыРасчета.КонецПериода Тогда
		Попытка
			Документы.СводнаяСправкаНДС.СформироватьСводныеСправкиНДС(ПараметрыРасчета.МассивОрганизаций, ПараметрыРасчета.КонецПериода);
		Исключение
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр(
					"ru='Формирование сводных справок НДС за период %1 завершилось с ошибкой:
					|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.КонецПериода),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(ПараметрыОбработчика, ТекстОшибки,
				ПараметрыРасчета.МассивОрганизаций, ПараметрыРасчета.КонецПериода);
		КонецПопытки;
		Возврат;
	КонецЕсли;
	
	Пока НачалоПериода <= ПараметрыРасчета.КонецПериода Цикл
		ОкончаниеПериода = КонецМесяца(НачалоПериода);
		НомерЗаданияДоРасчета = ЗакрытиеМесяцаСервер.УвеличитьНомерЗадания();
		
		// Этап 1. Подготовка работы с заданиями.
		
		НачатьТранзакцию();
		
		Попытка
			ЗакрытиеМесяцаСервер.ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета, ПараметрыРасчета.МассивОрганизаций,
				ПараметрыОбработчика.ДанныеЭтапа.Код);
			ДанныеКРасчетуЗаМесяц = ЗакрытиеМесяцаСервер.ЗаданияКРасчетуЗаМесяц(НачалоПериода, ОкончаниеПериода, НомерЗаданияДоРасчета,
				ПараметрыРасчета.МассивОрганизаций, ПараметрыОбработчика.ДанныеЭтапа.Код);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр(
					"ru='При выполнении расчета за период %1 произошла ошибка:
					|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(НачалоПериода),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(ПараметрыОбработчика, ТекстОшибки,
				ПараметрыРасчета.МассивОрганизаций, НачалоПериода);
		КонецПопытки;
		
		// Этап 2. Собственно расчет по организациям и периоду.
		Попытка
			Документы.СводнаяСправкаНДС.СформироватьСводныеСправкиНДС(ДанныеКРасчетуЗаМесяц.Организация, НачалоПериода);
		Исключение
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр(
					"ru='Формирование сводных справок НДС за период %1 завершилось с ошибкой:
					|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(НачалоПериода),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(ПараметрыОбработчика, ТекстОшибки,
				ДанныеКРасчетуЗаМесяц.Организация, НачалоПериода);
		КонецПопытки;
		
		// Этап 3. Завершение работы с заданиями.
		
		НачатьТранзакцию();
		
		Попытка
			ЗакрытиеМесяцаСервер.ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета, ПараметрыРасчета.МассивОрганизаций,
				ПараметрыОбработчика.ДанныеЭтапа.Код);
			ЗакрытиеМесяцаСервер.ЗафиксироватьРасчет(Неопределено, НомерЗаданияДоРасчета, ПараметрыОбработчика.ДанныеЭтапа.Код,
				ДанныеКРасчетуЗаМесяц);
			
			РегистрыСведений.ЗаданияКЗакрытиюМесяца.СформироватьЗаданияНаСледующийПериод(
				ДанныеКРасчетуЗаМесяц.ВременныеТаблицы, ОкончаниеПериода + 1);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='При выполнении расчета за период %1 произошла ошибка:
					|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(НачалоПериода),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(ПараметрыОбработчика, ТекстОшибки,
				ПараметрыРасчета.МассивОрганизаций, НачалоПериода);
		КонецПопытки;
		
		НачалоПериода = ОкончаниеПериода + 1;
	КонецЦикла;
	
КонецПроцедуры

// Описание проверок этапа закрытия месяца.
//
// Параметры:
//	ТаблицаПроверок - ТаблицаЗначений - см. АудитСостоянияСистемыПереопределяемый.ЗаполнитьПроверкиДляРегистрации().
//
Процедура ОписаниеПроверок_ФормированиеСводныхСправокНДС(ТаблицаПроверок) Экспорт
	// Дополнительное предупреждение, если суммы сводных справок скорректированы вручную.
	
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"ПроверкаРучныеКорректировкиСводныхСправок",
		Перечисления.ОперацииЗакрытияМесяца.ФормированиеСводныхСправокНДС,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"УчетНДСРФ.ПроверкаРучныеКорректировкиСводныхСправок");
	
	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru='Есть расхождения сумм торговых документов и счетов-фактур'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецПроцедуры

// Проверяет, были ли ручные корректировки сводных справок.
//
// Параметры:
//	ПараметрыПроверки - Структура - параметр процедуры-обработчика проверки, см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки()
//
Процедура ПроверкаРучныеКорректировкиСводныхСправок(ПараметрыПроверки) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация",    НСтр("ru='Организация'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СводнаяСправка", НСтр("ru = 'Сводная справка НДС'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"вт_РучныеКорректировкиСводныхСправок",
		НСтр("ru = 'По организации %1 оформлены сводные справки НДС, в которых вручную отредактированы суммы.'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СписокПолей,
		"СводнаяСправка");
	
	КоличествоДанных = РасчетСебестоимостиПрикладныеАлгоритмы.РазмерВременнойТаблицы(
		ПараметрыПроверки.ДополнительныеПараметры.МенеджерВременныхТаблиц,
		"вт_РучныеКорректировкиСводныхСправок");
	Если ЗначениеЗаполнено(ПараметрыПроверки.ДополнительныеПараметры) Тогда
		ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(
			ПараметрыПроверки.ДополнительныеПараметры,
			КоличествоДанных);
	КонецЕсли;
	
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации,,,
		Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.ПолезныйСовет);
	
КонецПроцедуры

#КонецОбласти

Функция ПроверитьКорректностьПримененияПравила5Процентов(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	НеобходимаПроверка = (Месяц(ПараметрыРасчета.ПериодРегистрации) % 3 = 0);
	БылиОшибки = Ложь;
	
	Если НЕ НеобходимаПроверка Тогда
		Возврат НЕ БылиОшибки;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.Организация КАК Организация,
	|	МАКСИМУМ(Т.ПрименитьПравило5Процентов) КАК ПрименитьПравило5Процентов
	|ПОМЕСТИТЬ ОрганизацииСДокументамиРаспределения
	|ИЗ
	|	Документ.РаспределениеНДС КАК Т
	|ГДЕ
	|	Т.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Т.Организация В(&МассивОрганизаций)
	|	И Т.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Организация КАК Организация,
	|	Организации.ПрименитьПравило5Процентов КАК ПрименитьПравило5Процентов
	|ИЗ
	|	ОрганизацииСДокументамиРаспределения КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(
	|				&НачалоПериода,
	|				Организация В
	|					(ВЫБРАТЬ
	|						Т.Организация
	|					ИЗ
	|						ОрганизацииСДокументамиРаспределения КАК Т)) КАК Политики
	|		ПО Организации.Организация = Политики.Организация
	|ГДЕ
	|	ЕСТЬNULL(Политики.УчетнаяПолитика.Учитывать5ПроцентныйПорог, ЛОЖЬ)";
	
	ТаблицаОрганизаций = Запрос.Выполнить().Выгрузить();
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, ТаблицаОрганизаций.Количество());
	
	Если ТаблицаОрганизаций.Количество() = 0 Тогда
		Возврат НЕ БылиОшибки;
	КонецЕсли;
	
	Оценка = Документы.РаспределениеНДС.ОценкаПримененияПравила5Процентов(
		ТаблицаОрганизаций.ВыгрузитьКолонку("Организация"),
		ПараметрыРасчета.ПериодРегистрации);
		
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, Оценка.Количество());
	
	Для Каждого СтрокаОрганизации Из ТаблицаОрганизаций Цикл
		
		СтрокаОценки = Оценка.Найти(СтрокаОрганизации.Организация, "Организация");
		
		Если СтрокаОценки = Неопределено Тогда
			
			Продолжить;
		
		ИначеЕсли НЕ СтрокаОрганизации.ПрименитьПравило5Процентов И СтрокаОценки.Доля <= 5 Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У организации ""%1"" расходы по реализации не облагаемой НДС не превышают 5% от общих расходов. НДС может быть принят к вычету в полном объеме.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				СтрокаОрганизации.Организация);
			
			ЗакрытиеМесяцаСервер.ДобавитьПоясняющуюИнформациюКЭтапу(
				ПараметрыОбработчика,
				ТекстСообщения,
				,
				,
				Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.ПолезныйСовет);
			
		ИначеЕсли СтрокаОрганизации.ПрименитьПравило5Процентов И СтрокаОценки.Доля > 5 Тогда
			
			БылиОшибки = Истина;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У организации ""%1"" расходы по реализации не облагаемой НДС превышают 5% от общих расходов. Необходимо выполнить распределение НДС между видами деятельности.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				СтрокаОрганизации.Организация);
			
			ЗакрытиеМесяцаСервер.УстановитьСостояниеВыполненСОшибками(
				ПараметрыОбработчика,
				ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;		
	
	Возврат НЕ БылиОшибки;
	
КонецФункции

#КонецОбласти

// Формирует задания на отражение в книге покупок вычета НДС по приобретенным электронным услугам.
//
// Параметры:
// 	ТаблицаИзменений - таблица значений с колонками
//		* Документ - документ, по которому изменилось состояние взаиморасчетов
//		* Период - период изменения
//
Процедура СформироватьЗаданияПоПриобретениюЭлектронныхУслуг(ТаблицаИзменений) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаИзменений", ТаблицаИзменений);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаИзменений.Период КАК Период,
	|	ТаблицаИзменений.Документ КАК РасчетныйДокумент
	|ПОМЕСТИТЬ ВтРасчеты
	|ИЗ
	|	&ТаблицаИзменений КАК ТаблицаИзменений
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСПредъявленный.СчетФактура КАК СчетФактура,
	|	НДСПредъявленный.Организация КАК Организация,
	|	Расчеты.Период               КАК Месяц
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВтРасчеты КАК Расчеты
	|	ПО
	|		Расчеты.РасчетныйДокумент = НДСПредъявленный.СчетФактура
	|
	|ГДЕ
	|	НДСПредъявленный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И НДСПредъявленный.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ЭлектронныеУслуги)
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	РегистрыСведений.ЗаданияКФормированиюДвиженийПоНДС.СоздатьЗаписиРегистраПоДаннымВыборки(Выборка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФукции

#Область РасчетЗачетаАвансовДляНДС

Процедура СформироватьДанныеПоЗачетамАвансов(ПараметрыРасчета)
	
	ПолучитьДанныеАвансов(ПараметрыРасчета);
	РассчитатьЗачетАвансовПолученных(ПараметрыРасчета);
	РассчитатьЗачетАвансовВыданных(ПараметрыРасчета);
	
КонецПроцедуры

Процедура ПолучитьДанныеАвансов(ПараметрыРасчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Задания.Организация КАК Организация,
	|	Задания.СчетФактура КАК СчетФактура,
	|	СчетФактураВыданныйАванс.ПравилоОтбораАванса КАК ПравилоОтбораАванса,
	|	СчетФактураВыданныйАванс.ДокументОснование КАК ДокументОснование,
	|	СчетФактураВыданныйАванс.Контрагент КАК Контрагент,
	|	СчетФактураВыданныйАванс.КодВидаОперации КАК КодВидаОперации,
	|	СчетФактураВыданныйАванс.НомерПлатежноРасчетногоДокумента КАК НомерПлатежноРасчетногоДокумента,
	|	СчетФактураВыданныйАванс.ДатаПлатежноРасчетногоДокумента КАК ДатаПлатежноРасчетногоДокумента,
	|	ДанныеПервичныхДокументов.ДатаРегистратора КАК ДатаОтражения,
	|	СчетФактураВыданныйАванс.Дата КАК Дата,
	|	ЕСТЬNULL(ПодарочныеСертификаты.ПодарочныйСертификат.Владелец.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК ВалютаСертификата
	|ПОМЕСТИТЬ втСчетаФактурыВыданныеАванс
	|ИЗ
	|	Документ.СчетФактураВыданныйАванс КАК СчетФактураВыданныйАванс
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задания КАК Задания
	|		ПО СчетФактураВыданныйАванс.Организация = Задания.Организация
	|			И СчетФактураВыданныйАванс.Ссылка = Задания.СчетФактура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО (ДанныеПервичныхДокументов.Документ = СчетФактураВыданныйАванс.ДокументОснование)
	|			И (ДанныеПервичныхДокументов.Организация = СчетФактураВыданныйАванс.Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПодарочныеСертификаты КАК ПодарочныеСертификаты
	|		ПО СчетФактураВыданныйАванс.ДокументОснование = ПодарочныеСертификаты.Регистратор
	|			И (ПодарочныеСертификаты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
	|ГДЕ
	|	СчетФактураВыданныйАванс.Проведен
	|	И НЕ СчетФактураВыданныйАванс.Исправление
	|	И НЕ СчетФактураВыданныйАванс.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Задания.Организация КАК Организация,
	|	Задания.СчетФактура КАК СчетФактура,
	|	СчетФактураПолученныйАванс.ДокументОснование КАК ДокументОснование,
	|	СчетФактураПолученныйАванс.КодВидаОперации КАК КодВидаОперации,
	|	СчетФактураПолученныйАванс.Контрагент КАК Контрагент,
	|	ДанныеПервичныхДокументов.ДатаРегистратора КАК ДатаОснования,
	|	СчетФактураПолученныйАванс.Дата КАК ДатаПолучения
	|ПОМЕСТИТЬ втСчетаФактурыПолученныеАванс
	|ИЗ
	|	Документ.СчетФактураПолученныйАванс КАК СчетФактураПолученныйАванс
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задания КАК Задания
	|		ПО СчетФактураПолученныйАванс.Организация = Задания.Организация
	|			И СчетФактураПолученныйАванс.Ссылка = Задания.СчетФактура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО (ДанныеПервичныхДокументов.Документ = СчетФактураПолученныйАванс.ДокументОснование)
	|			И (ДанныеПервичныхДокументов.Организация = СчетФактураПолученныйАванс.Организация)
	|ГДЕ
	|	СчетФактураПолученныйАванс.Проведен
	|	И НЕ СчетФактураПолученныйАванс.Исправление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ДатаОтражения КАК ДатаОтражения,
	|	МАКСИМУМ(КурсыВалют.Период) КАК Период
	|ПОМЕСТИТЬ ПериодыКурсовВалют
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(втСчетаФактурыВыданныеАванс.ДатаОтражения, ДЕНЬ) КАК ДатаОтражения
	|	ИЗ
	|		втСчетаФактурыВыданныеАванс КАК втСчетаФактурыВыданныеАванс
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(втСчетаФактурыПолученныеАванс.ДатаОснования, ДЕНЬ)
	|	ИЗ
	|		втСчетаФактурыПолученныеАванс КАК втСчетаФактурыПолученныеАванс) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО ВложенныйЗапрос.ДатаОтражения >= КурсыВалют.Период
	|ГДЕ
	|	КурсыВалют.Валюта = &ВалютаУпрУчета
	|	И &ВалютаРеглУчета <> &ВалютаУпрУчета
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ДатаОтражения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаОтражения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ДатаОтражения КАК ДатаОтражения,
	|	МАКСИМУМ(КурсыВалют.Период) КАК Период,
	|	ВложенныйЗапрос.Валюта КАК Валюта
	|ПОМЕСТИТЬ ПериодыКурсовСертификатов
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(втСчетаФактурыВыданныеАванс.ДатаОтражения, ДЕНЬ) КАК ДатаОтражения,
	|		втСчетаФактурыВыданныеАванс.ВалютаСертификата КАК Валюта
	|	ИЗ
	|		втСчетаФактурыВыданныеАванс КАК втСчетаФактурыВыданныеАванс) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО ВложенныйЗапрос.ДатаОтражения >= КурсыВалют.Период
	|			И ВложенныйЗапрос.Валюта = КурсыВалют.Валюта
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ДатаОтражения,
	|	ВложенныйЗапрос.Валюта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаОтражения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыКурсовВалют.ДатаОтражения КАК ДатаОтражения,
	|	ВЫБОР
	|		КОГДА КурсыВалют.Валюта ЕСТЬ NULL
	|			ТОГДА 1
	|		КОГДА КурсыВалют.Кратность = 0
	|			ТОГДА КурсыВалют.Курс
	|		ИНАЧЕ КурсыВалют.Курс / КурсыВалют.Кратность
	|	КОНЕЦ КАК Курс,
	|	1 КАК КурсСертификата,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаСертификата
	|ПОМЕСТИТЬ втКурсы
	|ИЗ
	|	ПериодыКурсовВалют КАК ПериодыКурсовВалют
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО ПериодыКурсовВалют.Период = КурсыВалют.Период
	|			И (КурсыВалют.Валюта = &ВалютаУпрУчета)
	|ГДЕ
	|	КурсыВалют.Валюта = &ВалютаУпрУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПериодыКурсовСертификатов.ДатаОтражения,
	|	1,
	|	ВЫБОР
	|		КОГДА КурсыВалют.Валюта ЕСТЬ NULL
	|			ТОГДА 1
	|		КОГДА КурсыВалют.Кратность = 0
	|			ТОГДА КурсыВалют.Курс
	|		ИНАЧЕ КурсыВалют.Курс / КурсыВалют.Кратность
	|	КОНЕЦ,
	|	ПериодыКурсовСертификатов.Валюта
	|ИЗ
	|	ПериодыКурсовСертификатов КАК ПериодыКурсовСертификатов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО ПериодыКурсовСертификатов.Период = КурсыВалют.Период
	|			И ПериодыКурсовСертификатов.Валюта = КурсыВалют.Валюта
	|ГДЕ
	|	КурсыВалют.Валюта = &ВалютаУпрУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задания.ДатаОтражения КАК Период,
	|	Задания.Организация КАК Организация,
	|	Задания.СчетФактура КАК СчетФактура,
	|	ТаблицаАвансы.Ссылка.Дата КАК СчетФактураДата,
	|	Задания.Контрагент КАК Покупатель,
	|	Задания.ДокументОснование КАК ДокументОплаты,
	|	Задания.ДатаОтражения КАК ДатаОплаты,
	|	Задания.ПравилоОтбораАванса КАК ПравилоОтбораАванса,
	|	Задания.ДатаОтражения КАК ДатаСобытия,
	|	КурсВалютыУпрУчета.Курс КАК Курс,
	|	ТаблицаАвансы.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаАвансы.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА ТаблицаАвансы.ТипЗапасов В (&ТипыЗапасовСобственные)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВключатьВКнигуПродаж,
	|	СУММА(ТаблицаАвансы.СуммаНДС) КАК НДС,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаАвансы.Сумма = 0
	|				ТОГДА 0
	|			ИНАЧЕ ТаблицаАвансы.Сумма - ТаблицаАвансы.СуммаНДС
	|		КОНЕЦ) КАК СуммаБезНДС,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(КурсВалютыУпрУчета.Курс, 0) = 0
	|				ТОГДА ТаблицаАвансы.СуммаНДС
	|			ИНАЧЕ ТаблицаАвансы.СуммаНДС / КурсВалютыУпрУчета.Курс
	|		КОНЕЦ) КАК НДСУпр,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаАвансы.Сумма = 0
	|				ТОГДА 0
	|			КОГДА ЕСТЬNULL(КурсВалютыУпрУчета.Курс, 0) = 0
	|				ТОГДА ТаблицаАвансы.Сумма - ТаблицаАвансы.СуммаНДС
	|			ИНАЧЕ (ТаблицаАвансы.Сумма - ТаблицаАвансы.СуммаНДС) / КурсВалютыУпрУчета.Курс
	|		КОНЕЦ) КАК СуммаБезНДСУпр,
	|	Задания.НомерПлатежноРасчетногоДокумента КАК НомерДокументаОплаты,
	|	Задания.ДатаПлатежноРасчетногоДокумента КАК ДатаДокументаОплаты,
	|	Задания.КодВидаОперации КАК КодВидаОперации,
	|	КурсВалютыУпрУчета.КурсСертификата КАК КурсСертификата
	|ПОМЕСТИТЬ ВтТаблицаАвансыПолученные
	|ИЗ
	|	Документ.СчетФактураВыданныйАванс.Авансы КАК ТаблицаАвансы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСчетаФактурыВыданныеАванс КАК Задания
	|		ПО ТаблицаАвансы.Ссылка = Задания.СчетФактура
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКурсы КАК КурсВалютыУпрУчета
	|		ПО (НАЧАЛОПЕРИОДА(Задания.ДатаОтражения, ДЕНЬ) = КурсВалютыУпрУчета.ДатаОтражения)
	|			И Задания.ВалютаСертификата = КурсВалютыУпрУчета.ВалютаСертификата
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ТаблицаАвансы.ТипЗапасов В (&ТипыЗапасовСобственные)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	Задания.ДатаОтражения,
	|	ТаблицаАвансы.СтавкаНДС,
	|	ТаблицаАвансы.НаправлениеДеятельности,
	|	Задания.СчетФактура,
	|	ТаблицаАвансы.Ссылка.Дата,
	|	Задания.Организация,
	|	Задания.Контрагент,
	|	Задания.ДокументОснование,
	|	Задания.ПравилоОтбораАванса,
	|	Задания.НомерПлатежноРасчетногоДокумента,
	|	Задания.ДатаПлатежноРасчетногоДокумента,
	|	КурсВалютыУпрУчета.Курс,
	|	Задания.КодВидаОперации,
	|	КурсВалютыУпрУчета.КурсСертификата
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОплаты,
	|	НаправлениеДеятельности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задания.ДатаОснования КАК ДатаОснования,
	|	Задания.Организация КАК Организация,
	|	Задания.СчетФактура КАК СчетФактура,
	|	КурсВалютыУпрУчета.Курс КАК Курс,
	|	ТаблицаАвансы.Ссылка.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ТаблицаАвансы.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаАвансы.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Задания.Контрагент КАК Контрагент,
	|	Задания.ДокументОснование КАК ДокументОплаты,
	|	Задания.ДатаПолучения КАК ДатаПолучения,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаАвансы.Сумма <> 0
	|				ТОГДА ТаблицаАвансы.Сумма - ТаблицаАвансы.СуммаНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС,
	|	СУММА(ТаблицаАвансы.СуммаНДС) КАК НДС,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаАвансы.Сумма <> 0
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсВалютыУпрУчета.Курс, 0) = 0
	|							ТОГДА ТаблицаАвансы.Сумма - ТаблицаАвансы.СуммаНДС
	|						ИНАЧЕ (ТаблицаАвансы.Сумма - ТаблицаАвансы.СуммаНДС) / КурсВалютыУпрУчета.Курс
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДСУпр,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(КурсВалютыУпрУчета.Курс, 0) = 0
	|				ТОГДА ТаблицаАвансы.СуммаНДС
	|			ИНАЧЕ ТаблицаАвансы.СуммаНДС / КурсВалютыУпрУчета.Курс
	|		КОНЕЦ) КАК НДСУпр
	|ПОМЕСТИТЬ ВтТаблицаАвансыВыданные
	|ИЗ
	|	Документ.СчетФактураПолученныйАванс.Авансы КАК ТаблицаАвансы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСчетаФактурыПолученныеАванс КАК Задания
	|		ПО ТаблицаАвансы.Ссылка = Задания.СчетФактура
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКурсы КАК КурсВалютыУпрУчета
	|		ПО (НАЧАЛОПЕРИОДА(Задания.ДатаОснования, ДЕНЬ) = КурсВалютыУпрУчета.ДатаОтражения)
	|
	|СГРУППИРОВАТЬ ПО
	|	Задания.СчетФактура,
	|	Задания.Организация,
	|	Задания.ДатаОснования,
	|	Задания.ДатаПолучения,
	|	Задания.Контрагент,
	|	КурсВалютыУпрУчета.Курс,
	|	Задания.ДокументОснование,
	|	ТаблицаАвансы.СтавкаНДС,
	|	ТаблицаАвансы.Ссылка.НалогообложениеНДС,
	|	ТаблицаАвансы.НаправлениеДеятельности
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОплаты,
	|	НаправлениеДеятельности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втСчетаФактурыВыданныеАванс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втСчетаФактурыПолученныеАванс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПериодыКурсовВалют
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втКурсы
	|";
	
	ТипыЗапасовСобственные = Новый СписокЗначений;
	ТипыЗапасовСобственные.Добавить(Перечисления.ТипыЗапасов.Товар);
	ТипыЗапасовСобственные.Добавить(Перечисления.ТипыЗапасов.Услуга);
	Запрос.УстановитьПараметр("ТипыЗапасовСобственные", ТипыЗапасовСобственные);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаУпрУчета",  Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура РассчитатьЗачетАвансовПолученных(ПараметрыРасчета)
	
	МВТ = ПараметрыРасчета.МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	Задания КАК Задания
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Задания.СчетФактура) = ТИП(Документ.СчетФактураВыданныйАванс)";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	Иначе
		ПараметрыРасчета.РасчетАвансовПолученных = Истина;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АвансыПолученные.Организация КАК Организация,
	|	АвансыПолученные.Покупатель КАК Покупатель,
	|	АвансыПолученные.СчетФактура КАК СчетФактура,
	|	АвансыПолученные.ДокументОплаты КАК ДокументОплаты,
	|	АвансыПолученные.Курс КАК Курс,
	|	АвансыПолученные.КурсСертификата КАК КурсСертификата
	|ПОМЕСТИТЬ ВтТаблицаАвансыПолученные_ДокументыОплаты
	|ИЗ
	|	ВтТаблицаАвансыПолученные КАК АвансыПолученные
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОплаты
	|";
	
	Запрос.Выполнить();
	
	
	ПараметрыРасчетаАвансов = УчетНДСУПСлужебный.ИнициализироватьПараметрыПодготовкиРасчетовАвансовВЦеляхНДС();
	
	ПараметрыРасчетаАвансов.ПараметрыОтбораПоРасчетномуДокументу.ИмяПоля          = "ДокументОплаты";
	ПараметрыРасчетаАвансов.ПараметрыОтбораПоРасчетномуДокументу.ИмяТаблицыОтбора =
		"ВтТаблицаАвансыПолученные_ДокументыОплаты";
	ПараметрыРасчетаАвансов.ВключитьДанныеПодарочныхСертификатов                  = Истина;
	ПараметрыРасчетаАвансов.АнализироватьУпрУчетДополнительно                     = Истина;
	
	УчетНДСУПСлужебный.ПодготовитьВТ_АвансыПолученные_Возникновения(МВТ, ПараметрыРасчетаАвансов);
	УчетНДСУПСлужебный.ПодготовитьВТ_АвансыПолученные_Погашения(МВТ, ПараметрыРасчетаАвансов);
	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Зачеты.ДокументРегистратор                                              КАК Регистратор,
	|	Зачеты.ДатаПогашения                                                    КАК Период,
	|	АвансыПолученные.Организация                                            КАК Организация,
	|	Зачеты.НаправлениеДеятельности                                          КАК НаправлениеДеятельности,
	|	Зачеты.Контрагент                                                       КАК Поставщик,
	|	Зачеты.РасчетныйДокумент                                                КАК СчетФактура,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА Зачеты.СобытиеЗнак >= 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ВозвратАвансовПолученных)
	|	КОНЕЦ)                                                                  КАК ВидЦенности,
	|	Зачеты.РасчетныйДокумент                                                КАК ДокументОплаты,
	|	Зачеты.ДатаПогашения                                                    КАК ДатаОплаты,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету)         КАК Событие,
	|	Зачеты.ДатаПогашения                                                    КАК ДатаСобытия,
	|	СУММА(Зачеты.СуммаПогашения)                                            КАК СуммаЗачета,
	|	СУММА(Зачеты.СуммаПогашенияУпр)                                         КАК СуммаЗачетаУпр,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВычетНДССПолученногоАванса) КАК ХозяйственнаяОперация,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА Зачеты.СобытиеЗнак < 0
	|			ТОГДА ДанныеПервичныхДокументов.Номер
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ)                                                                  КАК НомерДокументаОплаты,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА Зачеты.СобытиеЗнак < 0
	|			ТОГДА ДанныеПервичныхДокументов.Дата
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ)                                                                  КАК ДатаДокументаОплаты
	|
	|ПОМЕСТИТЬ ВтЗачетАвансовПолученных
	|ИЗ
	|	АвансыПолученные_Погашения КАК Зачеты
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВтТаблицаАвансыПолученные_ДокументыОплаты КАК АвансыПолученные
	|	ПО
	|		Зачеты.РасчетныйДокумент   = АвансыПолученные.ДокументОплаты
	|		И Зачеты.Контрагент        = АвансыПолученные.Покупатель
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|	ПО
	|		Зачеты.ДокументРегистратор = ДанныеПервичныхДокументов.Документ
	|		И Зачеты.Организация       = ДанныеПервичныхДокументов.Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	Зачеты.ДокументРегистратор,
	|	Зачеты.ДатаПогашения,
	|	АвансыПолученные.Организация,
	|	Зачеты.НаправлениеДеятельности,
	|	Зачеты.Контрагент,
	|	Зачеты.РасчетныйДокумент
	|
	|ИМЕЮЩИЕ
	|	СУММА(Зачеты.СуммаПогашения) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПродаж.Регистратор КАК Регистратор,
	|	СУММА(ВЫБОР 
	|		КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаНДСПродажиБезНДС,
	|	СУММА(ВЫБОР 
	|		КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС <> ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаНДСПродажиСНДС
	|ПОМЕСТИТЬ ВтЗаписиКнигиПродаж
	|ИЗ
	|	ВтЗачетАвансовПолученных КАК ЗачетАвансов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|	ПО
	|		ЗачетАвансов.Регистратор = НДСЗаписиКнигиПродаж.Регистратор
	|ГДЕ
	|	НДСЗаписиКнигиПродаж.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.Реализация)
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПродаж.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АвансыПолученные.СчетФактура                 КАК СчетФактура,
	|	ВозникновенияАвансов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	СУММА(ВозникновенияАвансов.СуммаАванса)      КАК Аванс,
	|	СУММА(ВозникновенияАвансов.СуммаАвансаУпр)   КАК АвансУпр
	|ИЗ
	|	АвансыПолученные_Возникновения КАК ВозникновенияАвансов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВтТаблицаАвансыПолученные_ДокументыОплаты КАК АвансыПолученные
	|	ПО
	|		ВозникновенияАвансов.РасчетныйДокумент = АвансыПолученные.ДокументОплаты
	|		И ВозникновенияАвансов.Контрагент      = АвансыПолученные.Покупатель
	|		
	|СГРУППИРОВАТЬ ПО
	|	АвансыПолученные.СчетФактура,
	|	ВозникновенияАвансов.НаправлениеДеятельности
	|
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаАвансы.Период                  КАК Период,
	|	ТаблицаАвансы.СчетФактура             КАК СчетФактура,
	|	ТаблицаАвансы.СчетФактураДата         КАК СчетФактураДата,
	|	ТаблицаАвансы.Покупатель              КАК Покупатель,
	|	ТаблицаАвансы.СтавкаНДС               КАК СтавкаНДС,
	|	ТаблицаАвансы.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаАвансы.НДС                     КАК НДС,
	|	ТаблицаАвансы.СуммаБезНДС             КАК СуммаБезНДС,
	|	ТаблицаАвансы.НДСУпр                  КАК НДСУпр,
	|	ТаблицаАвансы.СуммаБезНДСУпр          КАК СуммаБезНДСУпр,
	|	ТаблицаАвансы.КодВидаОперации         КАК КодВидаОперации,
	|	ТаблицаАвансы.ПравилоОтбораАванса     КАК ПравилоОтбораАванса,
	|	ТаблицаАвансы.ВключатьВКнигуПродаж    КАК ВключатьВКнигуПродаж
	|ИЗ
	|	ВтТаблицаАвансыПолученные КАК ТаблицаАвансы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗачетАвансов.Период КАК Период,
	|	СчетФактураДокумент.Ссылка КАК Регистратор,
	|	ЗачетАвансов.Организация КАК Организация,
	|	ЗачетАвансов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЗачетАвансов.Поставщик КАК Поставщик,
	|	СчетФактураДокумент.Ссылка КАК СчетФактура,
	|	ЗачетАвансов.ВидЦенности КАК ВидЦенности,
	|	ЗачетАвансов.ДокументОплаты КАК ДокументОплаты,
	|	ЗачетАвансов.ДатаОплаты КАК ДатаОплаты,
	|	ЗачетАвансов.Событие  КАК Событие,
	|	ЗачетАвансов.ДатаСобытия КАК ДатаСобытия,
	|	ЗачетАвансов.СуммаЗачета КАК СуммаЗачета,
	|	ЗачетАвансов.СуммаЗачетаУпр КАК СуммаЗачетаУпр,
	|	ЗачетАвансов.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЗачетАвансов.НомерДокументаОплаты КАК НомерДокументаОплаты,
	|	ЗачетАвансов.ДатаДокументаОплаты КАК ДатаДокументаОплаты,
	|	ВЫБОР 
	|		КОГДА НДСЗаписиКнигиПродаж.Регистратор ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьНДСПродажи,
	|	НДСЗаписиКнигиПродаж.СуммаНДСПродажиБезНДС КАК СуммаНДСПродажиБезНДС,
	|	НДСЗаписиКнигиПродаж.СуммаНДСПродажиСНДС КАК СуммаНДСПродажиСНДС
	|ИЗ
	|	ВтЗачетАвансовПолученных КАК ЗачетАвансов
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВтЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|	ПО
	|		ЗачетАвансов.Регистратор = НДСЗаписиКнигиПродаж.Регистратор
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СчетФактураВыданныйАванс КАК СчетФактураДокумент
	|	ПО
	|		СчетФактураДокумент.ДокументОснование = ЗачетАвансов.СчетФактура
	|		И СчетФактураДокумент.Контрагент = ЗачетАвансов.Поставщик
	|		И СчетФактураДокумент.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ АвансыПолученные_Возникновения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ АвансыПолученные_Погашения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтЗаписиКнигиПродаж
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтЗачетАвансовПолученных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтТаблицаАвансыПолученные_ДокументыОплаты
	|";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаАванс = Результат[2].Выгрузить();
	ТаблицаАвансНачислениеНДС = Результат[3].Выгрузить();
	ТаблицаАвансНачислениеНДС.Индексы.Добавить("СчетФактура");
	ТаблицаАвансНачислениеНДС.Индексы.Добавить("ВключатьВКнигуПродаж");
	ТаблицаАвансНачислениеНДС.Индексы.Добавить("НаправлениеДеятельности");
	ТаблицаЗачетАванса = Результат[4].Выгрузить();
	ТаблицаЗачетАванса.Индексы.Добавить("СчетФактура");
	ТаблицаЗачетАванса.Индексы.Добавить("ЕстьНДСПродажи");
	ТаблицаЗачетАванса.Индексы.Добавить("НаправлениеДеятельности");
	
	ТаблицаСФиНД = ТаблицаАвансНачислениеНДС.Скопировать(,"СчетФактура,ВключатьВКнигуПродаж,НаправлениеДеятельности");
	ТаблицаСФиНД.Свернуть("СчетФактура,ВключатьВКнигуПродаж,НаправлениеДеятельности");
	
	ТаблицаАвансИтог = ТаблицаАванс.Скопировать(, "СчетФактура,Аванс,АвансУпр");
	ТаблицаАвансИтог.Свернуть("СчетФактура", "Аванс,АвансУпр");
	ТаблицаАвансИтог.Индексы.Добавить("СчетФактура");
	
	ТаблицаНДСЗаписиКнигиПокупок = РегистрыНакопления.НДСЗаписиКнигиПокупок.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	ТаблицаНДСЗаписиКнигиПокупок.Колонки.Удалить("Активность");
	
	// Зачитываем авансы по порядку, с отбором по следующим измерениям.
	
	ЭтапыЗачета = Новый Массив;
	ЭтапыЗачета.Добавить(Новый Структура("СчетФактура,ЕстьНДСПродажи,НаправлениеДеятельности"));
	ЭтапыЗачета.Добавить(Новый Структура("СчетФактура,ЕстьНДСПродажи"));
	ЭтапыЗачета.Добавить(Новый Структура("СчетФактура,НаправлениеДеятельности"));
	ЭтапыЗачета.Добавить(Новый Структура("СчетФактура"));
	
	Для Каждого СтруктураОтбораЗачета Из ЭтапыЗачета Цикл
		Для каждого СтрокаСФиНД Из ТаблицаСФиНД Цикл
			
			СтрокаАвансаПоСФ = ТаблицаАвансИтог.Найти(СтрокаСФиНД.СчетФактура);
			Если СтрокаАвансаПоСФ = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураОтбораАванса = Новый Структура("СчетФактура,ВключатьВКнигуПродаж,НаправлениеДеятельности",
				СтрокаСФиНД.СчетФактура, СтрокаСФиНД.ВключатьВКнигуПродаж, СтрокаСФиНД.НаправлениеДеятельности);
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбораЗачета, СтруктураОтбораАванса);
			Если СтруктураОтбораЗачета.Свойство("ЕстьНДСПродажи") Тогда
				СтруктураОтбораЗачета.ЕстьНДСПродажи = СтруктураОтбораАванса.ВключатьВКнигуПродаж;
			КонецЕсли;
			
			СтрокиАвансаНачислениеНДСПоСФ = ТаблицаАвансНачислениеНДС.НайтиСтроки(СтруктураОтбораАванса);
			СтрокиЗачетаАвансаПоСФ = ТаблицаЗачетАванса.НайтиСтроки(СтруктураОтбораЗачета);
			
			ВыполнитьЗачетАвансаПолученного(СтрокаАвансаПоСФ, СтрокиАвансаНачислениеНДСПоСФ, СтрокиЗачетаАвансаПоСФ, ТаблицаНДСЗаписиКнигиПокупок);
			
		КонецЦикла;
	КонецЦикла;
	
	Запрос.Параметры.Вставить("ТаблицаНДСЗаписиКнигиПокупок", ТаблицаНДСЗаписиКнигиПокупок);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНДСЗаписиКнигиПокупок.Период,
	|	ТаблицаНДСЗаписиКнигиПокупок.Регистратор,
	|	ТаблицаНДСЗаписиКнигиПокупок.НомерСтроки,
	|	ТаблицаНДСЗаписиКнигиПокупок.Организация,
	|	ТаблицаНДСЗаписиКнигиПокупок.Поставщик,
	|	ТаблицаНДСЗаписиКнигиПокупок.СчетФактура,
	|	ТаблицаНДСЗаписиКнигиПокупок.ВидЦенности,
	|	ТаблицаНДСЗаписиКнигиПокупок.СтавкаНДС,
	|	ТаблицаНДСЗаписиКнигиПокупок.СчетУчетаНДС,
	|	ТаблицаНДСЗаписиКнигиПокупок.ДатаОплаты,
	|	ТаблицаНДСЗаписиКнигиПокупок.ДокументОплаты,
	|	ТаблицаНДСЗаписиКнигиПокупок.Событие,
	|	ТаблицаНДСЗаписиКнигиПокупок.ДатаСобытия,
	|	ТаблицаНДСЗаписиКнигиПокупок.ЗаписьДополнительногоЛиста,
	|	ТаблицаНДСЗаписиКнигиПокупок.КорректируемыйПериод,
	|	ТаблицаНДСЗаписиКнигиПокупок.ДоговорКонтрагента,
	|	ТаблицаНДСЗаписиКнигиПокупок.ИсправленныйСчетФактура,
	|	ТаблицаНДСЗаписиКнигиПокупок.СуммаБезНДС,
	|	ТаблицаНДСЗаписиКнигиПокупок.НДС,
	|	ТаблицаНДСЗаписиКнигиПокупок.НДСУпр,
	|	ТаблицаНДСЗаписиКнигиПокупок.ХозяйственнаяОперация,
	|	ТаблицаНДСЗаписиКнигиПокупок.НомерДокументаОплаты,
	|	ТаблицаНДСЗаписиКнигиПокупок.ДатаДокументаОплаты,
	|	ТаблицаНДСЗаписиКнигиПокупок.НаправлениеДеятельности,
	|	ТаблицаНДСЗаписиКнигиПокупок.КодВидаОперации
	|ПОМЕСТИТЬ ВтТаблицаНДСЗаписиКнигиПокупок
	|ИЗ
	|	&ТаблицаНДСЗаписиКнигиПокупок КАК ТаблицаНДСЗаписиКнигиПокупок";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ВыполнитьЗачетАвансаПолученного(СтрокаАвансаПоСФ, СтрокиАвансаНачислениеНДС, СтрокиЗачетаАванса, ТаблицаЗаписиКнигиПокупок)
	
	Если СтрокиАвансаНачислениеНДС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	АвансМассивСуммаБезНДС = Новый Массив();
	АвансМассивСуммаНДС = Новый Массив();
	АвансМассивСуммаБезНДСУпр = Новый Массив();
	АвансМассивСуммаНДСУпр = Новый Массив();
	
	АвансСуммаБезНДС    = 0;
	АвансСуммаНДС       = 0;
	АвансСуммаСНДС      = 0;
	АвансСуммаБезНДСУпр = 0;
	АвансСуммаНДСУпр    = 0;
	АвансСуммаСНДСУпр   = 0;
	
	Для Каждого СтрокаАванса Из СтрокиАвансаНачислениеНДС Цикл
		АвансМассивСуммаБезНДС.Добавить(СтрокаАванса.СуммаБезНДС);
		АвансМассивСуммаНДС.Добавить(СтрокаАванса.НДС);
		АвансМассивСуммаБезНДСУпр.Добавить(СтрокаАванса.СуммаБезНДСУпр);
		АвансМассивСуммаНДСУпр.Добавить(СтрокаАванса.НДСУпр);
		
		АвансСуммаБезНДС    = АвансСуммаБезНДС + СтрокаАванса.СуммаБезНДС;
		АвансСуммаНДС       = АвансСуммаНДС + СтрокаАванса.НДС;
		АвансСуммаСНДС      = АвансСуммаСНДС + СтрокаАванса.СуммаБезНДС + СтрокаАванса.НДС;
		АвансСуммаБезНДСУпр = АвансСуммаБезНДСУпр + СтрокаАванса.СуммаБезНДСУпр;
		АвансСуммаНДСУпр    = АвансСуммаНДСУпр + СтрокаАванса.НДСУпр;
		АвансСуммаСНДСУпр   = АвансСуммаСНДСУпр + СтрокаАванса.СуммаБезНДСУпр + СтрокаАванса.НДСУпр;
	КонецЦикла; 
	
	НезачтеннаяСуммаАванса = СтрокаАвансаПоСФ.Аванс;
	НезачтеннаяСуммаАвансаУпр = СтрокаАвансаПоСФ.АвансУпр;
	
	Для Каждого ПогашенныйАвансПоСФ Из СтрокиЗачетаАванса Цикл
		
		Если АвансСуммаСНДС = 0 Тогда
			Прервать;
		КонецЕсли;
		
		НезачтеннаяСуммаАванса = НезачтеннаяСуммаАванса - ПогашенныйАвансПоСФ.СуммаЗачета;
		НезачтеннаяСуммаАвансаУпр = НезачтеннаяСуммаАвансаУпр - ПогашенныйАвансПоСФ.СуммаЗачетаУпр;
		
		//Отбор лишних зачетов аванса
		ДатаЗачетаАванса = ПогашенныйАвансПоСФ.Период;
		ДатаНачисления = СтрокиАвансаНачислениеНДС[0].СчетФактураДата;
		Если СтрокиАвансаНачислениеНДС[0].ПравилоОтбораАванса <> Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.ВсеОплаты 
			И КонецДня(ДатаЗачетаАванса) < НачалоДня(ДатаНачисления) Тогда
			Продолжить;
		ИначеЕсли СтрокиАвансаНачислениеНДС[0].ПравилоОтбораАванса <> Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.ВсеОплаты
			И НачалоДня(ДатаЗачетаАванса) = НачалоДня(ДатаНачисления) Тогда
			// Когда аванс и зачет аванса прошли в один день, то зачет аванса не нужен, в СФ на аванс он уже учтен.
			Продолжить;
		КонецЕсли;
		
		Если ПогашенныйАвансПоСФ.ЕстьНДСПродажи И ПогашенныйАвансПоСФ.СуммаНДСПродажиБезНДС <> 0 Тогда
			// Определим по пропорции сумму зачета, которая относится к реализации с НДС.
			Коэффициенты = Новый Массив;
			Коэффициенты.Добавить(ПогашенныйАвансПоСФ.СуммаНДСПродажиСНДС);
			Коэффициенты.Добавить(ПогашенныйАвансПоСФ.СуммаНДСПродажиБезНДС);
			
			РаспределениеСуммыЗачета = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
											ПогашенныйАвансПоСФ.СуммаЗачета,
											Коэффициенты);
			РаспределениеСуммыЗачетаУпр = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
											ПогашенныйАвансПоСФ.СуммаЗачетаУпр,
											Коэффициенты);
			СуммаЗачета = ?(ПогашенныйАвансПоСФ.СуммаЗачета > 0, РаспределениеСуммыЗачета[0], 0);
			СуммаЗачетаПоСтавкеБезНДС = ?(ПогашенныйАвансПоСФ.СуммаЗачета > 0, РаспределениеСуммыЗачета[1], 0);
			СуммаЗачетаУпр = ?(ПогашенныйАвансПоСФ.СуммаЗачетаУпр > 0, РаспределениеСуммыЗачетаУпр[0], 0);
			СуммаЗачетаПоСтавкеБезНДСУпр = ?(ПогашенныйАвансПоСФ.СуммаЗачетаУпр > 0, РаспределениеСуммыЗачетаУпр[0], 0);
		Иначе
			СуммаЗачета = ПогашенныйАвансПоСФ.СуммаЗачета;
			СуммаЗачетаПоСтавкеБезНДС = 0;
			СуммаЗачетаУпр = ПогашенныйАвансПоСФ.СуммаЗачетаУпр;
			СуммаЗачетаПоСтавкеБезНДСУпр = 0;
		КонецЕсли;
		
		СуммаСНДС = Мин(СуммаЗачета, АвансСуммаСНДС);
		ОстатокСуммыАвансаСНДС = (АвансСуммаСНДС - СуммаСНДС);
		Если ОстатокСуммыАвансаСНДС > НезачтеннаяСуммаАванса Тогда
			СуммаКорректировки = Макс(0, ОстатокСуммыАвансаСНДС - НезачтеннаяСуммаАванса - СуммаЗачетаПоСтавкеБезНДС);
			// Откорректируем сумму, с которой выполняется восстановление с учетом остатка незачтенного аванса.
			СуммаСНДС = СуммаСНДС + СуммаКорректировки;
		КонецЕсли;
		
		СуммаСНДСУпр = Мин(СуммаЗачетаУпр, АвансСуммаСНДСУпр);
		ОстатокСуммыАвансаСНДСУпр = (АвансСуммаСНДСУпр - СуммаСНДСУпр);
		Если ОстатокСуммыАвансаСНДСУпр > НезачтеннаяСуммаАвансаУпр Тогда
			СуммаКорректировки = Макс(0, ОстатокСуммыАвансаСНДСУпр - НезачтеннаяСуммаАвансаУпр - СуммаЗачетаПоСтавкеБезНДСУпр);
			// Откорректируем сумму, с которой выполняется восстановление с учетом остатка незачтенного аванса.
			СуммаСНДСУпр = СуммаСНДСУпр + СуммаКорректировки;
		КонецЕсли;
		
		Если СуммаСНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаБезНДС    = Окр(АвансСуммаБезНДС * СуммаСНДС / АвансСуммаСНДС, 2);
		СуммаБезНДСУпр = ?(СуммаСНДСУпр = 0 Или АвансСуммаСНДСУпр = 0, 0, Окр(АвансСуммаБезНДСУпр * СуммаСНДСУпр / АвансСуммаСНДСУпр, 2));
		СуммаНДС       = СуммаСНДС - СуммаБезНДС; 
		СуммаНДСУпр    = ?(СуммаСНДСУпр = 0 Или АвансСуммаСНДСУпр = 0, 0, СуммаСНДСУпр - СуммаБезНДСУпр);
		
		АвансСуммаБезНДС = АвансСуммаБезНДС - СуммаБезНДС;
		АвансСуммаСНДС   = АвансСуммаСНДС - СуммаСНДС;
		АвансСуммаБезНДСУпр = АвансСуммаБезНДСУпр - СуммаБезНДСУпр;
		АвансСуммаСНДСУпр   = АвансСуммаСНДСУпр - СуммаСНДСУпр;
		
		Если СуммаБезНДС > 0 Тогда
			МассивСуммаБезНДС = ОбщегоНазначенияУТКлиентСервер.РаспределитьПропорционально(СуммаБезНДС, АвансМассивСуммаБезНДС);
		КонецЕсли;
		
		Если СуммаНДС > 0 Тогда
			МассивСуммаНДС = ОбщегоНазначенияУТКлиентСервер.РаспределитьПропорционально(СуммаНДС, АвансМассивСуммаНДС);
		КонецЕсли; 
		
		Если СуммаБезНДСУпр > 0 Тогда
			МассивСуммаБезНДСУпр = ОбщегоНазначенияУТКлиентСервер.РаспределитьПропорционально(СуммаБезНДСУпр, АвансМассивСуммаБезНДСУпр);
		КонецЕсли;
		
		Если СуммаНДСУпр > 0 Тогда
			МассивСуммаНДСУпр = ОбщегоНазначенияУТКлиентСервер.РаспределитьПропорционально(СуммаНДСУпр, АвансМассивСуммаНДСУпр);
		КонецЕсли;
		
		Счетчик = -1;
		
		//Зачет аванса - записи книги покупок
		Для Каждого СтрокаАванса Из СтрокиАвансаНачислениеНДС Цикл
			
			Счетчик = Счетчик + 1;
			
			Результат_СуммаБезНДС = ?(СуммаБезНДС > 0, МассивСуммаБезНДС[Счетчик], 0);
			Результат_НДС = ?(СуммаНДС > 0, МассивСуммаНДС[Счетчик], 0);
			
			Если РасчетСебестоимостиПовтИсп.УправленческийУчетОрганизаций(ПогашенныйАвансПоСФ.Период) Тогда
				Результат_СуммаБезНДСУпр = ?(СуммаБезНДСУпр > 0 И МассивСуммаБезНДСУпр <> Неопределено, МассивСуммаБезНДСУпр[Счетчик], 0);
				Результат_НДСУпр = ?(СуммаНДСУпр > 0 И МассивСуммаНДСУпр <> Неопределено, МассивСуммаНДСУпр[Счетчик], 0);
			Иначе
				Результат_СуммаБезНДСУпр = 0;
				Результат_НДСУпр = 0;
			КонецЕсли;
			
			Если Результат_СуммаБезНДС = 0 И Результат_НДСУпр = 0 И Результат_НДС = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаАванса.ВключатьВКнигуПродаж Тогда
				СтрокаРезультата = ТаблицаЗаписиКнигиПокупок.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРезультата, ПогашенныйАвансПоСФ);
				
				СтрокаРезультата.НаправлениеДеятельности = СтрокаАванса.НаправлениеДеятельности;
				
				СтрокаРезультата.СчетФактура = ПогашенныйАвансПоСФ.ДокументОплаты;
				СтрокаРезультата.Поставщик = СтрокаАванса.Покупатель;
				СтрокаРезультата.СтавкаНДС = СтрокаАванса.СтавкаНДС;
				
				СтрокаРезультата.СуммаБезНДС = Результат_СуммаБезНДС;
				СтрокаРезультата.НДС = Результат_НДС;
				СтрокаРезультата.НДСУпр = Результат_НДСУпр;
				
				ВерсияКодовВидовОпераций = УчетНДСКлиентСервер.ВерсияКодовВидовОпераций(СтрокиАвансаНачислениеНДС[0].Период);
				Если ВерсияКодовВидовОпераций >= 3 И СтрокаАванса.КодВидаОперации = "26" Тогда
					СтрокаРезультата.КодВидаОперации = "26";
				Иначе
					СтрокаРезультата.КодВидаОперации = "22";
				КонецЕсли;
			КонецЕсли;
			
			// Уменьшим суммы в исходных строках аванса и зачета аванса на зачтенную сумму.
			
			СтрокаАванса.СуммаБезНДС = СтрокаАванса.СуммаБезНДС - Результат_СуммаБезНДС;
			СтрокаАванса.НДС = СтрокаАванса.НДС - Результат_НДС;
			СтрокаАванса.СуммаБезНДСУпр = СтрокаАванса.СуммаБезНДСУпр - Результат_СуммаБезНДСУпр;
			СтрокаАванса.НДСУпр = СтрокаАванса.НДСУпр - Результат_НДСУпр;
			
			ПогашенныйАвансПоСФ.СуммаЗачета = ПогашенныйАвансПоСФ.СуммаЗачета - (Результат_СуммаБезНДС + Результат_НДС);
			ПогашенныйАвансПоСФ.СуммаЗачетаУпр = ПогашенныйАвансПоСФ.СуммаЗачетаУпр - (Результат_СуммаБезНДСУпр + Результат_НДСУпр);
			
			СтрокаАвансаПоСФ.Аванс = СтрокаАвансаПоСФ.Аванс - (Результат_СуммаБезНДС + Результат_НДС);
			СтрокаАвансаПоСФ.АвансУпр = СтрокаАвансаПоСФ.АвансУпр - (Результат_СуммаБезНДСУпр + Результат_НДСУпр);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьЗачетАвансовВыданных(ПараметрыРасчета)
	
	МВТ = ПараметрыРасчета.МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	Задания КАК Задания
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Задания.СчетФактура) = ТИП(Документ.СчетФактураПолученныйАванс)";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	Иначе
		ПараметрыРасчета.РасчетАвансовВыданных = Истина;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АвансыВыданные.Организация КАК Организация,
	|	АвансыВыданные.Контрагент КАК Контрагент,
	|	АвансыВыданные.СчетФактура КАК СчетФактура,
	|	АвансыВыданные.ДокументОплаты КАК ДокументОплаты,
	|	АвансыВыданные.Курс КАК Курс,
	|	АвансыВыданные.НалогообложениеНДС
	|ПОМЕСТИТЬ ВтТаблицаАвансыВыданные_ДокументыОплаты
	|ИЗ
	|	ВтТаблицаАвансыВыданные КАК АвансыВыданные
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОплаты
	|";
	
	Запрос.Выполнить();
	
	
	ПараметрыРасчетаАвансов = УчетНДСУПСлужебный.ИнициализироватьПараметрыПодготовкиРасчетовАвансовВЦеляхНДС();
	
	ПараметрыРасчетаАвансов.ПараметрыОтбораПоРасчетномуДокументу.ИмяПоля          = "ДокументОплаты";
	ПараметрыРасчетаАвансов.ПараметрыОтбораПоРасчетномуДокументу.ИмяТаблицыОтбора =
		"ВтТаблицаАвансыВыданные_ДокументыОплаты";
	ПараметрыРасчетаАвансов.ВключитьДанныеФинансовыхИнструментов                  = Истина;
	ПараметрыРасчетаАвансов.АнализироватьУпрУчетДополнительно                     = Истина;
	
	УчетНДСУПСлужебный.ПодготовитьВТ_АвансыВыданные_Возникновения(МВТ, ПараметрыРасчетаАвансов, ПараметрыРасчета.ТаблицаНастроек);
	УчетНДСУПСлужебный.ПодготовитьВТ_АвансыВыданные_Погашения(МВТ, ПараметрыРасчетаАвансов, ПараметрыРасчета.ТаблицаНастроек);

	
	СтавкиБезНДС = Новый Массив;
	СтавкиБезНДС.Добавить(Перечисления.СтавкиНДС.БезНДС);
	СтавкиБезНДС.Добавить(Перечисления.СтавкиНДС.НДС0);
	Запрос.УстановитьПараметр("СтавкиБезНДС", СтавкиБезНДС);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаУпрУчета", Константы.ВалютаУправленческогоУчета.Получить());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Зачеты.ДокументРегистратор                                                          КАК Регистратор,
	|	Зачеты.ДатаПогашения                                                                КАК Период,
	|	АвансыВыданные.Организация                                                          КАК Организация,
	|	Зачеты.НаправлениеДеятельности                                                      КАК НаправлениеДеятельности,
	|	Зачеты.Контрагент                                                                   КАК Покупатель,
	|	Зачеты.РасчетныйДокумент                                                            КАК СчетФактура,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА АвансыВыданные.НалогообложениеНДС
	|				= ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданныеНалоговыйАгент)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)
	|	КОНЕЦ)                                                                              КАК ВидЦенности,
	|	Зачеты.РасчетныйДокумент                                                            КАК ДокументОплаты,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.ВосстановлениеНДС)                        КАК Событие,
	|	Зачеты.ДатаПогашения                                                                КАК ДатаСобытия,
	|	СУММА(Зачеты.СуммаПогашения)                                                        КАК СуммаЗачета,
	|	СУММА(Зачеты.СуммаПогашенияУпр)                                                     КАК СуммаЗачетаУпр,
	|	Значение(Перечисление.ХозяйственныеОперации.ВосстановлениеНДССВыданногоАванса)      КАК ХозяйственнаяОперация,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА АвансыВыданные.НалогообложениеНДС
	|				= ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|			ТОГДА ""21""
	|		ИНАЧЕ
	|			""43""
	|	КОНЕЦ)                                                                              КАК КодВидаОперации
	|ПОМЕСТИТЬ ВтЗачетАвансов
	|ИЗ
	|	АвансыВыданные_Погашения КАК Зачеты
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВтТаблицаАвансыВыданные_ДокументыОплаты КАК АвансыВыданные
	|	ПО
	|		Зачеты.РасчетныйДокумент = АвансыВыданные.ДокументОплаты
	|		И Зачеты.Контрагент      = АвансыВыданные.Контрагент
	|
	|СГРУППИРОВАТЬ ПО
	|	Зачеты.ДокументРегистратор,
	|	Зачеты.ДатаПогашения,
	|	Зачеты.НаправлениеДеятельности,
	|	Зачеты.Контрагент,
	|	Зачеты.РасчетныйДокумент,
	|	АвансыВыданные.Организация
	|
	|ИМЕЮЩИЕ
	|	СУММА(Зачеты.СуммаПогашения) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОснований.Регистратор КАК Регистратор,
	|	СУММА(ВЫБОР 
	|		КОГДА НЕ ДанныеОснований.Регистратор ЕСТЬ NULL 
	|				И ДанныеОснований.СтавкаНДС В (&СтавкиБезНДС)
	|			ТОГДА ДанныеОснований.СуммаБезНДСРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаДокументаБезНДС,
	|	СУММА(ВЫБОР 
	|		КОГДА НЕ ДанныеОснований.Регистратор ЕСТЬ NULL 
	|				И НЕ ДанныеОснований.СтавкаНДС В (&СтавкиБезНДС)
	|			ТОГДА ДанныеОснований.СуммаБезНДСРегл + ДанныеОснований.СуммаНДСРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаДокументаСНДС
	|ПОМЕСТИТЬ ВтДанныеОснований
	|ИЗ
	|	втЗачетАвансов КАК ЗачетАвансов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ДанныеОснованийСчетовФактур КАК ДанныеОснований
	|		ПО
	|			ЗачетАвансов.Регистратор = ДанныеОснований.Регистратор
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДанныеОснований.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АвансыВыданные.СчетФактура                   КАК СчетФактура,
	|	ВозникновенияАвансов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	СУММА(ВозникновенияАвансов.СуммаАванса)      КАК Аванс,
	|	СУММА(ВозникновенияАвансов.СуммаАвансаУпр)   КАК АвансУпр
	|ИЗ
	|	АвансыВыданные_Возникновения КАК ВозникновенияАвансов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВтТаблицаАвансыВыданные_ДокументыОплаты КАК АвансыВыданные
	|	ПО
	|		ВозникновенияАвансов.РасчетныйДокумент = АвансыВыданные.ДокументОплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозникновенияАвансов.НаправлениеДеятельности,
	|	АвансыВыданные.СчетФактура
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Авансы.Организация             КАК Организация,
	|	Авансы.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Авансы.НалогообложениеНДС      КАК НалогообложениеНДС,
	|	Авансы.Контрагент              КАК Поставщик,
	|	Авансы.СчетФактура             КАК СчетФактура,
	|	Авансы.ДатаОснования           КАК ДатаОплаты,
	|	Авансы.ДатаПолучения           КАК ДатаПолучения,
	|	Авансы.СтавкаНДС               КАК СтавкаНДС,
	|	Авансы.СуммаБезНДС             КАК СуммаБезНДС,
	|	Авансы.НДС                     КАК НДС,
	|	Авансы.СуммаБезНДСУпр          КАК СуммаБезНДСУпр,
	|	Авансы.НДСУпр                  КАК НДСУпр
	|ИЗ
	|	ВтТаблицаАвансыВыданные КАК Авансы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураДокумент.Ссылка КАК Регистратор,
	|	ЗачетАвансов.Период КАК Период,
	|	ЗачетАвансов.Организация КАК Организация,
	|	ЗачетАвансов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЗачетАвансов.Покупатель КАК Покупатель,
	|	СчетФактураДокумент.Ссылка КАК СчетФактура,
	|	ЗачетАвансов.ВидЦенности КАК ВидЦенности,
	|	ЗачетАвансов.ДокументОплаты КАК ДокументОплаты,
	|	ЗачетАвансов.Событие КАК Событие,
	|	ЗачетАвансов.ДатаСобытия КАК ДатаСобытия,
	|	ЗачетАвансов.СуммаЗачета КАК СуммаЗачета,
	|	ЗачетАвансов.СуммаЗачетаУпр КАК СуммаЗачетаУпр,
	|	ЗачетАвансов.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЗачетАвансов.КодВидаОперации КАК КодВидаОперации,
	|	ВЫБОР 
	|		КОГДА ДанныеОснований.Регистратор ЕСТЬ NULL
	|		ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьДокументЗачетаАванса,
	|	ЕСТЬNULL(ДанныеОснований.СуммаДокументаБезНДС, 0) КАК СуммаДокументаБезНДС,
	|	ЕСТЬNULL(ДанныеОснований.СуммаДокументаСНДС, 0) КАК СуммаДокументаСНДС
	|ИЗ
	|	втЗачетАвансов КАК ЗачетАвансов
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ВтДанныеОснований КАК ДанныеОснований
	|		ПО
	|			ЗачетАвансов.Регистратор = ДанныеОснований.Регистратор
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Документ.СчетФактураПолученныйАванс КАК СчетФактураДокумент
	|		ПО
	|			ЗачетАвансов.ДокументОплаты = СчетФактураДокумент.ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтДанныеОснований
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втЗачетАвансов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ АвансыВыданные_Возникновения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ АвансыВыданные_Погашения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтТаблицаАвансыВыданные_ДокументыОплаты
	|";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаАванс = Результат[2].Выгрузить();
	ТаблицаАванс.Индексы.Добавить("СчетФактура");
	ТаблицаАванс.Индексы.Добавить("НаправлениеДеятельности");
	ТаблицаАвансНачислениеНДС = Результат[3].Выгрузить();
	ТаблицаАвансНачислениеНДС.Индексы.Добавить("СчетФактура");
	ТаблицаАвансНачислениеНДС.Индексы.Добавить("НаправлениеДеятельности");
	ТаблицаЗачетАванса = Результат[4].Выгрузить();
	ТаблицаЗачетАванса.Индексы.Добавить("СчетФактура");
	ТаблицаЗачетАванса.Индексы.Добавить("НаправлениеДеятельности");
	
	ТаблицаСФиНД = ТаблицаАвансНачислениеНДС.Скопировать(,"СчетФактура,НаправлениеДеятельности");
	ТаблицаСФиНД.Свернуть("СчетФактура,НаправлениеДеятельности");
	
	ТаблицаАвансИтог = ТаблицаАванс.Скопировать(, "СчетФактура,Аванс,АвансУпр");
	ТаблицаАвансИтог.Свернуть("СчетФактура", "Аванс,АвансУпр");
	
	ТаблицаНДСЗаписиКнигиПродаж = РегистрыНакопления.НДСЗаписиКнигиПродаж.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	ТаблицаНДСЗаписиКнигиПродаж.Колонки.Удалить("Активность");
	
	Для каждого СтрокаСФиНД Из ТаблицаСФиНД Цикл
		
		СтрокаАвансаПоСФ = ТаблицаАвансИтог.Найти(СтрокаСФиНД.СчетФактура);
		Если СтрокаАвансаПоСФ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура("СчетФактура,НаправлениеДеятельности", СтрокаСФиНД.СчетФактура, СтрокаСФиНД.НаправлениеДеятельности);
		
		СтрокиАвансаНачислениеНДСПоСФ = ТаблицаАвансНачислениеНДС.НайтиСтроки(СтруктураОтбора);
		СтрокиЗачетаАвансаПоСФ = ТаблицаЗачетАванса.НайтиСтроки(СтруктураОтбора);
		
		ТаблицаЗаписиКнигиПродажПоСФ = ВыполнитьЗачетАвансаВыданного(СтрокаАвансаПоСФ, СтрокиАвансаНачислениеНДСПоСФ, СтрокиЗачетаАвансаПоСФ);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаЗаписиКнигиПродажПоСФ, ТаблицаНДСЗаписиКнигиПродаж);
		
	КонецЦикла;
	
	// Второй цикл без учета направления деятельности.

	Для каждого СтрокаСФиНД Из ТаблицаСФиНД Цикл
		
		СтрокаАвансаПоСФ = ТаблицаАвансИтог.Найти(СтрокаСФиНД.СчетФактура);
		Если СтрокаАвансаПоСФ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура("СчетФактура,НаправлениеДеятельности", СтрокаСФиНД.СчетФактура, СтрокаСФиНД.НаправлениеДеятельности);
		СтруктураОтбораСФ = Новый Структура("СчетФактура", СтрокаСФиНД.СчетФактура);
		
		СтрокиАвансаНачислениеНДСПоСФ = ТаблицаАвансНачислениеНДС.НайтиСтроки(СтруктураОтбора);
		СтрокиЗачетаАвансаПоСФ = ТаблицаЗачетАванса.НайтиСтроки(СтруктураОтбораСФ);
		
		ТаблицаЗаписиКнигиПродажПоСФ = ВыполнитьЗачетАвансаВыданного(СтрокаАвансаПоСФ, СтрокиАвансаНачислениеНДСПоСФ, СтрокиЗачетаАвансаПоСФ);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаЗаписиКнигиПродажПоСФ, ТаблицаНДСЗаписиКнигиПродаж);
		
	КонецЦикла;
	
	Запрос.Параметры.Вставить("ТаблицаНДСЗаписиКнигиПродаж", ТаблицаНДСЗаписиКнигиПродаж);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСЗаписиКнигиПродаж.Период,
	|	НДСЗаписиКнигиПродаж.Регистратор,
	|	НДСЗаписиКнигиПродаж.Организация,
	|	НДСЗаписиКнигиПродаж.Покупатель,
	|	НДСЗаписиКнигиПродаж.СчетФактура,
	|	НДСЗаписиКнигиПродаж.ВидЦенности,
	|	НДСЗаписиКнигиПродаж.СтавкаНДС,
	|	НДСЗаписиКнигиПродаж.ДатаОплаты,
	|	НДСЗаписиКнигиПродаж.ДокументОплаты,
	|	НДСЗаписиКнигиПродаж.Событие,
	|	НДСЗаписиКнигиПродаж.ДатаСобытия,
	|	НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста,
	|	НДСЗаписиКнигиПродаж.КорректируемыйПериод,
	|	НДСЗаписиКнигиПродаж.СторнирующаяЗаписьДопЛиста,
	|	НДСЗаписиКнигиПродаж.ДоговорКонтрагента,
	|	НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура,
	|	НДСЗаписиКнигиПродаж.Исправление,
	|	НДСЗаписиКнигиПродаж.ДатаСчетаФактурыКомиссионера,
	|	НДСЗаписиКнигиПродаж.СуммаБезНДС,
	|	НДСЗаписиКнигиПродаж.НДС,
	|	НДСЗаписиКнигиПродаж.НДСУпр,
	|	НДСЗаписиКнигиПродаж.ХозяйственнаяОперация,
	|	НДСЗаписиКнигиПродаж.НомерДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.ДатаДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.НаправлениеДеятельности,
	|	НДСЗаписиКнигиПродаж.КодВидаОперации
	|ПОМЕСТИТЬ ВтТаблицаНДСЗаписиКнигиПродаж
	|ИЗ
	|	&ТаблицаНДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаНДСЗаписиКнигиПокупок.Период,
	|	ТаблицаНДСЗаписиКнигиПокупок.Регистратор,
	|	ТаблицаНДСЗаписиКнигиПокупок.Организация,
	|	ТаблицаНДСЗаписиКнигиПокупок.Покупатель КАК Поставщик,
	|	ТаблицаНДСЗаписиКнигиПокупок.СчетФактура,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученныеНалоговыйАгент) КАК ВидЦенности,
	|	ТаблицаНДСЗаписиКнигиПокупок.СтавкаНДС,
	|	НЕОПРЕДЕЛЕНО КАК СчетУчетаНДС,
	|	ТаблицаНДСЗаписиКнигиПокупок.ДатаОплаты,
	|	ТаблицаНДСЗаписиКнигиПокупок.ДокументОплаты,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету) КАК Событие,
	|	ТаблицаНДСЗаписиКнигиПокупок.ДатаСобытия,
	|	ТаблицаНДСЗаписиКнигиПокупок.ЗаписьДополнительногоЛиста,
	|	ТаблицаНДСЗаписиКнигиПокупок.КорректируемыйПериод,
	|	ТаблицаНДСЗаписиКнигиПокупок.ДоговорКонтрагента,
	|	ТаблицаНДСЗаписиКнигиПокупок.ИсправленныйСчетФактура,
	|	ТаблицаНДСЗаписиКнигиПокупок.СуммаБезНДС,
	|	ТаблицаНДСЗаписиКнигиПокупок.НДС,
	|	ТаблицаНДСЗаписиКнигиПокупок.НДСУпр,
	|	ТаблицаНДСЗаписиКнигиПокупок.ХозяйственнаяОперация,
	|	ТаблицаНДСЗаписиКнигиПокупок.НомерДокументаОплаты,
	|	ТаблицаНДСЗаписиКнигиПокупок.ДатаДокументаОплаты,
	|	ТаблицаНДСЗаписиКнигиПокупок.НаправлениеДеятельности,
	|	""43"" КАК КодВидаОперации
	|ПОМЕСТИТЬ ВтТаблицаНДСЗаписиКнигиПокупокМеталлолом
	|ИЗ
	|	ВтТаблицаНДСЗаписиКнигиПродаж КАК ТаблицаНДСЗаписиКнигиПокупок
	|";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ВыполнитьЗачетАвансаВыданного(СтрокаАвансаПоСФ, СтрокиАвансаНачислениеНДС, СтрокиЗачетаАванса)
	
	ТаблицаЗаписиКнигиПродаж = РегистрыНакопления.НДСЗаписиКнигиПродаж.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	ТаблицаЗаписиКнигиПродаж.Колонки.Удалить("Активность");
	
	Если СтрокиАвансаНачислениеНДС.Количество() = 0 Тогда
		Возврат ТаблицаЗаписиКнигиПродаж
	КонецЕсли;
	
	ДатаПолучения = СтрокиАвансаНачислениеНДС[0].ДатаПолучения;
	
	АвансМассивСуммаБезНДС = Новый Массив();
	АвансМассивСуммаНДС = Новый Массив();
	АвансМассивСуммаБезНДСУпр = Новый Массив();
	АвансМассивСуммаНДСУпр = Новый Массив();
	
	АвансСуммаБезНДС    = 0;
	АвансСуммаСНДС      = 0;
	АвансСуммаБезНДСУпр = 0;
	АвансСуммаСНДСУпр   = 0;
	
	Для Каждого СтрокаАванса Из СтрокиАвансаНачислениеНДС Цикл
		АвансМассивСуммаБезНДС.Добавить(СтрокаАванса.СуммаБезНДС);
		АвансМассивСуммаНДС.Добавить(СтрокаАванса.НДС);
		АвансМассивСуммаБезНДСУпр.Добавить(СтрокаАванса.СуммаБезНДСУпр);
		АвансМассивСуммаНДСУпр.Добавить(СтрокаАванса.НДСУпр);
		
		Если СтрокаАванса.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя Тогда
			// Сумма НДС во взаиморасчетах не участвует.
			АвансСуммаБезНДС = АвансСуммаБезНДС + СтрокаАванса.СуммаБезНДС - СтрокаАванса.НДС;
			АвансСуммаСНДС = АвансСуммаСНДС + СтрокаАванса.СуммаБезНДС;
			АвансСуммаБезНДСУпр = АвансСуммаБезНДСУпр + СтрокаАванса.СуммаБезНДСУпр - СтрокаАванса.НДСУпр;
			АвансСуммаСНДСУпр   = АвансСуммаСНДСУпр + СтрокаАванса.СуммаБезНДСУпр;
		Иначе
			АвансСуммаБезНДС = АвансСуммаБезНДС + СтрокаАванса.СуммаБезНДС;
			АвансСуммаСНДС = АвансСуммаСНДС + СтрокаАванса.СуммаБезНДС + СтрокаАванса.НДС;
			АвансСуммаБезНДСУпр = АвансСуммаБезНДСУпр + СтрокаАванса.СуммаБезНДСУпр;
			АвансСуммаСНДСУпр   = АвансСуммаСНДСУпр + СтрокаАванса.СуммаБезНДСУпр + СтрокаАванса.НДСУпр;
		КонецЕсли;
	КонецЦикла; 
	
	НезачтеннаяСуммаАванса = СтрокаАвансаПоСФ.Аванс;
	НезачтеннаяСуммаАвансаУпр = СтрокаАвансаПоСФ.АвансУпр;
	
	Для Каждого ПогашенныйАвансПоСФ Из СтрокиЗачетаАванса Цикл
		
		Если АвансСуммаСНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НезачтеннаяСуммаАванса = НезачтеннаяСуммаАванса - ПогашенныйАвансПоСФ.СуммаЗачета;
		НезачтеннаяСуммаАвансаУпр = НезачтеннаяСуммаАвансаУпр - ПогашенныйАвансПоСФ.СуммаЗачетаУпр;
		
		Если ПогашенныйАвансПоСФ.ЕстьДокументЗачетаАванса Тогда
			// Определим по пропорции сумму зачета, которая относится к поступившему авансу с НДС.
			Коэффициенты = Новый Массив;
			Если ПогашенныйАвансПоСФ.СуммаДокументаСНДС + ПогашенныйАвансПоСФ.СуммаДокументаБезНДС = 0 Тогда
				Коэффициенты.Добавить(1);
			Иначе
				Коэффициенты.Добавить(ПогашенныйАвансПоСФ.СуммаДокументаСНДС);
				Коэффициенты.Добавить(ПогашенныйАвансПоСФ.СуммаДокументаБезНДС);
			КонецЕсли;
			РаспределениеСуммыЗачета = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
											ПогашенныйАвансПоСФ.СуммаЗачета,
											Коэффициенты);
			РаспределениеСуммыЗачетаУпр = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
											ПогашенныйАвансПоСФ.СуммаЗачетаУпр,
											Коэффициенты);
			СуммаЗачета = ?(ПогашенныйАвансПоСФ.СуммаЗачета > 0, РаспределениеСуммыЗачета[0], 0);
			СуммаЗачетаУпр = ?(ПогашенныйАвансПоСФ.СуммаЗачетаУпр > 0, РаспределениеСуммыЗачетаУпр[0], 0);
		Иначе
			СуммаЗачета = ПогашенныйАвансПоСФ.СуммаЗачета;
			СуммаЗачетаУпр = ПогашенныйАвансПоСФ.СуммаЗачетаУпр;
		КонецЕсли;
		
		Если ПогашенныйАвансПоСФ.Период >= ДатаПолучения Тогда
			СуммаСНДС = Мин(СуммаЗачета, АвансСуммаСНДС);
			СуммаСНДСУпр = Мин(СуммаЗачетаУпр, АвансСуммаСНДСУпр);
			ДатаЗачетаАванса = ПогашенныйАвансПоСФ.Период;
		Иначе
			СуммаСНДС = 0;
			СуммаСНДСУпр = 0;
			ДатаЗачетаАванса = ДатаПолучения;
		КонецЕсли;
		
		ОстатокСуммыАвансаСНДС = (АвансСуммаСНДС - СуммаСНДС);
		Если ОстатокСуммыАвансаСНДС > НезачтеннаяСуммаАванса Тогда
			// Откорректируем сумму, с которой выполняется восстановление с учетом остатка незачтенного аванса.
			СуммаСНДС = СуммаСНДС + (ОстатокСуммыАвансаСНДС - НезачтеннаяСуммаАванса);
		КонецЕсли;
		ОстатокСуммыАвансаСНДСУпр = (АвансСуммаСНДСУпр - СуммаСНДСУпр);
		Если ОстатокСуммыАвансаСНДСУпр > НезачтеннаяСуммаАвансаУпр Тогда
			// Откорректируем сумму, с которой выполняется восстановление с учетом остатка незачтенного аванса.
			СуммаСНДСУпр = СуммаСНДСУпр + (ОстатокСуммыАвансаСНДСУпр - НезачтеннаяСуммаАвансаУпр);
		КонецЕсли;
		
		Если СуммаСНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаБезНДС = Окр(АвансСуммаБезНДС * СуммаСНДС / АвансСуммаСНДС, 2);
		СуммаНДС = СуммаСНДС - СуммаБезНДС;
		СуммаБезНДСУпр = Окр(АвансСуммаБезНДСУпр * СуммаСНДСУпр / АвансСуммаСНДСУпр, 2);
		СуммаНДСУпр = СуммаСНДСУпр - СуммаБезНДСУпр;
		
		АвансСуммаБезНДС = АвансСуммаБезНДС - СуммаБезНДС;
		АвансСуммаСНДС   = АвансСуммаСНДС - СуммаСНДС;
		АвансСуммаБезНДСУпр = АвансСуммаБезНДСУпр - СуммаБезНДСУпр;
		АвансСуммаСНДСУпр   = АвансСуммаСНДСУпр - СуммаСНДСУпр;

		Если СуммаБезНДС > 0 Тогда
			МассивСуммаБезНДС = ОбщегоНазначенияУТКлиентСервер.РаспределитьПропорционально(СуммаБезНДС, АвансМассивСуммаБезНДС);
		КонецЕсли;
		
		Если СуммаНДС > 0 Тогда
			МассивСуммаНДС = ОбщегоНазначенияУТКлиентСервер.РаспределитьПропорционально(СуммаНДС, АвансМассивСуммаНДС);
		КонецЕсли;
		
		Если СуммаБезНДСУпр > 0 Тогда
			МассивСуммаБезНДСУпр = ОбщегоНазначенияУТКлиентСервер.РаспределитьПропорционально(СуммаБезНДСУпр, АвансМассивСуммаБезНДСУпр);
		КонецЕсли;
		
		Если СуммаНДСУпр > 0 Тогда
			МассивСуммаНДСУпр = ОбщегоНазначенияУТКлиентСервер.РаспределитьПропорционально(СуммаНДСУпр, АвансМассивСуммаНДСУпр);
		КонецЕсли;
		
		Счетчик = -1;
		
		//Зачет аванса - записи книги продаж
		Для Каждого СтрокаАванса Из СтрокиАвансаНачислениеНДС Цикл
			
			Счетчик = Счетчик + 1;
			
			Если  ?(СуммаБезНДС > 0, МассивСуммаБезНДС[Счетчик], 0) = 0
				И ?(СуммаНДСУпр > 0, МассивСуммаНДСУпр[Счетчик], 0) = 0
				И ?(СуммаНДС > 0, МассивСуммаНДС[Счетчик], 0) = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			СтрокаРезультата = ТаблицаЗаписиКнигиПродаж.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРезультата, ПогашенныйАвансПоСФ);
			
			СтрокаРезультата.НаправлениеДеятельности = СтрокаАванса.НаправлениеДеятельности;
			
			СтрокаРезультата.Период      = ДатаЗачетаАванса;
			СтрокаРезультата.СчетФактура = ПогашенныйАвансПоСФ.ДокументОплаты;
			СтрокаРезультата.Покупатель  = СтрокаАванса.Поставщик;
			СтрокаРезультата.СтавкаНДС   = СтрокаАванса.СтавкаНДС;
			СтрокаРезультата.ДатаОплаты  = СтрокаАванса.ДатаОплаты;
			СтрокаРезультата.СуммаБезНДС = ?(СуммаБезНДС > 0, МассивСуммаБезНДС[Счетчик],0);
			СтрокаРезультата.НДС         = ?(СуммаНДС > 0, МассивСуммаНДС[Счетчик],0);
			
			Если РасчетСебестоимостиПовтИсп.УправленческийУчетОрганизаций(СтрокаРезультата.Период) Тогда
				СтрокаРезультата_СуммаБезНДСУпр = ?(СуммаБезНДСУпр > 0 И МассивСуммаБезНДСУпр <> Неопределено, МассивСуммаБезНДСУпр[Счетчик],0);
				СтрокаРезультата.НДСУпр = ?(СуммаНДСУпр > 0 И МассивСуммаНДСУпр <> Неопределено, МассивСуммаНДСУпр[Счетчик],0);
			Иначе
				СтрокаРезультата_СуммаБезНДСУпр = 0;
				СтрокаРезультата.НДСУпр = 0;
			КонецЕсли;
			
			// Уменьшим суммы в исходных строках аванса и зачета аванса на зачтенную сумму.
			
			ПогашенныйАвансПоСФ.СуммаЗачета = ПогашенныйАвансПоСФ.СуммаЗачета - (СтрокаРезультата.СуммаБезНДС + СтрокаРезультата.НДС);
			ПогашенныйАвансПоСФ.СуммаЗачетаУпр = ПогашенныйАвансПоСФ.СуммаЗачетаУпр - (СтрокаРезультата_СуммаБезНДСУпр + СтрокаРезультата.НДСУпр);
			
			СтрокаАвансаПоСФ.Аванс = СтрокаАвансаПоСФ.Аванс - (СтрокаРезультата.СуммаБезНДС + СтрокаРезультата.НДС);
			СтрокаАвансаПоСФ.АвансУпр = СтрокаАвансаПоСФ.АвансУпр - (СтрокаРезультата_СуммаБезНДСУпр + СтрокаРезультата.НДСУпр);
			
			Если СтрокаАванса.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя Тогда
				СтрокаРезультата.СуммаБезНДС = СтрокаРезультата.СуммаБезНДС + СтрокаРезультата.НДС;
				СтрокаРезультата_СуммаБезНДСУпр = СтрокаРезультата_СуммаБезНДСУпр + СтрокаРезультата.НДСУпр;
			КонецЕсли;
			СтрокаАванса.СуммаБезНДС = СтрокаАванса.СуммаБезНДС - СтрокаРезультата.СуммаБезНДС;
			СтрокаАванса.НДС = СтрокаАванса.НДС - СтрокаРезультата.НДС;
			СтрокаАванса.СуммаБезНДСУпр = СтрокаАванса.СуммаБезНДСУпр - СтрокаРезультата_СуммаБезНДСУпр;
			СтрокаАванса.НДСУпр = СтрокаАванса.НДСУпр - СтрокаРезультата.НДСУпр;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаЗаписиКнигиПродаж;
	
КонецФункции

#КонецОбласти

#Область ФормированиеДвиженияНДСЗаписиКнигиПокупок

Процедура СформироватьНДСЗаписиКнигиПокупок(ПараметрыРасчета)
	
	ПолучитьТекущиеРегистраторыНДСЗаписиКнигиПокупок(ПараметрыРасчета);
	
	ПолучитьДокументыОплатыГрафа7(ПараметрыРасчета);
	
	ИменаТаблицНДСЗаписиКнигиПокупок = Новый Массив;
	ИменаТаблицНДСЗаписиКнигиПокупок.Добавить(РассчитатьНДСЗаписиКнигиПокупокПоНДСПредъявленный(ПараметрыРасчета));
	ИменаТаблицНДСЗаписиКнигиПокупок.Добавить(РассчитатьНДСЗаписиКнигиПокупокСторноПоИСФ(ПараметрыРасчета));
	Если ПараметрыРасчета.РасчетАвансовПолученных Тогда
		ИменаТаблицНДСЗаписиКнигиПокупок.Добавить(РассчитатьНДСЗаписиКнигиПокупокПоАвансуПолученному(ПараметрыРасчета));
	КонецЕсли;
	Если ПараметрыРасчета.РасчетАвансовВыданных Тогда
		ИменаТаблицНДСЗаписиКнигиПокупок.Добавить(РассчитатьНДСЗаписиКнигиПокупокПоАвансуВыданному(ПараметрыРасчета));
	КонецЕсли;
	ИменаТаблицНДСЗаписиКнигиПокупок.Добавить(РассчитатьНДСЗаписиКнигиПокупокСохранение(ПараметрыРасчета, ИменаТаблицНДСЗаписиКнигиПокупок));
	
	ЗаписатьНДСЗаписиКнигиПокупок(ПараметрыРасчета, ИменаТаблицНДСЗаписиКнигиПокупок);
	ОчиститьНДСЗаписиКнигиПокупок(ПараметрыРасчета, ИменаТаблицНДСЗаписиКнигиПокупок);
	
КонецПроцедуры

Процедура ПолучитьТекущиеРегистраторыНДСЗаписиКнигиПокупок(ПараметрыРасчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСЗаписиКнигиПокупок.Регистратор КАК Регистратор,
	|	НДСЗаписиКнигиПокупок.Организация КАК Организация,
	|	НДСЗаписиКнигиПокупок.Период КАК Период,
	|	НДСЗаписиКнигиПокупок.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ТекущиеРегистраторыНДСЗаписиКнигиПокупок
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задания КАК Задания
	|		ПО НДСЗаписиКнигиПокупок.Организация = Задания.Организация
	|			И НДСЗаписиКнигиПокупок.СчетФактура = Задания.СчетФактура
	|ГДЕ
	|	НДСЗаписиКнигиПокупок.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НДСЗаписиКнигиПокупок.РегламентнаяОперация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСЗаписиКнигиПокупок.Регистратор,
	|	НДСЗаписиКнигиПокупок.Организация,
	|	НДСЗаписиКнигиПокупок.Период,
	|	НДСЗаписиКнигиПокупок.ХозяйственнаяОперация
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задания КАК Задания
	|		ПО НДСЗаписиКнигиПокупок.Регистратор = Задания.СчетФактура
	|ГДЕ
	|	НДСЗаписиКнигиПокупок.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ТИПЗНАЧЕНИЯ(НДСЗаписиКнигиПокупок.Регистратор) В (ТИП(Документ.СчетФактураВыданныйАванс), ТИП(Документ.СчетФактураПолученныйАванс))
	|	И НДСЗаписиКнигиПокупок.РегламентнаяОперация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор";
	
	Запрос.УстановитьПараметр("НачалоПериода",     ПараметрыРасчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  ПараметрыРасчета.КонецПериода);
	Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыРасчета.МассивОрганизаций);
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПолучитьДокументыОплатыЭлектронныхУслуг(ПараметрыРасчета)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСПредъявленный.Регистратор КАК СчетФактура,
	|	НДСПредъявленный.Организация КАК Организация
	|ПОМЕСТИТЬ ЗаданияЭлектронныхУслуг
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Задания КАК Задания
	|	ПО
	|		Задания.СчетФактура = НДСПредъявленный.Регистратор
	|
	|ГДЕ
	|	НДСПредъявленный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И НДСПредъявленный.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ЭлектронныеУслуги)
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ЗаданияЭлектронныхУслуг.Организация КАК Организация,
	|	ЗаданияЭлектронныхУслуг.СчетФактура КАК СчетФактура,
	|	Расчеты.Сумма КАК Сумма
	|ПОМЕСТИТЬ ПриобретенияЭлектронныхУслуг
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ЗаданияЭлектронныхУслуг КАК ЗаданияЭлектронныхУслуг
	|	ПО
	|		ЗаданияЭлектронныхУслуг.СчетФактура = Расчеты.Регистратор
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	СчетФактура
	|";
	
	Запрос.Выполнить();
	
	ПараметрыПоиска = ВзаиморасчетыСервер.ИнициализироватьПараметрыПоискаОснованийИДокументовОплаты();
	ПараметрыПоиска.ПараметрыОтбораПоТаблицеДокументов.ИмяПоля          = "СчетФактура";
	ПараметрыПоиска.ПараметрыОтбораПоТаблицеДокументов.ИмяТаблицыОтбора = "ПриобретенияЭлектронныхУслуг";
	ПараметрыПоиска.Организации                                         = ПараметрыРасчета.МассивОрганизаций;
	ПараметрыПоиска.НаДату                                              = ПараметрыРасчета.КонецПериода;
	
	ВзаиморасчетыСервер.ПодготовитьВТ_РасчетыСПоставщиками_ОснованияИДокументыОплаты(
		ПараметрыРасчета.МенеджерВременныхТаблиц,
		ПараметрыПоиска);
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриобретенияЭлектронныхУслуг.Организация КАК Организация,
	|	ПриобретенияЭлектронныхУслуг.СчетФактура КАК СчетФактура,
	|	Оплаты.ДокументОплаты КАК ДокументОплаты,
	|	ДанныеПервичныхДокументов.Дата КАК ДатаДокументаОплаты,
	|	ДанныеПервичныхДокументов.Номер КАК НомерДокументаОплаты,
	|	СУММА(Оплаты.СуммаОплаты) КАК СуммаОплаты,
	|	МАКСИМУМ(ПриобретенияЭлектронныхУслуг.Сумма) КАК СуммаПриобретения
	|ПОМЕСТИТЬ ДокументыОплатыЭлектронныхУслуг
	|ИЗ
	|	РасчетыСПоставщиками_ОснованияИДокументыОплаты КАК Оплаты
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ПриобретенияЭлектронныхУслуг КАК ПриобретенияЭлектронныхУслуг
	|	ПО 
	|		Оплаты.АналитикаУчетаПоПартнерам = ПриобретенияЭлектронныхУслуг.АналитикаУчетаПоПартнерам
	|		И Оплаты.ОснованиеОплаты = ПриобретенияЭлектронныхУслуг.СчетФактура
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|	ПО
	|		Оплаты.АналитикаУчетаПоПартнерам.Организация = ДанныеПервичныхДокументов.Организация
	|		И Оплаты.ДокументОплаты = ДанныеПервичныхДокументов.Документ
	|	
	|ГДЕ
	|	ПриобретенияЭлектронныхУслуг.СчетФактура <> Оплаты.ДокументОплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриобретенияЭлектронныхУслуг.Организация,
	|	ПриобретенияЭлектронныхУслуг.СчетФактура,
	|	Оплаты.ДокументОплаты,
	|	ДанныеПервичныхДокументов.Дата,
	|	ДанныеПервичныхДокументов.Номер
	|
	|;
	|
	|УНИЧТОЖИТЬ РасчетыСПоставщиками_ОснованияИДокументыОплаты
	|";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПолучитьДокументыОплатыГрафа7(ПараметрыРасчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Задания.Организация КАК Организация,
	|	Задания.СчетФактура КАК СчетФактура,
	|	ПодтверждениеОплатыНДСВБюджет.НомерДокументаПеречисленияНалога КАК НомерДокументаОплаты,
	|	ПодтверждениеОплатыНДСВБюджет.ДатаДокументаПеречисленияНалога КАК ДатаДокументаОплаты
	|ПОМЕСТИТЬ ДокументыОплатыГрафа7
	|ИЗ
	|	Задания КАК Задания
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ПодтверждениеОплатыНДСВБюджет КАК ПодтверждениеОплатыНДСВБюджет
	|	ПО
	|		Задания.СчетФактура = ПодтверждениеОплатыНДСВБюджет.СчетФактура
	|		И ПодтверждениеОплатыНДСВБюджет.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОплатыНДСВБюджет.Оплачено)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыОплатыЭлектронныхУслуг.Организация КАК Организация,
	|	ДокументыОплатыЭлектронныхУслуг.СчетФактура КАК СчетФактура,
	|	ДокументыОплатыЭлектронныхУслуг.НомерДокументаОплаты КАК НомерДокументаОплаты,
	|	ДокументыОплатыЭлектронныхУслуг.ДатаДокументаОплаты КАК ДатаДокументаОплаты
	|ИЗ
	|	ДокументыОплатыЭлектронныхУслуг КАК ДокументыОплатыЭлектронныхУслуг
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СчетФактура";
	
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.Выполнить();

КонецПроцедуры

Функция РассчитатьНДСЗаписиКнигиПокупокПоНДСПредъявленный(ПараметрыРасчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НДСПредъявленный.Организация,
	|	НДСПредъявленный.СчетФактура,
	|	НДСПредъявленный.Поставщик,
	|	НДСПредъявленный.ВидЦенности,
	|	НДСПредъявленный.СтавкаНДС,
	|	НДСПредъявленный.ИсправленныйСчетФактура,
	|	НДСПредъявленный.НаправлениеДеятельности,
	|	СУММА(НДСПредъявленный.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(НДСПредъявленный.НДС) КАК НДС,
	|	СУММА(НДСПредъявленный.НДСУпр) КАК НДСУпр
	|ПОМЕСТИТЬ ВосстановленияНДС
	|ИЗ (ВЫБРАТЬ
	|		НДСПредъявленный.Организация,
	|		НДСПредъявленный.СчетФактура,
	|		НДСПредъявленный.Поставщик,
	|		НДСПредъявленный.ВидЦенности,
	|		НДСПредъявленный.СтавкаНДС КАК СтавкаНДС,
	|		НДСПредъявленный.ИсправленныйСчетФактура,
	|		НДСПредъявленный.НаправлениеДеятельности,
	|		НДСПредъявленный.СуммаБезНДС КАК СуммаБезНДС,
	|		НДСПредъявленный.НДС КАК НДС,
	|		НДСПредъявленный.НДСУпр КАК НДСУпр
	|	ИЗ 
	|		РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Задания КАК Задания
	|		ПО
	|			НДСПредъявленный.Организация = Задания.Организация
	|			И НДСПредъявленный.СчетФактура = Задания.СчетФактура
	|	ГДЕ
	|		НДСПредъявленный.Период < &НачалоПериода
	|		И НДСПредъявленный.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.ВосстановлениеНДСПодВидДеятельности)
	|		И НДСПредъявленный.Активность
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		НДСПредъявленный.Организация,
	|		НДСПредъявленный.СчетФактура,
	|		НДСПредъявленный.Поставщик,
	|		НДСПредъявленный.ВидЦенности,
	|		НДСПредъявленный.СтавкаНДС КАК СтавкаНДС,
	|		НДСПредъявленный.ИсправленныйСчетФактура,
	|		НДСПредъявленный.НаправлениеДеятельности,
	|		НДСПредъявленный.СуммаБезНДС,
	|		НДСПредъявленный.НДС,
	|		НДСПредъявленный.НДСУпр
	|	ИЗ
	|		НДСПредъявленныйВосстановлениеПодВидДеятельности КАК НДСПредъявленный
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НДСЗаписиКнигиПокупок.Организация,
	|		НДСЗаписиКнигиПокупок.СчетФактура,
	|		НДСЗаписиКнигиПокупок.Поставщик,
	|		НДСЗаписиКнигиПокупок.ВидЦенности,
	|		НДСЗаписиКнигиПокупок.СтавкаНДС,
	|		НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура,
	|		НДСЗаписиКнигиПокупок.НаправлениеДеятельности,
	|		-НДСЗаписиКнигиПокупок.СуммаБезНДС КАК СуммаБезНДС,
	|		-НДСЗаписиКнигиПокупок.НДС КАК НДС,
	|		-НДСЗаписиКнигиПокупок.НДСУпр КАК НДСУпр
	|	ИЗ 
	|		РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Задания КАК Задания
	|		ПО
	|			НДСЗаписиКнигиПокупок.Организация = Задания.Организация
	|			И НДСЗаписиКнигиПокупок.СчетФактура = Задания.СчетФактура
	|	ГДЕ
	|		НДСЗаписиКнигиПокупок.Период < &НачалоПериода
	|		И НДСЗаписиКнигиПокупок.КодВидаОперации = ""25""
	|	) КАК НДСПредъявленный
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПредъявленный.Организация,
	|	НДСПредъявленный.СчетФактура,
	|	НДСПредъявленный.Поставщик,
	|	НДСПредъявленный.ВидЦенности,
	|	НДСПредъявленный.СтавкаНДС,
	|	НДСПредъявленный.ИсправленныйСчетФактура,
	|	НДСПредъявленный.НаправлениеДеятельности
	|
	|ИМЕЮЩИЕ
	|	СУММА(НДСПредъявленный.НДС) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НДСПредъявленный.Организация,
	|	НДСПредъявленный.СчетФактура
	|;
	|
	// Записи по событию НДСПринятКВычету
	|///////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСПредъявленный.Приоритет                                      КАК Приоритет,
	|	НДСПредъявленный.Период                                         КАК Период,
	|	НДСПредъявленный.Регистратор                                    КАК Регистратор,
	|	НДСПредъявленный.Организация                                    КАК Организация,
	|	НДСПредъявленный.Поставщик                                      КАК Поставщик,
	|	НДСПредъявленный.СчетФактура                                    КАК СчетФактура,
	|	НДСПредъявленный.ВидЦенности                                    КАК ВидЦенности,
	|	НДСПредъявленный.СтавкаНДС                                      КАК СтавкаНДС,
	|	ДАТАВРЕМЯ(1,1,1)                                                КАК ДатаОплаты,
	|	ЕСТЬNULL(СчетаФактурыДокументы.ДокументОплаты, НЕОПРЕДЕЛЕНО)    КАК ДокументОплаты,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету) КАК Событие,
	|	КОНЕЦПЕРИОДА(НДСПредъявленный.Период, КВАРТАЛ)                  КАК ДатаСобытия,
	|	ЕСТЬNULL(ИСФ.ЗаписьДополнительногоЛиста, ЛОЖЬ)                  КАК ЗаписьДополнительногоЛиста,
	|	ЕСТЬNULL(ИСФ.КорректируемыйПериод, ДАТАВРЕМЯ(1,1,1))            КАК КорректируемыйПериод,
	|	ЕСТЬNULL(СчетаФактурыДокументы.ДоговорКонтрагента, НЕОПРЕДЕЛЕНО) КАК ДоговорКонтрагента,
	|	НДСПредъявленный.ИсправленныйСчетФактура                        КАК ИсправленныйСчетФактура,
	|	ВЫБОР
	|		КОГДА НДСПредъявленный.СуммаБезНДС = 0 И НДСПредъявленный.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|			ТОГДА НДСПредъявленный.НДС * 100 / 20
	|		КОГДА НДСПредъявленный.СуммаБезНДС = 0 И НДСПредъявленный.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
	|			ТОГДА НДСПредъявленный.НДС * 100 / 20
	|		КОГДА НДСПредъявленный.СуммаБезНДС = 0 И НДСПредъявленный.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|			ТОГДА НДСПредъявленный.НДС * 100 / 18
	|		КОГДА НДСПредъявленный.СуммаБезНДС = 0 И НДСПредъявленный.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|			ТОГДА НДСПредъявленный.НДС * 100 / 18
	|		КОГДА НДСПредъявленный.СуммаБезНДС = 0 И НДСПредъявленный.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|			ТОГДА НДСПредъявленный.НДС * 100 / 10
	|		ИНАЧЕ НДСПредъявленный.СуммаБезНДС
	|	КОНЕЦ                                                           КАК СуммаБезНДС,
	|	НДСПредъявленный.НДС                                            КАК НДС,
	|	НДСПредъявленный.НДСУпр                                         КАК НДСУпр,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПринятиеНДСкВычету) КАК ХозяйственнаяОперация,
	|	""""                                                            КАК НомерДокументаОплаты,
	|	""""                                                            КАК ДатаДокументаОплаты,
	|	ВЫБОР 
	|		КОГДА НДСПредъявленный.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныеПлатежи)
	|			ТОГДА ""20""
	|		КОГДА НДСПредъявленный.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныйСоюз)
	|			ТОГДА ""19""
	|		ИНАЧЕ """"
	|	КОНЕЦ                                                           КАК КодВидаОперации,
	|	НДСПредъявленный.РегламентнаяОперация                           КАК РегламентнаяОперация,
	|	НДСПредъявленный.РеализацияЭкспорт                              КАК ДокументОтгрузки,
	|	НДСПредъявленный.ВидДеятельностиНДС                             КАК ВидДеятельностиНДС,
	|	НДСПредъявленный.КорНаправлениеДеятельности                     КАК НаправлениеДеятельности
	|ПОМЕСТИТЬ НДСЗаписиКнигиПокупокПоНДСПредъявленный
	|ИЗ
	|	НДСПредъявленныйПринятиеКВычету КАК НДСПредъявленный
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактурыДокументы КАК СчетаФактурыДокументы
	|	ПО
	|		НДСПредъявленный.Организация = СчетаФактурыДокументы.Организация
	|		И НДСПредъявленный.СчетФактура = СчетаФактурыДокументы.СчетФактура
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ИсправительныеСчетаФактуры КАК ИСФ
	|	ПО
	|		НДСПредъявленный.Организация = ИСФ.Организация
	|		И НДСПредъявленный.СчетФактура = ИСФ.СчетФактура
	|		И НДСПредъявленный.ИсправленныйСчетФактура = ИСФ.ИсправительныйСчетФактура
	|	
	|ГДЕ
	|	НДСПредъявленный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И НДСПредъявленный.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.НДСПринятКВычету)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Записи по событиям ПодтвержденаСтавка0 и НеПодтвержденаСтавка0
	|ВЫБРАТЬ
	|	НДСПредъявленный.Приоритет                                      КАК Приоритет,
	|	НДСПредъявленный.Период                                         КАК Период,
	|	НДСПредъявленный.Регистратор                                    КАК Регистратор,
	|	НДСПредъявленный.Организация                                    КАК Организация,
	|	НДСПредъявленный.Поставщик                                      КАК Поставщик,
	|	НДСПредъявленный.СчетФактура                                    КАК СчетФактура,
	|	НДСПредъявленный.ВидЦенности                                    КАК ВидЦенности,
	|	НДСПредъявленный.СтавкаНДС                                      КАК СтавкаНДС,
	|	ДАТАВРЕМЯ(1,1,1)                                                КАК ДатаОплаты,
	|	ЕСТЬNULL(СчетаФактурыДокументы.ДокументОплаты, НЕОПРЕДЕЛЕНО)    КАК ДокументОплаты,
	|	ВЫБОР 
	|		КОГДА НДСПредъявленный.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.НДСПоДЦПринятКВычету)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету)
	|		КОГДА НДСПредъявленный.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.ПодтвержденаСтавка0)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету0)
	|		КОГДА НДСПредъявленный.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.НеПодтвержденаСтавка0)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.НеПодтвержденаСтавка0)
	|	КОНЕЦ                                                           КАК Событие,
	|	КОНЕЦПЕРИОДА(НДСПредъявленный.Период, КВАРТАЛ)                  КАК ДатаСобытия,
	|	ВЫБОР 
	|		КОГДА НДСПредъявленный.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.НеПодтвержденаСтавка0)
	|			И КОНЕЦПЕРИОДА(НДСПредъявленный.Период, КВАРТАЛ) > ЕСТЬNULL(КОНЕЦПЕРИОДА(ДанныеПервичныхДокументов.ДатаРегистратора, КВАРТАЛ), ДАТАВРЕМЯ(2100,1,1))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ
	|			ЕСТЬNULL(ИСФ.ЗаписьДополнительногоЛиста, ЛОЖЬ)
	|	КОНЕЦ                                                           КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР 
	|		КОГДА НДСПредъявленный.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.НеПодтвержденаСтавка0)
	|			И КОНЕЦПЕРИОДА(НДСПредъявленный.Период, КВАРТАЛ) > ЕСТЬNULL(КОНЕЦПЕРИОДА(ДанныеПервичныхДокументов.ДатаРегистратора, КВАРТАЛ), ДАТАВРЕМЯ(2100,1,1))
	|			ТОГДА ДанныеПервичныхДокументов.ДатаРегистратора
	|		ИНАЧЕ
	|			ЕСТЬNULL(ИСФ.КорректируемыйПериод, ДАТАВРЕМЯ(1,1,1))
	|	КОНЕЦ                                                            КАК КорректируемыйПериод,
	|	ЕСТЬNULL(СчетаФактурыДокументы.ДоговорКонтрагента, НЕОПРЕДЕЛЕНО) КАК ДоговорКонтрагента,
	|	НДСПредъявленный.ИсправленныйСчетФактура                         КАК ИсправленныйСчетФактура,
	|	НДСПредъявленный.СуммаБезНДС - ЕСТЬNULL(ВосстановленияНДС.СуммаБезНДС, 0) КАК СуммаБезНДС,
	|	НДСПредъявленный.НДС - ЕСТЬNULL(ВосстановленияНДС.НДС, 0)       КАК НДС,
	|	НДСПредъявленный.НДСУпр - ЕСТЬNULL(ВосстановленияНДС.НДСУпр, 0) КАК НДСУпр,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПринятиеНДСкВычету) КАК ХозяйственнаяОперация,
	|	""""                                                            КАК НомерДокументаОплаты,
	|	""""                                                            КАК ДатаДокументаОплаты,
	|	ВЫБОР 
	|		КОГДА НДСПредъявленный.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныеПлатежи)
	|			ТОГДА ""20""
	|		КОГДА НДСПредъявленный.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныйСоюз)
	|			ТОГДА ""19""
	|		ИНАЧЕ """"
	|	КОНЕЦ                                                           КАК КодВидаОперации,
	|	НДСПредъявленный.РегламентнаяОперация                           КАК РегламентнаяОперация,
	|	НДСПредъявленный.РеализацияЭкспорт                              КАК ДокументОтгрузки,
	|	НДСПредъявленный.ВидДеятельностиНДС                             КАК ВидДеятельностиНДС,
	|	НДСПредъявленный.КорНаправлениеДеятельности                     КАК НаправлениеДеятельности
	|ИЗ
	|	НДСПредъявленныйПринятиеКВычету КАК НДСПредъявленный
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактурыДокументы КАК СчетаФактурыДокументы
	|	ПО
	|		НДСПредъявленный.Организация = СчетаФактурыДокументы.Организация
	|		И НДСПредъявленный.СчетФактура = СчетаФактурыДокументы.СчетФактура
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВосстановленияНДС КАК ВосстановленияНДС
	|	ПО
	|		НДСПредъявленный.Организация = ВосстановленияНДС.Организация
	|		И НДСПредъявленный.СчетФактура = ВосстановленияНДС.СчетФактура
	|		И НДСПредъявленный.Поставщик = ВосстановленияНДС.Поставщик
	|		И НДСПредъявленный.ВидЦенности = ВосстановленияНДС.ВидЦенности
	|		И НДСПредъявленный.СтавкаНДС = ВосстановленияНДС.СтавкаНДС
	|		И НДСПредъявленный.ИсправленныйСчетФактура = ВосстановленияНДС.ИсправленныйСчетФактура
	|		И НДСПредъявленный.НаправлениеДеятельности = ВосстановленияНДС.НаправлениеДеятельности
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ИсправительныеСчетаФактуры КАК ИСФ
	|	ПО
	|		НДСПредъявленный.Организация = ИСФ.Организация
	|		И НДСПредъявленный.ИсправленныйСчетФактура = ИСФ.ИсправительныйСчетФактура
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|	ПО 
	|		ДанныеПервичныхДокументов.Организация = НДСПредъявленный.Организация
	|		И ДанныеПервичныхДокументов.Документ = НДСПредъявленный.РеализацияЭкспорт
	|ГДЕ
	|	НДСПредъявленный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И НДСПредъявленный.Событие В (ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.ПодтвержденаСтавка0),
	|				      ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.НеПодтвержденаСтавка0),
	|				      ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.НДСПоДЦПринятКВычету))
	|	И (НДСПредъявленный.НДС - ЕСТЬNULL(ВосстановленияНДС.НДС, 0)) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСПредъявленный.Приоритет                                      КАК Приоритет,
	|	НДСПредъявленный.Период                                         КАК Период,
	|	НДСПредъявленный.Регистратор                                    КАК Регистратор,
	|	НДСПредъявленный.Организация                                    КАК Организация,
	|	НДСПредъявленный.Поставщик                                      КАК Поставщик,
	|	НДСПредъявленный.СчетФактура                                    КАК СчетФактура,
	|	НДСПредъявленный.ВидЦенности                                    КАК ВидЦенности,
	|	НДСПредъявленный.СтавкаНДС                                      КАК СтавкаНДС,
	|	ДАТАВРЕМЯ(1,1,1)                                                КАК ДатаОплаты,
	|	ЕСТЬNULL(СчетаФактурыДокументы.ДокументОплаты, НЕОПРЕДЕЛЕНО)    КАК ДокументОплаты,
	|	ВЫБОР 
	|		КОГДА НДСПредъявленный.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.НДСПоДЦПринятКВычету)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету)
	|		КОГДА НДСПредъявленный.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.ПодтвержденаСтавка0)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету0)
	|	КОНЕЦ                                                           КАК Событие,
	|	КОНЕЦПЕРИОДА(НДСПредъявленный.Период, КВАРТАЛ)                  КАК ДатаСобытия,
	|	ЕСТЬNULL(ИСФ.ЗаписьДополнительногоЛиста, ЛОЖЬ)                  КАК ЗаписьДополнительногоЛиста,
	|	ЕСТЬNULL(ИСФ.КорректируемыйПериод, ДАТАВРЕМЯ(1,1,1))            КАК КорректируемыйПериод,
	|	СчетаФактурыДокументы.ДоговорКонтрагента                         КАК ДоговорКонтрагента,
	|	ЕСТЬNULL(НДСПредъявленный.ИсправленныйСчетФактура, НЕОПРЕДЕЛЕНО) КАК ИсправленныйСчетФактура,
	|	ВЫБОР 
	|		КОГДА НДСПредъявленный.СуммаБезНДС < ВосстановленияНДС.СуммаБезНДС
	|			ТОГДА НДСПредъявленный.СуммаБезНДС 
	|		ИНАЧЕ
	|			ВосстановленияНДС.СуммаБезНДС
	|	КОНЕЦ                                                           КАК СуммаБезНДС,
	|	ВЫБОР 
	|		КОГДА НДСПредъявленный.НДС < ВосстановленияНДС.НДС
	|			ТОГДА НДСПредъявленный.НДС 
	|		ИНАЧЕ
	|			ВосстановленияНДС.НДС
	|	КОНЕЦ                                                           КАК НДС,
	|	ВЫБОР 
	|		КОГДА НДСПредъявленный.НДСУпр < ВосстановленияНДС.НДСУпр
	|			ТОГДА НДСПредъявленный.НДСУпр 
	|		ИНАЧЕ
	|			ВосстановленияНДС.НДСУпр
	|	КОНЕЦ                                                           КАК НДСУпр,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПринятиеНДСкВычету) КАК ХозяйственнаяОперация,
	|	""""                                                            КАК НомерДокументаОплаты,
	|	""""                                                            КАК ДатаДокументаОплаты,
	|	""25""                                                          КАК КодВидаОперации,
	|	НДСПредъявленный.РегламентнаяОперация                           КАК РегламентнаяОперация,
	|	НДСПредъявленный.РеализацияЭкспорт                              КАК ДокументОтгрузки,
	|	НДСПредъявленный.ВидДеятельностиНДС                             КАК ВидДеятельностиНДС,
	|	НДСПредъявленный.КорНаправлениеДеятельности                     КАК НаправлениеДеятельности
	|ИЗ
	|	НДСПредъявленныйПринятиеКВычету КАК НДСПредъявленный
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактурыДокументы КАК СчетаФактурыДокументы
	|	ПО
	|		НДСПредъявленный.Организация = СчетаФактурыДокументы.Организация
	|		И НДСПредъявленный.СчетФактура = СчетаФактурыДокументы.СчетФактура
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВосстановленияНДС КАК ВосстановленияНДС
	|	ПО
	|		НДСПредъявленный.Организация = ВосстановленияНДС.Организация
	|		И НДСПредъявленный.СчетФактура = ВосстановленияНДС.СчетФактура
	|		И НДСПредъявленный.Поставщик = ВосстановленияНДС.Поставщик
	|		И НДСПредъявленный.ВидЦенности = ВосстановленияНДС.ВидЦенности
	|		И НДСПредъявленный.СтавкаНДС = ВосстановленияНДС.СтавкаНДС
	|		И НДСПредъявленный.ИсправленныйСчетФактура = ВосстановленияНДС.ИсправленныйСчетФактура
	|		И НДСПредъявленный.НаправлениеДеятельности = ВосстановленияНДС.НаправлениеДеятельности
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ИсправительныеСчетаФактуры КАК ИСФ
	|	ПО
	|		НДСПредъявленный.Организация = ИСФ.Организация
	|		И НДСПредъявленный.ИсправленныйСчетФактура = ИСФ.ИсправительныйСчетФактура
	|	
	|ГДЕ
	|	НДСПредъявленный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И НДСПредъявленный.Событие В (ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.ПодтвержденаСтавка0),
	|				      ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.НеПодтвержденаСтавка0),
	|				      ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.НДСПоДЦПринятКВычету))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Регистрация документов оплаты
	|ВЫБРАТЬ
	|	НДСПредъявленный.Приоритет                                      КАК Приоритет,
	|	НДСПредъявленный.Период                                         КАК Период,
	|	НДСПредъявленный.Регистратор                                    КАК Регистратор,
	|	НДСПредъявленный.Организация                                    КАК Организация,
	|	НДСПредъявленный.Поставщик                                      КАК Поставщик,
	|	НДСПредъявленный.СчетФактура                                    КАК СчетФактура,
	|	НДСПредъявленный.ВидЦенности                                    КАК ВидЦенности,
	|	НДСПредъявленный.СтавкаНДС                                      КАК СтавкаНДС,
	|	ДАТАВРЕМЯ(1,1,1)                                                КАК ДатаОплаты,
	|	ЕСТЬNULL(СчетаФактурыДокументы.ДокументОплаты, НЕОПРЕДЕЛЕНО)    КАК ДокументОплаты,
	|	ВЫБОР 
	|		КОГДА НДСПредъявленный.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.НДСПринятКВычету)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету)
	|		КОГДА НДСПредъявленный.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.НДСПоДЦПринятКВычету)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету)
	|		КОГДА НДСПредъявленный.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.ПодтвержденаСтавка0)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету0)
	|		КОГДА НДСПредъявленный.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.НеПодтвержденаСтавка0)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.НеПодтвержденаСтавка0)
	|	КОНЕЦ                                                          КАК Событие,
	|	НДСПредъявленный.Период                                        КАК ДатаСобытия,
	|	ЕСТЬNULL(ИСФ.ЗаписьДополнительногоЛиста, ЛОЖЬ)                 КАК ЗаписьДополнительногоЛиста,
	|	ЕСТЬNULL(ИСФ.КорректируемыйПериод, ДАТАВРЕМЯ(1,1,1))           КАК КорректируемыйПериод,
	|	ЕСТЬNULL(СчетаФактурыДокументы.ДоговорКонтрагента, НЕОПРЕДЕЛЕНО) КАК ДоговорКонтрагента,
	|	НДСПредъявленный.ИсправленныйСчетФактура                       КАК ИсправленныйСчетФактура,
	|	0                                                              КАК СуммаБезНДС,
	|	0                                                              КАК НДС,
	|	0                                                              КАК НДСУпр,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПринятиеНДСкВычету) КАК ХозяйственнаяОперация,
	|	ДокументыОплатыГрафа7.НомерДокументаОплаты                      КАК НомерДокументаОплаты,
	|	ДокументыОплатыГрафа7.ДатаДокументаОплаты                       КАК ДатаДокументаОплаты,
	|	ВЫБОР
	|		КОГДА НДСПредъявленный.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныеПлатежи)
	|			ТОГДА ""20""
	|		КОГДА НДСПредъявленный.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныйСоюз)
	|			ТОГДА ""19""
	|		КОГДА НДСПредъявленный.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентАренда)
	|			ТОГДА ""06""
	|		КОГДА НДСПредъявленный.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентРеализацияИмущества)
	|			ТОГДА ""06""
	|		КОГДА НДСПредъявленный.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентИностранцы)
	|			ТОГДА ""06""
	|		КОГДА НДСПредъявленный.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентЭлектронныеУслуги)
	|			ТОГДА ""06""
	|		КОГДА НДСПредъявленный.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
	|			ТОГДА ""06""
	|		ИНАЧЕ """"
	|	КОНЕЦ                                                           КАК КодВидаОперации,
	|	НДСПредъявленный.РегламентнаяОперация                           КАК РегламентнаяОперация,
	|	НДСПредъявленный.РеализацияЭкспорт                              КАК ДокументОтгрузки,
	|	НДСПредъявленный.ВидДеятельностиНДС                             КАК ВидДеятельностиНДС,
	|	НДСПредъявленный.КорНаправлениеДеятельности                     КАК НаправлениеДеятельности
	|ИЗ
	|	НДСПредъявленныйПринятиеКВычету КАК НДСПредъявленный
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактурыДокументы КАК СчетаФактурыДокументы
	|	ПО
	|		НДСПредъявленный.Организация = СчетаФактурыДокументы.Организация
	|		И НДСПредъявленный.СчетФактура = СчетаФактурыДокументы.СчетФактура
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыОплатыГрафа7 КАК ДокументыОплатыГрафа7
	|	ПО
	|		НДСПредъявленный.Организация = ДокументыОплатыГрафа7.Организация
	|		И НДСПредъявленный.СчетФактура = ДокументыОплатыГрафа7.СчетФактура
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВосстановленияНДС КАК ВосстановленияНДС
	|	ПО
	|		НДСПредъявленный.Организация = ВосстановленияНДС.Организация
	|		И НДСПредъявленный.СчетФактура = ВосстановленияНДС.СчетФактура
	|		И НДСПредъявленный.Поставщик = ВосстановленияНДС.Поставщик
	|		И НДСПредъявленный.ВидЦенности = ВосстановленияНДС.ВидЦенности
	|		И НДСПредъявленный.СтавкаНДС = ВосстановленияНДС.СтавкаНДС
	|		И НДСПредъявленный.ИсправленныйСчетФактура = ВосстановленияНДС.ИсправленныйСчетФактура
	|		И НДСПредъявленный.НаправлениеДеятельности = ВосстановленияНДС.НаправлениеДеятельности
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ИсправительныеСчетаФактуры КАК ИСФ
	|	ПО
	|		НДСПредъявленный.Организация = ИСФ.Организация
	|		И НДСПредъявленный.ИсправленныйСчетФактура = ИСФ.ИсправительныйСчетФактура
	|
	|ГДЕ
	|	ВосстановленияНДС.СчетФактура ЕСТЬ NULL
	|	И НДСПредъявленный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И НДСПредъявленный.Событие В (
	|			ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.НДСПринятКВычету),
	|			ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.ПодтвержденаСтавка0),
	|			ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.НеПодтвержденаСтавка0),
	|			ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.НДСПоДЦПринятКВычету))
	|";
	
	Запрос.УстановитьПараметр("НачалоПериода",     ПараметрыРасчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",      ПараметрыРасчета.КонецПериода);
	Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыРасчета.МассивОрганизаций);
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
	Возврат "НДСЗаписиКнигиПокупокПоНДСПредъявленный";
	
КонецФункции

Функция РассчитатьНДСЗаписиКнигиПокупокСторноПоИСФ(ПараметрыРасчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	1                                          КАК Приоритет,
	|	ИсправительныеСчетаФактуры.Ссылка          КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ИсправительныеСчетаФактуры.ДатаПолучения < &НачалоПериода
	|			ТОГДА &КонецПериода
	|		ИНАЧЕ ИсправительныеСчетаФактуры.ДатаПолучения
	|	КОНЕЦ                                      КАК Период,
	|	НДСЗаписиКнигиПокупок.Организация          КАК Организация,
	|	НДСЗаписиКнигиПокупок.Поставщик            КАК Поставщик,
	|	НДСЗаписиКнигиПокупок.СчетФактура          КАК СчетФактура,
	|	НДСЗаписиКнигиПокупок.ВидЦенности          КАК ВидЦенности,
	|	НДСЗаписиКнигиПокупок.СтавкаНДС            КАК СтавкаНДС,
	|	НДСЗаписиКнигиПокупок.СчетУчетаНДС         КАК СчетУчетаНДС,
	|	НДСЗаписиКнигиПокупок.ДатаОплаты           КАК ДатаОплаты,
	|	НДСЗаписиКнигиПокупок.ДокументОплаты       КАК ДокументОплаты,
	|	НДСЗаписиКнигиПокупок.Событие              КАК Событие,
	|	НДСЗаписиКнигиПокупок.ДатаСобытия          КАК ДатаСобытия,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ЗаписьДополнительногоЛиста
	|			ТОГДА ИСТИНА
	|		КОГДА НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупок.Период, Квартал) < 
	|				НАЧАЛОПЕРИОДА(ИсправительныеСчетаФактуры.ДатаЗаписиКнигиПокупок, Квартал)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ) КАК ЗаписьДополнительногоЛиста,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.КорректируемыйПериод <> ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА НДСЗаписиКнигиПокупок.КорректируемыйПериод
	|		КОГДА НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупок.Период, Квартал) < 
	|				НАЧАЛОПЕРИОДА(ИсправительныеСчетаФактуры.ДатаЗаписиКнигиПокупок, Квартал)
	|			ТОГДА НДСЗаписиКнигиПокупок.Период
	|	КОНЕЦ) КАК КорректируемыйПериод,
	|	НДСЗаписиКнигиПокупок.ДоговорКонтрагента      КАК ДоговорКонтрагента,
	|	НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	-СУММА(НДСЗаписиКнигиПокупок.СуммаБезНДС)     КАК СуммаБезНДС,
	|	-СУММА(НДСЗаписиКнигиПокупок.НДС)             КАК НДС,
	|	-СУММА(НДСЗаписиКнигиПокупок.НДСУпр)          КАК НДСУпр,
	|	НДСЗаписиКнигиПокупок.ХозяйственнаяОперация   КАК ХозяйственнаяОперация,
	|	НДСЗаписиКнигиПокупок.НомерДокументаОплаты    КАК НомерДокументаОплаты,
	|	НДСЗаписиКнигиПокупок.ДатаДокументаОплаты     КАК ДатаДокументаОплаты,
	|	НДСЗаписиКнигиПокупок.КодВидаОперации         КАК КодВидаОперации,
	|	ИСТИНА                                        КАК РегламентнаяОперация,
	|	НДСЗаписиКнигиПокупок.ДокументОтгрузки        КАК ДокументОтгрузки,
	|	НДСЗаписиКнигиПокупок.ВидДеятельностиНДС      КАК ВидДеятельностиНДС,
	|	НДСЗаписиКнигиПокупок.НаправлениеДеятельности КАК НаправлениеДеятельности
	|
	|ПОМЕСТИТЬ НДСЗаписиКнигиПокупокСторноПоИСФ
	|ИЗ
	|	ИсправительныеСчетаФактуры КАК ИсправительныеСчетаФактуры
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|	ПО
	|		НДСЗаписиКнигиПокупок.Организация = ИсправительныеСчетаФактуры.Организация
	|		И НДСЗаписиКнигиПокупок.СчетФактура = ИсправительныеСчетаФактуры.СчетФактура
	|		И НДСЗаписиКнигиПокупок.Период < &НачалоПериода
	|ГДЕ
	|	НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура <> ИсправительныеСчетаФактуры.ИсправительныйСчетФактура
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсправительныеСчетаФактуры.Ссылка,
	|	ВЫБОР
	|		КОГДА ИсправительныеСчетаФактуры.ДатаПолучения < &НачалоПериода
	|			ТОГДА &КонецПериода
	|		ИНАЧЕ ИсправительныеСчетаФактуры.ДатаПолучения
	|	КОНЕЦ,
	|	НДСЗаписиКнигиПокупок.Организация,
	|	НДСЗаписиКнигиПокупок.Поставщик,
	|	НДСЗаписиКнигиПокупок.СчетФактура,
	|	НДСЗаписиКнигиПокупок.ВидЦенности,
	|	НДСЗаписиКнигиПокупок.СтавкаНДС,
	|	НДСЗаписиКнигиПокупок.СчетУчетаНДС,
	|	НДСЗаписиКнигиПокупок.ДатаОплаты,
	|	НДСЗаписиКнигиПокупок.ДокументОплаты,
	|	НДСЗаписиКнигиПокупок.Событие,
	|	НДСЗаписиКнигиПокупок.ДатаСобытия,
	|	НДСЗаписиКнигиПокупок.ДоговорКонтрагента,
	|	НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура,
	|	НДСЗаписиКнигиПокупок.ХозяйственнаяОперация,
	|	НДСЗаписиКнигиПокупок.НомерДокументаОплаты,
	|	НДСЗаписиКнигиПокупок.ДатаДокументаОплаты,
	|	НДСЗаписиКнигиПокупок.КодВидаОперации,
	|	НДСЗаписиКнигиПокупок.ДокументОтгрузки,
	|	НДСЗаписиКнигиПокупок.ВидДеятельностиНДС,
	|	НДСЗаписиКнигиПокупок.НаправлениеДеятельности
	|
	|ИМЕЮЩИЕ
	|	СУММА(НДСЗаписиКнигиПокупок.НДС) <> 0
	|";
	
	Запрос.УстановитьПараметр("НачалоПериода",     ПараметрыРасчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",      ПараметрыРасчета.КонецПериода);
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
	Возврат "НДСЗаписиКнигиПокупокСторноПоИСФ";
	
КонецФункции

Функция РассчитатьНДСЗаписиКнигиПокупокПоАвансуПолученному(ПараметрыРасчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	ТаблицаНДСЗаписиКнигиПокупок.Период,
	|	ТаблицаНДСЗаписиКнигиПокупок.Регистратор,
	|	ТаблицаНДСЗаписиКнигиПокупок.Организация,
	|	ТаблицаНДСЗаписиКнигиПокупок.Поставщик,
	|	ТаблицаНДСЗаписиКнигиПокупок.СчетФактура,
	|	ТаблицаНДСЗаписиКнигиПокупок.ВидЦенности,
	|	ТаблицаНДСЗаписиКнигиПокупок.СтавкаНДС,
	|	ТаблицаНДСЗаписиКнигиПокупок.СчетУчетаНДС,
	|	ТаблицаНДСЗаписиКнигиПокупок.ДатаОплаты,
	|	ТаблицаНДСЗаписиКнигиПокупок.ДокументОплаты,
	|	ТаблицаНДСЗаписиКнигиПокупок.Событие,
	|	ТаблицаНДСЗаписиКнигиПокупок.ДатаСобытия,
	|	ТаблицаНДСЗаписиКнигиПокупок.ЗаписьДополнительногоЛиста,
	|	ТаблицаНДСЗаписиКнигиПокупок.КорректируемыйПериод,
	|	ТаблицаНДСЗаписиКнигиПокупок.ДоговорКонтрагента,
	|	ТаблицаНДСЗаписиКнигиПокупок.ИсправленныйСчетФактура,
	|	ТаблицаНДСЗаписиКнигиПокупок.СуммаБезНДС,
	|	ТаблицаНДСЗаписиКнигиПокупок.НДС,
	|	ТаблицаНДСЗаписиКнигиПокупок.НДСУпр,
	|	ТаблицаНДСЗаписиКнигиПокупок.ХозяйственнаяОперация,
	|	ТаблицаНДСЗаписиКнигиПокупок.НомерДокументаОплаты,
	|	ТаблицаНДСЗаписиКнигиПокупок.ДатаДокументаОплаты,
	|	ТаблицаНДСЗаписиКнигиПокупок.КодВидаОперации,
	|	ИСТИНА КАК РегламентнаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОтгрузки,
	|	НЕОПРЕДЕЛЕНО КАК ВидДеятельностиНДС,
	|	ТаблицаНДСЗаписиКнигиПокупок.НаправлениеДеятельности
	|ПОМЕСТИТЬ НДСЗаписиКнигиПокупокПоАвансамПолученным
	|ИЗ
	|	ВтТаблицаНДСЗаписиКнигиПокупок КАК ТаблицаНДСЗаписиКнигиПокупок
	|ГДЕ
	|	ТаблицаНДСЗаписиКнигиПокупок.Период МЕЖДУ &НачалоПериода И &КонецПериода";
	
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыРасчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  ПараметрыРасчета.КонецПериода);
	
	Запрос.Выполнить();
	
	Возврат "НДСЗаписиКнигиПокупокПоАвансамПолученным";
	
КонецФункции

Функция РассчитатьНДСЗаписиКнигиПокупокПоАвансуВыданному(ПараметрыРасчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	ТаблицаНДСЗаписиКнигиПокупок.Период,
	|	ТаблицаНДСЗаписиКнигиПокупок.Регистратор,
	|	ТаблицаНДСЗаписиКнигиПокупок.Организация,
	|	ТаблицаНДСЗаписиКнигиПокупок.Поставщик,
	|	ТаблицаНДСЗаписиКнигиПокупок.СчетФактура,
	|	ТаблицаНДСЗаписиКнигиПокупок.ВидЦенности,
	|	ТаблицаНДСЗаписиКнигиПокупок.СтавкаНДС,
	|	ТаблицаНДСЗаписиКнигиПокупок.СчетУчетаНДС,
	|	ТаблицаНДСЗаписиКнигиПокупок.ДатаОплаты,
	|	ТаблицаНДСЗаписиКнигиПокупок.ДокументОплаты,
	|	ТаблицаНДСЗаписиКнигиПокупок.Событие,
	|	ТаблицаНДСЗаписиКнигиПокупок.ДатаСобытия,
	|	ТаблицаНДСЗаписиКнигиПокупок.ЗаписьДополнительногоЛиста,
	|	ТаблицаНДСЗаписиКнигиПокупок.КорректируемыйПериод,
	|	ТаблицаНДСЗаписиКнигиПокупок.ДоговорКонтрагента,
	|	ТаблицаНДСЗаписиКнигиПокупок.ИсправленныйСчетФактура,
	|	ТаблицаНДСЗаписиКнигиПокупок.СуммаБезНДС,
	|	ТаблицаНДСЗаписиКнигиПокупок.НДС,
	|	ТаблицаНДСЗаписиКнигиПокупок.НДСУпр,
	|	ТаблицаНДСЗаписиКнигиПокупок.ХозяйственнаяОперация,
	|	ТаблицаНДСЗаписиКнигиПокупок.НомерДокументаОплаты,
	|	ТаблицаНДСЗаписиКнигиПокупок.ДатаДокументаОплаты,
	|	ТаблицаНДСЗаписиКнигиПокупок.КодВидаОперации,
	|	ИСТИНА КАК РегламентнаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОтгрузки,
	|	НЕОПРЕДЕЛЕНО КАК ВидДеятельностиНДС,
	|	ТаблицаНДСЗаписиКнигиПокупок.НаправлениеДеятельности
	|ПОМЕСТИТЬ НДСЗаписиКнигиПокупокПоАвансамВыданным
	|ИЗ
	|	ВтТаблицаНДСЗаписиКнигиПокупокМеталлолом КАК ТаблицаНДСЗаписиКнигиПокупок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйАванс КАК СчетФактураПолученныйАванс
	|		ПО ТаблицаНДСЗаписиКнигиПокупок.Регистратор = СчетФактураПолученныйАванс.Ссылка
	|ГДЕ
	|	СчетФактураПолученныйАванс.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя)
	|	И ТаблицаНДСЗаписиКнигиПокупок.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|";
	
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыРасчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  ПараметрыРасчета.КонецПериода);
	
	Запрос.Выполнить();
	
	Возврат "НДСЗаписиКнигиПокупокПоАвансамВыданным";
	
КонецФункции

Функция РассчитатьНДСЗаписиКнигиПокупокСохранение(ПараметрыРасчета, ИменаТаблицНДСЗаписиКнигиПокупок)
	
	МассивТекстовРегистраторыЗапись = Новый Массив;
	ШаблонЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСЗаписиКнигиПокупок.Регистратор
	|ИЗ
	|	%1 КАК НДСЗаписиКнигиПокупок";
	Для каждого ИмяТаблицыЗаписей Из ИменаТаблицНДСЗаписиКнигиПокупок Цикл
		МассивТекстовРегистраторыЗапись.Добавить(СтрШаблон(ШаблонЗапроса, ИмяТаблицыЗаписей));
	КонецЦикла;
	ТекстРегистраторыЗапись = СтрСоединить(МассивТекстовРегистраторыЗапись, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении(Истина));
	
	ТекстЗапросаСохранение =
	"ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК Регистратор
	|ПОМЕСТИТЬ РегистраторыЗапись
	|ГДЕ
	|	ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ
	|
	|%ТекстРегистраторыЗапись
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСЗаписиКнигиПокупок.Регистратор
	|ИЗ
	|	ТекущиеРегистраторыНДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|;
	|
	|ВЫБРАТЬ
	|	0 КАК Приоритет,
	|	НДСЗаписиКнигиПокупок.Период,
	|	НДСЗаписиКнигиПокупок.Регистратор,
	|	НДСЗаписиКнигиПокупок.Организация,
	|	НДСЗаписиКнигиПокупок.Поставщик,
	|	НДСЗаписиКнигиПокупок.СчетФактура,
	|	НДСЗаписиКнигиПокупок.ВидЦенности,
	|	НДСЗаписиКнигиПокупок.СтавкаНДС,
	|	НДСЗаписиКнигиПокупок.ДатаОплаты,
	|	НДСЗаписиКнигиПокупок.ДокументОплаты,
	|	НДСЗаписиКнигиПокупок.Событие,
	|	НДСЗаписиКнигиПокупок.ДатаСобытия,
	|	НДСЗаписиКнигиПокупок.ЗаписьДополнительногоЛиста,
	|	НДСЗаписиКнигиПокупок.КорректируемыйПериод,
	|	НДСЗаписиКнигиПокупок.ДоговорКонтрагента,
	|	НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура,
	|	НДСЗаписиКнигиПокупок.СуммаБезНДС,
	|	НДСЗаписиКнигиПокупок.НДС,
	|	НДСЗаписиКнигиПокупок.НДСУпр,
	|	НДСЗаписиКнигиПокупок.ХозяйственнаяОперация,
	|	НДСЗаписиКнигиПокупок.НомерДокументаОплаты,
	|	НДСЗаписиКнигиПокупок.ДатаДокументаОплаты,
	|	НДСЗаписиКнигиПокупок.КодВидаОперации,
	|	НДСЗаписиКнигиПокупок.РегламентнаяОперация,
	|	НДСЗаписиКнигиПокупок.ДокументОтгрузки,
	|	НДСЗаписиКнигиПокупок.ВидДеятельностиНДС,
	|	НДСЗаписиКнигиПокупок.НаправлениеДеятельности
	|ПОМЕСТИТЬ НДСЗаписиКнигиПокупокСохранение
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистраторыЗапись КАК РегистраторыЗапись
	|	ПО
	|		НДСЗаписиКнигиПокупок.Регистратор = РегистраторыЗапись.Регистратор
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Задания КАК Задания
	|	ПО
	|		НДСЗаписиКнигиПокупок.Организация = Задания.Организация
	|		И НДСЗаписиКнигиПокупок.СчетФактура = Задания.СчетФактура
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Задания КАК ЗаданияПоРегистратору
	|	ПО
	|		НДСЗаписиКнигиПокупок.Организация = ЗаданияПоРегистратору.Организация
	|		И НДСЗаписиКнигиПокупок.Регистратор = ЗаданияПоРегистратору.СчетФактура 
	|
	|ГДЕ
	|	(НЕ РегистраторыЗапись.Регистратор ЕСТЬ NULL)
	|	И (НДСЗаписиКнигиПокупок.Период < &НачалоПериода
	|			ИЛИ НДСЗаписиКнигиПокупок.Период > &КонецПериода
	|			ИЛИ НЕ НДСЗаписиКнигиПокупок.РегламентнаяОперация
	|			ИЛИ Задания.СчетФактура ЕСТЬ NULL 
	|				И ЗаданияПоРегистратору.СчетФактура ЕСТЬ NULL)
	|;
	|
	|/////////////////////////////////////////////
	|УНИЧТОЖИТЬ РегистраторыЗапись
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить(ТекстЗапросаСохранение, "%ТекстРегистраторыЗапись", ТекстРегистраторыЗапись);
	
	Запрос.УстановитьПараметр("НачалоПериода",     ПараметрыРасчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",      ПараметрыРасчета.КонецПериода);
	Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыРасчета.МассивОрганизаций);
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
	Возврат "НДСЗаписиКнигиПокупокСохранение";
	
КонецФункции

Процедура ЗаписатьНДСЗаписиКнигиПокупок(ПараметрыРасчета, ИменаТаблицНДСЗаписиКнигиПокупок)
	
	МассивТекстовДанных = Новый Массив;
	ШаблонЗапроса =
	"ВЫБРАТЬ
	|	НДСЗаписиКнигиПокупок.Приоритет,
	|	НДСЗаписиКнигиПокупок.Период,
	|	НДСЗаписиКнигиПокупок.Регистратор,
	|	НДСЗаписиКнигиПокупок.Организация,
	|	НДСЗаписиКнигиПокупок.Поставщик,
	|	НДСЗаписиКнигиПокупок.СчетФактура,
	|	НДСЗаписиКнигиПокупок.ВидЦенности,
	|	НДСЗаписиКнигиПокупок.СтавкаНДС,
	|	НДСЗаписиКнигиПокупок.ДатаОплаты,
	|	НДСЗаписиКнигиПокупок.ДокументОплаты,
	|	НДСЗаписиКнигиПокупок.Событие,
	|	НДСЗаписиКнигиПокупок.ДатаСобытия,
	|	НДСЗаписиКнигиПокупок.ЗаписьДополнительногоЛиста,
	|	НДСЗаписиКнигиПокупок.КорректируемыйПериод,
	|	НДСЗаписиКнигиПокупок.ДоговорКонтрагента,
	|	НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура,
	|	НДСЗаписиКнигиПокупок.СуммаБезНДС,
	|	НДСЗаписиКнигиПокупок.НДС,
	|	НДСЗаписиКнигиПокупок.НДСУпр,
	|	НДСЗаписиКнигиПокупок.ХозяйственнаяОперация,
	|	НДСЗаписиКнигиПокупок.НомерДокументаОплаты,
	|	НДСЗаписиКнигиПокупок.ДатаДокументаОплаты,
	|	НДСЗаписиКнигиПокупок.КодВидаОперации,
	|	НДСЗаписиКнигиПокупок.РегламентнаяОперация,
	|	НДСЗаписиКнигиПокупок.ДокументОтгрузки,
	|	НДСЗаписиКнигиПокупок.ВидДеятельностиНДС,
	|	НДСЗаписиКнигиПокупок.НаправлениеДеятельности
	|ИЗ
	|	%1 КАК НДСЗаписиКнигиПокупок
	|";
	Для каждого ИмяТаблицыЗаписей Из ИменаТаблицНДСЗаписиКнигиПокупок Цикл
		МассивТекстовДанных.Добавить(СтрШаблон(ШаблонЗапроса, ИмяТаблицыЗаписей));
	КонецЦикла;
	ТекстДанныеДляЗаписи = СтрСоединить(МассивТекстовДанных, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		ТекстДанныеДляЗаписи
		+ "
		|
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор,
		|	Период,
		|	Приоритет
		|
		|ИТОГИ ПО
		|	Регистратор
		|";
	
	Запрос.УстановитьПараметр("НачалоПериода",     ПараметрыРасчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",      ПараметрыРасчета.КонецПериода);
	Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыРасчета.МассивОрганизаций);
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	
	ВыборкаДокумент = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокумент.Следующий() Цикл
		
		НаборЗаписей = РегистрыНакопления.НДСЗаписиКнигиПокупок.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДокумент.Регистратор);
		НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		
		Выборка = ВыборкаДокумент.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;

КонецПроцедуры

Процедура ОчиститьНДСЗаписиКнигиПокупок(ПараметрыРасчета, ИменаТаблицНДСЗаписиКнигиПокупок)
	
	МассивТекстовРегистраторыЗапись = Новый Массив;
	ШаблонЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСЗаписиКнигиПокупок.Регистратор
	|ИЗ
	|	%1 КАК НДСЗаписиКнигиПокупок";
	Для каждого ИмяТаблицыЗаписей Из ИменаТаблицНДСЗаписиКнигиПокупок Цикл
		МассивТекстовРегистраторыЗапись.Добавить(СтрШаблон(ШаблонЗапроса, ИмяТаблицыЗаписей));
	КонецЦикла;
	ТекстРегистраторыЗапись = СтрСоединить(МассивТекстовРегистраторыЗапись, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении(Истина));
	
	ТекстУстаревшиеРегистраторы = 
	"ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК Регистратор
	|ПОМЕСТИТЬ РегистраторыЗапись
	|ГДЕ
	|	ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ
	|
	|%ТекстРегистраторыЗапись
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|//////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УстаревшиеРегистраторы.Регистратор
	|ИЗ
	|	ТекущиеРегистраторыНДСЗаписиКнигиПокупок КАК УстаревшиеРегистраторы
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистраторыЗапись КАК РегистраторыЗапись
	|	ПО
	|		УстаревшиеРегистраторы.Регистратор = РегистраторыЗапись.Регистратор
	|
	|ГДЕ
	|	РегистраторыЗапись.Регистратор ЕСТЬ NULL
	|;
	|
	|//////////////////////////////////////////////
	|УНИЧТОЖИТЬ РегистраторыЗапись
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить(ТекстУстаревшиеРегистраторы, "%ТекстРегистраторыЗапись", ТекстРегистраторыЗапись);
	
	Запрос.УстановитьПараметр("НачалоПериода",     ПараметрыРасчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  ПараметрыРасчета.КонецПериода);
	Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыРасчета.МассивОрганизаций);
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	
	ВыборкаДокумент = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДокумент.Следующий() Цикл
		
		НаборЗаписей = РегистрыНакопления.НДСЗаписиКнигиПокупок.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДокумент.Регистратор);
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ФормированиеДвиженияНДСЗаписиКнигиПродаж

Процедура СформироватьНДСЗаписиКнигиПродаж(ПараметрыРасчета)
	
	ПолучитьТекущиеРегистраторыНДСЗаписиКнигиПродаж(ПараметрыРасчета);
	
	ИменаТаблицНДСЗаписиКнигиПродаж = Новый Массив;
		
	ИменаТаблицНДСЗаписиКнигиПродаж.Добавить(РассчитатьНДСЗаписиКнигиПродажПоНДСПредъявленный(ПараметрыРасчета));
	ИменаТаблицНДСЗаписиКнигиПродаж.Добавить(РассчитатьНДСЗаписиКнигиПродажСторноПоИСФ(ПараметрыРасчета));
	Если ПараметрыРасчета.РасчетАвансовВыданных Тогда
		ИменаТаблицНДСЗаписиКнигиПродаж.Добавить(РассчитатьНДСЗаписиКнигиПродажПоАвансуВыданному(ПараметрыРасчета));
	КонецЕсли;
	ИменаТаблицНДСЗаписиКнигиПродаж.Добавить(РассчитатьНДСЗаписиКнигиПродажОплатыСФ(ПараметрыРасчета));
	
	ИменаТаблицНДСЗаписиКнигиПродаж.Добавить(РассчитатьНДСЗаписиКнигиПродажСохранение(ПараметрыРасчета, ИменаТаблицНДСЗаписиКнигиПродаж));
	
	ЗаписатьНДСЗаписиКнигиПродаж(ПараметрыРасчета, ИменаТаблицНДСЗаписиКнигиПродаж);
	ОчиститьНДСЗаписиКнигиПродаж(ПараметрыРасчета, ИменаТаблицНДСЗаписиКнигиПродаж);
	
КонецПроцедуры

Процедура ПолучитьТекущиеРегистраторыНДСЗаписиКнигиПродаж(ПараметрыРасчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСЗаписиКнигиПродаж.Регистратор КАК Регистратор,
	|	НДСЗаписиКнигиПродаж.Организация КАК Организация,
	|	НДСЗаписиКнигиПродаж.Период КАК Период,
	|	НДСЗаписиКнигиПродаж.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ТекущиеРегистраторыНДСЗаписиКнигиПродаж
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задания КАК Задания
	|		ПО НДСЗаписиКнигиПродаж.Организация = Задания.Организация
	|			И НДСЗаписиКнигиПродаж.СчетФактура = Задания.СчетФактура
	|ГДЕ
	|	НДСЗаписиКнигиПродаж.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НДСЗаписиКнигиПродаж.РегламентнаяОперация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСЗаписиКнигиПродаж.Регистратор,
	|	НДСЗаписиКнигиПродаж.Организация,
	|	НДСЗаписиКнигиПродаж.Период,
	|	НДСЗаписиКнигиПродаж.ХозяйственнаяОперация
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задания КАК Задания
	|		ПО НДСЗаписиКнигиПродаж.Регистратор = Задания.СчетФактура
	|ГДЕ
	|	НДСЗаписиКнигиПродаж.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ТИПЗНАЧЕНИЯ(НДСЗаписиКнигиПродаж.Регистратор) = ТИП(Документ.СчетФактураПолученныйАванс)
	|	И НДСЗаписиКнигиПродаж.РегламентнаяОперация
	|	И НДСЗаписиКнигиПродаж.НДС <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор";
	
	Запрос.УстановитьПараметр("НачалоПериода",      ПараметрыРасчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",       ПараметрыРасчета.КонецПериода);
	Запрос.УстановитьПараметр("МассивОрганизаций",  ПараметрыРасчета.МассивОрганизаций);
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Функция РассчитатьНДСЗаписиКнигиПродажПоНДСПредъявленный(ПараметрыРасчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	1                                                            КАК Приоритет,
	|	НДСПредъявленный.Период                                      КАК Период,
	|	НДСПредъявленный.Регистратор                                 КАК Регистратор,
	|	НДСПредъявленный.Организация                                 КАК Организация,
	|	НДСПредъявленный.Поставщик                                   КАК Покупатель,
	|	НДСПредъявленный.СчетФактура                                 КАК СчетФактура,
	|	НДСПредъявленный.ВидЦенности                                 КАК ВидЦенности,
	|	НДСПредъявленный.СтавкаНДС                                   КАК СтавкаНДС,
	|	ДАТАВРЕМЯ(1,1,1)                                             КАК ДатаОплаты,
	|	НЕОПРЕДЕЛЕНО                                                 КАК ДокументОплаты,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.ВосстановлениеНДС) КАК Событие,
	|	НДСПредъявленный.Период                                      КАК ДатаСобытия,
	|	ЛОЖЬ                                                         КАК ЗаписьДополнительногоЛиста,
	|	ДАТАВРЕМЯ(1,1,1)                                             КАК КорректируемыйПериод,
	|	НЕОПРЕДЕЛЕНО                                                 КАК ДоговорКонтрагента,
	|	ЛОЖЬ                                                         КАК СторнирующаяЗаписьДопЛиста,
	|	НДСПредъявленный.ИсправленныйСчетФактура                     КАК ИсправленныйСчетФактура,
	|	ЛОЖЬ                                                         КАК Исправление,
	|	ДАТАВРЕМЯ(1,1,1)                                             КАК ДатаСчетаФактурыКомиссионера,
	|	ВЫБОР
	|		КОГДА НДСПредъявленный.СуммаБезНДС = 0 И НДСПредъявленный.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|			ТОГДА НДСПредъявленный.НДС * 100 / 20
	|		КОГДА НДСПредъявленный.СуммаБезНДС = 0 И НДСПредъявленный.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
	|			ТОГДА НДСПредъявленный.НДС * 100 / 20
	|		КОГДА НДСПредъявленный.СуммаБезНДС = 0 И НДСПредъявленный.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|			ТОГДА НДСПредъявленный.НДС * 100 / 18
	|		КОГДА НДСПредъявленный.СуммаБезНДС = 0 И НДСПредъявленный.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|			ТОГДА НДСПредъявленный.НДС * 100 / 18
	|		КОГДА НДСПредъявленный.СуммаБезНДС = 0 И НДСПредъявленный.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|			ТОГДА НДСПредъявленный.НДС * 100 / 10
	|		ИНАЧЕ НДСПредъявленный.СуммаБезНДС
	|	КОНЕЦ                                                        КАК СуммаБезНДС,
	|	НДСПредъявленный.НДС                                         КАК НДС,
	|	НДСПредъявленный.НДСУпр                                      КАК НДСУпр,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)    КАК ХозяйственнаяОперация,
	|	""""                                                         КАК НомерДокументаОплаты,
	|	ДАТАВРЕМЯ(1,1,1)                                             КАК ДатаДокументаОплаты,
	|	""21""                                                       КАК КодВидаОперации,
	|	ИСТИНА                                                       КАК РегламентнаяОперация,
	|	НДСПредъявленный.ВидДеятельностиНДС                          КАК ВидДеятельностиНДС,
	|	НДСПредъявленный.НаправлениеДеятельности                     КАК НаправлениеДеятельности
	|ПОМЕСТИТЬ НДСЗаписиКнигиПродажПоНДСПредъявленный
	|ИЗ
	|	НДСПредъявленныйВосстановлениеПодВидДеятельности КАК НДСПредъявленный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1                                                            КАК Приоритет,
	|	НДСПредъявленный.Период                                      КАК Период,
	|	НДСПредъявленный.Регистратор                                 КАК Регистратор,
	|	НДСПредъявленный.Организация                                 КАК Организация,
	|	НДСПредъявленный.Поставщик                                   КАК Покупатель,
	|	НДСПредъявленный.СчетФактура                                 КАК СчетФактура,
	|	НДСПредъявленный.ВидЦенности                                 КАК ВидЦенности,
	|	НДСПредъявленный.СтавкаНДС                                   КАК СтавкаНДС,
	|	ДАТАВРЕМЯ(1,1,1)                                             КАК ДатаОплаты,
	|	НЕОПРЕДЕЛЕНО                                                 КАК ДокументОплаты,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.ВосстановлениеНДС) КАК Событие,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(СчетаФактурыДокументы.Дата, КВАРТАЛ) < НДСПредъявленный.Период
	|			ТОГДА СчетаФактурыДокументы.Дата
	|		ИНАЧЕ
	|			НДСПредъявленный.Период
	|	КОНЕЦ                                                        КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(СчетаФактурыДокументы.Дата, КВАРТАЛ) < НДСПредъявленный.Период
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ                                                        КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(СчетаФактурыДокументы.Дата, КВАРТАЛ) < НДСПредъявленный.Период
	|			ТОГДА СчетаФактурыДокументы.Дата
	|		ИНАЧЕ
	|			ДАТАВРЕМЯ(1,1,1)
	|	КОНЕЦ                                                        КАК КорректируемыйПериод,
	|	НЕОПРЕДЕЛЕНО                                                 КАК ДоговорКонтрагента,
	|	ЛОЖЬ                                                         КАК СторнирующаяЗаписьДопЛиста,
	|	НДСПредъявленный.ИсправленныйСчетФактура                     КАК ИсправленныйСчетФактура,
	|	ЛОЖЬ                                                         КАК Исправление,
	|	ДАТАВРЕМЯ(1,1,1)                                             КАК ДатаСчетаФактурыКомиссионера,
	|	ВЫБОР 
	|		КОГДА НДСПредъявленный.СуммаБезНДС = 0 И НДСПредъявленный.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
	|			ТОГДА НДСПредъявленный.НДС * 100 / 20
	|		КОГДА НДСПредъявленный.СуммаБезНДС = 0 И НДСПредъявленный.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|			ТОГДА НДСПредъявленный.НДС * 100 / 18
	|		ИНАЧЕ НДСПредъявленный.СуммаБезНДС
	|	КОНЕЦ                                                        КАК СуммаБезНДС,
	|	НДСПредъявленный.НДС                                         КАК НДС,
	|	НДСПредъявленный.НДСУпр                                      КАК НДСУпр,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)    КАК ХозяйственнаяОперация,
	|	""""                                                         КАК НомерДокументаОплаты,
	|	ДАТАВРЕМЯ(1,1,1)                                             КАК ДатаДокументаОплаты,
	|	СчетаФактурыДокументы.Ссылка.КодВидаОперацииНаУменьшение     КАК КодВидаОперации,
	|	ИСТИНА                                                       КАК РегламентнаяОперация,
	|	НДСПредъявленный.ВидДеятельностиНДС                          КАК ВидДеятельностиНДС,
	|	НДСПредъявленный.НаправлениеДеятельности                     КАК НаправлениеДеятельности
	|ИЗ
	|	НДСПредъявленныйВосстановлениеПоКСФ КАК НДСПредъявленный
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СчетаФактурыДокументы КАК СчетаФактурыДокументы
	|	ПО
	|		НДСПредъявленный.СчетФактура = СчетаФактурыДокументы.СчетФактура
	|		И НДСПредъявленный.Организация = СчетаФактурыДокументы.Организация
	|";
	
	Запрос.УстановитьПараметр("НачалоПериода",      ПараметрыРасчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",       ПараметрыРасчета.КонецПериода);
	Запрос.УстановитьПараметр("МассивОрганизаций",  ПараметрыРасчета.МассивОрганизаций);
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	Возврат "НДСЗаписиКнигиПродажПоНДСПредъявленный";
	
КонецФункции

Функция РассчитатьНДСЗаписиКнигиПродажСторноПоИСФ(ПараметрыРасчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	1                                           КАК Приоритет,
	|	ИсправительныеСчетаФактуры.Ссылка           КАК Регистратор,
	|	ИсправительныеСчетаФактуры.ДатаИсправления  КАК Период,
	|	НДСЗаписиКнигиПродаж.Организация            КАК Организация,
	|	НДСЗаписиКнигиПродаж.Покупатель             КАК Покупатель,
	|	НДСЗаписиКнигиПродаж.СчетФактура            КАК СчетФактура,
	|	НДСЗаписиКнигиПродаж.ВидЦенности            КАК ВидЦенности,
	|	НДСЗаписиКнигиПродаж.СтавкаНДС              КАК СтавкаНДС,
	|	НДСЗаписиКнигиПродаж.ДатаОплаты             КАК ДатаОплаты,
	|	НДСЗаписиКнигиПродаж.ДокументОплаты         КАК ДокументОплаты,
	|	НДСЗаписиКнигиПродаж.Событие                КАК Событие,
	|	НДСЗаписиКнигиПродаж.ДатаСобытия            КАК ДатаСобытия,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста
	|			ТОГДА ИСТИНА
	|		КОГДА НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродаж.Период, Квартал) < 
	|				НАЧАЛОПЕРИОДА(ИсправительныеСчетаФактуры.ДатаЗаписиКнигиПокупок, Квартал)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)  КАК ЗаписьДополнительногоЛиста,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.КорректируемыйПериод <> ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА НДСЗаписиКнигиПродаж.КорректируемыйПериод
	|		КОГДА НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродаж.Период, Квартал) < 
	|				НАЧАЛОПЕРИОДА(ИсправительныеСчетаФактуры.ДатаЗаписиКнигиПокупок, Квартал)
	|			ТОГДА НДСЗаписиКнигиПродаж.Период
	|	КОНЕЦ) КАК КорректируемыйПериод,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста
	|			ТОГДА ИСТИНА
	|		КОГДА НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродаж.Период, Квартал) < 
	|				НАЧАЛОПЕРИОДА(ИсправительныеСчетаФактуры.ДатаЗаписиКнигиПокупок, Квартал)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)  КАК СторнирующаяЗаписьДопЛиста,
	|	НДСЗаписиКнигиПродаж.ДоговорКонтрагента           КАК ДоговорКонтрагента,
	|	НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура      КАК ИсправленныйСчетФактура,
	|	ИСТИНА                                            КАК Исправление,
	|	НДСЗаписиКнигиПродаж.ДатаСчетаФактурыКомиссионера КАК ДатаСчетаФактурыКомиссионера,
	|	-СУММА(НДСЗаписиКнигиПродаж.СуммаБезНДС)          КАК СуммаБезНДС,
	|	-СУММА(НДСЗаписиКнигиПродаж.НДС)                  КАК НДС,
	|	-СУММА(НДСЗаписиКнигиПродаж.НДСУпр)               КАК НДСУпр,
	|	НДСЗаписиКнигиПродаж.ХозяйственнаяОперация        КАК ХозяйственнаяОперация,
	|	НДСЗаписиКнигиПродаж.НомерДокументаОплаты         КАК НомерДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.ДатаДокументаОплаты          КАК ДатаДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.КодВидаОперации              КАК КодВидаОперации,
	|	ИСТИНА                                            КАК РегламентнаяОперация,
	|	НДСЗаписиКнигиПродаж.ВидДеятельностиНДС           КАК ВидДеятельностиНДС,
	|	НДСЗаписиКнигиПродаж.НаправлениеДеятельности      КАК НаправлениеДеятельности
	|
	|ПОМЕСТИТЬ НДСЗаписиКнигиПродажСторноПоИСФ
	|ИЗ
	|	ИсправительныеСчетаФактуры КАК ИсправительныеСчетаФактуры
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|	ПО
	|		НДСЗаписиКнигиПродаж.Организация = ИсправительныеСчетаФактуры.Организация
	|		И НДСЗаписиКнигиПродаж.СчетФактура = ИсправительныеСчетаФактуры.СчетФактура
	|		И НДСЗаписиКнигиПродаж.Период < &НачалоПериода
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.КорректировкаПриобретения КАК КорректировкаПоСогласованиюСторон
	|	ПО
	|		ИсправительныеСчетаФактуры.СчетФактура = КорректировкаПоСогласованиюСторон.Ссылка
	|		И ИсправительныеСчетаФактуры.Организация = КорректировкаПоСогласованиюСторон.Организация
	|		И КорректировкаПоСогласованиюСторон.ВидКорректировки = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон)
	|	
	|ГДЕ
	|	НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура <> ИсправительныеСчетаФактуры.ИсправительныйСчетФактура
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсправительныеСчетаФактуры.Ссылка,
	|	ИсправительныеСчетаФактуры.ДатаИсправления,
	|	НДСЗаписиКнигиПродаж.Организация,
	|	НДСЗаписиКнигиПродаж.Покупатель,
	|	НДСЗаписиКнигиПродаж.СчетФактура,
	|	НДСЗаписиКнигиПродаж.ВидЦенности,
	|	НДСЗаписиКнигиПродаж.СтавкаНДС,
	|	НДСЗаписиКнигиПродаж.ДатаОплаты,
	|	НДСЗаписиКнигиПродаж.ДокументОплаты,
	|	НДСЗаписиКнигиПродаж.Событие,
	|	НДСЗаписиКнигиПродаж.ДатаСобытия,
	|	НДСЗаписиКнигиПродаж.ДоговорКонтрагента,
	|	НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура,
	|	НДСЗаписиКнигиПродаж.ДатаСчетаФактурыКомиссионера,
	|	НДСЗаписиКнигиПродаж.ХозяйственнаяОперация,
	|	НДСЗаписиКнигиПродаж.НомерДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.ДатаДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.КодВидаОперации,
	|	НДСЗаписиКнигиПродаж.ВидДеятельностиНДС,
	|	НДСЗаписиКнигиПродаж.НаправлениеДеятельности
	|
	|ИМЕЮЩИЕ
	|	СУММА(НДСЗаписиКнигиПродаж.НДС) <> 0
	|";
	
	Запрос.УстановитьПараметр("НачалоПериода",     ПараметрыРасчета.НачалоПериода);
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
	Возврат "НДСЗаписиКнигиПродажСторноПоИСФ";
	
КонецФункции

Функция РассчитатьНДСЗаписиКнигиПродажПоАвансуВыданному(ПараметрыРасчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	ТаблицаНДСЗаписиКнигиПродаж.Период,
	|	ТаблицаНДСЗаписиКнигиПродаж.Регистратор,
	|	ТаблицаНДСЗаписиКнигиПродаж.Организация,
	|	ТаблицаНДСЗаписиКнигиПродаж.Покупатель,
	|	ТаблицаНДСЗаписиКнигиПродаж.СчетФактура,
	|	ТаблицаНДСЗаписиКнигиПродаж.ВидЦенности,
	|	ТаблицаНДСЗаписиКнигиПродаж.СтавкаНДС,
	|	ТаблицаНДСЗаписиКнигиПродаж.ДатаОплаты,
	|	ТаблицаНДСЗаписиКнигиПродаж.ДокументОплаты,
	|	ТаблицаНДСЗаписиКнигиПродаж.Событие,
	|	ТаблицаНДСЗаписиКнигиПродаж.ДатаСобытия,
	|	ТаблицаНДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста,
	|	ТаблицаНДСЗаписиКнигиПродаж.КорректируемыйПериод,
	|	ТаблицаНДСЗаписиКнигиПродаж.СторнирующаяЗаписьДопЛиста,
	|	ТаблицаНДСЗаписиКнигиПродаж.ДоговорКонтрагента,
	|	ТаблицаНДСЗаписиКнигиПродаж.ИсправленныйСчетФактура,
	|	ТаблицаНДСЗаписиКнигиПродаж.Исправление,
	|	ТаблицаНДСЗаписиКнигиПродаж.ДатаСчетаФактурыКомиссионера,
	|	ТаблицаНДСЗаписиКнигиПродаж.СуммаБезНДС,
	|	ТаблицаНДСЗаписиКнигиПродаж.НДС,
	|	ТаблицаНДСЗаписиКнигиПродаж.НДСУпр,
	|	ТаблицаНДСЗаписиКнигиПродаж.ХозяйственнаяОперация,
	|	ТаблицаНДСЗаписиКнигиПродаж.НомерДокументаОплаты,
	|	ТаблицаНДСЗаписиКнигиПродаж.ДатаДокументаОплаты,
	|	ТаблицаНДСЗаписиКнигиПродаж.КодВидаОперации,
	|	ИСТИНА КАК РегламентнаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК ВидДеятельностиНДС,
	|	ТаблицаНДСЗаписиКнигиПродаж.НаправлениеДеятельности
	|ПОМЕСТИТЬ НДСЗаписиКнигиПродажПоАвансамВыданным
	|ИЗ
	|	ВтТаблицаНДСЗаписиКнигиПродаж КАК ТаблицаНДСЗаписиКнигиПродаж
	|ГДЕ
	|	ТаблицаНДСЗаписиКнигиПродаж.Период МЕЖДУ &НачалоПериода И &КонецПериода";
	
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода",      ПараметрыРасчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",       ПараметрыРасчета.КонецПериода);
	
	Запрос.Выполнить();
	
	Возврат "НДСЗаписиКнигиПродажПоАвансамВыданным";
	
КонецФункции

Функция РассчитатьНДСЗаписиКнигиПродажОплатыСФ(ПараметрыРасчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	ПодтверждениеОплатыНДСВБюджет.НомерДокументаПеречисленияНалога КАК НомерДокументаОплаты,
	|	ПодтверждениеОплатыНДСВБюджет.ДатаДокументаПеречисленияНалога КАК ДатаДокументаОплаты,
	|	ПодтверждениеОплатыНДСВБюджет.СчетФактура КАК СчетФактура
	|ПОМЕСТИТЬ ВтДанныеОплат
	|ИЗ
	|	Документ.СчетФактураНалоговыйАгент КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задания КАК Задания
	|		ПО ДанныеДокумента.Ссылка = Задания.СчетФактура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодтверждениеОплатыНДСВБюджет КАК ПодтверждениеОплатыНДСВБюджет
	|		ПО ДанныеДокумента.Ссылка = ПодтверждениеОплатыНДСВБюджет.СчетФактура
	|ГДЕ
	|	ДанныеДокумента.ВидАгентскогоДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыАгентскихДоговоров.Нерезидент), ЗНАЧЕНИЕ(Перечисление.ВидыАгентскихДоговоров.НерезидентЭлектронныеУслуги))
	|	И ПодтверждениеОплатыНДСВБюджет.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОплатыНДСВБюджет.Оплачено)
	|	И ДанныеДокумента.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СписаниеБезналичныхДенежныхСредств.ДатаВходящегоДокумента, ДанныеПервичныхДокументов.Дата),
	|	ЕСТЬNULL(СписаниеБезналичныхДенежныхСредств.НомерВходящегоДокумента, ДанныеПервичныхДокументов.Номер),
	|	ЕСТЬNULL(СписаниеБезналичныхДенежныхСредств.ДатаВходящегоДокумента, ДанныеПервичныхДокументов.Дата),
	|	ДанныеДокумента.Ссылка
	|ИЗ
	|	Документ.СчетФактураНалоговыйАгент КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задания КАК Задания
	|		ПО ДанныеДокумента.Ссылка = Задания.СчетФактура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО (ДанныеПервичныхДокументов.Документ = ДанныеДокумента.ДокументОснование)
	|			И (ДанныеПервичныхДокументов.Организация = ДанныеДокумента.Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
	|		ПО ДанныеДокумента.ДокументОснование = СписаниеБезналичныхДенежныхСредств.Ссылка
	|ГДЕ
	|	НЕ ДанныеДокумента.ВидАгентскогоДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыАгентскихДоговоров.Нерезидент), ЗНАЧЕНИЕ(Перечисление.ВидыАгентскихДоговоров.НерезидентЭлектронныеУслуги))
	|	И ЕСТЬNULL(СписаниеБезналичныхДенежныхСредств.ДатаВходящегоДокумента, ДанныеПервичныхДокументов.Дата) МЕЖДУ &НачалоПериода И &КонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	2 КАК Приоритет,
	|	ВтДанныеОплат.Период КАК Период,
	|	НДСЗаписиКнигиПродаж.Регистратор КАК Регистратор,
	|	НДСЗаписиКнигиПродаж.Организация КАК Организация,
	|	НДСЗаписиКнигиПродаж.Покупатель КАК Покупатель,
	|	НДСЗаписиКнигиПродаж.СчетФактура КАК СчетФактура,
	|	НДСЗаписиКнигиПродаж.ВидЦенности КАК ВидЦенности,
	|	НДСЗаписиКнигиПродаж.СтавкаНДС КАК СтавкаНДС,
	|	НДСЗаписиКнигиПродаж.ДатаОплаты КАК ДатаОплаты,
	|	НДСЗаписиКнигиПродаж.ДокументОплаты КАК ДокументОплаты,
	|	НДСЗаписиКнигиПродаж.Событие КАК Событие,
	|	НДСЗаписиКнигиПродаж.ДатаСобытия КАК ДатаСобытия,
	|	НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста КАК ЗаписьДополнительногоЛиста,
	|	НДСЗаписиКнигиПродаж.КорректируемыйПериод КАК КорректируемыйПериод,
	|	НДСЗаписиКнигиПродаж.СторнирующаяЗаписьДопЛиста КАК СторнирующаяЗаписьДопЛиста,
	|	НДСЗаписиКнигиПродаж.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	НДСЗаписиКнигиПродаж.Исправление КАК Исправление,
	|	НДСЗаписиКнигиПродаж.ДатаСчетаФактурыКомиссионера КАК ДатаСчетаФактурыКомиссионера,
	|	0 КАК СуммаБезНДС,
	|	0 КАК НДС,
	|	НДСЗаписиКнигиПродаж.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	НДСЗаписиКнигиПродаж.КодВидаОперации КАК КодВидаОперации,
	|	ИСТИНА КАК РегламентнаяОперация,
	|	НДСЗаписиКнигиПродаж.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	НДСЗаписиКнигиПродаж.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	0 КАК НДСУпр,
	|	ВтДанныеОплат.НомерДокументаОплаты КАК НомерДокументаОплаты,
	|	ВтДанныеОплат.ДатаДокументаОплаты КАК ДатаДокументаОплаты
	|ПОМЕСТИТЬ НДСЗаписиКнигиПродажОплатыСФ
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеОплат КАК ВтДанныеОплат
	|		ПО НДСЗаписиКнигиПродаж.Регистратор = ВтДанныеОплат.СчетФактура
	|ГДЕ
	|	НЕ НДСЗаписиКнигиПродаж.РегламентнаяОперация";
	
	Запрос.УстановитьПараметр("НачалоПериода",     ПараметрыРасчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",      ПараметрыРасчета.КонецПериода);
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
	Возврат "НДСЗаписиКнигиПродажОплатыСФ";

КонецФункции

Функция РассчитатьНДСЗаписиКнигиПродажСохранение(ПараметрыРасчета, ИменаТаблицНДСЗаписиКнигиПродаж)
	
	МассивТекстовРегистраторыЗапись = Новый Массив;
	ШаблонЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСЗаписиКнигиПродаж.Регистратор
	|ИЗ
	|	%1 КАК НДСЗаписиКнигиПродаж";
	Для каждого ИмяТаблицыЗаписей Из ИменаТаблицНДСЗаписиКнигиПродаж Цикл
		МассивТекстовРегистраторыЗапись.Добавить(СтрШаблон(ШаблонЗапроса, ИмяТаблицыЗаписей));
	КонецЦикла;
	ТекстРегистраторыЗапись = СтрСоединить(МассивТекстовРегистраторыЗапись, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении(Истина));
	
	ТекстЗапросаСохранение =
	"ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК Регистратор
	|ПОМЕСТИТЬ РегистраторыЗапись
	|ГДЕ
	|	ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ
	|
	|%ТекстРегистраторыЗапись
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСЗаписиКнигиПродаж.Регистратор
	|ИЗ
	|	ТекущиеРегистраторыНДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|;
	|
	|ВЫБРАТЬ
	|	0 КАК Приоритет,
	|	НДСЗаписиКнигиПродаж.Период,
	|	НДСЗаписиКнигиПродаж.Регистратор,
	|	НДСЗаписиКнигиПродаж.Организация,
	|	НДСЗаписиКнигиПродаж.Покупатель,
	|	НДСЗаписиКнигиПродаж.СчетФактура,
	|	НДСЗаписиКнигиПродаж.ВидЦенности,
	|	НДСЗаписиКнигиПродаж.СтавкаНДС,
	|	НДСЗаписиКнигиПродаж.ДатаОплаты,
	|	НДСЗаписиКнигиПродаж.ДокументОплаты,
	|	НДСЗаписиКнигиПродаж.Событие,
	|	НДСЗаписиКнигиПродаж.ДатаСобытия,
	|	НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста,
	|	НДСЗаписиКнигиПродаж.КорректируемыйПериод,
	|	НДСЗаписиКнигиПродаж.СторнирующаяЗаписьДопЛиста,
	|	НДСЗаписиКнигиПродаж.ДоговорКонтрагента,
	|	НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура,
	|	НДСЗаписиКнигиПродаж.Исправление,
	|	НДСЗаписиКнигиПродаж.ДатаСчетаФактурыКомиссионера,
	|	НДСЗаписиКнигиПродаж.СуммаБезНДС,
	|	НДСЗаписиКнигиПродаж.НДС,
	|	НДСЗаписиКнигиПродаж.НДСУпр,
	|	НДСЗаписиКнигиПродаж.ХозяйственнаяОперация,
	|	НДСЗаписиКнигиПродаж.НомерДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.ДатаДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.КодВидаОперации,
	|	НДСЗаписиКнигиПродаж.РегламентнаяОперация,
	|	НДСЗаписиКнигиПродаж.ВидДеятельностиНДС,
	|	НДСЗаписиКнигиПродаж.НаправлениеДеятельности
	|ПОМЕСТИТЬ НДСЗаписиКнигиПродажСохранение
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистраторыЗапись КАК РегистраторыЗапись
	|	ПО 
	|		НДСЗаписиКнигиПродаж.Регистратор = РегистраторыЗапись.Регистратор
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Задания КАК Задания
	|	ПО
	|		НДСЗаписиКнигиПродаж.Организация = Задания.Организация
	|		И НДСЗаписиКнигиПродаж.СчетФактура = Задания.СчетФактура
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Задания КАК ЗаданияПоРегистратору
	|	ПО
	|		НДСЗаписиКнигиПродаж.Организация = ЗаданияПоРегистратору.Организация
	|		И НДСЗаписиКнигиПродаж.Регистратор = ЗаданияПоРегистратору.СчетФактура 
	|
	|ГДЕ
	|	(НЕ РегистраторыЗапись.Регистратор ЕСТЬ NULL)
	|	И (НДСЗаписиКнигиПродаж.Период < &НачалоПериода
	|			ИЛИ НДСЗаписиКнигиПродаж.Период > &КонецПериода
	|			ИЛИ НЕ НДСЗаписиКнигиПродаж.РегламентнаяОперация
	|			ИЛИ Задания.СчетФактура ЕСТЬ NULL
	|				И ЗаданияПоРегистратору.СчетФактура ЕСТЬ NULL)
	|;
	|
	|/////////////////////////////////////////////
	|УНИЧТОЖИТЬ РегистраторыЗапись";
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить(ТекстЗапросаСохранение, "%ТекстРегистраторыЗапись", ТекстРегистраторыЗапись);
	Запрос.УстановитьПараметр("НачалоПериода",     ПараметрыРасчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",      ПараметрыРасчета.КонецПериода);
	Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыРасчета.МассивОрганизаций);
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
	Возврат "НДСЗаписиКнигиПродажСохранение";
	
КонецФункции

Процедура ЗаписатьНДСЗаписиКнигиПродаж(ПараметрыРасчета, ИменаТаблицНДСЗаписиКнигиПродаж)
	
	МассивТекстовДанных = Новый Массив;
	ШаблонЗапроса =
	"ВЫБРАТЬ
	|	НДСЗаписиКнигиПродаж.Приоритет,
	|	НДСЗаписиКнигиПродаж.Период,
	|	НДСЗаписиКнигиПродаж.Регистратор,
	|	НДСЗаписиКнигиПродаж.Организация,
	|	НДСЗаписиКнигиПродаж.Покупатель,
	|	НДСЗаписиКнигиПродаж.СчетФактура,
	|	НДСЗаписиКнигиПродаж.ВидЦенности,
	|	НДСЗаписиКнигиПродаж.СтавкаНДС,
	|	НДСЗаписиКнигиПродаж.ДатаОплаты,
	|	НДСЗаписиКнигиПродаж.ДокументОплаты,
	|	НДСЗаписиКнигиПродаж.Событие,
	|	НДСЗаписиКнигиПродаж.ДатаСобытия,
	|	НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста,
	|	НДСЗаписиКнигиПродаж.КорректируемыйПериод,
	|	НДСЗаписиКнигиПродаж.СторнирующаяЗаписьДопЛиста,
	|	НДСЗаписиКнигиПродаж.ДоговорКонтрагента,
	|	НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура,
	|	НДСЗаписиКнигиПродаж.Исправление,
	|	НДСЗаписиКнигиПродаж.ДатаСчетаФактурыКомиссионера,
	|	НДСЗаписиКнигиПродаж.СуммаБезНДС,
	|	НДСЗаписиКнигиПродаж.НДС,
	|	НДСЗаписиКнигиПродаж.НДСУпр,
	|	НДСЗаписиКнигиПродаж.ХозяйственнаяОперация,
	|	НДСЗаписиКнигиПродаж.НомерДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.ДатаДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.КодВидаОперации,
	|	НДСЗаписиКнигиПродаж.РегламентнаяОперация,
	|	НДСЗаписиКнигиПродаж.ВидДеятельностиНДС,
	|	НДСЗаписиКнигиПродаж.НаправлениеДеятельности
	|ИЗ
	|	%1 КАК НДСЗаписиКнигиПродаж
	|";
	Для каждого ИмяТаблицыЗаписей Из ИменаТаблицНДСЗаписиКнигиПродаж Цикл
		МассивТекстовДанных.Добавить(СтрШаблон(ШаблонЗапроса, ИмяТаблицыЗаписей));
	КонецЦикла;
	ТекстДанныеДляЗаписи = СтрСоединить(МассивТекстовДанных, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		ТекстДанныеДляЗаписи
		+ "
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор,
		|	Период,
		|	Приоритет
		|
		|ИТОГИ ПО
		|	Регистратор
		|";
		
	Запрос.УстановитьПараметр("НачалоПериода",     ПараметрыРасчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  ПараметрыРасчета.КонецПериода);
	Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыРасчета.МассивОрганизаций);
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	
	ВыборкаДокумент = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДокумент.Следующий() Цикл
		
		НаборЗаписей = РегистрыНакопления.НДСЗаписиКнигиПродаж.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДокумент.Регистратор);
		
		Выборка = ВыборкаДокумент.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;

КонецПроцедуры

Процедура ОчиститьНДСЗаписиКнигиПродаж(ПараметрыРасчета, ИменаТаблицНДСЗаписиКнигиПродаж)
	
	МассивТекстовРегистраторыЗапись = Новый Массив;
	ШаблонЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСЗаписиКнигиПродаж.Регистратор
	|ИЗ
	|	%1 КАК НДСЗаписиКнигиПродаж";
	Для каждого ИмяТаблицыЗаписей Из ИменаТаблицНДСЗаписиКнигиПродаж Цикл
		МассивТекстовРегистраторыЗапись.Добавить(СтрШаблон(ШаблонЗапроса, ИмяТаблицыЗаписей));
	КонецЦикла;
	ТекстРегистраторыЗапись = СтрСоединить(МассивТекстовРегистраторыЗапись, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении(Истина));
	
	ТекстУстаревшиеРегистраторы = 
	"ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК Регистратор
	|ПОМЕСТИТЬ РегистраторыЗапись
	|ГДЕ
	|	ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ
	|
	|%ТекстРегистраторыЗапись
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|//////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УстаревшиеРегистраторы.Регистратор
	|ИЗ
	|	ТекущиеРегистраторыНДСЗаписиКнигиПродаж КАК УстаревшиеРегистраторы
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистраторыЗапись КАК РегистраторыЗапись
	|	ПО
	|		УстаревшиеРегистраторы.Регистратор = РегистраторыЗапись.Регистратор
	|
	|ГДЕ
	|	РегистраторыЗапись.Регистратор ЕСТЬ NULL
	|;
	|
	|//////////////////////////////////////////////
	|УНИЧТОЖИТЬ РегистраторыЗапись
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить(ТекстУстаревшиеРегистраторы, "%ТекстРегистраторыЗапись", ТекстРегистраторыЗапись);
	Запрос.УстановитьПараметр("НачалоПериода",     ПараметрыРасчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",      ПараметрыРасчета.КонецПериода);
	Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыРасчета.МассивОрганизаций);
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	
	ВыборкаДокумент = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДокумент.Следующий() Цикл
		
		НаборЗаписей = РегистрыНакопления.НДСЗаписиКнигиПродаж.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДокумент.Регистратор);
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

// Процедура дополняет запрос получения данных шапок документов для печатной формы УПД признаком ТребуетсяНаличиеСФ
// Этот признак необходим для определения статуса формы УПД 1 (если требуется СФ) или 2 (только первичный документ, без СФ)
// 
// Параметры:
//  Запрос - Запрос - запрос с текстом формирования временнной таблицы ТаблицаДанныхДокументов
//
Процедура ДополнитьЗапросПолученияДанныхДляПечатиУПД(Запрос, ДополнительныеПоля = "") Экспорт
	
	ПоляЗапроса = "Валюта,Организация,Подразделение,Склад," + ДополнительныеПоля;
	МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ПоляЗапроса,",");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПОМЕСТИТЬ ТаблицаДанныхДокументов", "ПОМЕСТИТЬ ТаблицаДанныхДокументов_Предварительная");
	ТекстТребуетсяНаличиеСФ = "
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПервичныхДокументов.ДатаРегистратора КАК Дата,
	|	ДанныеПервичныхДокументов.Организация КАК Организация,
	|	ДанныеПервичныхДокументов.Документ КАК Ссылка
	|ПОМЕСТИТЬ ДанныеПервичныхДокументов
	|ИЗ
	|	РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|ГДЕ
	|	ДанныеПервичныхДокументов.Документ В (&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПервичныхДокументов.Организация       КАК Организация,
	|	ДанныеПервичныхДокументов.Ссылка            КАК Ссылка,
	|	МАКСИМУМ(УчетнаяПолитикаОрганизаций.Период) КАК Период
	|ПОМЕСТИТЬ ПериодыУчетныхПолитик
	|ИЗ
	|	ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|	ПО
	|		ДанныеПервичныхДокументов.Дата >= УчетнаяПолитикаОрганизаций.Период
	|		И ДанныеПервичныхДокументов.Организация = УчетнаяПолитикаОрганизаций.Организация
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДанныеПервичныхДокументов.Организация,
	|	ДанныеПервичныхДокументов.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыУчетныхПолитик.Организация                     КАК Организация,
	|	ПериодыУчетныхПолитик.Ссылка                          КАК Ссылка,
	|	СпрУчетныеПолитики.ПрименяетсяОсвобождениеОтУплатыНДС КАК ПрименяетсяОсвобождениеОтУплатыНДС
	|ПОМЕСТИТЬ УчетнаяПолитика
	|ИЗ
	|	ПериодыУчетныхПолитик КАК ПериодыУчетныхПолитик
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|	ПО
	|		ПериодыУчетныхПолитик.Период = УчетнаяПолитикаОрганизаций.Период
	|		И ПериодыУчетныхПолитик.Организация = УчетнаяПолитикаОрганизаций.Организация
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.УчетныеПолитикиОрганизаций КАК СпрУчетныеПолитики
	|	ПО
	|		УчетнаяПолитикаОрганизаций.УчетнаяПолитика = СпрУчетныеПолитики.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка,
	|	&Поля,
	|	МАКСИМУМ(
	|		ВЫБОР
	|			КОГДА НЕ ЖурналФискальныхОпераций.ДокументОснование ЕСТЬ NULL
	|				ТОГДА ЛОЖЬ
	|			КОГДА ДанныеОснованийСчетовФактур.НалогообложениеНДС В (
	|						ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС))
	|					И УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС
	|				ТОГДА ИСТИНА
	|			КОГДА ДанныеОснованийСчетовФактур.НалогообложениеНДС В (
	|						ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт),
	|						ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг),
	|						ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров),
	|						ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС),
	|						ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПроизводствоСДЦ),
	|						ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.РеализацияРаботУслугНаЭкспорт),
	|						ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя))
	|					И ДанныеОснованийСчетовФактур.СтавкаНДС <> ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|				ТОГДА ИСТИНА
	|			КОГДА ДанныеОснованийСчетовФактур.НалогообложениеНДС ЕСТЬ NULL
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ТребуетсяНаличиеСФ
	|ПОМЕСТИТЬ ТаблицаДанныхДокументов
	|ИЗ
	|	ТаблицаДанныхДокументов_Предварительная КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеОснованийСчетовФактур КАК ДанныеОснованийСчетовФактур
	|		ПО ДанныеДокументов.Ссылка = ДанныеОснованийСчетовФактур.Регистратор
	|			И (ДанныеОснованийСчетовФактур.ТипСчетаФактуры = &ИдентификаторМетаданных)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналФискальныхОпераций КАК ЖурналФискальныхОпераций
	|		ПО ДанныеДокументов.Ссылка = ЖурналФискальныхОпераций.ДокументОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ УчетнаяПолитика КАК УчетнаяПолитика
	|		ПО ДанныеДокументов.Ссылка = УчетнаяПолитика.Ссылка
	|			И ДанныеДокументов.Организация = УчетнаяПолитика.Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокументов.Ссылка,
	|	&Поля
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДанныеДокументов.Ссылка
	|;";
	Для Индекс = 0 По МассивПолей.Количество()-1 Цикл
		МассивПолей[Индекс] = СтрШаблон("ДанныеДокументов.%1", МассивПолей[Индекс]);
	КонецЦикла;
	ТекстПолей = СтрСоединить(МассивПолей,",");
	ТекстТребуетсяНаличиеСФ = СтрЗаменить(ТекстТребуетсяНаличиеСФ, "&Поля", ТекстПолей);
	Запрос.Текст = Запрос.Текст + ТекстТребуетсяНаличиеСФ;
	Запрос.УстановитьПараметр("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.СчетФактураВыданный"));
	
КонецПроцедуры

Функция ЗаписатьДвиженияЖурналаСФ(ДокументДвижений, НаборЗаписей, РучнаяКорректировка, Отказ) Экспорт

	Если РучнаяКорректировка Тогда

		Попытка
			НачатьТранзакцию();
			ДокОбъект = ДокументДвижений.ПолучитьОбъект();
			Если Не ДокОбъект.РучнаяКорректировкаЖурналаСФ Тогда
				ДокОбъект.РучнаяКорректировкаЖурналаСФ = Истина;
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументДвижений);
			НаборЗаписей.УстановитьАктивность(Истина);
			НаборЗаписей.Записать(Истина);
			ЗафиксироватьТранзакцию();
			Возврат Истина;
		Исключение
			Отказ = Истина;
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ручная корректировка журнала СФ'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,, 
				ДокументДвижений, 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
	Иначе
		
		Попытка
			НачатьТранзакцию();
			ДокОбъект = ДокументДвижений.ПолучитьОбъект();
			Если ДокОбъект.РучнаяКорректировкаЖурналаСФ Тогда
				ДокОбъект.РучнаяКорректировкаЖурналаСФ = Ложь;
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			ДополнительныеСвойства = Новый Структура;
			ДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура);
			Движения = Новый Структура;
			ЖурналУчетаСчетовФактур = РегистрыСведений.ЖурналУчетаСчетовФактур.СоздатьНаборЗаписей();
			ЖурналУчетаСчетовФактур.Отбор.Регистратор.Установить(ДокументДвижений);
			Движения.Вставить("ЖурналУчетаСчетовФактур", ЖурналУчетаСчетовФактур);
			Регистры = Новый Структура;
			Регистры.Вставить("ЖурналУчетаСчетовФактур");
			МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументДвижений);
			МенеджерДокумента.ИнициализироватьДанныеДокумента(ДокументДвижений, ДополнительныеСвойства, Регистры);
			УчетНДСУП.СформироватьДвиженияВРегистры(ДополнительныеСвойства, Движения, Ложь);
			Движения.ЖурналУчетаСчетовФактур.Записать();
			ЗафиксироватьТранзакцию();
			Возврат Ложь;
		Исключение
			Отказ = Истина;
			ОтменитьТранзакцию();
			ШаблонОшибки = НСтр("ru='Не удалось перепровести документ по причине %1'") 
				+ Символы.ПС + НСтр("ru='Проведение документа отменено.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки, 
				ОписаниеОшибки());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументДвижений);
			ВызватьИсключение;
		КонецПопытки;

	КонецЕсли;

КонецФункции

#КонецОбласти