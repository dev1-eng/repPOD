
#Область ПрограммныйИнтерфейс

#Область ПроцедурыИФункцииВыбораДокументаРасчетов

// Заполнение данных выбора основания платежа.
//
// Параметры:
//		ДанныеВыбора - Структура - Заполняемые данные выбора.
//		Текст - Строка - Текст для поиска.
//		СтруктураОтбора - Структура - Отбор.
//		ЭтоУИП - Булево - Признак поиска по УИП.
//
Процедура ЗаполнитьДанныеВыбораОснованияПлатежа(ДанныеВыбора, Текст, СтруктураОтбора, ЭтоУИП = Ложь) Экспорт
	
	ВыборОснованияПлатежа = Истина;
	
	Запрос = Новый Запрос;
	Если СтруктураОтбора.Свойство("ХозяйственнаяОперация")
		И СтруктураОтбора.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика Тогда
		
		ПараметрыОтбора = ПараметрыОтбораПриВыбореДокументаРасчетовСПоставщиками();
		ПараметрыОтбора.ВводПоСтроке = Истина;
		
		Запрос.Текст = ПолучитьТекстЗапросаДокументыРасчетовСПоставщиками(ПараметрыОтбора);
		Запрос.УстановитьПараметр("СтатьяДвиженияДенежныхСредств", Неопределено);
		Запрос.УстановитьПараметр("ОперацииРаздельнойЗакупки", ЗакупкиСервер.ХозяйственныеОперацииРаздельнойЗакупкиБезОтборов());
	Иначе
		
		ПараметрыОтбора = ПараметрыОтбораПриВыбореДокументаРасчетовСКлиентами();
		ПараметрыОтбора.ВводПоСтроке = Истина;
		ПараметрыОтбора.ЭтоУИП       = ЭтоУИП;
		
		Запрос.Текст = ПолучитьТекстЗапросаДокументыРасчетовСКлиентами(ВыборОснованияПлатежа, ПараметрыОтбора);
		
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация", СтруктураОтбора.Организация);
	Запрос.УстановитьПараметр("Контрагент", СтруктураОтбора.Контрагент);
	Запрос.УстановитьПараметр("ВыборОснованияПлатежа", ВыборОснованияПлатежа);
	Запрос.УстановитьПараметр("СтрокаПоиска", "%" + Текст + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗначениеВыбора = Новый Структура("ОснованиеПлатежа, Заказ, Партнер, Контрагент, ИдентификаторПлатежа,
			|СтатьяДвиженияДенежныхСредств, ВалютаВзаиморасчетов");
		ЗаполнитьЗначенияСвойств(ЗначениеВыбора, Выборка);
		ЗначениеВыбора.ОснованиеПлатежа      = Выборка.Ссылка;
		ЗначениеВыбора.Заказ                 = Выборка.ОбъектРасчетов;
		ЗначениеВыбора.ВалютаВзаиморасчетов  = Выборка.Валюта;
		
		ДанныеВыбора.Добавить(
			Новый Структура("Значение, ПометкаУдаления",
				ЗначениеВыбора,
				(Выборка.СостояниеДокумента = 1)),
			?(ЭтоУИП, Строка(Выборка.ИдентификаторПлатежа) + " (" + Строка(Выборка.Контрагент)+ ")" ,Строка(Выборка.Ссылка)));
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает текст запроса по документам расчетов с клиентами.
//
// Параметры:
//		ПараметрыОтбора - Структура - См. подробное описание в ПараметрыОтбораПриВыбореДокументаРасчетовСКлиентами).
//
// Возвращаемое значение:
// 		Строка - Текст запроса.
//
Функция ПолучитьТекстЗапросаДокументыРасчетовСКлиентами(ВыборОснованияПлатежа, ПараметрыОтбора) Экспорт
	
	ТекстЗапроса = "";
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаказКлиента) Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.НомерПоДаннымКлиента КАК НомерПоДаннымКонтрагента,
		|	ДанныеДокумента.ДатаПоДаннымКлиента КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ЗаказКлиента КАК ДанныеДокумента
		|ГДЕ
		|	(ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|		ИЛИ (&ВыборОснованияПлатежа И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)))
		|	И НЕ ДанныеДокумента.ХозяйственнаяОперация В(
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи))
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("ДокументСсылка.ЗаказКлиента"), ПараметрыОтбора);
		
	КонецЕсли;
	
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.РеализацияТоваровУслуг) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	"""" КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ДанныеДокумента.СуммаВзаиморасчетов КАК Сумма,
		|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
		|ГДЕ
		|	(ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|		ИЛИ (Не ДанныеДокумента.РеализацияПоЗаказам И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|		ИЛИ (&ВыборОснованияПлатежа И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)))
		|	И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("ДокументСсылка.РеализацияТоваровУслуг"), ПараметрыОтбора);
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ВыкупВозвратнойТарыКлиентом) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	"""" КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ДанныеДокумента.СуммаВзаиморасчетов КАК Сумма,
		|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ВыкупВозвратнойТарыКлиентом КАК ДанныеДокумента
		|ГДЕ
		|	(ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|		ИЛИ ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|		ИЛИ (&ВыборОснованияПлатежа И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)))
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("ДокументСсылка.ВыкупВозвратнойТарыКлиентом"), ПараметрыОтбора);
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.АктВыполненныхРабот) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	"""" КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ДанныеДокумента.СуммаВзаиморасчетов КАК Сумма,
		|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.АктВыполненныхРабот КАК ДанныеДокумента
		|ГДЕ
		|	(ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|		ИЛИ (Не ДанныеДокумента.АктПоЗаказам И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|		ИЛИ (&ВыборОснованияПлатежа И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)))
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("ДокументСсылка.АктВыполненныхРабот"), ПараметрыОтбора);
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ОтчетКомиссионера) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.НомерВходящегоДокумента КАК НомерПоДаннымКонтрагента,
		|	ДанныеДокумента.ДатаВходящегоДокумента КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ОтчетКомиссионера КАК ДанныеДокумента
		|ГДЕ
		|	ИСТИНА
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("ДокументСсылка.ОтчетКомиссионера"), ПараметрыОтбора);
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ОтчетКомиссионераОСписании) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.НомерВходящегоДокумента КАК НомерПоДаннымКонтрагента,
		|	ДанныеДокумента.ДатаВходящегоДокумента КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ОтчетКомиссионераОСписании КАК ДанныеДокумента
		|ГДЕ
		|	ИСТИНА
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("ДокументСсылка.ОтчетКомиссионераОСписании"), ПараметрыОтбора);
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ОтчетКомитенту) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	"""" КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ДанныеДокумента.СуммаВознаграждения КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ОтчетКомитенту КАК ДанныеДокумента
		|ГДЕ
		|	НЕ ДанныеДокумента.УдержатьВознаграждение
		|	И ДанныеДокумента.СуммаВознаграждения <> 0
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("ДокументСсылка.ОтчетКомитенту"), ПараметрыОтбора);
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	"""" КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента	
		|ГДЕ
		|	(ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|		ИЛИ (&ВыборОснованияПлатежа И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)))
		|	И НЕ ДанныеДокумента.ХозяйственнаяОперация В(
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтХранителя))
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента"), ПараметрыОтбора);
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ПередачаТоваровМеждуОрганизациями) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.НомерВходящегоДокумента 
		|	ИНАЧЕ
		|		""""
		|	КОНЕЦ КАК НомерПоДаннымКонтрагента,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.ДатаВходящегоДокумента
		|	ИНАЧЕ
		|		ДАТАВРЕМЯ(1,1,1)
		|	КОНЕЦ КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Партнер
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|	КОНЕЦ КАК Партнер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Контрагент
		|	ИНАЧЕ
		|		ДанныеДокумента.ОрганизацияПолучатель
		|	КОНЕЦ КАК Контрагент,
		|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
		|	
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыМеждуОрганизациями КАК Договоры
		|	ПО ДанныеДокумента.Договор = Договоры.Ссылка
		|		И Договоры.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|ГДЕ
		|	ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию)
		|	И Договоры.Ссылка ЕСТЬ NULL
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями"), ПараметрыОтбора);
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациями) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ // документы на основную сумму
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.НомерВходящегоДокумента 
		|	ИНАЧЕ
		|		""""
		|	КОНЕЦ КАК НомерПоДаннымКонтрагента,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.ДатаВходящегоДокумента
		|	ИНАЧЕ
		|		ДАТАВРЕМЯ(1,1,1)
		|	КОНЕЦ КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Партнер
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|	КОНЕЦ КАК Партнер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Контрагент
		|	ИНАЧЕ
		|		ДанныеДокумента.Комиссионер
		|	КОНЕЦ КАК Контрагент,
		|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
		|
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыМеждуОрганизациями КАК Договоры
		|	ПО ДанныеДокумента.Договор = Договоры.Ссылка
		|		И Договоры.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|ГДЕ
		|	Договоры.Ссылка ЕСТЬ NULL
		|";
		
		Если ПараметрыОтбора.ВводПоСтроке Или ПараметрыОтбора.ОтборПоОрганизацииИКонтрагенту Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Организация В (&Организация)
			|	И ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
			|		ДанныеДокумента.Контрагент
			|	ИНАЧЕ
			|		ДанныеДокумента.Комиссионер
			|	КОНЕЦ В (&Контрагент)
			|";
		КонецЕсли;
		
		Если ПараметрыОтбора.ВводПоСтроке И Не ПараметрыОтбора.ЭтоУИП Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска
			|";
		КонецЕсли;
			
		Если ПараметрыОтбора.ВводПоСтроке И ПараметрыОтбора.ЭтоУИП Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.ИдентификаторПлатежа ПОДОБНО &СтрокаПоиска
			|";
		КонецЕсли;
		
		Если Не ПараметрыОтбора.ВводПоСтроке И ПараметрыОтбора.ЭтоУИП Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Организация В (&Организация)
			|	И ДанныеДокумента.ИдентификаторПлатежа В (&СтрокаПоиска)
			|";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|
		|ВЫБРАТЬ // документы на сумму вознаграждения
		|	ДанныеДокумента.Ссылка,
		|	ДанныеДокумента.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.НомерВходящегоДокумента 
		|	ИНАЧЕ
		|		""""
		|	КОНЕЦ КАК НомерПоДаннымКонтрагента,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.ДатаВходящегоДокумента
		|	ИНАЧЕ
		|		ДАТАВРЕМЯ(1,1,1)
		|	КОНЕЦ КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Комиссионер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Партнер
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|	КОНЕЦ КАК Партнер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Контрагент
		|	ИНАЧЕ
		|		ДанныеДокумента.Организация
		|	КОНЕЦ КАК Контрагент,
		|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
			
		|	ДанныеДокумента.СуммаВознаграждения,
		|	ДанныеДокумента.Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ИСТИНА,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ
		|ИЗ
		|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыМеждуОрганизациями КАК Договоры
		|	ПО ДанныеДокумента.Договор = Договоры.Ссылка
		|		И Договоры.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|ГДЕ
		|	(НЕ ДанныеДокумента.УдержатьВознаграждение)
		|	И ДанныеДокумента.СпособРасчетаВознаграждения <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается)
		|	И ДанныеДокумента.СуммаВознаграждения <> 0
		|	И Договоры.Ссылка ЕСТЬ NULL
		|";
		
		Если ПараметрыОтбора.ВводПоСтроке И Не ПараметрыОтбора.ЭтоУИП 
				Или ПараметрыОтбора.ОтборПоОрганизацииИКонтрагенту Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Комиссионер В (&Организация)
			|	И ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
			|		ДанныеДокумента.Контрагент
			|	ИНАЧЕ
			|		ДанныеДокумента.Организация
			|	КОНЕЦ В (&Контрагент)
			|";
		КонецЕсли;
		
		Если ПараметрыОтбора.ВводПоСтроке И Не ПараметрыОтбора.ЭтоУИП Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска
			|";
		КонецЕсли;
			
		Если ПараметрыОтбора.ВводПоСтроке И ПараметрыОтбора.ЭтоУИП Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Организация В (&Организация)
			|	И ДанныеДокумента.ИдентификаторПлатежа ПОДОБНО &СтрокаПоиска
			|";
		КонецЕсли;
		
		Если Не ПараметрыОтбора.ВводПоСтроке И ПараметрыОтбора.ЭтоУИП Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Организация В (&Организация)
			|	И ДанныеДокумента.ИдентификаторПлатежа В (&СтрокаПоиска)
			|";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ // документы на основную сумму
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.НомерВходящегоДокумента 
		|	ИНАЧЕ
		|		""""
		|	КОНЕЦ КАК НомерПоДаннымКонтрагента,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.ДатаВходящегоДокумента
		|	ИНАЧЕ
		|		ДАТАВРЕМЯ(1,1,1)
		|	КОНЕЦ КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Партнер
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|	КОНЕЦ КАК Партнер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Контрагент
		|	ИНАЧЕ
		|		ДанныеДокумента.Комиссионер
		|	КОНЕЦ КАК Контрагент,
		|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
		|
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ОтчетПоКомиссииМеждуОрганизациямиОСписании КАК ДанныеДокумента
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыМеждуОрганизациями КАК Договоры
		|	ПО ДанныеДокумента.Договор = Договоры.Ссылка
		|		И Договоры.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|ГДЕ
		|	Договоры.Ссылка ЕСТЬ NULL
		|";
		
		Если ПараметрыОтбора.ВводПоСтроке Или ПараметрыОтбора.ОтборПоОрганизацииИКонтрагенту Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Организация В (&Организация)
			|	И ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
			|		ДанныеДокумента.Контрагент
			|	ИНАЧЕ
			|		ДанныеДокумента.Комиссионер
			|	КОНЕЦ В (&Контрагент)
			|";
		КонецЕсли;
		
		Если ПараметрыОтбора.ВводПоСтроке И Не ПараметрыОтбора.ЭтоУИП Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска
			|";
		КонецЕсли;
			
		Если ПараметрыОтбора.ВводПоСтроке И ПараметрыОтбора.ЭтоУИП Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.ИдентификаторПлатежа ПОДОБНО &СтрокаПоиска
			|";
		КонецЕсли;
		
		Если Не ПараметрыОтбора.ВводПоСтроке И ПараметрыОтбора.ЭтоУИП Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Организация В (&Организация)
			|	И ДанныеДокумента.ИдентификаторПлатежа В (&СтрокаПоиска)
			|";
		КонецЕсли;
				
	КонецЕсли;

	Если ПравоДоступа("Чтение", Метаданные.Справочники.ДоговорыКонтрагентов) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	"""" КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ДанныеДокумента.Партнер КАК Партнер,
		|	ДанныеДокумента.Контрагент КАК Контрагент,
		|	ДанныеДокумента.Ссылка КАК Договор,
		|
		|	0 КАК Сумма,
		|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Ссылка
		|	ИНАЧЕ
		|		Неопределено
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|	И ДанныеДокумента.ХозяйственнаяОперация В (
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи)
		|	)
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("СправочникСсылка.ДоговорыКонтрагентов"), ПараметрыОтбора);
		
		Если ПараметрыОтбора.ОтборПоОрганизацииИКонтрагенту Тогда
			ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
			"
			|ВЫБРАТЬ
			|	ДанныеРегистра.ЗаказКлиента КАК Ссылка,
			|	ВЫРАЗИТЬ(ДанныеРегистра.ЗаказКлиента КАК Справочник.ДоговорыКонтрагентов).ИдентификаторПлатежа КАК ИдентификаторПлатежа,
			|	ВЫРАЗИТЬ(ДанныеРегистра.ЗаказКлиента КАК Справочник.ДоговорыКонтрагентов).Дата КАК Дата,
			|	ВЫРАЗИТЬ(ДанныеРегистра.ЗаказКлиента КАК Справочник.ДоговорыКонтрагентов).Номер КАК Номер,
			|	"""" КАК НомерПоДаннымКонтрагента,
			|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
			|	ВЫРАЗИТЬ(ДанныеРегистра.ЗаказКлиента КАК Справочник.ДоговорыКонтрагентов).Организация КАК Организация,
			|	ВЫРАЗИТЬ(ДанныеРегистра.ЗаказКлиента КАК Справочник.ДоговорыКонтрагентов).Партнер КАК Партнер,
			|	ВЫРАЗИТЬ(ДанныеРегистра.ЗаказКлиента КАК Справочник.ДоговорыКонтрагентов).Контрагент КАК Контрагент,
			|	ВЫРАЗИТЬ(ДанныеРегистра.ЗаказКлиента КАК Справочник.ДоговорыКонтрагентов) КАК Договор,
			|
			|	0 КАК Сумма,
			|	ВЫРАЗИТЬ(ДанныеРегистра.ЗаказКлиента КАК Справочник.ДоговорыКонтрагентов).ВалютаВзаиморасчетов КАК Валюта,
			|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.ЗаказКлиента.Ссылка) КАК Тип,
			|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
			|	Неопределено КАК ОбъектРасчетов,
			|	
			|	ВЫБОР КОГДА ДанныеРегистра.ЗаказКлиента.ПометкаУдаления ТОГДА
			|		1
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК СостояниеДокумента
			|ИЗ
			|	РегистрНакопления.РасчетыСКлиентами.Остатки(,
			|		АналитикаУчетаПоПартнерам.Контрагент В (&Контрагент)
			|		И АналитикаУчетаПоПартнерам.Организация В (&Организация)
			|		И ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов) КАК ДанныеРегистра
			|ГДЕ
			|	ВЫРАЗИТЬ(ДанныеРегистра.ЗаказКлиента КАК Справочник.ДоговорыКонтрагентов).ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
			|	И ВЫРАЗИТЬ(ДанныеРегистра.ЗаказКлиента КАК Справочник.ДоговорыКонтрагентов).ХозяйственнаяОперация В (
			|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту),
			|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию),
			|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
			|	)
			|";
		КонецЕсли;
	КонецЕсли;
		
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ДоговорыМеждуОрганизациями) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	"""" КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) КАК Партнер,
		|	ДанныеДокумента.ОрганизацияПолучатель КАК Контрагент,
		|	ДанныеДокумента.Ссылка КАК Договор,
		|
		|	0 КАК Сумма,
		|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Ссылка
		|	ИНАЧЕ
		|		Неопределено
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Справочник.ДоговорыМеждуОрганизациями КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("СправочникСсылка.ДоговорыМеждуОрганизациями"), ПараметрыОтбора);
		
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	"""" КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.ОрганизацияПолучатель КАК Организация,
		|	ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) КАК Партнер,
		|	ДанныеДокумента.Организация КАК Контрагент,
		|	ДанныеДокумента.Ссылка КАК Договор,
		|
		|	0 КАК Сумма,
		|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Ссылка
		|	ИНАЧЕ
		|		Неопределено
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Справочник.ДоговорыМеждуОрганизациями КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|	И ДанныеДокумента.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровМеждуОрганизациями.Комиссионный)
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("СправочникСсылка.ДоговорыМеждуОрганизациями"), ПараметрыОтбора);
		
	КонецЕсли;
		
	Если ВыборОснованияПлатежа И ПравоДоступа("Чтение", Метаданные.Документы.СчетНаОплатуКлиенту) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	"""" КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.ДокументОснование ССЫЛКА Документ.ЗаказКлиента
		|		И ДанныеДокумента.ДокументОснование.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|		ТОГДА ДанныеДокумента.ДокументОснование
		|	КОГДА ДанныеДокумента.Договор.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.ДокументОснование
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.СчетНаОплатуКлиенту КАК ДанныеДокумента
		|ГДЕ
		|	ИСТИНА
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("ДокументСсылка.СчетНаОплатуКлиенту"), ПараметрыОтбора);
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.РеализацияУслугПрочихАктивов) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	"""" КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ДанныеДокумента.СуммаВзаиморасчетов КАК Сумма,
		|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.РеализацияУслугПрочихАктивов КАК ДанныеДокумента
		|ГДЕ
		|	(ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|		ИЛИ ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|		ИЛИ (&ВыборОснованияПлатежа И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)))
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("ДокументСсылка.РеализацияУслугПрочихАктивов"), ПараметрыОтбора);
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ВозвратТоваровОтКлиента) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	"""" КАК ИдентификаторПлатежа,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.НомерВходящегоДокумента КАК НомерПоДаннымКонтрагента,
		|	ДанныеДокумента.ДатаВходящегоДокумента КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
		|	
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ВозвратТоваровОтКлиента КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.СпособКомпенсации = ЗНАЧЕНИЕ(Перечисление.СпособыКомпенсацииВозвратовТоваров.ВернутьДенежныеСредства)
		|	И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
		|";
		
		ПараметрыОтбораВозврат = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыОтбора);
		ПараметрыОтбораВозврат.Вставить("ЭтоУИП", Ложь);
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("ДокументСсылка.ВозвратТоваровОтКлиента"), ПараметрыОтбораВозврат);
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств) Тогда
		
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка                  КАК Ссылка,
		|	""""                                    КАК ИдентификаторПлатежа,
		|	ДанныеДокумента.Дата                    КАК Дата,
		|	ДанныеДокумента.Номер                   КАК Номер,
		|	ДанныеДокумента.НомерВходящегоДокумента КАК НомерПоДаннымКонтрагента,
		|	ДанныеДокумента.ДатаВходящегоДокумента  КАК ДатаПоДаннымКонтрагента,
		|	ДанныеРасшифровкаПлатежа.Организация    КАК Организация,
		|	ДанныеРасшифровкаПлатежа.Партнер        КАК Партнер,
		|	ДанныеДокумента.Контрагент              КАК Контрагент,
		|	ДанныеДокумента.Договор                 КАК Договор,
		|	ДанныеРасшифровкаПлатежа.СуммаВзаиморасчетов          КАК Сумма,
		|	ДанныеРасшифровкаПлатежа.ВалютаВзаиморасчетов                  КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка)     КАК Тип,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
		|			ИЛИ ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                          КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка                         КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ                                          КАК СостояниеДокумента
		|ИЗ
		|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ДанныеРасшифровкаПлатежа
		|			ПО ДанныеДокумента.Ссылка = ДанныеРасшифровкаПлатежа.Ссылка
		|				И ДанныеРасшифровкаПлатежа.Заказ = ДанныеДокумента.Ссылка
		|ГДЕ
		|	ДанныеДокумента.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента),
		|												ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации),
		|												ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика),
		|												ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации))
		|	И ДанныеДокумента.ПроведеноБанком
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств"), ПараметрыОтбора);
		
	КонецЕсли;
		
	Если ПравоДоступа("Чтение", Метаданные.Документы.СписаниеБезналичныхДенежныхСредств) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка                  КАК Ссылка,
		|	""""                                    КАК ИдентификаторПлатежа,
		|	ДанныеДокумента.Дата                    КАК Дата,
		|	ДанныеДокумента.Номер                   КАК Номер,
		|	ДанныеДокумента.НомерВходящегоДокумента КАК НомерПоДаннымКонтрагента,
		|	ДанныеДокумента.ДатаВходящегоДокумента  КАК ДатаПоДаннымКонтрагента,
		|	ДанныеРасшифровкаПлатежа.Организация    КАК Организация,
		|	ДанныеРасшифровкаПлатежа.Партнер        КАК Партнер,
		|	ДанныеДокумента.Контрагент              КАК Контрагент,
		|	ДанныеДокумента.Договор                 КАК Договор,
		|	ДанныеРасшифровкаПлатежа.СуммаВзаиморасчетов  КАК Сумма,
		|	ДанныеРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка)     КАК Тип,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
		|			ИЛИ ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                          КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка                         КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Ссылка.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.Ссылка.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ДанныеРасшифровкаПлатежа
		|			ПО ДанныеДокумента.Ссылка = ДанныеРасшифровкаПлатежа.Ссылка
		|				И ДанныеРасшифровкаПлатежа.Заказ = ДанныеДокумента.Ссылка
		|ГДЕ
		|	ДанныеДокумента.ХозяйственнаяОперация В (
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеТаможне),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию))
		|	И ДанныеДокумента.ПроведеноБанком
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств"), ПараметрыОтбора);
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.РасходныйКассовыйОрдер) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка                         КАК Ссылка,
		|	""""                                           КАК ИдентификаторПлатежа,
		|	ДанныеДокумента.Дата                           КАК Дата,
		|	ДанныеДокумента.Номер                          КАК Номер,
		|	""""                                           КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1)                               КАК ДатаПоДаннымКонтрагента,
		|	ДанныеРасшифровкаПлатежа.Организация           КАК Организация,
		|	ДанныеРасшифровкаПлатежа.Партнер               КАК Партнер,
		|	ДанныеДокумента.Контрагент                     КАК Контрагент,
		|	ДанныеДокумента.Договор                        КАК Договор,
		|	ДанныеРасшифровкаПлатежа.СуммаВзаиморасчетов   КАК Сумма,
		|	ДанныеРасшифровкаПлатежа.ВалютаВзаиморасчетов  КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка)            КАК Тип,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
		|			ИЛИ ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                          КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка                         КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ                                          КАК СостояниеДокумента
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеРасшифровкаПлатежа
		|			ПО ДанныеДокумента.Ссылка = ДанныеРасшифровкаПлатежа.Ссылка
		|				И ДанныеРасшифровкаПлатежа.Заказ = ДанныеДокумента.Ссылка
		|ГДЕ
		|	ДанныеДокумента.ХозяйственнаяОперация В (
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию))
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("ДокументСсылка.РасходныйКассовыйОрдер"), ПараметрыОтбора);
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ПриходныйКассовыйОрдер) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка                        КАК Ссылка,
		|	""""                                          КАК ИдентификаторПлатежа,
		|	ДанныеДокумента.Дата                          КАК Дата,
		|	ДанныеДокумента.Номер                         КАК Номер,
		|	""""                                          КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1)                              КАК ДатаПоДаннымКонтрагента,
		|	ДанныеРасшифровкаПлатежа.Организация          КАК Организация,
		|	ДанныеРасшифровкаПлатежа.Партнер              КАК Партнер,
		|	ДанныеДокумента.Контрагент                    КАК Контрагент,
		|	ДанныеДокумента.Договор                       КАК Договор,
		|	ДанныеРасшифровкаПлатежа.СуммаВзаиморасчетов  КАК Сумма,
		|	ДанныеРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка)           КАК Тип,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
		|			ИЛИ ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                 КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка                КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ                                 КАК СостояниеДокумента
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеРасшифровкаПлатежа
		|			ПО ДанныеДокумента.Ссылка = ДанныеРасшифровкаПлатежа.Ссылка
		|				И ДанныеРасшифровкаПлатежа.Заказ = ДанныеДокумента.Ссылка
		|ГДЕ
		|	ДанныеДокумента.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента),
		|													ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации),
		|													ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика),
		|													ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации))
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("ДокументСсылка.ПриходныйКассовыйОрдер"), ПараметрыОтбора);
		
	КонецЕсли;
	
	Если ВыборОснованияПлатежа И ПравоДоступа("Чтение", Метаданные.Документы.СчетФактураВыданный) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	"""" КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеОснования.Партнер КАК Партнер,
		|	ДанныеДокумента.Контрагент КАК Контрагент,
		|	ДанныеОснования.Договор,
		|	ДанныеОснования.СуммаВзаиморасчетов КАК Сумма,
		|	ДанныеОснования.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеОснования.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеОснования.Договор
		|	ИНАЧЕ
		|		ДанныеОснования.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.СчетФактураВыданный КАК ДанныеДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК ТаблицаДокумента
		|		ПО ДанныеДокумента.Ссылка = ТаблицаДокумента.Ссылка
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктВыполненныхРабот КАК ДанныеОснования
		|				ПО ТаблицаДокумента.ДокументОснование = ДанныеОснования.Ссылка
		|ГДЕ
		|	(ДанныеОснования.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|		ИЛИ (Не ДанныеОснования.АктПоЗаказам
		|			И ДанныеОснования.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|		ИЛИ (&ВыборОснованияПлатежа
		|			И ДанныеОснования.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)))
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("ДокументСсылка.СчетФактураВыданный"), ПараметрыОтбора);
 		
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	"""" КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеОснования.Партнер КАК Партнер,
		|	ДанныеДокумента.Контрагент КАК Контрагент,
		|	ДанныеОснования.Договор КАК Договор,
		|	ДанныеОснования.СуммаВзаиморасчетов КАК Сумма,
		|	ДанныеОснования.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеОснования.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеОснования.Договор
		|	ИНАЧЕ
		|		ДанныеОснования.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.СчетФактураВыданный КАК ДанныеДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК ТаблицаДокумента
		|		ПО ДанныеДокумента.Ссылка = ТаблицаДокумента.Ссылка
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК ДанныеОснования
		|				ПО ТаблицаДокумента.ДокументОснование = ДанныеОснования.Ссылка
		|ГДЕ
		|	(ДанныеОснования.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|		ИЛИ (Не ДанныеОснования.РеализацияПоЗаказам
		|			И ДанныеОснования.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|		ИЛИ (&ВыборОснованияПлатежа
		|			И ДанныеОснования.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)))
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("ДокументСсылка.СчетФактураВыданный"), ПараметрыОтбора);
		
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	"""" КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеОснования.Партнер КАК Партнер,
		|	ДанныеДокумента.Контрагент КАК Контрагент,
		|	ДанныеОснования.Договор КАК Договор,
		|	ДанныеОснования.СуммаВзаиморасчетов КАК Сумма,
		|	ДанныеОснования.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеОснования.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеОснования.Договор
		|	ИНАЧЕ
		|		ДанныеОснования.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.СчетФактураВыданный КАК ДанныеДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК ТаблицаДокумента
		|		ПО ДанныеДокумента.Ссылка = ТаблицаДокумента.Ссылка
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияУслугПрочихАктивов КАК ДанныеОснования
		|				ПО ТаблицаДокумента.ДокументОснование = ДанныеОснования.Ссылка
		|ГДЕ
		|	(ДанныеОснования.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|		ИЛИ ДанныеОснования.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|		ИЛИ (&ВыборОснованияПлатежа
		|			И ДанныеОснования.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)))
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("ДокументСсылка.СчетФактураВыданный"), ПараметрыОтбора);
		
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	"""" КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеОснования.Партнер КАК Партнер,
		|	ДанныеДокумента.Контрагент КАК Контрагент,
		|	ДанныеОснования.Договор КАК Договор,
		|	ДанныеОснования.СуммаДокумента КАК Сумма,
		|	ДанныеОснования.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеОснования.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеОснования.Договор
		|	ИНАЧЕ
		|		ДанныеОснования.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.СчетФактураВыданный КАК ДанныеДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК ТаблицаДокумента
		|		ПО ДанныеДокумента.Ссылка = ТаблицаДокумента.Ссылка
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионера КАК ДанныеОснования
		|				ПО ТаблицаДокумента.ДокументОснование = ДанныеОснования.Ссылка
		|
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("ДокументСсылка.СчетФактураВыданный"), ПараметрыОтбора);
		
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	"""" КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеОснования.Партнер КАК Партнер,
		|	ДанныеДокумента.Контрагент КАК Контрагент,
		|	ДанныеОснования.Договор КАК Договор,
		|	ДанныеОснования.СуммаВознаграждения КАК Сумма,
		|	ДанныеОснования.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеОснования.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеОснования.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.ДокументОснование
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.СчетФактураВыданный КАК ДанныеДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК ТаблицаДокумента
		|		ПО ДанныеДокумента.Ссылка = ТаблицаДокумента.Ссылка
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомитенту КАК ДанныеОснования
		|				ПО ТаблицаДокумента.ДокументОснование = ДанныеОснования.Ссылка
		|ГДЕ
		|	НЕ ДанныеОснования.УдержатьВознаграждение
		|	И ДанныеОснования.СуммаВознаграждения <> 0
		|
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("ДокументСсылка.СчетФактураВыданный"), ПараметрыОтбора);
	
	КонецЕсли;
	
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ПервичныйДокумент) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	"""" КАК ИдентификаторПлатежа,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.НомерВходящегоДокумента КАК НомерПоДаннымКонтрагента,
		|	ДанныеДокумента.ДатаВходящегоДокумента КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ПервичныйДокумент КАК ДанныеДокумента
		|ГДЕ
		|	(ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|		ИЛИ ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|		ИЛИ (&ВыборОснованияПлатежа И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)))
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(
			ТекстЗапроса, Тип("ДокументСсылка.ПервичныйДокумент"), ПараметрыОтбора);
		
	КонецЕсли;
	
	Если Лев(ТекстЗапроса, 10) = "ОБЪЕДИНИТЬ" Тогда
		ТекстЗапроса = Сред(ТекстЗапроса, 15);
	КонецЕсли;
	
	Если ТекстЗапроса = "" Тогда
		
		Возврат "";
		
	Иначе
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДокументов.Ссылка                        КАК Ссылка,
		|	ТаблицаДокументов.ИдентификаторПлатежа          КАК ИдентификаторПлатежа,
		|	ТаблицаДокументов.Дата                          КАК Дата,
		|	ТаблицаДокументов.Номер                         КАК Номер,
		|	ТаблицаДокументов.НомерПоДаннымКонтрагента      КАК НомерПоДаннымКонтрагента,
		|	ТаблицаДокументов.ДатаПоДаннымКонтрагента       КАК ДатаПоДаннымКонтрагента,
		|	ТаблицаДокументов.Организация                   КАК Организация,
		|	ТаблицаДокументов.Партнер                       КАК Партнер,
		|	ТаблицаДокументов.Контрагент                    КАК Контрагент,
		|	ТаблицаДокументов.Договор                       КАК Договор,
		|	ТаблицаДокументов.Сумма                         КАК Сумма,
		|	ТаблицаДокументов.Валюта                        КАК Валюта,
		|	ТаблицаДокументов.Тип                           КАК Тип,
		|	ТаблицаДокументов.ЭтоРасчетыСКлиентами          КАК ЭтоРасчетыСКлиентами,
		|	ТаблицаДокументов.ОбъектРасчетов                КАК ОбъектРасчетов,
		|	ТаблицаДокументов.СостояниеДокумента            КАК СостояниеДокумента
		|ИЗ
		|	( " + ТекстЗапроса + " ) КАК ТаблицаДокументов";
		
		Возврат ТекстЗапроса;
	КонецЕсли;
	
КонецФункции

// Функция возвращает текст запроса по документам расчетов с поставщиками.
//
// Параметры:
//		ПараметрыОтбора - Структура - См. подробное описание в ПараметрыОтбораПриВыбореДокументаРасчетовСПоставщиками().
//
// Возвращаемое значение:
// 		Строка - Текст запроса.
//
Функция ПолучитьТекстЗапросаДокументыРасчетовСПоставщиками(ПараметрыОтбора) Экспорт
	
	ТекстЗапроса = "";
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаказПоставщику) Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.НомерПоДаннымПоставщика КАК НомерПоДаннымКонтрагента,
		|	ДанныеДокумента.ДатаПоДаннымПоставщика КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ЕСТЬNULL(ДанныеДокумента.Договор.ПлатежиПо275ФЗ, ЛОЖЬ) КАК ПлатежиПо275ФЗ,
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ЛОЖЬ КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|	И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
		|	И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи)
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСПоставщиками(
			ТекстЗапроса, Тип("ДокументСсылка.ЗаказПоставщику"), ПараметрыОтбора);
		
	КонецЕсли;
	
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ПриобретениеТоваровУслуг) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.НомерВходящегоДокумента КАК НомерПоДаннымКонтрагента,
		|	ДанныеДокумента.ДатаВходящегоДокумента КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ЕСТЬNULL(ДанныеДокумента.Договор.ПлатежиПо275ФЗ, ЛОЖЬ) КАК ПлатежиПо275ФЗ,
		|	ДанныеДокумента.СуммаВзаиморасчетов КАК Сумма,
		|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ЛОЖЬ КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
		|ГДЕ
		|	(ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|		ИЛИ (Не ДанныеДокумента.ПоступлениеПоЗаказам И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)))
		|	И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСПоставщиками(
			ТекстЗапроса, Тип("ДокументСсылка.ПриобретениеТоваровУслуг"), ПараметрыОтбора);
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ПриобретениеУслугПрочихАктивов) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.НомерВходящегоДокумента КАК НомерПоДаннымКонтрагента,
		|	ДанныеДокумента.ДатаВходящегоДокумента КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ЕСТЬNULL(ДанныеДокумента.Договор.ПлатежиПо275ФЗ, ЛОЖЬ) КАК ПлатежиПо275ФЗ,
		|	ДанныеДокумента.СуммаВзаиморасчетов КАК Сумма,
		|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ЛОЖЬ КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ПриобретениеУслугПрочихАктивов КАК ДанныеДокумента
		|ГДЕ
		|	(ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|		ИЛИ ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСПоставщиками(
			ТекстЗапроса, Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов"), ПараметрыОтбора);
	
	КонецЕсли;
	
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ОтчетКомиссионера) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.НомерВходящегоДокумента КАК НомерПоДаннымКонтрагента,
		|	ДанныеДокумента.ДатаВходящегоДокумента КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ЛОЖЬ КАК ПлатежиПо275ФЗ,
		|	ДанныеДокумента.СуммаВознаграждения КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ЛОЖЬ КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ОтчетКомиссионера КАК ДанныеДокумента
		|ГДЕ
		|	НЕ ДанныеДокумента.УдержатьВознаграждение
		|	И ДанныеДокумента.СуммаВознаграждения <> 0
		|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСПоставщиками(
			ТекстЗапроса, Тип("ДокументСсылка.ОтчетКомиссионера"), ПараметрыОтбора);
	
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ОтчетКомитенту) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	"""" КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ЛОЖЬ КАК ПлатежиПо275ФЗ,
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ЛОЖЬ КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ОтчетКомитенту КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСПоставщиками(
			ТекстЗапроса, Тип("ДокументСсылка.ОтчетКомитенту"), ПараметрыОтбора);
	
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ОтчетКомитентуОСписании) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	"""" КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ЛОЖЬ КАК ПлатежиПо275ФЗ,
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ЛОЖЬ КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ОтчетКомитентуОСписании КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСПоставщиками(
			ТекстЗапроса, Тип("ДокументСсылка.ОтчетКомитентуОСписании"), ПараметрыОтбора);
	
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ПередачаТоваровМеждуОрганизациями) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.НомерВходящегоДокумента 
		|	ИНАЧЕ
		|		""""
		|	КОНЕЦ КАК НомерПоДаннымКонтрагента,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.ДатаВходящегоДокумента
		|	ИНАЧЕ
		|		ДАТАВРЕМЯ(1,1,1)
		|	КОНЕЦ КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.ОрганизацияПолучатель КАК Организация,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Партнер
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|	КОНЕЦ КАК Партнер,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Контрагент
		|	ИНАЧЕ
		|		ДанныеДокумента.Организация
		|	КОНЕЦ КАК Контрагент,
		|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
		|	ЛОЖЬ КАК ПлатежиПо275ФЗ,
		|
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ЛОЖЬ КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыМеждуОрганизациями КАК Договоры
		|	ПО ДанныеДокумента.Договор = Договоры.Ссылка
		|		И Договоры.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|ГДЕ
		|	ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию)
		|	И Договоры.Ссылка ЕСТЬ NULL
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСПоставщиками(
			ТекстЗапроса, Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями"), ПараметрыОтбора);
	
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациями) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ // документы на основную сумму
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.НомерВходящегоДокумента 
		|	ИНАЧЕ
		|		""""
		|	КОНЕЦ КАК НомерПоДаннымКонтрагента,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.ДатаВходящегоДокумента
		|	ИНАЧЕ
		|		ДАТАВРЕМЯ(1,1,1)
		|	КОНЕЦ КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Комиссионер КАК Организация,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Партнер
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|	КОНЕЦ КАК Партнер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Контрагент
		|	ИНАЧЕ
		|		ДанныеДокумента.Организация
		|	КОНЕЦ КАК Контрагент,
		|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
		|	ЛОЖЬ КАК ПлатежиПо275ФЗ,
		|
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ЛОЖЬ КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыМеждуОрганизациями КАК Договоры
		|	ПО ДанныеДокумента.Договор = Договоры.Ссылка
		|		И Договоры.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|ГДЕ
		|	Договоры.Ссылка ЕСТЬ NULL
		|";
		
		Если ПараметрыОтбора.ВводПоСтроке Или ПараметрыОтбора.ОтборПоОрганизацииИКонтрагенту Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Комиссионер В (&Организация)
			|	И ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
			|		ДанныеДокумента.Контрагент
			|	ИНАЧЕ
			|		ДанныеДокумента.Организация
			|	КОНЕЦ В (&Контрагент)
			|";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|
		|ВЫБРАТЬ // документы на сумму комиссионного вознаграждения
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.НомерВходящегоДокумента 
		|	ИНАЧЕ
		|		""""
		|	КОНЕЦ КАК НомерПоДаннымКонтрагента,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.ДатаВходящегоДокумента
		|	ИНАЧЕ
		|		ДАТАВРЕМЯ(1,1,1)
		|	КОНЕЦ КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Партнер
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|	КОНЕЦ КАК Партнер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Контрагент
		|	ИНАЧЕ
		|		ДанныеДокумента.Комиссионер
		|	КОНЕЦ КАК Контрагент,
		|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
		|	ЛОЖЬ КАК ПлатежиПо275ФЗ,
		|
		|	ДанныеДокумента.СуммаВознаграждения КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ЛОЖЬ КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыМеждуОрганизациями КАК Договоры
		|	ПО ДанныеДокумента.Договор = Договоры.Ссылка
		|		И Договоры.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|ГДЕ (НЕ ДанныеДокумента.УдержатьВознаграждение)
		|	И ДанныеДокумента.СпособРасчетаВознаграждения<>ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается)
		|	И ДанныеДокумента.СуммаВознаграждения<>0
		|	И Договоры.Ссылка ЕСТЬ NULL
		|";
		
		Если ПараметрыОтбора.ВводПоСтроке Или ПараметрыОтбора.ОтборПоОрганизацииИКонтрагенту Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Организация В (&Организация)
			|	И ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
			|		ДанныеДокумента.Контрагент
			|	ИНАЧЕ
			|		ДанныеДокумента.Комиссионер
			|	КОНЕЦ В (&Контрагент)
			|";
		КонецЕсли;
		
		Если ПараметрыОтбора.ВводПоСтроке Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска
			|";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ // документы на основную сумму
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.НомерВходящегоДокумента 
		|	ИНАЧЕ
		|		""""
		|	КОНЕЦ КАК НомерПоДаннымКонтрагента,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.ДатаВходящегоДокумента
		|	ИНАЧЕ
		|		ДАТАВРЕМЯ(1,1,1)
		|	КОНЕЦ КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Комиссионер КАК Организация,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Партнер
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|	КОНЕЦ КАК Партнер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Контрагент
		|	ИНАЧЕ
		|		ДанныеДокумента.Организация
		|	КОНЕЦ КАК Контрагент,
		|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
		|	ЛОЖЬ КАК ПлатежиПо275ФЗ,
		|
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ЛОЖЬ КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ОтчетПоКомиссииМеждуОрганизациямиОСписании КАК ДанныеДокумента
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыМеждуОрганизациями КАК Договоры
		|	ПО ДанныеДокумента.Договор = Договоры.Ссылка
		|		И Договоры.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|ГДЕ
		|	Договоры.Ссылка ЕСТЬ NULL
		|";
		
		Если ПараметрыОтбора.ВводПоСтроке Или ПараметрыОтбора.ОтборПоОрганизацииИКонтрагенту Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Комиссионер В (&Организация)
			|	И ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
			|		ДанныеДокумента.Контрагент
			|	ИНАЧЕ
			|		ДанныеДокумента.Организация
			|	КОНЕЦ В (&Контрагент)
			|";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|
		|ВЫБРАТЬ // документы на сумму комиссионного вознаграждения
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.НомерВходящегоДокумента 
		|	ИНАЧЕ
		|		""""
		|	КОНЕЦ КАК НомерПоДаннымКонтрагента,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.ДатаВходящегоДокумента
		|	ИНАЧЕ
		|		ДАТАВРЕМЯ(1,1,1)
		|	КОНЕЦ КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Партнер
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|	КОНЕЦ КАК Партнер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Контрагент
		|	ИНАЧЕ
		|		ДанныеДокумента.Комиссионер
		|	КОНЕЦ КАК Контрагент,
		|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
		|	ЛОЖЬ КАК ПлатежиПо275ФЗ,
		|
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ЛОЖЬ КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ОтчетПоКомиссииМеждуОрганизациямиОСписании КАК ДанныеДокумента
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыМеждуОрганизациями КАК Договоры
		|	ПО ДанныеДокумента.Договор = Договоры.Ссылка
		|		И Договоры.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|ГДЕ
		|	Договоры.Ссылка ЕСТЬ NULL
		|";
		
		Если ПараметрыОтбора.ВводПоСтроке Или ПараметрыОтбора.ОтборПоОрганизацииИКонтрагенту Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Организация В (&Организация)
			|	И ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
			|		ДанныеДокумента.Контрагент
			|	ИНАЧЕ
			|		ДанныеДокумента.Комиссионер
			|	КОНЕЦ В (&Контрагент)
			|";
		КонецЕсли;
		
		Если ПараметрыОтбора.ВводПоСтроке Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска
			|";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ТаможеннаяДекларацияИмпорт) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	"""" КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ЕСТЬNULL(ДанныеДокумента.Договор.ПлатежиПо275ФЗ, ЛОЖЬ) КАК ПлатежиПо275ФЗ,
		|	ДанныеДокумента.СуммаВзаиморасчетов КАК Сумма,
		|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ЛОЖЬ КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСПоставщиками(
			ТекстЗапроса, Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт"), ПараметрыОтбора);
	
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ВозвратТоваровПоставщику) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	"""" КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ЕСТЬNULL(ДанныеДокумента.Договор.ПлатежиПо275ФЗ, ЛОЖЬ) КАК ПлатежиПо275ФЗ,
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ЛОЖЬ КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.СпособКомпенсации = ЗНАЧЕНИЕ(Перечисление.СпособыКомпенсацииВозвратовТоваров.ВернутьДенежныеСредства)
		|	И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровКомитенту)
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСПоставщиками(
			ТекстЗапроса, Тип("ДокументСсылка.ВозвратТоваровПоставщику"), ПараметрыОтбора);
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка                  КАК Ссылка,
		|	ДанныеДокумента.Дата                    КАК Дата,
		|	ДанныеДокумента.Номер                   КАК Номер,
		|	ДанныеДокумента.НомерВходящегоДокумента КАК НомерПоДаннымКонтрагента,
		|	ДанныеДокумента.ДатаВходящегоДокумента  КАК ДатаПоДаннымКонтрагента,
		|	ДанныеРасшифровкаПлатежа.Организация    КАК Организация,
		|	ДанныеРасшифровкаПлатежа.Партнер        КАК Партнер,
		|	ДанныеДокумента.Контрагент              КАК Контрагент,
		|	ДанныеДокумента.Договор                 КАК Договор,
		|	ЕСТЬNULL(ДанныеДокумента.Договор.ПлатежиПо275ФЗ, ЛОЖЬ) КАК ПлатежиПо275ФЗ,
		|	ДанныеДокумента.СуммаДокумента          КАК Сумма,
		|	ДанныеДокумента.Валюта                  КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка)     КАК Тип,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
		|			ИЛИ ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                   КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка                  КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ                                   КАК СостояниеДокумента
		|ИЗ
		|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ДанныеРасшифровкаПлатежа
		|			ПО ДанныеДокумента.Ссылка = ДанныеРасшифровкаПлатежа.Ссылка
		|				И ДанныеРасшифровкаПлатежа.Заказ = ДанныеДокумента.Ссылка
		|ГДЕ
		|	ДанныеДокумента.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента),
		|													ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации),
		|													ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика),
		|													ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации))
		|	И ДанныеДокумента.ПроведеноБанком
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСПоставщиками(
			ТекстЗапроса, Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств"), ПараметрыОтбора);
		
	КонецЕсли;
		
	Если ПравоДоступа("Чтение", Метаданные.Документы.СписаниеБезналичныхДенежныхСредств) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка                        КАК Ссылка,
		|	ДанныеДокумента.Дата                          КАК Дата,
		|	ДанныеДокумента.Номер                         КАК Номер,
		|	ДанныеДокумента.НомерВходящегоДокумента       КАК НомерПоДаннымКонтрагента,
		|	ДанныеДокумента.ДатаВходящегоДокумента        КАК ДатаПоДаннымКонтрагента,
		|	ДанныеРасшифровкаПлатежа.Организация          КАК Организация,
		|	ДанныеРасшифровкаПлатежа.Партнер              КАК Партнер,
		|	ДанныеДокумента.Контрагент                    КАК Контрагент,
		|	ДанныеДокумента.Договор                       КАК Договор,
		|	ЕСТЬNULL(ДанныеДокумента.Договор.ПлатежиПо275ФЗ, ЛОЖЬ) КАК ПлатежиПо275ФЗ,
		|	ДанныеРасшифровкаПлатежа.СуммаВзаиморасчетов  КАК Сумма,
		|	ДанныеРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка)           КАК Тип,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
		|			ИЛИ ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                         КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка                        КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ                                         КАК СостояниеДокумента
		|ИЗ
		|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ДанныеРасшифровкаПлатежа
		|			ПО ДанныеДокумента.Ссылка = ДанныеРасшифровкаПлатежа.Ссылка
		|				И ДанныеРасшифровкаПлатежа.Заказ = ДанныеДокумента.Ссылка
		|ГДЕ
		|	ДанныеДокумента.ХозяйственнаяОперация В (
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеТаможне),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию))
		|	И ДанныеДокумента.ПроведеноБанком
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСПоставщиками(
			ТекстЗапроса, Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств"), ПараметрыОтбора);
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.РасходныйКассовыйОрдер) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка                        КАК Ссылка,
		|	ДанныеДокумента.Дата                          КАК Дата,
		|	ДанныеДокумента.Номер                         КАК Номер,
		|	""""                                          КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1)                              КАК ДатаПоДаннымКонтрагента,
		|	ДанныеРасшифровкаПлатежа.Организация          КАК Организация,
		|	ДанныеРасшифровкаПлатежа.Партнер              КАК Партнер,
		|	ДанныеДокумента.Контрагент                    КАК Контрагент,
		|	ДанныеДокумента.Договор                       КАК Договор,
		|	ЕСТЬNULL(ДанныеДокумента.Договор.ПлатежиПо275ФЗ, ЛОЖЬ) КАК ПлатежиПо275ФЗ,
		|	ДанныеРасшифровкаПлатежа.СуммаВзаиморасчетов  КАК Сумма,
		|	ДанныеРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка)           КАК Тип,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
		|			ИЛИ ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка               КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ                                КАК СостояниеДокумента
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеРасшифровкаПлатежа
		|			ПО ДанныеДокумента.Ссылка = ДанныеРасшифровкаПлатежа.Ссылка
		|				И ДанныеРасшифровкаПлатежа.Заказ = ДанныеДокумента.Ссылка
		|ГДЕ
		|	ДанныеДокумента.ХозяйственнаяОперация В (
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию))
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСПоставщиками(
			ТекстЗапроса, Тип("ДокументСсылка.РасходныйКассовыйОрдер"), ПараметрыОтбора);
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ПриходныйКассовыйОрдер) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка                        КАК Ссылка,
		|	ДанныеДокумента.Дата                          КАК Дата,
		|	ДанныеДокумента.Номер                         КАК Номер,
		|	""""                                          КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1)                              КАК ДатаПоДаннымКонтрагента,
		|	ДанныеРасшифровкаПлатежа.Организация          КАК Организация,
		|	ДанныеРасшифровкаПлатежа.Партнер              КАК Партнер,
		|	ДанныеДокумента.Контрагент                    КАК Контрагент,
		|	ДанныеДокумента.Договор                       КАК Договор,
		|	ЕСТЬNULL(ДанныеДокумента.Договор.ПлатежиПо275ФЗ, ЛОЖЬ) КАК ПлатежиПо275ФЗ,
		|	ДанныеРасшифровкаПлатежа.СуммаВзаиморасчетов  КАК Сумма,
		|	ДанныеРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка)           КАК Тип,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
		|			ИЛИ ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                 КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка                КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ                                 КАК СостояниеДокумента
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеРасшифровкаПлатежа
		|			ПО ДанныеДокумента.Ссылка = ДанныеРасшифровкаПлатежа.Ссылка
		|				И ДанныеРасшифровкаПлатежа.Заказ = ДанныеДокумента.Ссылка
		|ГДЕ
		|	ДанныеДокумента.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента),
		|													ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации),
		|													ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика),
		|													ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации))
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСПоставщиками(
			ТекстЗапроса, Тип("ДокументСсылка.ПриходныйКассовыйОрдер"), ПараметрыОтбора);
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ДоговорыКонтрагентов) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	"""" КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ДанныеДокумента.Партнер КАК Партнер,
		|	ДанныеДокумента.Контрагент КАК Контрагент,
		|	ДанныеДокумента.Ссылка КАК Договор,
		|	ДанныеДокумента.ПлатежиПо275ФЗ КАК ПлатежиПо275ФЗ,
		|
		|	0 КАК Сумма,
		|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ЛОЖЬ КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|	И ДанныеДокумента.ХозяйственнаяОперация В (
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи),
		|		&ОперацииРаздельнойЗакупки
		|	)
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСПоставщиками(
			ТекстЗапроса, Тип("СправочникСсылка.ДоговорыКонтрагентов"), ПараметрыОтбора);
			
		Если ПараметрыОтбора.ОтборПоОрганизацииИКонтрагенту Тогда
			ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
			"
			|ВЫБРАТЬ
			|	ДанныеРегистра.ЗаказПоставщику КАК Ссылка,
			|	ВЫРАЗИТЬ(ДанныеРегистра.ЗаказПоставщику КАК Справочник.ДоговорыКонтрагентов).Дата КАК Дата,
			|	ВЫРАЗИТЬ(ДанныеРегистра.ЗаказПоставщику КАК Справочник.ДоговорыКонтрагентов).Номер КАК Номер,
			|	"""" КАК НомерПоДаннымКонтрагента,
			|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
			|	ВЫРАЗИТЬ(ДанныеРегистра.ЗаказПоставщику КАК Справочник.ДоговорыКонтрагентов).Организация КАК Организация,
			|	ВЫРАЗИТЬ(ДанныеРегистра.ЗаказПоставщику КАК Справочник.ДоговорыКонтрагентов).Партнер КАК Партнер,
			|	ВЫРАЗИТЬ(ДанныеРегистра.ЗаказПоставщику КАК Справочник.ДоговорыКонтрагентов).Контрагент КАК Контрагент,
			|	ВЫРАЗИТЬ(ДанныеРегистра.ЗаказПоставщику КАК Справочник.ДоговорыКонтрагентов).Ссылка КАК Договор,
			|	ВЫРАЗИТЬ(ДанныеРегистра.ЗаказПоставщику КАК Справочник.ДоговорыКонтрагентов).ПлатежиПо275ФЗ КАК ПлатежиПо275ФЗ,
			|
			|	0 КАК Сумма,
			|	ВЫРАЗИТЬ(ДанныеРегистра.ЗаказПоставщику КАК Справочник.ДоговорыКонтрагентов).ВалютаВзаиморасчетов КАК Валюта,
			|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.ЗаказПоставщику) КАК Тип,
			|	ЛОЖЬ КАК ЭтоРасчетыСКлиентами,
			|	ДанныеРегистра.ЗаказПоставщику КАК ОбъектРасчетов,
			|	
			|	ВЫБОР КОГДА ВЫРАЗИТЬ(ДанныеРегистра.ЗаказПоставщику КАК Справочник.ДоговорыКонтрагентов).ПометкаУдаления ТОГДА
			|		1
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК СостояниеДокумента
			|ИЗ
			|	РегистрНакопления.РасчетыСПоставщиками.Остатки(,
			|		АналитикаУчетаПоПартнерам.Контрагент В (&Контрагент)
			|		И АналитикаУчетаПоПартнерам.Организация В (&Организация)
			|		И ЗаказПоставщику ССЫЛКА Справочник.ДоговорыКонтрагентов) КАК ДанныеРегистра
			|ГДЕ
			|	ВЫРАЗИТЬ(ДанныеРегистра.ЗаказПоставщику КАК Справочник.ДоговорыКонтрагентов).ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
			|	И ВЫРАЗИТЬ(ДанныеРегистра.ЗаказПоставщику КАК Справочник.ДоговорыКонтрагентов).ХозяйственнаяОперация В (
			|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика),
			|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту),
			|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС),
			|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию),
			|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию),
			|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи),
			|		&ОперацииРаздельнойЗакупки
			|	)
			|";
		КонецЕсли;
	КонецЕсли;
		
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ДоговорыМеждуОрганизациями) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	"""" КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.ОрганизацияПолучатель КАК Организация,
		|	ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) КАК Партнер,
		|	ДанныеДокумента.Организация КАК Контрагент,
		|	ДанныеДокумента.Ссылка КАК Договор,
		|	ДанныеДокумента.ПлатежиПо275ФЗ КАК ПлатежиПо275ФЗ,
		|
		|	0 КАК Сумма,
		|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ЛОЖЬ КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Справочник.ДоговорыМеждуОрганизациями КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСПоставщиками(
			ТекстЗапроса, Тип("СправочникСсылка.ДоговорыМеждуОрганизациями"), ПараметрыОтбора);
		
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	"""" КАК НомерПоДаннымКонтрагента,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) КАК Партнер,
		|	ДанныеДокумента.ОрганизацияПолучатель КАК Контрагент,
		|	ДанныеДокумента.Ссылка КАК Договор,
		|	ДанныеДокумента.ПлатежиПо275ФЗ КАК ПлатежиПо275ФЗ,
		|
		|	0 КАК Сумма,
		|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ЛОЖЬ КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Справочник.ДоговорыМеждуОрганизациями КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|	И ДанныеДокумента.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровМеждуОрганизациями.Комиссионный)
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСПоставщиками(
			ТекстЗапроса, Тип("СправочникСсылка.ДоговорыМеждуОрганизациями"), ПараметрыОтбора);
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ПервичныйДокумент) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" + "
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.НомерВходящегоДокумента КАК НомерПоДаннымКонтрагента,
		|	ДанныеДокумента.ДатаВходящегоДокумента КАК ДатаПоДаннымКонтрагента,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ЛОЖЬ КАК ПлатежиПо275ФЗ,
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ЛОЖЬ КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ПервичныйДокумент КАК ДанныеДокумента
		|ГДЕ
		|	(ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|		ИЛИ ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|		ИЛИ ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов))
		|";
		
		ДополнитьТекстЗапросаДокументыРасчетовСПоставщиками(
			ТекстЗапроса, Тип("ДокументСсылка.ПервичныйДокумент"), ПараметрыОтбора);
		
	КонецЕсли;
	
	Если Лев(ТекстЗапроса, 10) = "ОБЪЕДИНИТЬ" Тогда
		ТекстЗапроса = Сред(ТекстЗапроса, 15);
	КонецЕсли;
	
	Если ТекстЗапроса = "" Тогда
		
		Возврат "";
		
	Иначе
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДокументов.Ссылка                        КАК Ссылка,
		|	ТаблицаДокументов.Дата                          КАК Дата,
		|	ТаблицаДокументов.Номер                         КАК Номер,
		|	ТаблицаДокументов.НомерПоДаннымКонтрагента      КАК НомерПоДаннымКонтрагента,
		|	ТаблицаДокументов.ДатаПоДаннымКонтрагента       КАК ДатаПоДаннымКонтрагента,
		|	ТаблицаДокументов.Организация                   КАК Организация,
		|	ТаблицаДокументов.Партнер                       КАК Партнер,
		|	ТаблицаДокументов.Контрагент                    КАК Контрагент,
		|	ТаблицаДокументов.Договор                       КАК Договор,
		|	ТаблицаДокументов.ПлатежиПо275ФЗ                КАК ПлатежиПо275ФЗ,
		|	ТаблицаДокументов.Сумма                         КАК Сумма,
		|	ТаблицаДокументов.Валюта                        КАК Валюта,
		|	ТаблицаДокументов.Тип                           КАК Тип,
		|	ТаблицаДокументов.ЭтоРасчетыСКлиентами          КАК ЭтоРасчетыСКлиентами,
		|	ТаблицаДокументов.ОбъектРасчетов                КАК ОбъектРасчетов,
		|	ТаблицаДокументов.СостояниеДокумента            КАК СостояниеДокумента,
		|	""""                                            КАК ИдентификаторПлатежа
		|ИЗ
		|	( " + ТекстЗапроса + " ) КАК ТаблицаДокументов";
		
		Возврат ТекстЗапроса;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииЗаполненияДокументов

// Процедура заполнения табличной части "РасшифровкаПлатежа" по заказу клиента.
//
// Параметры:
//	ПараметрыЗаполнения - Структура - Функция-конструктор ВзаиморасчетыСервер.ПараметрыЗаполненияРасшифровкиПлатежаПоЗаказу.
//		* Партнер          - СправочникСсылка.Партнеры - Партнер документа-инициатора.
//		* Договор          - СправочникСсылка.ДоговорыКонтрагентов - Договор объекта расчетов.
//		* ЗаказКлиента     - ДокументСсылка.ЗаказКлиента - Объект расчетов.
//		* ВалютаДокумента  - СправочникСсылка.Валюты - Валюта документа поступления денежных средств.
//		* ОснованиеПлатежа - ДокументСсылка - Документ-основание.
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть документа.
//	Организация - СправочникСсылка.Организации - Организация, осуществляющая продажу.
//	СуммаКОплате - Число - Сумма к оплате, если известна.
//
Процедура ЗаполнитьРасшифровкуПлатежаПоЗаказуКлиента(ПараметрыЗаполнения, РасшифровкаПлатежа, СуммаКОплате = 0, Организация = Неопределено) Экспорт
	
	ЗаказКлиента     = ПараметрыЗаполнения.ЗаказКлиента;
	Договор          = ПараметрыЗаполнения.Договор;
	ВалютаДокумента  = ПараметрыЗаполнения.ВалютаДокумента;
	Партнер          = ПараметрыЗаполнения.Партнер;
	ОснованиеПлатежа = ПараметрыЗаполнения.ОснованиеПлатежа;
	
	УстановитьПривилегированныйРежим(Истина);
	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		
		ЭтоЗаказ = ТипЗнч(ЗаказКлиента) = Тип("ДокументСсылка.ЗаказКлиента")
			ИЛИ ТипЗнч(ЗаказКлиента) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента")
			ИЛИ ТипЗнч(ЗаказКлиента) = Тип("Массив");
			
		Если ТипЗнч(ЗаказКлиента) = Тип("Массив") Тогда
			ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказКлиента[0], "ПорядокРасчетов");
		Иначе
			ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказКлиента, "ПорядокРасчетов");
		КонецЕсли;
		
		Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
			И (ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента") ИЛИ НЕ ЭтоЗаказ)  Тогда
			
			ТекстЗапроса = "ВЫБРАТЬ
			               |	РасчетыСКлиентами.Период КАК Период,
			               |	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			               |	РасчетыСКлиентами.ЗаказКлиента КАК ЗаказКлиента,
			               |	РасчетыСКлиентами.ЗаказКлиента.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			               |	Аналитика.Партнер КАК Партнер,
			               |	РасчетыСКлиентами.Валюта КАК Валюта,
			               |	СУММА(РасчетыСКлиентами.КОплате) КАК СуммаПоГрафику
			               |ПОМЕСТИТЬ ТаблицаКОплате
			               |ИЗ
			               |	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			               |		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
			               |			И (&Организация = Аналитика.Организация
			               |				ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
			               |ГДЕ
			               |	РасчетыСКлиентами.Активность
			               |	И РасчетыСКлиентами.Регистратор В(&ЗаказКлиента)
			               |	И РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			               |	И РасчетыСКлиентами.КОплате > 0
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	РасчетыСКлиентами.Период,
			               |	РасчетыСКлиентами.ЗаказКлиента,
			               |	РасчетыСКлиентами.ЗаказКлиента.СтатьяДвиженияДенежныхСредств,
			               |	РасчетыСКлиентами.АналитикаУчетаПоПартнерам,
			               |	РасчетыСКлиентами.Валюта,
			               |	Аналитика.Партнер
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	&ТекущаяДата,
			               |	Аналитика.КлючАналитики,
			               |	ДанныеДоговора.Ссылка,
			               |	ДанныеДоговора.СтатьяДвиженияДенежныхСредств,
			               |	ДанныеДоговора.Партнер,
			               |	ДанныеДоговора.ВалютаВзаиморасчетов,
			               |	0
			               |ИЗ
			               |	Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			               |		ПО ДанныеДоговора.Партнер = Аналитика.Партнер
			               |			И ДанныеДоговора.Контрагент = Аналитика.Контрагент
			               |			И ДанныеДоговора.Организация = Аналитика.Организация
			               |			И ДанныеДоговора.Ссылка = Аналитика.Договор
			               |ГДЕ
			               |	ДанныеДоговора.Ссылка В(&ЗаказКлиента)
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	МИНИМУМ(ТаблицаКОплате.Период) КАК Период,
			               |	ТаблицаКОплате.ЗаказКлиента КАК ОснованиеПлатежа,
			               |	ТаблицаКОплате.ЗаказКлиента КАК Заказ,
			               |	ТаблицаКОплате.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			               |	ТаблицаКОплате.Партнер КАК Партнер,
			               |	ТаблицаКОплате.Валюта КАК ВалютаВзаиморасчетов,
			               |	ВЫБОР
			               |		КОГДА СУММА(ТаблицаКОплате.СуммаПоГрафику) > 0
			               |				И СУММА(ТаблицаКОплате.СуммаПоГрафику) <= МАКСИМУМ(РасчетыСКлиентамиОстатки.КОплатеОстаток - РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток)
			               |			ТОГДА СУММА(ТаблицаКОплате.СуммаПоГрафику)
			               |		ИНАЧЕ МАКСИМУМ(РасчетыСКлиентамиОстатки.КОплатеОстаток - РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток)
			               |	КОНЕЦ КАК СуммаПоГрафику,
			               |	СУММА(0) КАК СуммаОплаты
			               |ИЗ
			               |	ТаблицаКОплате КАК ТаблицаКОплате
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(
			               |				,
			               |				(АналитикаУчетаПоПартнерам, ЗаказКлиента, Валюта) В
			               |					(ВЫБРАТЬ
			               |						ТаблицаКОплате.АналитикаУчетаПоПартнерам,
			               |						ТаблицаКОплате.ЗаказКлиента,
			               |						ТаблицаКОплате.Валюта
			               |					ИЗ
			               |						ТаблицаКОплате)) КАК РасчетыСКлиентамиОстатки
			               |		ПО ТаблицаКОплате.АналитикаУчетаПоПартнерам = РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам
			               |			И ТаблицаКОплате.ЗаказКлиента = РасчетыСКлиентамиОстатки.ЗаказКлиента
			               |			И ТаблицаКОплате.Валюта = РасчетыСКлиентамиОстатки.Валюта
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ТаблицаКОплате.ЗаказКлиента,
			               |	ТаблицаКОплате.СтатьяДвиженияДенежныхСредств,
			               |	ТаблицаКОплате.Партнер,
			               |	ТаблицаКОплате.Валюта,
			               |	ТаблицаКОплате.ЗаказКлиента
			               |ИТОГИ ПО
			               |	ОснованиеПлатежа";
			
		ИначеЕсли НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента")
			И ЭтоЗаказ
			И ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
			
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	Заказ.Ссылка КАК ОснованиеПлатежа,
			|	ВЫБОР 
			|		КОГДА &ПоДоговорам ТОГДА
			|			&Договор
			|		ИНАЧЕ
			|			Заказ.Ссылка 
			|	КОНЕЦ КАК Заказ,
			|	Аналитика.Партнер КАК Партнер,
			|	Заказ.Соглашение КАК Соглашение,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(Заказ.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
			|			ТОГДА ВЫРАЗИТЬ(Заказ.Соглашение КАК Справочник.СоглашенияСКлиентами).СтатьяДвиженияДенежныхСредств
			|		ИНАЧЕ Заказ.Договор.СтатьяДвиженияДенежныхСредств
			|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств,
			|	ЭтапыОплатыЗаказа.ДатаПлатежа КАК Период,
			|	Заказ.Валюта КАК ВалютаВзаиморасчетов,
			|	Заказ.ФормаОплаты КАК ФормаОплаты,
			|	ЭтапыОплатыЗаказа.НомерСтроки КАК НомерСтроки,
			|	ЭтапыОплатыЗаказа.СуммаПлатежа + ЭтапыОплатыЗаказа.СуммаЗалогаЗаТару КАК СуммаПоГрафику,
			|	ЕСТЬNULL(РасчетыСКлиентамиОбороты.СуммаРасход, 0) КАК СуммаОплаты
			|ИЗ
			|	Документ.ЗаказКлиента КАК Заказ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ЭтапыОплатыЗаказа
			|		ПО Заказ.Ссылка = ЭтапыОплатыЗаказа.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			|		ПО Заказ.Партнер = Аналитика.Партнер
			|			И Заказ.Контрагент = Аналитика.Контрагент
			|			И Заказ.Организация = Аналитика.Организация
			|			И Заказ.Договор = Аналитика.Договор
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Обороты(, , , ЗаказКлиента В (&ЗаказКлиента)) КАК РасчетыСКлиентамиОбороты
			|		ПО Заказ.Ссылка = РасчетыСКлиентамиОбороты.ЗаказКлиента
			|ГДЕ
			|	Заказ.Ссылка В(&ЗаказКлиента)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗаявкаНаВозвратТоваровОтКлиента.Ссылка,
			|	ВЫБОР 
			|		КОГДА &ПоДоговорам ТОГДА
			|			&Договор
			|		ИНАЧЕ
			|			ЗаявкаНаВозвратТоваровОтКлиента.Ссылка 
			|	КОНЕЦ КАК Заказ,
			|	Аналитика.Партнер,
			|	ЗаявкаНаВозвратТоваровОтКлиента.Соглашение,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ЗаявкаНаВозвратТоваровОтКлиента.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
			|			ТОГДА ВЫРАЗИТЬ(ЗаявкаНаВозвратТоваровОтКлиента.Соглашение КАК Справочник.СоглашенияСКлиентами).СтатьяДвиженияДенежныхСредств
			|		ИНАЧЕ ЗаявкаНаВозвратТоваровОтКлиента.Договор.СтатьяДвиженияДенежныхСредств
			|	КОНЕЦ,
			|	ЗаявкаНаВозвратТоваровОтКлиентаЭтапыГрафикаОплаты.ДатаПлатежа,
			|	ЗаявкаНаВозвратТоваровОтКлиента.Валюта,
			|	ЗаявкаНаВозвратТоваровОтКлиента.ФормаОплаты,
			|	ЗаявкаНаВозвратТоваровОтКлиентаЭтапыГрафикаОплаты.НомерСтроки КАК НомерСтроки,
			|	ЗаявкаНаВозвратТоваровОтКлиентаЭтапыГрафикаОплаты.СуммаПлатежа + ЗаявкаНаВозвратТоваровОтКлиентаЭтапыГрафикаОплаты.СуммаЗалогаЗаТару,
			|	ЕСТЬNULL(РасчетыСКлиентамиОбороты.СуммаРасход, 0)
			|ИЗ
			|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозвратТоваровОтКлиента
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЭтапыГрафикаОплаты КАК ЗаявкаНаВозвратТоваровОтКлиентаЭтапыГрафикаОплаты
			|		ПО ЗаявкаНаВозвратТоваровОтКлиента.Ссылка = ЗаявкаНаВозвратТоваровОтКлиентаЭтапыГрафикаОплаты.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			|		ПО ЗаявкаНаВозвратТоваровОтКлиента.Партнер = Аналитика.Партнер
			|			И ЗаявкаНаВозвратТоваровОтКлиента.Контрагент = Аналитика.Контрагент
			|			И ЗаявкаНаВозвратТоваровОтКлиента.Организация = Аналитика.Организация
			|			И ЗаявкаНаВозвратТоваровОтКлиента.Договор = Аналитика.Договор
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Обороты(, , , ЗаказКлиента В (&ЗаказКлиента)) КАК РасчетыСКлиентамиОбороты
			|		ПО ЗаявкаНаВозвратТоваровОтКлиента.Ссылка = РасчетыСКлиентамиОбороты.ЗаказКлиента
			|ГДЕ
			|	ЗаявкаНаВозвратТоваровОтКлиента.Ссылка В(&ЗаказКлиента)
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки
			|ИТОГИ ПО
			|	ОснованиеПлатежа";
		Иначе
				
			ТекстЗапроса = "ВЫБРАТЬ
			               |	РасчетыСКлиентами.ЗаказКлиента КАК ОснованиеПлатежа,
			               |	РасчетыСКлиентами.ЗаказКлиента КАК Заказ,
			               |	Аналитика.Партнер КАК Партнер,
			               |	РасчетыСКлиентами.ЗаказКлиента.Соглашение КАК Соглашение,
			               |	ВЫБОР
			               |		КОГДА ЕСТЬNULL(РасчетыСКлиентами.ЗаказКлиента.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
			               |			ТОГДА ВЫРАЗИТЬ(РасчетыСКлиентами.ЗаказКлиента.Соглашение КАК Справочник.СоглашенияСКлиентами).СтатьяДвиженияДенежныхСредств
			               |		ИНАЧЕ РасчетыСКлиентами.ЗаказКлиента.Договор.СтатьяДвиженияДенежныхСредств
			               |	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств,
			               |	РасчетыСКлиентами.Период КАК Период,
			               |	РасчетыСКлиентами.Валюта КАК ВалютаВзаиморасчетов,
			               |	РасчетыСКлиентами.ФормаОплаты КАК ФормаОплаты,
			               |	РасчетыСКлиентами.КОплате КАК СуммаПоГрафику,
			               |	ЕСТЬNULL(РасчетыСКлиентамиОбороты.КОплатеРасход, 0) + ЕСТЬNULL(РасчетыСКлиентамиОбороты.ОплачиваетсяОборот, 0) КАК СуммаОплаты
			               |ИЗ
			               |	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Обороты(, , Период, ) КАК РасчетыСКлиентамиОбороты
			               |		ПО РасчетыСКлиентами.ЗаказКлиента = РасчетыСКлиентамиОбороты.ЗаказКлиента
			               |			И РасчетыСКлиентами.Валюта = РасчетыСКлиентамиОбороты.Валюта
			               |			И РасчетыСКлиентами.АналитикаУчетаПоПартнерам = РасчетыСКлиентамиОбороты.АналитикаУчетаПоПартнерам
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			               |		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
			               |			И (&Организация = Аналитика.Организация
			               |				ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
			               |ГДЕ
			               |	РасчетыСКлиентами.Активность
			               |	И РасчетыСКлиентами.ЗаказКлиента В(&ЗаказКлиента)
			               |	И РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			               |	И РасчетыСКлиентами.КОплате > 0
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	РасчетыСКлиентами.Период,
			               |	РасчетыСКлиентами.НомерСтроки
			               |ИТОГИ ПО
			               |	ОснованиеПлатежа";
			
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		
		Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
		Запрос.УстановитьПараметр("ПоДоговорам", ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
		Запрос.УстановитьПараметр("Договор", Договор);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("Организация", Организация);
		
		СтатьяДДСПоХО = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
		
		ВыборкаПоЗаказам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоЗаказам.Следующий() Цикл
			
			СуммаПоГрафикуВсего = 0;
			УчтеноСуммаОплаты = 0;
		
			Выборка = ВыборкаПоЗаказам.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				// Найдем первый неоплаченный этап.
				Если (Выборка.СуммаПоГрафику + СуммаПоГрафикуВсего) > Выборка.СуммаОплаты Тогда
					
					НоваяСтрока = РасшифровкаПлатежа.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					НоваяСтрока.ОснованиеПлатежа = ОснованиеПлатежа;
					Если Не ЗначениеЗаполнено(НоваяСтрока.ОснованиеПлатежа) Тогда
						НоваяСтрока.ОснованиеПлатежа = Выборка.ОснованиеПлатежа;
					КонецЕсли;
					Если Не ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда
						НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
					КонецЕсли;
					
					НоваяСтрока.СуммаВзаиморасчетов = Выборка.СуммаПоГрафику + СуммаПоГрафикуВсего - (Выборка.СуммаОплаты + УчтеноСуммаОплаты);
					
					Если СуммаКОплате <> 0 Тогда
						НоваяСтрока.СуммаВзаиморасчетов = Мин(НоваяСтрока.СуммаВзаиморасчетов, СуммаКОплате);
						СуммаКОплате = СуммаКОплате - НоваяСтрока.СуммаВзаиморасчетов;
						УчтеноСуммаОплаты = УчтеноСуммаОплаты + НоваяСтрока.СуммаВзаиморасчетов;
						СуммаПоГрафикуВсего = СуммаПоГрафикуВсего + Выборка.СуммаПоГрафику;
					КонецЕсли;
					
					Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(ВалютаДокумента, Выборка.ВалютаВзаиморасчетов, ТекущаяДатаСеанса());
					НоваяСтрока.Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, НоваяСтрока.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
					
					Если СуммаКОплате = 0 Тогда
						Прервать;
					КонецЕсли;
					
				Иначе
					СуммаПоГрафикуВсего = СуммаПоГрафикуВсего + Выборка.СуммаПоГрафику;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если РасшифровкаПлатежа.Количество() = 0 Тогда
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			Если ТипЗнч(ЗаказКлиента) <> Тип("Массив") Тогда
				НоваяСтрока.ОснованиеПлатежа = ЗаказКлиента;
				НоваяСтрока.Заказ = ?(ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов, Договор, ЗаказКлиента);;
				НоваяСтрока.Партнер = Партнер;
				Если ЗначениеЗаполнено(Договор) Тогда
					НоваяСтрока.СтатьяДвиженияДенежныхСредств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "СтатьяДвиженияДенежныхСредств");
				КонецЕсли;
				Если Не ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда
					НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
				КонецЕсли;
			КонецЕсли;
		Иначе
			РасшифровкаПлатежа.Свернуть("ОснованиеПлатежа, Заказ, СтатьяДвиженияДенежныхСредств, Партнер, ВалютаВзаиморасчетов", "Сумма, СуммаВзаиморасчетов");
		КонецЕсли;
		
		ДенежныеСредстваСервер.ЗаполнитьНДСВРасшифровке(РасшифровкаПлатежа,
			ДенежныеСредстваСервер.РасшифровкаПлатежаНДС(ТекущаяДатаСеанса(), ВалютаДокумента, РасшифровкаПлатежа.ВыгрузитьКолонку("ОснованиеПлатежа"), Истина));
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения табличной части "РасшифровкаПлатежа" по счету на оплату.
//
// Параметры:
//	СчетНаОплату - ДокументСсылка.СчетНаОплатуКлиенту - Документ - основание.
//	ЗаказКлиента - ДокументСсылка.ЗаказКлиента - Заказ.
//	ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа поступления денежных средств.
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть документа.
//
Процедура ЗаполнитьРасшифровкуПлатежаПоСчетуНаОплату(СчетНаОплату, ЗаказКлиента, ВалютаДокумента, РасшифровкаПлатежа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Заполнение табличной части "Расшифровка платежа"
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РасчетыСКлиентами.СчетНаОплату,
	|	СУММА(
	|		ВЫБОР КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
	|			РасчетыСКлиентами.Сумма
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ
	|		) КАК СуммаОплаты
	|ПОМЕСТИТЬ ВтРасчетыПоСчету
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|ГДЕ
	|	РасчетыСКлиентами.Активность
	|	И РасчетыСКлиентами.СчетНаОплату = &СчетНаОплату
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСКлиентами.СчетНаОплату
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетыСКлиентами.СчетНаОплату
	|;
	|ВЫБРАТЬ
	|	СчетНаОплатуКлиенту.Ссылка КАК ОснованиеПлатежа,
	|	
	|	ВЫБОР КОГДА СчетНаОплатуКлиенту.ДокументОснование ССЫЛКА Документ.ЗаказКлиента
	|		И СчетНаОплатуКлиенту.ДокументОснование.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|		ТОГДА СчетНаОплатуКлиенту.ДокументОснование
	|	КОГДА СчетНаОплатуКлиенту.Договор.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		СчетНаОплатуКлиенту.Договор
	|	ИНАЧЕ
	|		СчетНаОплатуКлиенту.ДокументОснование
	|	КОНЕЦ КАК Заказ,
	|	
	|	СчетНаОплатуКлиенту.ДокументОснование.Партнер КАК Партнер,
	|	СчетНаОплатуКлиенту.ДокументОснование.Соглашение КАК Соглашение,
	|	
	|	ВЫБОР КОГДА СчетНаОплатуКлиенту.Договор.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		СчетНаОплатуКлиенту.Договор.СтатьяДвиженияДенежныхСредств
	|	ИНАЧЕ
	|		ВЫБОР КОГДА ЕСТЬNULL(СчетНаОплатуКлиенту.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) ТОГДА
	|			ВЫРАЗИТЬ(СчетНаОплатуКлиенту.ДокументОснование.Соглашение КАК Справочник.СоглашенияСКлиентами).СтатьяДвиженияДенежныхСредств
	|		ИНАЧЕ
	|			СчетНаОплатуКлиенту.Договор.СтатьяДвиженияДенежныхСредств
	|		КОНЕЦ
	|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств,
	|	
	|	ЕСТЬNULL(
	|		СчетНаОплатуКлиенту.ДокументОснование.ВалютаВзаиморасчетов, 
	|		СчетНаОплатуКлиенту.ДокументОснование.Валюта
	|	) КАК ВалютаВзаиморасчетов,
	|
	|	ВЫБОР КОГДА СчетНаОплатуКлиенту.ДокументОснование ССЫЛКА Справочник.ДоговорыКонтрагентов
	|	 ИЛИ СчетНаОплатуКлиенту.Договор.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		СчетНаОплатуКлиенту.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентами.СуммаОплаты, 0)
	|	КОГДА СчетНаОплатуКлиенту.СуммаДокумента >
	|			ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) - ЕСТЬNULL(РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток, 0) ТОГДА
	|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) - ЕСТЬNULL(РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток, 0)
	|	КОГДА СчетНаОплатуКлиенту.СуммаДокумента > ЕСТЬNULL(РасчетыСКлиентами.СуммаОплаты, 0) ТОГДА
	|		СчетНаОплатуКлиенту.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентами.СуммаОплаты, 0)
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК СуммаВзаиморасчетов
	|ИЗ
	|	Документ.СчетНаОплатуКлиенту КАК СчетНаОплатуКлиенту
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтРасчетыПоСчету КАК РасчетыСКлиентами
	|	ПО
	|		СчетНаОплатуКлиенту.Ссылка = РасчетыСКлиентами.СчетНаОплату
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.РасчетыСКлиентами.Остатки(, 
	|			ЗаказКлиента = &ЗаказКлиента
	|		) КАК РасчетыСКлиентамиОстатки
	|	ПО
	|		ИСТИНА
	|		
	|ГДЕ
	|	СчетНаОплатуКлиенту.Ссылка = &СчетНаОплату
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СчетНаОплату", СчетНаОплату);
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	
	СтатьяДДСПоХО = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если Не ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда
			НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
		КонецЕсли;
		
		Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(ВалютаДокумента, Выборка.ВалютаВзаиморасчетов, ТекущаяДатаСеанса());
		НоваяСтрока.Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, НоваяСтрока.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		НоваяСтрока.СчетНаОплату = СчетНаОплату;
	КонецЕсли;
	
	ДенежныеСредстваСервер.ЗаполнитьНДСВРасшифровке(РасшифровкаПлатежа,
		ДенежныеСредстваСервер.РасшифровкаПлатежаНДС(ТекущаяДатаСеанса(), ВалютаДокумента, ЗаказКлиента, Истина));
	
КонецПроцедуры

// Процедура заполнения табличной части "РасшифровкаПлатежа" по возврату товаров от клиента.
//
// Параметры:
//	ОбъектыРасчетов - ДокументСсылка, Массив - Документ - основание.
//	ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа поступления денежных средств.
//	СуммаДокумента - Число - Сумма документа - основания.
//	Партнер - СправочникСсылка.Партнеры - Партнер документа - основания.
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть документа.
//
Процедура ЗаполнитьРасшифровкуПлатежаПоВозвратуТоваровОтКлиента(ОбъектыРасчетов, ВалютаДокумента, СуммаДокумента, Партнер, РасшифровкаПлатежа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	РасчетыСКлиентами.ЗаказКлиента КАК Заказ,
		|	РасчетыСКлиентами.Валюта КАК ВалютаВзаиморасчетов,
		|	(-РасчетыСКлиентами.КОплатеОстаток) КАК СуммаВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(,
		|		ЗаказКлиента В (&ОбъектыРасчетов)
		|	) КАК РасчетыСКлиентами
		|ГДЕ
		|	РасчетыСКлиентами.КОплатеОстаток < 0
		|УПОРЯДОЧИТЬ ПО
		|	ВЫБОР КОГДА РасчетыСКлиентами.ЗаказКлиента ССЫЛКА Документ.ВозвратТоваровОтКлиента ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ
		|");
		
		Запрос.УстановитьПараметр("ОбъектыРасчетов", ОбъектыРасчетов);
		
		СтатьяДДСПоХО = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(
			Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Партнер = Партнер;
			НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
			
			Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(ВалютаДокумента, Выборка.ВалютаВзаиморасчетов, ТекущаяДатаСеанса());
			
			Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, НоваяСтрока.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
			Если Сумма <= СуммаДокумента Тогда
				НоваяСтрока.Сумма = Сумма;
			Иначе
				НоваяСтрока.Сумма = СуммаДокумента;
				НоваяСтрока.СуммаВзаиморасчетов = 0;
			КонецЕсли;
		Иначе
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			НоваяСтрока.Партнер = Партнер;
			НоваяСтрока.Сумма = СуммаДокумента;
		КонецЕсли;
		
		ДенежныеСредстваСервер.ЗаполнитьНДСВРасшифровке(РасшифровкаПлатежа,
			ДенежныеСредстваСервер.РасшифровкаПлатежаНДС(ТекущаяДатаСеанса(), ВалютаДокумента, РасшифровкаПлатежа.ВыгрузитьКолонку("Заказ"), Ложь));
	КонецЕсли;
КонецПроцедуры

// Процедура заполнения табличной части "РасшифровкаПлатежа" по заказу поставщику.
//
// Параметры:
//	ЗаказПоставщику - ДокументСсылка.ЗаказПоставщику - Документ - основание.
//	Договор - СправочникСсылка.ДоговорыКонтрагентов - Договор для заполнения.
//	ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа поступления денежных средств.
//	СуммаКОплате - Число - Сумма к оплате поставщику.
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть документа.
//	ЖелательнаяДатаПлатежа - Дата - Дата платежа по графику.
//  Организация - СправочникСсылка.Организации - Организация, осуществляющая закупку.
//
Процедура ЗаполнитьРасшифровкуПлатежаПоЗаказуПоставщику(ЗаказПоставщику, Договор, ВалютаДокумента, Знач СуммаКОплате, РасшифровкаПлатежа, ЖелательнаяДатаПлатежа = Неопределено, Организация = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		
		Если ТипЗнч(ЗаказПоставщику) = Тип("Массив") Тогда
			ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказПоставщику[0], "ПорядокРасчетов");
		Иначе
			ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказПоставщику, "ПорядокРасчетов");
		КонецЕсли;
		
		Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
			И ТипЗнч(ЗаказПоставщику) <> Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	РасчетыСПоставщиками.Период					   КАК Период,
			|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	РасчетыСПоставщиками.ЗаказПоставщику		   КАК ЗаказПоставщику,
			|	РасчетыСПоставщиками.ЗаказПоставщику.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|	Аналитика.Партнер							   КАК Партнер,
			|	РасчетыСПоставщиками.Валюта					   КАК Валюта,
			|	СУММА(РасчетыСПоставщиками.КОплате)			   КАК СуммаПоГрафику
			|ПОМЕСТИТЬ ТаблицаКОплате
			|ИЗ
			|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			|		ПО РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
			|		И (&Организация = Аналитика.Организация
			|			ИЛИ &Организация = Неопределено)
			|ГДЕ
			|	РасчетыСПоставщиками.Активность
			|	И РасчетыСПоставщиками.Регистратор В (&ЗаказПоставщику)
			|	И РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|	И РасчетыСПоставщиками.КОплате > 0
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетыСПоставщиками.Период,
			|	РасчетыСПоставщиками.ЗаказПоставщику,
			|	РасчетыСПоставщиками.ЗаказПоставщику.СтатьяДвиженияДенежныхСредств,
			|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам,
			|	РасчетыСПоставщиками.Валюта,
			|	Аналитика.Партнер
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	&ТекущаяДата КАК Период,
			|	Аналитика.КлючАналитики КАК АналитикаУчетаПоПартнерам,
			|	ДанныеДоговора.Ссылка КАК ЗаказПоставщику,
			|	ДанныеДоговора.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|	ДанныеДоговора.Партнер КАК Партнер,
			|	ДанныеДоговора.ВалютаВзаиморасчетов КАК Валюта,
			|	0 КАК СуммаПоГрафику
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			|		ПО ДанныеДоговора.Партнер = Аналитика.Партнер
			|			И ДанныеДоговора.Контрагент = Аналитика.Контрагент
			|			И ДанныеДоговора.Организация = Аналитика.Организация
			|			И ДанныеДоговора.Ссылка = Аналитика.Договор
			|ГДЕ
			|	ДанныеДоговора.Ссылка В (&ЗаказПоставщику)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МИНИМУМ(ТаблицаКОплате.Период) КАК Период,
			|	ТаблицаКОплате.ЗаказПоставщику КАК Заказ,
			|	ТаблицаКОплате.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
			|	ТаблицаКОплате.Партнер		   КАК Партнер,
			|	ТаблицаКОплате.Валюта		   КАК ВалютаВзаиморасчетов,
			|
			|	ВЫБОР
			|		КОГДА СУММА(ТаблицаКОплате.СуммаПоГрафику) > 0 И СУММА(ТаблицаКОплате.СуммаПоГрафику) <=
			|				МАКСИМУМ(РасчетыСПоставщикамиОстатки.ОплачиваетсяОстаток-РасчетыСПоставщикамиОстатки.КОплатеОстаток)
			|			ТОГДА СУММА(ТаблицаКОплате.СуммаПоГрафику)
			|		ИНАЧЕ МАКСИМУМ(РасчетыСПоставщикамиОстатки.ОплачиваетсяОстаток-РасчетыСПоставщикамиОстатки.КОплатеОстаток)
			|	КОНЕЦ КАК СуммаПоГрафику,
			|	СУММА(0) КАК СуммаОплаты
			|
			|ИЗ
			|	ТаблицаКОплате КАК ТаблицаКОплате
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками.Остатки(
			|				,
			|				(АналитикаУчетаПоПартнерам, ЗаказПоставщику, Валюта) В
			|					(ВЫБРАТЬ
			|						ТаблицаКОплате.АналитикаУчетаПоПартнерам,
			|						ТаблицаКОплате.ЗаказПоставщику,
			|						ТаблицаКОплате.Валюта
			|					ИЗ
			|						ТаблицаКОплате)) КАК РасчетыСПоставщикамиОстатки
			|		ПО ТаблицаКОплате.АналитикаУчетаПоПартнерам = РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам
			|			И ТаблицаКОплате.ЗаказПоставщику = РасчетыСПоставщикамиОстатки.ЗаказПоставщику
			|			И ТаблицаКОплате.Валюта = РасчетыСПоставщикамиОстатки.Валюта
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаКОплате.ЗаказПоставщику,
			|	ТаблицаКОплате.СтатьяДвиженияДенежныхСредств,
			|	ТаблицаКОплате.Партнер,
			|	ТаблицаКОплате.Валюта
			|
			|ИТОГИ ПО
			|	ТаблицаКОплате.ЗаказПоставщику
			|";
			
		Иначе
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	РасчетыСПоставщиками.ЗаказПоставщику КАК Заказ,
			|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	Аналитика.Партнер КАК Партнер,
			|	ВЫРАЗИТЬ(РасчетыСПоставщиками.ЗаказПоставщику.Соглашение КАК Справочник.СоглашенияСПоставщиками) КАК Соглашение,
			|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(РасчетыСПоставщиками.ЗаказПоставщику) = ТИП(Справочник.ДоговорыКонтрагентов) ТОГДА
			|		ВЫБОР
			|			КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСПоставщиками.ЗаказПоставщику КАК Справочник.ДоговорыКонтрагентов).СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
			|				ТОГДА ВЫРАЗИТЬ(РасчетыСПоставщиками.ЗаказПоставщику.Соглашение КАК Справочник.СоглашенияСПоставщиками).СтатьяДвиженияДенежныхСредств
			|			ИНАЧЕ РасчетыСПоставщиками.ЗаказПоставщику.СтатьяДвиженияДенежныхСредств
			|		КОНЕЦ
			|	ИНАЧЕ
			|		ВЫБОР
			|			КОГДА РасчетыСПоставщиками.ЗаказПоставщику.Договор ССЫЛКА Справочник.ДоговорыКонтрагентов ТОГДА
			|				ВЫБОР
			|					КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСПоставщиками.ЗаказПоставщику.Договор КАК Справочник.ДоговорыКонтрагентов).СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
			|						ТОГДА ВЫРАЗИТЬ(РасчетыСПоставщиками.ЗаказПоставщику.Соглашение КАК Справочник.СоглашенияСПоставщиками).СтатьяДвиженияДенежныхСредств
			|					ИНАЧЕ РасчетыСПоставщиками.ЗаказПоставщику.Договор.СтатьяДвиженияДенежныхСредств
			|				КОНЕЦ
			|			КОГДА РасчетыСПоставщиками.ЗаказПоставщику.Договор ССЫЛКА Справочник.ДоговорыМеждуОрганизациями ТОГДА
			|				ВЫРАЗИТЬ(РасчетыСПоставщиками.ЗаказПоставщику.Договор КАК Справочник.ДоговорыМеждуОрганизациями).СтатьяДвиженияДенежныхСредствПолучателя
			|		КОНЕЦ
			|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств,
			|	РасчетыСПоставщиками.Период КАК Период,
			|	РасчетыСПоставщиками.Валюта КАК ВалютаВзаиморасчетов,
			|	РасчетыСПоставщиками.ФормаОплаты КАК ФормаОплаты,
			|	СУММА(РасчетыСПоставщиками.КОплате) КАК СуммаПоГрафику
			|ПОМЕСТИТЬ ЭтапыОплаты
			|ИЗ
			|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			|		ПО РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
			|			И (&Организация = Аналитика.Организация
			|				ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
			|ГДЕ
			|	РасчетыСПоставщиками.Активность
			|	И РасчетыСПоставщиками.ЗаказПоставщику В(&ЗаказПоставщику)
			|	И РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|	И РасчетыСПоставщиками.КОплате > 0
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетыСПоставщиками.ЗаказПоставщику,
			|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам,
			|	Аналитика.Партнер,
			|	ВЫРАЗИТЬ(РасчетыСПоставщиками.ЗаказПоставщику.Соглашение КАК Справочник.СоглашенияСПоставщиками),
			|	РасчетыСПоставщиками.Период,
			|	РасчетыСПоставщиками.Валюта,
			|	РасчетыСПоставщиками.ФормаОплаты,
			|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(РасчетыСПоставщиками.ЗаказПоставщику) = ТИП(Справочник.ДоговорыКонтрагентов) ТОГДА
			|		ВЫБОР
			|			КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСПоставщиками.ЗаказПоставщику КАК Справочник.ДоговорыКонтрагентов).СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
			|				ТОГДА ВЫРАЗИТЬ(РасчетыСПоставщиками.ЗаказПоставщику.Соглашение КАК Справочник.СоглашенияСПоставщиками).СтатьяДвиженияДенежныхСредств
			|			ИНАЧЕ РасчетыСПоставщиками.ЗаказПоставщику.СтатьяДвиженияДенежныхСредств
			|		КОНЕЦ
			|	ИНАЧЕ
			|		ВЫБОР
			|			КОГДА РасчетыСПоставщиками.ЗаказПоставщику.Договор ССЫЛКА Справочник.ДоговорыКонтрагентов ТОГДА
			|				ВЫБОР
			|					КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСПоставщиками.ЗаказПоставщику.Договор КАК Справочник.ДоговорыКонтрагентов).СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
			|						ТОГДА ВЫРАЗИТЬ(РасчетыСПоставщиками.ЗаказПоставщику.Соглашение КАК Справочник.СоглашенияСПоставщиками).СтатьяДвиженияДенежныхСредств
			|					ИНАЧЕ РасчетыСПоставщиками.ЗаказПоставщику.Договор.СтатьяДвиженияДенежныхСредств
			|				КОНЕЦ
			|			КОГДА РасчетыСПоставщиками.ЗаказПоставщику.Договор ССЫЛКА Справочник.ДоговорыМеждуОрганизациями ТОГДА
			|				ВЫРАЗИТЬ(РасчетыСПоставщиками.ЗаказПоставщику.Договор КАК Справочник.ДоговорыМеждуОрганизациями).СтатьяДвиженияДенежныхСредствПолучателя
			|		КОНЕЦ
			|	КОНЕЦ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЭтапыОплаты.Заказ КАК Заказ,
			|	ЭтапыОплаты.Партнер,
			|	ЭтапыОплаты.Соглашение,
			|	ЭтапыОплаты.СтатьяДвиженияДенежныхСредств,
			|	ЭтапыОплаты.Период,
			|	ЭтапыОплаты.ВалютаВзаиморасчетов,
			|	ЭтапыОплаты.ФормаОплаты,
			|	ЭтапыОплаты.СуммаПоГрафику,
			|	СУММА(ЕСТЬNULL(РасчетыСПоставщикамиОбороты.КОплатеПриход, 0) -
			|		ЕСТЬNULL(РасчетыСПоставщикамиОбороты.ОплачиваетсяОборот, 0)) КАК СуммаОплаты
			|ИЗ
			|	ЭтапыОплаты КАК ЭтапыОплаты
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками.Обороты(, , Период, ) КАК РасчетыСПоставщикамиОбороты
			|		ПО (РасчетыСПоставщикамиОбороты.ЗаказПоставщику = ЭтапыОплаты.Заказ)
			|			И (РасчетыСПоставщикамиОбороты.Валюта = ЭтапыОплаты.ВалютаВзаиморасчетов)
			|			И (РасчетыСПоставщикамиОбороты.АналитикаУчетаПоПартнерам = ЭтапыОплаты.АналитикаУчетаПоПартнерам)
			|
			|СГРУППИРОВАТЬ ПО
			|	ЭтапыОплаты.Заказ,
			|	ЭтапыОплаты.Партнер,
			|	ЭтапыОплаты.Соглашение,
			|	ЭтапыОплаты.СтатьяДвиженияДенежныхСредств,
			|	ЭтапыОплаты.Период,
			|	ЭтапыОплаты.ВалютаВзаиморасчетов,
			|	ЭтапыОплаты.ФормаОплаты,
			|	ЭтапыОплаты.СуммаПоГрафику
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЭтапыОплаты.Период
			|ИТОГИ ПО
			|	Заказ";
			
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		
		Запрос.УстановитьПараметр("ЗаказПоставщику", ЗаказПоставщику);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		
		СтатьяДДСПоХО = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
		
		ВыборкаПоЗаказам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоЗаказам.Следующий() Цикл
			
			СуммаПоГрафикуВсего = 0;
			УчтеноСуммаОплаты = 0;
			
			Выборка = ВыборкаПоЗаказам.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				// Найдем первый неоплаченный этап.
				Если (Выборка.СуммаПоГрафику + СуммаПоГрафикуВсего) > Выборка.СуммаОплаты
				 ИЛИ СуммаКОплате <> 0 Тогда
					
					НоваяСтрока = РасшифровкаПлатежа.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					Если Не ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда
						НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
					КонецЕсли;
					НоваяСтрока.СуммаВзаиморасчетов = Выборка.СуммаПоГрафику + СуммаПоГрафикуВсего - (Выборка.СуммаОплаты + УчтеноСуммаОплаты);
					Если СуммаКОплате <> 0 Тогда
						НоваяСтрока.СуммаВзаиморасчетов = Мин(НоваяСтрока.СуммаВзаиморасчетов, СуммаКОплате);
						СуммаКОплате = СуммаКОплате - НоваяСтрока.СуммаВзаиморасчетов;
						УчтеноСуммаОплаты = УчтеноСуммаОплаты + НоваяСтрока.СуммаВзаиморасчетов;
						СуммаПоГрафикуВсего = СуммаПоГрафикуВсего + Выборка.СуммаПоГрафику;
					КонецЕсли;
					
					Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(ВалютаДокумента, Выборка.ВалютаВзаиморасчетов, ТекущаяДатаСеанса());
					
					НоваяСтрока.Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, НоваяСтрока.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
					
					Если ЗначениеЗаполнено(ЖелательнаяДатаПлатежа) Тогда
						ЖелательнаяДатаПлатежа = Мин(ЖелательнаяДатаПлатежа, Выборка.Период);
					Иначе
						ЖелательнаяДатаПлатежа = Выборка.Период;
					КонецЕсли;
					
					Если СуммаКОплате = 0 Тогда
						Прервать;
					КонецЕсли;
					
				Иначе
					
					СуммаПоГрафикуВсего = СуммаПоГрафикуВсего + Выборка.СуммаПоГрафику;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	
		Если РасшифровкаПлатежа.Количество() = 0 Тогда
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			Если ТипЗнч(ЗаказПоставщику) <> Тип("Массив") Тогда
				
				Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
					
					НоваяСтрока.Заказ	= Договор;
					РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "Партнер, СтатьяДвиженияДенежныхСредств");
					НоваяСтрока.Партнер = РеквизитыДоговора.Партнер;
					НоваяСтрока.СтатьяДвиженияДенежныхСредств = РеквизитыДоговора.СтатьяДвиженияДенежныхСредств;
					Если Не ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда
						НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
					КонецЕсли;
				Иначе
					
					НоваяСтрока.Заказ	= ЗаказПоставщику;
					НоваяСтрока.Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказПоставщику, "Партнер");
					Если ЗначениеЗаполнено(Договор) Тогда
						НоваяСтрока.СтатьяДвиженияДенежныхСредств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "СтатьяДвиженияДенежныхСредств");
					КонецЕсли;
					Если Не ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда
						НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			РасшифровкаПлатежа.Свернуть("Заказ, Партнер, СтатьяДвиженияДенежныхСредств, ВалютаВзаиморасчетов", "Сумма, СуммаВзаиморасчетов");
		КонецЕсли;
		
		ДенежныеСредстваСервер.ЗаполнитьНДСВРасшифровке(РасшифровкаПлатежа,
			ДенежныеСредстваСервер.РасшифровкаПлатежаНДС(ТекущаяДатаСеанса(), ВалютаДокумента, РасшифровкаПлатежа.ВыгрузитьКолонку("Заказ"), Ложь));
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения табличной части "РасшифровкаПлатежа" по возврату поставщику.
//
// Параметры:
//	ОбъектыРасчетов - ДокументСсылка, Массив - Документ - основание.
//	ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа поступления денежных средств.
//	СуммаДокумента - Число - Сумма документа - основания.
//	Партнер - СправочникСсылка.Партнеры - Партнер документа - основания.
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть документа.
//
Процедура ЗаполнитьРасшифровкуПлатежаПоВозвратуПоставщику(ОбъектыРасчетов, ВалютаДокумента, СуммаДокумента, Партнер, РасшифровкаПлатежа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	РасчетыСПоставщиками.ЗаказПоставщику КАК ОснованиеПлатежа,
		|	РасчетыСПоставщиками.ЗаказПоставщику КАК Заказ,
		|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(РасчетыСПоставщиками.ЗаказПоставщику) = ТИП(Справочник.ДоговорыКонтрагентов) ТОГДА
		|		РасчетыСПоставщиками.ЗаказПоставщику.СтатьяДвиженияДенежныхСредств
		|	ИНАЧЕ
		|		ВЫБОР
		|			КОГДА ЕСТЬNULL(РасчетыСПоставщиками.ЗаказПоставщику.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
		|				ТОГДА ВЫРАЗИТЬ(РасчетыСПоставщиками.ЗаказПоставщику.Соглашение КАК Справочник.СоглашенияСПоставщиками).СтатьяДвиженияДенежныхСредств
		|			ИНАЧЕ РасчетыСПоставщиками.ЗаказПоставщику.Договор.СтатьяДвиженияДенежныхСредств
		|		КОНЕЦ
		|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств,
		|	РасчетыСПоставщиками.Валюта КАК ВалютаВзаиморасчетов,
		|	РасчетыСПоставщиками.КОплатеОстаток КАК СуммаВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(,
		|		ЗаказПоставщику В (&ОбъектыРасчетов)
		|	) КАК РасчетыСПоставщиками
		|ГДЕ
		|	РасчетыСПоставщиками.КОплатеОстаток > 0
		|");
		
		Запрос.УстановитьПараметр("ОбъектыРасчетов", ОбъектыРасчетов);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Партнер = Партнер;
			
			Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(ВалютаДокумента, Выборка.ВалютаВзаиморасчетов, ТекущаяДатаСеанса());
			
			Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, НоваяСтрока.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
			Если Сумма <= СуммаДокумента Тогда
				НоваяСтрока.Сумма = Сумма;
			Иначе
				НоваяСтрока.Сумма = СуммаДокумента;
				НоваяСтрока.СуммаВзаиморасчетов = 0;
			КонецЕсли;
		КонецЕсли;
		
		ДенежныеСредстваСервер.ЗаполнитьНДСВРасшифровке(РасшифровкаПлатежа,
			ДенежныеСредстваСервер.РасшифровкаПлатежаНДС(ТекущаяДатаСеанса(), ВалютаДокумента, РасшифровкаПлатежа.ВыгрузитьКолонку("Заказ"), Истина));
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения табличной части "РасшифровкаПлатежа" по договору.
//
// Параметры:
//		Договор - СправочникСсылка.ДоговорыКонтрагентов - Договор для получения остатков.
//		ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
//		РасшифровкаПлатежа - ТаблицаЗначений - Таблица для заполнения.
//		Организация - СправочникСсылка.Организации - Необязательное, организация для получения остатков расчетов.
//
Процедура ЗаполнитьРасшифровкуПлатежаПоДоговоруСПоставщиком(Договор, ВалютаДокумента, РасшифровкаПлатежа, Организация = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ДанныеДоговора.Ссылка КАК Заказ,
		|	ЕСТЬNULL(Аналитика.Партнер, ДанныеДоговора.Партнер) КАК Партнер,
		|	ЕСТЬNULL(РасчетыСПоставщикамиОстатки.Валюта, ДанныеДоговора.ВалютаВзаиморасчетов) КАК ВалютаВзаиморасчетов,
		|	ЕСТЬNULL(РасчетыСПоставщикамиОстатки.ОплачиваетсяОстаток - РасчетыСПоставщикамиОстатки.КОплатеОстаток, 0) КАК СуммаВзаиморасчетов
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрНакопления.РасчетыСПоставщиками.Остатки(, ЗаказПоставщику = &Договор) КАК РасчетыСПоставщикамиОстатки
		|	ПО
		|		ИСТИНА
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|		ПО РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
		|			И (&Организация = Аналитика.Организация
		|				ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
		|ГДЕ
		|	ДанныеДоговора.Ссылка = &Договор
		|");
		
		Запрос.УстановитьПараметр("Договор", Договор);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		СтатьяДДСПоХО = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(
			Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		НоваяСтрока.СтатьяДвиженияДенежныхСредств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "СтатьяДвиженияДенежныхСредств");
		Если Не ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда
			НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
		КонецЕсли;
		
		Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(ВалютаДокумента, Выборка.ВалютаВзаиморасчетов, ТекущаяДатаСеанса());
		НоваяСтрока.Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0,
			НоваяСтрока.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
		
		ДенежныеСредстваСервер.ЗаполнитьНДСВРасшифровке(РасшифровкаПлатежа,
			ДенежныеСредстваСервер.РасшифровкаПлатежаНДС(ТекущаяДатаСеанса(), ВалютаДокумента, РасшифровкаПлатежа.ВыгрузитьКолонку("Заказ"), Ложь));
	КонецЕсли;
	
КонецПроцедуры

// Процедура получает результат запроса по остаткам расчетов с партнером.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация документа.
//	Контрагент - СправочникСсылка.Контрагенты - Контрагент, выбранный в документе.
//	ТипЗадолженности - ПеречислениеСсылка.ТипыЗадолженности - Тип задолженности.
//	ТипРасчетов - ПеречислениеСсылка.ТипыРасчетовСПартнерами - Тип расчетов.
//	Дата - Дата - Дата документа.
//	Валюта - СправочникСсылка.Валюты - Валюта документа.
//	Задолженность - ДанныеФормыКоллекция - Табличная часть документа.
//
Процедура ЗаполнитьЗадолженностьПоОстаткам(Организация, Контрагент, ТипЗадолженности, ТипРасчетов, Дата, Валюта, Задолженность) Экспорт
	
	ТекстРасчетыСКлиентами = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
	|	РегистрАналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	РасчетыСКлиентамиОстатки.ЗаказКлиента КАК Заказ,
	|	РасчетыСКлиентамиОстатки.ЗаказКлиента.Дата КАК Дата,
	|	РасчетыСКлиентамиОстатки.ЗаказКлиента.Номер КАК Номер,
	|	ВЫРАЗИТЬ(РасчетыСКлиентамиОстатки.ЗаказКлиента.Соглашение КАК Справочник.СоглашенияСКлиентами) КАК Соглашение,
	|	РасчетыСКлиентамиОстатки.Валюта КАК ВалютаВзаиморасчетов,
	|	
	|	ВЫБОР КОГДА РасчетыСКлиентамиОстатки.СуммаОстаток < 0 ТОГДА
	|		-РасчетыСКлиентамиОстатки.СуммаОстаток
	|	ИНАЧЕ
	|		РасчетыСКлиентамиОстатки.СуммаОстаток
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	0 КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(&Граница,
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				РегистрАналитикаУчетаПоПартнерам.КлючАналитики КАК АналитикаУчетаПоПартнерам
	|			ИЗ
	|				РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|			ГДЕ
	|				РегистрАналитикаУчетаПоПартнерам.Организация = &Организация
	|				И РегистрАналитикаУчетаПоПартнерам.Контрагент = &Контрагент
	|			)
	|		) КАК РасчетыСКлиентамиОстатки
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|	ПО 
	|		РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
	|
	|ГДЕ
	|	ВЫБОР КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		И РасчетыСКлиентамиОстатки.СуммаОстаток >= 0
	|	ТОГДА
	|		ИСТИНА
	|	КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		И РасчетыСКлиентамиОстатки.СуммаОстаток <= 0
	|	ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ";
	
	ТекстРасчетыСПоставщиками = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
	|	РегистрАналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	РасчетыСПоставщикамиОстатки.ЗаказПоставщику КАК Заказ,
	|	РасчетыСПоставщикамиОстатки.ЗаказПоставщику.Дата КАК Дата,
	|	РасчетыСПоставщикамиОстатки.ЗаказПоставщику.Номер КАК Номер,
	|	ВЫРАЗИТЬ(РасчетыСПоставщикамиОстатки.ЗаказПоставщику.Соглашение КАК Справочник.СоглашенияСПоставщиками) КАК Соглашение,
	|	РасчетыСПоставщикамиОстатки.Валюта КАК ВалютаВзаиморасчетов,
	|	
	|	ВЫБОР КОГДА РасчетыСПоставщикамиОстатки.СуммаОстаток < 0 ТОГДА
	|		-РасчетыСПоставщикамиОстатки.СуммаОстаток
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиОстатки.СуммаОстаток
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	0 КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(&Граница,
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				РегистрАналитикаУчетаПоПартнерам.КлючАналитики КАК АналитикаУчетаПоПартнерам
	|			ИЗ
	|				РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|			ГДЕ
	|				РегистрАналитикаУчетаПоПартнерам.Организация = &Организация
	|				И РегистрАналитикаУчетаПоПартнерам.Контрагент = &Контрагент
	|			)
	|		) КАК РасчетыСПоставщикамиОстатки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|	ПО 
	|		РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
	|
	|ГДЕ
	|	ВЫБОР КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская) 
	|		И РасчетыСПоставщикамиОстатки.СуммаОстаток >= 0
	|	ТОГДА
	|		ИСТИНА
	|	КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		И РасчетыСПоставщикамиОстатки.СуммаОстаток <= 0
	|	ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ";
	
	ТекстЗапроса = "";
	
	Если Не ЗначениеЗаполнено(ТипРасчетов) Тогда
		
		ТекстЗапроса = ТекстРасчетыСКлиентами + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|" + ТекстРасчетыСПоставщиками;
		
	ИначеЕсли ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
		ТекстЗапроса = ТекстРасчетыСКлиентами;
	Иначе //РасчетыСПоставщиком
		ТекстЗапроса = ТекстРасчетыСПоставщиками;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Номер
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	МоментВремени = КонецДня(Дата);
	Граница = Новый Граница(МоментВремени, ВидГраницы.Включая);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Граница", Граница);
	Запрос.УстановитьПараметр("ТипЗадолженности", ТипЗадолженности);
	
	СоответствиеВалютаКурс = Новый Соответствие;
	
	Задолженность.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Валюта)
		 И Валюта <> Выборка.ВалютаВзаиморасчетов Тогда
		 
			Коэффициенты = СоответствиеВалютаКурс.Получить(Выборка.ВалютаВзаиморасчетов);
			Если Коэффициенты = Неопределено Тогда
				Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(Валюта, Выборка.ВалютаВзаиморасчетов, МоментВремени);
				СоответствиеВалютаКурс.Вставить(Выборка.ВалютаВзаиморасчетов, Коэффициенты);
			КонецЕсли;
			Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, Выборка.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
			
		Иначе
			Сумма = Выборка.СуммаВзаиморасчетов;
		КонецЕсли;
		
		Если Сумма <> 0 Тогда
			НоваяСтрока = Задолженность.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Сумма = Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура получает результат запроса по остаткам расчетов с партнером по документам.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация документа.
//	Контрагент - СправочникСсылка.Контрагенты - Контрагент, выбранный в документе.
//	ТипЗадолженности - ПеречислениеСсылка.ТипыЗадолженности - Тип задолженности.
//	ТипРасчетов - ПеречислениеСсылка.ТипыРасчетовСПартнерами - Тип расчетов.
//	Дата - Дата - Дата документа.
//	Валюта - СправочникСсылка.Валюты - Валюта документа.
//	Задолженность - ДанныеФормыКоллекция - Табличная часть документа.
//
Процедура ЗаполнитьЗадолженностьПоОстаткамВзаиморасчетов(Организация, Контрагент, ТипЗадолженности, ТипРасчетов, Дата, Валюта, Задолженность) Экспорт
	
	Задолженность.Очистить();
	
	ТекстВтАналитика = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВтОрганизации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &Организация
	|	И Организации.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию
	|	И Организации.ОбособленноеПодразделение
	|	ИЛИ Организации.Ссылка = &Организация
	|;
	|ВЫБРАТЬ
	|	РегистрАналитикаУчетаПоПартнерам.КлючАналитики КАК АналитикаУчетаПоПартнерам
	|ПОМЕСТИТЬ ВтАналитика
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОрганизации
	|			ПО ВтОрганизации.Ссылка = РегистрАналитикаУчетаПоПартнерам.Организация
	|ГДЕ
	|	РегистрАналитикаУчетаПоПартнерам.Контрагент = &Контрагент
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Если НЕ ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		
		ТекстРасчетыСКлиентами = 
		
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
		|	РегистрАналитикаУчетаПоПартнерам.Партнер     КАК Партнер,
		|	РегистрАналитикаУчетаПоПартнерам.Организация КАК Организация,
		|	РасчетыСКлиентамиОстатки.ЗаказКлиента        КАК Заказ,
		|	РасчетыСКлиентамиОстатки.Валюта              КАК ВалютаВзаиморасчетов,
		|	РасчетыСКлиентамиОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
		|	
		|	ВЫБОР КОГДА РасчетыСКлиентамиОстатки.ДолгОстаток + РасчетыСКлиентамиОстатки.ПредоплатаОстаток < 0 ТОГДА
		|		-(РасчетыСКлиентамиОстатки.ДолгОстаток + РасчетыСКлиентамиОстатки.ПредоплатаОстаток)
		|	ИНАЧЕ
		|		РасчетыСКлиентамиОстатки.ДолгОстаток + РасчетыСКлиентамиОстатки.ПредоплатаОстаток
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|
		|	ВЫБОР КОГДА РасчетыСКлиентамиОстатки.ДолгРеглОстаток + РасчетыСКлиентамиОстатки.ПредоплатаРеглОстаток < 0 ТОГДА
		|		-(РасчетыСКлиентамиОстатки.ДолгРеглОстаток + РасчетыСКлиентамиОстатки.ПредоплатаРеглОстаток)
		|	ИНАЧЕ
		|		РасчетыСКлиентамиОстатки.ДолгРеглОстаток + РасчетыСКлиентамиОстатки.ПредоплатаРеглОстаток
		|	КОНЕЦ КАК СуммаРегл,
		|
		|	ВЫБОР КОГДА РасчетыСКлиентамиОстатки.ДолгУпрОстаток + РасчетыСКлиентамиОстатки.ПредоплатаУпрОстаток < 0 ТОГДА
		|		-(РасчетыСКлиентамиОстатки.ДолгУпрОстаток + РасчетыСКлиентамиОстатки.ПредоплатаУпрОстаток)
		|	ИНАЧЕ
		|		РасчетыСКлиентамиОстатки.ДолгУпрОстаток + РасчетыСКлиентамиОстатки.ПредоплатаУпрОстаток
		|	КОНЕЦ КАК СуммаУпр
		|
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(&Граница,
		|		АналитикаУчетаПоПартнерам В (
		|			ВЫБРАТЬ
		|				ВтАналитика.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
		|			ИЗ
		|				ВтАналитика КАК ВтАналитика)
		|		) КАК РасчетыСКлиентамиОстатки
		|	ЛЕВОЕ СОЕДИНЕНИЕ 
		|		РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
		|	ПО 
		|		РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
		|
		|ГДЕ
		|	ВЫБОР КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
		|		И (РасчетыСКлиентамиОстатки.ДолгОстаток > 0 ИЛИ РасчетыСКлиентамиОстатки.ПредоплатаОстаток > 0)
		|	ТОГДА
		|		ИСТИНА
		|	КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
		|		И (РасчетыСКлиентамиОстатки.ДолгОстаток < 0 ИЛИ РасчетыСКлиентамиОстатки.ПредоплатаОстаток < 0)
		|	ТОГДА
		|		ИСТИНА
		|	ИНАЧЕ
		|		ЛОЖЬ
		|	КОНЕЦ";
		
		ТекстРасчетыСПоставщиками = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
		|	РегистрАналитикаУчетаПоПартнерам.Партнер     КАК Партнер,
		|	РегистрАналитикаУчетаПоПартнерам.Организация КАК Организация,
		|	РасчетыСПоставщикамиОстатки.ЗаказПоставщику  КАК Заказ,
		|	РасчетыСПоставщикамиОстатки.Валюта           КАК ВалютаВзаиморасчетов,
		|	РасчетыСПоставщикамиОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
		|	
		|	ВЫБОР КОГДА РасчетыСПоставщикамиОстатки.ДолгОстаток + РасчетыСПоставщикамиОстатки.ПредоплатаОстаток < 0 ТОГДА
		|		-(РасчетыСПоставщикамиОстатки.ДолгОстаток + РасчетыСПоставщикамиОстатки.ПредоплатаОстаток)
		|	ИНАЧЕ
		|		РасчетыСПоставщикамиОстатки.ДолгОстаток + РасчетыСПоставщикамиОстатки.ПредоплатаОстаток
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	
		|	ВЫБОР КОГДА РасчетыСПоставщикамиОстатки.ДолгРеглОстаток + РасчетыСПоставщикамиОстатки.ПредоплатаРеглОстаток < 0 ТОГДА
		|		-(РасчетыСПоставщикамиОстатки.ДолгРеглОстаток + РасчетыСПоставщикамиОстатки.ПредоплатаРеглОстаток)
		|	ИНАЧЕ
		|		РасчетыСПоставщикамиОстатки.ДолгРеглОстаток + РасчетыСПоставщикамиОстатки.ПредоплатаРеглОстаток
		|	КОНЕЦ КАК СуммаРегл,
		|
		|	ВЫБОР КОГДА РасчетыСПоставщикамиОстатки.ДолгУпрОстаток + РасчетыСПоставщикамиОстатки.ПредоплатаУпрОстаток < 0 ТОГДА
		|		-(РасчетыСПоставщикамиОстатки.ДолгУпрОстаток + РасчетыСПоставщикамиОстатки.ПредоплатаУпрОстаток)
		|	ИНАЧЕ
		|		РасчетыСПоставщикамиОстатки.ДолгУпрОстаток + РасчетыСПоставщикамиОстатки.ПредоплатаУпрОстаток
		|	КОНЕЦ КАК СуммаУпр
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам.Остатки(&Граница,
		|		АналитикаУчетаПоПартнерам В (
		|			ВЫБРАТЬ
		|				ВтАналитика.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
		|			ИЗ
		|				ВтАналитика КАК ВтАналитика)
		|		) КАК РасчетыСПоставщикамиОстатки
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ 
		|		РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
		|	ПО 
		|		РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
		|
		|ГДЕ
		|	ВЫБОР КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская) 
		|		И (РасчетыСПоставщикамиОстатки.ДолгОстаток > 0 ИЛИ РасчетыСПоставщикамиОстатки.ПредоплатаОстаток > 0)
		|	ТОГДА
		|		ИСТИНА
		|	КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
		|		И (РасчетыСПоставщикамиОстатки.ДолгОстаток < 0 ИЛИ РасчетыСПоставщикамиОстатки.ПредоплатаОстаток < 0)
		|	ТОГДА
		|		ИСТИНА
		|	ИНАЧЕ
		|		ЛОЖЬ
		|	КОНЕЦ";
		
		ТекстЗапроса = "";
		
		Если Не ЗначениеЗаполнено(ТипРасчетов) Тогда
			
			ТекстЗапроса = ТекстВтАналитика + ТекстРасчетыСКлиентами + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|" + ТекстРасчетыСПоставщиками;
			
		ИначеЕсли ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
			ТекстЗапроса = ТекстВтАналитика + ТекстРасчетыСКлиентами;
		Иначе
			ТекстЗапроса = ТекстВтАналитика + ТекстРасчетыСПоставщиками;
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		
		МоментВремени = КонецДня(Дата);
		Граница = Новый Граница(МоментВремени, ВидГраницы.Включая);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("Граница", Граница);
		Запрос.УстановитьПараметр("ТипЗадолженности", ТипЗадолженности);
		
	Иначе
		
		ТекстРасчетыСКлиентами = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
			|	РегистрАналитикаУчетаПоПартнерам.Партнер     КАК Партнер,
			|	РегистрАналитикаУчетаПоПартнерам.Организация КАК Организация,
			|	РасчетыСКлиентамиОстатки.ОбъектРасчетов      КАК Заказ,
			|	РасчетыСКлиентамиОстатки.Валюта              КАК ВалютаВзаиморасчетов,
			|	
			|	РасчетыСКлиентамиОстатки.ДолгОстаток + РасчетыСКлиентамиОстатки.ПредоплатаОстаток КАК СуммаВзаиморасчетов,
			|	РасчетыСКлиентамиОстатки.ДолгРеглОстаток + РасчетыСКлиентамиОстатки.ПредоплатаРеглОстаток КАК СуммаРегл,
			|	РасчетыСКлиентамиОстатки.ДолгУпрОстаток + РасчетыСКлиентамиОстатки.ПредоплатаУпрОстаток КАК СуммаУпр
			|ИЗ
			|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(&Граница,
			|		АналитикаУчетаПоПартнерам В (
			|			ВЫБРАТЬ
			|				ВтАналитика.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
			|			ИЗ
			|				ВтАналитика КАК ВтАналитика)
			|		) КАК РасчетыСКлиентамиОстатки
			|	ЛЕВОЕ СОЕДИНЕНИЕ 
			|		РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
			|	ПО
			|		РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
			|ГДЕ
			|	ВЫБОР КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
			|		И РасчетыСКлиентамиОстатки.ДолгОстаток > 0
			|	ТОГДА
			|		ИСТИНА
			|	КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
			|		И РасчетыСКлиентамиОстатки.ПредоплатаОстаток > 0
			|	ТОГДА
			|		ИСТИНА
			|	ИНАЧЕ
			|		ЛОЖЬ
			|	КОНЕЦ";
		
		ТекстРасчетыСПоставщиками = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
			|	РегистрАналитикаУчетаПоПартнерам.Партнер          КАК Партнер,
			|	РегистрАналитикаУчетаПоПартнерам.Организация      КАК Организация,
			|	РасчетыСПоставщикамиОстатки.ОбъектРасчетов   КАК Заказ,
			|	РасчетыСПоставщикамиОстатки.Валюта           КАК ВалютаВзаиморасчетов,
			|	
			|	РасчетыСПоставщикамиОстатки.ДолгОстаток + РасчетыСПоставщикамиОстатки.ПредоплатаОстаток КАК СуммаВзаиморасчетов,
			|	РасчетыСПоставщикамиОстатки.ДолгРеглОстаток + РасчетыСПоставщикамиОстатки.ПредоплатаРеглОстаток КАК СуммаРегл,
			|	РасчетыСПоставщикамиОстатки.ДолгУпрОстаток + РасчетыСПоставщикамиОстатки.ПредоплатаУпрОстаток КАК СуммаУпр
			|ИЗ
			|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Остатки(&Граница,
			|		АналитикаУчетаПоПартнерам В (
			|			ВЫБРАТЬ
			|				ВтАналитика.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
			|			ИЗ
			|				ВтАналитика КАК ВтАналитика)
			|		) КАК РасчетыСПоставщикамиОстатки
			|	ЛЕВОЕ СОЕДИНЕНИЕ 
			|		РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
			|	ПО
			|		РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
			|ГДЕ
			|	ВЫБОР КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская) 
			|		И РасчетыСПоставщикамиОстатки.ПредоплатаОстаток > 0
			|	ТОГДА
			|		ИСТИНА
			|	КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
			|		И РасчетыСПоставщикамиОстатки.ДолгОстаток > 0
			|	ТОГДА
			|		ИСТИНА
			|	ИНАЧЕ
			|		ЛОЖЬ
			|	КОНЕЦ";
		
		Запрос     = Новый Запрос;
		
		МоментВремени = КонецДня(Дата);
		Граница = Новый Граница(МоментВремени, ВидГраницы.Включая);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("Граница", Граница);
		Запрос.УстановитьПараметр("ТипЗадолженности", ТипЗадолженности);
		
		Если Не ЗначениеЗаполнено(ТипРасчетов) Тогда
			ТекстЗапроса = ТекстВтАналитика + ТекстРасчетыСКлиентами + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|" + ТекстРасчетыСПоставщиками;
		ИначеЕсли ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
			ТекстЗапроса =  ТекстВтАналитика + ТекстРасчетыСКлиентами;
		Иначе
			ТекстЗапроса = ТекстВтАналитика + ТекстРасчетыСПоставщиками;
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		
	КонецЕсли;
	
	Остатки = Запрос.Выполнить().Выгрузить();
	Остатки.Свернуть("ТипРасчетов, Партнер, Организация, Заказ, ВалютаВзаиморасчетов","СуммаВзаиморасчетов, СуммаРегл, СуммаУпр");
	
	Для Каждого СтрокаОстатков Из Остатки Цикл
		
		НоваяСтрока = Задолженность.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатков);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнить колонку "Идентификатор строки" в табличной части документа.
//
// Параметры:
//	ТабличнаяЧасть - КоллекцияОбъектовМетаданных - табличная часть документа.
//
Процедура ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(ТабличнаяЧасть) Экспорт
	
	Уникальность = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ИдентификаторСтроки)
			Или Неопределено <> Уникальность.Получить(СтрокаТаблицы.ИдентификаторСтроки) Тогда
			// Идентификатор в строке не заполнен ИЛИ идентификатор встречался ранее
			СтрокаТаблицы.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		Уникальность.Вставить(СтрокаТаблицы.ИдентификаторСтроки, СтрокаТаблицы.ИдентификаторСтроки);
	КонецЦикла;
	
КонецПроцедуры

// Процедура проверяет корректность заполнения даты платежа в документе.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Документ для проверки.
//	Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьДатуПлатежа(ДокументОбъект, Отказ) Экспорт
	
	// Дата оплаты должна быть не меньше даты документа
	Если ЗначениеЗаполнено(ДокументОбъект.ДатаПлатежа)
	 И ДокументОбъект.ДатаПлатежа < НачалоДня(ДокументОбъект.Дата) Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Дата платежа должна быть не меньше даты документа %1'"),
			Формат(ДокументОбъект.Дата, "ДЛФ=DD"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументОбъект,
			"ДатаПлатежа",
			,
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет корректность заполнения порядка оплаты.
//
// Параметры:
//	СправочникОбъект - СправочникОбъект.СоглашенияСКлиентами,СправочникОбъект.СоглашенияСПоставщиками - Проверяемый объект.
//	Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьПорядокОплаты(СправочникОбъект, Отказ) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СправочникОбъект.ВалютаВзаиморасчетов) Тогда
		Возврат
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если СправочникОбъект.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета
	 И (СправочникОбъект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях
	 ИЛИ СправочникОбъект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВВалюте) Тогда
		
		ТекстОшибки = НСтр("ru='Для соглашения в валюте необходимо указать порядок оплаты с расчетами в валюте'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			СправочникОбъект,
			"ПорядокОплаты",
			,
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает суммы расшифровки платежа в выбранную валюту.
//
// Параметры:
//		Объект - ДокументОбъект - Документ для пересчета суммы.
//		СуммаВсего - Число - Сумма документа.
//
Процедура ПересчитатьСуммыВВалютуРасшифровкаПлатежа(Объект, СуммаВсего) Экспорт
	
	СуммаДокумента = СуммаВсего;
	ИтогСумма = Объект.РасшифровкаПлатежа.Итог("Сумма");
	
	// Пересчитаем суммы в табличной части документа.
	Если ИтогСумма <> 0 Тогда
		
		Для Каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			
			Сумма = Окр(СуммаДокумента * СтрокаТаблицы.Сумма / ИтогСумма, 2, 1);
			ИтогСумма = ИтогСумма - СтрокаТаблицы.Сумма;
			СуммаДокумента = СуммаДокумента - Сумма;
			СтрокаТаблицы.Сумма = Сумма;
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.Заказ) Тогда
				Если СтрокаТаблицы.ВалютаВзаиморасчетов = Объект.Валюта Тогда
					СтрокаТаблицы.СуммаВзаиморасчетов = 0;
				КонецЕсли;
			Иначе
				СтрокаТаблицы.ВалютаВзаиморасчетов = Неопределено;
				СтрокаТаблицы.СуммаВзаиморасчетов = 0;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииФормированияДвиженийПоРасчетамСКонтрагентами

// Процедура устанавливает значение Неопределено для незаполненного реквизита "Заказ" табличной части.
//
// Параметры:
//	ТабличнаяЧасть - КоллекцияОбъектовМетаданных - Табличная часть документа.
//
Процедура ОчиститьПустойЗаказВТабличнойЧасти(ТабличнаяЧасть) Экспорт
	
	Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Заказ) И СтрокаТаблицы.Заказ <> Неопределено Тогда
			СтрокаТаблицы.Заказ = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет сумму взаиморасчетов в табличной части "Расшифровка платежка"
// в документах движения денежных средств.
//
// Параметры:
//	Валюта - СправочникСсылка.Валюты - Валюта, указанная в документе.
//	Дата - Дата - Дата документа.
//	ТабличнаяЧасть - ТабличнаяЧасть - Табличная часть документа.
//
Процедура ЗаполнитьСуммуВзаиморасчетовВТабличнойЧасти(Валюта, Дата, ТабличнаяЧасть) Экспорт
	
	ОчиститьПустойЗаказВТабличнойЧасти(ТабличнаяЧасть);
	
	// Если табличная часть пустая или в табличной части заполнена сумма взаиморасчетов,
	// то выполнение процедуры не требуется.
	Если (ТабличнаяЧасть.Количество() = 0
	 ИЛИ ТабличнаяЧасть.Найти(0, "СуммаВзаиморасчетов") = Неопределено)
	 И ТабличнаяЧасть.Найти(Справочники.Валюты.ПустаяСсылка(), "ВалютаВзаиморасчетов") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ИсходнаяТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.СуммаВзаиморасчетов = 0
	|	ИЛИ ТаблицаДокумента.ВалютаВзаиморасчетов = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.СчетНаОплату.ДокументОснование КАК ДокументОснование
	|
	|ПОМЕСТИТЬ ТаблицаДокументовОснований
	|ИЗ
	|	ИсходнаяТаблицаДокумента КАК Таблица
	|ГДЕ
	|	Таблица.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуКлиенту.ПустаяСсылка)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Партнер КАК Партнер
	|
	|ПОМЕСТИТЬ ТаблицаДокументовРасчетов
	|ИЗ
	|	Документ.ЗаказКлиента КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументовОснований КАК Таблица
	|	ПО
	|		ДанныеДокумента.Ссылка = Таблица.ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Партнер КАК Партнер
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументовОснований КАК Таблица
	|	ПО
	|		ДанныеДокумента.Ссылка = Таблица.ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Партнер КАК Партнер
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументовОснований КАК Таблица
	|	ПО
	|		ДанныеДокумента.Ссылка = Таблица.ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Партнер КАК Партнер
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументовОснований КАК Таблица
	|	ПО
	|		ДанныеДокумента.Ссылка = Таблица.ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Партнер КАК Партнер
	|ИЗ
	|	Документ.ОтчетКомиссионераОСписании КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументовОснований КАК Таблица
	|	ПО
	|		ДанныеДокумента.Ссылка = Таблица.ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Партнер КАК Партнер
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументовОснований КАК Таблица
	|	ПО
	|		ДанныеДокумента.Ссылка = Таблица.ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Неопределено КАК Партнер
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументовОснований КАК Таблица
	|	ПО
	|		ДанныеДокумента.Ссылка = Таблица.ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|	Неопределено КАК Партнер
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументовОснований КАК Таблица
	|	ПО
	|		ДанныеДокумента.Ссылка = Таблица.ДокументОснование
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.*,
	|	Таблица.Валюта КАК Валюта,
	|	ВЫБОР КОГДА Таблица.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуКлиенту.ПустаяСсылка) ТОГДА
	|		ТаблицаДокументовРасчетов.Ссылка
	|	ИНАЧЕ
	|		Таблица.Заказ
	|	КОНЕЦ КАК Заказ,
	|		
	|	ВЫБОР КОГДА Таблица.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуКлиенту.ПустаяСсылка) ТОГДА
	|		ТаблицаДокументовРасчетов.Партнер
	|
	|	КОГДА Таблица.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) ТОГДА
	|		ЕСТЬNULL(Таблица.Заказ.Партнер, Неопределено)
	|
	|	ИНАЧЕ
	|		Таблица.Партнер
	|	КОНЕЦ КАК Партнер,
	|	
	|	ВЫБОР КОГДА Таблица.ВалютаВзаиморасчетов <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) ТОГДА
	|		Таблица.ВалютаВзаиморасчетов
	|	ИНАЧЕ
	|		ВЫБОР КОГДА Таблица.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуКлиенту.ПустаяСсылка) ТОГДА
	|			ТаблицаДокументовРасчетов.ВалютаВзаиморасчетов
	|
	|		КОГДА НЕ Таблица.Заказ.ВалютаВзаиморасчетов ЕСТЬ NULL ТОГДА
	|			Таблица.Заказ.ВалютаВзаиморасчетов
	|
	|		КОГДА НЕ Таблица.Заказ.Валюта ЕСТЬ NULL ТОГДА
	|			Таблица.Заказ.Валюта
	|
	|		ИНАЧЕ
	|			&Валюта
	|		КОНЕЦ
	|	КОНЕЦ КАК ВалютаВзаиморасчетов
	|	
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	ИсходнаяТаблицаДокумента КАК Таблица
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументовРасчетов КАК ТаблицаДокументовРасчетов
	|	ПО
	|		Таблица.СчетНаОплату.ДокументОснование = ТаблицаДокументовРасчетов.Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаДокумента.Заказ КАК Заказ,
	|	ТаблицаДокумента.Партнер КАК Партнер,
	|
	|	ВЫБОР КОГДА ТаблицаДокумента.СуммаВзаиморасчетов = 0 И КурсыВалютМультивалютногоДокумента.Курс ЕСТЬ NULL ТОГДА
	|		(ТаблицаДокумента.Сумма *
	|		ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * 
	|		ЕСТЬNULL(КурсыВалют.Кратность, 1)
	|		) / (
	|		ЕСТЬNULL(КурсыВалют.Курс, 1) * 
	|		ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1)
	|		)
	|	КОГДА ТаблицаДокумента.СуммаВзаиморасчетов = 0 И НЕ КурсыВалютМультивалютногоДокумента.Курс ЕСТЬ NULL ТОГДА
	|		(ТаблицаДокумента.Сумма *
	|		ЕСТЬNULL(КурсыВалютМультивалютногоДокумента.Курс, 1) * 
	|		ЕСТЬNULL(КурсыВалют.Кратность, 1)
	|		) / (
	|		ЕСТЬNULL(КурсыВалют.Курс, 1) * 
	|		ЕСТЬNULL(КурсыВалютМультивалютногоДокумента.Кратность, 1)
	|		)
	|	ИНАЧЕ
	|		ТаблицаДокумента.СуммаВзаиморасчетов
	|	КОНЕЦ КАК СуммаВзаиморасчетов
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|	
	|	// Определим курс валюты документа.
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалютДокумента
	|	ПО
	|		ИСТИНА
	|	
	|	// Определим курс валюты документа
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютМультивалютногоДокумента
	|	ПО
	|		ТаблицаДокумента.Валюта = КурсыВалютМультивалютногоДокумента.Валюта
	|		
	|	// Определим курс валюты взаиморасчетов.
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалют
	|	ПО
	|		ТаблицаДокумента.ВалютаВзаиморасчетов = КурсыВалют.Валюта
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.НомерСтроки
	|;
	|");
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	
	ТаблицаДокумента = ТабличнаяЧасть.Выгрузить();
	Если ТаблицаДокумента.Колонки.Найти("СчетНаОплату") = Неопределено Тогда
		ТаблицаДокумента.Колонки.Добавить("СчетНаОплату", Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуКлиенту"));
	КонецЕсли;
	Если ТаблицаДокумента.Колонки.Найти("Партнер") = Неопределено Тогда
		ТаблицаДокумента.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	КонецЕсли;
	Если ТаблицаДокумента.Колонки.Найти("Валюта") = Неопределено Тогда
		ТаблицаДокумента.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	
	// Получим таблицу документа с рассчитанной суммой взаиморасчетов.
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицы = ТабличнаяЧасть.Найти(Выборка.НомерСтроки, "НомерСтроки");
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка, ,"НомерСтроки");
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет сумму взаиморасчетов в шапке документа.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	ИмяТЧ - Строка - Необязательный, имя табличной части для расчета суммы документа
//	СтруктураКурса - Структура - Необязательный, параметры курса документа
//       * Курс      - Число - Курс валюты.
//       * Кратность - Число - Кратность.
//	Дата - Дата - Дата, на которую будет получен курс, если не задана структура курса.
// 
Процедура ЗаполнитьСуммуВзаиморасчетов(ДокументОбъект, ИмяТЧ = "", СтруктураКурса = Неопределено, Дата = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяТЧ) Тогда
		СуммаДокумента = ДокументОбъект[ИмяТЧ].Итог("Сумма");
		Если Не ДокументОбъект.ЦенаВключаетНДС Тогда
			СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТЧ].Итог("СуммаНДС");
		КонецЕсли;
	Иначе
		СуммаДокумента = ДокументОбъект.СуммаДокумента;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ДокументОбъект.Дата;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураКурса) И ТипЗнч(СтруктураКурса) = Тип("Структура") Тогда
		
		ВалютаРегУчета = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		
		Если  ДокументОбъект.Валюта = ВалютаРегУчета И НЕ ДокументОбъект.ВалютаВзаиморасчетов = ВалютаРегУчета Тогда
			КурсВалютыДокумента           = 1;
			КратностьВалютыДокумента      = 1;
			КурсВалютыВзаиморасчетов      = СтруктураКурса.Курс;
			КратностьВалютыВзаиморасчетов = СтруктураКурса.Кратность;
		Иначе
			КурсВалютыДокумента           = СтруктураКурса.Курс;
			КратностьВалютыДокумента      = СтруктураКурса.Кратность;
			КурсВалютыВзаиморасчетов      = 1;
			КратностьВалютыВзаиморасчетов = 1;
		КонецЕсли;
		
		ПараметрыВалютыДок = Новый Структура("Валюта, Курс, Кратность",
				ДокументОбъект.Валюта, КурсВалютыДокумента, КратностьВалютыДокумента);
		ПараметрыВалютыВР  = Новый Структура("Валюта, Курс, Кратность",
				ДокументОбъект.ВалютаВзаиморасчетов, КурсВалютыВзаиморасчетов, КратностьВалютыВзаиморасчетов);
			
		ДокументОбъект.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СуммаДокумента,
				ПараметрыВалютыДок,ПараметрыВалютыВР);
			
	Иначе
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	(&СуммаДокумента *
		|	ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * 
		|	ЕСТЬNULL(КурсыВалют.Кратность, 1)
		|	) / (
		|	ЕСТЬNULL(КурсыВалют.Курс, 1) * 
		|	ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1)
		|	) КАК СуммаВзаиморасчетов
		|	
		|ИЗ	
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата,
		|		Валюта = &ВалютаДокумента
		|	) КАК КурсыВалютДокумента
		|	
		|	// Определим курс валюты взаиморасчетов.
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, 
		|			Валюта = &ВалютаВзаиморасчетов
		|	) КАК КурсыВалют ПО ИСТИНА
		|");
		
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("ВалютаДокумента", ДокументОбъект.Валюта);
		Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ДокументОбъект.ВалютаВзаиморасчетов);
		Запрос.УстановитьПараметр("СуммаДокумента", СуммаДокумента);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если ДокументОбъект.СуммаВзаиморасчетов <> Выборка.СуммаВзаиморасчетов Тогда
				ДокументОбъект.СуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет сумму взаиморасчетов в шапке документа.
//
// Параметры:
// ДокументОбъект - ДокументОбъект - Текущий документ
// ИмяТЧ - Строка - Необязательный, имя табличной части, где рассчитывается сумма взаиморасчетов
// СтруктураКурса - Структура - Необязательный, параметры курса документа
//       * Курс      - Число - Курс валюты.
//       * Кратность - Число - Кратность.
//
Процедура ЗаполнитьСуммуВзаиморасчетовВПоступлении(ДокументОбъект, ИмяТЧ = "Товары", СтруктураКурса = Неопределено) Экспорт
	
	Если ДокументОбъект[ИмяТЧ].НайтиСтроки(Новый Структура("СуммаВзаиморасчетов", 0)).Количество()=0 Тогда
		
		ДокументОбъект.СуммаВзаиморасчетов = ДокументОбъект[ИмяТЧ].Итог("СуммаВзаиморасчетов");
		
	Иначе
		
		СуммаДокумента = ДокументОбъект[ИмяТЧ].Итог("Сумма");
		Если Не ДокументОбъект.ЦенаВключаетНДС Тогда
			СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТЧ].Итог("СуммаНДС");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураКурса) И ТипЗнч(СтруктураКурса) = Тип("Структура") Тогда
			
			ВалютаРегУчета = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета();
			
			Если ДокументОбъект.Валюта = ВалютаРегУчета И НЕ ДокументОбъект.ВалютаВзаиморасчетов = ВалютаРегУчета Тогда
				КурсВалютыДокумента           = 1;
				КратностьВалютыДокумента      = 1;
				КурсВалютыВзаиморасчетов      = СтруктураКурса.Курс;
				КратностьВалютыВзаиморасчетов = СтруктураКурса.Кратность;
			Иначе
				КурсВалютыДокумента           = СтруктураКурса.Курс;
				КратностьВалютыДокумента      = СтруктураКурса.Кратность;
				КурсВалютыВзаиморасчетов      = 1;
				КратностьВалютыВзаиморасчетов = 1;
			КонецЕсли;
			
			ПараметрыВалютыДок = Новый Структура("Валюта, Курс, Кратность",
				ДокументОбъект.Валюта, КурсВалютыДокумента, КратностьВалютыДокумента);
			ПараметрыВалютыВР  = Новый Структура("Валюта, Курс, Кратность",
				ДокументОбъект.ВалютаВзаиморасчетов, КурсВалютыВзаиморасчетов, КратностьВалютыВзаиморасчетов);
			
			ДокументОбъект.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СуммаДокумента,
				ПараметрыВалютыДок,ПараметрыВалютыВР);
			
		Иначе
			
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	(&СуммаДокумента *
			|	ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * 
			|	ЕСТЬNULL(КурсыВалют.Кратность, 1)
			|	) / (
			|	ЕСТЬNULL(КурсыВалют.Курс, 1) * 
			|	ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1)
			|	) КАК СуммаВзаиморасчетов
			|	
			|ИЗ	
			|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата,
			|		Валюта = &ВалютаДокумента
			|	) КАК КурсыВалютДокумента
			|	
			|	// Определим курс валюты взаиморасчетов.
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, 
			|			Валюта = &ВалютаВзаиморасчетов
			|	) КАК КурсыВалют ПО ИСТИНА
			|");
			
			Запрос.УстановитьПараметр("Дата", ДокументОбъект.Дата);
			Запрос.УстановитьПараметр("ВалютаДокумента", ДокументОбъект.Валюта);
			Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ДокументОбъект.ВалютаВзаиморасчетов);
			Запрос.УстановитьПараметр("СуммаДокумента", СуммаДокумента);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Если ДокументОбъект.СуммаВзаиморасчетов <> Выборка.СуммаВзаиморасчетов Тогда
					ДокументОбъект.СуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет сумму НДС взаиморасчетов в табличной части документа.
//
// Параметры:
//	Документ - ДокументОбъект - Текущий документ.
//	ИмяТабличнойЧасти - Строка - Имя табличной части документа для заполнения.
// 
Процедура ЗаполнитьСуммуНДСВзаиморасчетовВТабличнойЧасти(Документ, ИмяТабличнойЧасти) Экспорт
	
	ТабличнаяЧасть = Документ[ИмяТабличнойЧасти];
	
	ВалютаДокумента = Документ.Валюта;
	ВалютаЗаказа    = Документ.ВалютаВзаиморасчетов;
	
	Если ВалютаДокумента = ВалютаЗаказа Тогда
		
		Для Индекс = 0 По ТабличнаяЧасть.Количество()-1 Цикл
			Если Не ЗначениеЗаполнено(ТабличнаяЧасть[Индекс].СуммаНДСВзаиморасчетов)
			 ИЛИ ТабличнаяЧасть[Индекс].СуммаНДСВзаиморасчетов <> ТабличнаяЧасть[Индекс].СуммаНДС Тогда
				ТабличнаяЧасть[Индекс].СуммаНДСВзаиморасчетов = ТабличнаяЧасть[Индекс].СуммаНДС;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
	
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			
			Строка.СуммаНДСВзаиморасчетов = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(Строка.СуммаВзаиморасчетов, Строка.СтавкаНДС);
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет сумму расшифровки платежа в соответствии с суммой документа.
//
// Параметры:
//		СуммаДокумента - Число - Сумма документа для заполнения.
//		РасшифровкаПлатежа - ТаблицаЗначений - Таблица для заполнения.
//
Процедура ЗаполнитьСуммуРасшифровкиПлатежаПоСуммеДокумента(Знач СуммаДокумента, РасшифровкаПлатежа, ВалютаВзаиморасчетов = Неопределено) Экспорт
	
	СуммаРасшифровкиПлатежа = РасшифровкаПлатежа.Итог("Сумма");
	Если СуммаДокумента <> СуммаРасшифровкиПлатежа Тогда
		
		Если РасшифровкаПлатежа.Количество() = 0 Тогда
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			НоваяСтрока.Сумма = СуммаДокумента;
			Если НЕ ВалютаВзаиморасчетов = Неопределено Тогда
				НоваяСтрока.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
			КонецЕсли;
		Иначе
			
			Разница = СуммаДокумента - СуммаРасшифровкиПлатежа;
			МассивУдаляемыхСтрок = Новый Массив;
			
			// Корректируются суммы в строках с пустым заказом.
			Для Каждого СтрокаТаблицы Из РасшифровкаПлатежа Цикл
				
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.Заказ) Тогда
					СтрокаТаблицы.Сумма = Макс(СтрокаТаблицы.Сумма + Разница, 0);
					СтрокаТаблицы.СуммаВзаиморасчетов = 0;
					Разница = СуммаДокумента - РасшифровкаПлатежа.Итог("Сумма");
				КонецЕсли;
				
				Если СтрокаТаблицы.Сумма = 0 Тогда
					МассивУдаляемыхСтрок.Добавить(СтрокаТаблицы);
				КонецЕсли;
				
				Если Разница = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			// Уменьшаются суммы в строках с указанным заказом.
			Если Разница < 0 Тогда
				
				Для Каждого СтрокаТаблицы Из РасшифровкаПлатежа Цикл
					
					Если ЗначениеЗаполнено(СтрокаТаблицы.Заказ) Тогда
						СтрокаТаблицы.Сумма = Макс(СтрокаТаблицы.Сумма + Разница, 0);
						СтрокаТаблицы.СуммаВзаиморасчетов = 0;
						Разница = СуммаДокумента - РасшифровкаПлатежа.Итог("Сумма");
					КонецЕсли;
					
					Если СтрокаТаблицы.Сумма = 0 Тогда
						МассивУдаляемыхСтрок.Добавить(СтрокаТаблицы);
					КонецЕсли;
					
					Если Разница = 0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			// Остаток нераспределенной суммы будет отнесен на новую строку.
			Если Разница <> 0 Тогда
				НоваяСтрока = РасшифровкаПлатежа.Добавить();
				НоваяСтрока.Сумма = Разница;
				Если НЕ ВалютаВзаиморасчетов = Неопределено Тогда
					НоваяСтрока.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
				КонецЕсли;
			КонецЕсли;
			
			// Строки с нулевой суммой будут удалены.
			Для Каждого СтрокаТаблицы Из МассивУдаляемыхСтрок Цикл
				РасшифровкаПлатежа.Удалить(СтрокаТаблицы);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет или очищает табличную часть расшифровка платежа накладной при расчетах по накладным.
//
// Параметры:
//	СуммаДокумента		- Число - Сумма текущего документа.
//	СуммаВзаиморасчетов - Число - Сумма взаиморасчетов документа.
//	РасшифровкаПлатежа	- ТаблицаЗначений - Расшифровка платежа накладной для заполнения.
//		* СуммаВзаиморасчетов	- Число - Сумма взаиморасчетов по строке.
//		* Заказ					- ДокументСсылка - Ссылка на зачтенный платеж.
//		* Сумма					- Число - Сумма в валюте документа.
//
Процедура ЗаполнитьСуммыРасшифровкиНакладной(Знач СуммаДокумента, ЗНАЧ СуммаВзаиморасчетов, РасшифровкаПлатежа) Экспорт
	
	Если СуммаДокумента = 0 ИЛИ СуммаВзаиморасчетов = 0 Тогда
		РасшифровкаПлатежа.Очистить();
		Возврат;
	КонецЕсли;
	
	ТребуетсяПерераспределениеСуммы = Ложь;
	СуммаРасшифровкиПлатежа = РасшифровкаПлатежа.Итог("СуммаВзаиморасчетов");
	НовыйКурсВзаиморасчетов = ?(СуммаДокумента = 0 ИЛИ СуммаВзаиморасчетов = 0, 0, СуммаДокумента / СуммаВзаиморасчетов);
	
	Если СуммаВзаиморасчетов <> СуммаРасшифровкиПлатежа Тогда
		
		Разница = СуммаВзаиморасчетов - СуммаРасшифровкиПлатежа;
		ТребуетсяПерераспределениеСуммы = Истина;
		
		Если Разница > 0 Тогда
			
			Для Сч = 0 По РасшифровкаПлатежа.Количество()-1 Цикл
				СтрокаРасшифровки = РасшифровкаПлатежа[Сч];
				Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.Заказ) Тогда
					СтрокаРасшифровки.СуммаВзаиморасчетов = СтрокаРасшифровки.СуммаВзаиморасчетов + Разница;
					Разница = 0;
				КонецЕсли;
			КонецЦикла;
			
			Если Разница > 0 Тогда
				СтрокаРасшифровки = РасшифровкаПлатежа.Добавить();
				СтрокаРасшифровки.СуммаВзаиморасчетов = Разница;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Разница < 0 Тогда
			
			Для Сч = 0 По РасшифровкаПлатежа.Количество()-1 Цикл
				СтрокаРасшифровки = РасшифровкаПлатежа[Сч];
				Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.Заказ) Тогда
					СуммаВзаиморасчетовДо = СтрокаРасшифровки.СуммаВзаиморасчетов;
					СтрокаРасшифровки.СуммаВзаиморасчетов = Макс(0,СтрокаРасшифровки.СуммаВзаиморасчетов + Разница);
					Разница = Разница + (СуммаВзаиморасчетовДо - СтрокаРасшифровки.СуммаВзаиморасчетов);
				КонецЕсли;
			КонецЦикла;
			
			Если Разница < 0 Тогда
			
				Для Сч = 0 По РасшифровкаПлатежа.Количество()-1 Цикл
					СтрокаРасшифровки = РасшифровкаПлатежа[Сч];
					Если ЗначениеЗаполнено(СтрокаРасшифровки.Заказ) Тогда
						СуммаВзаиморасчетовДо = СтрокаРасшифровки.СуммаВзаиморасчетов;
						СтрокаРасшифровки.СуммаВзаиморасчетов = Макс(0,СтрокаРасшифровки.СуммаВзаиморасчетов + Разница);
						Разница = Разница + (СуммаВзаиморасчетовДо - СтрокаРасшифровки.СуммаВзаиморасчетов);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СуммаРасшифровкиПлатежа = РасшифровкаПлатежа.Итог("Сумма");
	Если ТребуетсяПерераспределениеСуммы ИЛИ СуммаДокумента <> СуммаРасшифровкиПлатежа Тогда
		
		Если РасшифровкаПлатежа.Количество() = 1 Тогда
			РасшифровкаПлатежа[0].Сумма = СуммаДокумента;
		ИначеЕсли РасшифровкаПлатежа.Количество() > 1 Тогда
			
			НераспределеннаяСумма = СуммаДокумента;
			Для Сч = 0 По РасшифровкаПлатежа.Количество()-1 Цикл
				СтрокаРасшифровки = РасшифровкаПлатежа[Сч];
				Если Сч = РасшифровкаПлатежа.Количество()-1 Тогда
					СтрокаРасшифровки.Сумма = НераспределеннаяСумма;
				Иначе
					СтрокаРасшифровки.Сумма = СтрокаРасшифровки.СуммаВзаиморасчетов * НовыйКурсВзаиморасчетов;
					НераспределеннаяСумма = НераспределеннаяСумма - СтрокаРасшифровки.Сумма;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Сч = 0;
	Пока Сч < РасшифровкаПлатежа.Количество() Цикл
		
		Если РасшифровкаПлатежа[Сч].СуммаВзаиморасчетов = 0 Тогда
			РасшифровкаПлатежа.Удалить(Сч);
		Иначе
			Сч = Сч +1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииФормированияДвиженийПоРасчетамСПоставщикамиИКлиентами

// Процедура формирования движений по регистру "Расчеты с клиентами".
//
// Параметры:
//	ДополнительныеСвойства - Структура - Структура дополнительных свойств для проведения.
//	Движения - Структура - Структура наборов движений документа.
//	Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ОтразитьРасчетыСКлиентами(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаРасчеты = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентами;
	
	Если Отказ ИЛИ ТаблицаРасчеты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияРасчеты = Движения.РасчетыСКлиентами;
	
	ТипДокумента = ТипЗнч(ДвиженияРасчеты.Отбор.Регистратор.Значение);
	ДобавитьЗаполнитьПорядокРасчетовСКлиентами(ТаблицаРасчеты, ТипДокумента);
	
	Если ТаблицаРасчеты.Колонки.Найти("ПродажаПоЗаказу") <> Неопределено Тогда
		Для Каждого Стр Из ТаблицаРасчеты Цикл
			Если НЕ ЗначениеЗаполнено(Стр.ПродажаПоЗаказу) И Стр.ПродажаПоЗаказу <> Неопределено Тогда
				Стр.ПродажаПоЗаказу = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДвиженияРасчеты.Записывать = Истина;
	ДвиженияРасчеты.Загрузить(ТаблицаРасчеты);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Расчеты с клиентами по документами".
//
// Параметры:
//	ДополнительныеСвойства - Структура - Структура дополнительных свойств для проведения.
//	Движения - Структура - Структура наборов движений документа.
//	Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ОтразитьРасчетыСКлиентамиПоДокументам(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаРасчеты = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентамиПоДокументам;
	
	Если Отказ ИЛИ ТаблицаРасчеты.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДвиженияРасчеты = Движения.РасчетыСКлиентамиПоДокументам;
	ДвиженияРасчеты.Записывать = Истина;
	ДвиженияРасчеты.Загрузить(ТаблицаРасчеты);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Расчеты с поставщиками".
//
// Параметры:
//	ДополнительныеСвойства - Структура - Структура дополнительных свойств для проведения.
//	Движения - Структура - Структура наборов движений документа.
//	Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаРасчеты = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщиками;
	
	Если Отказ ИЛИ ТаблицаРасчеты.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДвиженияРасчеты = Движения.РасчетыСПоставщиками;
	
	ТипДокумента = ТипЗнч(ДвиженияРасчеты.Отбор.Регистратор.Значение);
	ДобавитьЗаполнитьПорядокРасчетовСПоставщиками(ТаблицаРасчеты, ТипДокумента);
	
	Если ТаблицаРасчеты.Колонки.Найти("ЗакупкаПоЗаказу") <> Неопределено Тогда
		Для Каждого Стр Из ТаблицаРасчеты Цикл
			Если НЕ ЗначениеЗаполнено(Стр.ЗакупкаПоЗаказу) И Стр.ЗакупкаПоЗаказу <> Неопределено Тогда
				Стр.ЗакупкаПоЗаказу = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДвиженияРасчеты.Записывать = Истина;
	ДвиженияРасчеты.Загрузить(ТаблицаРасчеты);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Расчеты с поставщиками по документами".
//
// Параметры:
//	ДополнительныеСвойства - Структура - Структура дополнительных свойств для проведения.
//	Движения - Структура - Структура наборов движений документа.
//	Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ОтразитьРасчетыСПоставщикамиПоДокументам(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаРасчеты = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщикамиПоДокументам;
	
	Если Отказ ИЛИ ТаблицаРасчеты.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДвиженияРасчеты = Движения.РасчетыСПоставщикамиПоДокументам;
	ДвиженияРасчеты.Записывать = Истина;
	ДвиженияРасчеты.Загрузить(ТаблицаРасчеты);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Суммы документов в валюте регл.".
//
// Параметры:
//		ДополнительныеСвойства - Структура - Структура дополнительных свойств проведения.
//		Движения - КоллекцияДвижений - Коллекция движений документа.
//		Отказ - Булево - Признак отказа.
//
Процедура ОтразитьСуммыДокументаВВалютеРегл(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДвижений = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСуммыДокументовВВалютеРегл;
	Если Отказ ИЛИ ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияРасчеты = Движения.СуммыДокументовВВалютеРегл;
	ДвиженияРасчеты.Записывать = Истина;
	ДвиженияРасчеты.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры

#КонецОбласти

#Область РасчетДатПлатежа
// В менеджер временных таблиц помещает таблицу "ТаблицаОстатковКлиентов",
// содержащую в себе даты платежа. Строится по регистру "Расчеты с клиентами по документам".
//
// Параметры:
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Текущий менеджер временных таблиц для помещения таблиц.
//		ДатаОстатков - Дата - Дата остатков.
//
Процедура РассчитатьДатыПлатежаКлиента(МенеджерВременныхТаблиц, ДатаОстатков) Экспорт
	Если ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоДокументам)
		И ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.РасчетыСКлиентами) 
		И НЕ ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам               КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказКлиента                            КАК ЗаказКлиента,
		|	Расчеты.Валюта                                  КАК Валюта,
		|	ВЫБОР КОГДА (Расчеты.СуммаОстаток - Расчеты.КОплатеОстаток) > 0
		|		ТОГДА Расчеты.КОплатеОстаток
		|		ИНАЧЕ Расчеты.СуммаОстаток
		|	КОНЕЦ                                           КАК ДолгОстаток,
		|	ВЫБОР КОГДА (Расчеты.СуммаОстаток - Расчеты.КОплатеОстаток) > 0
		|		ТОГДА Расчеты.КОплатеОстаток
		|		ИНАЧЕ Расчеты.СуммаОстаток
		|	КОНЕЦ                                           КАК ДолгОстатокНаКонецПериода,
		|	&ДатаОстатков                                   КАК ДатаПлатежа,
		|	ДОБАВИТЬКДАТЕ(&ДатаОстатков, СЕКУНДА, 1)        КАК Период,
		|	ИСТИНА                                          КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ ТаблицаОстатковКлиентов
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(&Граница, ) КАК Расчеты
		|ГДЕ
		|	Расчеты.КОплатеОстаток > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Расчеты.АналитикаУчетаПоПартнерам               КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказКлиента                            КАК ЗаказКлиента,
		|	Расчеты.Валюта                                  КАК Валюта,
		|	ВЫБОР КОГДА Расчеты.КОплатеОстаток < 0
		|			ТОГДА Расчеты.СуммаОстаток
		|			ИНАЧЕ ВЫБОР КОГДА (Расчеты.СуммаОстаток - Расчеты.КОплатеОстаток) > 0
		|					ТОГДА Расчеты.СуммаОстаток - Расчеты.КОплатеОстаток
		|					ИНАЧЕ Расчеты.КОплатеОстаток
		|			КОНЕЦ
		|	КОНЕЦ                                           КАК ДолгОстаток,
		|	ВЫБОР КОГДА Расчеты.КОплатеОстаток < 0
		|			ТОГДА Расчеты.СуммаОстаток
		|			ИНАЧЕ ВЫБОР КОГДА (Расчеты.СуммаОстаток - Расчеты.КОплатеОстаток) > 0
		|					ТОГДА Расчеты.СуммаОстаток - Расчеты.КОплатеОстаток
		|					ИНАЧЕ Расчеты.КОплатеОстаток
		|			КОНЕЦ
		|	КОНЕЦ                                           КАК ДолгОстатокНаКонецПериода,
		|	&ДатаОстатков                                   КАК ДатаПлатежа,
		|	ДОБАВИТЬКДАТЕ(&ДатаОстатков, СЕКУНДА, 1)        КАК Период,
		|	ЛОЖЬ                                            КАК ПросроченнаяЗадолженность
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(&Граница, ) КАК Расчеты
		|ГДЕ
		|	Расчеты.КОплатеОстаток <= 0
		|;
		|/////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	1
		|ПОМЕСТИТЬ ТаблицаОтгрузокКлиентов
		|;
		|/////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	1
		|ПОМЕСТИТЬ ТаблицаПериодовКлиентов
		|");
		
		Параметры = Новый Массив(2);
		Параметры[0] = ДатаОстатков;
		Параметры[1] = ВидГраницы.Включая;
		Граница = Новый(Тип("Граница"),Параметры);
		
		Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
		Запрос.УстановитьПараметр("Граница", Граница);
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		
 		Запрос.Текст = "
		|УНИЧТОЖИТЬ ТаблицаПериодовКлиентов
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОтгрузокКлиентов
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам                  КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказКлиента                               КАК ЗаказКлиента,
		|	Расчеты.Валюта                                     КАК Валюта,
		|	МАКСИМУМ(НАЧАЛОПЕРИОДА(Расчеты.ДатаПлатежа, День)) КАК ДатаПлатежа,
		|	МАКСИМУМ(Расчеты.Период)                           КАК Период,
		|	ТаблицаОстатков.ПросроченнаяЗадолженность          КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ ТаблицаПериодовКлиентов
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковКлиентов КАК ТаблицаОстатков
		|		ПО Расчеты.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
		|			И Расчеты.ЗаказКлиента = ТаблицаОстатков.ЗаказКлиента
		|			И Расчеты.Валюта = ТаблицаОстатков.Валюта
		|			И ТаблицаОстатков.ДолгОстаток <> 0
		|ГДЕ
		|	Расчеты.Активность
		|	И Расчеты.Период <= &ДатаОстатков
		|	И Расчеты.Период < ТаблицаОстатков.Период
		|	И (Расчеты.КОплате <> 0 ИЛИ Расчеты.КОтгрузке <> 0)
		|	И ТаблицаОстатков.ПросроченнаяЗадолженность
		|
		|СГРУППИРОВАТЬ ПО
		|	Расчеты.АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказКлиента,
		|	Расчеты.Валюта,
		|	ТаблицаОстатков.ПросроченнаяЗадолженность
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Расчеты.АналитикаУчетаПоПартнерам                  КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказКлиента                               КАК ЗаказКлиента,
		|	Расчеты.Валюта                                     КАК Валюта,
		|	МИНИМУМ(НАЧАЛОПЕРИОДА(Расчеты.ДатаПлатежа, День))  КАК ДатаПлатежа,
		|	МИНИМУМ(Расчеты.Период)                            КАК Период,
		|	ТаблицаОстатков.ПросроченнаяЗадолженность          КАК ПросроченнаяЗадолженность
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковКлиентов КАК ТаблицаОстатков
		|		ПО Расчеты.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
		|			И Расчеты.ЗаказКлиента = ТаблицаОстатков.ЗаказКлиента
		|			И Расчеты.Валюта = ТаблицаОстатков.Валюта
		|			И ТаблицаОстатков.ДолгОстаток <> 0
		|ГДЕ
		|	(Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|		ИЛИ (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И Расчеты.КОплате < 0))
		|	И Расчеты.Активность
		|	И Расчеты.Период > &ДатаОстатков
		|	И Расчеты.Период > ТаблицаОстатков.Период
		|	И (Расчеты.КОплате <> 0 ИЛИ Расчеты.КОтгрузке <> 0)
		|	И НЕ ТаблицаОстатков.ПросроченнаяЗадолженность
		|
		|СГРУППИРОВАТЬ ПО
		|	Расчеты.АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказКлиента,
		|	Расчеты.Валюта,
		|	ТаблицаОстатков.ПросроченнаяЗадолженность
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Периоды.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
		|	Периоды.ЗаказКлиента                          КАК ЗаказКлиента,
		|	Периоды.Валюта                                КАК Валюта,
		|	Периоды.Период                                КАК Период,
		|	НАЧАЛОПЕРИОДА(ВЫБОР КОГДА Периоды.ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов
		|		И Расчеты.Регистратор ССЫЛКА Документ.ГрафикИсполненияДоговора
		|		ТОГДА Расчеты.ДатаПлатежа
		|		КОГДА Расчеты.ДатаПлатежа <> ДАТАВРЕМЯ(1,1,1)
		|		ТОГДА Расчеты.Период
		|		ИНАЧЕ Периоды.ДатаПлатежа
		|	КОНЕЦ, ДЕНЬ)                                  КАК ДатаПлатежа,
		|	СУММА(ВЫБОР КОГДА ЕСТЬNULL(Расчеты.КОплате, 0) < 0
		|			ТОГДА 0 - Расчеты.КОплате
		|			ИНАЧЕ ЕСТЬNULL(Расчеты.КОплате, 0)
		|	КОНЕЦ)                                        КАК Долг,
		|	Периоды.ПросроченнаяЗадолженность             КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ ТаблицаОтгрузокКлиентов
		|ИЗ
		|	ТаблицаПериодовКлиентов КАК Периоды
		|		
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК Расчеты
		|	ПО Периоды.АналитикаУчетаПоПартнерам   = Расчеты.АналитикаУчетаПоПартнерам
		|		И Периоды.ЗаказКлиента             = Расчеты.ЗаказКлиента
		|		И Периоды.Валюта                   = Расчеты.Валюта
		|		И Расчеты.Активность
		|		И Расчеты.Период = Периоды.Период
		|		И (Расчеты.КОплате <> 0 ИЛИ Расчеты.КОтгрузке <> 0)
		|		И (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ИЛИ (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И Расчеты.КОплате < 0))
		|СГРУППИРОВАТЬ ПО
		|	Периоды.АналитикаУчетаПоПартнерам,
		|	Периоды.ЗаказКлиента,
		|	Периоды.Валюта,
		|	Периоды.Период,
		|	НАЧАЛОПЕРИОДА(ВЫБОР КОГДА Периоды.ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов
		|		И Расчеты.Регистратор ССЫЛКА Документ.ГрафикИсполненияДоговора
		|		ТОГДА Расчеты.ДатаПлатежа
		|		КОГДА Расчеты.ДатаПлатежа <> ДАТАВРЕМЯ(1,1,1)
		|		ТОГДА Расчеты.Период
		|		ИНАЧЕ Периоды.ДатаПлатежа
		|	КОНЕЦ, ДЕНЬ),
		|	Периоды.ПросроченнаяЗадолженность
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.АналитикаУчетаПоПартнерам                   КАК АналитикаУчетаПоПартнерам,
		|	Остатки.ЗаказКлиента                                КАК ЗаказКлиента,
		|	Остатки.Валюта                                      КАК Валюта,
		|	ВЫБОР КОГДА Остатки.ДолгОстаток > ЕСТЬNULL(Отгрузки.Долг, 0)
		|			ТОГДА Остатки.ДолгОстаток - ЕСТЬNULL(Отгрузки.Долг, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ                                               КАК НовыйДолгОстаток,
		|	ВЫБОР КОГДА ЕСТЬNULL(Отгрузки.Долг, 0) = 0
		|		ТОГДА Остатки.ДолгОстатокНаКонецПериода
		|		ИНАЧЕ ВЫБОР КОГДА Остатки.ДолгОстаток > Отгрузки.Долг
		|			ТОГДА Отгрузки.Долг
		|			ИНАЧЕ Остатки.ДолгОстаток
		|		КОНЕЦ
		|	КОНЕЦ                                               КАК ДолгОстатокНаКонецПериода,
		|	Отгрузки.Период                                     КАК Период,
		|	ЕСТЬNULL(Отгрузки.ДатаПлатежа, Остатки.ДатаПлатежа) КАК ДатаПлатежа,
		|	Остатки.ПросроченнаяЗадолженность                   КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ НовыеОстаткиКлиентов
		|ИЗ
		|	ТаблицаОстатковКлиентов КАК Остатки
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтгрузокКлиентов КАК Отгрузки
		|	ПО Остатки.АналитикаУчетаПоПартнерам = Отгрузки.АналитикаУчетаПоПартнерам
		|		И Остатки.ЗаказКлиента = Отгрузки.ЗаказКлиента
		|		И Остатки.Валюта  = Отгрузки.Валюта
		|		И Остатки.ПросроченнаяЗадолженность = Отгрузки.ПросроченнаяЗадолженность
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОстатковКлиентов
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.АналитикаУчетаПоПартнерам    КАК АналитикаУчетаПоПартнерам,
		|	Остатки.ЗаказКлиента                 КАК ЗаказКлиента,
		|	Остатки.Валюта                       КАК Валюта,
		|	Остатки.Период                       КАК Период,
		|	Остатки.ДатаПлатежа                  КАК ДатаПлатежа,
		|	Остатки.НовыйДолгОстаток             КАК ДолгОстаток,
		|	Остатки.ДолгОстатокНаКонецПериода    КАК ДолгОстатокНаКонецПериода,
		|	Остатки.ПросроченнаяЗадолженность    КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ ТаблицаОстатковКлиентов
		|ИЗ
		|	НовыеОстаткиКлиентов КАК Остатки
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаПоПартнерам,
		|	ЗаказКлиента,
		|	Валюта
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НовыеОстаткиКлиентов
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ ТаблицаПериодовКлиентов
		|";
		
		Результат = Запрос.Выполнить();
		Счетчик = 0;
		МаксимальноеКоличествоИтераций = 1000;
		Пока Не Результат.Пустой() Цикл 
			Результат = Запрос.Выполнить();
			Счетчик = Счетчик + 1;
			Если Счетчик >= МаксимальноеКоличествоИтераций Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказКлиента                      КАК ЗаказКлиента,
		|	Расчеты.РасчетныйДокумент                 КАК РасчетныйДокумент,
		|	Расчеты.Валюта                            КАК Валюта,
		|	ТаблицаОстатков.ДатаПлатежа               КАК ДатаПлатежа,
		|	ТаблицаОстатков.ДолгОстатокНаКонецПериода КАК Долг
		|ПОМЕСТИТЬ ТаблицаОстатковКлиентовПоДокументам
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(&Граница, ) КАК Расчеты
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковКлиентов КАК ТаблицаОстатков
		|	ПО Расчеты.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
		|		И Расчеты.ЗаказКлиента = ТаблицаОстатков.ЗаказКлиента
		|		И Расчеты.Валюта = ТаблицаОстатков.Валюта
		|ГДЕ
		|	Расчеты.ДолгОстаток > 0
		|;
		|//////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОстатковКлиентов
		|;
		|//////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказКлиента              КАК ЗаказКлиента,
		|	Расчеты.РасчетныйДокумент         КАК РасчетныйДокумент,
		|	Расчеты.Валюта                    КАК Валюта,
		|	Расчеты.ДатаПлатежа               КАК ДатаПлатежа,
		|	Расчеты.Долг                      КАК КОплате,
		|	Расчеты.Долг                      КАК ДолгОстаток
		|ПОМЕСТИТЬ ТаблицаОстатковКлиентов
		|ИЗ
		|	ТаблицаОстатковКлиентовПоДокументам КАК Расчеты
		|";
		Запрос.Выполнить();
	Иначе
		Запрос = Новый Запрос("
		 |ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК АналитикаУчетаПоПартнерам,
		|	Неопределено                                                     КАК ЗаказКлиента,
		|	Неопределено                                                     КАК РасчетныйДокумент,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)                         КАК Валюта,
		|	ДАТАВРЕМЯ(1,1,1)                                                 КАК ДатаПлатежа,
		|	0                                                                КАК КОплате,
		|	0                                                                КАК ДолгОстаток
		|ПОМЕСТИТЬ ТаблицаОстатковКлиентов");
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
	КонецЕсли;
КонецПроцедуры

// В менеджер временных таблиц помещает таблицу "ТаблицаОстатковПоставщиков",
// содержащую в себе даты платежа. Строится по регистру "Расчеты с поставщиками по документам".
//
// Параметры:
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Текущий менеджер временных таблиц для помещения таблиц.
//		ДатаОстатков - Дата - Дата остатков.
//
Процедура РассчитатьДатыПлатежаПоставщика(МенеджерВременныхТаблиц, ДатаОстатков) Экспорт
	Если ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоДокументам)
		И ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.РасчетыСПоставщиками)
		И НЕ ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	Расчеты.АналитикаУчетаПоПартнерам        КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказПоставщику                  КАК ЗаказПоставщику,
		|	Расчеты.Валюта                           КАК Валюта,
		|	-Расчеты.КОплатеОстаток                  КАК КОплатеОстаток,
		|	-Расчеты.КОплатеОстаток                  КАК КОплатеОстатокНаКонецПериода,
		|	&ДатаОстатков                            КАК ДатаПлатежа,
		|	ДОБАВИТЬКДАТЕ(&ДатаОстатков, СЕКУНДА, 1) КАК Период,
		|	ИСТИНА                                   КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ ТаблицаОстатковПоставщиков
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(&Граница, ) КАК Расчеты
		|ГДЕ
		|	Расчеты.КОплатеОстаток < 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Расчеты.АналитикаУчетаПоПартнерам               КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказПоставщику                         КАК ЗаказПоставщику,
		|	Расчеты.Валюта                                  КАК Валюта,
		|	(Расчеты.СуммаОстаток - Расчеты.КОплатеОстаток) КАК КОплатеОстаток,
		|	(Расчеты.СуммаОстаток - Расчеты.КОплатеОстаток) КАК КОплатеОстатокНаКонецПериода,
		|	&ДатаОстатков                                   КАК ДатаПлатежа,
		|	ДОБАВИТЬКДАТЕ(&ДатаОстатков, СЕКУНДА, 1)        КАК Период,
		|	ЛОЖЬ                                            КАК ПросроченнаяЗадолженность
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(&Граница, ) КАК Расчеты
		|ГДЕ
		|	Расчеты.КОплатеОстаток >= 0 И Расчеты.СуммаОстаток <> 0
		|	И Расчеты.СуммаОстаток - Расчеты.КОплатеОстаток > 0
		|;
		|/////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	1
		|ПОМЕСТИТЬ ТаблицаПоступленийПоставщиков
		|;
		|/////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	1
		|ПОМЕСТИТЬ ТаблицаПериодовПоставщиков
		|");
		
		Параметры = Новый Массив(2);
		Параметры[0] = ДатаОстатков;
		Параметры[1] = ВидГраницы.Включая;
		Граница = Новый(Тип("Граница"),Параметры);
		
		Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
		Запрос.УстановитьПараметр("Граница", Граница);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		
		Запрос.Текст = "
		|УНИЧТОЖИТЬ ТаблицаПериодовПоставщиков
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаПоступленийПоставщиков
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам                  КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказПоставщику                            КАК ЗаказПоставщику,
		|	Расчеты.Валюта                                     КАК Валюта,
		|	МАКСИМУМ(НАЧАЛОПЕРИОДА(Расчеты.ДатаПлатежа, День)) КАК ДатаПлатежа,
		|	МАКСИМУМ(Расчеты.Период)                           КАК Период,
		|	ТаблицаОстатков.ПросроченнаяЗадолженность          КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ ТаблицаПериодовПоставщиков
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковПоставщиков КАК ТаблицаОстатков
		|		ПО Расчеты.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
		|			И Расчеты.ЗаказПоставщику = ТаблицаОстатков.ЗаказПоставщику
		|			И Расчеты.Валюта = ТаблицаОстатков.Валюта
		|			И ТаблицаОстатков.КОплатеОстаток <> 0
		|ГДЕ
		|	Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И Расчеты.Активность
		|	И Расчеты.Период <= &ДатаОстатков
		|	И Расчеты.Период < ТаблицаОстатков.Период
		|	И (Расчеты.КОплате <> 0 ИЛИ Расчеты.КПоступлению <> 0)
		|	И ТаблицаОстатков.ПросроченнаяЗадолженность
		|
		|СГРУППИРОВАТЬ ПО
		|	Расчеты.АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказПоставщику,
		|	Расчеты.Валюта,
		|	ТаблицаОстатков.ПросроченнаяЗадолженность
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Расчеты.АналитикаУчетаПоПартнерам                  КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказПоставщику                            КАК ЗаказПоставщику,
		|	Расчеты.Валюта                                     КАК Валюта,
		|	МИНИМУМ(НАЧАЛОПЕРИОДА(Расчеты.ДатаПлатежа, День))  КАК ДатаПлатежа,
		|	МАКСИМУМ(Расчеты.Период)                           КАК Период,
		|	ТаблицаОстатков.ПросроченнаяЗадолженность          КАК ПросроченнаяЗадолженность
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковПоставщиков КАК ТаблицаОстатков
		|		ПО Расчеты.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
		|			И Расчеты.ЗаказПоставщику = ТаблицаОстатков.ЗаказПоставщику
		|			И Расчеты.Валюта = ТаблицаОстатков.Валюта
		|			И ТаблицаОстатков.КОплатеОстаток <> 0
		|ГДЕ
		|	Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И Расчеты.Активность
		|	И Расчеты.Период > &ДатаОстатков
		|	И Расчеты.Период > ТаблицаОстатков.Период
		|	И (Расчеты.КОплате <> 0 ИЛИ Расчеты.КПоступлению <> 0)
		|	И НЕ ТаблицаОстатков.ПросроченнаяЗадолженность
		|
		|СГРУППИРОВАТЬ ПО
		|	Расчеты.АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказПоставщику,
		|	Расчеты.Валюта,
		|	ТаблицаОстатков.ПросроченнаяЗадолженность
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Периоды.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
		|	Периоды.ЗаказПоставщику                       КАК ЗаказПоставщику,
		|	Периоды.Валюта                                КАК Валюта,
		|	Периоды.Период                                КАК Период,
		|	ВЫБОР КОГДА Периоды.ЗаказПоставщику ССЫЛКА Справочник.ДоговорыКонтрагентов
		|		И Расчеты.Регистратор ССЫЛКА Документ.ГрафикИсполненияДоговора
		|		ТОГДА Расчеты.ДатаПлатежа
		|		КОГДА Расчеты.ДатаПлатежа <> ДАТАВРЕМЯ(1,1,1)
		|		ТОГДА Расчеты.Период
		|		ИНАЧЕ Периоды.ДатаПлатежа
		|	КОНЕЦ                                         КАК ДатаПлатежа,
		|	СУММА(ВЫБОР КОГДА ЕСТЬNULL(Расчеты.КОплате, 0) < 0
		|			ТОГДА 0 - Расчеты.КОплате
		|			ИНАЧЕ ЕСТЬNULL(Расчеты.КОплате, 0)
		|	КОНЕЦ)                                        КАК КОплате,
		|	Периоды.ПросроченнаяЗадолженность             КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ ТаблицаПоступленийПоставщиков
		|ИЗ
		|	ТаблицаПериодовПоставщиков КАК Периоды
		|		
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
		|	ПО Периоды.АналитикаУчетаПоПартнерам   = Расчеты.АналитикаУчетаПоПартнерам
		|		И Периоды.ЗаказПоставщику          = Расчеты.ЗаказПоставщику
		|		И Периоды.Валюта                   = Расчеты.Валюта
		|		И Расчеты.Активность
		|		И Расчеты.Период = Периоды.Период
		|		И (Расчеты.КОплате <> 0 ИЛИ Расчеты.КПоступлению <> 0)
		|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|СГРУППИРОВАТЬ ПО
		|	Периоды.АналитикаУчетаПоПартнерам,
		|	Периоды.ЗаказПоставщику,
		|	Периоды.Валюта,
		|	Периоды.Период,
		|	ВЫБОР КОГДА Периоды.ЗаказПоставщику ССЫЛКА Справочник.ДоговорыКонтрагентов
		|		И Расчеты.Регистратор ССЫЛКА Документ.ГрафикИсполненияДоговора
		|		ТОГДА Расчеты.ДатаПлатежа
		|		КОГДА Расчеты.ДатаПлатежа <> ДАТАВРЕМЯ(1,1,1)
		|		ТОГДА Расчеты.Период
		|		ИНАЧЕ Периоды.ДатаПлатежа
		|	КОНЕЦ,
		|	Периоды.ПросроченнаяЗадолженность
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.АналитикаУчетаПоПартнерам                      КАК АналитикаУчетаПоПартнерам,
		|	Остатки.ЗаказПоставщику                                КАК ЗаказПоставщику,
		|	Остатки.Валюта                                         КАК Валюта,
		|	ВЫБОР КОГДА Остатки.КОплатеОстаток > ЕСТЬNULL(Поступления.КОплате, 0)
		|			ТОГДА Остатки.КОплатеОстаток - ЕСТЬNULL(Поступления.КОплате, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ                                                  КАК НовыйКОплатеОстаток,
		|	ВЫБОР КОГДА ЕСТЬNULL(Поступления.КОплате, 0) = 0
		|		ТОГДА Остатки.КОплатеОстатокНаКонецПериода
		|		ИНАЧЕ ВЫБОР КОГДА Остатки.КОплатеОстатокНаКонецПериода > Поступления.КОплате
		|			ТОГДА Поступления.КОплате
		|			ИНАЧЕ Остатки.КОплатеОстатокНаКонецПериода
		|		КОНЕЦ
		|	КОНЕЦ                                                  КАК КОплатеОстатокНаКонецПериода,
		|	Поступления.Период                                     КАК Период,
		|	ЕСТЬNULL(Поступления.ДатаПлатежа, Остатки.ДатаПлатежа) КАК ДатаПлатежа,
		|	Остатки.ПросроченнаяЗадолженность                      КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ НовыеОстаткиПоставщиков
		|ИЗ
		|	ТаблицаОстатковПоставщиков КАК Остатки
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПоступленийПоставщиков КАК Поступления
		|	ПО Остатки.АналитикаУчетаПоПартнерам = Поступления.АналитикаУчетаПоПартнерам
		|		И Остатки.ЗаказПоставщику = Поступления.ЗаказПоставщику
		|		И Остатки.Валюта  = Поступления.Валюта
		|		И Остатки.ПросроченнаяЗадолженность = Поступления.ПросроченнаяЗадолженность
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОстатковПоставщиков
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.АналитикаУчетаПоПартнерам    КАК АналитикаУчетаПоПартнерам,
		|	Остатки.ЗаказПоставщику              КАК ЗаказПоставщику,
		|	Остатки.Валюта                       КАК Валюта,
		|	Остатки.Период                       КАК Период,
		|	Остатки.ДатаПлатежа                  КАК ДатаПлатежа,
		|	Остатки.НовыйКОплатеОстаток          КАК КОплатеОстаток,
		|	Остатки.КОплатеОстатокНаКонецПериода КАК КОплатеОстатокНаКонецПериода,
		|	Остатки.ПросроченнаяЗадолженность    КАК ПросроченнаяЗадолженность
		|ПОМЕСТИТЬ ТаблицаОстатковПоставщиков
		|ИЗ
		|	НовыеОстаткиПоставщиков КАК Остатки
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаПоПартнерам,
		|	ЗаказПоставщику,
		|	Валюта
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НовыеОстаткиПоставщиков
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ ТаблицаПериодовПоставщиков
		|";
		
		Результат = Запрос.Выполнить();
		Счетчик = 0;
		МаксимальноеКоличествоИтераций = 1000;
		Пока Не Результат.Пустой() Цикл 
			Результат = Запрос.Выполнить();
			Счетчик = Счетчик + 1;
			Если Счетчик >= МаксимальноеКоличествоИтераций Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам            КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказПоставщику                      КАК ЗаказПоставщику,
		|	Расчеты.РасчетныйДокумент                    КАК РасчетныйДокумент,
		|	Расчеты.Валюта                               КАК Валюта,
		|	ТаблицаОстатков.ДатаПлатежа                  КАК ДатаПлатежа,
		|	ТаблицаОстатков.КОплатеОстатокНаКонецПериода КАК КОплате
		|ПОМЕСТИТЬ ТаблицаОстатковПоставщиковПоДокументам
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам.Остатки(&Граница, ) КАК Расчеты
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковПоставщиков КАК ТаблицаОстатков
		|	ПО Расчеты.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
		|		И Расчеты.ЗаказПоставщику = ТаблицаОстатков.ЗаказПоставщику
		|		И Расчеты.Валюта = ТаблицаОстатков.Валюта
		|ГДЕ
		|	Расчеты.ДолгОстаток < 0
		|;
		|//////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОстатковПоставщиков
		|;
		|//////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказПоставщику           КАК ЗаказПоставщику,
		|	Расчеты.РасчетныйДокумент         КАК РасчетныйДокумент,
		|	Расчеты.Валюта                    КАК Валюта,
		|	Расчеты.ДатаПлатежа               КАК ДатаПлатежа,
		|	Расчеты.КОплате                   КАК КОплате,
		|	Расчеты.КОплате                   КАК ДолгОстаток
		|ПОМЕСТИТЬ ТаблицаОстатковПоставщиков
		|ИЗ
		|	ТаблицаОстатковПоставщиковПоДокументам КАК Расчеты
		|";
		Запрос.Выполнить();
	Иначе
		Запрос = Новый Запрос("
		 |ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК АналитикаУчетаПоПартнерам,
		|	Неопределено                                                     КАК ЗаказПоставщику,
		|	Неопределено                                                     КАК РасчетныйДокумент,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)                         КАК Валюта,
		|	ДАТАВРЕМЯ(1,1,1)                                                 КАК ДатаПлатежа,
		|	0                                                                КАК КОплате,
		|	0                                                                КАК ДолгОстаток
		|ПОМЕСТИТЬ ТаблицаОстатковПоставщиков");
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
	КонецЕсли;
КонецПроцедуры

// В менеджер временных таблиц помещает таблицу содержащую в себе даты платежа.
// Строится по регистру "Расчеты с клиентами".
// Параметры:
//	ВременныеТаблицы - МенеджерВременныхТаблиц - Менеджер временных таблиц, в который будет помещен результат расчета.
//	ДатаОстатков - Дата - Период на который выполняется расчет дат платежа.
//	ИмяРесурсаКонтроля - Строка - Имя ресурса регистра, который является контрольным при расчете.
Процедура РассчитатьОперативныеДатыПлатежаКлиента(ВременныеТаблицы, ДатаОстатков, ИмяРесурсаКонтроля) Экспорт
	Если ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.РасчетыСКлиентами) Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам        КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказКлиента                     КАК ЗаказКлиента,
		|	Расчеты.Валюта                           КАК Валюта,
		|	Расчеты.%ИмяРесурса%Остаток              КАК %ИмяРесурса%Остаток,
		|	Расчеты.%ИмяРесурса%Остаток              КАК %ИмяРесурса%ОстатокНаКонецПериода,
		|	&ДатаОстатков                            КАК ДатаПлатежа,
		|	ДОБАВИТЬКДАТЕ(&ДатаОстатков, СЕКУНДА, 1) КАК Период
		|ПОМЕСТИТЬ ТаблицаОстатковКлиентов%ИмяРесурса%
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(&ДатаОстатков, ) КАК Расчеты
		|;
		|/////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	1
		|ПОМЕСТИТЬ ТаблицаПериодовКлиентов%ИмяРесурса%
		|");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРесурса%", ИмяРесурсаКонтроля);
		Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
		Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
		Запрос.Выполнить();
		
		Запрос.Текст = "
		|УНИЧТОЖИТЬ ТаблицаПериодовКлиентов%ИмяРесурса%
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказКлиента                          КАК ЗаказКлиента,
		|	Расчеты.Валюта                                КАК Валюта,
		|	МАКСИМУМ(Расчеты.ДатаПлатежа)                 КАК ДатаПлатежа,
		|	МАКСИМУМ(НАЧАЛОПЕРИОДА(Расчеты.Период, День)) КАК Период
		|ПОМЕСТИТЬ ТаблицаПериодовКлиентов%ИмяРесурса%
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
		|		
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковКлиентов%ИмяРесурса% КАК ТаблицаОстатков
		|	ПО Расчеты.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
		|		И Расчеты.ЗаказКлиента = ТаблицаОстатков.ЗаказКлиента
		|		И Расчеты.Валюта = ТаблицаОстатков.Валюта
		|		И ТаблицаОстатков.%ИмяРесурса%Остаток <> 0
		|ГДЕ
		|	Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И Расчеты.Активность
		|	И Расчеты.Период <= &ДатаОстатков
		|	И Расчеты.Период < ТаблицаОстатков.Период
		|	И Расчеты.%ИмяРесурса% <> 0
		|СГРУППИРОВАТЬ ПО
		|	Расчеты.АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказКлиента,
		|	Расчеты.Валюта
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Периоды.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
		|	Периоды.ЗаказКлиента                          КАК ЗаказКлиента,
		|	Периоды.Валюта                                КАК Валюта,
		|	Периоды.Период                                КАК Период,
		|	Периоды.ДатаПлатежа                           КАК ДатаПлатежа,
		|	СУММА(ЕСТЬNULL(Расчеты.%ИмяРесурса%, 0))      КАК %ИмяРесурса%
		|ПОМЕСТИТЬ ТаблицаОтгрузокКлиентов%ИмяРесурса%
		|ИЗ
		|	ТаблицаПериодовКлиентов%ИмяРесурса% КАК Периоды
		|		
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК Расчеты
		|	ПО Периоды.АналитикаУчетаПоПартнерам   = Расчеты.АналитикаУчетаПоПартнерам
		|		И Периоды.ЗаказКлиента             = Расчеты.ЗаказКлиента
		|		И Периоды.Валюта                   = Расчеты.Валюта
		|		И Периоды.ДатаПлатежа              = Расчеты.ДатаПлатежа
		|		И Расчеты.Активность
		|		И (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
		|		И (Расчеты.Период МЕЖДУ Периоды.Период И КОНЕЦПЕРИОДА(Периоды.Период, ДЕНЬ))
		|СГРУППИРОВАТЬ ПО
		|	Периоды.АналитикаУчетаПоПартнерам,
		|	Периоды.ЗаказКлиента,
		|	Периоды.Валюта,
		|	Периоды.Период,
		|	Периоды.ДатаПлатежа
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
		|	Остатки.ЗаказКлиента                      КАК ЗаказКлиента,
		|	Остатки.Валюта                            КАК Валюта,
		|	ВЫБОР КОГДА Остатки.%ИмяРесурса%Остаток > ЕСТЬNULL(Отгрузки.%ИмяРесурса%, 0)
		|			ТОГДА Остатки.%ИмяРесурса%Остаток - ЕСТЬNULL(Отгрузки.%ИмяРесурса%, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ                                     КАК Новый%ИмяРесурса%Остаток,
		|	Остатки.%ИмяРесурса%ОстатокНаКонецПериода КАК %ИмяРесурса%ОстатокНаКонецПериода,
		|	Отгрузки.Период                           КАК Период,
		|	ЕСТЬNULL(Отгрузки.ДатаПлатежа, Остатки.ДатаПлатежа) КАК ДатаПлатежа
		|ПОМЕСТИТЬ НовыеОстаткиКлиентов%ИмяРесурса%
		|ИЗ
		|	ТаблицаОстатковКлиентов%ИмяРесурса% КАК Остатки
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтгрузокКлиентов%ИмяРесурса% КАК Отгрузки
		|	ПО Остатки.АналитикаУчетаПоПартнерам = Отгрузки.АналитикаУчетаПоПартнерам
		|		И Остатки.ЗаказКлиента = Отгрузки.ЗаказКлиента
		|		И Остатки.Валюта  = Отгрузки.Валюта
		|		И Остатки.%ИмяРесурса%Остаток <> 0
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОстатковКлиентов%ИмяРесурса%
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОтгрузокКлиентов%ИмяРесурса%
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Остатки.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
		|	Остатки.ЗаказКлиента                      КАК ЗаказКлиента,
		|	Остатки.Валюта                            КАК Валюта,
		|	Остатки.Период                            КАК Период,
		|	Остатки.ДатаПлатежа                       КАК ДатаПлатежа,
		|	Остатки.Новый%ИмяРесурса%Остаток          КАК %ИмяРесурса%Остаток,
		|	Остатки.Новый%ИмяРесурса%Остаток          КАК %ИмяРесурса%,
		|	Остатки.%ИмяРесурса%ОстатокНаКонецПериода КАК %ИмяРесурса%ОстатокНаКонецПериода
		|ПОМЕСТИТЬ ТаблицаОстатковКлиентов%ИмяРесурса%
		|ИЗ
		|	НовыеОстаткиКлиентов%ИмяРесурса% КАК Остатки
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаПоПартнерам,
		|	ЗаказКлиента,
		|	Валюта
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НовыеОстаткиКлиентов%ИмяРесурса%
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ ТаблицаПериодовКлиентов%ИмяРесурса%
		|";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРесурса%", ИмяРесурсаКонтроля);
		
		Результат = Запрос.Выполнить();
		Пока Не Результат.Пустой() Цикл 
			Результат = Запрос.Выполнить();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// В менеджер временных таблиц помещает таблицу содержащую в себе даты платежа.
// Строится по регистру "Расчеты с поставщиками".
// Параметры:
//	ВременныеТаблицы - МенеджерВременныхТаблиц - Менеджер временных таблиц, в который будет помещен результат расчета.
//	ДатаОстатков - Дата - Период на который выполняется расчет дат платежа.
//	ИмяРесурсаКонтроля - Строка - Имя ресурса регистра, который является контрольным при расчете.
Процедура РассчитатьОперативныеДатыПлатежаПоставщика(ВременныеТаблицы, ДатаОстатков, ИмяРесурсаКонтроля) Экспорт
	Если ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.РасчетыСПоставщиками) Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам        КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказПоставщику                  КАК ЗаказПоставщику,
		|	Расчеты.Валюта                           КАК Валюта,
		|	Расчеты.%ИмяРесурса%Остаток              КАК %ИмяРесурса%Остаток,
		|	Расчеты.%ИмяРесурса%Остаток              КАК %ИмяРесурса%ОстатокНаКонецПериода,
		|	&ДатаОстатков                            КАК ДатаПлатежа,
		|	ДОБАВИТЬКДАТЕ(&ДатаОстатков, СЕКУНДА, 1) КАК Период
		|ПОМЕСТИТЬ ТаблицаОстатковПоставщиков%ИмяРесурса%
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(&ДатаОстатков, ) КАК Расчеты
		|;
		|/////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	1
		|ПОМЕСТИТЬ ТаблицаПериодовПоставщиков%ИмяРесурса%
		|");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРесурса%", ИмяРесурсаКонтроля);
		Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
		Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
		Запрос.Выполнить();
		
		Запрос.Текст = "
		|УНИЧТОЖИТЬ ТаблицаПериодовПоставщиков%ИмяРесурса%
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказПоставщику                       КАК ЗаказПоставщику,
		|	Расчеты.Валюта                                КАК Валюта,
		|	МАКСИМУМ(Расчеты.ДатаПлатежа)                 КАК ДатаПлатежа,
		|	МАКСИМУМ(НАЧАЛОПЕРИОДА(Расчеты.Период, День)) КАК Период
		|ПОМЕСТИТЬ ТаблицаПериодовПоставщиков%ИмяРесурса%
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
		|		
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковПоставщиков%ИмяРесурса% КАК ТаблицаОстатков
		|	ПО Расчеты.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
		|		И Расчеты.ЗаказПоставщику = ТаблицаОстатков.ЗаказПоставщику
		|		И Расчеты.Валюта = ТаблицаОстатков.Валюта
		|		И ТаблицаОстатков.%ИмяРесурса%Остаток <> 0
		|ГДЕ
		|	Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И Расчеты.Активность
		|	И Расчеты.Период <= &ДатаОстатков
		|	И Расчеты.Период < ТаблицаОстатков.Период
		|	И Расчеты.%ИмяРесурса% <> 0
		|СГРУППИРОВАТЬ ПО
		|	Расчеты.АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказПоставщику,
		|	Расчеты.Валюта
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Периоды.АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
		|	Периоды.ЗаказПоставщику                       КАК ЗаказПоставщику,
		|	Периоды.Валюта                                КАК Валюта,
		|	Периоды.Период                                КАК Период,
		|	Периоды.ДатаПлатежа                           КАК ДатаПлатежа,
		|	СУММА(ЕСТЬNULL(Расчеты.%ИмяРесурса%, 0))      КАК %ИмяРесурса%
		|ПОМЕСТИТЬ ТаблицаОтгрузокПоставщиков%ИмяРесурса%
		|ИЗ
		|	ТаблицаПериодовПоставщиков%ИмяРесурса% КАК Периоды
		|		
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
		|	ПО Периоды.АналитикаУчетаПоПартнерам   = Расчеты.АналитикаУчетаПоПартнерам
		|		И Периоды.ЗаказПоставщику          = Расчеты.ЗаказПоставщику
		|		И Периоды.ДатаПлатежа              = Расчеты.ДатаПлатежа
		|		И Периоды.Валюта                   = Расчеты.Валюта
		|		И Расчеты.Активность
		|		И (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
		|		И (Расчеты.Период МЕЖДУ Периоды.Период И КОНЕЦПЕРИОДА(Периоды.Период, ДЕНЬ))
		|СГРУППИРОВАТЬ ПО
		|	Периоды.АналитикаУчетаПоПартнерам,
		|	Периоды.ЗаказПоставщику,
		|	Периоды.Валюта,
		|	Периоды.Период,
		|	Периоды.ДатаПлатежа
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
		|	Остатки.ЗаказПоставщику                   КАК ЗаказПоставщику,
		|	Остатки.Валюта                            КАК Валюта,
		|	ВЫБОР КОГДА Остатки.%ИмяРесурса%Остаток > ЕСТЬNULL(Отгрузки.%ИмяРесурса%, 0)
		|			ТОГДА Остатки.%ИмяРесурса%Остаток - ЕСТЬNULL(Отгрузки.%ИмяРесурса%, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ                                     КАК Новый%ИмяРесурса%Остаток,
		|	Остатки.%ИмяРесурса%ОстатокНаКонецПериода КАК %ИмяРесурса%ОстатокНаКонецПериода,
		|	Отгрузки.Период                           КАК Период,
		|	ЕСТЬNULL(Отгрузки.ДатаПлатежа, Остатки.ДатаПлатежа) КАК ДатаПлатежа
		|ПОМЕСТИТЬ НовыеОстаткиПоставщиков%ИмяРесурса%
		|ИЗ
		|	ТаблицаОстатковПоставщиков%ИмяРесурса% КАК Остатки
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтгрузокПоставщиков%ИмяРесурса% КАК Отгрузки
		|	ПО Остатки.АналитикаУчетаПоПартнерам = Отгрузки.АналитикаУчетаПоПартнерам
		|		И Остатки.ЗаказПоставщику = Отгрузки.ЗаказПоставщику
		|		И Остатки.Валюта  = Отгрузки.Валюта
		|		И Остатки.%ИмяРесурса%Остаток <> 0
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОстатковПоставщиков%ИмяРесурса%
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаОтгрузокПоставщиков%ИмяРесурса%
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
		|	Остатки.ЗаказПоставщику                   КАК ЗаказПоставщику,
		|	Остатки.Валюта                            КАК Валюта,
		|	Остатки.Период                            КАК Период,
		|	Остатки.ДатаПлатежа                       КАК ДатаПлатежа,
		|	Остатки.Новый%ИмяРесурса%Остаток          КАК %ИмяРесурса%Остаток,
		|	Остатки.Новый%ИмяРесурса%Остаток          КАК %ИмяРесурса%,
		|	Остатки.%ИмяРесурса%ОстатокНаКонецПериода КАК %ИмяРесурса%ОстатокНаКонецПериода
		|ПОМЕСТИТЬ ТаблицаОстатковПоставщиков%ИмяРесурса%
		|ИЗ
		|	НовыеОстаткиПоставщиков%ИмяРесурса% КАК Остатки
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаПоПартнерам,
		|	ЗаказПоставщику,
		|	Валюта
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НовыеОстаткиПоставщиков%ИмяРесурса%
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ ТаблицаПериодовПоставщиков%ИмяРесурса%
		|";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРесурса%", ИмяРесурсаКонтроля);
		
		Результат = Запрос.Выполнить();
		Пока Не Результат.Пустой() Цикл 
			Результат = Запрос.Выполнить();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Определяет что отчет пустой.
//
// Параметры:
//		ПроцессорКД - ПроцессорКомпоновкиДанных - Процессор компоновки отчета.
//
// Возвращаемое значение:
// 		Булево - Истина, если отчет пустой.
//
Функция ОтчетПустой(ПроцессорКД) Экспорт
	
	ПроцессорКД.Сбросить();
	
	// Объект для вывода результата компоновки в табличный документ.
	ПроцессорВыводаРезультатаКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	
	// Устанавливает табличный документ, в который нужно выводить результат.
	ПроцессорВыводаРезультатаКД.УстановитьДокумент(Новый ТабличныйДокумент);
	
	// Последовательный вывод
	ПроцессорВыводаРезультатаКД.НачатьВывод();
	
	// Получает следующий элемент результата компоновки.
	ЭлементРезультатаКД = ПроцессорКД.Следующий();
	Пока ЭлементРезультатаКД <> Неопределено Цикл
		
		// Вывести элемент результата компоновки отчета в документ.
		ПроцессорВыводаРезультатаКД.ВывестиЭлемент(ЭлементРезультатаКД);
		
		// Определить не пустой результат.
		Для Каждого ЗначениеПараметраМакетаКД Из ЭлементРезультатаКД.ЗначенияПараметров Цикл
			Попытка
				ЗначениеЗаполнено = ЗначениеЗаполнено(ЗначениеПараметраМакетаКД.Значение);
			Исключение
				ЗначениеЗаполнено = Ложь; // Линия, Рамка, Цвет и другие объекты КД, которые могут фигурировать при выводе.
			КонецПопытки;
			Если ЗначениеЗаполнено Тогда
				ПроцессорВыводаРезультатаКД.ЗакончитьВывод();
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		// Получает следующий элемент результата компоновки.
		ЭлементРезультатаКД = ПроцессорКД.Следующий();
	КонецЦикла;
	
	// Указание объекту о том, что вывод результата завершен.
	ПроцессорВыводаРезультатаКД.ЗакончитьВывод();
	
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область ПорядокРасчетов

// Возвращает порядок расчетов по документу.
//
// Параметры:
//    Объект - ДокументОбъект - Документ, по которому надо получить порядок расчетов.
//
// Возвращаемое значение:
//    Перечисление.ПорядокРасчетов - Порядок расчетов.
//
Функция ПорядокРасчетовПоДокументу(Объект) Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.ПорядокРасчетов) Тогда
		Возврат ПорядокРасчетовПоУмолчанию(Объект);
	Иначе
		Возврат Объект.ПорядокРасчетов;
	КонецЕсли;
	
КонецФункции

// Возвращает порядок расчетов по соглашению/договору, указанным в объекте.
//
// Параметры:
//	Объект - ДокументОбъект, Структура - Документ, по которому надо получить порядок расчетов.
//
// Возвращаемое значение:
//	Перечисление.ПорядокРасчетов - Порядок расчетов по умолчанию.
//
Функция ПорядокРасчетовПоУмолчанию(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураОбъекта = Новый Структура("Соглашение, Договор");
	ЗаполнитьЗначенияСвойств(СтруктураОбъекта, Объект);
	
	Если ЗначениеЗаполнено(СтруктураОбъекта.Соглашение) Тогда
		РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураОбъекта.Соглашение, "ИспользуютсяДоговорыКонтрагентов, ПорядокРасчетов");
		Если РеквизитыСоглашения.ИспользуютсяДоговорыКонтрагентов = Истина И ЗначениеЗаполнено(СтруктураОбъекта.Договор) Тогда
			ПорядокРасчетовПоДокументу = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураОбъекта.Договор, "ПорядокРасчетов");
		ИначеЕсли РеквизитыСоглашения.ИспользуютсяДоговорыКонтрагентов = Ложь Тогда
			ПорядокРасчетовПоДокументу = РеквизитыСоглашения.ПорядокРасчетов;
		Иначе
			ПорядокРасчетовПоДокументу = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(СтруктураОбъекта.Договор) Тогда
		ПорядокРасчетовПоДокументу = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураОбъекта.Договор, "ПорядокРасчетов");
	Иначе
		ПорядокРасчетовПоДокументу = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
	КонецЕсли;
	
	Возврат ПорядокРасчетовПоДокументу;
	
КонецФункции

// Заполняет в форме документа порядок расчетов по умолчанию,
// изменяет порядок расчетов документа, если его нет в доступных,
// заполняет в форме признак графика исполнения в договоре.
// 
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма. Должна иметь экспортную процедуру УстановитьСвойстваЭлементовПоПорядкуРасчетов().
//	ПоЗаказу - Булево - Признак, что документ введен по заказу.
//	ОбновитьОбъект - Булево - Разрешить изменение порядка расчетов по документу.
//	ОбновитьФорму - Булево - Установить свойства элементов по порядку расчетов вне зависимости изменился ли порядок расчетов.
//	Элемент - ПолеФормы - Элемент порядка расчетов на форме.
//
Процедура ЗаполнитьПорядокРасчетовВФорме(Форма, ПоЗаказу, ОбновитьОбъект = Истина, ОбновитьФорму = Ложь, Элемент = Неопределено) Экспорт
	
	Объект = Форма.Объект;
	
	ПорядокРасчетовСтарый = Объект.ПорядокРасчетов;
	
	СтруктураОбъекта = Новый Структура("Соглашение, Договор");
	ЗаполнитьЗначенияСвойств(СтруктураОбъекта, Объект);
	
	Если ЗначениеЗаполнено(СтруктураОбъекта.Договор) Тогда
		УстановитьПривилегированныйРежим(Истина);
		ГрафикИсполненияВДоговоре = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураОбъекта.Договор, "ЗаданГрафикИсполнения");
		УстановитьПривилегированныйРежим(Ложь);
		ЗначениеРеквизитаГрафикИсполненияВДоговоре = Новый Структура("ГрафикИсполненияВДоговоре", Ложь);
		ЗаполнитьЗначенияСвойств(ЗначениеРеквизитаГрафикИсполненияВДоговоре, Форма);
		Если ЗначениеРеквизитаГрафикИсполненияВДоговоре.ГрафикИсполненияВДоговоре <> ГрафикИсполненияВДоговоре Тогда
			ЗаполнитьЗначенияСвойств(Форма, Новый Структура("ГрафикИсполненияВДоговоре", ГрафикИсполненияВДоговоре));
			ОбновитьФорму = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПоЗаказу И ЗначениеЗаполнено(Объект.ПорядокРасчетов) Тогда
		Форма.ПорядокРасчетов = Объект.ПорядокРасчетов;
	Иначе
		Форма.ПорядокРасчетов = ПорядокРасчетовПоУмолчанию(СтруктураОбъекта);
	КонецЕсли;
	
	ДоступныеПорядкиРасчетов = ДоступныеПорядкиРасчетовПоДокументу(
		Объект.ПорядокРасчетов,
		Форма.ПорядокРасчетов,
		ПоЗаказу);
	
	Если Элемент = Неопределено Тогда
		Форма.ДоступныеПорядкиРасчетов = ДоступныеПорядкиРасчетов;
	Иначе
		Элемент.СписокВыбора.ЗагрузитьЗначения(ДоступныеПорядкиРасчетов.ВыгрузитьЗначения());
		Элемент.ТолькоПросмотр = (ДоступныеПорядкиРасчетов.Количество() = 1);
	КонецЕсли;
	
	Если ОбновитьОбъект
		И Объект.ПорядокРасчетов <> Форма.ПорядокРасчетов
		И (ДоступныеПорядкиРасчетов.НайтиПоЗначению(Объект.ПорядокРасчетов) = Неопределено
			Или (ПорядокРасчетовСтарый <> Форма.ПорядокРасчетов)) Тогда
		
		Объект.ПорядокРасчетов = Форма.ПорядокРасчетов;
		ОбновитьФорму = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет какие порядки расчетов можно использовать в выбранном документе.
//
// Параметры:
//	ЗначениеВДокументе - Перечисление.ПорядокРасчетов - Порядок расчетов, выбранный в документе.
//	ЗначениеПоУмолчанию - Перечисление.ПорядокРасчетов - Порядок расчетов, определяемый по соглашению/договору документа.
//	ПоЗаказу - Булево - Документ введен по заказу.
//
// Возвращаемое значение:
//	СписокЗначений - Список доступных порядков расчета.
//
Функция ДоступныеПорядкиРасчетовПоДокументу(ЗначениеВДокументе, ЗначениеПоУмолчанию, ПоЗаказу = Ложь) Экспорт
	
	ПорядкиРасчетов = Новый СписокЗначений;
	
	Если ПоЗаказу Тогда
		ПорядкиРасчетов.Добавить(ЗначениеВДокументе);
	Иначе
	
		Если ЗначениеПоУмолчанию = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
			ПорядкиРасчетов.Добавить(Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
		КонецЕсли;
		
		Если ЗначениеПоУмолчанию = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
				Или ЗначениеПоУмолчанию = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным Тогда
			ПорядкиРасчетов.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказамНакладным);
		КонецЕсли;
		
		ПорядкиРасчетов.Добавить(Перечисления.ПорядокРасчетов.ПоНакладным);
		
	КонецЕсли;
	
	Возврат ПорядкиРасчетов;
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедуры

// Функция определяет вид договора контрагента для обмена
//	с конфигурацией "Бухгалтерия предприятия".
//
// Параметры:
//		ДокументРасчетов - ДокументСсылка - Документ расчетов, по которому нужно определить вид договора.
//		Соглашение - СправочникСсылка.СоглашенияСПоставщиками,СправочникСсылка.СоглашенияСКлиентами - Соглашение документа.
//		ХозяйственнаяОперация - перечислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
//
// Возвращаемое значение:
// 		Строка - Вид договора, например, "СПокупателем".
Функция ВидДоговораКонтрагента(ДокументРасчетов, Соглашение, ХозяйственнаяОперация) Экспорт
	
	ВидДоговора = "";
	
	Если ЗначениеЗаполнено(ДокументРасчетов) Тогда
		
		Если ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию) ТОГДА
			|		""СКомиссионером""
			|	ИНАЧЕ
			|		""СПокупателем""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Документ.ЗаказКлиента КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументРасчетов);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПокупателем";
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера) ТОГДА
			|		""СКомиссионером""
			|	ИНАЧЕ
			|		""СПокупателем""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументРасчетов);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПокупателем";
			КонецЕсли;	
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию) ТОГДА
			|		""СКомитентом""
			|	ИНАЧЕ
			|		""СПоставщиком""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Документ.ЗаказПоставщику КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументРасчетов);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПоставщиком";
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию) ТОГДА
			|		""СКомитентом""
			|	ИНАЧЕ
			|		""СПоставщиком""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументРасчетов);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПоставщиком";
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда
			
			ВидДоговора = "СПоставщиком";
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
			
			ВидДоговора = "СПокупателем";
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровКомитенту) ТОГДА
			|		""СКомитентом""
			|	ИНАЧЕ
			|		""СПоставщиком""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Документ.ВозвратТоваровПоставщику КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументРасчетов);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПоставщиком";
			КонецЕсли;	
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию) ТОГДА
			|		""СКомиссионером""
			|	ИНАЧЕ
			|		""СПокупателем""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументРасчетов);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПокупателем";
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера) ТОГДА
			|		""СКомиссионером""
			|	ИНАЧЕ
			|		""СПокупателем""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Документ.ВозвратТоваровОтКлиента КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументРасчетов);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПокупателем";
			КонецЕсли;	
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ОтчетКомиссионера")
		 ИЛИ ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ОтчетКомиссионераОСписании") Тогда
			ВидДоговора = "СКомиссионером";
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ОтчетКомитенту")
		 ИЛИ ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ОтчетКомитентуОСписании") Тогда
			ВидДоговора = "СКомитентом";
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
			Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
				ВидДоговора = "СКомитентом";
				
			ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации Тогда
				ВидДоговора = "СКомиссионером";
				
			Иначе
				ВидДоговора = "СКомитентом";
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
			Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
				ВидДоговора = "СПоставщиком";
				
			ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации Тогда
				ВидДоговора = "СПокупателем";
				
			Иначе
				ВидДоговора = "СПоставщиком";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если ПустаяСтрока(ВидДоговора)
	 И ЗначениеЗаполнено(Соглашение) Тогда
		
		Если ТипЗнч(Соглашение) = Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеСправочника.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию) ТОГДА
			|		""СКомитентом""
			|	ИНАЧЕ
			|		""СПоставщиком""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Справочник.СоглашенияСПоставщиками КАК ДанныеСправочника
			|ГДЕ
			|	ДанныеСправочника.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", Соглашение);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПоставщиком";
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Соглашение) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеСправочника.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию) ТОГДА
			|		""СКомиссионером""
			|	ИНАЧЕ
			|		""СПокупателем""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Справочник.СоглашенияСКлиентами КАК ДанныеСправочника
			|ГДЕ
			|	ДанныеСправочника.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", Соглашение);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПокупателем";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если ПустаяСтрока(ВидДоговора)
	 И ЗначениеЗаполнено(ХозяйственнаяОперация) Тогда
		
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
		 ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
			ВидДоговора = "СПокупателем";
		Иначе
			ВидДоговора = "СПоставщиком";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВидДоговора;
	
КонецФункции

// Функция определяет признак расчетов в условных единицах для обмена
//	с конфигурацией "Бухгалтерия предприятия".
//
// Параметры:
//		Соглашение - СправочникСсылка.СоглашенияСКлиентами, СправочникСсылка.СоглашенияСПоставщиками - Соглашение, для которого необходимо определить расчеты.
//
// Возвращаемое значение:
//		Булево - Истина, если расчеты в у.е.
//
Функция РасчетыВУсловныхЕдиницах(Соглашение) Экспорт
	
	Если ТипЗнч(Соглашение) = Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ИСТИНА КАК РасчетыВУсловныхЕдиницах
		|ИЗ
		|	Справочник.СоглашенияСПоставщиками КАК ДанныеСправочника
		|ГДЕ
		|	ДанныеСправочника.Ссылка = &Ссылка
		|	И ДанныеСправочника.ПорядокОплаты = ЗНАЧЕНИЕ(Перечисление.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВРублях)
		|");
		Запрос.УстановитьПараметр("Ссылка", Соглашение);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			РасчетыВУсловныхЕдиницах = Выборка.РасчетыВУсловныхЕдиницах;
		Иначе
			РасчетыВУсловныхЕдиницах = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Соглашение) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ИСТИНА КАК РасчетыВУсловныхЕдиницах
		|ИЗ
		|	Справочник.СоглашенияСКлиентами КАК ДанныеСправочника
		|ГДЕ
		|	ДанныеСправочника.Ссылка = &Ссылка
		|	И ДанныеСправочника.ПорядокОплаты = ЗНАЧЕНИЕ(Перечисление.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВРублях)
		|");
		Запрос.УстановитьПараметр("Ссылка", Соглашение);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			РасчетыВУсловныхЕдиницах = Выборка.РасчетыВУсловныхЕдиницах;
		Иначе
			РасчетыВУсловныхЕдиницах = Ложь;
		КонецЕсли;
		
	КонецЕсли;

	Возврат РасчетыВУсловныхЕдиницах;
	
КонецФункции

// Заменяет документы расчетов при вызове отчетов по взаиморасчетов из реализации.
// Если реализация по заказу клиента - документом расчетов является заказ клиента.
//
// Параметры:
// Параметры - ДанныеФормыСтруктура - Параметры отчета.
//
Процедура ЗаменитьДокументыРасчетовСКлиентами(Параметры) Экспорт
	
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("ЗаказКлиентаОтбор") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ПараметрЗаказКлиента = Параметры.Отбор.ЗаказКлиентаОтбор;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ПОМЕСТИТЬ ДанныеДокументов
		|ИЗ
		|	Документ.ЗаказКлиента КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	КОГДА ДанныеДокумента.РеализацияПоЗаказам И НЕ ТаблицаТовары.ЗаказКлиента ЕСТЬ NULL
		|		И НЕ ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
		|		ТаблицаТовары.ЗаказКлиента
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаТовары
		|		ПО ТаблицаТовары.Ссылка = ДанныеДокумента.Ссылка
		|		И ДанныеДокумента.РеализацияПоЗаказам
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.РеализацияУслугПрочихАктивов КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	КОГДА ДанныеДокумента.АктПоЗаказам И НЕ ТаблицаУслуги.ЗаказКлиента ЕСТЬ NULL
		|		И НЕ ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
		|		ТаблицаУслуги.ЗаказКлиента
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.АктВыполненныхРабот КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктВыполненныхРабот.Услуги КАК ТаблицаУслуги
		|		ПО ТаблицаУслуги.Ссылка = ДанныеДокумента.Ссылка
		|		И ДанныеДокумента.АктПоЗаказам
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	КОГДА ДанныеДокумента.ПродажаПоЗаказам
		|		И НЕ ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
		|		ТаблицаТовары.ЗаказКлиента
		|	ИНАЧЕ
		|		ДанныеДокумента.ДокументОснование
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.КорректировкаРеализации КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации.Товары КАК ТаблицаТовары
		|		ПО ТаблицаТовары.Ссылка = ДанныеДокумента.Ссылка
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.ВыкупВозвратнойТарыКлиентом КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	КОГДА ДанныеДокумента.ЗаявкаНаВозвратТоваровОтКлиента <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка)
		|			И НЕ ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
		|		ДанныеДокумента.ЗаявкаНаВозвратТоваровОтКлиента
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.ВозвратТоваровОтКлиента КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеРегистра.ЗаказКлиента КАК ОбъектРасчетов
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК ДанныеРегистра
		|ГДЕ
		|	ДанныеРегистра.Регистратор В (&ЗаказКлиента)
		|	И ТИПЗНАЧЕНИЯ(ДанныеРегистра.ЗаказКлиента) В (ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств),
		|												ТИП(Документ.СписаниеБезналичныхДенежныхСредств),
		|												ТИП(Документ.ПриходныйКассовыйОрдер),
		|												ТИП(Документ.РасходныйКассовыйОрдер),
		|												ТИП(Документ.ОперацияПоПлатежнойКарте),
		|												ТИП(Документ.ВводОстатков))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДокументов.ОбъектРасчетов КАК ОбъектРасчетов
		|ИЗ
		|	ДанныеДокументов КАК ДанныеДокументов
		|");
		
		Запрос.УстановитьПараметр("ЗаказКлиента", ПараметрЗаказКлиента);
		
		МассивДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектРасчетов");
		
		Если ТипЗнч(ПараметрЗаказКлиента) = Тип("Массив") Тогда
			Для Каждого ТекЭлемент Из ПараметрЗаказКлиента Цикл
				Если ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.ЗаказКлиента")
				 И ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента")
				 И ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.РеализацияТоваровУслуг")
				 И ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.РеализацияУслугПрочихАктивов")
				 И ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.АктВыполненныхРабот")
				 И ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.КорректировкаРеализации") Тогда
					МассивДокументов.Добавить(ТекЭлемент);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(ПараметрЗаказКлиента) <> Тип("ДокументСсылка.ЗаказКлиента")
		 И ТипЗнч(ПараметрЗаказКлиента) <> Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента")
		 И ТипЗнч(ПараметрЗаказКлиента) <> Тип("ДокументСсылка.РеализацияТоваровУслуг")
		 И ТипЗнч(ПараметрЗаказКлиента) <> Тип("ДокументСсылка.РеализацияУслугПрочихАктивов")
		 И ТипЗнч(ПараметрЗаказКлиента) <> Тип("ДокументСсылка.АктВыполненныхРабот")
		 И ТипЗнч(ПараметрЗаказКлиента) <> Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		 	МассивДокументов.Добавить(ПараметрЗаказКлиента);
		КонецЕсли;
		
		Параметры.Отбор.ЗаказКлиентаОтбор = МассивДокументов;
		
	КонецЕсли;
	
КонецПроцедуры

// Заменяет документы расчетов при вызове отчетов по взаиморасчетов из поступления.
// Если поступление по заказу поставщику - документом расчетов является заказ поставщику.
//
// Параметры:
// Параметры - ДанныеФормыСтруктура - Параметры отчета.
//
Процедура ЗаменитьДокументыРасчетовСПоставщиками(Параметры) Экспорт
	
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("ЗаказПоставщикуОтбор") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ПараметрЗаказПоставщику = Параметры.Отбор.ЗаказПоставщикуОтбор;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ПОМЕСТИТЬ ДанныеДокументов
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказПоставщику)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	КОГДА ДанныеДокумента.ПоступлениеПоЗаказам И НЕ ТаблицаТовары.ЗаказПоставщику ЕСТЬ NULL
		|		И НЕ ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
		|		ТаблицаТовары.ЗаказПоставщику
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Товары КАК ТаблицаТовары
		|		ПО ТаблицаТовары.Ссылка = ДанныеДокумента.Ссылка
		|		И ДанныеДокумента.ПоступлениеПоЗаказам
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказПоставщику)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.ПриобретениеУслугПрочихАктивов КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказПоставщику)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеРегистра.ЗаказПоставщику КАК ОбъектРасчетов
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК ДанныеРегистра
		|ГДЕ
		|	ДанныеРегистра.Регистратор В (&ЗаказПоставщику)
		|	И ТИПЗНАЧЕНИЯ(ДанныеРегистра.ЗаказПоставщику) В (ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств),
		|												ТИП(Документ.СписаниеБезналичныхДенежныхСредств),
		|												ТИП(Документ.ПриходныйКассовыйОрдер),
		|												ТИП(Документ.РасходныйКассовыйОрдер),
		|												ТИП(Документ.ОперацияПоПлатежнойКарте),
		|												ТИП(Документ.ВводОстатков))
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДокументов.ОбъектРасчетов КАК ОбъектРасчетов
		|ИЗ
		|	ДанныеДокументов КАК ДанныеДокументов
		|");
		
		Запрос.УстановитьПараметр("ЗаказПоставщику", ПараметрЗаказПоставщику);
		
		МассивДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектРасчетов");
		
		Если ТипЗнч(ПараметрЗаказПоставщику) = Тип("Массив") Тогда
			Для Каждого ТекЭлемент Из ПараметрЗаказПоставщику Цикл
				Если ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.ЗаказПоставщику")
				 И ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
				 И ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда
					МассивДокументов.Добавить(ТекЭлемент);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(ПараметрЗаказПоставщику) <> Тип("ДокументСсылка.ЗаказПоставщику")
		 И ТипЗнч(ПараметрЗаказПоставщику) <> Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
		 И ТипЗнч(ПараметрЗаказПоставщику) <> Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда
		 	МассивДокументов.Добавить(ПараметрЗаказПоставщику);
		КонецЕсли;
		
		Параметры.Отбор.ЗаказПоставщикуОтбор = МассивДокументов;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает результат проверки количества вариантов классификации при отключенной опции "ИспользоватьНесколькоКлассификацийЗадолженности".
//
// Параметры:
// Количество - Число - количество элементов в справочнике "ВариантыКлассификацииЗадолженности".
// Форма - ФормаКлиентскогоПриложения - форма, источник проверки.
//
// Возвращаемое значение:
// Булево - Ложь, если проверка пройдена, Истина, если проверка не пройдена, выдать сообщение об ошибке.
//
Функция ПроверкаИСообщениеВариантовКлассификацииЗадолженности(Количество, Форма) Экспорт
	Если Форма = Неопределено Тогда
		ПрефиксСообщения = НСтр("ru = 'Не удалось заполнить поле ""Вариант классификации задолженности"".'");
	Иначе
		ПрефиксСообщения = "";
	КонецЕсли;
	
	СтатусВозврата = Ложь;
	Если Количество > 1 Тогда
		СообщениеОбОшибке = ПрефиксСообщения + НСтр("ru = 'В информационной базе введено несколько вариантов классификации задолженности.'") 
			+ Символы.ПС + Символы.ПС
			+ НСтр("ru = 'Включите функциональную опцию ""Предприятие - Несколько вариантов классификации задолженности"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		СтатусВозврата = Истина;
	ИначеЕсли Количество <> 1 Тогда
		СообщениеОбОшибке = ПрефиксСообщения + НСтр("ru = 'Возможно, в информационной базе не введено ни одного варианта классификации задолженности.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		СтатусВозврата = Истина;
	КонецЕсли;

	Возврат СтатусВозврата;
КонецФункции 

// Формирует структуру отборов по партнеру и организации для контекстно вызываемых отчетов 
//   по расчетам с клиентом.
//
// Параметры:
//  МассивДокументов  - Массив - массив документов, которыми параметризуется отчет.
//  ИмяОтчета         - Строка - имя вызываемого отчета.
//  ИмяКоманды        - Строка - имя команды, при помощи которой вызывается отчет.вызываемого отчета.
//  Типы              - Массив - Массив типов параметра команды вызывающей отчет.
//
// Возвращаемое значение:
//   Структура   - сформированная структура отбора.
//
Функция СтруктураОтборовОтчетовРасчетыСКлиентами(МассивДокументов, ИмяОтчета, ИмяКоманды, Типы = Неопределено) Экспорт
	
	СтруктураОтборов = Новый Структура;
	
	ШаблонЗапросаПоДокументам = "
	|ВЫБРАТЬ 
	|	Документ.Партнер,
	|	Документ.Организация %ТекстПоместить%
	|ИЗ
	|	Документ.%ИмяТаблицы% КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивДокументов)";
	
	ТекстОбъединить = "
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
	ЭтоПервыйЗапросОбъединения = Истина;
	
	ТекстЗапроса = "";
	
	Коллекция = ?(ЗначениеЗаполнено(Типы), Типы, Метаданные.Отчеты[ИмяОтчета].Команды[ИмяКоманды].ТипПараметраКоманды.Типы());
	
	Для Каждого ТипПараметраКоманды Из Коллекция Цикл
		
		ОбъектМетаданныхДокумента = Метаданные.НайтиПоТипу(ТипПараметраКоманды);
		Если ПравоДоступа("Чтение", ОбъектМетаданныхДокумента) Тогда
			ИмяТаблицы = ОбъектМетаданныхДокумента.Имя;
			
			ТекстЗапросаПоДокументу = СтрЗаменить(ШаблонЗапросаПоДокументам, "%ИмяТаблицы%", ИмяТаблицы);
			ТекстЗапросаПоДокументу = СтрЗаменить(ТекстЗапросаПоДокументу, 
			                                      "%ТекстПоместить%",
			                                      ?(ЭтоПервыйЗапросОбъединения,Символы.ПС + "ПОМЕСТИТЬ ДокументыПартнерыОрганизации", ""));
			
			ТекстЗапроса = ТекстЗапроса + ?(ЭтоПервыйЗапросОбъединения, "", ТекстОбъединить) + ТекстЗапросаПоДокументу;
			
			ЭтоПервыйЗапросОбъединения = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДокументыПартнерыОрганизации.Партнер
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПартнерыОрганизации КАК ДокументыПартнерыОрганизации
	|		ПО Партнеры.Ссылка = ДокументыПартнерыОрганизации.Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДокументыПартнерыОрганизации.Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПартнерыОрганизации КАК ДокументыПартнерыОрганизации
	|		ПО Организации.Ссылка = ДокументыПартнерыОрганизации.Организация";
	
	
	Результат = Запрос.ВыполнитьПакет();
	
	СтруктураОтборов.Вставить("Партнер", Результат[0].Выгрузить().ВыгрузитьКолонку("Партнер"));
	СтруктураОтборов.Вставить("Организация", Результат[1].Выгрузить().ВыгрузитьКолонку("Организация"));
	
	Возврат СтруктураОтборов;
	
КонецФункции

// Устанавливает видимость группы финансового учета по порядку расчетов документа.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма, в которой было находится элемент группы финансового учета.
//	ЭтоЗаказ - Булево - Истина - Документ является заказом.
//	ПоЗаказу - Булево - Истина - Документ введен на основании заказа/заказов.
//
Процедура УстановитьВидимостьГруппыФинансовогоУчета(Форма, ЭтоЗаказ = Ложь, ПоЗаказу = Ложь) Экспорт
	
	ВидимостьЭлемента = Ложь;
	ПорядокРасчетов = Форма.Объект.ПорядокРасчетов;
	
	Если ЭтоЗаказ Тогда
		ВидимостьЭлемента = (ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным);
	ИначеЕсли ПоЗаказу Тогда
		ВидимостьЭлемента = (ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным)
	Иначе
		ВидимостьЭлемента = (ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
	КонецЕсли;
	
	Форма.Элементы.ГруппаФинансовогоУчета.Видимость = ВидимостьЭлемента;
	
КонецПроцедуры

// Устанавливает видимость команд зачета оплаты по порядку расчетов документа.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма, в которой находится команда зачета оплаты.
//	ЭтоЗаказ - Булево - Истина - Документ является заказом.
//	ПоЗаказу - Булево - Истина - Документ введен на основании заказа/заказов.
//	ЭтоДоговор - Булево - Истина - Документ является графиком исполнения договора.
//
Процедура УстановитьВидимостьЗачетаОплаты(Форма, ЭтоЗаказ = Ложь, ПоЗаказу = Ложь, ЭтоДоговор = Ложь) Экспорт
	
	РольДоступна = РольДоступна("ЗачетОплаты") ИЛИ РольДоступна("ПолныеПрава");
	
	ВидимостьЭлемента = РольДоступна;
	ПорядокРасчетов = Форма.Объект.ПорядокРасчетов;
	
	Если ЭтоЗаказ Тогда
		ВидимостьЭлемента = (ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным) И РольДоступна;
	ИначеЕсли ПоЗаказу Тогда
		ВидимостьЭлемента = (ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоЗаказамНакладным) И РольДоступна;
	ИначеЕсли ЭтоДоговор Тогда
		ВидимостьЭлемента = (ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов) И РольДоступна;
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Форма.Элементы, 
		"ЗачетОплатыФорма, ЗачетОплаты",
		"Видимость",
		ВидимостьЭлемента);
	
КонецПроцедуры

// Устанавливает видимость даты платежа по порядку расчетов документа.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма, в которой находится дата платежа.
//
Процедура УстановитьВидимостьДатыПлатежа(Форма) Экспорт
	
	Форма.Элементы.ДатаПлатежа.Видимость = Форма.Элементы.ДатаПлатежа.Видимость
		И Не (Форма.ГрафикИсполненияВДоговоре И Форма.Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
	
КонецПроцедуры

// Формирование таблицы взаимозачета кредиторской задолженности.
//
// Параметры:
//	ДебиторскаяЗадолженность - ТаблицаЗначений, МассивСтрок - таблица дебиторской задолженности.
//	КредиторскаяЗадолженность - ТаблицаЗначений, МассивСтрок - таблица кредиторской задолженности.
//	ТаблицаДвижений - ТаблицаЗначений - таблица движений по регистру, если задана то будет дополнена движениями иначе будет возвращена в этой переменной.
//
Процедура ПровестиВзаимозачет(ДебиторскаяЗадолженность, КредиторскаяЗадолженность, ТаблицаДвижений = Неопределено) Экспорт
	
	ОбщиеПоля   = "Период,ХозяйственнаяОперация,Организация,Подразделение,Валюта";
	ПоляДебета  = "Партнер,Контрагент,Договор,НаправлениеДеятельности,ОбъектРасчетов,ТипСуммы,ВалютаВзаиморасчетов,ИсточникГФУРасчетов";
	ПоляКредита = "КорПартнер,КорКонтрагент,КорДоговор,КорНаправлениеДеятельности,КорОбъектРасчетов,КорТипСуммы,КорВалютаВзаиморасчетов,КорИсточникГФУРасчетов";
	ПоляСумм    = "Сумма,СуммаРегл,СуммаВВалюте,СуммаВВалютеВзаиморасчетов,КорСуммаВВалютеВзаиморасчетов";
	
	Если ТаблицаДвижений = Неопределено Тогда
		ТаблицаДвижений = РегистрыНакопления.ДвиженияКонтрагентКонтрагент.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	Иначе
		ОбщиеПоля = "Регистратор," + ОбщиеПоля;
	КонецЕсли;
	
	НомерСтроки = 0;
	ПоследнийИндекс = КредиторскаяЗадолженность.Количество()-1;
	НашеПредприятие = Справочники.Партнеры.НашеПредприятие;
	Для Каждого Дебет Из ДебиторскаяЗадолженность Цикл
		Индекс = -1;
		Для Каждого Кредит Из КредиторскаяЗадолженность Цикл
			
			Индекс = Индекс + 1;
			Если Кредит.СуммаРегл = 0 Тогда
				Продолжить;
			КонецЕсли;
			ПоследнийПлатеж = Индекс = ПоследнийИндекс;
			
			Сумма        = СписатьСумму(Дебет.Сумма, Кредит.Сумма, ПоследнийПлатеж);
			СуммаРегл    = СписатьСумму(Дебет.СуммаРегл, Кредит.СуммаРегл, ПоследнийПлатеж);
			СуммаВВалюте = СписатьСумму(Дебет.СуммаВВалюте, Кредит.СуммаВВалюте, ПоследнийПлатеж);
			
			СуммаВВалютеВзаиморасчетов = СписатьСуммуПоКурсу(СуммаРегл, Дебет, ПоследнийПлатеж);
			КорСуммаВВалютеВзаиморасчетов = СписатьСуммуПоКурсу(СуммаРегл, Кредит, ПоследнийПлатеж, "Кор");
			
			Если СуммаРегл <> 0 Тогда
				НомерСтроки = НомерСтроки + 1;
				НовоеДвижение = ТаблицаДвижений.Добавить();
				НовоеДвижение.НомерСтроки = НомерСтроки;
				ЗаполнитьЗначенияСвойств(НовоеДвижение, Дебет, ОбщиеПоля+","+ПоляДебета, ПоляСумм);
				ЗаполнитьЗначенияСвойств(НовоеДвижение, Кредит, ПоляКредита, ПоляСумм);
				УстановитьПустойОбъектРасчета(НовоеДвижение);
				
				НовоеДвижение.Сумма        = Сумма;
				НовоеДвижение.СуммаРегл    = СуммаРегл;
				НовоеДвижение.СуммаВВалюте = СуммаВВалюте;
				НовоеДвижение.СуммаВВалютеВзаиморасчетов    = СуммаВВалютеВзаиморасчетов;
				НовоеДвижение.КорСуммаВВалютеВзаиморасчетов = КорСуммаВВалютеВзаиморасчетов;
				
				Если Дебет.Организация <> Кредит.Организация Тогда
				
					НовоеДвижение.КорПартнер = НашеПредприятие;
					НовоеДвижение.КорКонтрагент = Кредит.Организация;
					
					НомерСтроки = НомерСтроки + 1;
					НовоеДвижениеКор = ТаблицаДвижений.Добавить();
					НовоеДвижениеКор.НомерСтроки = НомерСтроки;
					ЗаполнитьЗначенияСвойств(НовоеДвижениеКор, Дебет, ПоляДебета, ПоляСумм);
					ЗаполнитьЗначенияСвойств(НовоеДвижениеКор, Кредит, ОбщиеПоля+","+ПоляКредита, ПоляСумм);
					ЗаполнитьЗначенияСвойств(НовоеДвижениеКор, НовоеДвижение, ПоляСумм);
					УстановитьПустойОбъектРасчета(НовоеДвижениеКор);
					НовоеДвижениеКор.Партнер = НашеПредприятие;
					НовоеДвижениеКор.Контрагент = Дебет.Организация;
					
				КонецЕсли;
				
			КонецЕсли;
			Если Дебет.СуммаРегл <= 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;// по кредиторской задолженности
	КонецЦикла;// по дебиторской задолженности
	
КонецПроцедуры

// Определяется возможная сумма списания с текущего остатка - весь остаток или только часть остатка равная сумме списания.
// При этом уменьшается текущий остаток на сумму списания и сама сумма списания.
//
// Параметры:
//  СуммаОстатка - Число - Текущий остаток с которого необходимо списать сумму.
//  СуммаКСписанию - Число - Сумма которую необходимо списать.
//  ПоследняяЧасть - Булево - если истина, то списать весь остаток.
//
// Возвращаемое значение:
//  Число - сумма которую необходимо списать или весь остаток целиком в случае если он меньше заданной суммы или
//          ПоследняяЧасть = Истина.
//
Функция СписатьСумму(СуммаОстатка, СуммаКСписанию, ПоследняяЧасть = Ложь) Экспорт
	
	СуммаСписания = 0;
	КСписанию = Макс(СуммаКСписанию, -СуммаКСписанию);
	Знак = ?(КСписанию = 0, 1, СуммаКСписанию/КСписанию);
	
	Если СуммаОстатка >= КСписанию И НЕ ПоследняяЧасть Тогда
		СуммаСписания = КСписанию;
		СуммаОстатка = СуммаОстатка - СуммаСписания;
		КСписанию = 0;
	Иначе
		СуммаСписания = СуммаОстатка;
		КСписанию = КСписанию - СуммаСписания;
		СуммаОстатка = 0;
	КонецЕсли;
	
	СуммаКСписанию = Знак * КСписанию;
	
	Возврат СуммаСписания;
	
КонецФункции

// Определяется возможная сумма списания с текущего остатка одного показателя, 
// пропорционально уже списанной по другому показателю.
// При этом уменьшается текущий остаток.
//
// Параметры:
//	СуммаОстатка - Число - Текущий остаток с которого необходимо списать сумму.
//	СуммаСписано - Число - Сумма которая уже списана с другого показателя.
//	СуммаВсего - Число - Сумма по другому показателю до списания.
//
// Возвращаемое значение:
//	Число - сумма которую необходимо списать.
//
Функция СписатьСуммуПропорционально(СуммаОстатка, СуммаСписано, СуммаВсего) Экспорт
	
	СуммаКСписанию = 0;
	Если СуммаВсего > 0 Тогда
		СуммаКСписанию = Окр(СуммаОстатка * СуммаСписано / СуммаВсего, 2);
	КонецЕсли;
	
	Возврат СписатьСумму(СуммаОстатка, СуммаКСписанию);
	
КонецФункции

// Устанавливает видимость порядка оплаты по порядку расчетов документа.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма, в которой было находится элемент порядка оплаты.
//	ЭтоЗаказ - Булево - Истина - Документ является заказом.
//	ПоЗаказу - Булево - Истина - Документ введен на основании заказа/заказов.
//
Процедура УстановитьВидимостьПорядкаОплаты(Форма, ЭтоЗаказ = Ложь, ПоЗаказу = Ложь) Экспорт
	
	ВидимостьЭлемента = Ложь;
	ПорядокРасчетов = Форма.Объект.ПорядокРасчетов;
	
	Если ЭтоЗаказ Тогда
		ВидимостьЭлемента = (ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным);
	ИначеЕсли ПоЗаказу Тогда
		ВидимостьЭлемента = (ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным)
	Иначе
		ВидимостьЭлемента = (ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
	КонецЕсли;
	
	Форма.Элементы.ГруппаФинансовогоУчета.Видимость = ВидимостьЭлемента;
	
КонецПроцедуры

// Функция - конструктор процедуры ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоЗаказуКлиента.
//
// Возвращаемое значение:
//	Структура - Структура параметров.
//		* Партнер          - СправочникСсылка.Партнеры - Партнер документа-инициатора.
//		* Договор          - СправочникСсылка.ДоговорыКонтрагентов - Договор объекта расчетов.
//		* ЗаказКлиента     - ДокументСсылка.ЗаказКлиента - Объект расчетов.
//		* ВалютаДокумента  - СправочникСсылка.Валюты - Валюта документа поступления денежных средств.
//		* ОснованиеПлатежа - ДокументСсылка - Документ-основание.
//
Функция ПараметрыЗаполненияРасшифровкиПлатежаПоЗаказу() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Партнер");
	Параметры.Вставить("Договор");
	Параметры.Вставить("ЗаказКлиента");
	Параметры.Вставить("ВалютаДокумента");
	Параметры.Вставить("ОснованиеПлатежа");
	
	Возврат Параметры;
КонецФункции

// Функция возвращает максимальную дату из временной таблицы, которая содержит перечень документов.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Содержит временную таблицу ТаблицаДанныхДокументов,
//														с перечнем документов одного типа.
//
Функция ПолучитьМаксимальнуюДатуВКоллекцииДокументов(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(КоллекцияДокументов.Ссылка.Дата), НЕОПРЕДЕЛЕНО) КАК Период
	|ИЗ
	|	ТаблицаДанныхДокументов КАК КоллекцияДокументов
	|");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		МаксимальнаяДата = Результат.Выгрузить()[0].Период;
		
		Если МаксимальнаяДата = Неопределено Тогда
			МаксимальнаяДата = ТекущаяДатаСеанса();
		КонецЕсли;
	Иначе
		МаксимальнаяДата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Возврат МаксимальнаяДата;
КонецФункции

// Процедура формирует записи в регистре сведений "Задания к распределению расчетов с клиентами",
// если текущий документ изменяет записи в регистре "Расчеты с клиентами".
// Параметры:
//	Документ - Документ.Ссылка - Ссылка на документ-регистратор
//	ДополнительныеСвойства - Структура - Коллекция, содержащая в себе менеджер временных таблиц.
Процедура ОтразитьЗаданияКРаспределениюРасчетовСКлиентами(Документ, ДополнительныеСвойства) Экспорт
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	ВременныеТаблицы = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Если (ВременныеТаблицы.Таблицы.Найти("РасчетыСКлиентамиЗаданияКЗакрытиюМесяца") <> Неопределено
			ИЛИ ВременныеТаблицы.Таблицы.Найти("РасчетыСКлиентамиПоДокументамЗаданияКРасчетамСКлиентами") <> Неопределено)
		И ПланыОбмена.ГлавныйУзел() = Неопределено Тогда // есть изменения в оперативном регистре
		
		ШаблонВложенныйЗапрос = "
		|ВЫБРАТЬ
		|	Таблица.Месяц                        КАК Месяц,
		|	Таблица.АналитикаУчетаПоПартнерам    КАК АналитикаУчетаПоПартнерам,
		|	Ключи.Организация                    КАК Организация,
		|	Таблица.ОбъектРасчетов               КАК ОбъектРасчетов,
		|	Таблица.Документ                     КАК Документ
		|ИЗ
		|	&ТаблицаДанных КАК Таблица
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Ключи
		|	ПО Ключи.Ссылка = Таблица.АналитикаУчетаПоПартнерам
		|";
		
		ШаблонТекстУничтожениеВТ = "
		|;
		|//////////////////////////////
		|УНИЧТОЖИТЬ &ТаблицаДанных
		|";
		
		ТекстУничтожениеВТ = "";
		ВложенныйЗапрос = "";
		КоличествоТаблиц = 0;
		
		Если ВременныеТаблицы.Таблицы.Найти("РасчетыСКлиентамиЗаданияКЗакрытиюМесяца") <> Неопределено Тогда
			ВложенныйЗапрос = СтрЗаменить(ШаблонВложенныйЗапрос, "&ТаблицаДанных", "РасчетыСКлиентамиЗаданияКЗакрытиюМесяца");
			ВложенныйЗапрос = СтрЗаменить(ВложенныйЗапрос, "Ключи.Организация", "Таблица.Организация");
			КоличествоТаблиц = КоличествоТаблиц + 1;
		КонецЕсли;
		
		Если ВременныеТаблицы.Таблицы.Найти("РасчетыСКлиентамиПоДокументамЗаданияКРасчетамСКлиентами") <> Неопределено Тогда
			Если КоличествоТаблиц = 0 Тогда
				ВложенныйЗапрос = СтрЗаменить(ШаблонВложенныйЗапрос, "&ТаблицаДанных", "РасчетыСКлиентамиПоДокументамЗаданияКРасчетамСКлиентами");
				ТекстУничтожениеВТ = СтрЗаменить(ШаблонТекстУничтожениеВТ, "&ТаблицаДанных", "РасчетыСКлиентамиПоДокументамЗаданияКРасчетамСКлиентами");
			Иначе
				ВложенныйЗапрос = ВложенныйЗапрос + "
					|ОБЪЕДИНИТЬ ВСЕ
					|"
					+ СтрЗаменить(ШаблонВложенныйЗапрос, "&ТаблицаДанных", "РасчетыСКлиентамиПоДокументамЗаданияКРасчетамСКлиентами");
				ТекстУничтожениеВТ = ТекстУничтожениеВТ + СтрЗаменить(ШаблонТекстУничтожениеВТ, "&ТаблицаДанных", "РасчетыСКлиентамиПоДокументамЗаданияКРасчетамСКлиентами");
			КонецЕсли;
			КоличествоТаблиц = КоличествоТаблиц + 1;
		КонецЕсли;
		
		Если КоличествоТаблиц = 1 Тогда
			ТекстЗапроса = ВложенныйЗапрос + ТекстУничтожениеВТ;
		Иначе
			ШаблонТекстаЗапроса = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Таблица.Месяц                        КАК Месяц,
			|	Таблица.АналитикаУчетаПоПартнерам    КАК АналитикаУчетаПоПартнерам,
			|	Таблица.Организация                  КАК Организация,
			|	Таблица.ОбъектРасчетов               КАК ОбъектРасчетов,
			|	Таблица.Документ                     КАК Документ
			|ИЗ
			|	(
			|	&ВложенныйЗапрос
			|	) КАК Таблица
			|
			|";
			ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&ВложенныйЗапрос", ВложенныйЗапрос) + ТекстУничтожениеВТ;
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.ЗаданияКРаспределениюРасчетовСКлиентами.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НаборЗаписей, Выборка);
			НаборЗаписей.НомерЗадания = Константы.НомерЗаданияКРаспределениюРасчетовСКлиентами.Получить();
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует записи в регистре сведений "Задания к распределению расчетов с поставщиками",
// если текущий документ изменяет записи в регистре "Расчеты с поставщиками".
// Параметры:
//	Документ - Документ.Ссылка - Ссылка на документ-регистратор
//	ДополнительныеСвойства - Структура - Коллекция, содержащая в себе менеджер временных таблиц.
Процедура ОтразитьЗаданияКРаспределениюРасчетовСПоставщиками(Документ, ДополнительныеСвойства) Экспорт
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	ВременныеТаблицы = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Если (ВременныеТаблицы.Таблицы.Найти("РасчетыСПоставщикамиЗаданияКЗакрытиюМесяца") <> Неопределено
			ИЛИ ВременныеТаблицы.Таблицы.Найти("РасчетыСПоставщикамиПоДокументамЗаданияКРасчетамСПоставщиками") <> Неопределено)
		И ПланыОбмена.ГлавныйУзел() = Неопределено Тогда // есть изменения в оперативном регистре
		
		ШаблонВложенныйЗапрос = "
		|ВЫБРАТЬ
		|	Таблица.Месяц                        КАК Месяц,
		|	Таблица.АналитикаУчетаПоПартнерам    КАК АналитикаУчетаПоПартнерам,
		|	Ключи.Организация                    КАК Организация,
		|	Таблица.ОбъектРасчетов               КАК ОбъектРасчетов,
		|	Таблица.Документ                     КАК Документ
		|ИЗ
		|	&ТаблицаДанных КАК Таблица
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Ключи
		|	ПО Ключи.Ссылка = Таблица.АналитикаУчетаПоПартнерам
		|";
		
		ШаблонТекстУничтожениеВТ = "
		|;
		|//////////////////////////////
		|УНИЧТОЖИТЬ &ТаблицаДанных
		|";
		
		ТекстУничтожениеВТ = "";
		ВложенныйЗапрос = "";
		КоличествоТаблиц = 0;
		
		Если ВременныеТаблицы.Таблицы.Найти("РасчетыСПоставщикамиЗаданияКЗакрытиюМесяца") <> Неопределено Тогда
			ВложенныйЗапрос = СтрЗаменить(ШаблонВложенныйЗапрос, "&ТаблицаДанных", "РасчетыСПоставщикамиЗаданияКЗакрытиюМесяца");
			ВложенныйЗапрос = СтрЗаменить(ВложенныйЗапрос, "Ключи.Организация", "Таблица.Организация");
			КоличествоТаблиц = КоличествоТаблиц + 1;
		КонецЕсли;
		
		Если ВременныеТаблицы.Таблицы.Найти("РасчетыСПоставщикамиПоДокументамЗаданияКРасчетамСПоставщиками") <> Неопределено Тогда
			Если КоличествоТаблиц = 0 Тогда
				ВложенныйЗапрос = СтрЗаменить(ШаблонВложенныйЗапрос, "&ТаблицаДанных", "РасчетыСПоставщикамиПоДокументамЗаданияКРасчетамСПоставщиками");
				ТекстУничтожениеВТ = СтрЗаменить(ШаблонТекстУничтожениеВТ, "&ТаблицаДанных", "РасчетыСПоставщикамиПоДокументамЗаданияКРасчетамСПоставщиками");
			Иначе
				ВложенныйЗапрос = ВложенныйЗапрос + "
					|ОБЪЕДИНИТЬ ВСЕ
					|"
					+ СтрЗаменить(ШаблонВложенныйЗапрос, "&ТаблицаДанных", "РасчетыСПоставщикамиПоДокументамЗаданияКРасчетамСПоставщиками");
				ТекстУничтожениеВТ = ТекстУничтожениеВТ + СтрЗаменить(ШаблонТекстУничтожениеВТ, "&ТаблицаДанных", "РасчетыСПоставщикамиПоДокументамЗаданияКРасчетамСПоставщиками");
			КонецЕсли;
			КоличествоТаблиц = КоличествоТаблиц + 1;
		КонецЕсли;
		
		Если КоличествоТаблиц = 1 Тогда
			ТекстЗапроса = ВложенныйЗапрос + ТекстУничтожениеВТ;
		Иначе
			ШаблонТекстаЗапроса = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Таблица.Месяц                        КАК Месяц,
			|	Таблица.АналитикаУчетаПоПартнерам    КАК АналитикаУчетаПоПартнерам,
			|	Таблица.Организация                  КАК Организация,
			|	Таблица.ОбъектРасчетов               КАК ОбъектРасчетов,
			|	Таблица.Документ                     КАК Документ
			|ИЗ
			|	(
			|	&ВложенныйЗапрос
			|	) КАК Таблица
			|
			|";
			ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&ВложенныйЗапрос", ВложенныйЗапрос) + ТекстУничтожениеВТ;
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.ЗаданияКРаспределениюРасчетовСПоставщиками.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НаборЗаписей, Выборка);
			НаборЗаписей.НомерЗадания = Константы.НомерЗаданияКРаспределениюРасчетовСПоставщиками.Получить();
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает нераспределенный по объектам расчетов остаток платежа платежного документа.
//
// Параметры:
//	Объект - ФормаКлиентскогоПриложения, ДокументОбъект - Форма или документ по которому нужно рассчитать остаток.
//
// Возвращаемое значение:
//	Число - Сумма нераспределенного платежа.
//
Функция НераспределенныйОстатокПлатежа(Объект, Ссылка = Неопределено) Экспорт
	
	Если Ссылка = Неопределено Тогда
		Ссылка = Объект.Ссылка;
	КонецЕсли;
	
	Если НЕ  ХозяйственнаяОперацияИнтеркампани(Объект.ХозяйственнаяОперация) 
		И НЕ ХозяйственнаяОперацияСКлиентом(Объект.ХозяйственнаяОперация)
		И НЕ ХозяйственнаяОперацияСПоставщиком(Объект.ХозяйственнаяОперация) Тогда
		Возврат 0;
	КонецЕсли;
	
	СуммаНеРаспределено = 0;
	Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.Заказ) ИЛИ СтрокаРасшифровки.Заказ = Ссылка Тогда
			СуммаНеРаспределено = СуммаНеРаспределено + СтрокаРасшифровки.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СуммаНеРаспределено;
	
КонецФункции

// Функция возвращает таблицу реквизитов договоров с расчетами не по договорам и самого документа платежа.
//
// Параметры:
//	РасшифровкаПлатежа - ТаблицаЗначений - Расшифровка платежа документа.
//	СтруктураРеквизитов - Структура - Структура реквизитов объекта расчетов-платежа.
//		* ГруппаФинансовогоУчета 	- СправочникСсылка.ГруппыФинансовогоУчета 	- ГФУ платежка.
//		* Подразделение 			- СправочникСсылка.Подразделения 			- Подразделение платежа.
//		* НаправлениеДеятельности	- СправочникСсылка.НаправленияДеятельности	- Направление деятельности платежа.
//		* Договор 					- СправочникСсылка.ДоговорыКонтрагентов,СправочникСсылка.ДоговорыМеждуОрганизациями - Договор платежа.
//		* ДокументСсылка			- ДокументСсылка - Ссылка на документ платежа.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица реквизитов договоров из табличной части.
//		* ГруппаФинансовогоУчета 	- СправочникСсылка.ГруппыФинансовогоУчета 	- ГФУ договора/платежки.
//		* Подразделение 			- СправочникСсылка.Подразделения 			- Подразделение договора/платежки.
//		* НаправлениеДеятельности	- СправочникСсылка.НаправленияДеятельности	- Направление деятельности договора/платежки.
//		* Договор 					- СправочникСсылка.ДоговорыКонтрагентов,СправочникСсылка.ДоговорыМеждуОрганизациями - Договоры расшифровки и платежки.
//
Функция РеквизитыНераспределенногоПлатежа(ЗНАЧ РасшифровкаПлатежа, ЗНАЧ СтруктураРеквизитов) Экспорт
	
	МассивДоговоров    = Новый Массив;
	ЕстьПустоеЗначение = Ложь;
	
	Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
		Если (НЕ ЗначениеЗаполнено(СтрокаРасшифровки.Заказ) ИЛИ СтрокаРасшифровки.Заказ = СтруктураРеквизитов.ДокументСсылка) Тогда
			Если ЗначениеЗаполнено(СтрокаРасшифровки.ОснованиеПлатежа) Тогда
				Если МассивДоговоров.Найти(СтрокаРасшифровки.ОснованиеПлатежа) = Неопределено Тогда
					МассивДоговоров.Добавить(СтрокаРасшифровки.ОснованиеПлатежа);
				КонецЕсли;
			Иначе
				ЕстьПустоеЗначение = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВсеДоговоры.ГруппаФинансовогоУчета  КАК ГруппаФинансовогоУчета,
	|	ВсеДоговоры.Подразделение           КАК Подразделение,
	|	ВсеДоговоры.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВсеДоговоры.Ссылка                  КАК Договор
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДоговорыКонтрагентов.ГруппаФинансовогоУчета  КАК ГруппаФинансовогоУчета,
	|		ДоговорыКонтрагентов.Подразделение           КАК Подразделение,
	|		ДоговорыКонтрагентов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		ДоговорыКонтрагентов.Ссылка                  КАК Ссылка
	|	ИЗ
	|		Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|	ГДЕ
	|		ДоговорыКонтрагентов.Ссылка В(&СписокДоговоров)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДоговорыМеждуОрганизациями.ГруппаФинансовогоУчета,
	|		ДоговорыМеждуОрганизациями.Подразделение,
	|		ДоговорыМеждуОрганизациями.НаправлениеДеятельности,
	|		ДоговорыМеждуОрганизациями.Ссылка
	|	ИЗ
	|		Справочник.ДоговорыМеждуОрганизациями КАК ДоговорыМеждуОрганизациями
	|	ГДЕ
	|		ДоговорыМеждуОрганизациями.Ссылка В(&СписокДоговоров)) КАК ВсеДоговоры";
	
	Запрос.УстановитьПараметр("СписокДоговоров", МассивДоговоров);
	РеквизитыНераспределенногоПлатежа = Запрос.Выполнить().Выгрузить();
	
	Если ЕстьПустоеЗначение Тогда
		НовСтр = РеквизитыНераспределенногоПлатежа.Добавить();
		НовСтр.Договор                 = СтруктураРеквизитов.Договор;
		НовСтр.ГруппаФинансовогоУчета  = СтруктураРеквизитов.ГруппаФинансовогоУчета;
		НовСтр.Подразделение           = СтруктураРеквизитов.Подразделение;
		НовСтр.НаправлениеДеятельности = СтруктураРеквизитов.НаправлениеДеятельности;
	КонецЕсли;
	
	РеквизитыНераспределенногоПлатежа.Свернуть("ГруппаФинансовогоУчета, Подразделение, НаправлениеДеятельности, Договор");
	
	Возврат РеквизитыНераспределенногоПлатежа;
	
КонецФункции

// Процедура формирует надпись гиперссылки нераспределенного платежа. 
// Форма должна содержать элемент типа Декорация - Надпись "ГиперссылкаРеквизитыОбъектаРасчетов".
//
// Параметры:
//	Форма					- ФормаКлиентскогоПриложения - Форма инициатор заполнения.
//	Объект					- ДанныеФормыСтруктуры - Объект формы.
//	ПроверятьРасхождения	- Булево - Нужно ли проверять расхождения договоров расшифровки по ключевым реквизитам.
//								Если проверять расхождения нужно форма должна содержать элемент типа Декорация - Картинка "ДекорацияЕстьРасхождения".
//
Процедура СформироватьНадписьГиперссылкиРеквизитыОбъектаРасчетов(Форма, Объект, ПроверятьРасхождения = Ложь) Экспорт
	
	СуммаНеРаспределено = НераспределенныйОстатокПлатежа(Объект);
	
	Если СуммаНеРаспределено = 0 Тогда
		
		ЭтоОперацияВозвратаДС = ХозяйственнаяОперацияВозвратДенежныхСредств(Объект.ХозяйственнаяОперация);
		
		Если НЕ ЭтоОперацияВозвратаДС Тогда
			Форма.Элементы.ГиперссылкаРеквизитыОбъектаРасчетов.Доступность = Ложь;
			Если ПроверятьРасхождения Тогда
				Форма.Элементы.ДекорацияЕстьРасхождения.Видимость = Ложь;
			КонецЕсли;
			Форма.Элементы.ГиперссылкаРеквизитыОбъектаРасчетов.Заголовок = НСтр("ru = 'Платеж распределен'");
			
		Иначе
			Форма.Элементы.ГиперссылкаРеквизитыОбъектаРасчетов.Доступность = Истина;
			Форма.Элементы.ГиперссылкаРеквизитыОбъектаРасчетов.Заголовок = НСтр("ru = 'Аналитика возврата'");
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ДекорацияЕстьРасхождения", "Видимость", Ложь);
			
		КонецЕсли;
		
	Иначе
		
		Форма.Элементы.ГиперссылкаРеквизитыОбъектаРасчетов.Доступность = Истина;
		Форма.Элементы.ГиперссылкаРеквизитыОбъектаРасчетов.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																	НСтр("ru = 'Нераспределенный остаток: %1 %2'"),
																	СуммаНеРаспределено,
																	Объект.Валюта);
		Если ПроверятьРасхождения Тогда
			
			СтруктураРеквизитов = Новый Структура();
			СтруктураРеквизитов.Вставить("ГруппаФинансовогоУчета",  Объект.ГруппаФинансовогоУчета);
			СтруктураРеквизитов.Вставить("НаправлениеДеятельности", Объект.НаправлениеДеятельности);
			СтруктураРеквизитов.Вставить("Договор",                 Объект.Договор);
			СтруктураРеквизитов.Вставить("Подразделение",           Объект.Подразделение);
			СтруктураРеквизитов.Вставить("ДокументСсылка",          Объект.Ссылка);
			
			РеквизитыНераспределенногоПлатежа = РеквизитыНераспределенногоПлатежа(Объект.РасшифровкаПлатежа, СтруктураРеквизитов);
			Если РеквизитыНераспределенногоПлатежа.Количество() > 1 Тогда
				Форма.Элементы.ДекорацияЕстьРасхождения.Видимость = Истина;
			Иначе
				Форма.Элементы.ДекорацияЕстьРасхождения.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция определяет, является ли переданная хозяйственная операция операцией интеркампани.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция для проверки.
//
// Возвращаемое значение:
//	Булево - Истина, если является операцией интеркампани.
//
Функция ХозяйственнаяОперацияИнтеркампани(ХозяйственнаяОперация) Экспорт
	
	Если ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации") 
		ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию")
		ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию")
		ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Функция определяет, является ли переданная хозяйственная операция операцией с клиентом.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция для проверки.
//
// Возвращаемое значение:
//	Булево - Истина, если является операцией с клиентом.
//
Функция ХозяйственнаяОперацияСКлиентом(ХозяйственнаяОперация) Экспорт
	
	Если ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента") 
		ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Функция определяет, является ли переданная хозяйственная операция операцией с поставщиком.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция для проверки.
//
// Возвращаемое значение:
//	Булево - Истина, если является операцией с поставщиком.
//
Функция ХозяйственнаяОперацияСПоставщиком(ХозяйственнаяОперация) Экспорт
	
	Если ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаПоставщику") 
		ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика") 
		ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПеречислениеТаможне") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Функция определяет, является ли переданная хозяйственная операция операцией возврата денежных средств.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция для проверки.
//
// Возвращаемое значение:
//	Булево - Истина, если является операцией возврата денежных средств.
//
Функция ХозяйственнаяОперацияВозвратДенежныхСредств(ХозяйственнаяОперация) Экспорт
	
	Если ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации")
		ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию")
		ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика")
		ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Получение списка контрагентов по сделкам для отправки приглашений.
//
// Параметры:
//  Организация			 - СправочникСсылка - ссылка на организацию, от которой производится приглашение.
//  РежимЗаполнения		 - Строка - режим заполнения контрагентов: "ЗаполнитьПоПоставкам", "ЗаполнитьПоЗакупкам", "ЗаполнитьПоВсемСделкам".
//  НачалоПериода		 - Дата - начало периода заполнения.
//  СписокКонтрагентов	 - ТаблицаЗначений - список контрагентов:
//    * Ссылка - СправочникСсылка - контрагент.
//    * ЭлектроннаяПочта - Строка - адрес электронной почты.
//
Процедура ПолучитьКонтрагентовПоСделкам(Организация, РежимЗаполнения, НачалоПериода, СписокКонтрагентов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаполнитьПоПоставкам",   РежимЗаполнения = "ЗаполнитьПоПоставкам");
	Запрос.УстановитьПараметр("ЗаполнитьПоЗакупкам",    РежимЗаполнения = "ЗаполнитьПоЗакупкам");
	Запрос.УстановитьПараметр("ЗаполнитьПоВсемСделкам", РежимЗаполнения = "ЗаполнитьПоВсемСделкам");
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("Организация",   Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		КлючиАналитикиУчетаПоПартнерам.Контрагент КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентами.Обороты(&НачалоПериода, , , ) КАК РасчетыСКлиентамиОбороты
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
	|			ПО РасчетыСКлиентамиОбороты.АналитикаУчетаПоПартнерам = КлючиАналитикиУчетаПоПартнерам.Ссылка
	|	ГДЕ
	|		КлючиАналитикиУчетаПоПартнерам.Организация = &Организация
	|		И (&ЗаполнитьПоПоставкам
	|				ИЛИ &ЗаполнитьПоВсемСделкам)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		КлючиАналитикиУчетаПоПартнерам.Контрагент
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками.Обороты(&НачалоПериода, , , ) КАК РасчетыСПоставщикамиОбороты
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
	|			ПО РасчетыСПоставщикамиОбороты.АналитикаУчетаПоПартнерам = КлючиАналитикиУчетаПоПартнерам.Ссылка
	|	ГДЕ
	|		КлючиАналитикиУчетаПоПартнерам.Организация = &Организация
	|		И (&ЗаполнитьПоЗакупкам
	|				ИЛИ &ЗаполнитьПоВсемСделкам)) КАК Контрагенты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагенты.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
			НоваяСтрока = СписокКонтрагентов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
			ОбменСКонтрагентамиПереопределяемый.АдресЭлектроннойПочтыКонтрагента(
				Выборка.Ссылка, НоваяСтрока.ЭлектроннаяПочта);
			// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполнение штрихкодов для выгрузки.
//
// Параметры:
//  Организации	 - Массив - Список организация, для которых производится выгрузка.
//  РежимПоставщика - Булево - Выгружать только данные по продажам.
//  РежимПокупателя - Булево - Выгружать только данные по покупкам.
//  Штрихкоды	 - ТаблицаЗначений - данные по штрихкодам, 
//                 см. ТорговыеПредложения.ОбновитьПодсказкиТорговыеПредложения:
//    * Штрихкод - Строка - штрихкод товара.
//    * Наименование - Строка - Наименование товара
//    * РежимПоставщика - Булево - признак использования штрихкода в продажах.
//    * РежимПокупателя - Булево - признак использования штрихкода в закупках.
//
Процедура ЗаполнитьШтрихкодыДляВыгрузки(Знач Организации, Знач РежимПоставщика, Знач РежимПокупателя, Штрихкоды) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Организация КАК Организация,
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.Ссылка.Артикул КАК Артикул,
	|	Номенклатура.Ссылка.ВидНоменклатуры КАК ВидНоменклатуры,
	|	Номенклатура.Ссылка.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Номенклатура.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВтНоменклатура
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		КлючиАналитикиУчетаПоПартнерам.Организация КАК Организация,
	|		КлючиАналитикиУчетаНоменклатуры.Номенклатура КАК Ссылка,
	|		КлючиАналитикиУчетаНоменклатуры.Характеристика КАК Характеристика
	|	ИЗ
	|		РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&НачалоПериода, , , ) КАК ВыручкаИСебестоимостьПродаж
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиАналитикиУчетаНоменклатуры
	|			ПО ВыручкаИСебестоимостьПродаж.АналитикаУчетаНоменклатуры = КлючиАналитикиУчетаНоменклатуры.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
	|			ПО ВыручкаИСебестоимостьПродаж.АналитикаУчетаПоПартнерам = КлючиАналитикиУчетаПоПартнерам.Ссылка
	|	ГДЕ
	|		КлючиАналитикиУчетаПоПартнерам.Организация В(&Организации)
	|		И &РежимПоставщика
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Закупки.Организация,
	|		КлючиАналитикиУчетаНоменклатуры.Номенклатура,
	|		КлючиАналитикиУчетаНоменклатуры.Характеристика
	|	ИЗ
	|		РегистрНакопления.Закупки.Обороты(&НачалоПериода, , , ) КАК Закупки
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиАналитикиУчетаНоменклатуры
	|			ПО Закупки.АналитикаУчетаНоменклатуры = КлючиАналитикиУчетаНоменклатуры.Ссылка
	|	ГДЕ
	|		Закупки.Организация В(&Организации)
	|		И &РежимПокупателя) КАК Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10000
	|	ВтНоменклатура.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ВтНоменклатура.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ВтНоменклатура.Номенклатура.Наименование
	|		ИНАЧЕ ВтНоменклатура.Номенклатура.НаименованиеПолное
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ВтНоменклатура.Характеристика.Наименование ЕСТЬ NULL
	|				ИЛИ ВтНоменклатура.Характеристика.Наименование ПОДОБНО """"
	|			ТОГДА """"
	|		ИНАЧЕ "", "" + ВтНоменклатура.Характеристика.Наименование
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ВтНоменклатура.ЕдиницаИзмерения.Наименование ЕСТЬ NULL
	|				ИЛИ ВтНоменклатура.ЕдиницаИзмерения.Наименование ПОДОБНО """"
	|			ТОГДА """"
	|		ИНАЧЕ "" ("" + ВтНоменклатура.ЕдиницаИзмерения.Наименование + "")""
	|	КОНЕЦ КАК Наименование,
	|	ВтНоменклатура.Артикул КАК Артикул,
	|	ВтНоменклатура.ВидНоменклатуры.Наименование КАК ВидНоменклатуры,	
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	|	&РежимПоставщика КАК РежимПоставщика,
	|	&РежимПокупателя КАК РежимПокупателя
	|ИЗ
	|	ВтНоменклатура КАК ВтНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО (ШтрихкодыНоменклатуры.Номенклатура = ВтНоменклатура.Номенклатура)
	|			И (ШтрихкодыНоменклатуры.Характеристика = ВтНоменклатура.Характеристика)
	|			И (ШтрихкодыНоменклатуры.Упаковка = ВтНоменклатура.ЕдиницаИзмерения
	|				ИЛИ ШтрихкодыНоменклатуры.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
	|ГДЕ
	|	ПОДСТРОКА(ШтрихкодыНоменклатуры.Штрихкод, 1, 1) <> ""2""";
	
	Запрос.УстановитьПараметр("Организации",     Организации);
	Запрос.УстановитьПараметр("НачалоПериода", 	 НачалоДня(ДобавитьМесяц(ТекущаяДатаСеанса(), -6)));
	Запрос.УстановитьПараметр("РежимПоставщика", РежимПоставщика);
	Запрос.УстановитьПараметр("РежимПокупателя", РежимПокупателя);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Штрихкоды.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПоискОснованийИДокументовОплаты

// Создает структуру параметров поиска оснований оплаты и документов оплаты
// 
// Параметры:
// 	РежимПоиска - Число - соответствие коду режима поиска:
// 		1 - Поиск документов оплаты; 
// 		2 - Поиск оснований (объектов) платежа.
// 
// Возвращаемое значение:
// 	Структура - содержит:
// 	* РежимПоиска - Число - соответствие коду режима поиска:
// 		1 - Поиск документов оплаты; 
// 		2 - Поиск оснований (объектов) платежа.
// 	* Организации - СправочникСсылка.Организации, Массив Из СправочникСсылка.Организации -
// 	* Документы   - Массив Из ДокументСсылка - документы, по которым производится поиск платежей.
// 	* НаДату      - Дата - для среза найденных документов на дату
// 	* ТолькоАвансы - Булево - Если "Истина", будут возвращены только авансовые платежи
// 	* ОграничитьТипыДокументовОплаты - Булево - Если "Истина", платежные документы будут ограничены возможными типами
// 	                                                входящих и исходящих документов оплат.
// 	* ОграничитьТипыОснованийОплаты  - Булево - Если "Истина", основания платежа будут ограничены возможными типами
// 	                                                входящих и исходящих документов.
// 	* ПараметрыОтбораПоТаблицеДокументов - Структура - Для отбора по временной таблице с документами, где:
//  	** ИмяПоля - Строка - Имя поля, в котором содержится документ
//  	** ИмяТаблицыОтбора - Строка - имя временной таблицы, где содержится документ
//
Функция ИнициализироватьПараметрыПоискаОснованийИДокументовОплаты(РежимПоиска = 1) Экспорт
	
	ПараметрыПоиска = Новый Структура;
	
	ПараметрыПоиска.Вставить("РежимПоиска",  РежимПоиска);
	ПараметрыПоиска.Вставить("Организации",  Неопределено);
	ПараметрыПоиска.Вставить("Документы",    Новый Массив);
	ПараметрыПоиска.Вставить("НаДату",       Дата(1,1,1));
	ПараметрыПоиска.Вставить("ТолькоАвансы", Ложь);
	ПараметрыПоиска.Вставить("ОграничитьТипыДокументовОплаты", Ложь);
	ПараметрыПоиска.Вставить("ОграничитьТипыОснованийОплаты", Ложь);
	
	// Документы, по которым необходимо найти платежные документы
	ПараметрыОтбораПоТаблицеДокументов = Новый Структура;
	ПараметрыОтбораПоТаблицеДокументов.Вставить("ИмяПоля",          "");
	ПараметрыОтбораПоТаблицеДокументов.Вставить("ИмяТаблицыОтбора", "");
	
	ПараметрыПоиска.Вставить("ПараметрыОтбораПоТаблицеДокументов", ПараметрыОтбораПоТаблицеДокументов);
	
	Возврат ПараметрыПоиска;
	
КонецФункции

// Подготовить временную таблицу "РасчетыСКлиентами_ОснованияИДокументыОплаты"
// Создает временную таблицу с колонками:
// 	* Организация;
// 	* ДокументОплаты - платежный документ;
// 	* ОснованиеОплаты - оплачиваемый документ;
// 	* АналитикаУчетаПоПартнерам;
// 	* ОбъектРасчетов;
// 	* НаправлениеДеятельности;
// 	* Контрагент;
// 	* Договор;
// 	* СуммаОплаты;
// 	* СуммаОплатыУпр;
// 	* СуммаОплатыРегл.
// 
// Параметры:
// 	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - 
// 	ПараметрыПоиска         - см. ИнициализироватьПараметрыПоискаОснованийИДокументовОплаты
Процедура ПодготовитьВТ_РасчетыСКлиентами_ОснованияИДокументыОплаты(МенеджерВременныхТаблиц, ПараметрыПоиска) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация             КАК Организация,
	|	Расчеты.ДокументОплаты                                    КАК ДокументОплаты,
	|	Расчеты.ОснованиеОплаты                                   КАК ОснованиеОплаты,
	|	Расчеты.АналитикаУчетаПоПартнерам                         КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов                                    КАК ОбъектРасчетов,
	|	Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Расчеты.АналитикаУчетаПоПартнерам.Контрагент              КАК Контрагент,
	|	Расчеты.АналитикаУчетаПоПартнерам.Договор                 КАК Договор,
	|	СУММА(Расчеты.СуммаОплаты)                                КАК СуммаОплаты,
	|	СУММА(Расчеты.СуммаОплатыУпр)                             КАК СуммаОплатыУпр,
	|	СУММА(Расчеты.СуммаОплатыРегл)                            КАК СуммаОплатыРегл
	|ПОМЕСТИТЬ РасчетыСКлиентами_ОснованияИДокументыОплаты
	|ИЗ
	|	(ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Расчеты.ОбъектРасчетов            КАК ОбъектРасчетов,
	|		Расчеты.РасчетныйДокумент         КАК ДокументОплаты,
	|		Расчеты.ДокументРегистратор       КАК ОснованиеОплаты,
	|		Расчеты.Предоплата                КАК СуммаОплаты,
	|		Расчеты.ПредоплатаУпр             КАК СуммаОплатыУпр,
	|		Расчеты.ПредоплатаРегл            КАК СуммаОплатыРегл
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбораОснованийИДокументовОплаты КАК ТаблицаОтбораОснованийИДокументовОплаты
	|				ПО &РежимПоиска1_ДокументРегистратор_РежимПоиска2_РасчетныйДокумент
	|	ГДЕ
	|		Расчеты.ДокументРегистратор <> Расчеты.ОбъектРасчетов
	|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Расчеты.Период <= &ДатаОкончания
	|		И Расчеты.Предоплата <> 0
	|		И &НоваяАрхитектураВзаиморасчетов
	|		И Расчеты.ХозяйственнаяОперация <>
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам,
	|		Расчеты.ОбъектРасчетов,
	|		Расчеты.ДокументРегистратор,
	|		Расчеты.ОбъектРасчетов,
	|		Расчеты.Предоплата,
	|		Расчеты.ПредоплатаУпр,
	|		Расчеты.ПредоплатаРегл
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбораОснованийИДокументовОплаты КАК ТаблицаОтбораОснованийИДокументовОплаты
	|				ПО &РежимПоиска1_ОбъектРасчетов_РежимПоиска2_ДокументРегистратор
	|	ГДЕ
	|		Расчеты.ДокументРегистратор = Расчеты.РасчетныйДокумент
	|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И Расчеты.Период <= &ДатаОкончания
	|		И Расчеты.Предоплата <> 0
	|		И &НоваяАрхитектураВзаиморасчетов
	|		И Расчеты.ХозяйственнаяОперация <>
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам,
	|		Расчеты.ОбъектРасчетов,
	|		Расчеты.ДокументРегистратор,
	|		Расчеты.ОбъектРасчетов,
	|		Расчеты.Долг,
	|		Расчеты.ДолгУпр,
	|		Расчеты.ДолгРегл
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбораОснованийИДокументовОплаты КАК ТаблицаОтбораОснованийИДокументовОплаты
	|				ПО &РежимПоиска1_ОбъектРасчетов_РежимПоиска2_ДокументРегистратор
	|	ГДЕ
	|		Расчеты.РасчетныйДокумент <> Расчеты.ДокументРегистратор
	|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Расчеты.Период <= &ДатаОкончания
	|		И Расчеты.Долг <> 0
	|		И &НоваяАрхитектураВзаиморасчетов
	|		И НЕ &ТолькоАвансы
	|		И Расчеты.ХозяйственнаяОперация <>
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам,
	|		Расчеты.ОбъектРасчетов,
	|		Расчеты.ДокументРегистратор,
	|		Расчеты.РасчетныйДокумент,
	|		Расчеты.Долг,
	|		Расчеты.ДолгУпр,
	|		Расчеты.ДолгРегл
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбораОснованийИДокументовОплаты КАК ТаблицаОтбораОснованийИДокументовОплаты
	|				ПО &РежимПоиска1_РасчетныйДокумент_РежимПоиска2_ДокументРегистратор
	|	ГДЕ
	|		Расчеты.РасчетныйДокумент <> Расчеты.ОбъектРасчетов
	|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Расчеты.Период <= &ДатаОкончания
	|		И Расчеты.Долг <> 0
	|		И &НоваяАрхитектураВзаиморасчетов
	|		И НЕ &ТолькоАвансы
	|		И Расчеты.ХозяйственнаяОперация <>
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Расчеты.ЗаказКлиента              КАК ОбъектРасчетов,
	|		Расчеты.РасчетныйДокумент         КАК ДокументОплаты,
	|		Расчеты.Регистратор               КАК ОснованиеОплаты,
	|		Расчеты.Предоплата                КАК СуммаОплаты,
	|		Расчеты.ПредоплатаУпр             КАК СуммаОплатыУпр,
	|		Расчеты.ПредоплатаРегл            КАК СуммаОплатыРегл
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК Расчеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбораОснованийИДокументовОплаты КАК ТаблицаОтбораОснованийИДокументовОплаты
	|				ПО &РежимПоиска1_Регистратор_РежимПоиска2_РасчетныйДокумент
	|	ГДЕ
	|		Расчеты.Регистратор <> Расчеты.ЗаказКлиента
	|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И Расчеты.Период <= &ДатаОкончания
	|		И Расчеты.Предоплата <> 0
	|		И НЕ &НоваяАрхитектураВзаиморасчетов
	|		И Расчеты.ХозяйственнаяОперация <>
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам,
	|		Расчеты.ЗаказКлиента,
	|		Расчеты.Регистратор,
	|		Расчеты.ЗаказКлиента,
	|		Расчеты.Предоплата,
	|		Расчеты.ПредоплатаУпр,
	|		Расчеты.ПредоплатаРегл
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК Расчеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбораОснованийИДокументовОплаты КАК ТаблицаОтбораОснованийИДокументовОплаты
	|				ПО &РежимПоиска1_ЗаказКлиента_РежимПоиска2_Регистратор
	|	ГДЕ
	|		Расчеты.Регистратор = Расчеты.РасчетныйДокумент
	|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Расчеты.Период <= &ДатаОкончания
	|		И Расчеты.Предоплата <> 0
	|		И НЕ &НоваяАрхитектураВзаиморасчетов
	|		И Расчеты.ХозяйственнаяОперация <>
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам,
	|		Расчеты.ЗаказКлиента,
	|		Расчеты.Регистратор,
	|		Расчеты.ЗаказКлиента,
	|		Расчеты.Долг,
	|		Расчеты.ДолгУпр,
	|		Расчеты.ДолгРегл
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК Расчеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбораОснованийИДокументовОплаты КАК ТаблицаОтбораОснованийИДокументовОплаты
	|				ПО &РежимПоиска1_ЗаказКлиента_РежимПоиска2_Регистратор
	|	ГДЕ
	|		Расчеты.РасчетныйДокумент <> Расчеты.Регистратор
	|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И Расчеты.Период <= &ДатаОкончания
	|		И Расчеты.Долг <> 0
	|		И НЕ &НоваяАрхитектураВзаиморасчетов
	|		И НЕ &ТолькоАвансы
	|		И Расчеты.ХозяйственнаяОперация <>
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам,
	|		Расчеты.ЗаказКлиента,
	|		Расчеты.Регистратор,
	|		Расчеты.РасчетныйДокумент,
	|		Расчеты.Долг,
	|		Расчеты.ДолгУпр,
	|		Расчеты.ДолгРегл
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК Расчеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбораОснованийИДокументовОплаты КАК ТаблицаОтбораОснованийИДокументовОплаты
	|				ПО &РежимПоиска1_РасчетныйДокумент_РежимПоиска2_Регистратор
	|	ГДЕ
	|		Расчеты.РасчетныйДокумент <> Расчеты.ЗаказКлиента
	|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Расчеты.Период <= &ДатаОкончания
	|		И Расчеты.Долг <> 0
	|		И НЕ &НоваяАрхитектураВзаиморасчетов
	|		И НЕ &ТолькоАвансы
	|		И Расчеты.ХозяйственнаяОперация <>
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	
	|	) КАК Расчеты
	|
	|ГДЕ
	|	(НЕ &ВключитьОтборПоОрганизациям
	|			ИЛИ Расчеты.АналитикаУчетаПоПартнерам.Организация В (&Организации))
	|	И (НЕ &ОграничитьТипыДокументовОплаты
	|		ИЛИ ТИПЗНАЧЕНИЯ(Расчеты.ДокументОплаты) В (&мТиповДокументовОплатыВходящие))
	|	И (НЕ &ОграничитьТипыОснованийОплаты
	|		ИЛИ ТИПЗНАЧЕНИЯ(Расчеты.ОснованиеОплаты) В (&мТиповОснованийОплатыИсходящие))
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация,
	|	Расчеты.ДокументОплаты,
	|	Расчеты.ОснованиеОплаты,
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности,
	|	Расчеты.АналитикаУчетаПоПартнерам.Контрагент,
	|	Расчеты.АналитикаУчетаПоПартнерам.Договор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОплаты
	|
	|";
	
	ПостобработкаЗапроса_ПоискОснованийИДокументовОплаты(Запрос, ПараметрыПоиска);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Подготовить временную таблицу "РасчетыСПоставщиками_ОснованияИДокументыОплаты"
// Создает временную таблицу с колонками:
// 	* Организация;
// 	* ДокументОплаты - платежный документ;
// 	* ОснованиеОплаты - оплачиваемый документ;
// 	* АналитикаУчетаПоПартнерам;
// 	* ОбъектРасчетов;
// 	* НаправлениеДеятельности;
// 	* Контрагент;
// 	* Договор;
// 	* СуммаОплаты;
// 	* СуммаОплатыУпр;
// 	* СуммаОплатыРегл.
// 
// Параметры:
// 	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - 
// 	ПараметрыПоиска         - см. ИнициализироватьПараметрыПоискаОснованийИДокументовОплаты
Процедура ПодготовитьВТ_РасчетыСПоставщиками_ОснованияИДокументыОплаты(МенеджерВременныхТаблиц, ПараметрыПоиска) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация             КАК Организация,
	|	Расчеты.ДокументОплаты                                    КАК ДокументОплаты,
	|	Расчеты.ОснованиеОплаты                                   КАК ОснованиеОплаты,
	|	Расчеты.АналитикаУчетаПоПартнерам                         КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов                                    КАК ОбъектРасчетов,
	|	Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Расчеты.АналитикаУчетаПоПартнерам.Контрагент              КАК Контрагент,
	|	Расчеты.АналитикаУчетаПоПартнерам.Договор                 КАК Договор,
	|	СУММА(Расчеты.СуммаОплаты)                                КАК СуммаОплаты,
	|	СУММА(Расчеты.СуммаОплатыУпр)                             КАК СуммаОплатыУпр,
	|	СУММА(Расчеты.СуммаОплатыРегл)                            КАК СуммаОплатыРегл
	|ПОМЕСТИТЬ РасчетыСПоставщиками_ОснованияИДокументыОплаты
	|ИЗ
	|	(ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Расчеты.ОбъектРасчетов            КАК ОбъектРасчетов,
	|		Расчеты.РасчетныйДокумент         КАК ДокументОплаты,
	|		Расчеты.ДокументРегистратор       КАК ОснованиеОплаты,
	|		Расчеты.Предоплата                КАК СуммаОплаты,
	|		Расчеты.ПредоплатаУпр             КАК СуммаОплатыУпр,
	|		Расчеты.ПредоплатаРегл            КАК СуммаОплатыРегл
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбораОснованийИДокументовОплаты КАК ТаблицаОтбораОснованийИДокументовОплаты
	|				ПО &РежимПоиска1_ДокументРегистратор_РежимПоиска2_РасчетныйДокумент
	|	ГДЕ
	|		Расчеты.ДокументРегистратор <> Расчеты.ОбъектРасчетов
	|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Расчеты.Период <= &ДатаОкончания
	|		И Расчеты.Предоплата <> 0
	|		И &НоваяАрхитектураВзаиморасчетов
	|		И Расчеты.ХозяйственнаяОперация <>
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам,
	|		Расчеты.ОбъектРасчетов,
	|		Расчеты.ДокументРегистратор,
	|		Расчеты.ОбъектРасчетов,
	|		Расчеты.Предоплата,
	|		Расчеты.ПредоплатаУпр,
	|		Расчеты.ПредоплатаРегл
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбораОснованийИДокументовОплаты КАК ТаблицаОтбораОснованийИДокументовОплаты
	|				ПО &РежимПоиска1_ОбъектРасчетов_РежимПоиска2_ДокументРегистратор
	|	ГДЕ
	|		Расчеты.ДокументРегистратор = Расчеты.РасчетныйДокумент
	|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И Расчеты.Период <= &ДатаОкончания
	|		И Расчеты.Предоплата <> 0
	|		И &НоваяАрхитектураВзаиморасчетов
	|		И Расчеты.ХозяйственнаяОперация <>
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам,
	|		Расчеты.ОбъектРасчетов,
	|		Расчеты.ДокументРегистратор,
	|		Расчеты.ОбъектРасчетов,
	|		Расчеты.Долг,
	|		Расчеты.ДолгУпр,
	|		Расчеты.ДолгРегл
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбораОснованийИДокументовОплаты КАК ТаблицаОтбораОснованийИДокументовОплаты
	|				ПО &РежимПоиска1_ОбъектРасчетов_РежимПоиска2_ДокументРегистратор
	|	ГДЕ
	|		Расчеты.РасчетныйДокумент <> Расчеты.ДокументРегистратор
	|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Расчеты.Период <= &ДатаОкончания
	|		И Расчеты.Долг <> 0
	|		И &НоваяАрхитектураВзаиморасчетов
	|		И НЕ &ТолькоАвансы
	|		И Расчеты.ХозяйственнаяОперация <>
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам,
	|		Расчеты.ОбъектРасчетов,
	|		Расчеты.ДокументРегистратор,
	|		Расчеты.РасчетныйДокумент,
	|		Расчеты.Долг,
	|		Расчеты.ДолгУпр,
	|		Расчеты.ДолгРегл
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбораОснованийИДокументовОплаты КАК ТаблицаОтбораОснованийИДокументовОплаты
	|				ПО &РежимПоиска1_РасчетныйДокумент_РежимПоиска2_ДокументРегистратор
	|	ГДЕ
	|		Расчеты.РасчетныйДокумент <> Расчеты.ОбъектРасчетов
	|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Расчеты.Период <= &ДатаОкончания
	|		И Расчеты.Долг <> 0
	|		И &НоваяАрхитектураВзаиморасчетов
	|		И НЕ &ТолькоАвансы
	|		И Расчеты.ХозяйственнаяОперация <>
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Расчеты.ЗаказПоставщику           КАК ОбъектРасчетов,
	|		Расчеты.РасчетныйДокумент         КАК ДокументОплаты,
	|		Расчеты.Регистратор               КАК ОснованиеОплаты,
	|		Расчеты.Предоплата                КАК СуммаОплаты,
	|		Расчеты.ПредоплатаУпр             КАК СуммаОплатыУпр,
	|		Расчеты.ПредоплатаРегл            КАК СуммаОплатыРегл
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбораОснованийИДокументовОплаты КАК ТаблицаОтбораОснованийИДокументовОплаты
	|				ПО &РежимПоиска1_Регистратор_РежимПоиска2_РасчетныйДокумент
	|	ГДЕ
	|		Расчеты.Регистратор <> Расчеты.ЗаказПоставщику
	|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Расчеты.Период <= &ДатаОкончания
	|		И Расчеты.Предоплата <> 0
	|		И НЕ &НоваяАрхитектураВзаиморасчетов
	|		И Расчеты.ХозяйственнаяОперация <>
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам,
	|		Расчеты.ЗаказПоставщику,
	|		Расчеты.Регистратор,
	|		Расчеты.ЗаказПоставщику,
	|		Расчеты.Предоплата,
	|		Расчеты.ПредоплатаУпр,
	|		Расчеты.ПредоплатаРегл
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбораОснованийИДокументовОплаты КАК ТаблицаОтбораОснованийИДокументовОплаты
	|				ПО &РежимПоиска1_ЗаказПоставщику_РежимПоиска2_Регистратор
	|	ГДЕ
	|		Расчеты.Регистратор = Расчеты.РасчетныйДокумент
	|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И Расчеты.Период <= &ДатаОкончания
	|		И Расчеты.Предоплата <> 0
	|		И НЕ &НоваяАрхитектураВзаиморасчетов
	|		И Расчеты.ХозяйственнаяОперация <>
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам,
	|		Расчеты.ЗаказПоставщику,
	|		Расчеты.Регистратор,
	|		Расчеты.ЗаказПоставщику,
	|		Расчеты.Долг,
	|		Расчеты.ДолгУпр,
	|		Расчеты.ДолгРегл
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбораОснованийИДокументовОплаты КАК ТаблицаОтбораОснованийИДокументовОплаты
	|				ПО &РежимПоиска1_ЗаказПоставщику_РежимПоиска2_Регистратор
	|	ГДЕ
	|		Расчеты.РасчетныйДокумент <> Расчеты.Регистратор
	|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И Расчеты.Период <= &ДатаОкончания
	|		И Расчеты.Долг <> 0
	|		И НЕ &НоваяАрхитектураВзаиморасчетов
	|		И НЕ &ТолькоАвансы
	|		И Расчеты.ХозяйственнаяОперация <>
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам,
	|		Расчеты.ЗаказПоставщику,
	|		Расчеты.Регистратор,
	|		Расчеты.РасчетныйДокумент,
	|		Расчеты.Долг,
	|		Расчеты.ДолгУпр,
	|		Расчеты.ДолгРегл
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбораОснованийИДокументовОплаты КАК ТаблицаОтбораОснованийИДокументовОплаты
	|				ПО &РежимПоиска1_РасчетныйДокумент_РежимПоиска2_Регистратор
	|	ГДЕ
	|		Расчеты.РасчетныйДокумент <> Расчеты.ЗаказПоставщику
	|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И Расчеты.Период <= &ДатаОкончания
	|		И Расчеты.Долг <> 0
	|		И НЕ &НоваяАрхитектураВзаиморасчетов
	|		И НЕ &ТолькоАвансы
	|		И Расчеты.ХозяйственнаяОперация <>
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	
	|	) КАК Расчеты
	|
	|ГДЕ
	|	(НЕ &ВключитьОтборПоОрганизациям
	|			ИЛИ Расчеты.АналитикаУчетаПоПартнерам.Организация В (&Организации))
	|	И (НЕ &ОграничитьТипыДокументовОплаты
	|		ИЛИ ТИПЗНАЧЕНИЯ(Расчеты.ДокументОплаты) В (&мТиповДокументовОплатыИсходящие))
	|	И (НЕ &ОграничитьТипыОснованийОплаты
	|		ИЛИ ТИПЗНАЧЕНИЯ(Расчеты.ОснованиеОплаты) В (&мТиповОснованийОплатыВходящие))
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация,
	|	Расчеты.ДокументОплаты,
	|	Расчеты.ОснованиеОплаты,
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности,
	|	Расчеты.АналитикаУчетаПоПартнерам.Контрагент,
	|	Расчеты.АналитикаУчетаПоПартнерам.Договор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОплаты
	|
	|";
	
	ПостобработкаЗапроса_ПоискОснованийИДокументовОплаты(Запрос, ПараметрыПоиска);
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область АвансыПоДаннымВзаиморасчетов

// Создает структуру параметров для подготовки временных таблиц с расчетами
// 
// Параметры:
//  ИсходныеПараметры - Неопределено, Структура - произвольная структура с заполненными значениями
// 
// Возвращаемое значение:
// 	Структура - Описание:
//   * ДатаНачала                    - Дата -
//   * ДатаОкончания                 - Дата -
//   * Организации                   - Неопределено, СправочникСсылка.Организации, Массив из СправочникСсылка.Организации -
//   * РасчетныйДокумент             - Неопределено, ДокументСсылка - дополнительный фильтр по расчетному документу
//   * СоздатьПустуюТаблицу          - Булево - позволяет создать каркас временной таблицы без данных
//   * НоваяАрхитектураВзаиморасчетов - Булево - взаиморасчеты "онлайн"/"офлайн"
//   * ПоляИндексовВручную           - Массив из Строка - возможность переопределения полей индексов результата
//   * УчестьРезервированиеАвансов   - Булево - если "Истина", зачтенные авансы,
//                                     которые ранее были зарезервированы, не попадут в выборку.
//   * ПараметрыОтбораПоРасчетномуДокументу - Структура - Для отбора по временной таблице с расчетными документами, где:
//   	** ИмяПоля - Строка - Имя поля, в котором содержится документ
//   	** ИмяТаблицыОтбора - Строка - имя временной таблицы, где содержится документ
//
Функция ИнициализироватьПараметрыПодготовкиРасчетовАвансов(ИсходныеПараметры = Неопределено) Экспорт
	
	ПараметрыРасчетов = Новый Структура;
	
	ПустаяДата = '00010101';
	
	ПараметрыРасчетов.Вставить("ДатаНачала",           ПустаяДата);
	ПараметрыРасчетов.Вставить("ДатаОкончания",        ПустаяДата);
	ПараметрыРасчетов.Вставить("Организации",          Неопределено);
	ПараметрыРасчетов.Вставить("РасчетныйДокумент",    Неопределено);
	ПараметрыРасчетов.Вставить("СоздатьПустуюТаблицу", Ложь);
	ПараметрыРасчетов.Вставить("НоваяАрхитектураВзаиморасчетов",
		ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
	
	// Для отбора по временной таблице с расчетными документами
	ПараметрыОтбораПоРасчетномуДокументу = Новый Структура;
	ПараметрыОтбораПоРасчетномуДокументу.Вставить("ИмяПоля",          "РасчетныйДокумент");
	ПараметрыОтбораПоРасчетномуДокументу.Вставить("ИмяТаблицыОтбора", "");
	
	ПараметрыРасчетов.Вставить("ПараметрыОтбораПоРасчетномуДокументу", ПараметрыОтбораПоРасчетномуДокументу);
	
	ПараметрыРасчетов.Вставить("ПоляИндексовВручную",         Новый Массив);
	ПараметрыРасчетов.Вставить("УчестьРезервированиеАвансов", Ложь);
	
	
	ЗаполнитьСвойстваПараметров(ПараметрыРасчетов, ИсходныеПараметры);
	
	Возврат ПараметрыРасчетов;
	
КонецФункции

#Область АвансыПолученные

// Подготовить временную таблицу "РасчетыСКлиентами_Авансы"
// Создает временную таблицу с колонками:
// 	* РасчетныйДокумент;
// 	* ДокументРегистратор;
// 	* Организация;
// 	* АналитикаУчетаПоПартнерам;
// 	* ОбъектРасчетов;
// 	* НаправлениеДеятельности;
// 	* Контрагент;
// 	* Договор;
// 	* ДатаАванса;
// 	* ВалютаДокумента;
// 	* СуммаАвансаВал - сумма в валюте документа;
// 	* СуммаАванса;
// 	* СуммаАвансаУпр;
// 	* СуммаАвансаРегл.
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - 
//  ПараметрыРасчета        - см. ИнициализироватьПараметрыПодготовкиРасчетовАвансов
Процедура ПодготовитьВТ_РасчетыСКлиентами_Авансы(МенеджерВременныхТаблиц, ПараметрыРасчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УстановитьПараметрыЗапросаПодготовкиРасчетовАвансов(Запрос, ПараметрыРасчета);
	
	Запрос.Текст =
	"// Новая архитектура взаиморасчетов
	|ВЫБРАТЬ
	|	Расчеты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	Расчеты.ДокументРегистратор КАК ДокументРегистратор,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Расчеты.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	Расчеты.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	МИНИМУМ(ОтборАвансов.ДатаАванса) КАК ДатаАванса,
	|	МАКСИМУМ(ВЫБОР
	|				КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|					ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПриходныйКассовыйОрдер).Валюта
	|				КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|					ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПоступлениеБезналичныхДенежныхСредств).Валюта
	|				КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент
	|					ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПервичныйДокумент).Валюта
	|				ИНАЧЕ Расчеты.Валюта
	|		КОНЕЦ) КАК ВалютаДокумента,
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|					И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПриходныйКассовыйОрдер).Валюта = &ВалютаРеглУчета
	|				ТОГДА Расчеты.ПредоплатаРегл
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|					И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПоступлениеБезналичныхДенежныхСредств).Валюта = &ВалютаРеглУчета
	|				ТОГДА Расчеты.ПредоплатаРегл
	|			ИНАЧЕ
	|				Расчеты.Предоплата
	|		КОНЕЦ
	|		* ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаАвансаВал,
	|	СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаАванса,
	|	СУММА(Расчеты.ПредоплатаУпр * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаАвансаУпр,
	|	СУММА(Расчеты.ПредоплатаРегл * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаАвансаРегл
	|ПОМЕСТИТЬ РасчетыСКлиентами_Авансы
	|ИЗ
	|	(ВЫБРАТЬ
	|		Расчеты.РасчетныйДокумент,
	|		Расчеты.ДокументРегистратор,
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|		МИНИМУМ(Расчеты.ДатаВозникновения) КАК ДатаАванса
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|	ГДЕ
	|		&НоваяАрхитектураВзаиморасчетов
	|		И НЕ &СоздатьПустуюТаблицу
	|		И Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И (НЕ &ВключитьОтборПоОрганизациям
	|			ИЛИ Расчеты.АналитикаУчетаПоПартнерам.Организация В (&Организации))
	|		И (&ТекстОтборПоПараметрам)
	|		И Расчеты.ДатаВозникновения МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И Расчеты.Активность  = ИСТИНА
	|		
	|	СГРУППИРОВАТЬ ПО
	|		Расчеты.РасчетныйДокумент,
	|		Расчеты.ДокументРегистратор,
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) > 0
	|	
	|	) КАК ОтборАвансов
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|	ПО
	|		ОтборАвансов.ДокументРегистратор    = Расчеты.ДокументРегистратор
	|		И  ОтборАвансов.РасчетныйДокумент   = Расчеты.РасчетныйДокумент
	|		И  ОтборАвансов.Организация         = Расчеты.АналитикаУчетаПоПартнерам.Организация
	|		И  Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И  Расчеты.ДатаВозникновения МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И  Расчеты.Активность  = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.РасчетныйДокумент,
	|	Расчеты.ДокументРегистратор,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация,
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов
	|
	|ИМЕЮЩИЕ
	|	СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Старая архитектура взаиморасчетов
	|ВЫБРАТЬ
	|	Расчеты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	Расчеты.Регистратор КАК ДокументРегистратор,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ЗаказКлиента КАК ОбъектРасчетов,
	|	Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Расчеты.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	Расчеты.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(Расчеты.Период, ДЕНЬ)) КАК ДатаАванса,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|			ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПриходныйКассовыйОрдер).Валюта
	|		КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|			ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПоступлениеБезналичныхДенежныхСредств).Валюта
	|		КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент
	|			ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПервичныйДокумент).Валюта
	|		ИНАЧЕ Расчеты.Валюта
	|	КОНЕЦ) КАК ВалютаДокумента,
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|					И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПриходныйКассовыйОрдер).Валюта = &ВалютаРеглУчета
	|				ТОГДА Расчеты.ПредоплатаРегл
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|					И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПоступлениеБезналичныхДенежныхСредств).Валюта = &ВалютаРеглУчета
	|				ТОГДА Расчеты.ПредоплатаРегл
	|			ИНАЧЕ
	|				Расчеты.Предоплата
	|		КОНЕЦ
	|		* ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА 1
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК СуммаАвансаВал,
	|	СУММА(ВЫБОР 
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА Расчеты.Предоплата
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -Расчеты.Предоплата
	|		КОНЕЦ) КАК СуммаАванса,
	|	СУММА(ВЫБОР 
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА Расчеты.ПредоплатаУпр
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -Расчеты.ПредоплатаУпр
	|		КОНЕЦ) КАК СуммаАвансаУпр,
	|	СУММА(ВЫБОР 
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА Расчеты.ПредоплатаРегл
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -Расчеты.ПредоплатаРегл
	|		КОНЕЦ) КАК СуммаАвансаРегл
	|ИЗ
	|	(ВЫБРАТЬ
	|		Расчеты.РасчетныйДокумент КАК РасчетныйДокумент,
	|		Расчеты.Регистратор КАК ДокументРегистратор,
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация КАК Организация
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК Расчеты
	|	ГДЕ
	|		НЕ &НоваяАрхитектураВзаиморасчетов
	|		И НЕ &СоздатьПустуюТаблицу
	|		И Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И (НЕ &ВключитьОтборПоОрганизациям
	|			ИЛИ Расчеты.АналитикаУчетаПоПартнерам.Организация В (&Организации))
	|		И (&ТекстОтборПоПараметрам)
	|		И Расчеты.Активность  = ИСТИНА
	|		И ((Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И Расчеты.ПредоплатаРегл > 0)
	|			ИЛИ (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И Расчеты.ПредоплатаРегл < 0))
	|
	|	СГРУППИРОВАТЬ ПО
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация,
	|		Расчеты.Регистратор,
	|		Расчеты.РасчетныйДокумент
	|
	|	ИМЕЮЩИЕ
	|		СУММА(ВЫБОР 
	|				КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					ТОГДА Расчеты.ПредоплатаРегл
	|				КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА -Расчеты.ПредоплатаРегл
	|			КОНЕЦ) > 0
	|
	|	) КАК ОтборАвансов
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК Расчеты
	|	ПО
	|		ОтборАвансов.ДокументРегистратор    = Расчеты.Регистратор
	|		И  ОтборАвансов.РасчетныйДокумент   = Расчеты.РасчетныйДокумент
	|		И  ОтборАвансов.Организация         = Расчеты.АналитикаУчетаПоПартнерам.Организация
	|		И  Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И  Расчеты.Активность  = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.РасчетныйДокумент,
	|	Расчеты.Регистратор,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация,
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.ЗаказКлиента,
	|	Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности,
	|	Расчеты.АналитикаУчетаПоПартнерам.Контрагент
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР 
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА Расчеты.Предоплата
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -Расчеты.Предоплата
	|		КОНЕЦ) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныйДокумент
	|";
	
	УстановитьПоляИндексов(Запрос, ПараметрыРасчета, "РасчетыСКлиентами_Авансы");
	
	ПараметрыПутей = ИнициализироватьПараметрыДляОтбораАвансов_ПутиКПолямИТекстуЗамены();
	ОбработатьТекстЗапросаДляОтбораАвансовПоПараметрам(Запрос, ПараметрыРасчета, ПараметрыПутей);
	
	Запрос.Выполнить();
	
	
КонецПроцедуры

// Подготовить временную таблицу "РасчетыСКлиентами_ПогашенияАвансов"
// Создает временную таблицу с колонками:
// 	* РасчетныйДокумент;
// 	* Организация;
// 	* АналитикаУчетаПоПартнерам;
// 	* ОбъектРасчетов;
// 	* ДокументРегистратор;
// 	* Контрагент;
// 	* Договор;
// 	* НаправлениеДеятельности;
// 	* ИсхКонтрагент - контрагент, по которому возник аванс;
// 	* ИсхДоговор    - договор, по которому возник аванс;
// 	* ИсхНаправлениеДеятельности - направление, по которому возник аванс;
// 	* КорАналитикаУчетаПоПартнерам;
// 	* ИсходнаяАналитикаУчетаПоПартнерам - аналитика, по которой образовался аванс;
// 	* КорОбъектРасчетов;
// 	* ИсходныйОбъектРасчетов - объект расчетов, по которому образовался аванс;
// 	* ДатаАванса;
// 	* ДатаПогашения;
// 	* СобытиеЗнак - Если погашение произошло по причине зачета аванса, тогда СобытиеЗнак >= 0,
// 	                Если погашение произошло по причине возврата/списания задолженности, тогда СобытиеЗнак < 0;
// 	* ВидСобытия - событие, в связи с которым произошло погашение аванса. Возможные события:
// 	         - Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности,
// 	         - Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту,
// 	         - Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиенту;
// 	* ВалютаДокумента;
// 	* СуммаПогашения;
// 	* СуммаПогашенияВал - сумма в валюте документа;
// 	* СуммаПогашенияУпр;
// 	* СуммаПогашенияРегл.
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - 
//  ПараметрыРасчета        - см. ИнициализироватьПараметрыПодготовкиРасчетовАвансов
Процедура ПодготовитьВТ_РасчетыСКлиентами_ПогашенияАвансов(МенеджерВременныхТаблиц, ПараметрыРасчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УстановитьПараметрыЗапросаПодготовкиРасчетовАвансов(Запрос, ПараметрыРасчета);
	
	Запрос.Текст =
	"// Новая архитектура взаиморасчетов
	|ВЫБРАТЬ
	|	Расчеты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Расчеты.ДокументРегистратор КАК ДокументРегистратор,
	|	Расчеты.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	Расчеты.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Расчеты.АналитикаУчетаПоПартнерам.Контрагент КАК ИсхКонтрагент,
	|	Расчеты.АналитикаУчетаПоПартнерам.Договор КАК ИсхДоговор,
	|	Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК ИсхНаправлениеДеятельности,
	|	МАКСИМУМ(Расчеты.КорАналитикаУчетаПоПартнерам) КАК КорАналитикаУчетаПоПартнерам,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА Расчеты.КорАналитикаУчетаПоПартнерам <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)
	|			ТОГДА Расчеты.КорАналитикаУчетаПоПартнерам
	|		ИНАЧЕ
	|			Расчеты.АналитикаУчетаПоПартнерам
	|		КОНЕЦ) КАК ИсходнаяАналитикаУчетаПоПартнерам,
	|	МАКСИМУМ(Расчеты.КорОбъектРасчетов) КАК КорОбъектРасчетов,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НЕ Расчеты.КорОбъектРасчетов = &ПустойОбъектРасчетов
	|			ТОГДА Расчеты.КорОбъектРасчетов
	|		ИНАЧЕ
	|			Расчеты.ОбъектРасчетов
	|		КОНЕЦ) КАК ИсходныйОбъектРасчетов,
	|	МИНИМУМ(ОтборПогашенийАвансов.ДатаАванса) КАК ДатаАванса,
	|	МАКСИМУМ(ОтборПогашенийАвансов.ДатаПогашения) КАК ДатаПогашения,
	|	МАКСИМУМ(ОтборПогашенийАвансов.СобытиеЗнак) КАК СобытиеЗнак,
	|	МАКСИМУМ(
	|		ВЫБОР
	|			КОГДА Расчеты.ХозяйственнаяОперация
	|					= ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|			КОГДА ОтборПогашенийАвансов.СобытиеЗнак < 0
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|			ИНАЧЕ
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента)
	|		КОНЕЦ) КАК ВидСобытия,
	|	МАКСИМУМ(ВЫБОР
	|				КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|					ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПриходныйКассовыйОрдер).Валюта
	|				КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|					ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПоступлениеБезналичныхДенежныхСредств).Валюта
	|				КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент
	|					ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПервичныйДокумент).Валюта
	|				ИНАЧЕ Расчеты.Валюта
	|		КОНЕЦ) КАК ВалютаДокумента,
	|	СУММА(ВЫБОР
	|				КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|						И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПриходныйКассовыйОрдер).Валюта = &ВалютаРеглУчета
	|					ТОГДА Расчеты.ПредоплатаРегл
	|				КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|						И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПоступлениеБезналичныхДенежныхСредств).Валюта = &ВалютаРеглУчета
	|					ТОГДА Расчеты.ПредоплатаРегл
	|				ИНАЧЕ
	|					Расчеты.Предоплата
	|		КОНЕЦ
	|		* ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаПогашенияВал,
	|	СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаПогашения,
	|	СУММА(Расчеты.ПредоплатаУпр * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаПогашенияУпр,
	|	СУММА(Расчеты.ПредоплатаРегл * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаПогашенияРегл
	|ПОМЕСТИТЬ РасчетыСКлиентами_ПогашенияАвансов_Предварительная
	|ИЗ
	|	(ВЫБРАТЬ
	|		Расчеты.РасчетныйДокумент,
	|		Расчеты.ДокументРегистратор,
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|		МИНИМУМ(Расчеты.ДатаВозникновения) КАК ДатаАванса,
	|		МАКСИМУМ(Расчеты.Период) КАК ДатаПогашения,
	|		СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаПогашенияВал,
	|		СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 0
	|			КОГДА Расчеты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|				ТОГДА ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(Расчеты.ДокументРегистратор) В (&ТипыДокументовВозврата_ПолученныеАвансы)
	|						ТОГДА -Расчеты.Предоплата
	|					ИНАЧЕ
	|						0
	|				КОНЕЦ
	|			КОГДА Расчеты.ХозяйственнаяОперация В
	|					(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента),
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента))
	|				ТОГДА Расчеты.Предоплата
	|			ИНАЧЕ
	|				-Расчеты.Предоплата
	|		КОНЕЦ) КАК СобытиеЗнак
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|	ГДЕ
	|		&НоваяАрхитектураВзаиморасчетов
	|		И НЕ &СоздатьПустуюТаблицу
	|		И (НЕ &ВключитьОтборПоОрганизациям
	|			ИЛИ Расчеты.АналитикаУчетаПоПартнерам.Организация В (&Организации))
	|		И (&ТекстОтборПоПараметрам)
	|		И Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И Расчеты.Активность  = ИСТИНА
	|		И Расчеты.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента)
	|		
	|	СГРУППИРОВАТЬ ПО
	|		Расчеты.РасчетныйДокумент,
	|		Расчеты.ДокументРегистратор,
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) > 0
	|	
	|	) КАК ОтборПогашенийАвансов
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|	ПО
	|		ОтборПогашенийАвансов.ДокументРегистратор    = Расчеты.ДокументРегистратор
	|		И  ОтборПогашенийАвансов.РасчетныйДокумент   = Расчеты.РасчетныйДокумент
	|		И  ОтборПогашенийАвансов.Организация         = Расчеты.АналитикаУчетаПоПартнерам.Организация
	|		И  Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И  Расчеты.Активность  = ИСТИНА
	|		И  Расчеты.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента)
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.РасчетныйДокумент,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация,
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.ДокументРегистратор
	|
	|ИМЕЮЩИЕ
	|	СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Старая архитектура взаиморасчетов
	|ВЫБРАТЬ
	|	Расчеты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ЗаказКлиента КАК ОбъектРасчетов,
	|	Расчеты.Регистратор КАК ДокументРегистратор,
	|	Расчеты.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	Расчеты.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Расчеты.АналитикаУчетаПоПартнерам.Контрагент КАК ИсхКонтрагент,
	|	Расчеты.АналитикаУчетаПоПартнерам.Договор КАК ИсхДоговор,
	|	Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК ИсхНаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК КорАналитикаУчетаПоПартнерам,
	|	Расчеты.АналитикаУчетаПоПартнерам КАК ИсходнаяАналитикаУчетаПоПартнерам,
	|	&ПустойОбъектРасчетов КАК КорОбъектРасчетов,
	|	Расчеты.ЗаказКлиента КАК ИсходныйОбъектРасчетов,
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(ЕСТЬNULL(ПоступлениеДС.ДатаПроведенияБанком, ДанныеПервичныхДокументов.ДатаРегистратора), ДЕНЬ)) КАК ДатаАванса,
	|	МАКСИМУМ(ОтборПогашенийАвансов.ДатаПогашения) КАК ДатаПогашения,
	|	МАКСИМУМ(ОтборПогашенийАвансов.СобытиеЗнак) КАК СобытиеЗнак,
	|	МАКСИМУМ(
	|		ВЫБОР
	|			КОГДА Расчеты.ХозяйственнаяОперация
	|					= ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|			КОГДА Расчеты.ХозяйственнаяОперация
	|					= ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента)
	|			КОГДА ОтборПогашенийАвансов.СобытиеЗнак < 0
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|			ИНАЧЕ
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента)
	|		КОНЕЦ) КАК ВидСобытия,
	|	МАКСИМУМ(ВЫБОР
	|				КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|					ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПриходныйКассовыйОрдер).Валюта
	|				КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|					ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПоступлениеБезналичныхДенежныхСредств).Валюта
	|				КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент
	|					ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПервичныйДокумент).Валюта
	|				ИНАЧЕ Расчеты.Валюта
	|		КОНЕЦ) КАК ВалютаДокумента,
	|	СУММА(ВЫБОР
	|				КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|						И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПриходныйКассовыйОрдер).Валюта = &ВалютаРеглУчета
	|					ТОГДА Расчеты.ПредоплатаРегл
	|				КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|						И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПоступлениеБезналичныхДенежныхСредств).Валюта = &ВалютаРеглУчета
	|					ТОГДА Расчеты.ПредоплатаРегл
	|				ИНАЧЕ
	|					Расчеты.Предоплата
	|		КОНЕЦ
	|		* ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК СуммаПогашенияВал,
	|	СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК СуммаПогашения,
	|	СУММА(Расчеты.ПредоплатаУпр * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК СуммаПогашенияУпр,
	|	СУММА(Расчеты.ПредоплатаРегл * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК СуммаПогашенияРегл
	|ИЗ
	|	(ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|		Расчеты.Регистратор КАК ДокументРегистратор,
	|		Расчеты.РасчетныйДокумент КАК РасчетныйДокумент,
	|		Расчеты.Период КАК ДатаПогашения,
	|		СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					И Расчеты.ПредоплатаРегл > 0
	|				ТОГДА Расчеты.ПредоплатаРегл
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					И Расчеты.ПредоплатаРегл < 0
	|				ТОГДА Расчеты.ПредоплатаРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СобытиеЗнак,
	|		СУММА(Расчеты.ПредоплатаРегл * ВЫБОР
	|				КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА 1
	|				ИНАЧЕ -1
	|			КОНЕЦ) КАК СуммаЗачета
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК Расчеты
	|	ГДЕ
	|		НЕ &НоваяАрхитектураВзаиморасчетов
	|		И НЕ &СоздатьПустуюТаблицу
	|		И (НЕ &ВключитьОтборПоОрганизациям
	|			ИЛИ Расчеты.АналитикаУчетаПоПартнерам.Организация В (&Организации))
	|		И (&ТекстОтборПоПараметрам)
	|		И Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И Расчеты.Активность  = ИСТИНА
	|
	|	СГРУППИРОВАТЬ ПО
	|		Расчеты.РасчетныйДокумент,
	|		Расчеты.Регистратор,
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация,
	|		Расчеты.Период
	|
	|	ИМЕЮЩИЕ
	|		СУММА(Расчеты.ПредоплатаРегл * ВЫБОР
	|				КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА 1
	|				ИНАЧЕ -1
	|			КОНЕЦ) > 0
	|	) КАК ОтборПогашенийАвансов
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК Расчеты
	|	ПО
	|		ОтборПогашенийАвансов.ДокументРегистратор    = Расчеты.Регистратор
	|		И  ОтборПогашенийАвансов.РасчетныйДокумент   = Расчеты.РасчетныйДокумент
	|		И  ОтборПогашенийАвансов.Организация         = Расчеты.АналитикаУчетаПоПартнерам.Организация
	|		И  Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И  Расчеты.Активность  = ИСТИНА
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеБезналичныхДенежныхСредств КАК ПоступлениеДС
	|	ПО
	|		ОтборПогашенийАвансов.РасчетныйДокумент = ПоступлениеДС.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|	ПО
	|		ОтборПогашенийАвансов.РасчетныйДокумент = ДанныеПервичныхДокументов.Документ
	|		И ОтборПогашенийАвансов.Организация = ДанныеПервичныхДокументов.Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.РасчетныйДокумент,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация,
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.ЗаказКлиента,
	|	Расчеты.Регистратор
	|
	|ИМЕЮЩИЕ
	|	СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|			ИНАЧЕ -1
	|		КОНЕЦ) > 0
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Погашения.РасчетныйДокумент КАК РасчетныйДокумент,
	|	Погашения.Организация КАК Организация,
	|	Погашения.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Погашения.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Погашения.ДокументРегистратор КАК ДокументРегистратор,
	|	Погашения.Контрагент КАК Контрагент,
	|	Погашения.Договор КАК Договор,
	|	Погашения.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Погашения.ИсхКонтрагент КАК ИсхКонтрагент,
	|	Погашения.ИсхДоговор КАК ИсхДоговор,
	|	Погашения.ИсхНаправлениеДеятельности КАК ИсхНаправлениеДеятельности,
	|	Погашения.КорАналитикаУчетаПоПартнерам КАК КорАналитикаУчетаПоПартнерам,
	|	Погашения.ИсходнаяАналитикаУчетаПоПартнерам КАК ИсходнаяАналитикаУчетаПоПартнерам,
	|	Погашения.КорОбъектРасчетов КАК КорОбъектРасчетов,
	|	Погашения.ИсходныйОбъектРасчетов КАК ИсходныйОбъектРасчетов,
	|	Погашения.ДатаАванса КАК ДатаАванса,
	|	Погашения.ДатаПогашения КАК ДатаПогашения,
	|	Погашения.СобытиеЗнак КАК СобытиеЗнак,
	|	Погашения.ВидСобытия КАК ВидСобытия,
	|	Погашения.ВалютаДокумента КАК ВалютаДокумента,
	|	Погашения.СуммаПогашения КАК СуммаПогашения,
	|	Погашения.СуммаПогашенияВал КАК СуммаПогашенияВал,
	|	Погашения.СуммаПогашенияУпр КАК СуммаПогашенияУпр,
	|	Погашения.СуммаПогашенияРегл КАК СуммаПогашенияРегл
	|ПОМЕСТИТЬ РасчетыСКлиентами_ПогашенияАвансов
	|ИЗ
	|	РасчетыСКлиентами_ПогашенияАвансов_Предварительная КАК Погашения
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		// Соединяемся с регистром, а не с готовой временной таблицой в связи с тем, чтобы учесть резервирования,
	|		// которые были вне периода зачета
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Резервирование
	|	ПО
	|		&НоваяАрхитектураВзаиморасчетов
	|		И &УчестьРезервированиеАвансов
	|		И Погашения.ДокументРегистратор    = Резервирование.ДокументРегистратор
	|		И Погашения.РасчетныйДокумент      = Резервирование.РасчетныйДокумент
	|		И Погашения.ИсходныйОбъектРасчетов = Резервирование.ОбъектРасчетов
	|		И Резервирование.Период            <= &ДатаОкончания
	|		И Погашения.Организация            = Резервирование.АналитикаУчетаПоПартнерам.Организация
	|		И Резервирование.ВидДвижения       = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Резервирование.ХозяйственнаяОперация
	|			= ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента)
	|ГДЕ
	|	Резервирование.РасчетныйДокумент ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РезервированиеПриходы.РасчетныйДокумент КАК РасчетныйДокумент,
	|	РезервированиеПриходы.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	РезервированиеПриходы.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РезервированиеПриходы.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РезервированиеПриходы.ДокументРегистратор КАК ДокументРегистратор,
	|	РезервированиеПриходы.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	РезервированиеПриходы.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	РезервированиеПриходы.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	МАКСИМУМ(РезервированиеРасходы.АналитикаУчетаПоПартнерам.Контрагент) КАК ИсхКонтрагент,
	|	МАКСИМУМ(РезервированиеРасходы.АналитикаУчетаПоПартнерам.Договор) КАК ИсхДоговор,
	|	МАКСИМУМ(РезервированиеРасходы.АналитикаУчетаПоПартнерам.НаправлениеДеятельности) КАК ИсхНаправлениеДеятельности,
	|	МАКСИМУМ(РезервированиеРасходы.КорАналитикаУчетаПоПартнерам) КАК КорАналитикаУчетаПоПартнерам,
	|	МАКСИМУМ(РезервированиеРасходы.АналитикаУчетаПоПартнерам) КАК ИсходнаяАналитикаУчетаПоПартнерам,
	|	МАКСИМУМ(РезервированиеРасходы.КорОбъектРасчетов) КАК КорОбъектРасчетов,
	|	МАКСИМУМ(РезервированиеРасходы.ОбъектРасчетов) КАК ИсходныйОбъектРасчетов, // объект, с которого зарезервировались средства
	|	МИНИМУМ(РезервированиеРасходы.ДатаВозникновения) КАК ДатаАванса,
	|	МАКСИМУМ(РезервированиеРасходы.Период) КАК ДатаПогашения,
	|	СУММА(РезервированиеПриходы.СуммаРезервированияВал) КАК СобытиеЗнак,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента) КАК ВидСобытия,
	|	МАКСИМУМ(РезервированиеПриходы.ВалютаДокумента) КАК ВалютаДокумента,
	|	СУММА(РезервированиеПриходы.СуммаРезервирования) КАК СуммаПогашения,
	|	СУММА(РезервированиеПриходы.СуммаРезервированияВал) КАК СуммаПогашенияВал,
	|	СУММА(РезервированиеПриходы.СуммаРезервированияУпр) КАК СуммаПогашенияУпр,
	|	СУММА(РезервированиеПриходы.СуммаРезервированияРегл) КАК СуммаПогашенияРегл
	|ИЗ
	|	(ВЫБРАТЬ
	|		Расчеты.РасчетныйДокумент,
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|		Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Расчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|		Расчеты.ДокументРегистратор КАК ДокументРегистратор,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|					ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПриходныйКассовыйОрдер).Валюта
	|				КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|					ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент
	|									КАК Документ.ПоступлениеБезналичныхДенежныхСредств).Валюта
	|				КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПервичныйДокумент
	|					ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПервичныйДокумент).Валюта
	|				ИНАЧЕ Расчеты.Валюта
	|		КОНЕЦ) КАК ВалютаДокумента,
	|		СУММА(ВЫБОР
	|				КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|						И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент
	|									КАК Документ.ПриходныйКассовыйОрдер).Валюта = &ВалютаРеглУчета
	|					ТОГДА Расчеты.ПредоплатаРегл
	|				КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|						И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент
	|									КАК Документ.ПоступлениеБезналичныхДенежныхСредств).Валюта = &ВалютаРеглУчета
	|					ТОГДА Расчеты.ПредоплатаРегл
	|				ИНАЧЕ
	|					Расчеты.Предоплата
	|		КОНЕЦ) КАК СуммаРезервированияВал,
	|		СУММА(Расчеты.Предоплата) КАК СуммаРезервирования,
	|		СУММА(Расчеты.ПредоплатаУпр) КАК СуммаРезервированияУпр,
	|		СУММА(Расчеты.ПредоплатаРегл) КАК СуммаРезервированияРегл
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК Расчеты
	|	ГДЕ
	|		&НоваяАрхитектураВзаиморасчетов
	|		И &УчестьРезервированиеАвансов
	|		И НЕ &СоздатьПустуюТаблицу
	|		И (НЕ &ВключитьОтборПоОрганизациям
	|			ИЛИ Расчеты.АналитикаУчетаПоПартнерам.Организация В (&Организации))
	|		И (&ТекстОтборПоПараметрам)
	|		И Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И Расчеты.Активность  = ИСТИНА
	|		И Расчеты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента)
	|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И Расчеты.Предоплата > 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Расчеты.РасчетныйДокумент,
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация,
	|		Расчеты.АналитикаУчетаПоПартнерам,
	|		Расчеты.ОбъектРасчетов,
	|		Расчеты.ДокументРегистратор
	|
	|	) КАК РезервированиеПриходы
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		// В расходах содержатся данные по авансу, с которого зарезервировались средства
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РезервированиеРасходы
	|	ПО
	|		РезервированиеПриходы.ДокументРегистратор    = РезервированиеРасходы.ДокументРегистратор
	|		И  РезервированиеПриходы.РасчетныйДокумент   = РезервированиеРасходы.РасчетныйДокумент
	|		И  РезервированиеПриходы.Организация         = РезервированиеРасходы.АналитикаУчетаПоПартнерам.Организация
	|		И  РезервированиеРасходы.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И  РезервированиеРасходы.Активность  = ИСТИНА
	|		И  РезервированиеРасходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И  РезервированиеРасходы.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента)
	|
	|СГРУППИРОВАТЬ ПО
	|	РезервированиеПриходы.РасчетныйДокумент,
	|	РезервированиеПриходы.АналитикаУчетаПоПартнерам.Организация,
	|	РезервированиеПриходы.АналитикаУчетаПоПартнерам,
	|	РезервированиеПриходы.ОбъектРасчетов,
	|	РезервированиеПриходы.ДокументРегистратор
	|
	|ИМЕЮЩИЕ
	|	СУММА(РезервированиеПриходы.СуммаРезервирования) > 0
	|
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныйДокумент
	|;
	|
	|УНИЧТОЖИТЬ РасчетыСКлиентами_ПогашенияАвансов_Предварительная
	|
	|";
	
	УстановитьПоляИндексов(Запрос, ПараметрыРасчета, "РасчетыСКлиентами_ПогашенияАвансов");
	
	ПараметрыПутей = ИнициализироватьПараметрыДляОтбораАвансов_ПутиКПолямИТекстуЗамены();
	ОбработатьТекстЗапросаДляОтбораАвансовПоПараметрам(Запрос, ПараметрыРасчета, ПараметрыПутей);
	
	Запрос.Выполнить();
	
	
КонецПроцедуры

// Подготовить временную таблицу "ПолученныеАвансыВРазрезеПогашенийИОстатков"
// Создает временную таблицу с колонками:
// * Организация;
// * НаправлениеДеятельности;
// * Контрагент;
// * Договор;
// * ИсхНаправлениеДеятельности - направление, по которому возник аванс;
// * ИсхКонтрагент - контрагент, по которому возник аванс;
// * ИсхДоговор    - договор, по которому возник аванс;
// * РасчетныйДокумент;
// * ИсходнаяАналитикаУчетаПоПартнерам - аналитика, по которой образовался аванс;
// * ИсходныйОбъектРасчетов - объект расчетов, по которому образовался аванс;
// * ДатаАванса;
// * ДатаПогашения - если пустая, значит это остаток;
// * ВалютаДокумента;
// * ДокументРегистратор;
// * СуммаВал - сумма в валюте документа;
// * СуммаУпр;
// * СуммаРегл;
// * Сумма.
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - 
//  ПараметрыРасчета        - см. ИнициализироватьПараметрыПодготовкиРасчетовАвансов
Процедура ПодготовитьВТ_ПолученныеАвансыВРазрезеПогашенийИОстатков(МенеджерВременныхТаблиц, ПараметрыРасчета) Экспорт
	
	ПараметрыРасчетаПоступленийПогашений = ИнициализироватьПараметрыПодготовкиРасчетовАвансов(ПараметрыРасчета);
	ПараметрыРасчетаПоступленийПогашений.ПоляИндексовВручную.Очистить();
	
	Если НЕ РасчетСебестоимостиПрикладныеАлгоритмы.ВременнаяТаблицаСуществует(МенеджерВременныхТаблиц,
		"РасчетыСКлиентами_Авансы") Тогда
		ПодготовитьВТ_РасчетыСКлиентами_Авансы(
			МенеджерВременныхТаблиц,
			ПараметрыРасчетаПоступленийПогашений);
	КонецЕсли;
	
	Если НЕ РасчетСебестоимостиПрикладныеАлгоритмы.ВременнаяТаблицаСуществует(МенеджерВременныхТаблиц,
		"РасчетыСКлиентами_ПогашенияАвансов") Тогда
		ПодготовитьВТ_РасчетыСКлиентами_ПогашенияАвансов(
			МенеджерВременныхТаблиц,
			ПараметрыРасчетаПоступленийПогашений);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УстановитьПараметрыЗапросаПодготовкиРасчетовАвансов(Запрос, ПараметрыРасчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеАвансов.Организация КАК Организация,
	|	ДанныеАвансов.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ДанныеАвансов.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ДанныеАвансов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДанныеАвансов.ДатаАванса КАК ДатаАванса,
	|	ДанныеАвансов.ИсходнаяАналитикаУчетаПоПартнерам КАК ИсходнаяАналитикаУчетаПоПартнерам,
	|	ДанныеАвансов.ИсходныйОбъектРасчетов КАК ИсходныйОбъектРасчетов,
	|	ДанныеАвансов.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеАвансов.Контрагент КАК Контрагент,
	|	ДанныеАвансов.Договор КАК Договор,
	|	ДанныеАвансов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеАвансов.ИсхКонтрагент КАК ИсхКонтрагент,
	|	ДанныеАвансов.ИсхДоговор КАК ИсхДоговор,
	|	ДанныеАвансов.ИсхНаправлениеДеятельности КАК ИсхНаправлениеДеятельности
	|ПОМЕСТИТЬ ДанныеАвансовПолученных
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПоступленияАвансов.Организация КАК Организация,
	|		ПоступленияАвансов.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		ПоступленияАвансов.ОбъектРасчетов КАК ОбъектРасчетов,
	|		ПоступленияАвансов.АналитикаУчетаПоПартнерам КАК ИсходнаяАналитикаУчетаПоПартнерам,
	|		ПоступленияАвансов.ОбъектРасчетов КАК ИсходныйОбъектРасчетов,
	|		ПоступленияАвансов.РасчетныйДокумент КАК РасчетныйДокумент,
	|		ПоступленияАвансов.ДатаАванса КАК ДатаАванса,
	|		ПоступленияАвансов.ВалютаДокумента КАК ВалютаДокумента,
	|		ПоступленияАвансов.Контрагент КАК Контрагент,
	|		ПоступленияАвансов.Договор КАК Договор,
	|		ПоступленияАвансов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		ПоступленияАвансов.Контрагент КАК ИсхКонтрагент,
	|		ПоступленияАвансов.Договор КАК ИсхДоговор,
	|		ПоступленияАвансов.НаправлениеДеятельности КАК ИсхНаправлениеДеятельности
	|	ИЗ
	|		РасчетыСКлиентами_Авансы КАК ПоступленияАвансов
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПогашенияАвансов.Организация КАК Организация,
	|		ПогашенияАвансов.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		ПогашенияАвансов.ОбъектРасчетов КАК ОбъектРасчетов,
	|		ПогашенияАвансов.ИсходнаяАналитикаУчетаПоПартнерам КАК ИсходнаяАналитикаУчетаПоПартнерам,
	|		ПогашенияАвансов.ИсходныйОбъектРасчетов КАК ИсходныйОбъектРасчетов,
	|		ПогашенияАвансов.РасчетныйДокумент КАК РасчетныйДокумент,
	|		ПогашенияАвансов.ДатаАванса КАК ДатаАванса,
	|		ПогашенияАвансов.ВалютаДокумента КАК ВалютаДокумента,
	|		ПогашенияАвансов.Контрагент КАК Контрагент,
	|		ПогашенияАвансов.Договор КАК Договор,
	|		ПогашенияАвансов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		ПогашенияАвансов.ИсхКонтрагент КАК ИсхКонтрагент,
	|		ПогашенияАвансов.ИсхДоговор КАК ИсхДоговор,
	|		ПогашенияАвансов.ИсхНаправлениеДеятельности КАК ИсхНаправлениеДеятельности
	|	ИЗ
	|		РасчетыСКлиентами_ПогашенияАвансов КАК ПогашенияАвансов
	|
	|	) КАК ДанныеАвансов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	ОбъектРасчетов,
	|	РасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Авансы.Организация                       КАК Организация,
	|	Авансы.НаправлениеДеятельности           КАК НаправлениеДеятельности,
	|	Авансы.Контрагент                        КАК Контрагент,
	|	Авансы.Договор                           КАК Договор,
	|	Авансы.ИсхНаправлениеДеятельности        КАК ИсхНаправлениеДеятельности,
	|	Авансы.ИсхКонтрагент                     КАК ИсхКонтрагент,
	|	Авансы.ИсхДоговор                        КАК ИсхДоговор,
	|	Авансы.РасчетныйДокумент                 КАК РасчетныйДокумент,
	|	Авансы.ИсходнаяАналитикаУчетаПоПартнерам КАК ИсходнаяАналитикаУчетаПоПартнерам,
	|	Авансы.ИсходныйОбъектРасчетов            КАК ИсходныйОбъектРасчетов,
	|	Авансы.ДатаАванса                        КАК ДатаАванса,
	|	Авансы.ДатаПогашения                     КАК ДатаПогашения,
	|	Авансы.ВалютаДокумента                   КАК ВалютаДокумента,
	|	Авансы.ДокументРегистратор               КАК ДокументРегистратор,
	|	Авансы.СуммаВал                          КАК СуммаВал,
	|	Авансы.СуммаУпр                          КАК СуммаУпр,
	|	Авансы.СуммаРегл                         КАК СуммаРегл,
	|	Авансы.Сумма                             КАК Сумма
	|ПОМЕСТИТЬ ПолученныеАвансыВРазрезеПогашенийИОстатков
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПогашенияАвансов.Организация КАК Организация,
	|		ПогашенияАвансов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		ПогашенияАвансов.Контрагент КАК Контрагент,
	|		ПогашенияАвансов.Договор КАК Договор,
	|		ПогашенияАвансов.ИсхНаправлениеДеятельности КАК ИсхНаправлениеДеятельности,
	|		ПогашенияАвансов.ИсхКонтрагент КАК ИсхКонтрагент,
	|		ПогашенияАвансов.ИсхДоговор КАК ИсхДоговор,
	|		ПогашенияАвансов.РасчетныйДокумент КАК РасчетныйДокумент,
	|		ПогашенияАвансов.ИсходнаяАналитикаУчетаПоПартнерам КАК ИсходнаяАналитикаУчетаПоПартнерам,
	|		ПогашенияАвансов.ИсходныйОбъектРасчетов КАК ИсходныйОбъектРасчетов,
	|		ПогашенияАвансов.ДатаАванса КАК ДатаАванса,
	|		ПогашенияАвансов.ДатаПогашения КАК ДатаПогашения,
	|		МАКСИМУМ(ПогашенияАвансов.ВалютаДокумента) КАК ВалютаДокумента,
	|		ПогашенияАвансов.ДокументРегистратор КАК ДокументРегистратор,
	|		СУММА(ПогашенияАвансов.СуммаПогашенияВал)  КАК СуммаВал,
	|		СУММА(ПогашенияАвансов.СуммаПогашенияУпр)  КАК СуммаУпр,
	|		СУММА(ПогашенияАвансов.СуммаПогашенияРегл) КАК СуммаРегл,
	|		СУММА(ПогашенияАвансов.СуммаПогашения)     КАК Сумма
	|	ИЗ
	|		РасчетыСКлиентами_ПогашенияАвансов КАК ПогашенияАвансов
	|
	|	СГРУППИРОВАТЬ ПО
	|		ПогашенияАвансов.Организация,
	|		ПогашенияАвансов.НаправлениеДеятельности,
	|		ПогашенияАвансов.Контрагент,
	|		ПогашенияАвансов.Договор,
	|		ПогашенияАвансов.ИсхНаправлениеДеятельности,
	|		ПогашенияАвансов.ИсхКонтрагент,
	|		ПогашенияАвансов.ИсхДоговор,
	|		ПогашенияАвансов.РасчетныйДокумент,
	|		ПогашенияАвансов.ДокументРегистратор,
	|		ПогашенияАвансов.ДатаАванса,
	|		ПогашенияАвансов.ДатаПогашения,
	|		ПогашенияАвансов.ИсходнаяАналитикаУчетаПоПартнерам,
	|		ПогашенияАвансов.ИсходныйОбъектРасчетов
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеАвансов.Организация,
	|		ДанныеАвансов.НаправлениеДеятельности,
	|		ДанныеАвансов.Контрагент,
	|		ДанныеАвансов.Договор,
	|		ДанныеАвансов.ИсхНаправлениеДеятельности,
	|		ДанныеАвансов.ИсхКонтрагент,
	|		ДанныеАвансов.ИсхДоговор,
	|		ДанныеАвансов.РасчетныйДокумент,
	|		ДанныеАвансов.ИсходнаяАналитикаУчетаПоПартнерам,
	|		ДанныеАвансов.ИсходныйОбъектРасчетов,
	|		ДанныеАвансов.ДатаАванса,
	|		ДАТАВРЕМЯ(1,1,1) КАК ДатаПогашения,
	|		МАКСИМУМ(ДанныеАвансов.ВалютаДокумента) КАК ВалютаДокумента,
	|		НЕОПРЕДЕЛЕНО КАК ДокументРегистратор,
	|		СУММА(ВЫБОР
	|			КОГДА ОстаткиПоАвансам.РасчетныйДокумент ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|					И ВЫРАЗИТЬ(ОстаткиПоАвансам.РасчетныйДокумент КАК Документ.ПриходныйКассовыйОрдер).Валюта = &ВалютаРеглУчета
	|				ТОГДА ОстаткиПоАвансам.ПредоплатаРеглОстаток
	|			КОГДА ОстаткиПоАвансам.РасчетныйДокумент ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|					И ВЫРАЗИТЬ(ОстаткиПоАвансам.РасчетныйДокумент КАК Документ.ПоступлениеБезналичныхДенежныхСредств).Валюта = &ВалютаРеглУчета
	|				ТОГДА ОстаткиПоАвансам.ПредоплатаРеглОстаток
	|			ИНАЧЕ ОстаткиПоАвансам.ПредоплатаОстаток
	|		КОНЕЦ)                                        КАК СуммаВал,
	|		СУММА(ОстаткиПоАвансам.ПредоплатаУпрОстаток)  КАК СуммаУпр,
	|		СУММА(ОстаткиПоАвансам.ПредоплатаРеглОстаток) КАК СуммаРегл,
	|		СУММА(ОстаткиПоАвансам.ПредоплатаОстаток)     КАК Сумма
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(&ДатаОкончанияВключая,
	|			&НоваяАрхитектураВзаиморасчетов
	|			И (АналитикаУчетаПоПартнерам,
	|				ОбъектРасчетов,
	|				РасчетныйДокумент) В 
	|					(ВЫБРАТЬ 
	|						ДанныеАвансов.АналитикаУчетаПоПартнерам,
	|						ДанныеАвансов.ОбъектРасчетов,
	|						ДанныеАвансов.РасчетныйДокумент
	|					ИЗ
	|						ДанныеАвансовПолученных КАК ДанныеАвансов
	|					)
	|		) КАК ОстаткиПоАвансам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ДанныеАвансовПолученных КАК ДанныеАвансов
	|		ПО
	|			ОстаткиПоАвансам.АналитикаУчетаПоПартнерам = ДанныеАвансов.АналитикаУчетаПоПартнерам
	|			И ОстаткиПоАвансам.ОбъектРасчетов          = ДанныеАвансов.ОбъектРасчетов
	|			И ОстаткиПоАвансам.РасчетныйДокумент       = ДанныеАвансов.РасчетныйДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		ДанныеАвансов.Организация,
	|		ДанныеАвансов.НаправлениеДеятельности,
	|		ДанныеАвансов.Контрагент,
	|		ДанныеАвансов.Договор,
	|		ДанныеАвансов.ИсхНаправлениеДеятельности,
	|		ДанныеАвансов.ИсхКонтрагент,
	|		ДанныеАвансов.ИсхДоговор,
	|		ДанныеАвансов.РасчетныйДокумент,
	|		ДанныеАвансов.ИсходнаяАналитикаУчетаПоПартнерам,
	|		ДанныеАвансов.ИсходныйОбъектРасчетов,
	|		ДанныеАвансов.ДатаАванса
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеАвансов.Организация,
	|		ДанныеАвансов.НаправлениеДеятельности,
	|		ДанныеАвансов.Контрагент,
	|		ДанныеАвансов.Договор,
	|		ДанныеАвансов.ИсхНаправлениеДеятельности,
	|		ДанныеАвансов.ИсхКонтрагент,
	|		ДанныеАвансов.ИсхДоговор,
	|		ДанныеАвансов.РасчетныйДокумент,
	|		ДанныеАвансов.ИсходнаяАналитикаУчетаПоПартнерам,
	|		ДанныеАвансов.ИсходныйОбъектРасчетов,
	|		ДанныеАвансов.ДатаАванса,
	|		ДАТАВРЕМЯ(1,1,1) КАК ДатаПогашения,
	|		МАКСИМУМ(ДанныеАвансов.ВалютаДокумента) КАК ВалютаДокумента,
	|		НЕОПРЕДЕЛЕНО КАК ДокументРегистратор,
	|		-СУММА(ВЫБОР
	|			КОГДА ОстаткиПоАвансам.РасчетныйДокумент ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|					И ВЫРАЗИТЬ(ОстаткиПоАвансам.РасчетныйДокумент КАК Документ.ПриходныйКассовыйОрдер).Валюта = &ВалютаРеглУчета
	|				ТОГДА ОстаткиПоАвансам.ПредоплатаРеглОстаток
	|			КОГДА ОстаткиПоАвансам.РасчетныйДокумент ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|					И ВЫРАЗИТЬ(ОстаткиПоАвансам.РасчетныйДокумент КАК Документ.ПоступлениеБезналичныхДенежныхСредств).Валюта = &ВалютаРеглУчета
	|				ТОГДА ОстаткиПоАвансам.ПредоплатаРеглОстаток
	|			ИНАЧЕ ОстаткиПоАвансам.ПредоплатаОстаток + ОстаткиПоАвансам.КВозвратуОстаток
	|		КОНЕЦ)                                         КАК СуммаВал,
	|		-СУММА(ОстаткиПоАвансам.ПредоплатаУпрОстаток)  КАК СуммаУпр,
	|		-СУММА(ОстаткиПоАвансам.ПредоплатаРеглОстаток) КАК СуммаРегл,
	|		-СУММА(ОстаткиПоАвансам.ПредоплатаОстаток + ОстаткиПоАвансам.КВозвратуОстаток) КАК Сумма
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(&ДатаОкончанияВключая,
	|			НЕ &НоваяАрхитектураВзаиморасчетов
	|			И (АналитикаУчетаПоПартнерам,
	|				ЗаказКлиента,
	|				РасчетныйДокумент) В 
	|					(ВЫБРАТЬ 
	|						ДанныеАвансов.АналитикаУчетаПоПартнерам,
	|						ДанныеАвансов.ОбъектРасчетов,
	|						ДанныеАвансов.РасчетныйДокумент
	|					ИЗ
	|						ДанныеАвансовПолученных КАК ДанныеАвансов
	|					)
	|		) КАК ОстаткиПоАвансам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ДанныеАвансовПолученных КАК ДанныеАвансов
	|		ПО
	|			ОстаткиПоАвансам.АналитикаУчетаПоПартнерам = ДанныеАвансов.АналитикаУчетаПоПартнерам
	|			И ОстаткиПоАвансам.ЗаказКлиента            = ДанныеАвансов.ОбъектРасчетов
	|			И ОстаткиПоАвансам.РасчетныйДокумент       = ДанныеАвансов.РасчетныйДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		ДанныеАвансов.Организация,
	|		ДанныеАвансов.НаправлениеДеятельности,
	|		ДанныеАвансов.Контрагент,
	|		ДанныеАвансов.Договор,
	|		ДанныеАвансов.ИсхНаправлениеДеятельности,
	|		ДанныеАвансов.ИсхКонтрагент,
	|		ДанныеАвансов.ИсхДоговор,
	|		ДанныеАвансов.РасчетныйДокумент,
	|		ДанныеАвансов.ИсходнаяАналитикаУчетаПоПартнерам,
	|		ДанныеАвансов.ИсходныйОбъектРасчетов,
	|		ДанныеАвансов.ДатаАванса
	|
	|	) КАК Авансы
	|
	|ГДЕ
	|	ИСТИНА
	|	И (Авансы.ДатаАванса МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|	И Авансы.СуммаВал <> 0
	|;
	|
	|УНИЧТОЖИТЬ ДанныеАвансовПолученных
	|;
	|
	|УНИЧТОЖИТЬ РасчетыСКлиентами_Авансы
	|;
	|
	|УНИЧТОЖИТЬ РасчетыСКлиентами_ПогашенияАвансов
	|;
	|";
	
	УстановитьПоляИндексов(Запрос, ПараметрыРасчета, "ПолученныеАвансыВРазрезеПогашенийИОстатков");
	
	ПараметрыПутей = ИнициализироватьПараметрыДляОтбораАвансов_ПутиКПолямИТекстуЗамены();
	ОбработатьТекстЗапросаДляОтбораАвансовПоПараметрам(Запрос, ПараметрыРасчета, ПараметрыПутей);
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область АвансыВыданные

// Подготовить временную таблицу "РасчетыСПоставщиками_Авансы"
// Создает временную таблицу с колонками:
// 	* РасчетныйДокумент;
// 	* ДокументРегистратор;
// 	* Организация;
// 	* АналитикаУчетаПоПартнерам;
// 	* ОбъектРасчетов;
// 	* НаправлениеДеятельности;
// 	* Контрагент;
// 	* Договор;
// 	* ДатаАванса;
// 	* ВалютаДокумента;
// 	* СуммаАвансаВал - сумма в валюте документа;
// 	* СуммаАванса;
// 	* СуммаАвансаУпр;
// 	* СуммаАвансаРегл.
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - 
//  ПараметрыРасчета        - см. ИнициализироватьПараметрыПодготовкиРасчетовАвансов
Процедура ПодготовитьВТ_РасчетыСПоставщиками_Авансы(МенеджерВременныхТаблиц, ПараметрыРасчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УстановитьПараметрыЗапросаПодготовкиРасчетовАвансов(Запрос, ПараметрыРасчета);
	
	Запрос.Текст =
	"// Новая архитектура взаиморасчетов
	|ВЫБРАТЬ
	|	Расчеты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	Расчеты.ДокументРегистратор КАК ДокументРегистратор,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Расчеты.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	Расчеты.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	МИНИМУМ(ОтборАвансов.ДатаАванса) КАК ДатаАванса,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.РасходныйКассовыйОрдер
	|				ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.РасходныйКассовыйОрдер).Валюта
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|				ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.СписаниеБезналичныхДенежныхСредств).Валюта
	|			ИНАЧЕ Расчеты.Валюта
	|		КОНЕЦ) КАК ВалютаДокумента,
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.РасходныйКассовыйОрдер
	|					И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.РасходныйКассовыйОрдер).Валюта
	|						= &ВалютаРеглУчета
	|					И Расчеты.ПредоплатаРегл > 0
	|				ТОГДА Расчеты.ПредоплатаРегл
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|					И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.СписаниеБезналичныхДенежныхСредств).Валюта
	|						= &ВалютаРеглУчета
	|					И Расчеты.ПредоплатаРегл > 0
	|				ТОГДА Расчеты.ПредоплатаРегл
	|			ИНАЧЕ Расчеты.Предоплата
	|		КОНЕЦ
	|		* ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаАвансаВал,
	|	СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаАванса,
	|	СУММА(Расчеты.ПредоплатаУпр * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаАвансаУпр,
	|	СУММА(Расчеты.ПредоплатаРегл * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаАвансаРегл
	|ПОМЕСТИТЬ РасчетыСПоставщиками_Авансы
	|ИЗ
	|	(ВЫБРАТЬ
	|		Расчеты.РасчетныйДокумент,
	|		Расчеты.ДокументРегистратор,
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|		МИНИМУМ(Расчеты.ДатаВозникновения) КАК ДатаАванса
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|	ГДЕ
	|		&НоваяАрхитектураВзаиморасчетов
	|		И НЕ &СоздатьПустуюТаблицу
	|		И Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И (НЕ &ВключитьОтборПоОрганизациям
	|			ИЛИ Расчеты.АналитикаУчетаПоПартнерам.Организация В (&Организации))
	|		И (&ТекстОтборПоПараметрам)
	|		И Расчеты.ДатаВозникновения МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И Расчеты.Активность  = ИСТИНА
	|		
	|	СГРУППИРОВАТЬ ПО
	|		Расчеты.РасчетныйДокумент,
	|		Расчеты.ДокументРегистратор,
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) > 0
	|	
	|	) КАК ОтборАвансов
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|	ПО
	|		ОтборАвансов.ДокументРегистратор    = Расчеты.ДокументРегистратор
	|		И  ОтборАвансов.РасчетныйДокумент   = Расчеты.РасчетныйДокумент
	|		И  ОтборАвансов.Организация         = Расчеты.АналитикаУчетаПоПартнерам.Организация
	|		И  Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И  Расчеты.ДатаВозникновения МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И  Расчеты.Активность  = ИСТИНА
	|
	|ГДЕ
	|	ИСТИНА
	|	И (ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.СписаниеБезналичныхДенежныхСредств).ПроведеноБанком
	|			ИЛИ НЕ Расчеты.РасчетныйДокумент ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств)
	|	
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.РасчетныйДокумент,
	|	Расчеты.ДокументРегистратор,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация,
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов
	|
	|ИМЕЮЩИЕ
	|	СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Старая архитектура взаиморасчетов
	|ВЫБРАТЬ
	|	Расчеты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	Расчеты.Регистратор КАК ДокументРегистратор,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ЗаказПоставщику КАК ОбъектРасчетов,
	|	Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Расчеты.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	Расчеты.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	МИНИМУМ(Расчеты.Период) КАК ДатаАванса,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.РасходныйКассовыйОрдер
	|				ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.РасходныйКассовыйОрдер).Валюта
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|				ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.СписаниеБезналичныхДенежныхСредств).Валюта
	|			ИНАЧЕ Расчеты.Валюта
	|		КОНЕЦ) КАК ВалютаДокумента,
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.РасходныйКассовыйОрдер
	|					И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.РасходныйКассовыйОрдер).Валюта
	|						= &ВалютаРеглУчета
	|					И Расчеты.ПредоплатаРегл > 0
	|				ТОГДА Расчеты.ПредоплатаРегл
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|					И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.СписаниеБезналичныхДенежныхСредств).Валюта
	|						= &ВалютаРеглУчета
	|					И Расчеты.ПредоплатаРегл > 0
	|				ТОГДА Расчеты.ПредоплатаРегл
	|			ИНАЧЕ (Расчеты.Предоплата + Расчеты.КВозврату)
	|		КОНЕЦ
	|		* ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаАвансаВал,
	|	СУММА((Расчеты.Предоплата + Расчеты.КВозврату) * ВЫБОР 
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|		КОНЕЦ) КАК СуммаАванса,
	|	СУММА(Расчеты.ПредоплатаУпр * ВЫБОР 
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|		КОНЕЦ) КАК СуммаАвансаУпр,
	|	СУММА(Расчеты.ПредоплатаРегл * ВЫБОР 
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|		КОНЕЦ) КАК СуммаАвансаРегл
	|ИЗ
	|	(ВЫБРАТЬ
	|		Расчеты.РасчетныйДокумент КАК РасчетныйДокумент,
	|		Расчеты.Регистратор КАК ДокументРегистратор,
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация КАК Организация
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
	|	ГДЕ
	|		НЕ &НоваяАрхитектураВзаиморасчетов
	|		И НЕ &СоздатьПустуюТаблицу
	|		И Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И (НЕ &ВключитьОтборПоОрганизациям
	|			ИЛИ Расчеты.АналитикаУчетаПоПартнерам.Организация В (&Организации))
	|		И (&ТекстОтборПоПараметрам)
	|		И Расчеты.Активность = ИСТИНА
	|
	|	СГРУППИРОВАТЬ ПО
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация,
	|		Расчеты.Регистратор,
	|		Расчеты.РасчетныйДокумент
	|
	|	ИМЕЮЩИЕ
	|		СУММА((Расчеты.Предоплата + Расчеты.КВозврату) *
	|			ВЫБОР
	|				КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					ТОГДА -1
	|				КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА 1
	|			КОНЕЦ) > 0
	|
	|	) КАК ОтборАвансов
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
	|	ПО
	|		ОтборАвансов.ДокументРегистратор    = Расчеты.Регистратор
	|		И  ОтборАвансов.РасчетныйДокумент   = Расчеты.РасчетныйДокумент
	|		И  ОтборАвансов.Организация         = Расчеты.АналитикаУчетаПоПартнерам.Организация
	|		И  Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И  Расчеты.Активность  = ИСТИНА
	|
	|ГДЕ
	|	ИСТИНА
	|	И (ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.СписаниеБезналичныхДенежныхСредств).ПроведеноБанком
	|			ИЛИ НЕ Расчеты.РасчетныйДокумент ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств)
	|	
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.РасчетныйДокумент,
	|	Расчеты.Регистратор,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация,
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.ЗаказПоставщику,
	|	Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности,
	|	Расчеты.АналитикаУчетаПоПартнерам.Контрагент
	|
	|ИМЕЮЩИЕ
	|	СУММА((Расчеты.Предоплата + Расчеты.КВозврату) * ВЫБОР 
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|		КОНЕЦ) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныйДокумент
	|";
	
	УстановитьПоляИндексов(Запрос, ПараметрыРасчета, "РасчетыСПоставщиками_Авансы");
	
	ПараметрыПутей = ИнициализироватьПараметрыДляОтбораАвансов_ПутиКПолямИТекстуЗамены();
	ОбработатьТекстЗапросаДляОтбораАвансовПоПараметрам(Запрос, ПараметрыРасчета, ПараметрыПутей);
	
	Запрос.Выполнить();
	
	
КонецПроцедуры

// Подготовить временную таблицу "РасчетыСПоставщиками_ПогашенияАвансов"
// Создает временную таблицу с колонками:
// 	* РасчетныйДокумент;
// 	* Организация;
// 	* АналитикаУчетаПоПартнерам;
// 	* ОбъектРасчетов;
// 	* ДокументРегистратор;
// 	* Контрагент;
// 	* Договор;
// 	* НаправлениеДеятельности;
// 	* ИсхКонтрагент - контрагент, по которому возник аванс;
// 	* ИсхДоговор    - договор, по которому возник аванс;
// 	* ИсхНаправлениеДеятельности - направление, по которому возник аванс;
// 	* КорАналитикаУчетаПоПартнерам;
// 	* ИсходнаяАналитикаУчетаПоПартнерам - аналитика, по которой образовался аванс;
// 	* КорОбъектРасчетов;
// 	* ИсходныйОбъектРасчетов - объект расчетов, по которому образовался аванс;
// 	* ДатаАванса;
// 	* ДатаПогашения;
// 	* СобытиеЗнак - Если погашение произошло по причине зачета аванса, тогда СобытиеЗнак >= 0,
// 	                Если погашение произошло по причине возврата/списания задолженности, тогда СобытиеЗнак < 0;
// 	* ВидСобытия - событие, в связи с которым произошло погашение аванса. Возможные события:
// 	         - Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика,
// 	         - Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику;
// 	* ВалютаДокумента;
// 	* СуммаПогашения;
// 	* СуммаПогашенияВал - сумма в валюте документа;
// 	* СуммаПогашенияУпр;
// 	* СуммаПогашенияРегл.
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - 
//  ПараметрыРасчета        - см. ИнициализироватьПараметрыПодготовкиРасчетовАвансов
Процедура ПодготовитьВТ_РасчетыСПоставщиками_ПогашенияАвансов(МенеджерВременныхТаблиц, ПараметрыРасчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УстановитьПараметрыЗапросаПодготовкиРасчетовАвансов(Запрос, ПараметрыРасчета);
	
	Запрос.Текст =
	"// Новая архитектура взаиморасчетов
	|ВЫБРАТЬ
	|	Расчеты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	Расчеты.ДокументРегистратор КАК ДокументРегистратор,
	|	Расчеты.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	Расчеты.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	МАКСИМУМ(Расчеты.АналитикаУчетаПоПартнерам.Контрагент) КАК ИсхКонтрагент,
	|	МАКСИМУМ(Расчеты.АналитикаУчетаПоПартнерам.Договор) КАК ИсхДоговор,
	|	МАКСИМУМ(Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности) КАК ИсхНаправлениеДеятельности,
	|	МАКСИМУМ(Расчеты.КорАналитикаУчетаПоПартнерам) КАК КорАналитикаУчетаПоПартнерам,
	|	МАКСИМУМ(Расчеты.АналитикаУчетаПоПартнерам) КАК ИсходнаяАналитикаУчетаПоПартнерам,
	|	МАКСИМУМ(Расчеты.КорОбъектРасчетов) КАК КорОбъектРасчетов,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НЕ Расчеты.КорОбъектРасчетов = &ПустойОбъектРасчетов
	|			ТОГДА Расчеты.КорОбъектРасчетов
	|		ИНАЧЕ
	|			Расчеты.ОбъектРасчетов
	|		КОНЕЦ) КАК ИсходныйОбъектРасчетов,
	|	МИНИМУМ(ОтборПогашенийАвансов.ДатаАванса) КАК ДатаАванса,
	|	МАКСИМУМ(ОтборПогашенийАвансов.ДатаПогашения) КАК ДатаПогашения,
	|	МАКСИМУМ(ОтборПогашенийАвансов.СобытиеЗнак) КАК СобытиеЗнак,
	|	МАКСИМУМ(
	|		ВЫБОР
	|			КОГДА ОтборПогашенийАвансов.СобытиеЗнак < 0
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика)
	|			ИНАЧЕ
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику)
	|		КОНЕЦ) КАК ВидСобытия,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.РасходныйКассовыйОрдер
	|				ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.РасходныйКассовыйОрдер).Валюта
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|				ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.СписаниеБезналичныхДенежныхСредств).Валюта
	|			ИНАЧЕ Расчеты.Валюта
	|		КОНЕЦ) КАК ВалютаДокумента,
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.РасходныйКассовыйОрдер
	|					И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.РасходныйКассовыйОрдер).Валюта
	|						= &ВалютаРеглУчета
	|					И Расчеты.ПредоплатаРегл > 0
	|				ТОГДА Расчеты.ПредоплатаРегл
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|					И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.СписаниеБезналичныхДенежныхСредств).Валюта
	|						= &ВалютаРеглУчета
	|					И Расчеты.ПредоплатаРегл > 0
	|				ТОГДА Расчеты.ПредоплатаРегл
	|			ИНАЧЕ Расчеты.Предоплата
	|		КОНЕЦ
	|		* ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаПогашенияВал,
	|	СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаПогашения,
	|	СУММА(Расчеты.ПредоплатаУпр * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаПогашенияУпр,
	|	СУММА(Расчеты.ПредоплатаРегл * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаПогашенияРегл
	|ПОМЕСТИТЬ РасчетыСПоставщиками_ПогашенияАвансов
	|ИЗ
	|	(ВЫБРАТЬ
	|		Расчеты.РасчетныйДокумент,
	|		Расчеты.ДокументРегистратор,
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|		МИНИМУМ(Расчеты.ДатаВозникновения) КАК ДатаАванса,
	|		МАКСИМУМ(Расчеты.Период) КАК ДатаПогашения,
	|		СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаПогашенияВал,
	|		СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 0
	|			КОГДА Расчеты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|				ТОГДА ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(Расчеты.ДокументРегистратор) В (&ТипыДокументовВозврата_ВыданныеАвансы)
	|						ТОГДА -Расчеты.Предоплата
	|					ИНАЧЕ
	|						0
	|				КОНЕЦ
	|			КОГДА Расчеты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику)
	|				ТОГДА Расчеты.Предоплата
	|			ИНАЧЕ
	|				-Расчеты.Предоплата
	|		КОНЕЦ) КАК СобытиеЗнак
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|	ГДЕ
	|		&НоваяАрхитектураВзаиморасчетов
	|		И НЕ &СоздатьПустуюТаблицу
	|		И (НЕ &ВключитьОтборПоОрганизациям
	|			ИЛИ Расчеты.АналитикаУчетаПоПартнерам.Организация В (&Организации))
	|		И (&ТекстОтборПоПараметрам)
	|		И Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И Расчеты.Активность  = ИСТИНА
	|		
	|	СГРУППИРОВАТЬ ПО
	|		Расчеты.РасчетныйДокумент,
	|		Расчеты.ДокументРегистратор,
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) > 0
	|	
	|	) КАК ОтборПогашенийАвансов
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|	ПО
	|		ОтборПогашенийАвансов.ДокументРегистратор    = Расчеты.ДокументРегистратор
	|		И  ОтборПогашенийАвансов.РасчетныйДокумент   = Расчеты.РасчетныйДокумент
	|		И  ОтборПогашенийАвансов.Организация         = Расчеты.АналитикаУчетаПоПартнерам.Организация
	|		И  Расчеты.Период                            МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И  Расчеты.Активность                        = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.РасчетныйДокумент,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация,
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.ДокументРегистратор
	|
	|ИМЕЮЩИЕ
	|	СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Старая архитектура взаиморасчетов
	|ВЫБРАТЬ
	|	Расчеты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ЗаказПоставщику КАК ОбъектРасчетов,
	|	Расчеты.Регистратор КАК ДокументРегистратор,
	|	Расчеты.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	Расчеты.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Расчеты.АналитикаУчетаПоПартнерам.Контрагент КАК ИсхКонтрагент,
	|	Расчеты.АналитикаУчетаПоПартнерам.Договор КАК ИсхДоговор,
	|	Расчеты.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК ИсхНаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК КорАналитикаУчетаПоПартнерам,
	|	Расчеты.АналитикаУчетаПоПартнерам КАК ИсходнаяАналитикаУчетаПоПартнерам,
	|	&ПустойОбъектРасчетов КАК КорОбъектРасчетов,
	|	Расчеты.ЗаказПоставщику КАК ИсходныйОбъектРасчетов,
	|	МИНИМУМ(Расчеты.ДатаПлатежа) КАК ДатаАванса,
	|	МАКСИМУМ(ОтборПогашенийАвансов.ДатаПогашения) КАК ДатаПогашения,
	|	МАКСИМУМ(ОтборПогашенийАвансов.СобытиеЗнак) КАК СобытиеЗнак,
	|	МАКСИМУМ(
	|		ВЫБОР
	|			КОГДА ОтборПогашенийАвансов.СобытиеЗнак < 0
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика)
	|			ИНАЧЕ
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику)
	|		КОНЕЦ) КАК ВидСобытия,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.РасходныйКассовыйОрдер
	|				ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.РасходныйКассовыйОрдер).Валюта
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|				ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.СписаниеБезналичныхДенежныхСредств).Валюта
	|			ИНАЧЕ Расчеты.Валюта
	|		КОНЕЦ) КАК ВалютаДокумента,
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.РасходныйКассовыйОрдер
	|					И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.РасходныйКассовыйОрдер).Валюта
	|						= &ВалютаРеглУчета
	|					И Расчеты.ПредоплатаРегл > 0
	|				ТОГДА Расчеты.ПредоплатаРегл
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|					И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.СписаниеБезналичныхДенежныхСредств).Валюта
	|						= &ВалютаРеглУчета
	|					И Расчеты.ПредоплатаРегл > 0
	|				ТОГДА Расчеты.ПредоплатаРегл
	|			ИНАЧЕ Расчеты.Предоплата
	|		КОНЕЦ
	|		* ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаПогашенияВал,
	|	СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаПогашения,
	|	СУММА(Расчеты.ПредоплатаУпр * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаПогашенияУпр,
	|	СУММА(Расчеты.ПредоплатаРегл * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаПогашенияРегл
	|ИЗ
	|	(ВЫБРАТЬ
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|		Расчеты.Регистратор КАК ДокументРегистратор,
	|		Расчеты.РасчетныйДокумент КАК РасчетныйДокумент,
	|		Расчеты.Период КАК ДатаПогашения,
	|		СУММА(ВЫБОР
	|				КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА 0
	|				КОГДА Расчеты.ХозяйственнаяОперация В (
	|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику),
	|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|						)
	|					ТОГДА Расчеты.ПредоплатаРегл
	|				ИНАЧЕ
	|					-Расчеты.ПредоплатаРегл
	|			КОНЕЦ) КАК СобытиеЗнак,
	|		СУММА(Расчеты.ПредоплатаРегл * ВЫБОР
	|				КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА -1
	|				ИНАЧЕ 1
	|			КОНЕЦ) КАК СуммаЗачета
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
	|	ГДЕ
	|		НЕ &НоваяАрхитектураВзаиморасчетов
	|		И НЕ &СоздатьПустуюТаблицу
	|		И (НЕ &ВключитьОтборПоОрганизациям
	|			ИЛИ Расчеты.АналитикаУчетаПоПартнерам.Организация В (&Организации))
	|		И (&ТекстОтборПоПараметрам)
	|		И Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И Расчеты.Активность  = ИСТИНА
	|
	|	СГРУППИРОВАТЬ ПО
	|		Расчеты.РасчетныйДокумент,
	|		Расчеты.Регистратор,
	|		Расчеты.АналитикаУчетаПоПартнерам.Организация,
	|		Расчеты.Период
	|
	|	ИМЕЮЩИЕ
	|		СУММА(Расчеты.ПредоплатаРегл * ВЫБОР
	|				КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА -1
	|				ИНАЧЕ 1
	|			КОНЕЦ) > 0
	|	) КАК ОтборПогашенийАвансов
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
	|	ПО
	|		ОтборПогашенийАвансов.ДокументРегистратор    = Расчеты.Регистратор
	|		И  ОтборПогашенийАвансов.РасчетныйДокумент   = Расчеты.РасчетныйДокумент
	|		И  ОтборПогашенийАвансов.Организация         = Расчеты.АналитикаУчетаПоПартнерам.Организация
	|		И  Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И  Расчеты.Активность  = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.РасчетныйДокумент,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация,
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.ЗаказПоставщику,
	|	Расчеты.Регистратор
	|
	|ИМЕЮЩИЕ
	|	СУММА(Расчеты.Предоплата * ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) > 0
	|
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныйДокумент
	|
	|";
	
	
	УстановитьПоляИндексов(Запрос, ПараметрыРасчета, "РасчетыСПоставщиками_ПогашенияАвансов");
	
	ПараметрыПутей = ИнициализироватьПараметрыДляОтбораАвансов_ПутиКПолямИТекстуЗамены();
	ОбработатьТекстЗапросаДляОтбораАвансовПоПараметрам(Запрос, ПараметрыРасчета, ПараметрыПутей);
	
	Запрос.Выполнить();
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

Функция ТекстПроведенияЗачетАвансовКлиентаПоНакладной(ТипДокументаСтрокой, Шаблон, 
	ИмяТЧ = "РасшифровкаПлатежа", 
	ТекстХозяйственнойОперацииПереноса = "",
	ТекстАналитика = "") Экспорт
	
	Если ТекстАналитика = "" Тогда
		ТекстАналитика = "&АналитикаУчетаПоПартнерам";
	КонецЕсли;
	
	ТекстЗапросаЗачетОплатыПоПлатежам = "
	|ВЫБРАТЬ
	|	0                                             КАК НомерСтроки,
	|	&Период                                       КАК Период,
	|	&Период                                       КАК ДатаРегистратора,
	|	&Номер                                        КАК НомерРегистратора,
	|	&Период                                       КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)        КАК ВидДвижения,
	|	%ТекстАналитика%                              КАК АналитикаУчетаПоПартнерам,
	|
	|	РасшифровкаПлатежа.Заказ                      КАК ЗаказКлиента,
	|
	|	Неопределено                                  КАК ПродажаПоЗаказу,
	|	%ТекстХозяйственнойОперацииПереноса%          КАК ХозяйственнаяОперация,
	|	&ВалютаВзаиморасчетов                         КАК Валюта,
	|	Истина                                        КАК ИсключатьПриКонтроле,
	|	Неопределено                                  КАК ФормаОплаты,
	|	&ДопустимаяСуммаЗадолженности                 КАК ДопустимаяСуммаЗадолженности,
	|	
	|	РасшифровкаПлатежа.СуммаВзаиморасчетов        КАК Сумма,
	|	РасшифровкаПлатежа.СуммаВзаиморасчетов        КАК КОплате,
	|	0                                             КАК КОтгрузке,
	|	0                                             КАК Отгружается,
	|	0                                             КАК ЗалогЗаТару,
	|	
	|	ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета И &Валюта <> &ВалютаРегламентированногоУчета
	|			ТОГДА РасшифровкаПлатежа.СуммаВзаиморасчетов
	|			ИНАЧЕ ВЫРАЗИТЬ(РасшифровкаПлатежа.Сумма * &КоэффициентПересчетаВВалютуРеглПереноса КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|			ТОГДА РасшифровкаПлатежа.СуммаВзаиморасчетов
	|			ИНАЧЕ ВЫРАЗИТЬ(РасшифровкаПлатежа.Сумма * &КоэффициентПересчетаВВалютуУпрПереноса КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК СуммаУпр,
	|	
	|	&Организация                                                       КАК Организация,
	|	&Валюта                                                            КАК ВалютаДокумента,
	|	НЕОПРЕДЕЛЕНО                                                       КАК КорОбъектРасчетов,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)   КАК КорАналитикаУчетаПоПартнерам,
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки) КАК ВариантОплаты
	|ИЗ
	|	Документ.%ТипДокументаСтрокой%.%ИмяТЧ% КАК РасшифровкаПлатежа
	|
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка = &Ссылка
	|	И НЕ РасшифровкаПлатежа.Заказ = НЕОПРЕДЕЛЕНО
	|	И (ТИПЗНАЧЕНИЯ(РасшифровкаПлатежа.Заказ) В (ТИП(Документ.ПриходныйКассовыйОрдер),
	|												ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств),
	|												ТИП(Документ.ПервичныйДокумент),
	|												ТИП(Документ.ОперацияПоПлатежнойКарте),
	|												ТИП(Документ.ВозвратТоваровОтКлиента))
	|	ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация) 
	|		И ТИПЗНАЧЕНИЯ(РасшифровкаПлатежа.Заказ) = ТИП(Документ.РеализацияТоваровУслуг))
	|";
	
	ТекстЗапросаУменьшениеЗадолженности = "
	|ВЫБРАТЬ
	|	0                                             КАК НомерСтроки,
	|	&Период                                       КАК Период,
	|	&Период                                       КАК ДатаРегистратора,
	|	&Номер                                        КАК НомерРегистратора,
	|	&Период                                       КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)        КАК ВидДвижения,
	|	%ТекстАналитика%                              КАК АналитикаУчетаПоПартнерам,
	|
	|	&Ссылка                                       КАК ЗаказКлиента,
	|
	|	Неопределено                                  КАК ПродажаПоЗаказу,
	|	%ТекстХозяйственнойОперацииПереноса%          КАК ХозяйственнаяОперация,
	|	&ВалютаВзаиморасчетов                         КАК Валюта,
	|	Истина                                        КАК ИсключатьПриКонтроле,
	|	&ФормаОплаты                                  КАК ФормаОплаты,
	|	&ДопустимаяСуммаЗадолженности                 КАК ДопустимаяСуммаЗадолженности,
	|
	|	СУММА(РасшифровкаПлатежа.СуммаВзаиморасчетов) КАК Сумма,
	|	СУММА(РасшифровкаПлатежа.СуммаВзаиморасчетов) КАК КОплате,
	|	0                                             КАК КОтгрузке,
	|	0                                             КАК Отгружается,
	|	0                                             КАК ЗалогЗаТару,
	|	ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета И &Валюта <> &ВалютаРегламентированногоУчета
	|				ТОГДА СУММА(РасшифровкаПлатежа.СуммаВзаиморасчетов)
	|				ИНАЧЕ ВЫРАЗИТЬ(СУММА(РасшифровкаПлатежа.Сумма) * &КоэффициентПересчетаВВалютуРеглПереноса КАК ЧИСЛО(31,2))
	|		КОНЕЦ                                    КАК СуммаРегл,
	|	ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|				ТОГДА СУММА(РасшифровкаПлатежа.СуммаВзаиморасчетов)
	|				ИНАЧЕ ВЫРАЗИТЬ(СУММА(РасшифровкаПлатежа.Сумма) * &КоэффициентПересчетаВВалютуУпрПереноса КАК ЧИСЛО(31,2))
	|		КОНЕЦ                                    КАК СуммаУпр,
	|	&Организация                                 КАК Организация,
	|	&Валюта                                      КАК ВалютаДокумента,
	|	РасшифровкаПлатежа.Заказ                     КАК КорОбъектРасчетов,
	|	%ТекстАналитика%                             КАК КорАналитикаУчетаПоПартнерам,
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки) КАК ВариантОплаты
	|ИЗ
	|	Документ.%ТипДокументаСтрокой%.%ИмяТЧ% КАК РасшифровкаПлатежа
	|
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка = &Ссылка
	|	И НЕ РасшифровкаПлатежа.Заказ = НЕОПРЕДЕЛЕНО
	|	И (ТИПЗНАЧЕНИЯ(РасшифровкаПлатежа.Заказ) В (ТИП(Документ.ПриходныйКассовыйОрдер),
	|												ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств),
	|												ТИП(Документ.ПервичныйДокумент),
	|												ТИП(Документ.ОперацияПоПлатежнойКарте),
	|												ТИП(Документ.ВозвратТоваровОтКлиента))
	|	ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация) 
	|		И ТИПЗНАЧЕНИЯ(РасшифровкаПлатежа.Заказ) = ТИП(Документ.РеализацияТоваровУслуг))
	|СГРУППИРОВАТЬ ПО
	|	РасшифровкаПлатежа.Заказ
	|ИМЕЮЩИЕ
	|	СУММА(РасшифровкаПлатежа.СуммаВзаиморасчетов) <> 0
	|";
	
	ТекстОбъединить = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
	Если ТекстХозяйственнойОперацииПереноса = "" Тогда
		ТекстХозяйственнойОперацииПереноса = "ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)";
		ТекстЗапросаЗачетОплатыПоПлатежам = СтрЗаменить(ТекстЗапросаЗачетОплатыПоПлатежам, "КоэффициентПересчетаВВалютуРеглПереноса", "КоэффициентПересчетаВВалютуРегл");
		ТекстЗапросаЗачетОплатыПоПлатежам = СтрЗаменить(ТекстЗапросаЗачетОплатыПоПлатежам, "КоэффициентПересчетаВВалютуУпрПереноса", "КоэффициентПересчетаВВалютуУпр");
		ТекстЗапросаУменьшениеЗадолженности = СтрЗаменить(ТекстЗапросаУменьшениеЗадолженности, "КоэффициентПересчетаВВалютуРеглПереноса", "КоэффициентПересчетаВВалютуРегл");
		ТекстЗапросаУменьшениеЗадолженности = СтрЗаменить(ТекстЗапросаУменьшениеЗадолженности, "КоэффициентПересчетаВВалютуУпрПереноса", "КоэффициентПересчетаВВалютуУпр");
	КонецЕсли;
	
	Если Шаблон <> "" Тогда
		СтруктураТекстовЗапросаДокумента = Новый Структура(ИмяТЧ, ТекстЗапросаУменьшениеЗадолженности);
		ТекстЗапросаУменьшениеЗадолженности = ПодготовитьТекстЗапросаОтраженияДокумента(Шаблон, СтруктураТекстовЗапросаДокумента);
		СтруктураТекстовЗапросаДокумента = Новый Структура(ИмяТЧ, ТекстЗапросаЗачетОплатыПоПлатежам);
		ТекстЗапросаЗачетОплатыПоПлатежам = ПодготовитьТекстЗапросаОтраженияДокумента(Шаблон, СтруктураТекстовЗапросаДокумента);
	КонецЕсли;
	ТекстЗапросаЗачетОплатыПоПлатежам = СтрЗаменить(ТекстЗапросаЗачетОплатыПоПлатежам, "%ТипДокументаСтрокой%", ТипДокументаСтрокой);
	ТекстЗапросаЗачетОплатыПоПлатежам = СтрЗаменить(ТекстЗапросаЗачетОплатыПоПлатежам, "%ИмяТЧ%", ИмяТЧ);
	ТекстЗапросаЗачетОплатыПоПлатежам = СтрЗаменить(ТекстЗапросаЗачетОплатыПоПлатежам, "%ТекстХозяйственнойОперацииПереноса%", ТекстХозяйственнойОперацииПереноса);
	ТекстЗапросаЗачетОплатыПоПлатежам = СтрЗаменить(ТекстЗапросаЗачетОплатыПоПлатежам, "%ТекстАналитика%", ТекстАналитика);
	ТекстЗапросаУменьшениеЗадолженности = СтрЗаменить(ТекстЗапросаУменьшениеЗадолженности, "%ТипДокументаСтрокой%", ТипДокументаСтрокой);
	ТекстЗапросаУменьшениеЗадолженности = СтрЗаменить(ТекстЗапросаУменьшениеЗадолженности, "%ИмяТЧ%", ИмяТЧ);
	ТекстЗапросаУменьшениеЗадолженности = СтрЗаменить(ТекстЗапросаУменьшениеЗадолженности, "%ТекстХозяйственнойОперацииПереноса%", ТекстХозяйственнойОперацииПереноса);
	ТекстЗапросаУменьшениеЗадолженности = СтрЗаменить(ТекстЗапросаУменьшениеЗадолженности, "%ТекстАналитика%", ТекстАналитика);
	
	Возврат ТекстОбъединить + ТекстЗапросаЗачетОплатыПоПлатежам + ТекстОбъединить
		+ ТекстЗапросаУменьшениеЗадолженности;
	
КонецФункции

Функция ТекстПроведенияЗачетАвансовПоставщикуПоНакладной(ТипДокументаСтрокой, Шаблон, ИмяТЧ = "РасшифровкаПлатежа", ТекстАналитика = "") Экспорт
	
	Если ТекстАналитика = "" Тогда
		ТекстАналитика = "&АналитикаУчетаПоПартнерам";
	КонецЕсли;
	
	ТекстЗапросаУменьшениеЗадолженности = "
	|ВЫБРАТЬ
	|	0                                             КАК НомерСтроки,
	|	&Период                                       КАК Период,
	|	&Период                                       КАК ДатаРегистратора,
	|	&Номер                                        КАК НомерРегистратора,
	|	&Период                                       КАК ДатаПлатежа,
	|
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)        КАК ВидДвижения,
	|	%ТекстАналитика%                              КАК АналитикаУчетаПоПартнерам,
	|	&ВалютаВзаиморасчетов                         КАК Валюта,
	|	&Ссылка                                       КАК ЗаказПоставщику,
	|
	|	Неопределено                                  КАК ЗакупкаПоЗаказу,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса) КАК ХозяйственнаяОперация,
	|	&ФормаОплаты                                  КАК ФормаОплаты,
	|
	|	РасшифровкаПлатежа.СуммаВзаиморасчетов        КАК Сумма,
	|	РасшифровкаПлатежа.СуммаВзаиморасчетов        КАК КОплате,
	|	0                                             КАК КПоступлению,
	|
	|	ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета И &Валюта <> &ВалютаРегламентированногоУчета
	|			ТОГДА РасшифровкаПлатежа.СуммаВзаиморасчетов
	|			ИНАЧЕ ВЫРАЗИТЬ(РасшифровкаПлатежа.Сумма * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|			ТОГДА РасшифровкаПлатежа.СуммаВзаиморасчетов
	|			ИНАЧЕ ВЫРАЗИТЬ(РасшифровкаПлатежа.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК СуммаУпр,
	|
	|	0                                                                       КАК ЗалогЗаТару,
	|	Неопределено                                                            КАК СтатьяДвиженияДенежныхСредств,
	|	&Организация                                                            КАК Организация,
	|	&Валюта                                                                 КАК ВалютаДокумента,
	|	РасшифровкаПлатежа.Заказ                                                КАК КорОбъектРасчетов,
	|	%ТекстАналитика%                                                        КАК КорАналитикаУчетаПоПартнерам,
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыПоставщику.ПредоплатаДоПоступления) КАК ВариантОплаты
	|ИЗ
	|	Документ.%ТипДокументаСтрокой%.%ИмяТЧ% КАК РасшифровкаПлатежа
	|
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка = &Ссылка
	|	И НЕ РасшифровкаПлатежа.Заказ = НЕОПРЕДЕЛЕНО
	|	И (ТИПЗНАЧЕНИЯ(РасшифровкаПлатежа.Заказ) В (ТИП(Документ.РасходныйКассовыйОрдер),
	|												ТИП(Документ.СписаниеБезналичныхДенежныхСредств),
	|												ТИП(Документ.ПервичныйДокумент),
	|												ТИП(Документ.ВозвратТоваровПоставщику))
	|	ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация) 
	|		И ТИПЗНАЧЕНИЯ(РасшифровкаПлатежа.Заказ) = ТИП(Документ.ПриобретениеТоваровУслуг))
	|";
	
	ТекстЗапросаЗачетОплатыПоПлатежам = "
	|ВЫБРАТЬ
	|	0                                            КАК НомерСтроки,
	|	&Период                                      КАК Период,
	|	&Период                                      КАК ДатаРегистратора,
	|	&Номер                                       КАК НомерРегистратора,
	|	&Период                                      КАК ДатаПлатежа,
	|
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)       КАК ВидДвижения,
	|	%ТекстАналитика%                             КАК АналитикаУчетаПоПартнерам,
	|	&ВалютаВзаиморасчетов                        КАК Валюта,
	|	РасшифровкаПлатежа.Заказ                     КАК ЗаказПоставщику,
	|
	|	Неопределено                                 КАК ЗакупкаПоЗаказу,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса) КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                                 КАК ФормаОплаты,
	|	
	|	СУММА(РасшифровкаПлатежа.СуммаВзаиморасчетов) КАК Сумма,
	|	СУММА(РасшифровкаПлатежа.СуммаВзаиморасчетов) КАК КОплате,
	|	0                                             КАК КПоступлению,
	|
	|	ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета И &Валюта <> &ВалютаРегламентированногоУчета
	|		ТОГДА СУММА(РасшифровкаПлатежа.СуммаВзаиморасчетов)
	|		ИНАЧЕ ВЫРАЗИТЬ(СУММА(РасшифровкаПлатежа.Сумма) * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2))
	|	КОНЕЦ                                        КАК СуммаРегл,
	|	ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|		ТОГДА СУММА(РасшифровкаПлатежа.СуммаВзаиморасчетов)
	|		ИНАЧЕ ВЫРАЗИТЬ(СУММА(РасшифровкаПлатежа.Сумма) * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))
	|	КОНЕЦ                                        КАК СуммаУпр,
	|
	|	0                                                                       КАК ЗалогЗаТару,
	|	Неопределено                                                            КАК СтатьяДвиженияДенежныхСредств,
	|	&Организация                                                            КАК Организация,
	|	&Валюта                                                                 КАК ВалютаДокумента,
	|	НЕОПРЕДЕЛЕНО                                                            КАК КорОбъектРасчетов,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК КорАналитикаУчетаПоПартнерам,
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыПоставщику.ПредоплатаДоПоступления) КАК ВариантОплаты
	|ИЗ
	|	Документ.%ТипДокументаСтрокой%.%ИмяТЧ% КАК РасшифровкаПлатежа
	|
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка = &Ссылка
	|	И НЕ РасшифровкаПлатежа.Заказ = НЕОПРЕДЕЛЕНО
	|	И (ТИПЗНАЧЕНИЯ(РасшифровкаПлатежа.Заказ) В (ТИП(Документ.РасходныйКассовыйОрдер),
	|												ТИП(Документ.СписаниеБезналичныхДенежныхСредств),
	|												ТИП(Документ.ПервичныйДокумент),
	|												ТИП(Документ.ВозвратТоваровПоставщику))
	|	ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация) 
	|		И ТИПЗНАЧЕНИЯ(РасшифровкаПлатежа.Заказ) = ТИП(Документ.ПриобретениеТоваровУслуг))
	|СГРУППИРОВАТЬ ПО
	|	РасшифровкаПлатежа.Заказ
	|";
	
	ТекстОбъединить = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
	Если Шаблон <> "" Тогда
		СтруктураТекстовЗапросаДокумента = Новый Структура(ИмяТЧ, ТекстЗапросаУменьшениеЗадолженности);
		ТекстЗапросаУменьшениеЗадолженности = ПодготовитьТекстЗапросаОтраженияДокумента(Шаблон, СтруктураТекстовЗапросаДокумента);
		СтруктураТекстовЗапросаДокумента = Новый Структура(ИмяТЧ, ТекстЗапросаЗачетОплатыПоПлатежам);
		ТекстЗапросаЗачетОплатыПоПлатежам = ПодготовитьТекстЗапросаОтраженияДокумента(Шаблон, СтруктураТекстовЗапросаДокумента);
	КонецЕсли;
	ТекстЗапросаЗачетОплатыПоПлатежам = СтрЗаменить(ТекстЗапросаЗачетОплатыПоПлатежам, "%ТипДокументаСтрокой%", ТипДокументаСтрокой);
	ТекстЗапросаЗачетОплатыПоПлатежам = СтрЗаменить(ТекстЗапросаЗачетОплатыПоПлатежам, "%ИмяТЧ%", ИмяТЧ);
	ТекстЗапросаЗачетОплатыПоПлатежам = СтрЗаменить(ТекстЗапросаЗачетОплатыПоПлатежам, "%ТекстАналитика%", ТекстАналитика);
	ТекстЗапросаУменьшениеЗадолженности = СтрЗаменить(ТекстЗапросаУменьшениеЗадолженности, "%ТипДокументаСтрокой%", ТипДокументаСтрокой);
	ТекстЗапросаУменьшениеЗадолженности = СтрЗаменить(ТекстЗапросаУменьшениеЗадолженности, "%ИмяТЧ%", ИмяТЧ);
	ТекстЗапросаУменьшениеЗадолженности = СтрЗаменить(ТекстЗапросаУменьшениеЗадолженности, "%ТекстАналитика%", ТекстАналитика);
	
	Возврат ТекстОбъединить + ТекстЗапросаЗачетОплатыПоПлатежам + ТекстОбъединить
		+ ТекстЗапросаУменьшениеЗадолженности;
	
КонецФункции

Функция ПодготовитьТекстЗапросаОтраженияДокумента(ЗНАЧ ТекстЗапроса, СтруктураТекстовЗапросаДокумента) Экспорт
	
	Для Каждого ТекстЗапросаДокумента Из СтруктураТекстовЗапросаДокумента Цикл
		
		ИмяТаблицы = "Шаблон";
		
		РезультатРазбораТекстаЗапроса = ПроведениеСерверУТ.РазобратьТекстЗапроса(ТекстЗапросаДокумента.Значение);
		
		Для каждого ПолеВыборки Из РезультатРазбораТекстаЗапроса.ПоляВыборки Цикл
			ЧастиСтрокиПоиска = Новый Массив;
			ЧастиСтрокиПоиска.Добавить(ИмяТаблицы);
			ЧастиСтрокиПоиска.Добавить(ПолеВыборки.Ключ);
			СтрокаПоиска = СтрСоединить(ЧастиСтрокиПоиска, ".");
			СтрокаЗамены = ПолеВыборки.Значение;
			ПроведениеСерверУТ.ВыполнитьЗаменуПоПолномуСоответствию(ТекстЗапроса, СтрокаПоиска, СтрокаЗамены);
		КонецЦикла;
		
		ЧастиСтрокиПоиска = Новый Массив;
		ЧастиСтрокиПоиска.Добавить("#");
		ЧастиСтрокиПоиска.Добавить(ИмяТаблицы);
		ЧастиСтрокиПоиска.Добавить(" КАК ");
		ЧастиСтрокиПоиска.Добавить(ИмяТаблицы);
		СтрокаПоиска = СтрСоединить(ЧастиСтрокиПоиска, "");
		СтрокаЗамены = РезультатРазбораТекстаЗапроса.Таблицы;
		ПроведениеСерверУТ.ВыполнитьЗаменуПоПолномуСоответствию(ТекстЗапроса, СтрокаПоиска, СтрокаЗамены);
		
		ЧастиСтрокиПоиска = Новый Массив;
		ЧастиСтрокиПоиска.Добавить("&Отбор");
		ЧастиСтрокиПоиска.Добавить(ИмяТаблицы);
		СтрокаПоиска = СтрСоединить(ЧастиСтрокиПоиска, "");
		СтрокаЗамены = РезультатРазбораТекстаЗапроса.Отбор;
		ПроведениеСерверУТ.ВыполнитьЗаменуПоПолномуСоответствию(ТекстЗапроса, СтрокаПоиска, СтрокаЗамены);
		
	КонецЦикла;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция возвращает ссылку на объект расчетов переданной ссылки.
//
// Параметры:
//		ОбъектСсылка - ОпределяемыйТип.ОбъектРасчетов - Документ по которому нужно определить объект расчетов.
//
// Возвращаемое значение:
// 		ОпределяемыйТип.ОбъектРасчетов - Объект расчетов документа..
//
Функция ОбъектРасчетовПоСсылке(ОбъектСсылка) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектСсылка, "ПорядокРасчетов") Тогда 
		Порядок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "ПорядокРасчетов");
		Если Порядок = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
			Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") 
				ИЛИ ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
				Возврат ОбъектСсылка
			Иначе
				Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "Договор");
			КонецЕсли;
		ИначеЕсли Порядок = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным 
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектСсылка, "ЗаказКлиента") Тогда
			Заказ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "ЗаказКлиента");
			Если ЗначениеЗаполнено(Заказ) Тогда
				Возврат Заказ;
			КонецЕсли;
		ИначеЕсли Порядок = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным 
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектСсылка, "ЗаказПоставщику") Тогда
			Заказ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "ЗаказПоставщику");
			Если ЗначениеЗаполнено(Заказ) Тогда
				Возврат Заказ;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбъектСсылка;
	
КонецФункции

// см. ОтчетыУТПереопределяемый.ДополнитьСоответствияРегистраторовОтчетаОДвижениях
//
Процедура ДополнитьСоответствияРегистраторовОтчетаОДвижениях(Документ, СоответствиеРегистров) Экспорт
	
	Если Документ.Метаданные().Движения.Содержит(Метаданные.РегистрыНакопления.РасчетыСКлиентами) Тогда
		СоответствиеРегистров.Вставить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам, "ДокументРегистратор");
		СоответствиеРегистров.Вставить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПланОплат, "ДокументРегистратор");
		СоответствиеРегистров.Вставить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПланОтгрузок, "ДокументРегистратор");
	КонецЕсли;
	
	Если Документ.Метаданные().Движения.Содержит(Метаданные.РегистрыНакопления.РасчетыСПоставщиками) Тогда
		СоответствиеРегистров.Вставить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам, "ДокументРегистратор");
		СоответствиеРегистров.Вставить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПланОплат, "ДокументРегистратор");
		СоответствиеРегистров.Вставить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПланПоставок, "ДокументРегистратор");
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.РасчетКурсовыхРазниц") Тогда
		СоответствиеРегистров.Вставить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам, "ДокументРегистратор");
		СоответствиеРегистров.Вставить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам, "ДокументРегистратор");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункцииДляВыбораДокументаРасчетов

// Возвращает параметры, используемые при выборе документа расчетов с клиентами.
// Используется в общей форме "ВыборДокументаРасчетов" и в обработке получения данных выбора основания платежа.
// 
// Возвращаемое значение: 
// Структура с ключами
//	ВводПоСтроке - Булево - Признак получения данных выбора.
//	ЭтоУИП - Булево - Поиск документа расчетов осуществляется по УИП.
//	ОтборПоОрганизацииИКонтрагенту - Булево - Есть отбор по организации и контрагенту.
//	ИсключитьРедактируемыйДокумент - Булево - Не включать документ из которого вызывается подбор в данные выбора.
//	ЗапретитьДоговорыПоДокументам - Булево - Запретить договоры с порядком расчетов "по заказам/накладным".
//
Функция ПараметрыОтбораПриВыбореДокументаРасчетовСКлиентами() Экспорт 
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВводПоСтроке",                   Ложь);
	ПараметрыОтбора.Вставить("ЭтоУИП",                         Ложь);
	ПараметрыОтбора.Вставить("ОтборПоОрганизацииИКонтрагенту", Ложь);
	ПараметрыОтбора.Вставить("ИсключитьРедактируемыйДокумент", Ложь);
	ПараметрыОтбора.Вставить("ЗапретитьДоговорыПоДокументам",  Ложь);
	
	Возврат ПараметрыОтбора;
	
КонецФункции

// Дополняет текст запроса отборами в функции ПолучитьТекстЗапросаДокументыРасчетовСКлиентами().
// 
// Параметры:
//	ТекстЗапроса - Строка - Изменяемый текст запроса.
//	ТипОбъекта - Тип - Тип документа для которого формируется запрос.
//	ПараметрыОтбора - Структура - см. функцию ПараметрыОтбораПриВыбореДокументаРасчетовСКлиентами().
//
Процедура ДополнитьТекстЗапросаДокументыРасчетовСКлиентами(ТекстЗапроса, ТипОбъекта, ПараметрыОтбора)
	
	Если ПараметрыОтбора.ВводПоСтроке Или ПараметрыОтбора.ЭтоУИП Или ПараметрыОтбора.ОтборПоОрганизацииИКонтрагенту 
		И ТипОбъекта <> Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	И ДанныеДокумента.Организация В (&Организация)";
		
	КонецЕсли;
	
	Если (ПараметрыОтбора.ВводПоСтроке И Не ПараметрыОтбора.ЭтоУИП) 
		Или ПараметрыОтбора.ОтборПоОрганизацииИКонтрагенту Тогда
		
		Если ТипОбъекта = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|	И ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
			|		ДанныеДокумента.Контрагент
			|	ИНАЧЕ
			|		ДанныеДокумента.ОрганизацияПолучатель
			|	КОНЕЦ В (&Контрагент)";
			
		ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|	И (ДанныеДокумента.Организация В (&Организация)
			|		ИЛИ ВЫБОР КОГДА ДанныеДокумента.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровМеждуОрганизациями.Комиссионный)
			|				ТОГДА ДанныеДокумента.ОрганизацияПолучатель В (&Организация) 
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ)
			|	И (ДанныеДокумента.ОрганизацияПолучатель В (&Контрагент)
			|		ИЛИ ВЫБОР КОГДА ДанныеДокумента.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровМеждуОрганизациями.Комиссионный)
			|				ТОГДА ДанныеДокумента.Организация В (&Контрагент) 
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ)";
			
		ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств")
			ИЛИ ТипОбъекта = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств")
			ИЛИ ТипОбъекта = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
			ИЛИ ТипОбъекта = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Ссылка.Контрагент В (&Контрагент)";
			
		Иначе
			
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Контрагент В (&Контрагент)";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыОтбора.ЭтоУИП Тогда
		
		Если ТипОбъекта <> Тип("ДокументСсылка.ВозвратТоваровОтКлиента")
			И ТипОбъекта <> Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") 
			И ТипОбъекта <> Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
			И ТипОбъекта <> Тип("ДокументСсылка.РасходныйКассовыйОрдер")
			И ТипОбъекта <> Тип("ДокументСсылка.ПервичныйДокумент") Тогда
			
			Если ПараметрыОтбора.ВводПоСтроке Тогда
				
				ТекстЗапроса = ТекстЗапроса + "
				|	И ДанныеДокумента.ИдентификаторПлатежа ПОДОБНО &СтрокаПоиска";
				
			Иначе
				
				ТекстЗапроса = ТекстЗапроса + "
				|	И ДанныеДокумента.ИдентификаторПлатежа В (&СтрокаПоиска)";
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыОтбора.ВводПоСтроке Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска";
		
	КонецЕсли;
	
	Если ПараметрыОтбора.ИсключитьРедактируемыйДокумент
		И (ТипОбъекта = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			ИЛИ ТипОбъекта = Тип("ДокументСсылка.ВозвратТоваровОтКлиента")) Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	И ДанныеДокумента.Ссылка <> &ИсключаемыйДокумент";
		
	КонецЕсли;
	
	Если ПараметрыОтбора.ЗапретитьДоговорыПоДокументам
		И ТипОбъекта = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|";
	
КонецПроцедуры

// Возвращает параметры, используемые при выборе документа расчетов с поставщиками.
// Используется в общей форме "ВыборДокументаРасчетов" и в обработке получения данных выбора основания платежа.
// 
// Возвращаемое значение: 
// Структура с ключами
//	ВводПоСтроке - Булево - Признак получения данных выбора.
//	ОтборПоОрганизацииИКонтрагенту - Булево - Есть отбор по организации и контрагенту.
//	ИсключитьХозяйственнуюОперацию - Булево - Ограничить документы к выбору по хозяйственной операции.
//	ИсключитьРедактируемыйДокумент - Булево - Не включать документ из которого вызывается подбор в данные выбора.
//	ЗапретитьДоговорыПоДокументам - Булево - Запретить договоры с порядком расчетов "по заказам/накладным".
//
Функция ПараметрыОтбораПриВыбореДокументаРасчетовСПоставщиками() Экспорт
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВводПоСтроке",                   Ложь);
	ПараметрыОтбора.Вставить("ОтборПоОрганизацииИКонтрагенту", Ложь);
	ПараметрыОтбора.Вставить("ИсключитьХозяйственнуюОперацию", Ложь);
	ПараметрыОтбора.Вставить("ИсключитьРедактируемыйДокумент", Ложь);
	ПараметрыОтбора.Вставить("ЗапретитьДоговорыПоДокументам",  Ложь);
	
	Возврат ПараметрыОтбора;
	
КонецФункции

// Дополняет текст запроса отборами в функции ПолучитьТекстЗапросаДокументыРасчетовСПоставщиками().
// 
// Параметры:
//	ТекстЗапроса - Строка - Изменяемый текст запроса.
//	ТипОбъекта - Тип - Тип документа для которого формируется запрос.
//	ПараметрыОтбора - Структура - см. функцию ПараметрыОтбораПриВыбореДокументаРасчетовСПоставщиками().
//
Процедура ДополнитьТекстЗапросаДокументыРасчетовСПоставщиками(ТекстЗапроса, ТипОбъекта, ПараметрыОтбора)
	
	Если ПараметрыОтбора.ВводПоСтроке Или ПараметрыОтбора.ОтборПоОрганизацииИКонтрагенту Тогда
		
		Если ТипОбъекта = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.ОрганизацияПолучатель В (&Организация)
			|	И ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
			|		ДанныеДокумента.Контрагент
			|	ИНАЧЕ
			|		ДанныеДокумента.Организация
			|	КОНЕЦ В (&Контрагент)";
		ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|	И (ДанныеДокумента.Организация В (&Контрагент)
			|		ИЛИ ВЫБОР КОГДА ДанныеДокумента.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровМеждуОрганизациями.Комиссионный)
			|				ТОГДА ДанныеДокумента.ОрганизацияПолучатель В (&Контрагент) 
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ)
			|	И (ДанныеДокумента.ОрганизацияПолучатель В (&Организация)
			|		ИЛИ ВЫБОР КОГДА ДанныеДокумента.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровМеждуОрганизациями.Комиссионный)
			|				ТОГДА ДанныеДокумента.Организация В (&Организация) 
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ)";
			
		ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств")
			ИЛИ ТипОбъекта = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств")
			ИЛИ ТипОбъекта = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
			ИЛИ ТипОбъекта = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Ссылка.Контрагент В (&Контрагент)";
		Иначе
		
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Организация В (&Организация)
			|	И ДанныеДокумента.Контрагент В (&Контрагент)";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыОтбора.ВводПоСтроке Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска";
		
	КонецЕсли;
	
	Если ПараметрыОтбора.ИсключитьРедактируемыйДокумент
		И ТипОбъекта = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	И ДанныеДокумента.Ссылка <> &ИсключаемыйДокумент";
		
	КонецЕсли;
	
	
	Если ПараметрыОтбора.ИсключитьХозяйственнуюОперацию
		И ТипОбъекта = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)";
		
	КонецЕсли;
	
	Если ПараметрыОтбора.ЗапретитьДоговорыПоДокументам
		И ТипОбъекта = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|";
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

// Функция формирует массив организаций, доступных для подбора остатков расчетов с партнером.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, указанная в документе.
//	ЕстьРасчетыСПоставщиками - Булево - Признак наличия расчетов с партнерами.
//	ЕстьРасчетыСКлиентами - Булево - Признак наличия расчетов с поставщиками.
//
// Возвращаемое значение:
//	Массив - Массив доступных организаций.
//
Функция ДоступныеОрганизацийДляПодбораОстатков(Организация, ЕстьРасчетыСПоставщиками, ЕстьРасчетыСКлиентами)
	
	ДоступныеОрганизации = Новый Массив;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ГоловнаяОрганизация = &Организация
		|	И Организации.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию
		|	И (&ЕстьРасчетыСКлиентами ИЛИ &ЕстьРасчетыСПоставщиками)
		|	И Организации.ОбособленноеПодразделение
		|");
		Запрос.УстановитьПараметр("ЕстьРасчетыСПоставщиками", ЕстьРасчетыСПоставщиками);
		Запрос.УстановитьПараметр("ЕстьРасчетыСКлиентами", ЕстьРасчетыСКлиентами);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		ДоступныеОрганизации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	КонецЕсли;
	
	ДоступныеОрганизации.Добавить(Организация);
	
	Возврат ДоступныеОрганизации;
	
КонецФункции

Функция ТекстЗапросаПоОстаткамРасчетовСПоставщиками()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
	|	ВЫБОР КОГДА ТаблицаПлатежей.Сумма ЕСТЬ NULL ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ КАК Выбран,
	|	ЕСТЬNULL(ТаблицаПлатежей.Сумма, 0) КАК Сумма,
	|	&ВалютаДокумента КАК ВалютаДокумента,
	|
	|	РасчетыСПоставщиками.ЗаказПоставщику.Дата КАК Дата,
	|	РасчетыСПоставщиками.ЗаказПоставщику.Номер КАК Номер,
	|	РасчетыСПоставщиками.ЗаказПоставщику КАК Заказ,
	|	"""" КАК ИдентификаторПлатежа,
	|	РасчетыСПоставщиками.Валюта КАК ВалютаВзаиморасчетов,
	|	АналитикаПоПартнерам.Организация КАК Организация,
	|	АналитикаПоПартнерам.Партнер КАК Партнер,
	|	АналитикаПоПартнерам.Контрагент КАК Контрагент,
	|	АналитикаПоПартнерам.Договор КАК Договор,
	|	ЕСТЬNULL(АналитикаПоПартнерам.Договор.ПлатежиПо275ФЗ, ЛОЖЬ) КАК ПлатежиПо275ФЗ,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(АналитикаПоПартнерам.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка))
	|			<> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) ТОГДА
	|		ЕСТЬNULL(АналитикаПоПартнерам.Договор.СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка))
	|	КОГДА ТИПЗНАЧЕНИЯ(РасчетыСПоставщиками.ЗаказПоставщику) <> ТИП(Справочник.ДоговорыКонтрагентов)
	|		И ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСПоставщиками.ЗаказПоставщику.Соглашение КАК Справочник.СоглашенияСПоставщиками).СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка))
	|			<> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) ТОГДА
	|			ВЫРАЗИТЬ(РасчетыСПоставщиками.ЗаказПоставщику.Соглашение КАК Справочник.СоглашенияСПоставщиками).СтатьяДвиженияДенежныхСредств
	|	ИНАЧЕ
	|		&СтатьяДвиженияДенежныхСредств
	|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств,
	|	
	|	ВЫБОР КОГДА РасчетыСПоставщиками.СуммаОстаток > 0 ТОГДА
	|		РасчетыСПоставщиками.СуммаОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК ДолгПартнера,
	|
	|	ВЫБОР КОГДА РасчетыСПоставщиками.ОплачиваетсяОстаток - РасчетыСПоставщиками.КОплатеОстаток > 0
	|		И НЕ &ТолькоБезусловнаяЗадолженность
	|	ТОГДА
	|		РасчетыСПоставщиками.ОплачиваетсяОстаток - РасчетыСПоставщиками.КОплатеОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК КОплате,
	|	
	|	ВЫБОР КОГДА РасчетыСПоставщиками.СуммаОстаток < 0 ТОГДА
	|		-РасчетыСПоставщиками.СуммаОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК НашДолг
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(, 
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|			ИЗ
	|				АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|			)
	|	) КАК РасчетыСПоставщиками
	|		
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|	ПО 
	|		РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = АналитикаПоПартнерам.КлючАналитики
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаПлатежей КАК ТаблицаПлатежей
	|	ПО
	|		РасчетыСПоставщиками.ЗаказПоставщику = ТаблицаПлатежей.Заказ
	|		И РасчетыСПоставщиками.Валюта = ТаблицаПлатежей.Валюта
	|
	|ГДЕ
	|	(&ДебиторскаяЗадолженность
	|	И РасчетыСПоставщиками.СуммаОстаток > 0)
	|	ИЛИ 
	|	(Не &ДебиторскаяЗадолженность
	|	И РасчетыСПоставщиками.ОплачиваетсяОстаток - РасчетыСПоставщиками.КОплатеОстаток > 0
	|	И НЕ &ТолькоБезусловнаяЗадолженность
	|	)
	|	ИЛИ 
	|	(Не &ДебиторскаяЗадолженность
	|	И РасчетыСПоставщиками.ОплачиваетсяОстаток - РасчетыСПоставщиками.СуммаОстаток > 0
	|	)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПоОстаткамРасчетовСКлиентами()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
	|	ВЫБОР КОГДА ТаблицаПлатежей.Сумма ЕСТЬ NULL ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ КАК Выбран,
	|	ЕСТЬNULL(ТаблицаПлатежей.Сумма, 0) КАК Сумма,
	|	&ВалютаДокумента КАК ВалютаДокумента,
	|
	|	РасчетыСКлиентами.ЗаказКлиента.Дата КАК Дата,
	|	РасчетыСКлиентами.ЗаказКлиента.Номер КАК Номер,
	|	РасчетыСКлиентами.ЗаказКлиента КАК Заказ,
	|	РасчетыСКлиентами.ЗаказКлиента.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
	|	РасчетыСКлиентами.Валюта КАК ВалютаВзаиморасчетов,
	|	АналитикаПоПартнерам.Организация КАК Организация,
	|	АналитикаПоПартнерам.Партнер КАК Партнер,
	|	АналитикаПоПартнерам.Контрагент КАК Контрагент,
	|	АналитикаПоПартнерам.Договор КАК Договор,
	|	ЛОЖЬ КАК ПлатежиПо275ФЗ,
	|	
	|	ВЫБОР КОГДА АналитикаПоПартнерам.Договор.СтатьяДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) ТОГДА
	|		АналитикаПоПартнерам.Договор.СтатьяДвиженияДенежныхСредств
	|	КОГДА ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.ЗаказКлиента) <> ТИП(Справочник.ДоговорыКонтрагентов)
	|		И ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСКлиентами.ЗаказКлиента.Соглашение КАК Справочник.СоглашенияСКлиентами).СтатьяДвиженияДенежныхСредств, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка))
	|			<> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) ТОГДА
	|			ВЫРАЗИТЬ(РасчетыСКлиентами.ЗаказКлиента.Соглашение КАК Справочник.СоглашенияСКлиентами).СтатьяДвиженияДенежныхСредств
	|	ИНАЧЕ
	|		&СтатьяДвиженияДенежныхСредств
	|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств,
	|	
	|	ВЫБОР КОГДА РасчетыСКлиентами.СуммаОстаток > 0 ТОГДА
	|		РасчетыСКлиентами.СуммаОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК ДолгПартнера,
	|	
	|	ВЫБОР КОГДА РасчетыСКлиентами.КОплатеОстаток - РасчетыСКлиентами.ОплачиваетсяОстаток > 0
	|		И НЕ &ТолькоБезусловнаяЗадолженность
	|	ТОГДА
	|		РасчетыСКлиентами.КОплатеОстаток - РасчетыСКлиентами.ОплачиваетсяОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК КОплате,
	|	
	|	ВЫБОР КОГДА РасчетыСКлиентами.СуммаОстаток < 0 ТОГДА
	|		-РасчетыСКлиентами.СуммаОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК НашДолг
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(, 
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|			ИЗ
	|				АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|			)
	|	) КАК РасчетыСКлиентами
	|		
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|	ПО 
	|		РасчетыСКлиентами.АналитикаУчетаПоПартнерам = АналитикаПоПартнерам.КлючАналитики
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаПлатежей КАК ТаблицаПлатежей
	|	ПО
	|		РасчетыСКлиентами.ЗаказКлиента = ТаблицаПлатежей.Заказ
	|		И РасчетыСКлиентами.Валюта = ТаблицаПлатежей.Валюта
	|
	|ГДЕ
	|	(Не &ДебиторскаяЗадолженность
	|	И РасчетыСКлиентами.СуммаОстаток < 0)
	|	ИЛИ 
	|	(&ДебиторскаяЗадолженность
	|	И РасчетыСКлиентами.КОплатеОстаток - РасчетыСКлиентами.ОплачиваетсяОстаток > 0
	|	И НЕ &ТолькоБезусловнаяЗадолженность
	|	)
	|	ИЛИ 
	|	(&ДебиторскаяЗадолженность
	|	И РасчетыСКлиентами.СуммаОстаток > 0
	|	)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Процедура заполняет таблицу остатков расчетов с партнером.
//
// Параметры:
//	Реквизиты - Структура - Структура должна содержать значения: 
//				Дата, Организация, СуммаДокумента, Валюта, Контрагент, Партнер, ХозяйственнаяОперация
//	АдресПлатежейВХранилище - Строка - Адрес во временном хранилище, в которое помещена табличная часть документа.
//	ТаблицаОстатковРасчетов - ТаблицаЗначений - Таблица с остатками расчетов.
//	УчитыватьФилиалы - Булево - Признак включения остатков по филиалам организации.
//
Процедура ЗаполнитьТаблицуОстатковРасчетов(Реквизиты, АдресПлатежейВХранилище, ТаблицаОстатковРасчетов, УчитыватьФилиалы = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВалютаДокумента", Реквизиты.Валюта);
	Запрос.УстановитьПараметр("Контрагент", Реквизиты.Контрагент);
	
	Если Не ЗначениеЗаполнено(Реквизиты.Партнер) Тогда
		Запрос.УстановитьПараметр("Партнер", Неопределено);
	Иначе
		Запрос.УстановитьПараметр("Партнер", Реквизиты.Партнер);
	КонецЕсли;
	Запрос.УстановитьПараметр("ПартнерПрочиеОтношения", Реквизиты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
	
	Если Реквизиты.Свойство("ТипРасчетов") Тогда
		
		ЕстьРасчетыСПоставщиками = (Реквизиты.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);
		ЕстьРасчетыСКлиентами    = (Реквизиты.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);
		
	Иначе
	
		МассивРасчетыСПоставщиками = Новый Массив;
		МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
		МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
		МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
		МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику);
		МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности);
		МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности);
		МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
		МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации);
		МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.АвансовыйОтчет);
		МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями);
		МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхДокументовПоставщику);
		МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхДокументовОтПоставщика);
		
		ЕстьРасчетыСПоставщиками = МассивРасчетыСПоставщиками.Найти(Реквизиты.ХозяйственнаяОперация) <> Неопределено;
		
		МассивРасчетыСКлиентами = Новый Массив;
		МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
		МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
		МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента);
		МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя);
		МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности);
		МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности);
		МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации);
		МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
		
		ЕстьРасчетыСКлиентами = МассивРасчетыСКлиентами.Найти(Реквизиты.ХозяйственнаяОперация) <> Неопределено;
		
		Если Не ЕстьРасчетыСКлиентами И Не ЕстьРасчетыСПоставщиками Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Подбор по остаткам расчетов с партнерами не поддерживается для операции %1'"),
				Реквизиты.ХозяйственнаяОперация);
			ВызватьИсключение Текст;
		КонецЕсли;
		
	КонецЕсли;
	
	Если УчитыватьФилиалы Тогда
		ДоступныеОрганизации = ДоступныеОрганизацийДляПодбораОстатков(Реквизиты.Организация, ЕстьРасчетыСПоставщиками, ЕстьРасчетыСКлиентами);
	Иначе
		ДоступныеОрганизации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Реквизиты.Организация);
	КонецЕсли;
	
	СтатьяДвиженияДенежныхСредств =
		Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(Реквизиты.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", Реквизиты.ХозяйственнаяОперация);
	
	Запрос.УстановитьПараметр("Организация", ДоступныеОрганизации);
	
	МассивДебиторскаяЗадолженность = Новый Массив;
	МассивДебиторскаяЗадолженность.Добавить(Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности);
	МассивДебиторскаяЗадолженность.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	МассивДебиторскаяЗадолженность.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента);
	МассивДебиторскаяЗадолженность.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации);
	МассивДебиторскаяЗадолженность.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя);
	МассивДебиторскаяЗадолженность.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
	МассивДебиторскаяЗадолженность.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации);
	Запрос.УстановитьПараметр("ДебиторскаяЗадолженность", МассивДебиторскаяЗадолженность.Найти(Реквизиты.ХозяйственнаяОперация) <> Неопределено);
	
	МассивТолькоБезусловнаяЗадолженность = Новый Массив;
	МассивТолькоБезусловнаяЗадолженность.Добавить(Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности);
	МассивТолькоБезусловнаяЗадолженность.Добавить(Перечисления.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности);
	МассивТолькоБезусловнаяЗадолженность.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	МассивТолькоБезусловнаяЗадолженность.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
	МассивТолькоБезусловнаяЗадолженность.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	Запрос.УстановитьПараметр("ТолькоБезусловнаяЗадолженность", МассивТолькоБезусловнаяЗадолженность.Найти(Реквизиты.ХозяйственнаяОперация) <> Неопределено);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РасшифровкаПлатежа.Заказ КАК Заказ,
	|	РасшифровкаПлатежа.ВалютаВзаиморасчетов КАК Валюта,
	|	РасшифровкаПлатежа.Сумма КАК Сумма
	|
	|ПОМЕСТИТЬ ТаблицаПлатежей
	|ИЗ
	|	&РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики,
	|	АналитикаПоПартнерам.Организация КАК Организация,
	|	АналитикаПоПартнерам.Партнер КАК Партнер,
	|	АналитикаПоПартнерам.Контрагент КАК Контрагент,
	|	АналитикаПоПартнерам.Договор КАК Договор
	|
	|ПОМЕСТИТЬ АналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|ГДЕ
	|	&Партнер <> Неопределено
	|	И АналитикаПоПартнерам.Организация В (&Организация)
	|	И АналитикаПоПартнерам.Партнер = &Партнер
	|	И АналитикаПоПартнерам.Контрагент = &Контрагент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики,
	|	АналитикаПоПартнерам.Организация КАК Организация,
	|	АналитикаПоПартнерам.Партнер КАК Партнер,
	|	АналитикаПоПартнерам.Контрагент КАК Контрагент,
	|	АналитикаПоПартнерам.Договор КАК Договор
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|ГДЕ
	|	&Партнер = Неопределено
	|	И АналитикаПоПартнерам.Организация В (&Организация)
	|	И АналитикаПоПартнерам.Контрагент = &Контрагент
	|	И (&ПартнерПрочиеОтношения И АналитикаПоПартнерам.Партнер.ПрочиеОтношения
	|		ИЛИ НЕ &ПартнерПрочиеОтношения)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючАналитики
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|
	|//ТекстЗапросаРасчетыСКлиентами
	|
	|//ТекстОбъединитьВсе
	|
	|//ТекстЗапросаРасчетыСПоставщиками
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Контрагент,
	|	Дата,
	|	Номер
	|";
	Если ЕстьРасчетыСКлиентами Тогда
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"//ТекстЗапросаРасчетыСКлиентами",
			ТекстЗапросаПоОстаткамРасчетовСКлиентами());
	КонецЕсли;
	Если ЕстьРасчетыСПоставщиками Тогда
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"//ТекстЗапросаРасчетыСПоставщиками",
			ТекстЗапросаПоОстаткамРасчетовСПоставщиками());
	КонецЕсли;
	Если ЕстьРасчетыСКлиентами И ЕстьРасчетыСПоставщиками Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстОбъединитьВсе", "ОБЪЕДИНИТЬ ВСЕ");
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;
	
	Если ЗначениеЗаполнено(АдресПлатежейВХранилище) Тогда
		РасшифровкаПлатежа = ПолучитьИзВременногоХранилища(АдресПлатежейВХранилище);
	Иначе
		Если ТаблицаОстатковРасчетов = Неопределено Тогда
			РасшифровкаПлатежа = Новый ТаблицаЗначений;
			РасшифровкаПлатежа.Колонки.Добавить("Заказ", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
			РасшифровкаПлатежа.Колонки.Добавить("ВалютаВзаиморасчетов", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
			РасшифровкаПлатежа.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
		Иначе
			РасшифровкаПлатежа = ТаблицаОстатковРасчетов.Выгрузить(,).СкопироватьКолонки();
		КонецЕсли;
	КонецЕсли;
	РасшифровкаПлатежа.Свернуть("Заказ, ВалютаВзаиморасчетов", "Сумма");
	
	Если РасшифровкаПлатежа.Количество() = 1 И Не ЗначениеЗаполнено(РасшифровкаПлатежа[0].Заказ) Тогда
		РасшифровкаПлатежа.Очистить();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("РасшифровкаПлатежа", РасшифровкаПлатежа);
	
	
	Если ТаблицаОстатковРасчетов = Неопределено Тогда
		ТаблицаОстатковРасчетов = Запрос.Выполнить().Выгрузить();
	Иначе
		ТаблицаОстатковРасчетов.Загрузить(Запрос.Выполнить().Выгрузить());
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		СуммаКРаспределению = Реквизиты.СуммаДокумента;
	Иначе
		СуммаКРаспределению = 0;
	КонецЕсли;
	
	СоответствиеВалютаКурс = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из ТаблицаОстатковРасчетов Цикл
		
		Если Не СтрокаТаблицы.Выбран Тогда
			
			Если СтрокаТаблицы.КОплате <> 0 Тогда
				СтрокаТаблицы.Сумма = СтрокаТаблицы.КОплате;
				
			ИначеЕсли СтрокаТаблицы.НашДолг <> 0 Тогда
				СтрокаТаблицы.Сумма = СтрокаТаблицы.НашДолг;
				
			ИначеЕсли СтрокаТаблицы.ДолгПартнера <> 0 Тогда
				СтрокаТаблицы.Сумма = СтрокаТаблицы.ДолгПартнера;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Реквизиты.Валюта) И Реквизиты.Валюта <> СтрокаТаблицы.ВалютаВзаиморасчетов Тогда
				
				Коэффициенты = СоответствиеВалютаКурс.Получить(СтрокаТаблицы.ВалютаВзаиморасчетов);
				Если Коэффициенты = Неопределено Тогда
					Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(Реквизиты.Валюта, СтрокаТаблицы.ВалютаВзаиморасчетов, ?(Реквизиты.Дата <> '00010101', Реквизиты.Дата, ТекущаяДатаСеанса()));
					СоответствиеВалютаКурс.Вставить(СтрокаТаблицы.ВалютаВзаиморасчетов, Коэффициенты);
				КонецЕсли;
					
				СтрокаТаблицы.Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, СтрокаТаблицы.Сумма / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СуммаКРаспределению > 0 Тогда
			
			СтрокаТаблицы.Выбран = Истина;
			Если СтрокаТаблицы.Сумма > СуммаКРаспределению Тогда
				СтрокаТаблицы.Сумма = СуммаКРаспределению;
			КонецЕсли;
			СуммаКРаспределению = СуммаКРаспределению - СтрокаТаблицы.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция формирует массив допустимых хозяйственных операций договора с контрагентом.
//
// Параметры:
//	ОперацияДокумента - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
//
// Возвращаемое значение:
//	Массив - Массив хозяйственных операций.
//
Функция ХозяйственнаяОперацияДоговора(ОперацияДокумента) Экспорт
	
	ХозяйственнаяОперацияДоговора = Новый Массив;
	Если ОперацияДокумента = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
	 ИЛИ ОперацияДокумента = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
		
	ИначеЕсли ОперацияДокумента = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
	 ИЛИ ОперацияДокумента = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика Тогда
		
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
		
	КонецЕсли;
	
	Возврат ХозяйственнаяОперацияДоговора;
	
КонецФункции

Процедура УстановитьПустойОбъектРасчета(Запись)
	
	Если НЕ ЗначениеЗаполнено(Запись.ОбъектРасчетов) Тогда
		Запись.ОбъектРасчетов = Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Запись.КорОбъектРасчетов) Тогда
		Запись.КорОбъектРасчетов = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЗаполнитьПорядокРасчетовСКлиентами(ТаблицаРасчеты, ТипДокумента) Экспорт
	
	ТаблицаРасчеты.Колонки.Добавить("ПорядокОперации",            Новый ОписаниеТипов("Строка"));
	ТаблицаРасчеты.Колонки.Добавить("ПорядокЗачетаПоДатеПлатежа", Новый ОписаниеТипов("Строка"));
	
	ВидТипДокумента = ОперативныеВзаиморасчетыСервер.ВидТипДокумента(ТипДокумента);
	
	ЕстьДатаПлатежа = ТаблицаРасчеты.Колонки.Найти("ДатаПлатежа") <> Неопределено;
	ЕстьСумма = ТаблицаРасчеты.Колонки.Найти("Сумма") <> Неопределено;
	ЕстьКОплате = ТаблицаРасчеты.Колонки.Найти("КОплате") <> Неопределено;
	ЕстьКОтгрузке = ТаблицаРасчеты.Колонки.Найти("КОтгрузке") <> Неопределено;
	
	Для Каждого Стр из ТаблицаРасчеты Цикл
		
		ДатаПлатежа = ?(ЕстьДатаПлатежа И ЗначениеЗаполнено(Стр.ДатаПлатежа), Стр.ДатаПлатежа, Стр.ДатаРегистратора);
		
		//План оплаты
		Если (НЕ ЕстьСумма ИЛИ Стр.Сумма = 0) И Стр.КОплате <> 0 Тогда
			Стр.ПорядокОперации = ОперативныеВзаиморасчетыСервер.Порядок(Стр.ДатаРегистратора, Стр.НомерРегистратора, ВидТипДокумента);
			Стр.ПорядокЗачетаПоДатеПлатежа = ОперативныеВзаиморасчетыСервер.Порядок(ДатаПлатежа, Стр.НомерРегистратора, ВидТипДокумента);
		//Платежные документы и сторно отгрузки.
		ИначеЕсли Стр.ВидДвижения = ВидДвиженияНакопления.Расход И ЕстьСумма И  Стр.Сумма > 0
			Или Стр.ВидДвижения = ВидДвиженияНакопления.Приход И ЕстьСумма И Стр.Сумма < 0 Тогда
			Стр.ПорядокОперации = ОперативныеВзаиморасчетыСервер.Порядок(Стр.Период, Стр.НомерРегистратора, ВидТипДокумента);
			Стр.ПорядокЗачетаПоДатеПлатежа = Стр.ПорядокОперации;
		//Накладные и пр.
		ИначеЕсли ЕстьСумма И Стр.Сумма <> 0 ИЛИ ЕстьКОплате И Стр.КОплате <> 0 ИЛИ ЕстьКОтгрузке И Стр.КОтгрузке <> 0 Тогда
			Стр.ПорядокОперации = ОперативныеВзаиморасчетыСервер.Порядок(Стр.ДатаРегистратора, Стр.НомерРегистратора,,
				ТипДокумента, Стр.ВидДвижения);
			Стр.ПорядокЗачетаПоДатеПлатежа = ОперативныеВзаиморасчетыСервер.Порядок(ДатаПлатежа,
				Стр.НомерРегистратора,, ТипДокумента, Стр.ВидДвижения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЗаполнитьПорядокРасчетовСПоставщиками(ТаблицаРасчеты, ТипДокумента) Экспорт
	
	ТаблицаРасчеты.Колонки.Добавить("ПорядокОперации",            Новый ОписаниеТипов("Строка"));
	ТаблицаРасчеты.Колонки.Добавить("ПорядокЗачетаПоДатеПлатежа", Новый ОписаниеТипов("Строка"));
	
	ВидТипДокумента = ОперативныеВзаиморасчетыСервер.ВидТипДокумента(ТипДокумента);
	
	ЕстьДатаПлатежа = ТаблицаРасчеты.Колонки.Найти("ДатаПлатежа") <> Неопределено;
	ЕстьСумма = ТаблицаРасчеты.Колонки.Найти("Сумма") <> Неопределено;
	ЕстьКОплате = ТаблицаРасчеты.Колонки.Найти("КОплате") <> Неопределено;
	ЕстьКПоступлению = ТаблицаРасчеты.Колонки.Найти("КПоступлению") <> Неопределено;
	
	Для Каждого Стр из ТаблицаРасчеты Цикл
		
		ДатаПлатежа = ?(ЕстьДатаПлатежа И ЗначениеЗаполнено(Стр.ДатаПлатежа), Стр.ДатаПлатежа, Стр.ДатаРегистратора);
		
		Если (НЕ ЕстьСумма ИЛИ Стр.Сумма = 0) И Стр.КОплате <> 0 Тогда
			Стр.ПорядокОперации = ОперативныеВзаиморасчетыСервер.Порядок(Стр.ДатаРегистратора, Стр.НомерРегистратора, ВидТипДокумента);
			Стр.ПорядокЗачетаПоДатеПлатежа = ОперативныеВзаиморасчетыСервер.Порядок(ДатаПлатежа, Стр.НомерРегистратора, ВидТипДокумента);
		ИначеЕсли Стр.ВидДвижения = ВидДвиженияНакопления.Приход И ЕстьСумма И Стр.Сумма > 0
			Или Стр.ВидДвижения = ВидДвиженияНакопления.Расход И ЕстьСумма И Стр.Сумма < 0 Тогда
			Стр.ПорядокОперации = ОперативныеВзаиморасчетыСервер.Порядок(Стр.Период, Стр.НомерРегистратора, ВидТипДокумента);
			Стр.ПорядокЗачетаПоДатеПлатежа = Стр.ПорядокОперации;
		ИначеЕсли ЕстьСумма И Стр.Сумма <> 0 ИЛИ ЕстьКОплате И Стр.КОплате <> 0 ИЛИ ЕстьКПоступлению И Стр.КПоступлению <> 0 Тогда
			Стр.ПорядокОперации = ОперативныеВзаиморасчетыСервер.Порядок(Стр.ДатаРегистратора, Стр.НомерРегистратора,,
				ТипДокумента, Стр.ВидДвижения);
			Стр.ПорядокЗачетаПоДатеПлатежа = ОперативныеВзаиморасчетыСервер.Порядок(ДатаПлатежа,
				Стр.НомерРегистратора,, ТипДокумента, Стр.ВидДвижения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СписатьСуммуПоКурсу(СуммаРегл, Данные, ПоследнийПлатеж, Кор = "")
	
	ИмяПоляСуммаВВалютеВзаиморасчетов = ?(ПустаяСтрока(Кор), "СуммаВВалютеВзаиморасчетов", "КорСуммаВВалютеВзаиморасчетов");
	СуммаВзаиморасчетов = Окр(СуммаРегл/?(Данные.КурсВалютыВзаиморасчетов=0, 1, Данные.КурсВалютыВзаиморасчетов), 2);
	СуммаВВалютеВзаиморасчетов = СписатьСумму(Данные[ИмяПоляСуммаВВалютеВзаиморасчетов], СуммаВзаиморасчетов, 
												ПоследнийПлатеж И Данные[ИмяПоляСуммаВВалютеВзаиморасчетов] <= СуммаВзаиморасчетов);
	Если Данные.СуммаРегл <= 0 И Данные[ИмяПоляСуммаВВалютеВзаиморасчетов] <> 0 Тогда
		СуммаВВалютеВзаиморасчетов = СуммаВВалютеВзаиморасчетов + Данные[ИмяПоляСуммаВВалютеВзаиморасчетов];
	КонецЕсли;
	
	Возврат СуммаВВалютеВзаиморасчетов;
	
Конецфункции

#КонецОбласти

#Область ШаблоныПолейДляОтчетов

Функция ШаблонПоляОтгруженоКлиенту() Экспорт
	
	Возврат "ВЫБОР
	|		//Корректировка задолженности всегда отображается только по отгружено.
	|		//Возврат оплаты клиенту отражаем как отгрузку
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности))
	|			ТОГДА -ДолгРегл + ПредоплатаРегл
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
	|			ТОГДА ДолгРегл - ПредоплатаРегл
	|		//Обычная отгрузка, долг всегда есть
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И НЕ РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОПерации.ВзаимозачетЗадолженности))
	|			И НЕ ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.ДокументРегистратор) В (ТИП(Документ.РасчетКурсовыхРазниц),ТИП(Документ.СписаниеЗадолженности))
	|			ТОГДА РасчетыПоСрокам.ДолгРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	
КонецФункции

Функция ШаблонПоляЗачтеноКлиенту() Экспорт
	
	Возврат "ВЫБОР
	|		//Перенос аванса с объекта расчетов платежки и взаимозачет
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И (РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|				ИЛИ РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности)
	|				ИЛИ РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента))
	|			ТОГДА -РасчетыПоСрокам.ПредоплатаРегл + РасчетыПоСрокам.ДолгРегл
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И (РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|				ИЛИ РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента)
	|				ИЛИ РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности))
	|			ТОГДА РасчетыПоСрокам.ПредоплатаРегл - РасчетыПоСрокам.ДолгРегл
	|		//Обычный зачет аванса
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомиссионера),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомитенту))
	|			ТОГДА -РасчетыПоСрокам.ПредоплатаРегл + РасчетыПоСрокам.ДолгРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	
КонецФункции

Функция ШаблонПоляОплаченоКлиентом() Экспорт
	
	Возврат "ВЫБОР
	|		//Обычная оплата
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И НЕ РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности))
	|			И НЕ ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.ДокументРегистратор) В (ТИП(Документ.РасчетКурсовыхРазниц),ТИП(Документ.СписаниеЗадолженности))
	|			ТОГДА РасчетыПоСрокам.ПредоплатаРегл
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту),
	|																ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиентуНаПлатежнуюКарту),
	|																ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию))
	|			ТОГДА - РасчетыПоСрокам.ДолгРегл
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И НЕ РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомиссионера),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомитенту))
	|			И НЕ ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.ДокументРегистратор) В (ТИП(Документ.РасчетКурсовыхРазниц),ТИП(Документ.СписаниеЗадолженности))
	|			ТОГДА РасчетыПоСрокам.ДолгРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	
КонецФункции

Функция ШаблонПоляПоставленоПоставщиком() Экспорт
	
	Возврат "ВЫБОР
	|		//Корректировка задолженности всегда отображается только по отгружено
	|		//Возврат оплаты от поставщика отражаем как поставку
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности))
	|			ТОГДА -ДолгРегл + ПредоплатаРегл
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
	|			ТОГДА ДолгРегл - ПредоплатаРегл
	|		//Обычная отгрузка, долг всегда есть
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И НЕ РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОПерации.ВзаимозачетЗадолженности))
	|			И НЕ ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.ДокументРегистратор) В (ТИП(Документ.РасчетКурсовыхРазниц),ТИП(Документ.СписаниеЗадолженности))
	|			ТОГДА РасчетыПоСрокам.ДолгРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	
КонецФункции

Функция ШаблонПоляЗачтеноПоставщиком() Экспорт
	
	Возврат "ВЫБОР
	|		//Перенос аванса с объекта расчетов платежки и взаимозачет
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И (РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|				ИЛИ РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности))
	|			ТОГДА -РасчетыПоСрокам.ПредоплатаРегл + РасчетыПоСрокам.ДолгРегл
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И (РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|				ИЛИ РасчетыПоСрокам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности))
	|			ТОГДА РасчетыПоСрокам.ПредоплатаРегл - РасчетыПоСрокам.ДолгРегл
	|		//Обычный зачет аванса
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомиссионера),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомитенту))
	|			ТОГДА -РасчетыПоСрокам.ПредоплатаРегл + РасчетыПоСрокам.ДолгРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	
КонецФункции

Функция ШаблонПоляОплаченоПоставщику() Экспорт
	
	Возврат "ВЫБОР
	|		//Обычная оплата
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И НЕ РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса),
	|															ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности),
	|															ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности),
	|															ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика),
	|															ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации))
	|			И НЕ ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.ДокументРегистратор) В (ТИП(Документ.РасчетКурсовыхРазниц),ТИП(Документ.СписаниеЗадолженности))
	|			ТОГДА РасчетыПоСрокам.ПредоплатаРегл
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации))
	|			ТОГДА - РасчетыПоСрокам.ДолгРегл
	|		КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И НЕ РасчетыПоСрокам.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса),
	|															ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику),
	|															ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности),
	|															ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомиссионера),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомитенту))
	|			И НЕ ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.ДокументРегистратор) В (ТИП(Документ.РасчетКурсовыхРазниц),ТИП(Документ.СписаниеЗадолженности))
	|			ТОГДА ДолгРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	
КонецФункции

Функция ШаблонПоляСписаниеПереоценкаЗадолженности() Экспорт
	
	Возврат "ВЫБОР
	|		//Обычная оплата
	|		КОГДА ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.ДокументРегистратор) В (ТИП(Документ.РасчетКурсовыхРазниц),ТИП(Документ.СписаниеЗадолженности))
	|			ТОГДА ВЫБОР КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыПоСрокам.ДолгРегл - РасчетыПоСрокам.ПредоплатаРегл
	|				ИНАЧЕ РасчетыПоСрокам.ДолгРегл + РасчетыПоСрокам.ПредоплатаРегл
	|			КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	
КонецФункции

Процедура ДобавитьОтборыВыбранныхПолейВЗапрос(ТекстЗапроса, НастройкиОтчета, ВычисляемыеПоля, ИмяТаблицы) Экспорт
	
	ТекстОтборов = "";
	
	МассивВыбранныхПолей = Новый Массив;
	НайтиВыбранныеПоляРекурсивно(НастройкиОтчета.Выбор.Элементы, МассивВыбранныхПолей);
	
	Для Каждого ВыбранноеПоле Из МассивВыбранныхПолей Цикл
		Если ВычисляемыеПоля.Найти(Строка(ВыбранноеПоле.Поле)) = Неопределено
			И НастройкиОтчета.ДоступныеПоляВыбора.Элементы.Найти(ВыбранноеПоле.Поле) <> Неопределено
			И НастройкиОтчета.ДоступныеПоляВыбора.Элементы.Найти(ВыбранноеПоле.Поле).Тип.Типы().Найти(Тип("Число")) <> Неопределено Тогда
			Если СтрНайти(Строка(ВыбранноеПоле.Поле),"ПользовательскиеПоля") = 0 Тогда
				ТекстОтборов = ТекстОтборов + ?(ТекстОтборов = "","", "ИЛИ") +"
					|	СУММА("+ИмяТаблицы+"." + Строка(ВыбранноеПоле.Поле) + ") <> 0 ";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборыВыбранныхПолей", ?(ТекстОтборов = "", "ИСТИНА", ТекстОтборов));
	
КонецПроцедуры

Процедура НайтиВыбранныеПоляРекурсивно(КоллекцияЭлементов, МассивЭлементов)

	Для каждого Элемент Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(Элемент) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			Если Элемент.Использование Тогда
				МассивЭлементов.Добавить(Элемент);
			КонецЕсли;
		Иначе
			НайтиВыбранныеПоляРекурсивно(Элемент.Элементы, МассивЭлементов);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ПоискОснованийИДокументовОплаты

// Устанавливает необходимые параметры для исполнения запросов по данным взаиморасчетов
//
// Параметры:
//  Запрос           - Запрос - 
//  ПараметрыПоиска  - см. ИнициализироватьПараметрыПоискаОснованийИДокументовОплаты
Процедура ПостобработкаЗапроса_ПоискОснованийИДокументовОплаты(Запрос, ПараметрыПоиска)
	
	// Подготовка данных
	
	// - дата окончания
	Если НЕ ЗначениеЗаполнено(ПараметрыПоиска.НаДату) Тогда
		ДатаОкончания        = Дата(3000, 1, 1);
		ДатаОкончанияВключая = Неопределено;
	Иначе
		ДатаОкончания        = ПараметрыПоиска.НаДату;
		ДатаОкончанияВключая = Новый Граница(ДатаОкончания);
	КонецЕсли;
	
	// - организации
	Если ЗначениеЗаполнено(ПараметрыПоиска.Организации) Тогда
		Организации                 = ПараметрыПоиска.Организации;
		ВключитьОтборПоОрганизациям = Истина;
	Иначе
		Организации                 = Неопределено;
		ВключитьОтборПоОрганизациям = Ложь;
	КонецЕсли;
	
	// - инициализация таблицы документов для отбора
	мТиповДокументовОтбора = Новый Массив;
	
	Для каждого Документ Из ПараметрыПоиска.Документы Цикл
		мТиповДокументовОтбора.Добавить(ТипЗнч(Документ));
	КонецЦикла;
	
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("ДокументОтбора", Новый ОписаниеТипов(мТиповДокументовОтбора));
	
	Для каждого Документ Из ПараметрыПоиска.Документы Цикл
		новСтрока = ТаблицаДокументов.Добавить();
		новСтрока.ДокументОтбора = Документ;
	КонецЦикла;
	
	// - типы документов оплаты
	
	мТиповДокументовОплатыВходящие = Новый Массив;
	мТиповДокументовОплатыВходящие.Добавить(Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств"));
	мТиповДокументовОплатыВходящие.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	мТиповДокументовОплатыВходящие.Добавить(Тип("ДокументСсылка.ПервичныйДокумент"));
	мТиповДокументовОплатыВходящие.Добавить(Тип("ДокументСсылка.ОперацияПоПлатежнойКарте"));
	мТиповДокументовОплатыВходящие.Добавить(Тип("ДокументСсылка.ВзаимозачетЗадолженности"));
	
	мТиповДокументовОплатыИсходящие = Новый Массив;
	мТиповДокументовОплатыИсходящие.Добавить(Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств"));
	мТиповДокументовОплатыИсходящие.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	мТиповДокументовОплатыИсходящие.Добавить(Тип("ДокументСсылка.ПервичныйДокумент"));
	мТиповДокументовОплатыИсходящие.Добавить(Тип("ДокументСсылка.ВзаимозачетЗадолженности"));
	
	// - типы оснований (объектов) оплаты
	
	мТиповОснованийОплатыВходящие = Новый Массив;
	мТиповОснованийОплатыВходящие.Добавить(Тип("ДокументСсылка.ПриобретениеТоваровУслуг"));
	мТиповОснованийОплатыВходящие.Добавить(Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов"));
	мТиповОснованийОплатыВходящие.Добавить(Тип("ДокументСсылка.ПервичныйДокумент"));
	
	мТиповОснованийОплатыИсходящие = Новый Массив;
	мТиповОснованийОплатыИсходящие.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	мТиповОснованийОплатыИсходящие.Добавить(Тип("ДокументСсылка.РеализацияУслугПрочихАктивов"));
	мТиповОснованийОплатыИсходящие.Добавить(Тип("ДокументСсылка.ПервичныйДокумент"));
	
	
	// Установка параметров
	
	Запрос.УстановитьПараметр("Организации",                        Организации);
	Запрос.УстановитьПараметр("ДатаОкончания",                      ДатаОкончания);
	Запрос.УстановитьПараметр("ДатаОкончанияВключая",               ДатаОкончанияВключая);
	Запрос.УстановитьПараметр("ТаблицаДокументов",                  ТаблицаДокументов);
	Запрос.УстановитьПараметр("ВключитьОтборПоОрганизациям",        ВключитьОтборПоОрганизациям);
	Запрос.УстановитьПараметр("ТолькоАвансы",                       ПараметрыПоиска.ТолькоАвансы);
	Запрос.УстановитьПараметр("ОграничитьТипыДокументовОплаты",     ПараметрыПоиска.ОграничитьТипыДокументовОплаты);
	Запрос.УстановитьПараметр("ОграничитьТипыОснованийОплаты",      ПараметрыПоиска.ОграничитьТипыОснованийОплаты);
	Запрос.УстановитьПараметр("мТиповДокументовОплатыВходящие",     мТиповДокументовОплатыВходящие);
	Запрос.УстановитьПараметр("мТиповДокументовОплатыИсходящие",    мТиповДокументовОплатыИсходящие);
	Запрос.УстановитьПараметр("мТиповОснованийОплатыВходящие",      мТиповОснованийОплатыВходящие);
	Запрос.УстановитьПараметр("мТиповОснованийОплатыИсходящие",     мТиповОснованийОплатыИсходящие);
	
	Запрос.УстановитьПараметр("НоваяАрхитектураВзаиморасчетов",
		ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
	
	
	// Обработка текста запроса
	
	// - Текст отбора по документам
	
	ИмяПоляОтбора    = ПараметрыПоиска.ПараметрыОтбораПоТаблицеДокументов.ИмяПоля;
	ИмяТаблицыОтбора = ПараметрыПоиска.ПараметрыОтбораПоТаблицеДокументов.ИмяТаблицыОтбора;
	
	ЗаданОтборПоВременнойТаблице = ЗначениеЗаполнено(ИмяТаблицыОтбора) И ЗначениеЗаполнено(ИмяПоляОтбора);
	
	Если НЕ ЗаданОтборПоВременнойТаблице Тогда
		
		ИмяТаблицыОтбора = "ТаблицаОтбораОснованийИДокументовОплаты";
		ИмяПоляОтбора    = "ДокументОтбора";
		
		ТекстЗапросаСозданияТаблицыОтбора = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокументов.ДокументОтбора КАК ДокументОтбора
		|ПОМЕСТИТЬ ТаблицаОтбораОснованийИДокументовОплаты
		|ИЗ
		|	&ТаблицаДокументов КАК ТаблицаДокументов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументОтбора
		|";
		
	Иначе
		
		ТекстЗапросаСозданияТаблицыОтбора = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИмяПоляДокумента КАК ДокументОтбора
		|ПОМЕСТИТЬ ТаблицаОтбораОснованийИДокументовОплаты
		|ИЗ
		|	ИмяТаблицыОтбораОснованийИДокументовОплаты КАК ТаблицаДокументов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументОтбора
		|";
		
	КонецЕсли;
	
	ТекстЗапросаУничтоженияТаблицыОтбора = "УНИЧТОЖИТЬ ТаблицаОтбораОснованийИДокументовОплаты";
	
	Запрос.Текст = ТекстЗапросаСозданияТаблицыОтбора
					+ ОбщегоНазначения.РазделительПакетаЗапросов() + Запрос.Текст
					+ ОбщегоНазначения.РазделительПакетаЗапросов() + ТекстЗапросаУничтоженияТаблицыОтбора;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицыОтбораОснованийИДокументовОплаты", ИмяТаблицыОтбора);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяПоляДокумента",                           ИмяПоляОтбора);
	
	Если ПараметрыПоиска.РежимПоиска = 1 Тогда
		
		// Поля соединения
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РежимПоиска1_ДокументРегистратор_РежимПоиска2_РасчетныйДокумент",
			"Расчеты.ДокументРегистратор = ТаблицаОтбораОснованийИДокументовОплаты.ДокументОтбора");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РежимПоиска1_ОбъектРасчетов_РежимПоиска2_ДокументРегистратор",
			"Расчеты.ОбъектРасчетов = ТаблицаОтбораОснованийИДокументовОплаты.ДокументОтбора");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РежимПоиска1_РасчетныйДокумент_РежимПоиска2_ДокументРегистратор",
			"Расчеты.РасчетныйДокумент = ТаблицаОтбораОснованийИДокументовОплаты.ДокументОтбора");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РежимПоиска1_Регистратор_РежимПоиска2_РасчетныйДокумент",
			"Расчеты.Регистратор = ТаблицаОтбораОснованийИДокументовОплаты.ДокументОтбора");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РежимПоиска1_ЗаказКлиента_РежимПоиска2_Регистратор",
			"Расчеты.ЗаказКлиента = ТаблицаОтбораОснованийИДокументовОплаты.ДокументОтбора");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РежимПоиска1_ЗаказПоставщику_РежимПоиска2_Регистратор",
			"Расчеты.ЗаказПоставщику = ТаблицаОтбораОснованийИДокументовОплаты.ДокументОтбора");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РежимПоиска1_РасчетныйДокумент_РежимПоиска2_Регистратор",
			"Расчеты.РасчетныйДокумент = ТаблицаОтбораОснованийИДокументовОплаты.ДокументОтбора");
		
	ИначеЕсли ПараметрыПоиска.РежимПоиска = 2 Тогда
		
		// Поля соединения
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РежимПоиска1_ДокументРегистратор_РежимПоиска2_РасчетныйДокумент",
			"Расчеты.РасчетныйДокумент = ТаблицаОтбораОснованийИДокументовОплаты.ДокументОтбора");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РежимПоиска1_ОбъектРасчетов_РежимПоиска2_ДокументРегистратор",
			"Расчеты.ДокументРегистратор = ТаблицаОтбораОснованийИДокументовОплаты.ДокументОтбора");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РежимПоиска1_РасчетныйДокумент_РежимПоиска2_ДокументРегистратор",
			"Расчеты.ДокументРегистратор = ТаблицаОтбораОснованийИДокументовОплаты.ДокументОтбора");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РежимПоиска1_Регистратор_РежимПоиска2_РасчетныйДокумент",
			"Расчеты.РасчетныйДокумент = ТаблицаОтбораОснованийИДокументовОплаты.ДокументОтбора");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РежимПоиска1_ЗаказКлиента_РежимПоиска2_Регистратор",
			"Расчеты.Регистратор = ТаблицаОтбораОснованийИДокументовОплаты.ДокументОтбора");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РежимПоиска1_ЗаказПоставщику_РежимПоиска2_Регистратор",
			"Расчеты.Регистратор = ТаблицаОтбораОснованийИДокументовОплаты.ДокументОтбора");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РежимПоиска1_РасчетныйДокумент_РежимПоиска2_Регистратор",
			"Расчеты.Регистратор = ТаблицаОтбораОснованийИДокументовОплаты.ДокументОтбора");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АвансыПоДаннымВзаиморасчетов

// Устанавливает необходимые параметры для исполнения запросов по данным взаиморасчетов
//
// Параметры:
//  Запрос           - Запрос - 
//  ПараметрыРасчета - см. ИнициализироватьПараметрыПодготовкиРасчетовАвансов
Процедура УстановитьПараметрыЗапросаПодготовкиРасчетовАвансов(Запрос, ПараметрыРасчета)
	
	Если НЕ ЗначениеЗаполнено(ПараметрыРасчета.ДатаОкончания) Тогда
		ДатаОкончания        = Дата(3000, 1, 1);
		ДатаОкончанияВключая = Неопределено;
	Иначе
		ДатаОкончания        = ПараметрыРасчета.ДатаОкончания;
		ДатаОкончанияВключая = Новый Граница(ДатаОкончания);
	КонецЕсли;
	
	ПустаяДата        = '00010101';
	
	Если ЗначениеЗаполнено(ПараметрыРасчета.Организации) Тогда
		Организации                 = ПараметрыРасчета.Организации;
		ВключитьОтборПоОрганизациям = Истина;
	Иначе
		Организации                 = Неопределено;
		ВключитьОтборПоОрганизациям = Ложь;
	КонецЕсли;
	
	РасчетныйДокумент = ?(ЗначениеЗаполнено(ПараметрыРасчета.РасчетныйДокумент),
							ПараметрыРасчета.РасчетныйДокумент, Неопределено);
	
	Если ЗначениеЗаполнено(ПараметрыРасчета.ПараметрыОтбораПоРасчетномуДокументу.ИмяТаблицыОтбора)
		ИЛИ ЗначениеЗаполнено(РасчетныйДокумент) Тогда
		ВключитьОтборПоРасчетномуДокументу = Истина;
	Иначе
		ВключитьОтборПоРасчетномуДокументу = Ложь;
	КонецЕсли;
	
	ТипыДокументовВозврата_ПолученныеАвансы = Новый Массив;
	ТипыДокументовВозврата_ПолученныеАвансы.Добавить(Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств"));
	ТипыДокументовВозврата_ПолученныеАвансы.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	
	ТипыДокументовВозврата_ВыданныеАвансы = Новый Массив;
	ТипыДокументовВозврата_ВыданныеАвансы.Добавить(Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств"));
	ТипыДокументовВозврата_ВыданныеАвансы.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	
	
	Запрос.УстановитьПараметр("ДатаНачала",           ПараметрыРасчета.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",        ДатаОкончания);
	Запрос.УстановитьПараметр("ДатаОкончанияВключая", ДатаОкончанияВключая);
	Запрос.УстановитьПараметр("СоздатьПустуюТаблицу", ПараметрыРасчета.СоздатьПустуюТаблицу);
	Запрос.УстановитьПараметр("ПустаяДата",           ПустаяДата);
	Запрос.УстановитьПараметр("Организации",          Организации);
	Запрос.УстановитьПараметр("РасчетныйДокумент",    РасчетныйДокумент);
	Запрос.УстановитьПараметр("ПустойОбъектРасчетов", Неопределено);
	Запрос.УстановитьПараметр("ВалютаРеглУчета",      Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("УчестьРезервированиеАвансов",        ПараметрыРасчета.УчестьРезервированиеАвансов);
	Запрос.УстановитьПараметр("НоваяАрхитектураВзаиморасчетов",     ПараметрыРасчета.НоваяАрхитектураВзаиморасчетов);
	Запрос.УстановитьПараметр("ВключитьОтборПоРасчетномуДокументу", ВключитьОтборПоРасчетномуДокументу);
	Запрос.УстановитьПараметр("ВключитьОтборПоОрганизациям",        ВключитьОтборПоОрганизациям);
	Запрос.УстановитьПараметр("ТипыДокументовВозврата_ПолученныеАвансы", ТипыДокументовВозврата_ПолученныеАвансы);
	Запрос.УстановитьПараметр("ТипыДокументовВозврата_ВыданныеАвансы",   ТипыДокументовВозврата_ВыданныеАвансы);
	
КонецПроцедуры

// Переопределяет индексы запроса
// 
// Параметры:
// 	Запрос - Запрос -
// 	ПараметрыРасчета - см. ИнициализироватьПараметрыПодготовкиРасчетовАвансов
// 	ИмяТаблицы - Строка - имя временной таблицы, в которой меняем порядок индексов
Процедура УстановитьПоляИндексов(Запрос, ПараметрыРасчета, ИмяТаблицы)
	
	мПоляИндексов = ПараметрыРасчета.ПоляИндексовВручную;
	
	Если НЕ ЗначениеЗаполнено(мПоляИндексов) Тогда
		Возврат;
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	Для каждого Пакет Из СхемаЗапроса.ПакетЗапросов Цикл
		Если Пакет.ТаблицаДляПомещения = ИмяТаблицы Тогда
			
			Пакет.Порядок.Очистить();
			Для каждого ПолеИндекса из мПоляИндексов Цикл
				Пакет.Индекс.Добавить(ПолеИндекса);
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры

// Обработка запроса в целях отбора по расчетному документу
// 
// Параметры:
// 	Запрос - Запрос -
// 	ПараметрыРасчета - см. ИнициализироватьПараметрыПодготовкиРасчетовАвансов
// 	ПараметрыПутей   - см. ИнициализироватьПараметрыДляОтбораАвансов_ПутиКПолямИТекстуЗамены
//
Процедура ОбработатьТекстЗапросаДляОтбораАвансовПоПараметрам(Запрос, ПараметрыРасчета, ПараметрыПутей)
	
	мТекстовОтборПоПараметрам = Новый Массив;
	
	
	ИмяПоляОтбора    = ПараметрыРасчета.ПараметрыОтбораПоРасчетномуДокументу.ИмяПоля;
	ИмяТаблицыОтбора = ПараметрыРасчета.ПараметрыОтбораПоРасчетномуДокументу.ИмяТаблицыОтбора;
	
	ПолныйПуть = ПараметрыПутей.ПолныйПуть_РасчетныйДокумент;
	
	Если ЗначениеЗаполнено(ИмяТаблицыОтбора) Тогда
		
		ШаблонТекста = "%1 В
		|			(ВЫБРАТЬ
		|				%2 КАК Ссылка
		|			ИЗ
		|				%3 КАК Т
		|			)
		|";
		
		мТекстовОтборПоПараметрам.Добавить(СтрШаблон(ШаблонТекста, ПолныйПуть, ИмяПоляОтбора, ИмяТаблицыОтбора));
		
	Иначе
		
		ШаблонТекста = "(НЕ &ВключитьОтборПоРасчетномуДокументу ИЛИ %1 В (&РасчетныйДокумент))";
		мТекстовОтборПоПараметрам.Добавить(СтрШаблон(ШаблонТекста, ПолныйПуть));
		
	КонецЕсли;
	
	
	ТекстОтборПоПараметрам = СтрСоединить(мТекстовОтборПоПараметрам, " И ");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ПараметрыПутей.ТекстЗамены, ТекстОтборПоПараметрам);
	
КонецПроцедуры

// Инициализировать параметры для указания путей к полям и тексту замены отбора по параметрам
//
// Возвращаемое значение:
//  Структура - содержит:
//  	* ТекстЗамены                  - Строка - Заменяемый текст в запросе
//  	* ПолныйПуть_РасчетныйДокумент - Строка - Полный путь к расчетному документу
//
Функция ИнициализироватьПараметрыДляОтбораАвансов_ПутиКПолямИТекстуЗамены()
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ТекстЗамены", "&ТекстОтборПоПараметрам");
	
	СтруктураПараметров.Вставить("ПолныйПуть_РасчетныйДокумент", "РасчетныйДокумент");
	
	Возврат СтруктураПараметров;
	
КонецФункции

Процедура ЗаполнитьСвойстваПараметров(Приемник, Источник)
	
	ТипПриемника  = ТипЗнч(Приемник);
	ТипИсточника  = ТипЗнч(Источник);
	
	Если ТипПриемника = Тип("Структура") И ТипИсточника = Тип("Структура") Тогда
			Для каждого ЭлементПриемника Из Приемник Цикл
				ЗначениеИсточника = Неопределено;
				Если Источник.Свойство(ЭлементПриемника.Ключ, ЗначениеИсточника) Тогда
					ЗаполнитьСвойстваПараметров(Приемник[ЭлементПриемника.Ключ], ЗначениеИсточника);
				КонецЕсли;
			КонецЦикла;
	ИначеЕсли ТипПриемника <> Тип("Структура") И ТипИсточника <> Тип("Структура") Тогда
		Приемник = ОбщегоНазначения.СкопироватьРекурсивно(Источник);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

