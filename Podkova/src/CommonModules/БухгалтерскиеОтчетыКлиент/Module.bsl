
#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийФормыИЭлементовШапки

// Вызывается из обработчика события ПриОткрытии формы отчета.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма отчета.
//	Отказ - Булево - Признак отказа.
//
Процедура ПриОткрытии(Форма, Отказ) Экспорт
	
	РежимРасшифровки = Ложь;
	
	// Установка модифицированности пользовательских настроек
	// для их автоматического сохранения при закрытии формы.
	Если Форма.Отчет.Свойство("РежимРасшифровки") Тогда
		Форма.ПользовательскиеНастройкиМодифицированы = Не Форма.Отчет.РежимРасшифровки;
		РежимРасшифровки = Форма.Отчет.РежимРасшифровки;
	Иначе
		Форма.ПользовательскиеНастройкиМодифицированы = Истина;
	КонецЕсли;
	
	Попытка
		ОбщегоНазначенияБПКлиентСервер.УстановитьЗначениеПолеОрганизация(
			Форма.ПолеОрганизация, Форма.Отчет.Организация, Форма.Отчет.ВключатьОбособленныеПодразделения);
	Исключение
		// Запись в журнал регистрации не требуется.
	КонецПопытки;
	
	Если Не РежимРасшифровки
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ИдентификаторЗаданияАктуализации")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "АдресХранилищаАктуализации") Тогда
		БухгалтерскийУчетКлиентПереопределяемый.ПодключитьПроверкуАктуальности(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из обработчика события ПередЗакрытием формы отчета.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма отчета.
//	Отказ - Булево - Признак отказа.
//	ЗавершениеРаботы - Булево - Признак завершение работы с программой.
//	ТекстПредупреждения - Строка - Текст предупреждения при закрытии.
//	СтандартнаяОбработка - Булево - Признак стандартной обработки.
//
Процедура ПередЗакрытием(Форма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, РежимРасшифровки = Ложь) Экспорт
	
	ПередСохранениемНастроек(Форма, РежимРасшифровки);
	
КонецПроцедуры

// Вызывается из обработчика события ПриЗакрытии формы отчета.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма отчета.
//	ЗавершениеРаботы - Булево - Признак завершения работы с программой.
//
Процедура ПриЗакрытии(Форма, ЗавершениеРаботы = Истина) Экспорт
	
	ОтменяемыеЗадания = БухгалтерскийУчетКлиентПереопределяемый.ЗаданияОтменяемыеПриЗакрытииОтчета();
	
	ИдентификаторыОтменяемыхЗаданий = Новый Массив;
	Для каждого РеквизитФормы Из ОтменяемыеЗадания Цикл
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, РеквизитФормы)
		   И ЗначениеЗаполнено(Форма[РеквизитФормы]) Тогда
			ИдентификаторыОтменяемыхЗаданий.Добавить(Форма[РеквизитФормы]);
		КонецЕсли;
	КонецЦикла; 
	
	Если ИдентификаторыОтменяемыхЗаданий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗавершениеРаботы Тогда
		БухгалтерскиеОтчетыВызовСервера.ОтменитьВыполнениеЗаданий(ИдентификаторыОтменяемыхЗаданий);
	КонецЕсли;

	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ИдентификаторЗаданияАктуализации")
	   И ЗначениеЗаполнено(Форма.ИдентификаторЗаданияАктуализации)
	   И Форма.Отчет.Свойство("Организация") Тогда
	   
		ПараметрыОповещения = Новый Структура("Организация", Форма.Отчет.Организация);
		Оповестить("АктуализацияОтменена", ПараметрыОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из обработчика события ПриИзменении поля организации.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма отчета.
//	Элемент - ПолеФормы - Поле организации.
//
Процедура ОрганизацияПриИзменении(Форма, Элемент, Организация = Неопределено) Экспорт 
	
	БухгалтерскиеОтчетыКлиентСервер.ОрганизацияПриИзменении(Форма, Организация);
	
КонецПроцедуры

// Вызывается из обработчика события ПриИзменении поля подразделения.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма отчета.
//	Элемент - ПолеФормы - Поле подразделения.
//
Процедура ПодразделениеПриИзменении(Форма, Элемент) Экспорт
	
	БухгалтерскиеОтчетыКлиентСервер.ПодразделениеПриИзменении(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область Группировка

// Вызывается из обработчика события ПередНачаломДобавления табличного поля Группировка.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма отчета.
//	Элемент - ТаблицаФормы - Таблица группировок.
//	Отказ - Булево - Признак отказа.
//	Копирование - Булево - Признак копирования.
//	Родитель - Произвольный - Ссылка на родителя.
//	Группа - Булево - Признак добавления группы.
//
Процедура ГруппировкаПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
	ПараметрыФормы.Вставить("Режим"          , "Группировка");
	ПараметрыФормы.Вставить("ИсключенныеПоля", Форма.ПолучитьЗапрещенныеПоля("Группировка"));
	ПараметрыФормы.Вставить("ТекущаяСтрока"  , Неопределено);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ГруппировкаПередНачаломДобавленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
	
	Отказ = Истина;
	
КонецПроцедуры

// Завершает добавление новой строки в табличную часть Группировка формы отчета.
//
// Параметры:
//	РезультатЗакрытия - Структура - Возвращаемое значение из общей формы ФормаВыбораДоступногоПоля.
//	ДополнительныеПараметры - Произвольный - Дополнительные параметры описания оповещения.
//
Процедура ГруппировкаПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		НоваяСтрока = Форма.Отчет.Группировка.Добавить();
		НоваяСтрока.Использование = Истина;
		НоваяСтрока.Поле          = ПараметрыВыбранногоПоля.Поле;
		НоваяСтрока.Представление = ПараметрыВыбранногоПоля.Заголовок;
		
		Если Не ЗначениеЗаполнено(Форма.ИдентификаторЗадания) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Форма.Элементы.Результат, "НеАктуальность");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из обработчика события ПередНачаломИзменения табличного поля Группировка.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма отчета.
//	Элемент - ТаблицаФормы - Таблица группировок.
//	Отказ - Булево - Признак отказа.
//
Процедура ГруппировкаПередНачаломИзменения(Форма, Элемент, Отказ) Экспорт
	
	Если Элемент.ТекущийЭлемент = Форма.Элементы.ГруппировкаПредставление Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
		ПараметрыФормы.Вставить("Режим"          , "Группировка");
		ПараметрыФормы.Вставить("ИсключенныеПоля", Форма.ПолучитьЗапрещенныеПоля("Группировка"));
		ПараметрыФормы.Вставить("ТекущаяСтрока"  , Элемент.ТекущиеДанные.Поле);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
			
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ГруппировкаПередНачаломИзмененияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Завершает изменение строки в табличной части Группировка формы отчета.
//
// Параметры:
//	РезультатЗакрытия - Структура - Возвращаемое значение из общей формы ФормаВыбораДоступногоПоля.
//	ДополнительныеПараметры - Произвольный - Дополнительные параметры описания оповещения.
//
Процедура ГруппировкаПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма =   ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
		Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
			НоваяСтрока = Элемент.ТекущиеДанные;
			НоваяСтрока.Использование = Истина;
			НоваяСтрока.Поле          = ПараметрыВыбранногоПоля.Поле;
			НоваяСтрока.Представление = ПараметрыВыбранногоПоля.Заголовок;
			
			Если Не ЗначениеЗаполнено(Форма.ИдентификаторЗадания) Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Форма.Элементы.Результат, "НеАктуальность");
			КонецЕсли;
		КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Отбор

// Вызывается из обработчика события ПриИзменении табличного поля Отбор формы отчета.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма отчета.
//	Элемент - ТаблицаФормы - Таблица отбора.
//	ЕстьРеквизитПодразделение - Булево - Признак наличия реквизита подразделение.
//
Процедура ОтборыПриИзменении(Форма, Элемент, ЕстьРеквизитПодразделение = Истина) Экспорт
	
	Отчет = Форма.Отчет;
	Для Каждого ЭлементОтбора Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.Использование Тогда
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда 
					
					Если Отчет.Организация <> ЭлементОтбора.ПравоеЗначение Тогда
						
						Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПолеОрганизация")
							И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "СоответствиеОрганизаций")
							И ТипЗнч(Форма.СоответствиеОрганизаций) = Тип("Структура") Тогда
							
							Для Каждого ЭлементСоответствия Из Форма.СоответствиеОрганизаций Цикл
								Если ЭлементСоответствия.Значение.Организация = ЭлементОтбора.ПравоеЗначение Тогда
									Форма.ПолеОрганизация = ЭлементСоответствия.Ключ;
									Отчет.Организация = ЭлементОтбора.ПравоеЗначение;
									Прервать;
								КонецЕсли;
							КонецЦикла;
						Иначе
							Отчет.Организация = ЭлементОтбора.ПравоеЗначение;
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					Отчет.Организация = Неопределено;
				КонецЕсли; 
				
				Отчет.ВключатьОбособленныеПодразделения = Ложь;
				
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") И ЕстьРеквизитПодразделение Тогда
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда 
					Отчет.Подразделение = ЭлементОтбора.ПравоеЗначение;
				Иначе
					Отчет.Подразделение = Неопределено;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Вызывается из обработчика события ПередНачаломДобавления табличного поля Отбор.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма отчета.
//	Элемент - ТаблицаФормы - Таблица отбора.
//	Отказ - Булево - Признак отказа.
//	Копирование - Булево - Признак копирования.
//	Родитель - Произвольный - Ссылка на родителя.
//	Группа - Булево - Признак добавления группы.
//
Процедура ОтборыПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
	ПараметрыФормы.Вставить("Режим"                , "Отбор");
	ПараметрыФормы.Вставить("ИсключенныеПоля"      , Форма.ПолучитьЗапрещенныеПоля("Отбор"));
	ПараметрыФормы.Вставить("ТекущаяСтрока"        , Неопределено);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
		
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОтборыПередНачаломДобавленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
	
	Отказ = Истина;

КонецПроцедуры

// Завершает добавление новой строки в табличную часть Отбор формы отчета.
//
// Параметры:
//	РезультатЗакрытия - Структура - Возвращаемое значение из общей формы ФормаВыбораДоступногоПоля.
//	ДополнительныеПараметры - Произвольный - Дополнительные параметры описания оповещения.
//
Процедура ОтборыПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма =   ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		
		Если Элемент.ТекущаяСтрока = Неопределено Тогда
			ТекущаяСтрока = Неопределено;
		Иначе
			ТекущаяСтрока = Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.ПолучитьОбъектПоИдентификатору(Элемент.ТекущаяСтрока);
		КонецЕсли;

		Если ТипЗнч(ТекущаяСтрока) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ЭлементОтбора = ТекущаяСтрока.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ИначеЕсли ТипЗнч(ТекущаяСтрока) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ТекущаяСтрока.Родитель <> Неопределено Тогда
				ЭлементОтбора = ТекущаяСтрока.Родитель.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Иначе
				ЭлементОтбора = Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			КонецЕсли;
		Иначе
			ЭлементОтбора = Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		КонецЕсли;
		
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПараметрыВыбранногоПоля.Поле);
		Если Строка(ПараметрыВыбранногоПоля.Поле) = "Организация"
			И Форма.Отчет.Свойство("Организация") Тогда
			ЭлементОтбора.ПравоеЗначение = Форма.Отчет.Организация;
		ИначеЕсли Строка(ПараметрыВыбранногоПоля.Поле) = "Подразделение"
			И Форма.Отчет.Свойство("Подразделение") Тогда 
			ЭлементОтбора.ПравоеЗначение = Форма.Отчет.Подразделение;
		КонецЕсли;
		ЭлементОтбора.ВидСравнения = ПараметрыВыбранногоПоля.ВидСравнения;
		
		Элемент.ТекущаяСтрока = Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.ПолучитьИдентификаторПоОбъекту(ЭлементОтбора);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из обработчика события ПередНачаломИзменения табличного поля Отбор.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма отчета.
//	Элемент - ТаблицаФормы - Таблица отбора.
//	Отказ - Булево - Признак отказа.
//
Процедура ОтборыПередНачаломИзменения(Форма, Элемент, Отказ) Экспорт
	
	Если (СтрНайти(Элемент.ТекущийЭлемент.Имя, "ОтборыЛевоеЗначение") > 0 И ТипЗнч(Элемент.ТекущиеДанные.ЛевоеЗначение) = Тип("ПолеКомпоновкиДанных")) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
		ПараметрыФормы.Вставить("Режим"                , "Отбор");
		ПараметрыФормы.Вставить("ИсключенныеПоля"      , Форма.ПолучитьЗапрещенныеПоля("Отбор"));
		ПараметрыФормы.Вставить("ТекущаяСтрока"        , Элемент.ТекущиеДанные.ЛевоеЗначение);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОтборыПередНачаломИзмененияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
			
		Отказ = Истина;
		
	КонецЕсли;	
	
КонецПроцедуры

// Завершает изменение строки в табличной части Отбор формы отчета.
//
// Параметры:
//	РезультатЗакрытия - Структура - Возвращаемое значение из общей формы ФормаВыбораДоступногоПоля.
//	ДополнительныеПараметры - Произвольный - Дополнительные параметры описания оповещения.
//
Процедура ОтборыПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма =   ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		
		ТекущаяСтрока = Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.ПолучитьОбъектПоИдентификатору(Элемент.ТекущаяСтрока);
		
		Если СтрНайти(Элемент.ТекущийЭлемент.Имя, "ОтборыЛевоеЗначение") > 0 Тогда 
			ТекущаяСтрока.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыВыбранногоПоля.Поле);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму выбора значения отбора.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма отчета.
//	Элемент - ПолеФормы - Поле со значением отбора, для которого осуществляется открытие формы.
//	СтандартнаяОбработка - Булево - Признак выполнения стандартной обработки.
//	Значение - Произвольный - Значение отбора.
//	СписокПараметров - Структура - Содержит 
//		* Ключ - Имя поля, по которому ограничивается список доступных для выбора значений.
//		* Значение - Значение поля, по которому ограничивается список доступных для выбора значений.
//	ТипПоля - ОписаниеТипов - Содержит доступные типы для отбора.
//	МножественныйВыбор - Булево - Флаг подбора, если истина то в открываемых формах должен быть включен множественный выбор значений.
//
Процедура ОтборОбработатьВыборЗначения(Форма, Элемент, СтандартнаяОбработка, Значение, СписокПараметров, ТипПоля, МножественныйВыбор = Ложь) Экспорт
	Перем ФормаВыбора;
	
	ОписанияТиповВидовСубконто = Форма.ОписанияТиповВидовСубконто;
	
	ТипЭлемента = ТипЗнч(Значение);
	
	Если ТипЗнч(ТипПоля) <> Тип("ОписаниеТипов") Тогда
		
		Возврат;
		
	ИначеЕсли ТипПоля.Типы().Количество() = 1 Тогда
		
		Если ?(ТипЭлемента = Тип("Неопределено"), Истина, НЕ ТипПоля.СодержитТип(ТипЭлемента)) Тогда
			ТипЭлемента = ТипПоля.Типы()[0];
		КонецЕсли;
		
	ИначеЕсли ТипПоля.Типы().Количество() > 0 Тогда
		
		Если ?(ТипЭлемента = Тип("Неопределено"), Истина, НЕ ТипПоля.СодержитТип(ТипЭлемента)) Тогда
			
			Если ТипПоля.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов")) И ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда
				
				ИмяРеквизитаКонтрагент = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаКонтрагентДоговора();
				
				НовыеПараметры = Новый Массив();
				НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор." + ИмяРеквизитаКонтрагент, СписокПараметров.Контрагент));
				Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
				
			КонецЕсли;
			
			Возврат;
		КонецЕсли; 
		
	Иначе
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("МножественныйВыбор", МножественныйВыбор);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", НЕ МножественныйВыбор);
	ПараметрыФормы.Вставить("РежимВыбора",        Истина);
	
	Если Не СписокПараметров.Свойство("ФормаВыбора", ФормаВыбора) Тогда
		ФормаВыбора = "ФормаВыбора";
	КонецЕсли;

	Если ТипЭлемента = Тип("Неопределено") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЭлемента = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипЗначенияБанковскогоСчетаОрганизации() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ЗначенияОтборов = Новый Структура;
		Если ЗначениеЗаполнено(СписокПараметров.Организация) Тогда
			ЗначенияОтборов.Вставить("Владелец", СписокПараметров.Организация);
		КонецЕсли;
		
		ПараметрыФормы.Вставить("Отбор", ЗначенияОтборов);
		
		БухгалтерскийУчетКлиентПереопределяемый.ОткрытьФормуВыбораБанковскогоСчетОрганизации(ПараметрыФормы, Элемент);
		
	ИначеЕсли ТипЭлемента = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипПодразделения() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ЗначенияОтборов = Новый Структура;
		ИмяРеквизитаОрганизации = БухгалтерскийУчетКлиентСерверПереопределяемый.ИмяРеквизитаОрганизацияПодразделения();
		Если ЗначениеЗаполнено(ИмяРеквизитаОрганизации) Тогда
			Если ЗначениеЗаполнено(СписокПараметров.Организация) Тогда
				ЗначенияОтборов.Вставить(ИмяРеквизитаОрганизации, СписокПараметров.Организация);
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыФормы.Вставить("Отбор", ЗначенияОтборов);
		
		БухгалтерскийУчетКлиентПереопределяемый.ОткрытьФормуВыбораПодразделения(ПараметрыФормы, Элемент);

	ИначеЕсли БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора().СодержитТип(ТипЭлемента) Тогда
		
		НовыеПараметры = Новый Массив;
		
		ИмяРеквизитаКонтрагент = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаКонтрагентДоговора();
		ЗначениеКонтрагент = Неопределено;
		Если ЗначениеЗаполнено(ИмяРеквизитаКонтрагент) И СписокПараметров.Свойство(ИмяРеквизитаКонтрагент, ЗначениеКонтрагент) Тогда
			Если ЗначениеЗаполнено(ЗначениеКонтрагент) Тогда
				Если ТипЗнч(ЗначениеКонтрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
					НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор."+ИмяРеквизитаКонтрагент, ЗначениеКонтрагент));
				ИначеЕсли ТипЗнч(ЗначениеКонтрагент) = Тип("СправочникСсылка.Организации") Тогда
					НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор."+"ОрганизацияПолучатель", ЗначениеКонтрагент));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Элемент.ОграничениеТипа = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора(ЗначениеКонтрагент);
		
		ИмяРеквизитаОрганизация = "Организация";
		ЗначениеОрганизация = Неопределено;
		Если ЗначениеЗаполнено(ИмяРеквизитаОрганизация) И СписокПараметров.Свойство(ИмяРеквизитаОрганизация, ЗначениеОрганизация) Тогда
			Если ЗначениеЗаполнено(ЗначениеОрганизация) Тогда
				НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор."+ИмяРеквизитаОрганизация, ЗначениеОрганизация));
			КонецЕсли;
		КонецЕсли;
		
		Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из обработчика события НачалоВыбора для поля отбора.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма отчета.
//	Элемент - ПолеФормы - Поле в колонке табличной части Отбор, для которой вызван обработчик.
//	ДанныеВыбора - СписокЗначений - Список значений для выбора.
//	СтандартнаяОбработка - Булево - Признак выполнения стандартной обработки.
//	СписокПараметров - Структура - Содержит
//		* Ключ - Имя поля, по которому ограничивается список доступных для выбора значений.
//		* Значение - Значение поля, по которому ограничивается список доступных для выбора значений.
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек, которому принадлежит редактируемый отбор.
//		Если не указан, то ожидается что это форма отчета, и у отчета есть свойство КомпоновщикНастроек.
//
Процедура ОтборыПравоеЗначениеНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка, СписокПараметров, КомпоновщикНастроек = Неопределено) Экспорт
	
	Элементы = Форма.Элементы;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	
	ОписанияТиповВидовСубконто = Форма.ОписанияТиповВидовСубконто;
	
	Если Элементы.Отборы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если КомпоновщикНастроек = Неопределено 
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Отчет") 
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Отчет, "КомпоновщикНастроек") Тогда
		КомпоновщикНастроек = Форма.Отчет.КомпоновщикНастроек;
	ИначеЕсли КомпоновщикНастроек = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.ПолучитьОбъектПоИдентификатору(Элементы.Отборы.ТекущаяСтрока);
	Если ЭлементОтбора <> Неопределено Тогда
		Значение = ЭлементОтбора.ПравоеЗначение;
	Иначе
		Значение = Элементы.Отборы.ТекущиеДанные.ПравоеЗначение;
	КонецЕсли;
	
	Поле               = Элементы.Отборы.ТекущиеДанные.ЛевоеЗначение;
	ВидСравненияСтрока = Элементы.Отборы.ТекущиеДанные.ВидСравнения;
	
	ЭтоКорСубконто = (СтрНайти(Строка(Поле), "КорСубконто") = 1);

	ТипПоля = БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(
		КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора,
		Поле,
		"Тип");
	
	Для Каждого СтрокаОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл

		Если ТипЗнч(СтрокаОтбора) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ СтрокаОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаОтбора.ПравоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
			
		// Учитываем только условия сравнения на равенство, на неравенство пропускаем.
		Если СтрокаОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
			ИЛИ СтрокаОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке
			ИЛИ СтрокаОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
			ИЛИ СтрокаОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
		
			ДругоеПоле = СтрокаОтбора.ЛевоеЗначение;
			ДругоеЗначение = Неопределено;
			Если ТипЗнч(СтрокаОтбора.ПравоеЗначение) <> Тип("СписокЗначений") Тогда
				ДругоеЗначение = СтрокаОтбора.ПравоеЗначение;
			ИначеЕсли СтрокаОтбора.ПравоеЗначение.Количество() > 0 Тогда
				ДругоеЗначение = СтрокаОтбора.ПравоеЗначение[0].Значение;
			КонецЕсли;
			
			ДругойТипПоля = БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(
				КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора,
				ДругоеПоле,
				"Тип");
			
			Если ЭтоКорСубконто <> (СтрНайти(Строка(ДругоеПоле), "КорСубконто") = 1) Тогда
				// Параметр относится к другому отбору
				Продолжить;
			КонецЕсли;
			
			Если ДругойТипПоля = ОписанияТиповВидовСубконто.Номенклатура Тогда
				СписокПараметров.Вставить("Номенклатура", ДругоеЗначение);
			ИначеЕсли ДругойТипПоля = ОписанияТиповВидовСубконто.Склад Тогда
				СписокПараметров.Вставить("Склад", ДругоеЗначение);
			ИначеЕсли ДругойТипПоля = ОписанияТиповВидовСубконто.Контрагент Тогда
				СписокПараметров.Вставить("Контрагент", ДругоеЗначение);
			ИначеЕсли ДругойТипПоля = ОписанияТиповВидовСубконто.ДоговорКонтрагента Тогда
				СписокПараметров.Вставить("ДоговорКонтрагента", ДругоеЗначение);
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
	// Принятая в конфигурации обработка работает только для равенства или вхождения в группу.
	Если    Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.Равно)
		Или Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.НеРавно)
		Или Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.ВИерархии)
		Или Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.НеВИерархии) Тогда
		
		Если Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.ВИерархии)
			Или Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.НеВИерархии) Тогда
			СписокПараметров.Вставить("ФормаВыбора", "ФормаВыбораГруппы");
		Иначе
			СписокПараметров.Вставить("ФормаВыбора", "ФормаВыбора");
		КонецЕсли;
		
		ОтборОбработатьВыборЗначения(Форма, Элемент, СтандартнаяОбработка, Значение, СписокПараметров, ТипПоля);
		
	ИначеЕсли Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.ВСписке)
		Или Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии)
		Или Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.НеВСписке)
		Или Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии) Тогда

		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Значение",                   Значение);
		ПараметрыФормы.Вставить("ТипПоля",                    ТипПоля);
		ПараметрыФормы.Вставить("СписокПараметров",           СписокПараметров);
		ПараметрыФормы.Вставить("ОписанияТиповВидовСубконто", ОписанияТиповВидовСубконто);
		
		ПараметрыОповещения = Новый Структура();
		ПараметрыОповещения.Вставить("ТекущаяСтрока", Элементы.Отборы.ТекущаяСтрока);
		ПараметрыОповещения.Вставить("Отбор",         КомпоновщикНастроек.Настройки.Отбор);
		
		Оповещение = Новый ОписаниеОповещения("СписокЗначенийОтбораЗавершение", ЭтотОбъект, ПараметрыОповещения);
		
		ОткрытьФорму("ОбщаяФорма.СписокЗначенийОтбора", ПараметрыФормы, Элемент, , , , Оповещение);
		
	КонецЕсли;

КонецПроцедуры


// Обработка оповещения о закрытии формы СписокЗначенийОтбора
//
// Параметры:
//	 Результат - Произвольный - результат закрытия формы
//	 ДополнительныеПараметры - Структура - дополнительные параметры оповещения, содержит ключи:
//	 * ТекущаяСтрока - ИдентификаторКомпоновкиДанных - Идентификатор строки отбора для которой открывалась форма.
//	 * Отбор - ОтборКомпоновкиДанных - редактируемый отбор, для которого открывалась форма.
//
Процедура СписокЗначенийОтбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("СписокЗначений") Тогда
		
		ЭлементОтбора = ДополнительныеПараметры.Отбор.ПолучитьОбъектПоИдентификатору(ДополнительныеПараметры.ТекущаяСтрока);
		ЭлементОтбора.ПравоеЗначение = Результат;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеПоля

// Вызывается из обработчика события ПередНачаломДобавления табличного поля ДополнительныеПоля.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма отчета.
//	Элемент - ТаблицаФормы - Таблица ДополнительныеПоля.
//	Отказ - Булево - Признак отказа.
//	Копирование - Булево - Признак копирования.
//	Родитель - Произвольный - Ссылка на родителя.
//	Группа - Булево - Признак добавления группы.
//
Процедура ДополнительныеПоляПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
	ПараметрыФормы.Вставить("Режим"                , "Выбор");
	ПараметрыФормы.Вставить("ИсключенныеПоля"      , Форма.ПолучитьЗапрещенныеПоля("Выбор"));
	ПараметрыФормы.Вставить("ТекущаяСтрока"        , Неопределено);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ДополнительныеПоляПередНачаломДобавленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
	
	Отказ = Истина;
	
КонецПроцедуры

// Завершает добавление новой строки в табличную часть ДополнительныеПоля формы отчета.
//
// Параметры:
//	РезультатЗакрытия - Структура - Возвращаемое значение из общей формы ФормаВыбораДоступногоПоля.
//	ДополнительныеПараметры - Произвольный - Дополнительные параметры описания оповещения.
//
Процедура ДополнительныеПоляПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		НоваяСтрока = Форма.Отчет.ДополнительныеПоля.Добавить();
		НоваяСтрока.Использование = Истина;
		НоваяСтрока.Поле          = ПараметрыВыбранногоПоля.Поле;
		НоваяСтрока.Представление = ПараметрыВыбранногоПоля.Заголовок;
		
		Если Не ЗначениеЗаполнено(Форма.ИдентификаторЗадания) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Форма.Элементы.Результат, "НеАктуальность");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из обработчика события ПередНачаломИзменения табличного поля ДополнительныеПоля.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма отчета.
//	Элемент - ТаблицаФормы - Таблица отбора.
//	Отказ - Булево - Признак отказа.
//
Процедура ДополнительныеПоляПередНачаломИзменения(Форма, Элемент, Отказ) Экспорт
	
	Если Элемент.ТекущийЭлемент = Форма.Элементы.ДополнительныеПоляПредставление Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
		ПараметрыФормы.Вставить("Режим"                , "Выбор");
		ПараметрыФормы.Вставить("ИсключенныеПоля"      , Форма.ПолучитьЗапрещенныеПоля("Выбор"));
		ПараметрыФормы.Вставить("ТекущаяСтрока"        , Элемент.ТекущиеДанные.Поле);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
	
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ДополнительныеПоляПередНачаломИзмененияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Завершает изменение строки в табличной части ДополнительныеПоля формы отчета.
//
// Параметры:
//	РезультатЗакрытия - Структура - Возвращаемое значение из общей формы ФормаВыбораДоступногоПоля.
//	ДополнительныеПараметры - Произвольный - Дополнительные параметры описания оповещения.
//
Процедура ДополнительныеПоляПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма =   ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		НоваяСтрока = Элемент.ТекущиеДанные;
		НоваяСтрока.Использование = Истина;
		НоваяСтрока.Поле          = ПараметрыВыбранногоПоля.Поле;
		НоваяСтрока.Представление = ПараметрыВыбранногоПоля.Заголовок;
		
		Если Не ЗначениеЗаполнено(Форма.ИдентификаторЗадания) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Форма.Элементы.Результат, "НеАктуальность");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сортировка

// Вызывается из обработчика события ПередНачаломДобавления табличного поля Сортировка.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма отчета.
//	Элемент - ТаблицаФормы - Таблица Сортировка.
//	Отказ - Булево - Признак отказа.
//	Копирование - Булево - Признак копирования.
//	Родитель - Произвольный - Ссылка на родителя.
//	Группа - Булево - Признак добавления группы.
//
Процедура СортировкаПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
	ПараметрыФормы.Вставить("Режим"                , "Порядок");
	ПараметрыФормы.Вставить("ИсключенныеПоля"      , Форма.ПолучитьЗапрещенныеПоля("Порядок"));
	ПараметрыФормы.Вставить("ТекущаяСтрока"        , Неопределено);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("СортировкаПередНачаломДобавленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
		
	Отказ = Истина;
	
КонецПроцедуры

// Завершает добавление новой строки в табличную часть Сортировка формы отчета.
//
// Параметры:
//	РезультатЗакрытия - Структура - Возвращаемое значение из общей формы ФормаВыбораДоступногоПоля.
//	ДополнительныеПараметры - Произвольный - Дополнительные параметры описания оповещения.
//
Процедура СортировкаПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		НоваяСтрока = Форма.Отчет.КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		НоваяСтрока.Использование     = Истина;
		НоваяСтрока.Поле              = Новый ПолеКомпоновкиДанных(ПараметрыВыбранногоПоля.Поле);
		НоваяСтрока.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		Форма.ОбновитьОтображениеДанных();
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из обработчика события ПередНачаломИзменения табличного поля Сортировка.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма отчета.
//	Элемент - ТаблицаФормы - Таблица отбора.
//	Отказ - Булево - Признак отказа.
//
Процедура СортировкаПередНачаломИзменения(Форма, Элемент, Отказ) Экспорт
	
	Если СтрНайти(Элемент.ТекущийЭлемент.Имя, "СортировкаПоле") = 1 Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
		ПараметрыФормы.Вставить("Режим"          , "Порядок");
		ПараметрыФормы.Вставить("ИсключенныеПоля", Форма.ПолучитьЗапрещенныеПоля("Порядок"));
		ПараметрыФормы.Вставить("ТекущаяСтрока"  , Элемент.ТекущиеДанные.Поле);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
	
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("СортировкаПередНачаломИзмененияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Завершает изменение строки в табличной части Сортировка формы отчета.
//
// Параметры:
//	РезультатЗакрытия - Структура - Возвращаемое значение из общей формы ФормаВыбораДоступногоПоля.
//	ДополнительныеПараметры - Произвольный - Дополнительные параметры описания оповещения.
//
Процедура СортировкаПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма =   ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		РедактируемаяСтрока = Форма.Отчет.КомпоновщикНастроек.Настройки.Порядок.ПолучитьОбъектПоИдентификатору(Элемент.ТекущаяСтрока);
		
		РедактируемаяСтрока.Использование = Истина;
		РедактируемаяСтрока.Поле          = Новый ПолеКомпоновкиДанных(ПараметрыВыбранногоПоля.Поле);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область РасшифровкаСтандартныхОтчетов

// Обрабатывает вызов расшифровки стандартного отчета.
// Выполняется поиск возможных действий расшифровки и открывается их выбор.
//
// Параметры:
//  ФормаОтчета	- ФормаКлиентскогоПриложения - Форма отчета для которого была вызвана расшифровка.
//  Элемент	- ЭлементФормы - Элемент формы (Табличный документ) из события которого была вызвана расшифровка, 
//		элемент будет использован для отображения списка действий расшифровки.
//  ИдентификаторРасшифровки - ИдентификаторРасшифровкиКомпоновкиДанных - Идентификатор расшифровки связывает ячейку, 
//		для которой вызвана расшифровка, с элементом данных расшифровки отчета.
//
Процедура РасшифровкаСтандартногоОтчета(ФормаОтчета, Элемент, ИдентификаторРасшифровки) Экспорт
	
	
КонецПроцедуры


// Производит анализ данных расшифровки, выдает список доступных действий и открывает форму отчета или объекта.
// Вызывается из события РезультатОбработкаРасшифровки табличного документа отчета.
//
// Параметры:
//  ФормаОтчета - ФормаКлиентскогоПриложения - Формат отчет из которого пришел запрос на расшифровку.
//  Элемент - ЭлементФормы - Элемент формы (Табличный документ) из события которого была вызвана расшифровка, 
//		элемент будет использован для отображения списка действий расшифровки.
//  Расшифровка - ИдентификаторРасшифровкиКомпоновкиДанных - Идентификатор расшифровки из ячейки,
//		для которой вызвана расшифровка.
//  СтандартнаяОбработка - Булево - Флаг стандартной обработки.
//
Процедура ОбработкаРасшифровкиСтандартногоОтчета(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ИдентификаторОбъекта = БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(ФормаОтчета);
	
		
		ПараметрыРасшифровки = БухгалтерскиеОтчетыВызовСервера.ПолучитьПараметрыРасшифровкиОтчета(ФормаОтчета.ДанныеРасшифровки, ИдентификаторОбъекта, Расшифровка);
		
		Если Не ЗначениеЗаполнено(ПараметрыРасшифровки) Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполняемыеНастройки = Новый Структура;
		ЗаполняемыеНастройки.Вставить("Показатели",      Ложь);
		ЗаполняемыеНастройки.Вставить("Группировка",     Истина);
		ЗаполняемыеНастройки.Вставить("Отбор",           Ложь);
		ЗаполняемыеНастройки.Вставить("ВыводимыеДанные", Истина);
		
		Если ПараметрыРасшифровки.ОткрытьОбъект Тогда
			ПоказатьЗначение( , ПараметрыРасшифровки.Значение);
		ИначеЕсли ПараметрыРасшифровки.Свойство("ОткрытьФорму") И ПараметрыРасшифровки.ОткрытьФорму Тогда
			ОткрытьФорму(ПараметрыРасшифровки.Форма, ПараметрыРасшифровки.ПараметрыФормы);
		ИначеЕсли ПараметрыРасшифровки.Свойство("ПерейтиПоСсылке") И ПараметрыРасшифровки.ПерейтиПоСсылке Тогда
			ПерейтиПоНавигационнойСсылке(ПараметрыРасшифровки.Значение);
		Иначе
			СписокПунктовМеню = ПараметрыРасшифровки.СписокПунктовМеню;
			Если СписокПунктовМеню.Количество() = 1 Тогда
				ИДРасшифровки = СписокПунктовМеню[0].Значение;
				ИмяФормы = ПолучитьИмяФормыПоИДРасшифровки(ИДРасшифровки);

				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("ВидРасшифровки",          1);
				ПараметрыФормы.Вставить("АдресНастроек",           ФормаОтчета.ДанныеРасшифровки);
				ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
				ПараметрыФормы.Вставить("ИДРасшифровки",           ИДРасшифровки);
				ПараметрыФормы.Вставить("ЗаполняемыеНастройки",    ЗаполняемыеНастройки);

				ОткрытьФорму(ИмяФормы, ПараметрыФормы,, Истина);
			ИначеЕсли СписокПунктовМеню.Количество() > 0 Тогда
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ЗаполняемыеНастройки", ЗаполняемыеНастройки);
				ДополнительныеПараметры.Вставить("ФормаОтчета", ФормаОтчета);
				Оповещение = Новый ОписаниеОповещения("ВыбратьИзМенюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				ФормаОтчета.ПоказатьВыборИзМеню(Оповещение, СписокПунктовМеню, Элемент);
			КонецЕсли;
		КонецЕсли;
	
КонецПроцедуры

// Обрабатывается выбор из списка действий расшифровки,
// производится открытие формы отчета или объекта.
//
// Параметры:
//  Результат - ЭлементСпискаЗначений - Выбранный пункт действий расшифровки.
//  ДополнительныеПараметры	- Структура - Дополнительные параметры, содержат Форму расшифровываемого отчета ФормаОтчета
// 		и структуру ЗаполняемыеНастройки, в которой указано какие настройки нужно заполнить по умолчанию.
//
Процедура ВыбратьИзМенюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если ТипЗнч(Результат.Значение) = Тип("Строка") Тогда
			ИмяФормы = ПолучитьИмяФормыПоИДРасшифровки(Результат.Значение);

			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ВидРасшифровки",          1);
			ПараметрыФормы.Вставить("АдресНастроек",           ДополнительныеПараметры.ФормаОтчета.ДанныеРасшифровки);
			ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
			ПараметрыФормы.Вставить("ИДРасшифровки",           Результат.Значение);
			ПараметрыФормы.Вставить("ЗаполняемыеНастройки",    ДополнительныеПараметры.ЗаполняемыеНастройки);

			ОткрытьФорму(ИмяФормы, ПараметрыФормы,, Истина);
		Иначе
			ПоказатьЗначение( , Результат.Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

// Возвращает интервал начала формирования отчета после открытия формы.
//
// Возвращаемое значение:
//	Число - Интервал в секундах.
//
Функция ИнтервалЗапускаФормированияОтчетаПриОткрытии() Экспорт
	
	Возврат 0.1;
	
КонецФункции


// Модифицирует свойства формы, обеспечивая срабатывание обработчиков сохранения настроек.
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения - форма отчета.
//  ОтчетВызванИзКонтекста	 - Булево - Истина, если отчет вызван из контекста
//                             и показывает какие-то ситуативные данные этого контекста,
//                             например, расшифровку показателя или результата регламентной операции.
//
Процедура ПередСохранениемНастроек(Форма, ОтчетВызванИзКонтекста) Экспорт
	
	// Структура отчета задается динамически, поэтому в сохранении Варианта нет необходимости.
	Форма.ВариантМодифицирован = Ложь;
	
	// Настройки редактируются без использования элементов формы, связанными с пользовательскими настройками.
	// Поэтому форма не может сообщить, редактировались ли фактически настройки или нет:
	// всегда даем команду на сохранение настроек.
	// В то же время, в режиме расшифровки сохранять настройки не следует, поскольку часть этих настроек ситуативная,
	// предназначена для расшифровки конкретного показателя.
	Форма.ПользовательскиеНастройкиМодифицированы = Не ОтчетВызванИзКонтекста;
	
КонецПроцедуры

// Предлагает сохранить табличное поле отчета в наиболее часто используемом формате.
//
// Параметры:
//  Форма        - ФормаКлиентскогоПриложения - форма отчета.
//  ИмяТабличногоДокумента - Строка - имя реквизита с данными табличного документа.
//
Процедура ОтчетСохранитьКак(Форма, ИмяТабличногоДокумента = "Результат") Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("Заголовок",           Форма.Заголовок);
	Контекст.Вставить("СохраняемыйДокумент", Форма[ИмяТабличногоДокумента]);
	
	ОповещениеОРаботеСФайлами = Новый ОписаниеОповещения(
		"ОтчетСохранитьКакПриПодключенииРасширенияРаботыСФайлами", ЭтотОбъект, Контекст);

	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(ОповещениеОРаботеСФайлами,
		НСтр("ru = 'Для сохранения файла требуется установка расширения для работы с 1С:Предприятием.'"),
		Истина);

КонецПроцедуры

Процедура ОтчетСохранитьКакПриПодключенииРасширенияРаботыСФайлами(РасширениеПодключено, Контекст) Экспорт
	
	ЗаголовокДиалога = НСтр("ru = 'Сохранить как'");
	ИмяФайла = Лев(ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(Контекст.Заголовок, " "), 150);
	ТипФайла = БухгалтерскиеОтчетыВызовСервера.ТипФайлаТабличногоДокументаПоУмолчанию();
	
	Если Не РасширениеПодключено Тогда
		
		АдресДвоичныхДанных = БухгалтерскиеОтчетыВызовСервера.ДвоичныеДанныеИзТабличногоДокумента(
			Контекст.СохраняемыйДокумент, ТипФайла);
		
		ПолучитьФайл(АдресДвоичныхДанных, ИмяФайла + "." + НРег(ТипФайла));
		Возврат;
		
	КонецЕсли;
	
	ДиалогСохранения = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогСохранения.Заголовок = ЗаголовокДиалога;
	ДиалогСохранения.ПолноеИмяФайла = ИмяФайла;
	
	// Опередяем список форматов, в которых возможно сохранение.
	НастройкиФорматов = Новый Структура;
	НастройкиФорматов.Вставить("mxl",  ТипФайлаТабличногоДокумента.MXL);
	НастройкиФорматов.Вставить("xls",  ТипФайлаТабличногоДокумента.XLS);
	НастройкиФорматов.Вставить("xlsx", ТипФайлаТабличногоДокумента.XLSX);
	НастройкиФорматов.Вставить("pdf",  ТипФайлаТабличногоДокумента.PDF);
	НастройкиФорматов.Вставить("ods",  ТипФайлаТабличногоДокумента.ODS);
	НастройкиФорматов.Вставить("docx", ТипФайлаТабличногоДокумента.DOCX);
	НастройкиФорматов.Вставить("html", ТипФайлаТабличногоДокумента.HTML5);
	НастройкиФорматов.Вставить("txt",  ТипФайлаТабличногоДокумента.TXT);
	
	// Задаем список представлений форматов для диалога выбора сохраняемого файла.
	ИндексФильтра = 0;
	Фильтр = Новый Массив;
	Для Каждого НастройкаФормата Из НастройкиФорматов Цикл
		
		ПредставлениеФормата = Строка(ПредопределенноеЗначение("Перечисление.ФорматыСохраненияОтчетов." + НастройкаФормата.Ключ));
		ПозицияПробела = СтрНайти(ПредставлениеФормата, " ", НаправлениеПоиска.СКонца);
		Фильтр.Добавить(Лев(ПредставлениеФормата, ПозицияПробела - 1));
		Фильтр.Добавить("*." + НастройкаФормата.Ключ);
		
		Если ДиалогСохранения.ИндексФильтра <> 0 Тогда // тип по-умолчанию уже задан
			Продолжить;
		ИначеЕсли НастройкаФормата.Значение <> ТипФайла Тогда // это не тип по-умолчанию
			ИндексФильтра = ИндексФильтра + 1;
			Продолжить;
		КонецЕсли;
		
		ДиалогСохранения.ИндексФильтра = ИндексФильтра;
		ДиалогСохранения.Расширение    = НастройкаФормата.Ключ;
		
	КонецЦикла;
	ДиалогСохранения.Фильтр = СтрСоединить(Фильтр, "|");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("НастройкиФорматов",   НастройкиФорматов);
	ДополнительныеПараметры.Вставить("СохраняемыйДокумент", Контекст.СохраняемыйДокумент);
		
	ОповещениеОВыборе = Новый ОписаниеОповещения("ОтчетСохранитьКакЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
	ДиалогСохранения.Показать(ОповещениеОВыборе);
	
КонецПроцедуры

Процедура ОтчетСохранитьКакЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ВыбранныеФайлы) Тогда
		Возврат;
	КонецЕсли;
	ПутьКФайлу = ВыбранныеФайлы[0];
	
	// Определяем формат по расширению.
	ТипФайла = ТипФайлаТабличногоДокумента.MXL;
	ПозицияТочки = СтрНайти(ПутьКФайлу, ".", НаправлениеПоиска.СКонца);
	Если ПозицияТочки <> 0 Тогда
		
		Расширение = Прав(ПутьКФайлу, СтрДлина(ПутьКФайлу) - ПозицияТочки);
		Если Не ДополнительныеПараметры.НастройкиФорматов.Свойство(Расширение, ТипФайла) Тогда
			ТипФайла = ТипФайлаТабличногоДокумента.MXL;
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительныеПараметры.СохраняемыйДокумент.Записать(ПутьКФайлу, ТипФайла);
	
	БухгалтерскиеОтчетыВызовСервера.СохранитьТипФайлаТабличногоДокументаПоУмолчанию(ТипФайла);

КонецПроцедуры

#Область РасчетСуммыВыделенныхЯчеек

// Начинает расчет суммы выделенных ячеек.
// Вызывается из обработчика ПриАктивизации() поля табличного документа.
//
// Параметры:
//  ПолеТабличногоДокумента - ПолеФормы - поле формы, в котором выделены ячейки.
//  ИмяОбработчикаОжидания  - Строка - имя обработчика ожидания, объявленного в форме.
//                Обработчик должен вызывать ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента,
//                а по ее команде инициировать передачу контекста на сервер, где вызывать
//                БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента.
//
Процедура НачатьРасчетСуммыВыделенныхЯчеек(ПолеТабличногоДокумента, Форма, ИмяОбработчикаОжидания) Экспорт
	
	ВыделенныеОбласти = ПолеТабличногоДокумента.ПолучитьВыделенныеОбласти();
	Если ВыделенныеОбласти.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
	Форма.ПодключитьОбработчикОжидания(ИмяОбработчикаОжидания, ИнтервалОжидания, Истина);
	
КонецПроцедуры

// Вычисляет суммы выделенных ячеек табличного документа.
//
// Параметры:
//	ПолеСумма - Число - Сумма ячеек.
//	Результат - ТабличныйДокумент - Табличный документ с ячейками.
//	ПолеРезультат - ПолеФормы - поле формы, в котором выделены ячейки.
//	КэшВыделеннойОбласти - Структура - Содержит ранее рассчитанные значения ячеек.
//	НеобходимоВычислятьНаСервере - Булево - Признак того, что необходим вызов сервера.
//
// Возвращаемое значение:
//  Булево - Признак того, что необходим вызов сервера (то же значение, что и НеобходимоВычислятьНаСервере).
//
Функция ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(ПолеСумма,
	                                                     Результат,
	                                                     ПолеРезультат,
	                                                     КэшВыделеннойОбласти,
	                                                     НеобходимоВычислятьНаСервере = Неопределено,
														 РазделительДробнойЧасти = "") Экспорт
	
	НеобходимоВычислятьНаСервере = Ложь;
	
	Если НеобходимоОбновитьСумму(ПолеРезультат, КэшВыделеннойОбласти, РазделительДробнойЧасти) Тогда
		ПолеСумма = 0;
		КоличествоВыделенныхОбластей = КэшВыделеннойОбласти.Количество();
		Если КоличествоВыделенныхОбластей = 0      // Ничего не выделено.
			ИЛИ КэшВыделеннойОбласти.Свойство("T") Тогда // Выделен весь табличный документ (Ctrl+A).
			КэшВыделеннойОбласти.Вставить("Сумма", 0);
		ИначеЕсли КоличествоВыделенныхОбластей = 1 Тогда
			// Если выделено небольшое количество ячеек, то получим сумму на клиенте.
			Для каждого КлючИЗначение Из КэшВыделеннойОбласти Цикл
				СтруктураАдресВыделеннойОбласти = КлючИЗначение.Значение;
			КонецЦикла;
			
			РазмерОбластиПоВертикали   = СтруктураАдресВыделеннойОбласти.Низ   - СтруктураАдресВыделеннойОбласти.Верх;
			РазмерОбластиПоГоризонтали = СтруктураАдресВыделеннойОбласти.Право - СтруктураАдресВыделеннойОбласти.Лево;
			
			// В некоторых отчетах показатели (да и аналитика на которую может встать пользователь)
			// выводятся в "объединенных" ячейках - не желательно в этом случае делать серверный вызов. 
			// Выделенная область из 10 ячеек закрывает все такие случае и скорее всего всегда будет доступна на клиенте.
			// Максимум, может быть сделан один неявный серверный вызов.
			ВычислитьНаКлиенте = (РазмерОбластиПоВертикали + РазмерОбластиПоГоризонтали) < 12;
			Если ВычислитьНаКлиенте Тогда
				СуммаВЯчейках = 0;
				Для ИндексСтрока = СтруктураАдресВыделеннойОбласти.Верх По СтруктураАдресВыделеннойОбласти.Низ Цикл
					Для ИндексКолонка = СтруктураАдресВыделеннойОбласти.Лево По СтруктураАдресВыделеннойОбласти.Право Цикл
						Попытка
							Ячейка = Результат.Область(ИндексСтрока, ИндексКолонка, ИндексСтрока, ИндексКолонка);
							Если Ячейка.Видимость = Истина Тогда
								Если Ячейка.СодержитЗначение И ТипЗнч(Ячейка.Значение) = Тип("Число") Тогда
									СуммаВЯчейках = СуммаВЯчейках + Ячейка.Значение;
								ИначеЕсли ЗначениеЗаполнено(Ячейка.Текст) Тогда
									ЧислоВЯчейке  = Число(СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(Символ(32)+Символ(43), Ячейка.Текст, Символ(0)));
									СуммаВЯчейках = СуммаВЯчейках + ЧислоВЯчейке;
								КонецЕсли;
							КонецЕсли;
						Исключение
							// Запись в журнал регистрации не требуется.
						КонецПопытки;
					КонецЦикла;
				КонецЦикла;
				
				ПолеСумма = СуммаВЯчейках;
				КэшВыделеннойОбласти.Вставить("Сумма", ПолеСумма);
			Иначе
				// Если ячеек много, то лучше вычислим сумму ячеек на сервере за один вызов,
				// т.к. неявных серверных вызовов может быть гораздо больше.
				НеобходимоВычислятьНаСервере = Истина;
			КонецЕсли;
		Иначе
			// Вычислим сумму ячеек на сервере.
			НеобходимоВычислятьНаСервере = Истина;
		КонецЕсли;
	Иначе	
		ПолеСумма = КэшВыделеннойОбласти.Сумма;
	КонецЕсли;
	
	Возврат НеобходимоВычислятьНаСервере;
	
КонецФункции

#КонецОбласти

// Обрабатывает полученный результат проверки актуальности закрытия месяца для вывода информации в отчет.
//
//	Параметры:
//		Результат - Структура - см. возвращаемое значение ДлительныеОперации.ВыполнитьВФоне();
//		Форма - ФормаКлиентскогоПриложения - форма отчета, имеет основной реквизит "Отчет".
//
Процедура ОбработатьРезультатПроверкиАктуальности(Результат, Форма) Экспорт

	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = ПолучитьИзВременногоХранилища(Результат);
	УдалитьИзВременногоХранилища(Результат);
	Форма.АдресХранилищаАктуализации = "";

	МассивПодстрок = Новый Массив;
	Если РезультатПроверки.Свойство("Статус") И РезультатПроверки.Статус = "Ошибка" Тогда
		Если РезультатПроверки.Свойство("ПодробноеПредставлениеОшибки") Тогда
			МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(РезультатПроверки.ПодробноеПредставлениеОшибки));
		Иначе
			МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Не удалось получить информацию об актуальности данных отчета'")));
		КонецЕсли;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	Если ТипЗнч(РезультатПроверки) <> Тип("Структура") Тогда
		РезультатПроверки = Новый Структура;
	КонецЕсли;
	
	Если Не РезультатПроверки.Свойство("Состояние") Тогда
		РезультатПроверки.Вставить("Состояние", "НеТребуется");
	КонецЕсли;
		
	Если РезультатПроверки.Состояние = "НеТребуется" Тогда
		Элементы.Актуализация.Видимость = Ложь;
	КонецЕсли;
	
	Если РезультатПроверки.Состояние = "Выполняется" Тогда
		ОтобразитьСостояниеАктуализации(Форма);
	КонецЕсли;
	
	Если РезультатПроверки.Состояние = "НеВыполнено" И РезультатПроверки.Свойство("ДатаАктуальности") Тогда
		Форма.ДатаАктуальности = РезультатПроверки.ДатаАктуальности;
		ТекстДанныеУчетаНеАктуальны = НСтр("ru='Данные учета неактуальны по'") + " ";
		МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(ТекстДанныеУчетаНеАктуальны));
		МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(Формат(Форма.ДатаАктуальности, "ДЛФ=D"), Новый Шрифт(,, Истина)));
		МассивПодстрок.Добавить(Новый ФорматированнаяСтрока("."));
		
		МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(" " + НСтр("ru='Рекомендуется выполнить'") + " "));
		МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='закрытие месяца'"),,,, "e1cib/app/Обработка.ОперацииЗакрытияМесяца"));
		МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(" " + НСтр("ru = 'и сформировать отчет повторно.'")));
	КонецЕсли;
	
	Если МассивПодстрок.Количество() Тогда
		
		Элементы.ТекстПриНеобходимостиАктуализации.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		Элементы.ТекстПриНеобходимостиАктуализации.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Низ;
		Элементы.СкрытьПриНеобходимостиАктуализации.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Низ;

		Элементы.Актуализировать.Видимость = Ложь;
		Элементы.ТекстПриНеобходимостиАктуализации.Заголовок = Новый ФорматированнаяСтрока(МассивПодстрок);

		СброситьСостояниеАктуализации(Элементы);
		Элементы.ТребуетсяАктуализация.Видимость = Истина;
		Элементы.Актуализация.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Выводит на форму отчета информацию о том, что выполняется фоновое задание получения актуальности данных закрытия месяца.
//
//	Параметры:
//		Форма - ФормаКлиентскогоПриложения - форма отчета, имеет основной реквизит "Отчет".
//
Процедура ОтобразитьСостояниеАктуализации(Форма) Экспорт
	
	ИдетАктуализация = Истина;
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(Форма.ПараметрыОбработчикаОжиданияАктуализации);
	Форма.ПодключитьОбработчикОжидания("Подключаемый_ПроверитьЗавершениеАктуализации", Форма.ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
	
	Элементы = Форма.Элементы;
	Элементы.РисПриАктуализации.Видимость = ИдетАктуализация;
	
	Элементы.ТекстПриАктуализации.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
	Элементы.СкрытьПриАктуализации.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
	Элементы.ИдетАктуализация.ЦветФона = Новый Цвет;
	
	ТекстПриАктуализации = НСтр("ru='Данные этого отчета могут измениться.'");
	Элементы.ТекстПриАктуализации.Заголовок = ТекстПриАктуализации;
	
	СброситьСостояниеАктуализации(Элементы);
	Элементы.Актуализация.Видимость = Истина;
	Элементы.ИдетАктуализация.Видимость = Истина;
	
КонецПроцедуры

// Сбрасывает все данные по состоянию актуализации (используется когда данные закрытия месяца актуальны на дату отчета).
//
//	Параметры:
//		Элементы - КоллекцияЭлементовФормы - элементы формы, которые должны содержать:
//			* ИдетПроверкаАктуальности - ГруппаФормы - отображает факт выполнения проверки актуальности;
//			* ТребуетсяАктуализация - ГруппаФормы - отображает, что данные закрытия месяца не актуальны;
//			* ИдетАктуализация - ГруппаФормы - отображает, что сейчас выполняется операция закрытия месяца;
//			* ДанныеАктуализированы - ГруппаФормы - отображает факт актуальности данных.
//
Процедура СброситьСостояниеАктуализации(Элементы) Экспорт
	
	Элементы.ИдетПроверкаАктуальности.Видимость	= Ложь;
	Элементы.ТребуетсяАктуализация.Видимость	= Ложь;
	Элементы.ИдетАктуализация.Видимость			= Ложь;
	Элементы.ДанныеАктуализированы.Видимость	= Ложь;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НеобходимоОбновитьСумму(ПолеРезультат, КэшВыделеннойОбласти, РазделительДробнойЧасти)
	Перем СтруктураАдресВыделеннойОбласти;
	
	ВыделенныеОбласти    = ПолеРезультат.ПолучитьВыделенныеОбласти();
	КоличествоВыделенных = ВыделенныеОбласти.Количество();
	
	Если КоличествоВыделенных = 0 Тогда
		КэшВыделеннойОбласти = Новый Структура();
		Возврат Истина;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Ложь;
	Если ТипЗнч(КэшВыделеннойОбласти) <> Тип("Структура") Тогда
		КэшВыделеннойОбласти = Новый Структура();
		ВозвращаемоеЗначение = Истина;
	ИначеЕсли ВыделенныеОбласти.Количество() <> КэшВыделеннойОбласти.Количество() Тогда
		КэшВыделеннойОбласти = Новый Структура();
		ВозвращаемоеЗначение = Истина;
	Иначе
		Для ИндексОбласти = 0 По КоличествоВыделенных - 1 Цикл
			ВыделеннаяОбласть = ВыделенныеОбласти[ИндексОбласти];
			ИмяОбласти = СтрЗаменить(ВыделеннаяОбласть.Имя, ":", "_");
			КэшВыделеннойОбласти.Свойство(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
			
			// Не нашли нужную область в кэше, поэтому переинициализируем кэш.
			Если ТипЗнч(СтруктураАдресВыделеннойОбласти) <> Тип("Структура") Тогда
				КэшВыделеннойОбласти = Новый Структура();
				ВозвращаемоеЗначение = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для ИндексОбласти = 0 По КоличествоВыделенных - 1 Цикл
		ВыделеннаяОбласть = ВыделенныеОбласти[ИндексОбласти];
		ИмяОбласти = СтрЗаменить(ВыделеннаяОбласть.Имя, ":", "_");
		
		Если ТипЗнч(ВыделеннаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			СтруктураАдресВыделеннойОбласти = Новый Структура;
			СтруктураАдресВыделеннойОбласти.Вставить("Верх", 0);
			СтруктураАдресВыделеннойОбласти.Вставить("Низ",  0);
			СтруктураАдресВыделеннойОбласти.Вставить("Лево", 0);
			СтруктураАдресВыделеннойОбласти.Вставить("Право",0);
			Если Не ПустаяСтрока(РазделительДробнойЧасти) Тогда
				СтруктураАдресВыделеннойОбласти.Вставить("РазделительДробнойЧасти", РазделительДробнойЧасти);
			КонецЕсли;
			КэшВыделеннойОбласти.Вставить(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
			ВозвращаемоеЗначение = Истина;
			Продолжить;
		КонецЕсли;
		
		КэшВыделеннойОбласти.Свойство(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
		Если ТипЗнч(СтруктураАдресВыделеннойОбласти) <> Тип("Структура") Тогда
			СтруктураАдресВыделеннойОбласти = Новый Структура;
			СтруктураАдресВыделеннойОбласти.Вставить("Верх", 0);
			СтруктураАдресВыделеннойОбласти.Вставить("Низ",  0);
			СтруктураАдресВыделеннойОбласти.Вставить("Лево", 0);
			СтруктураАдресВыделеннойОбласти.Вставить("Право",0);
			Если Не ПустаяСтрока(РазделительДробнойЧасти) Тогда
				СтруктураАдресВыделеннойОбласти.Вставить("РазделительДробнойЧасти", РазделительДробнойЧасти);
			КонецЕсли;
			КэшВыделеннойОбласти.Вставить(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
			ВозвращаемоеЗначение = Истина;
		КонецЕсли;
		
		Если СтруктураАдресВыделеннойОбласти.Верх <> ВыделеннаяОбласть.Верх
			ИЛИ СтруктураАдресВыделеннойОбласти.Низ <> ВыделеннаяОбласть.Низ
			ИЛИ СтруктураАдресВыделеннойОбласти.Лево <> ВыделеннаяОбласть.Лево
			ИЛИ СтруктураАдресВыделеннойОбласти.Право <> ВыделеннаяОбласть.Право Тогда
				СтруктураАдресВыделеннойОбласти = Новый Структура;
				СтруктураАдресВыделеннойОбласти.Вставить("Верх",  ВыделеннаяОбласть.Верх);
				СтруктураАдресВыделеннойОбласти.Вставить("Низ",   ВыделеннаяОбласть.Низ);
				СтруктураАдресВыделеннойОбласти.Вставить("Лево",  ВыделеннаяОбласть.Лево);
				СтруктураАдресВыделеннойОбласти.Вставить("Право", ВыделеннаяОбласть.Право);
				Если Не ПустаяСтрока(РазделительДробнойЧасти) Тогда
					СтруктураАдресВыделеннойОбласти.Вставить("РазделительДробнойЧасти", РазделительДробнойЧасти);
				КонецЕсли;
				КэшВыделеннойОбласти.Вставить(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
				ВозвращаемоеЗначение = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#Область РасшифровкаСтандартныхОтчетов


// Определяет полный путь к форме отчета.
//
// Параметры:
//  ИДРасшифровки	 - Строка	 - Имя отчета, путь к форме которого нужно получить.
// 
// Возвращаемое значение:
//  Строка - Полный путь к форме указанного отчета.
//
Функция ПолучитьИмяФормыПоИДРасшифровки(ИДРасшифровки)
	
	ИмяОбъекта = ИДРасшифровки;
	ШаблонИмениФормы = "Отчет.%ИмяОбъекта%.Форма.ФормаОтчета";
	
	Если ИДРасшифровки = "ОборотыСчетаПоДням" 
		Или ИДРасшифровки = "ОборотыСчетаПоМесяцам" Тогда
		ИмяОбъекта = "ОборотыСчета";
	КонецЕсли;
	
	Возврат СтрЗаменить(ШаблонИмениФормы, "%ИмяОбъекта%", ИмяОбъекта);
	
КонецФункции

#КонецОбласти

#КонецОбласти
