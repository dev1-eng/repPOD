#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - Структура - см. возвращаемое значение ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПередЗагрузкойВариантаНаСервере = Истина;
	Настройки.События.ПередЗаполнениемПанелиБыстрыхНастроек = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   Отказ - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Передается из параметров обработчика "как есть".
//
// См. также:
//   "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка) Экспорт
	
	Параметры = ЭтаФорма.Параметры;
	ФормаПараметры = ЭтаФорма.ФормаПараметры;
	КомпоновщикНастроекФормы = ЭтаФорма.Отчет.КомпоновщикНастроек;
	
	Если Параметры.Свойство("ПараметрКоманды")
			И Параметры.Свойство("ОписаниеКоманды")
			И Параметры.ОписаниеКоманды.Свойство("ДополнительныеПараметры") Тогда 
		
		СформироватьПараметрыОтчета(Параметры.ПараметрКоманды, ФормаПараметры , Параметры);
		
		ЗначенияФункциональныхОпций = Новый Структура("БазоваяВерсия", ПолучитьФункциональнуюОпцию("БазоваяВерсия"));
		СтрокаБазовая = ?(ЗначенияФункциональныхОпций.БазоваяВерсия, "Базовая", "");
		
		ПараметрКоманды = Параметры.ПараметрКоманды;
		
		Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
			ЭтоМассив = Истина;
			Если ПараметрКоманды.Количество() > 0 Тогда
				ПервыйЭлемент = ПараметрКоманды[0];
			Иначе
				ПервыйЭлемент = Неопределено;
			КонецЕсли;
		Иначе
			ЭтоМассив = Ложь;
			ПервыйЭлемент = ПараметрКоманды;
		КонецЕсли;
		
		Если ТипЗнч(ПервыйЭлемент) = Тип("ДокументСсылка.СверкаВзаиморасчетов") Тогда
			ЭтаФорма.ФормаПараметры.Отбор = Новый Структура("СверкаВзаиморасчетов", ПервыйЭлемент);
			ЭтаФорма.ФормаПараметры.КлючНазначенияИспользования = "СверкаВзаиморасчетов";
			Параметры.КлючНазначенияИспользования = "СверкаВзаиморасчетов";
			Параметры.КлючВарианта = "ПоСверкеВзаиморасчетовКонтекст" + СтрокаБазовая;
		
		ИначеЕсли ТипЗнч(ПервыйЭлемент) = Тип("СправочникСсылка.Контрагенты") Тогда
			ЭтаФорма.ФормаПараметры.Отбор = Новый Структура("Контрагент", ПараметрКоманды);
			ЭтаФорма.ФормаПараметры.КлючНазначенияИспользования = "Контрагент";
			Параметры.КлючНазначенияИспользования = "Контрагент";
			Параметры.КлючВарианта = "ПоКонтрагентамКонтекст" + СтрокаБазовая;

		ИначеЕсли ТипЗнч(ПервыйЭлемент) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			ЭтаФорма.ФормаПараметры.Отбор = Новый Структура("Договор", ПараметрКоманды);
			ЭтаФорма.ФормаПараметры.КлючНазначенияИспользования = "Договор";
			Параметры.КлючНазначенияИспользования = "Договор";
			Параметры.КлючВарианта = "РасчетыСПартнерами" + СтрокаБазовая;
			
		ИначеЕсли ТипЗнч(ПервыйЭлемент) = Тип("СправочникСсылка.Партнеры") ИЛИ
			      ТипЗнч(ПервыйЭлемент) = Тип("СправочникСсылка.СегментыПартнеров") Тогда
			
			СформироватьПараметрыФормыНаСервере(ПараметрКоманды, ЭтаФорма.ФормаПараметры, Параметры, ПервыйЭлемент, ЭтоМассив, СтрокаБазовая);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ФормаПараметры.Свойство("Отбор")
	 И ФормаПараметры.Отбор.Свойство("СверкаВзаиморасчетов") Тогда
		Реквизиты = Документы.СверкаВзаиморасчетов.РеквизитыДокумента(ФормаПараметры.Отбор.СверкаВзаиморасчетов);
		Если Реквизиты <> Неопределено Тогда
			Если ЗначениеЗаполнено(Реквизиты.Организация) Тогда	
				ФормаПараметры.Отбор.Вставить("Организация", Реквизиты.Организация);
			КонецЕсли;
			Если ЗначениеЗаполнено(Реквизиты.Контрагент) Тогда
				Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда
					ФормаПараметры.Отбор.Вставить("Контрагент", Реквизиты.Контрагент);
				Иначе
					ФормаПараметры.Отбор.Вставить("Партнер", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Контрагент,"Партнер"));
				КонецЕсли;
			КонецЕсли;
			Период = Новый СтандартныйПериод;
			Период.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
			Период.ДатаНачала = Реквизиты.НачалоПериода;
			Период.ДатаОкончания = Реквизиты.КонецПериода;
			ФормаПараметры.Отбор.Вставить("Период", Период);
		КонецЕсли;
		ФормаПараметры.Отбор.Удалить("СверкаВзаиморасчетов");
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в одноименном обработчике формы отчета после выполнения кода формы.
//
// Подробнее - см. ОтчетыПереопределяемый.ПередЗагрузкойВариантаНаСервере
//
Процедура ПередЗагрузкойВариантаНаСервере(ЭтаФорма, НовыеНастройкиКД) Экспорт
	Отчет = ЭтаФорма.Отчет;
	КомпоновщикНастроекФормы = Отчет.КомпоновщикНастроек;
	
	// Изменение настроек по функциональным опциям
	НастроитьПараметрыОтборыПоФункциональнымОпциям(КомпоновщикНастроекФормы);
	
	// Установка значений по умолчанию
	УстановитьОбязательныеНастройки(КомпоновщикНастроекФормы, Истина);
	
	НовыеНастройкиКД = КомпоновщикНастроекФормы.Настройки;
КонецПроцедуры

// Вызывается до перезаполнения панели настроек формы отчета.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   ПараметрыЗаполнения - Структура - Параметры, которые будут загружены в отчет.
//
Процедура ПередЗаполнениемПанелиБыстрыхНастроек(ЭтаФорма, ПараметрыЗаполнения) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		Если ТипЗнч(ПараметрыЗаполнения.ОтчетОбъектИлиПолноеИмя) = Тип("Строка") Тогда
			ЭлементыПользовательскихНастроек = КомпоновщикНастроек.Настройки.Отбор.Элементы;
		Иначе
			ЭлементыПользовательскихНастроек = ПараметрыЗаполнения.ОтчетОбъектИлиПолноеИмя.КомпоновщикНастроек.Настройки.Отбор.Элементы;
		КонецЕсли;
		
		Для Каждого ЭлементОтбора Из ЭлементыПользовательскихНастроек Цикл
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Партнер") Тогда
				ЭлементОтбора.ПредставлениеПользовательскойНастройки = "Контрагент";
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПользовательскиеНастройкиМодифицированы = Ложь;
	
	УстановитьОбязательныеНастройки(КомпоновщикНастроек, ПользовательскиеНастройкиМодифицированы);
	
	// Сформируем отчет
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	
	ПараметрДанныеОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета,"ДанныеОтчета");
	ПараметрТипРасчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета,"ТипРасчетов");

	ТекстЗапроса = ТекстЗапросаРасчетыСКлиентами(ПараметрДанныеОтчета.Значение, ПараметрТипРасчета.Значение);
	ВзаиморасчетыСервер.ДобавитьОтборыВыбранныхПолейВЗапрос(ТекстЗапроса, НастройкиОтчета, СхемаКомпоновкиДанных.ВычисляемыеПоля, "Расчеты");
	СхемаКомпоновкиДанных.НаборыДанных.Расчеты.Элементы.РасчетыСКлиентами.Запрос = ТекстЗапроса;
	
	ТекстЗапроса = ТекстЗапросаРасчетыСПоставщиками(ПараметрДанныеОтчета.Значение, ПараметрТипРасчета.Значение);
	ВзаиморасчетыСервер.ДобавитьОтборыВыбранныхПолейВЗапрос(ТекстЗапроса, НастройкиОтчета, СхемаКомпоновкиДанных.ВычисляемыеПоля, "Расчеты");
	СхемаКомпоновкиДанных.НаборыДанных.Расчеты.Элементы.РасчетыСПоставщиками.Запрос = ТекстЗапроса;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	// Сообщим форме отчета, что настройки модифицированы
	Если ПользовательскиеНастройкиМодифицированы Тогда
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьОбязательныеНастройки(КомпоновщикНастроек, ПользовательскиеНастройкиМодифицированы)
	
	КомпоновкаДанныхСервер.УстановитьПараметрыВалютыОтчета(КомпоновщикНастроек, ПользовательскиеНастройкиМодифицированы);
	СегментыСервер.ВключитьОтборПоСегментуПартнеровВСКД(КомпоновщикНастроек);
	УстановитьДатуОтчета(КомпоновщикНастроек, ПользовательскиеНастройкиМодифицированы);
	
КонецПроцедуры

Процедура УстановитьДатуОтчета(КомпоновщикНастроек, ПользовательскиеНастройкиМодифицированы)
	
	ПараметрДатаОтчетаГраница = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "КонецПериодаГраница");
	ПараметрДатаОтчетаГраница.Использование = Истина;

	ПараметрПериод = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Период");
	Если ПараметрПериод.Использование И ЗначениеЗаполнено(ПараметрПериод.Значение.ДатаНачала) Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоОстатки", ПараметрПериод.Значение.ДатаНачала);
		ПараметрДатаОтчетаГраница.Значение = Новый Граница(КонецДня(ПараметрПериод.Значение.ДатаОкончания), ВидГраницы.Включая);
	Иначе
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоОстатки", Дата(1,1,1,0,0,1));
		ПараметрДатаОтчетаГраница.Значение = Дата(1,1,1)
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьПараметрыОтборыПоФункциональнымОпциям(КомпоновщикНастроекФормы)
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		КомпоновкаДанныхСервер.УдалитьЭлементОтбораИзВсехНастроекОтчета(КомпоновщикНастроекФормы, "Контрагент");
	КонецЕсли;
КонецПроцедуры

Функция ТекстЗапросаРасчетыСКлиентами(ВалютаОтчета, ТипРасчетов)
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Сегменты.Партнер КАК Партнер,
	|	ИСТИНА КАК ИспользуетсяОтборПоСегментуПартнеров
	|ПОМЕСТИТЬ ОтборПоСегментуПартнеров
	|ИЗ
	|	РегистрСведений.ПартнерыСегмента КАК Сегменты
	|{ГДЕ
	|	Сегменты.Сегмент.* КАК СегментПартнеров,
	|	Сегменты.Партнер.* КАК Партнер}
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партнер,
	|	ИспользуетсяОтборПоСегментуПартнеров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Расчеты.Организация                                    КАК Организация,
	|	Расчеты.Партнер                                        КАК Партнер,
	|	Расчеты.Контрагент                                     КАК Контрагент,
	|	Расчеты.Договор                                        КАК Договор,
	|	Расчеты.НаправлениеДеятельности                        КАК НаправлениеДеятельности,
	|	Расчеты.ОбъектРасчетов                                 КАК ОбъектРасчетов,
	|	Расчеты.Валюта                                         КАК Валюта,
	|	Расчеты.РасчетныйДокумент                              КАК РасчетныйДокумент,
	|	Расчеты.ДатаВозникновения                              КАК ДатаВозникновения,
	|	Расчеты.ДатаПлановогоПогашения                         КАК ДатаПлановогоПогашения,
	|	СУММА(Расчеты.НашДолгНачальныйОстаток)                 КАК НашДолгНачальныйОстаток,
	|	СУММА(Расчеты.УвеличениеДолга)                         КАК УвеличениеДолга,
	|	СУММА(Расчеты.УменьшениеДолга)                         КАК УменьшениеДолга,
	|	СУММА(Расчеты.НашДолгКонечныйОстаток)                  КАК НашДолгКонечныйОстаток,
	|	СУММА(Расчеты.ДолгПартнераНачальныйОстаток)            КАК ДолгПартнераНачальныйОстаток,
	|	СУММА(Расчеты.ДолгПартнераКонечныйОстаток)             КАК ДолгПартнераКонечныйОстаток,
	|	Расчеты.ТипРасчетов                                    КАК ТипРасчетов,
	|	Расчеты.Регистратор                                    КАК Регистратор
	|ИЗ
	|	(ВЫБРАТЬ
	|		2                                                  КАК ТипРасчетов,
	|		АналитикаУчета.Организация                         КАК Организация,
	|		АналитикаУчета.Партнер                             КАК Партнер,
	|		АналитикаУчета.Контрагент                          КАК Контрагент,
	|		АналитикаУчета.Договор                             КАК Договор,
	|		АналитикаУчета.НаправлениеДеятельности             КАК НаправлениеДеятельности,
	|		РасчетыПоСрокам.ОбъектРасчетов                     КАК ОбъектРасчетов,
	|		РасчетыПоСрокам.Валюта                             КАК Валюта,
	|		РасчетыПоСрокам.РасчетныйДокумент                  КАК РасчетныйДокумент,
	|		РасчетыПоСрокам.ДатаВозникновения                  КАК ДатаВозникновения,
	|		РасчетыПоСрокам.ДатаПлановогоПогашения             КАК ДатаПлановогоПогашения,
	|		РасчетыПоСрокам.ДолгРеглОстаток                    КАК ДолгПартнераНачальныйОстаток,
	|		РасчетыПоСрокам.ПредоплатаРеглОстаток              КАК НашДолгНачальныйОстаток,
	|		0                                                  КАК ДолгПартнераКонечныйОстаток,
	|		0                                                  КАК НашДолгКонечныйОстаток,
	|		0                                                  КАК УвеличениеДолга,
	|		0                                                  КАК УменьшениеДолга,
	|		НЕОПРЕДЕЛЕНО                                       КАК Регистратор
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки({(&НачалоОстатки)}, ) КАК РасчетыПоСрокам
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчета
	|			ПО РасчетыПоСрокам.АналитикаУчетаПоПартнерам = АналитикаУчета.КлючАналитики
	|	ГДЕ
	|		АналитикаУчета.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|	{ГДЕ
	|		АналитикаУчета.Организация.* КАК Организация,
	|		АналитикаУчета.Партнер.* КАК Партнер,
	|		АналитикаУчета.Контрагент.* КАК Контрагент,
	|		АналитикаУчета.Договор.* КАК Договор,
	|		АналитикаУчета.НаправлениеДеятельности.* КАК НаправлениеДеятельности,
	|		(АналитикаУчета.Партнер В
	|				(ВЫБРАТЬ
	|					ОтборПоСегментуПартнеров.Партнер
	|				ИЗ
	|					ОтборПоСегментуПартнеров
	|				ГДЕ
	|					ОтборПоСегментуПартнеров.ИспользуетсяОтборПоСегментуПартнеров = &ИспользуетсяОтборПоСегментуПартнеров))}
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		2,
	|		АналитикаУчета.Организация,
	|		АналитикаУчета.Партнер,
	|		АналитикаУчета.Контрагент,
	|		АналитикаУчета.Договор,
	|		АналитикаУчета.НаправлениеДеятельности,
	|		РасчетыПоСрокам.ОбъектРасчетов,
	|		РасчетыПоСрокам.Валюта,
	|		РасчетыПоСрокам.РасчетныйДокумент,
	|		РасчетыПоСрокам.ДатаВозникновения,
	|		РасчетыПоСрокам.ДатаПлановогоПогашения,
	|		0,
	|		0,
	|		РасчетыПоСрокам.ДолгРеглОстаток,
	|		РасчетыПоСрокам.ПредоплатаРеглОстаток,
	|		0,
	|		0,
	|		НЕОПРЕДЕЛЕНО
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки({(&КонецПериодаГраница)}, ) КАК РасчетыПоСрокам
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчета
	|			ПО РасчетыПоСрокам.АналитикаУчетаПоПартнерам = АналитикаУчета.КлючАналитики
	|	ГДЕ
	|		АналитикаУчета.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|	{ГДЕ
	|		АналитикаУчета.Организация.* КАК Организация,
	|		АналитикаУчета.Партнер.* КАК Партнер,
	|		АналитикаУчета.Контрагент.* КАК Контрагент,
	|		АналитикаУчета.Договор.* КАК Договор,
	|		АналитикаУчета.НаправлениеДеятельности.* КАК НаправлениеДеятельности,
	|		(АналитикаУчета.Партнер В
	|				(ВЫБРАТЬ
	|					ОтборПоСегментуПартнеров.Партнер
	|				ИЗ
	|					ОтборПоСегментуПартнеров
	|				ГДЕ
	|					ОтборПоСегментуПартнеров.ИспользуетсяОтборПоСегментуПартнеров = &ИспользуетсяОтборПоСегментуПартнеров))}
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		2,
	|		АналитикаУчета.Организация,
	|		АналитикаУчета.Партнер,
	|		АналитикаУчета.Контрагент,
	|		АналитикаУчета.Договор,
	|		АналитикаУчета.НаправлениеДеятельности,
	|		РасчетыСКлиентамиПоСрокам.ОбъектРасчетов,
	|		РасчетыСКлиентамиПоСрокам.Валюта,
	|		РасчетыСКлиентамиПоСрокам.РасчетныйДокумент,
	|		РасчетыСКлиентамиПоСрокам.ДатаВозникновения,
	|		РасчетыСКлиентамиПоСрокам.ДатаПлановогоПогашения,
	|		0,
	|		0,
	|		0,
	|		0,
	|		СУММА(ВЫБОР
	|				КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА РасчетыСКлиентамиПоСрокам.ДолгРегл
	|				ИНАЧЕ 0
	|			КОНЕЦ + ВЫБОР
	|				КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					ТОГДА РасчетыСКлиентамиПоСрокам.ПредоплатаРегл
	|				ИНАЧЕ 0
	|			КОНЕЦ),
	|		СУММА(ВЫБОР
	|				КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					ТОГДА РасчетыСКлиентамиПоСрокам.ДолгРегл
	|				ИНАЧЕ 0
	|			КОНЕЦ + ВЫБОР
	|				КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА РасчетыСКлиентамиПоСрокам.ПредоплатаРегл
	|				ИНАЧЕ 0
	|			КОНЕЦ),
	|		РасчетыСКлиентамиПоСрокам.ДокументРегистратор
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоСрокам
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчета
	|			ПО РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам = АналитикаУчета.КлючАналитики
	|	ГДЕ
	|		АналитикаУчета.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|		И РасчетыСКлиентамиПоСрокам.Активность
	|		И (РасчетыСКлиентамиПоСрокам.ДолгРегл <> 0
	|				ИЛИ РасчетыСКлиентамиПоСрокам.ПредоплатаРегл <> 0)
	|	{ГДЕ
	|		(РасчетыСКлиентамиПоСрокам.Период >= &НачалоПериода),
	|		(РасчетыСКлиентамиПоСрокам.Период <= &КонецПериода),
	|		АналитикаУчета.Организация.* КАК Организация,
	|		АналитикаУчета.Партнер.* КАК Партнер,
	|		АналитикаУчета.Контрагент.* КАК Контрагент,
	|		АналитикаУчета.Договор.* КАК Договор,
	|		АналитикаУчета.НаправлениеДеятельности.* КАК НаправлениеДеятельности,
	|		(АналитикаУчета.Партнер В
	|				(ВЫБРАТЬ
	|					ОтборПоСегментуПартнеров.Партнер
	|				ИЗ
	|					ОтборПоСегментуПартнеров
	|				ГДЕ
	|					ОтборПоСегментуПартнеров.ИспользуетсяОтборПоСегментуПартнеров = &ИспользуетсяОтборПоСегментуПартнеров))}
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РасчетыСКлиентамиПоСрокам.ДатаПлановогоПогашения,
	|		АналитикаУчета.Договор,
	|		АналитикаУчета.НаправлениеДеятельности,
	|		РасчетыСКлиентамиПоСрокам.Валюта,
	|		АналитикаУчета.Партнер,
	|		АналитикаУчета.Контрагент,
	|		РасчетыСКлиентамиПоСрокам.ОбъектРасчетов,
	|		РасчетыСКлиентамиПоСрокам.РасчетныйДокумент,
	|		РасчетыСКлиентамиПоСрокам.ДатаВозникновения,
	|		РасчетыСКлиентамиПоСрокам.ДокументРегистратор,
	|		АналитикаУчета.Организация) КАК Расчеты
	|ГДЕ
	|	&ТипРасчетов
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.Организация,
	|	Расчеты.Партнер,
	|	Расчеты.Контрагент,
	|	Расчеты.Договор,
	|	Расчеты.НаправлениеДеятельности,
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.Валюта,
	|	Расчеты.РасчетныйДокумент,
	|	Расчеты.ДатаВозникновения,
	|	Расчеты.ДатаПлановогоПогашения,
	|	Расчеты.ТипРасчетов,
	|	Расчеты.Регистратор
	|ИМЕЮЩИЕ
	|	(&ОтборыВыбранныхПолей)
	|";
	
	Если ТипРасчетов = 2 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ТипРасчетов"," Расчеты.ТипРасчетов = 2");
	ИначеЕсли ТипРасчетов = 3 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ТипРасчетов"," Расчеты.ТипРасчетов = 1");
	ИначеЕсли ТипРасчетов = 1 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ТипРасчетов"," ИСТИНА");
	КонецЕсли;
	
	Если ВалютаОтчета = 4 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Регл","");
	ИначеЕсли ВалютаОтчета = 2 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Регл","Упр");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаРасчетыСПоставщиками(ВалютаОтчета, ТипРасчетов)
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Сегменты.Партнер КАК Партнер,
	|	ИСТИНА КАК ИспользуетсяОтборПоСегментуПартнеров
	|ПОМЕСТИТЬ ОтборПоСегментуПартнеров
	|ИЗ
	|	РегистрСведений.ПартнерыСегмента КАК Сегменты
	|{ГДЕ
	|	Сегменты.Сегмент.* КАК СегментПартнеров,
	|	Сегменты.Партнер.* КАК Партнер}
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партнер,
	|	ИспользуетсяОтборПоСегментуПартнеров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Расчеты.Организация                               КАК Организация,
	|	Расчеты.Партнер                                   КАК Партнер,
	|	Расчеты.Контрагент                                КАК Контрагент,
	|	Расчеты.Договор                                   КАК Договор,
	|	Расчеты.НаправлениеДеятельности                   КАК НаправлениеДеятельности,
	|	Расчеты.ОбъектРасчетов                            КАК ОбъектРасчетов,
	|	Расчеты.Валюта                                    КАК Валюта,
	|	Расчеты.РасчетныйДокумент                         КАК РасчетныйДокумент,
	|	Расчеты.ДатаВозникновения                         КАК ДатаВозникновения,
	|	Расчеты.ДатаПлановогоПогашения                    КАК ДатаПлановогоПогашения,
	|	СУММА(Расчеты.ДолгПартнераНачальныйОстаток)       КАК ДолгПартнераНачальныйОстаток,
	|	СУММА(Расчеты.НашДолгНачальныйОстаток)            КАК НашДолгНачальныйОстаток,
	|	СУММА(Расчеты.УвеличениеДолга)                    КАК УвеличениеДолга,
	|	СУММА(Расчеты.УменьшениеДолга)                    КАК УменьшениеДолга,
	|	СУММА(Расчеты.ДолгПартнераКонечныйОстаток)        КАК ДолгПартнераКонечныйОстаток,
	|	СУММА(Расчеты.НашДолгКонечныйОстаток)             КАК НашДолгКонечныйОстаток,
	|	Расчеты.ТипРасчетов                               КАК ТипРасчетов,
	|	Расчеты.Регистратор                               КАК Регистратор
	|ИЗ
	|	(ВЫБРАТЬ
	|		АналитикаУчета.Организация                    КАК Организация,
	|		АналитикаУчета.Партнер                        КАК Партнер,
	|		АналитикаУчета.Контрагент                     КАК Контрагент,
	|		АналитикаУчета.Договор                        КАК Договор,
	|		АналитикаУчета.НаправлениеДеятельности        КАК НаправлениеДеятельности,
	|		РасчетыПоСрокам.ОбъектРасчетов                КАК ОбъектРасчетов,
	|		РасчетыПоСрокам.Валюта                        КАК Валюта,
	|		РасчетыПоСрокам.РасчетныйДокумент             КАК РасчетныйДокумент,
	|		РасчетыПоСрокам.ДатаВозникновения             КАК ДатаВозникновения,
	|		РасчетыПоСрокам.ДатаПлановогоПогашения        КАК ДатаПлановогоПогашения,
	|		РасчетыПоСрокам.ПредоплатаРеглОстаток         КАК ДолгПартнераНачальныйОстаток,
	|		РасчетыПоСрокам.ДолгРеглОстаток               КАК НашДолгНачальныйОстаток,
	|		0                                             КАК УвеличениеДолга,
	|		0                                             КАК УменьшениеДолга,
	|		0                                             КАК ДолгПартнераКонечныйОстаток,
	|		0                                             КАК НашДолгКонечныйОстаток,
	|		1                                             КАК ТипРасчетов,
	|		НЕОПРЕДЕЛЕНО                                  КАК Регистратор
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Остатки({(&НачалоОстатки)}, ) КАК РасчетыПоСрокам
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчета
	|			ПО РасчетыПоСрокам.АналитикаУчетаПоПартнерам = АналитикаУчета.КлючАналитики
	|	ГДЕ
	|		АналитикаУчета.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|	{ГДЕ
	|		АналитикаУчета.Организация.* КАК Организация,
	|		АналитикаУчета.Партнер.* КАК Партнер,
	|		АналитикаУчета.Контрагент.* КАК Контрагент,
	|		АналитикаУчета.Договор.* КАК Договор,
	|		АналитикаУчета.НаправлениеДеятельности.* КАК НаправлениеДеятельности,
	|		(АналитикаУчета.Партнер В
	|				(ВЫБРАТЬ
	|					ОтборПоСегментуПартнеров.Партнер
	|				ИЗ
	|					ОтборПоСегментуПартнеров
	|				ГДЕ
	|					ОтборПоСегментуПартнеров.ИспользуетсяОтборПоСегментуПартнеров = &ИспользуетсяОтборПоСегментуПартнеров))}
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		АналитикаУчета.Организация,
	|		АналитикаУчета.Партнер,
	|		АналитикаУчета.Контрагент,
	|		АналитикаУчета.Договор,
	|		АналитикаУчета.НаправлениеДеятельности,
	|		РасчетыПоСрокам.ОбъектРасчетов,
	|		РасчетыПоСрокам.Валюта,
	|		РасчетыПоСрокам.РасчетныйДокумент,
	|		РасчетыПоСрокам.ДатаВозникновения,
	|		РасчетыПоСрокам.ДатаПлановогоПогашения,
	|		0,
	|		0,
	|		0,
	|		0,
	|		РасчетыПоСрокам.ПредоплатаРеглОстаток,
	|		РасчетыПоСрокам.ДолгРеглОстаток,
	|		1,
	|		НЕОПРЕДЕЛЕНО
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Остатки({(&КонецПериодаГраница)}, ) КАК РасчетыПоСрокам
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчета
	|			ПО РасчетыПоСрокам.АналитикаУчетаПоПартнерам = АналитикаУчета.КлючАналитики
	|	ГДЕ
	|		АналитикаУчета.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|	{ГДЕ
	|		АналитикаУчета.Организация.* КАК Организация,
	|		АналитикаУчета.Партнер.* КАК Партнер,
	|		АналитикаУчета.Контрагент.* КАК Контрагент,
	|		АналитикаУчета.Договор.* КАК Договор,
	|		АналитикаУчета.НаправлениеДеятельности.* КАК НаправлениеДеятельности,
	|		(АналитикаУчета.Партнер В
	|				(ВЫБРАТЬ
	|					ОтборПоСегментуПартнеров.Партнер
	|				ИЗ
	|					ОтборПоСегментуПартнеров
	|				ГДЕ
	|					ОтборПоСегментуПартнеров.ИспользуетсяОтборПоСегментуПартнеров = &ИспользуетсяОтборПоСегментуПартнеров))}
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		АналитикаУчета.Организация,
	|		АналитикаУчета.Партнер,
	|		АналитикаУчета.Контрагент,
	|		АналитикаУчета.Договор,
	|		АналитикаУчета.НаправлениеДеятельности,
	|		РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов,
	|		РасчетыСПоставщикамиПоСрокам.Валюта,
	|		РасчетыСПоставщикамиПоСрокам.РасчетныйДокумент,
	|		РасчетыСПоставщикамиПоСрокам.ДатаВозникновения,
	|		РасчетыСПоставщикамиПоСрокам.ДатаПлановогоПогашения,
	|		0,
	|		0,
	|		СУММА(ВЫБОР
	|				КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					ТОГДА РасчетыСПоставщикамиПоСрокам.ДолгРегл
	|				ИНАЧЕ 0
	|			КОНЕЦ + ВЫБОР
	|				КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл
	|				ИНАЧЕ 0
	|			КОНЕЦ),
	|		СУММА(ВЫБОР
	|				КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА РасчетыСПоставщикамиПоСрокам.ДолгРегл
	|				ИНАЧЕ 0
	|			КОНЕЦ + ВЫБОР
	|				КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					ТОГДА РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл
	|				ИНАЧЕ 0
	|			КОНЕЦ),
	|		0,
	|		0,
	|		1,
	|		РасчетыСПоставщикамиПоСрокам.ДокументРегистратор
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщикамиПоСрокам
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчета
	|			ПО РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам = АналитикаУчета.КлючАналитики
	|	ГДЕ
	|		АналитикаУчета.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|		И РасчетыСПоставщикамиПоСрокам.Активность
	|		И (РасчетыСПоставщикамиПоСрокам.ДолгРегл <> 0
	|				ИЛИ РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл <> 0)
	|	{ГДЕ
	|		(РасчетыСПоставщикамиПоСрокам.Период >= &НачалоПериода),
	|		(РасчетыСПоставщикамиПоСрокам.Период <= &КонецПериода),
	|		АналитикаУчета.Организация.* КАК Организация,
	|		АналитикаУчета.Партнер.* КАК Партнер,
	|		АналитикаУчета.Контрагент.* КАК Контрагент,
	|		АналитикаУчета.Договор.* КАК Договор,
	|		АналитикаУчета.НаправлениеДеятельности.* КАК НаправлениеДеятельности,
	|		(АналитикаУчета.Партнер В
	|				(ВЫБРАТЬ
	|					ОтборПоСегментуПартнеров.Партнер
	|				ИЗ
	|					ОтборПоСегментуПартнеров
	|				ГДЕ
	|					ОтборПоСегментуПартнеров.ИспользуетсяОтборПоСегментуПартнеров = &ИспользуетсяОтборПоСегментуПартнеров))}
	|	
	|	СГРУППИРОВАТЬ ПО
	|		АналитикаУчета.Партнер,
	|		АналитикаУчета.НаправлениеДеятельности,
	|		РасчетыСПоставщикамиПоСрокам.РасчетныйДокумент,
	|		РасчетыСПоставщикамиПоСрокам.Валюта,
	|		АналитикаУчета.Договор,
	|		АналитикаУчета.Контрагент,
	|		АналитикаУчета.Организация,
	|		РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов,
	|		РасчетыСПоставщикамиПоСрокам.ДатаВозникновения,
	|		РасчетыСПоставщикамиПоСрокам.ДатаПлановогоПогашения,
	|		РасчетыСПоставщикамиПоСрокам.ДокументРегистратор) КАК Расчеты
	|ГДЕ
	|	&ТипРасчетов
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.Организация,
	|	Расчеты.Партнер,
	|	Расчеты.Контрагент,
	|	Расчеты.Договор,
	|	Расчеты.НаправлениеДеятельности,
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.Валюта,
	|	Расчеты.РасчетныйДокумент,
	|	Расчеты.ДатаВозникновения,
	|	Расчеты.ДатаПлановогоПогашения,
	|	Расчеты.ТипРасчетов,
	|	Расчеты.Регистратор
	|ИМЕЮЩИЕ
	|	(&ОтборыВыбранныхПолей)
	|";
	
	Если ТипРасчетов = 2 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ТипРасчетов"," Расчеты.ТипРасчетов = 2");
	ИначеЕсли ТипРасчетов = 3 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ТипРасчетов"," Расчеты.ТипРасчетов = 1");
	ИначеЕсли ТипРасчетов = 1 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ТипРасчетов"," ИСТИНА");
	КонецЕсли;
	
	Если ВалютаОтчета = 4 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Регл","");
	ИначеЕсли ВалютаОтчета = 2 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Регл","Упр");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
КонецФункции

Процедура СформироватьПараметрыОтчета(ПараметрКоманды, ПараметрыФормы, Параметры)
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
		ЭтоМассив = Истина;
		Если ПараметрКоманды.Количество() > 0 Тогда
			ПервыйЭлемент = ПараметрКоманды[0];
		Иначе
			ПервыйЭлемент = Неопределено;
		КонецЕсли;
	Иначе
		ЭтоМассив = Ложь;
		ПервыйЭлемент = ПараметрКоманды;
	КонецЕсли;
	
	Если ТипЗнч(ПервыйЭлемент) = Тип("СправочникСсылка.Партнеры") Тогда
		Если ЭтоМассив Тогда
			ЕстьПодчиненныеПартнеры = Ложь;
			Для Каждого ЭлементПараметраКоманды Из ПараметрКоманды Цикл
				Если ПартнерыИКонтрагенты.ЕстьПодчиненныеПартнеры(ЭлементПараметраКоманды) Тогда
					ЕстьПодчиненныеПартнеры = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ЕстьПодчиненныеПартнеры = ПартнерыИКонтрагенты.ЕстьПодчиненныеПартнеры(ПараметрКоманды);
		КонецЕсли;
		
		Если ЕстьПодчиненныеПартнеры Тогда
			ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных();
			ЭлементОтбора = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Партнер");
			ЗначениеОтбора = ПараметрКоманды;
			Если ЭтоМассив Тогда
				ЗначениеОтбора = Новый СписокЗначений;
				ЗначениеОтбора.ЗагрузитьЗначения(ПараметрКоманды);
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
			Иначе
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
			КонецЕсли;
			ЭлементОтбора.ПравоеЗначение = ЗначениеОтбора;
			ПараметрыФормы.ФиксированныеНастройки = ФиксированныеНастройки;
			Параметры.ФиксированныеНастройки = ФиксированныеНастройки;
			ПараметрыФормы.КлючНазначенияИспользования = "ГруппаПартнеров";
			Параметры.КлючНазначенияИспользования = "ГруппаПартнеров";
		Иначе
			ПараметрыФормы.Отбор = Новый Структура("Партнер", ПараметрКоманды);
			ПараметрыФормы.КлючНазначенияИспользования = ПараметрКоманды;
			Параметры.КлючНазначенияИспользования = ПараметрКоманды;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ПервыйЭлемент) = Тип("СправочникСсылка.ДоговорыКонтрагентов") 
		ИЛИ ТипЗнч(ПервыйЭлемент) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
		ПараметрыФормы.Отбор = Новый Структура("Договор", ПараметрКоманды);
		ПараметрыФормы.КлючНазначенияИспользования = ПараметрКоманды;
		Параметры.КлючНазначенияИспользования = ПараметрКоманды;
	Иначе
		ОбъектРасчетов = ВзаиморасчетыСервер.ОбъектРасчетовПоСсылке(ПервыйЭлемент);
		ПараметрыФормы.Отбор = Новый Структура("ОбъектРасчетов", ОбъектРасчетов);
		ПараметрыФормы.КлючНазначенияИспользования = ОбъектРасчетов;
		Параметры.КлючНазначенияИспользования = ОбъектРасчетов;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПараметрыФормыНаСервере(ПараметрКоманды, ПараметрыФормы, Параметры, ПервыйЭлемент, ЭтоМассив, СтрокаБазовая)
	
	Если ТипЗнч(ПервыйЭлемент) = Тип("СправочникСсылка.Партнеры") Тогда
		
		Если ЭтоМассив Тогда
			ЕстьПодчиненныеПартнеры = Ложь;
			Для Каждого ЭлементПараметраКоманды Из ПараметрКоманды Цикл
				Если ПартнерыИКонтрагенты.ЕстьПодчиненныеПартнеры(ЭлементПараметраКоманды) Тогда
					ЕстьПодчиненныеПартнеры = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ЕстьПодчиненныеПартнеры = ПартнерыИКонтрагенты.ЕстьПодчиненныеПартнеры(ПараметрКоманды);
		КонецЕсли;
		
		Если ЕстьПодчиненныеПартнеры Тогда
			ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных();
			ЭлементОтбора = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Партнер");
			ЗначениеОтбора = ПараметрКоманды;
			Если ЭтоМассив Тогда
				ЗначениеОтбора = Новый СписокЗначений;
				ЗначениеОтбора.ЗагрузитьЗначения(ПараметрКоманды);
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
			Иначе
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
			КонецЕсли;
			ЭлементОтбора.ПравоеЗначение = ЗначениеОтбора;
			ПараметрыФормы.ФиксированныеНастройки = ФиксированныеНастройки;
			Параметры.ФиксированныеНастройки = ФиксированныеНастройки;
			ПараметрыФормы.КлючНазначенияИспользования = "ГруппаПартнеров";
			Параметры.КлючНазначенияИспользования = "ГруппаПартнеров";
			
		Иначе
			ПараметрыФормы.Отбор = Новый Структура("Партнер", ПараметрКоманды);
			ПараметрыФормы.КлючНазначенияИспользования = "Партнер";
			Параметры.КлючНазначенияИспользования = "Партнер";
			
		КонецЕсли;
		
		Параметры.КлючВарианта = "ПоПартнерамКонтекст" + СтрокаБазовая;
		
	ИначеЕсли ТипЗнч(ПервыйЭлемент) = Тип("СправочникСсылка.СегментыПартнеров") Тогда
		
		ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных();
		ЭлементОтбора = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Партнер");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		
		ЭлементОтбора.ПравоеЗначение = СегментыВызовСервера.СписокЗначений(ПервыйЭлемент);
		ПараметрыФормы.ФиксированныеНастройки = ФиксированныеНастройки;
		Параметры.ФиксированныеНастройки = ФиксированныеНастройки;
		
		ПараметрыФормы.КлючНазначенияИспользования = "СегментПартнеров";
		Параметры.КлючНазначенияИспользования = "СегментПартнеров";
		Параметры.КлючВарианта = "ПоПартнерамКонтекст" + СтрокаБазовая;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли