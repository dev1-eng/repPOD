#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП.
//
// Возвращаемое значание:
//	Массив - имена блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("ТипРасходов");
	Результат.Добавить("ВариантРаспределенияРасходовРегл");
	Результат.Добавить("ВариантРаспределенияРасходовУпр; ВариантРаспределенияРасходовУпр");
	Результат.Добавить("ТипЗначения; ТипЗначения");
	Результат.Добавить("ВариантРаздельногоУчетаНДС");
	Результат.Добавить("ВидАктива");
	Результат.Добавить("ПринятиеКНалоговомуУчету");
	Результат.Добавить("ВидРасходов");
	Результат.Добавить("ВидПрочихДоходовИРасходов");
	Результат.Добавить("КосвенныеЗатратыНУ; ПрямыеКосвенныеНУ");
	Результат.Добавить("ВидРБП");
	Результат.Добавить("ПризнаватьРасходамиПриУСН");
	Результат.Добавить("ВидДеятельностиРасходов");
	Результат.Добавить("ВидДеятельностиДляНалоговогоУчетаЗатрат");
	
	Возврат Результат;
	
КонецФункции

// Функция определяет реквизиты выбранной статьи расходов.
//
// Параметры:
//  СтатьяРасходов - ПланВидовХарактеристикСсылка.СтатьиРасходов - Ссылка на статью расходов.
//
// Возвращаемое значение:
//	Структура - реквизиты статьи расходов.
//
Функция ПолучитьРеквизитыСтатьиРасходов(Знач СтатьяРасходов) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СтатьиРасходов.УдалитьСпособРаспределенияПоНаправлениямДеятельности КАК СпособРаспределения,
	|	СтатьиРасходов.ТипЗначения КАК ТипЗначения
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|ГДЕ
	|	СтатьиРасходов.Ссылка = &СтатьяРасходов
	|");
	
	Запрос.УстановитьПараметр("СтатьяРасходов", СтатьяРасходов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СпособРаспределения = Выборка.СпособРаспределения;
		ТребуетсяСпособРаспределения = Не Выборка.ТипЗначения.СодержитТип(Тип("СправочникСсылка.НаправленияДеятельности"));
		ТипЗначения = Выборка.ТипЗначения;
	Иначе
		СпособРаспределения = Справочники.СпособыРаспределенияПоНаправлениямДеятельности.ПустаяСсылка();
		ТребуетсяСпособРаспределения = Ложь;
		ТипЗначения = Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("СпособРаспределения, ТребуетсяСпособРаспределения, ТипЗначения",
		СпособРаспределения,
		ТребуетсяСпособРаспределения,
		ТипЗначения);
	
	Возврат СтруктураРеквизитов;

КонецФункции

// Функция определяет правило распределения на себестоимость товаров для статьи расходов.
//
// Параметры:
//  СтатьяРасходов - ПланВидовХарактеристикСсылка.СтатьиРасходов - Ссылка на статью расходов.
//
// Возвращаемое значение:
//	ПеречислениеСсылка.ПравилаРаспределенияНаСебестоимостьТоваров - правило распределения статьи расходов.
//
Функция ПолучитьПравилоРаспределения(СтатьяРасходов) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СтатьиРасходов.ПравилоРаспределенияНаСебестоимость КАК ПравилоРаспределения
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|ГДЕ
	|	СтатьиРасходов.Ссылка = &СтатьяРасходов
	|	И (СтатьиРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|		ИЛИ СтатьиРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров))
	|");
	
	Запрос.УстановитьПараметр("СтатьяРасходов", СтатьяРасходов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПравилоРаспределения = Выборка.ПравилоРаспределения;
	Иначе
		ПравилоРаспределения = Неопределено;
	КонецЕсли;
	
	Возврат ПравилоРаспределения;

КонецФункции

// Функция определяет аналитику расходов для подстановки в документ по статье расходов.
//
// Параметры:
//  СтатьяРасходов - ПланВидовХарактеристикСсылка.СтатьиРасходов - Ссылка на статью расходов
//	Объект - ДанныеФормыСтруктура - Текущий объект.
//
// Возвращаемое значение:
//	СправочникСсылка, ДокументСсылка - значение аналитики расходов.
//
Функция ПолучитьАналитикуРасходовПоУмолчанию(СтатьяРасходов, Объект) Экспорт
	
	ОписаниеТипов = Новый ОписаниеТипов(СтатьяРасходов.ТипЗначения);
	АналитикаРасходов = ОписаниеТипов.ПривестиЗначение();
	
	Если СтатьяРасходов.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Склады")
	   И Объект.Свойство("Склад") Тогда
	   
		АналитикаРасходов = Объект.Склад;
	   
	ИначеЕсли СтатьяРасходов.ТипЗначения = Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику")
		И Объект.Свойство("ЗаказПоставщику") Тогда
		
		АналитикаРасходов = Объект.ЗаказПоставщику;
		
	ИначеЕсли СтатьяРасходов.ТипЗначения = Новый ОписаниеТипов("ДокументСсылка.ПриобретениеТоваровУслуг")
		И ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		
		АналитикаРасходов = Объект.Ссылка;
		
	ИначеЕсли СтатьяРасходов.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Партнеры")
		И Объект.Свойство("Партнер") Тогда
		
		АналитикаРасходов = Объект.Партнер;	
		
	ИначеЕсли СтатьяРасходов.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации")
	   И Объект.Свойство("Организация") Тогда
	   
		АналитикаРасходов = Объект.Организация;
		
	ИначеЕсли СтатьяРасходов.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия")
	   И Объект.Свойство("Подразделение") Тогда
	   
		АналитикаРасходов = Объект.Подразделение;
		
	ИначеЕсли СтатьяРасходов.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица")
		И Объект.Свойство("ПодотчетноеЛицо") Тогда
		
		АналитикаРасходов = Объект.ПодотчетноеЛицо;
		
	ИначеЕсли СтатьяРасходов.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Кассы")
		И Объект.Свойство("Касса") Тогда
		
		АналитикаРасходов = Объект.Касса;
		
	ИначеЕсли СтатьяРасходов.АналитикаРасходовЗаказРеализация Тогда
		АналитикаРасходов =  Документы.РеализацияТоваровУслуг.ПустаяСсылка();
		
	КонецЕсли;
	
	Возврат АналитикаРасходов;
	
КонецФункции

// Процедура заполняет список хозяйственных операций, для которых используется
// ограничение отбора статьей расходов.
//
// Параметры:
//	СписокОпераций - СписокЗначений - Список хозяйственных операций и их представлений.
//
Процедура ЗаполнитьСписокХозяйственныхОпераций(СписокОпераций, ВариантРаспределенияРасходовУпр = Неопределено, ВариантРаспределенияРасходовРегл = Неопределено) Экспорт
	
	СписокОпераций.Очистить();
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.АвансовыйОтчет, НСтр("ru = 'Прочие расходы подотчетного лица'"));
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика, НСтр("ru = 'Услуги сторонних организаций'"));
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПрочиеРасходы, НСтр("ru = 'Выдача денежных средств на прочие расходы'"));
	
	Если ВариантРаспределенияРасходовУпр <> Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров
	 И ВариантРаспределенияРасходовРегл <> Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееПотребление") Тогда
			СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию, НСтр("ru = 'Внутреннее потребление товаров'"));
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКачествоТоваров") Тогда
			СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПорчаТоваров, НСтр("ru = 'Изменение стоимости испорченного товара'"));
		КонецЕсли;
		СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПересортицаТоваров, НСтр("ru = 'Изменение стоимости при пересортице'"));
		СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.СписаниеТоваров, НСтр("ru = 'Списания недостач товаров'"));
	КонецЕсли;
	
	Если ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности
	 ИЛИ ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности Тогда
		СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности, НСтр("ru = 'Списание задолженности партнеров'"));
		Если ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами") Тогда
			СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОтчетБанкаПоОперациямЭквайринга, НСтр("ru = 'Эквайринговая комиссия'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Производит проверку заполнения реквизитов аналитик статей расходов в переданном объекте.
//
// Параметры:
// 		Объект - СправочникОбъект, ДокументОбъект, ДанныеФормыСтруктура - Объект ИБ предназначенный для проверки
// 		Реквизиты - Строка, Структура, Массив - Реквизиты статей расходов для проверки
// 			<Строка> Перечисление пар реквизитов для проверки в формате "СтатьяРаходов1, АналитикаРасходов1, СтатьяРаходов2, АналитикаРасходов2, ..."
// 				Пустая строка трактуется как "СтатьяРасходов, АналитикаРасходов"
// 			<Структура> Ключ: Строка с именем табличной части; Значение - Строка в нотации как у параметра типа <Строка>
// 			<Массив> Массив, элементы которого либо структуры в нотации как у параметра с типа <Структура>, либо строки в нотации <Строка>
// 		НепроверяемыеРеквизиты - Массив - Массив для накопления не проверяемых реквизитов переданного объекта
// 		Отказ - Булево - Признак наличия ошибок заполнения аналитик расходов переданного объекта
// 		ДополнительныеПараметры - Структура - При наличии свойства "ПрограммнаяПроверка", ошибки записываются в эту структуру, пользователю не выводятся.
//
Процедура ПроверитьЗаполнениеАналитик(Объект, Реквизиты = "", НепроверяемыеРеквизиты = Неопределено, Отказ = Ложь,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	Ошибки = Новый Структура;
	Ошибки.Вставить("СписокОшибок", Новый Массив);
	Ошибки.Вставить("ГруппыОшибок", Новый Соответствие);
	Ошибки.Вставить("ПрефиксОбъекта", ?(ТипЗнч(Объект)=Тип("ФормаКлиентскогоПриложения"), "", "Объект."));
	
	МассивОбработки = Новый Массив;
	Если ТипЗнч(Реквизиты) = Тип("Массив") Тогда
		МассивОбработки = Реквизиты;
	Иначе
		МассивОбработки.Добавить(Реквизиты);
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивОбработки Цикл
		
		Если ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда
			ПроверкаЗаполненияАналитикТЧОбъекта(Объект, ЭлементМассива, НепроверяемыеРеквизиты, Ошибки);
		Иначе
			ПроверкаЗаполненияАналитикОбъекта(Объект, ЭлементМассива, НепроверяемыеРеквизиты, Ошибки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ПрограммнаяПроверка") Тогда
		ДополнительныеПараметры.Вставить("Ошибки", Ошибки);
	Иначе
		Если Ошибки.СписокОшибок.Количество() <> 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Производит заполнение условного оформления формы
//
// Параметры:
// 		УсловноеОФормление - УсловноеОформлениеКомпоновкиДанных - Условное оформление формы объекта
// 		Реквизиты - Строка, Структура, Массив - Реквизиты статей расходов и их аналитик для оформления
// 			<Строка> Перечисление пар реквизитов в формате "СтатьяРаходов1, АналитикаРасходов1, СтатьяРаходов2, АналитикаРасходов2, ..."
// 				Пустая строка трактуется как "СтатьяРасходов, АналитикаРасходов"
// 			<Структура> Ключ: Строка с именем табличной части; Значение - Строка в нотации как у параметра типа <Строка>
// 			<Массив> Массив, элементы которого либо структуры в нотации как у параметра с типа <Структура>, либо строки в нотации <Строка>
// 		ФормаОбъекта - Булево - Признак формы объекта ИБ.
//
Процедура УстановитьУсловноеОформлениеАналитик(УсловноеОФормление, Реквизиты = "", ФормаОбъекта = Истина, ПрефиксКонтроля = "") Экспорт
	
	МассивОбработки = Новый Массив;
	Если ТипЗнч(Реквизиты) = Тип("Массив") Тогда
		МассивОбработки = Реквизиты;
	Иначе
		МассивОбработки.Добавить(Реквизиты);
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивОбработки Цикл
		
		Если ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда
			
			Для Каждого КлючИЗначение Из ЭлементМассива Цикл
				
				СтруктураРеквизитов = ИменаРеквизитовСтатьиИАналитики(КлючИЗначение.Значение);
				УстановитьУсловноеОформление(УсловноеОформление, СтруктураРеквизитов, КлючИЗначение.Ключ, ФормаОбъекта, ПрефиксКонтроля)
				
			КонецЦикла;
			
		Иначе
			
			СтруктураРеквизитов = ИменаРеквизитовСтатьиИАналитики(ЭлементМассива);
			УстановитьУсловноеОформление(УсловноеОформление, СтруктураРеквизитов, , ФормаОбъекта, ПрефиксКонтроля)
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполнения колонок "АналитикаРасходовЗаказРеализация" в формах.
// Параметры:
// 		ТаблицаФормы - ДанныеФормыКоллекция
// 		Реквизиты - Строка, Структура - описание реквизитов для заполнения
// 			Перечисление пар реквизитов в формате "СтатьяРаходов1, АналитикаРасходов1, СтатьяРаходов2, АналитикаРасходов2, ..."
// 			Пустая строка трактуется как "СтатьяРасходов, АналитикаРасходов".
//
Процедура ЗаполнитьПризнакАналитикаРасходовЗаказРеализация(ТаблицаФормы, Реквизиты = "") Экспорт
	
	Если ТаблицаФормы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Таблица.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки%ПоляСтатей%
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|//////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки%ПоляФлагов%
	|ИЗ
	|	Таблица КАК Таблица%ПоляСоединений%
	|");
	
	ШаблонСтатьи = ",
	|	Таблица.%ИмяСтатьи% КАК %ИмяСтатьи%";
	ШаблонФлага = ",
	|	ЕСТЬNULL(ПВХ%ИмяСтатьи%.АналитикаРасходовЗаказРеализация, ЛОЖЬ) КАК %ИмяАналитики%";
	ШаблонСоединения = "
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК ПВХ%ИмяСтатьи%
	|		ПО Таблица.%ИмяСтатьи% = ПВХ%ИмяСтатьи%.Ссылка";
	
	ПоляСтатей = "";
	ПоляФлагов = "";
	ПоляСоединений ="";
	
	СтруктураРеквизитов = РеквизитыКзаполнению(Реквизиты);
	
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ПоляСтатей = ПоляСтатей + СтрЗаменить(ШаблонСтатьи, "%ИмяСтатьи%", КлючИЗначение.Ключ);
		ПоляФлагов = ПоляФлагов + СтрЗаменить(СтрЗаменить(ШаблонФлага, "%ИмяАналитики%", КлючИЗначение.Значение), "%ИмяСтатьи%", КлючИЗначение.Ключ);
		ПоляСоединений = ПоляСоединений + СтрЗаменить(ШаблонСоединения, "%ИмяСтатьи%", КлючИЗначение.Ключ);
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляСтатей%", ПоляСтатей);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляФлагов%", ПоляФлагов);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляСоединений%", ПоляСоединений);
	
	Запрос.УстановитьПараметр(
		"Таблица",
		ТаблицаФормы.Выгрузить(,"НомерСтроки, " + ?(ПустаяСтрока(Реквизиты), "СтатьяРасходов", Реквизиты)));
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаФормы[Выборка.НомерСтроки-1], Выборка,, "НомерСтроки");
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполнения колонок "АналитикаРасходовОбязательна" в формах.
// Параметры:
// 		ТаблицаФормы - ДанныеФормыКоллекция
// 		Реквизиты - Строка, Структура - описание реквизитов для заполнения
// 			Перечисление пар реквизитов в формате "СтатьяРаходов1, АналитикаРасходов1, СтатьяРаходов2, АналитикаРасходов2, ..."
// 			Пустая строка трактуется как "СтатьяРасходов, АналитикаРасходов".
//
Процедура ЗаполнитьПризнакАналитикаРасходовОбязательна(ТаблицаФормы, Реквизиты = "") Экспорт
	
	Если ТаблицаФормы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Таблица.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки%ПоляСтатей%
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Таблица КАК Таблица;
	|ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки%ПоляФлагов%
	|ИЗ
	|	Таблица КАК Таблица%ПоляСоединений%";
	
	ШаблонСтатьи = ",
	|	Таблица.%ИмяСтатьи% КАК %ИмяСтатьи%";
	ШаблонФлага = ",
	|	ЕСТЬNULL(ПВХ%ИмяСтатьи%.КонтролироватьЗаполнениеАналитики, ЛОЖЬ) КАК %ИмяАналитики%Обязательна";
	ШаблонСоединения = "
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК ПВХ%ИмяСтатьи%
	|		ПО Таблица.%ИмяСтатьи% = ПВХ%ИмяСтатьи%.Ссылка";
	
	ПоляСтатей = "";
	ПоляФлагов = "";
	ПоляСоединений ="";
	
	СтруктураРеквизитов = ИменаРеквизитовСтатьиИАналитики(Реквизиты);
	
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ПоляСтатей = ПоляСтатей + СтрЗаменить(ШаблонСтатьи, "%ИмяСтатьи%", КлючИЗначение.Ключ);
		ПоляФлагов = ПоляФлагов + СтрЗаменить(СтрЗаменить(ШаблонФлага, "%ИмяАналитики%", КлючИЗначение.Значение), "%ИмяСтатьи%", КлючИЗначение.Ключ);
		ПоляСоединений = ПоляСоединений + СтрЗаменить(ШаблонСоединения, "%ИмяСтатьи%", КлючИЗначение.Ключ);
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляСтатей%", ПоляСтатей);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляФлагов%", ПоляФлагов);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляСоединений%", ПоляСоединений);
	
	Запрос.УстановитьПараметр(
		"Таблица",
		ТаблицаФормы.Выгрузить(,"НомерСтроки, " + ?(ПустаяСтрока(Реквизиты), "СтатьяРасходов, АналитикаРасходов", Реквизиты)));
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаФормы[Выборка.НомерСтроки-1], Выборка,, "НомерСтроки");
	КонецЦикла;
	
КонецПроцедуры

// Возвращает статьи расходов, использование которых запрещено
//
// Возвращаемое значение:
// 	ЗаблокированныеСтатьи - СписокЗначений - Список заблокированных статей расходов.
//
Функция ЗаблокированныеСтатьиРасходов() Экспорт
	
	ЗаблокированныеСтатьи = Новый СписокЗначений;
	ЗаблокированныеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.СебестоимостьПродаж);
	Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		ЗаблокированныеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.КурсовыеРазницы);
		ЗаблокированныеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.НачисленныйНДСПриВыкупеМногооборотнойТары);
		ЗаблокированныеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.ПогрешностьРасчетаСебестоимости);
		ЗаблокированныеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.ПрибыльУбытокПрошлыхЛет);
		ЗаблокированныеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров);
		ЗаблокированныеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.ФормированиеРезервовПоСомнительнымДолгам);
		ЗаблокированныеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.НДСНалоговогоАгента);
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
		ЗаблокированныеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.ДоначислениеИмущественныхНалоговИАмортизации);
	КонецЕсли; 
	
	Возврат ЗаблокированныеСтатьи;
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОбщегоНазначенияУТВызовСервера.ОбработкаПолученияДанныхВыбораПВХСтатьиРасходов(ДанныеВыбора, Параметры, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункцииЗаполненияАналитик

Функция ОбязательныеСтатьи(МассивСтатей)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Статьи.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК Статьи
	|ГДЕ
	|	Статьи.Ссылка В (&МассивСтатей)
	|	И Статьи.КонтролироватьЗаполнениеАналитики");
	
	Запрос.УстановитьПараметр("МассивСтатей", МассивСтатей);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ИменаРеквизитовСтатьиИАналитики(СтрокаРеквизитов, НепроверяемыеРеквизиты = Неопределено, ПрефиксТабличнойЧасти = "")
	
	Если ПустаяСтрока(СтрокаРеквизитов) Тогда
		Если НепроверяемыеРеквизиты <> Неопределено Тогда
			НепроверяемыеРеквизиты.Добавить(ПрефиксТабличнойЧасти + "АналитикаРасходов");
		КонецЕсли;
		Возврат Новый Структура("СтатьяРасходов", "АналитикаРасходов");
	КонецЕсли;
	
	СтруктураОбработки = Новый Структура(СтрокаРеквизитов);
	СтруктураВозврата = Новый Структура;
	ПредыдущийКлюч = Неопределено;
	Для Каждого КлючИЗначение Из СтруктураОбработки Цикл
		Если ПредыдущийКлюч = Неопределено Тогда
			ПредыдущийКлюч = КлючИЗначение.Ключ;
		Иначе
			СтруктураВозврата.Вставить(ПредыдущийКлюч, КлючИЗначение.Ключ);
			ПредыдущийКлюч = Неопределено;
			Если НепроверяемыеРеквизиты <> Неопределено Тогда
				НепроверяемыеРеквизиты.Добавить(ПрефиксТабличнойЧасти + КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция РеквизитыКзаполнению(СтрокаРеквизитов, НепроверяемыеРеквизиты = Неопределено, ПрефиксТабличнойЧасти = "")
	
	Если ПустаяСтрока(СтрокаРеквизитов) Тогда
		Если НепроверяемыеРеквизиты <> Неопределено Тогда
			НепроверяемыеРеквизиты.Добавить(ПрефиксТабличнойЧасти + "АналитикаРасходовЗаказРеализация");
		КонецЕсли;
		Возврат Новый Структура("СтатьяРасходов", "АналитикаРасходовЗаказРеализация");
	КонецЕсли;
	
	СтруктураОбработки = Новый Структура(СтрокаРеквизитов);
	СтруктураВозврата = Новый Структура;
	ПредыдущийКлюч = Неопределено;
	Для Каждого КлючИЗначение Из СтруктураОбработки Цикл
		Если ПредыдущийКлюч = Неопределено Тогда
			ПредыдущийКлюч = КлючИЗначение.Ключ;
		Иначе
			СтруктураВозврата.Вставить(ПредыдущийКлюч, КлючИЗначение.Ключ);
			ПредыдущийКлюч = Неопределено;
			Если НепроверяемыеРеквизиты <> Неопределено Тогда
				НепроверяемыеРеквизиты.Добавить(ПрефиксТабличнойЧасти + КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ПроверкаЗаполненияАналитикОбъекта(Объект, Реквизиты, НепроверяемыеРеквизиты, Ошибки)
	
	СтруктураРеквизитов = ИменаРеквизитовСтатьиИАналитики(Реквизиты, НепроверяемыеРеквизиты);
	МассивСтатей = Новый Массив;
	
	// Определим список статей для контроля
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		
		Статья = Объект[КлючИЗначение.Ключ];
		
		Если ЗначениеЗаполнено(Статья) Тогда
			МассивСтатей.Добавить(Статья);
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверим заполнение аналитики
	ОбязательныеСтатьи = ОбязательныеСтатьи(МассивСтатей);
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		
		Статья = Объект[КлючИЗначение.Ключ];
		Аналитика = Объект[КлючИЗначение.Значение];
		
		Если Не (ОбязательныеСтатьи.Найти(Статья) = Неопределено Или ЗначениеЗаполнено(Аналитика)) Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				Ошибки.ПрефиксОбъекта + КлючИЗначение.Значение,
				НСтр("ru='Аналитика расходов не заполнена'"), "");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверкаЗаполненияАналитикТЧОбъекта(Объект, Реквизиты, НепроверяемыеРеквизиты, Ошибки)
	
	// Определим список статей для контроля
	ОбщийМассивСтатей = Новый Массив;
	Для Каждого ОписаниеТЧ Из Реквизиты Цикл
		
		ИмяТЧ = ОписаниеТЧ.Ключ;
		
		СтруктураРеквизитов = ИменаРеквизитовСтатьиИАналитики(ОписаниеТЧ.Значение, НепроверяемыеРеквизиты, ИмяТЧ + ".");
		
		Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
			
			МассивСтатей = Объект[ИмяТЧ].ВыгрузитьКолонку(КлючИЗначение.Ключ);
			Для Каждого Статья Из МассивСтатей Цикл
				ОбщийМассивСтатей.Добавить(Статья);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Проверим заполнение аналитики
	ОбязательныеСтатьи = ОбязательныеСтатьи(ОбщийМассивСтатей);
	Для Каждого ОписаниеТЧ Из Реквизиты Цикл // Табличные части
		
		ИмяТЧ = ОписаниеТЧ.Ключ;
		ТЧ = Объект[ИмяТЧ];
		
		СтруктураРеквизитов = ИменаРеквизитовСтатьиИАналитики(ОписаниеТЧ.Значение, Неопределено, ИмяТЧ + ".");
		
		Для Индекс = 0 По ТЧ.Количество() - 1 Цикл // Строки табличной части
			
			СтрокаТЧ = ТЧ[Индекс];
			
			Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
				
				Статья = СтрокаТЧ[КлючИЗначение.Ключ];
				Аналитика = СтрокаТЧ[КлючИЗначение.Значение];
				
				Если Не (ОбязательныеСтатьи.Найти(Статья) = Неопределено Или ЗначениеЗаполнено(Аналитика)) Тогда
					
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
						Ошибки,
						Ошибки.ПрефиксОбъекта + ИмяТЧ + "[%1]." + КлючИЗначение.Значение,
						НСтр("ru='Не заполнена аналитика расходов'"),
						ИмяТЧ,
						Индекс,
						НСтр("ru='Не заполнена аналитика расходов в строке %1'"));
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьУсловноеОформление(УсловноеОформление, СтруктураРеквизитов, ИмяТабличнойЧасти = "", ФормаОбъекта, ПрефиксКонтроля)
	
	ПревиксТЧ = ?(ПустаяСтрока(ИмяТабличнойЧасти), "", ИмяТабличнойЧасти + ".");
	ПрефиксАналитики = ?(ФормаОбъекта, "Объект.", "") + ПревиксТЧ;
	Если ПустаяСтрока(ПрефиксКонтроля) Тогда
		ПрефиксКонтроля  = ?(ФормаОбъекта И Не ПустаяСтрока(ПревиксТЧ), "Объект.", "") + ПревиксТЧ;
	Иначе
		ПрефиксКонтроля = ПрефиксКонтроля + ".";
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		
		ИмяАналитики = КлючИЗначение.Значение;
		ИмяКонтроля = ИмяАналитики + "Обязательна";
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ИмяТабличнойЧасти + ИмяАналитики);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПрефиксКонтроля + ИмяКонтроля);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		
		Если ПустаяСтрока(ИмяТабличнойЧасти) Тогда
			
			Элемент = УсловноеОформление.Элементы.Добавить();
			Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ИмяАналитики);
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПрефиксКонтроля + ИмяКонтроля);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Истина;
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПрефиксАналитики + ИмяАналитики);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ПланыВидовХарактеристик.СтатьиРасходов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.4.10.45";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2bd69e5c-7e3a-4d97-9e1d-b2533d92b221");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ПланыВидовХарактеристик.СтатьиРасходов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Для статей расходов с вариантам распределения на РБП, на фин. рез. заполняются реквизиты ПравилоРаспределенияРасходовРегл/Упр, по значениям реквизитов УдалитьСпособРаспределенияПоНаправлениямДеятельности и УдалитьСтатьяРасходов.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.ПланыВидовХарактеристик.СтатьиРасходов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ПравилаРаспределенияРасходов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.ПланыВидовХарактеристик.СтатьиРасходов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.ПланыВидовХарактеристик.СтатьиРасходов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ПравилаРаспределенияРасходов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

КонецПроцедуры

Процедура ЗаполнитьПредопределенныеСтатьиРасходов() Экспорт
	
	МассивСтатей = Новый Массив;
	МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.СебестоимостьПродаж);
	МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.ПогрешностьРасчетаСебестоимости);
	МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.КурсовыеРазницы);
	МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.РасходыПриКонвертацииВалюты);
	МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.НачисленныйНДСПриВыкупеМногооборотнойТары);
	МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров);
	МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.ПрибыльУбытокПрошлыхЛет);
	МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.ФормированиеРезервовПоСомнительнымДолгам);
	МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.НДСНалоговогоАгента);
	МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.ТорговыйСбор);
	МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.ДоначислениеИмущественныхНалоговИАмортизации);
	МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.ВыбытияТоваровВПрошлыхПериодах);
	МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.РасходыНаПлатон);
	МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.РасходыЛизинговыеПлатежи);
	
	Для Каждого СтатьяРасходов Из МассивСтатей Цикл
		
		Если Не ЗначениеЗаполнено(СтатьяРасходов.ВариантРаспределенияРасходовРегл) Тогда
			
			СтатьяРасходовОбъект = СтатьяРасходов.ПолучитьОбъект();
			Если СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.КурсовыеРазницы Тогда
				СтатьяРасходовОбъект.ТипЗначения = Новый ОписаниеТипов("ПеречислениеСсылка.АналитикаКурсовыхРазниц");
				СтатьяРасходовОбъект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
				СтатьяРасходовОбъект.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ПрочаяДеятельность;
			ИначеЕсли СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.РасходыПриКонвертацииВалюты Тогда
				СтатьяРасходовОбъект.ТипЗначения = Новый ОписаниеТипов("ПеречислениеСсылка.АналитикаКурсовыхРазниц");
				СтатьяРасходовОбъект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
				СтатьяРасходовОбъект.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ПрочаяДеятельность;
			ИначеЕсли СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.НачисленныйНДСПриВыкупеМногооборотнойТары Тогда
				СтатьяРасходовОбъект.ТипРасходов = Перечисления.ТипыРасходов.ПродажаТоваров;
				СтатьяРасходовОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Партнеры");
				СтатьяРасходовОбъект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
				СтатьяРасходовОбъект.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ОсновнаяДеятельность;
			ИначеЕсли СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ФормированиеРезервовПоСомнительнымДолгам Тогда
				СтатьяРасходовОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");
				СтатьяРасходовОбъект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
				Если ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
					СтатьяРасходовОбъект.Наименование = НСтр("ru = 'Прочие расходы'");;
				КонецЕсли;
				СтатьяРасходовОбъект.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ПрочаяДеятельность;
			ИначеЕсли СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.НДСНалоговогоАгента Тогда
				СтатьяРасходовОбъект.ТипРасходов = Перечисления.ТипыРасходов.ЗакупкаТоваров;
				СтатьяРасходовОбъект.ТипЗначения = Новый ОписаниеТипов("ДокументСсылка.ПриобретениеТоваровУслуг");
				СтатьяРасходовОбъект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров;
				СтатьяРасходовОбъект.ПравилоРаспределенияНаСебестоимость = Перечисления.ПравилаРаспределенияНаСебестоимостьТоваров.ПропорциональноСебестоимости;
				СтатьяРасходовОбъект.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ОсновнаяДеятельность;
			ИначеЕсли СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ТорговыйСбор Тогда
				СтатьяРасходовОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Склады");
				СтатьяРасходовОбъект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
				СтатьяРасходовОбъект.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ОсновнаяДеятельность;
			ИначеЕсли СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ПрибыльУбытокПрошлыхЛет Тогда
				СтатьяРасходовОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности");
				СтатьяРасходовОбъект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
				СтатьяРасходовОбъект.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ПрочаяДеятельность;
			ИначеЕсли СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ДоначислениеИмущественныхНалоговИАмортизации Тогда
				СтатьяРасходовОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ПрочиеРасходы");
				СтатьяРасходовОбъект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
				СтатьяРасходовОбъект.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ОсновнаяИПрочаяДеятельность;
			ИначеЕсли СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ВыбытияТоваровВПрошлыхПериодах Тогда
				СтатьяРасходовОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
				СтатьяРасходовОбъект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
				СтатьяРасходовОбъект.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ОсновнаяИПрочаяДеятельность;
			ИначеЕсли СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.РасходыНаПлатон Тогда
				СтатьяРасходовОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности");
				СтатьяРасходовОбъект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
				СтатьяРасходовОбъект.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ОсновнаяДеятельность;
			ИначеЕсли СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.РасходыЛизинговыеПлатежи Тогда
				СтатьяРасходовОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности");
				СтатьяРасходовОбъект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
				СтатьяРасходовОбъект.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ОсновнаяДеятельность;
			Иначе
				СтатьяРасходовОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности");
				СтатьяРасходовОбъект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
				СтатьяРасходовОбъект.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ОсновнаяДеятельность;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтатьяРасходовОбъект.ТипРасходов) Тогда
				СтатьяРасходовОбъект.ТипРасходов = Перечисления.ТипыРасходов.ПрочиеРасходы;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтатьяРасходовОбъект.ВариантРаспределенияРасходовУпр) Тогда
				СтатьяРасходовОбъект.ВариантРаспределенияРасходовУпр = СтатьяРасходовОбъект.ВариантРаспределенияРасходовРегл;
			КонецЕсли;
			СтатьяРасходовОбъект.ВариантРаздельногоУчетаНДС = Перечисления.ВариантыРаздельногоУчетаНДС.ИзДокумента;
			СтатьяРасходовОбъект.ДополнительныеСвойства.Вставить("ИзменениеКлючевыхРеквизитов", Истина);

			СтатьяРасходовОбъект.Записать();

		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления УТ 11.4.1.
// Заполняет новые реквизиты ТипРасходов, ВариантРаспределенияРасходовУпр, ХарактерПроизводственныхЗатрат. 
// 
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "ПланВидовХарактеристик.СтатьиРасходов";
	МетаданныеОбъекта = Метаданные.ПланыВидовХарактеристик.СтатьиРасходов;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ДополнительныеПараметрыВыборкиДанных = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметрыВыборкиДанных.ВыбиратьПорциями = Ложь;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь,
																					ПолноеИмяОбъекта,
																					МенеджерВременныхТаблиц,
																					ДополнительныеПараметрыВыборкиДанных);
	
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли; 
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ОбъектыДляОбработки.Ссылка КАК Ссылка,
		|	Реквизиты.ВерсияДанных КАК ВерсияДанных,
		|	1 КАК НомерУсловия
		|ПОМЕСТИТЬ ВТУсловия
		|ИЗ
		|	ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК Реквизиты
		|		ПО ОбъектыДляОбработки.Ссылка = Реквизиты.Ссылка
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
		|			ГДЕ
		|				(НЕ СтатьиРасходов.УдалитьСтатьяРасходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
		|					ИЛИ СтатьиРасходов.УдалитьПравилоРаспределенияРасходов.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаРБП))
		|				И (СтатьиРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
		|							И СтатьиРасходов.ПравилоРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка)
		|						ИЛИ СтатьиРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
		|							И СтатьиРасходов.ПравилоРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка)))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОбъектыДляОбработки.Ссылка,
		|	Реквизиты.ВерсияДанных,
		|	2
		|ИЗ
		|	ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК Реквизиты
		|		ПО ОбъектыДляОбработки.Ссылка = Реквизиты.Ссылка
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
		|			ГДЕ
		|				(НЕ СтатьиРасходов.УдалитьСпособРаспределенияПоНаправлениямДеятельности = ЗНАЧЕНИЕ(Справочник.СпособыРаспределенияПоНаправлениямДеятельности.ПустаяСсылка)
		|					ИЛИ СтатьиРасходов.УдалитьПравилоРаспределенияРасходов.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаФинансовыйРезультат))
		|				И (СтатьиРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности)
		|							И СтатьиРасходов.ПравилоРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка)
		|						ИЛИ СтатьиРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности)
		|							И СтатьиРасходов.ПравилоРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка)))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОбъектыДляОбработки.Ссылка,
		|	Реквизиты.ВерсияДанных,
		|	3
		|ИЗ
		|	ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК Реквизиты
		|		ПО ОбъектыДляОбработки.Ссылка = Реквизиты.Ссылка
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
		|			ГДЕ
		|				СтатьиРасходов.УдалитьПравилоРаспределенияРасходов.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеСтатейРасходовПоЭтапамПроизводства)
		|				И (СтатьиРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты)
		|							И СтатьиРасходов.ПравилоРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка)
		|						ИЛИ СтатьиРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты)
		|							И СтатьиРасходов.ПравилоРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка)))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	НомерУсловия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбъектыДляОбработки.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(НаРБП.ВерсияДанных, ЕСТЬNULL(НаНД.ВерсияДанных, НаПроизводство.ВерсияДанных)) КАК ВерсияДанных,
		|	ВЫБОР
		|		КОГДА Реквизиты.УдалитьПравилоРаспределенияРасходов.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаФинансовыйРезультат)
		|			ТОГДА Реквизиты.УдалитьПравилоРаспределенияРасходов
		|		ИНАЧЕ
		|			ЕСТЬNULL(ПравилаНаНД.Ссылка, ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка))
		|	КОНЕЦ КАК ПравилоНаНД,
		|	ВЫБОР
		|		КОГДА Реквизиты.УдалитьПравилоРаспределенияРасходов.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаРБП)
		|			ТОГДА Реквизиты.УдалитьПравилоРаспределенияРасходов
		|		ИНАЧЕ
		|			ЕСТЬNULL(ПравилаНаРБП.Ссылка, ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка))
		|	КОНЕЦ КАК ПравилоНаРБП,
		|	ВЫБОР
		|		КОГДА Реквизиты.УдалитьПравилоРаспределенияРасходов.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеСтатейРасходовПоЭтапамПроизводства)
		|			ТОГДА Реквизиты.УдалитьПравилоРаспределенияРасходов
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка)
		|	КОНЕЦ КАК ПравилоНаПроизводство,
		|	Реквизиты.ВариантРаспределенияРасходовРегл КАК ВариантРаспределенияРасходовРегл,
		|	Реквизиты.ВариантРаспределенияРасходовУпр КАК ВариантРаспределенияРасходовУпр
		|ИЗ
		|	ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК Реквизиты
		|		ПО ОбъектыДляОбработки.Ссылка = Реквизиты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаРаспределенияРасходов КАК ПравилаНаРБП
		|		ПО Реквизиты.УдалитьСтатьяРасходов = ПравилаНаРБП.СтатьяСписанияРБП
		|			И НЕ Реквизиты.УдалитьСтатьяРасходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаРаспределенияРасходов КАК ПравилаНаНД
		|		ПО Реквизиты.УдалитьСпособРаспределенияПоНаправлениямДеятельности = ПравилаНаНД.УдалитьСпособРаспределения
		|			И НЕ Реквизиты.УдалитьСпособРаспределенияПоНаправлениямДеятельности = ЗНАЧЕНИЕ(Справочник.СпособыРаспределенияПоНаправлениямДеятельности.ПустаяСсылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУсловия КАК НаРБП
		|		ПО ОбъектыДляОбработки.Ссылка = НаРБП.Ссылка
		|			И (НаРБП.НомерУсловия = 1)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУсловия КАК НаНД
		|		ПО ОбъектыДляОбработки.Ссылка = НаНД.Ссылка
		|			И (НаНД.НомерУсловия = 2)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУсловия КАК НаПроизводство
		|		ПО ОбъектыДляОбработки.Ссылка = НаПроизводство.Ссылка
		|			И (НаПроизводство.НомерУсловия = 3)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТОбъектыДляОбработки", Результат.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			Объект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(Выборка.Ссылка,
																			Выборка.ВерсияДанных,
																			Параметры.Очередь);
			Если Объект = Неопределено Тогда
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Если Выборка.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов Тогда
				Объект.ПравилоРаспределенияРасходовРегл = Выборка.ПравилоНаРБП;
			ИначеЕсли Выборка.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности Тогда
				Объект.ПравилоРаспределенияРасходовРегл = Выборка.ПравилоНаНД;
			ИначеЕсли Выборка.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты Тогда
				Объект.ПравилоРаспределенияРасходовРегл = Выборка.ПравилоНаПроизводство;
			КонецЕсли;
			
			Если Выборка.ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов Тогда
				Объект.ПравилоРаспределенияРасходовУпр = Выборка.ПравилоНаРБП;
			ИначеЕсли Выборка.ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности Тогда
				Объект.ПравилоРаспределенияРасходовУпр = Выборка.ПравилоНаНД;
			ИначеЕсли Выборка.ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты Тогда
				Объект.ПравилоРаспределенияРасходовУпр = Выборка.ПравилоНаПроизводство;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать элемент: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеОбъекта,
				Выборка.Ссылка,
				ТекстСообщения);
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

// Регистрирует данные для обработчика обновления.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.Ссылка КАК Ссылка
		|ИЗ
		|	(ВЫБРАТЬ
		|		СтатьиРасходов.Ссылка КАК Ссылка
		|	ИЗ
		|		ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
		|	ГДЕ
		|		(НЕ СтатьиРасходов.УдалитьСтатьяРасходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
		|			ИЛИ СтатьиРасходов.УдалитьПравилоРаспределенияРасходов.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаРБП))
		|		И (СтатьиРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
		|					И СтатьиРасходов.ПравилоРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка)
		|				ИЛИ СтатьиРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
		|					И СтатьиРасходов.ПравилоРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СтатьиРасходов.Ссылка
		|	ИЗ
		|		ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
		|	ГДЕ
		|		(НЕ СтатьиРасходов.УдалитьСпособРаспределенияПоНаправлениямДеятельности = ЗНАЧЕНИЕ(Справочник.СпособыРаспределенияПоНаправлениямДеятельности.ПустаяСсылка)
		|			ИЛИ СтатьиРасходов.УдалитьПравилоРаспределенияРасходов.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаФинансовыйРезультат))
		|		И (СтатьиРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности)
		|					И СтатьиРасходов.ПравилоРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка)
		|				ИЛИ СтатьиРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности)
		|					И СтатьиРасходов.ПравилоРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СтатьиРасходов.Ссылка
		|	ИЗ
		|		ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
		|	ГДЕ
		|		СтатьиРасходов.УдалитьПравилоРаспределенияРасходов.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеСтатейРасходовПоЭтапамПроизводства)
		|		И (СтатьиРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты)
		|					И СтатьиРасходов.ПравилоРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка)
		|				ИЛИ СтатьиРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты)
		|					И СтатьиРасходов.ПравилоРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка))) КАК ВложенныйЗапрос";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли