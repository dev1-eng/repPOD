#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбменДаннымиСервер.ФормаУзлаПриСозданииНаСервере(ЭтаФорма, Отказ);
	
	СформироватьСписокВыбораПравилФормированияДоговора();
	
	Если Объект.ИспользоватьОтборПоОрганизациям Тогда
		
		ПравилоОтбораСправочников = "Отбор";
		
	Иначе
		
		Если Объект.ВыгружатьУправленческуюОрганизацию Тогда
			ПравилоОтбораСправочников = "УпрОрганизация";
		Иначе
			ПравилоОтбораСправочников = "БезОтбора";
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ИспользоватьОтборПоРазделамУчета Тогда
		РежимВыгрузкиРазделовУчета = 1;
	ИначеЕсли Объект.РазделыУчета.Количество() = 0 Тогда
		Объект.РазделыУчета.Загрузить(ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.ПолучитьРазделыУчета(
			Ложь, Объект.ВариантНастройки));
	КонецЕсли;
	
	ИспользоватьНесколькоВидовЦен = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовЦен");
	ИспользоватьНесколькоСкладов  = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	ФлагФормыВыгрузкиИнформОстатков = Объект.ВыгружатьИнформативныеОстатки;
	
	Если Объект.ВариантНастройки = "ОбменКасса"
		И ИспользоватьНесколькоВидовЦен
		И Объект.ВидыЦенНоменклатуры.Количество() > 0 Тогда
		ВидЦен = Объект.ВидыЦенНоменклатуры[0].ВидЦенНоменклатуры;
	КонецЕсли;
	
	// Инициализируем доступность ссылок установки дата запрета редактирования и даты запрета получения.
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("УстановитьДатуЗапретаПолученияДанных");
	МассивЭлементов.Добавить("УстановитьДатуЗапретаИзменений");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивЭлементов,
		"Доступность",
		ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ДатыЗапретаИзменения));
	
	УстановитьВидимостьНаСервере();
	ОбновитьСписокВыбораВерсийФорматаОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("Запись_УзелПланаОбмена");
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ВариантНастройки = "ОбменКасса"
		И ЭтотОбъект.ИспользоватьНесколькоВидовЦен Тогда
		
		ТекущийОбъект.ВидыЦенНоменклатуры.Очистить();
		
		СтрокаВидыЦен = ТекущийОбъект.ВидыЦенНоменклатуры.Добавить();
		СтрокаВидыЦен.ВидЦенНоменклатуры = ЭтотОбъект.ВидЦен;
	КонецЕсли;
	
	ТекущийОбъект.ВыгружатьИнформативныеОстатки = ФлагФормыВыгрузкиИнформОстатков;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
		И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаОтметкиЭлементов" Тогда
		
		// Выбраны разделы учета.
		Для Каждого СтрокаРаздела из Объект.РазделыУчета Цикл
			
			ВыбЗначение = ВыбранноеЗначение.НайтиПоЗначению(СтрокаРаздела.РазделУчета);
			
			Если Не ВыбЗначение = Неопределено Тогда
				СтрокаРаздела.Выгружать = ВыбЗначение.Пометка;
			КонецЕсли;
			
		КонецЦикла;
		
		ОбновитьНаименованиеКомандФормы();
		
	Иначе
		ОбновитьДанныеОбъекта(ВыбранноеЗначение);
	КонецЕсли;
	
	Модифицированность = Истина;
	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ФормироватьДоговора() И Не ЗначениеЗаполнено(Объект.ПравилаСозданияДоговоровКонтрагентов) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Необходимо заполнить правила формирования договоров!'"), ,
			"Объект.ПравилаСозданияДоговоровКонтрагентов");
		Отказ = Истина;
	КонецЕсли;
	
	Если Объект.ВариантНастройки = "ОбменКасса" И ЭтотОбъект.ИспользоватьНесколькоВидовЦен
		И НЕ ЗначениеЗаполнено(ЭтотОбъект.ВидЦен) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Необходимо заполнить вид цен!'"), ,
			"ВидЦен");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ОбменДаннымиКлиент.ФормаНастройкиПередЗакрытием(Отказ, ЭтотОбъект, ЗавершениеРаботы);
	
КонецПроцедуры



&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбменДаннымиСервер.ФормаУзлаПриЗаписиНаСервере(ТекущийОбъект, Отказ);
		
КонецПроцедуры

#КонецОбласти
#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ФлагИспользоватьОтборПоОрганизациямПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ФлагОтправлятьИнформОстатки(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтправлятьНСИАвтоматическиПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтправлятьНСИПоНеобходимостиПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтправлятьНСИНикогдаПриИзменении(Элемент)
	Объект.ПравилаОтправкиДокументов = "НеСинхронизировать";
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтбораСправочниковСОтборомПриИзменении(Элемент)
	УстановитьУсловияОграниченияСинхронизации();
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтбораСправочниковБезОтбораСУпрПриИзменении(Элемент)
	УстановитьУсловияОграниченияСинхронизации();
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтбораСправочниковБезОтбораБезУпрПриИзменении(Элемент)
	УстановитьУсловияОграниченияСинхронизации();
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательРежимаВыгрузкиРазделовУчетаБезОтбораПриИзменении(Элемент)
	УстановитьУсловияОграниченияСинхронизации();
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательРежимаВыгрузкиРазделовУчетаСОтборомПриИзменении(Элемент)
	УстановитьУсловияОграниченияСинхронизации();
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПутьКМенеджеруОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	НастройкиДиалога = Новый Структура;
	НастройкиДиалога.Вставить("Фильтр", НСтр("ru = 'Менеджер обмена (*.epf)'") + "|*.epf" );
	
	Оповещение = Новый ОписаниеОповещения("ЗавершениеВыбораФайлаМенеджераОбмена", ЭтотОбъект);
	ОбменДаннымиКлиент.ВыбратьИПередатьФайлНаСервер(Оповещение, НастройкиДиалога, УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДокументыОтправлятьАвтоматическиПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДокументыОтправлятьВручнуюПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДокументыНеОтправлятьПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ФлагОтправлятьВидыЦенНоменклатуры(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры
#КонецОбласти
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьСписокВыбранныхОрганизаций(Команда)
	
	Если Не Объект.ВыгружатьУправленческуюОрганизацию
		Или Не ПолучитьФункциональнуюОпциюИнтерфейса("ИспользоватьУправленческуюОрганизацию") Тогда
		
		КоллекцияФильтров = Новый Массив;
		
		НакладываемыеФильтры = Новый Структура();
		НакладываемыеФильтры.Вставить("РеквизитОтбора",    "Ссылка");
		НакладываемыеФильтры.Вставить("Условие",           "<>");
		НакладываемыеФильтры.Вставить("ИмяПараметра",      "ИсключаемаяСсылка");
		НакладываемыеФильтры.Вставить("ЗначениеПараметра", 
			ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация"));
		
		КоллекцияФильтров.Добавить(НакладываемыеФильтры);
		
	Иначе
		
		КоллекцияФильтров = Неопределено;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИмяЭлементаФормыДляЗаполнения",          "Организации");
	ПараметрыФормы.Вставить("ИмяРеквизитаЭлементаФормыДляЗаполнения", "Организация");
	ПараметрыФормы.Вставить("ИмяТаблицыВыбора",                       "Справочник.Организации");
	ПараметрыФормы.Вставить("ЗаголовокФормыВыбора",                   НСтр("ru = 'Выберите организации для отбора:'"));
	ПараметрыФормы.Вставить("МассивВыбранныхЗначений",                СформироватьМассивВыбранныхЗначений(ПараметрыФормы));
	ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения",            Неопределено);
	ПараметрыФормы.Вставить("КоллекцияФильтров",                      КоллекцияФильтров);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораДополнительныхУсловий",
		ПараметрыФормы,
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокОтправляемыхВидовЦенНоменклатуры(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИмяЭлементаФормыДляЗаполнения",          "ВидыЦенНоменклатуры");
	ПараметрыФормы.Вставить("ИмяРеквизитаЭлементаФормыДляЗаполнения", "ВидЦенНоменклатуры");
	ПараметрыФормы.Вставить("ИмяТаблицыВыбора",                       "Справочник.ВидыЦен");
	ПараметрыФормы.Вставить("ЗаголовокФормыВыбора",                   НСтр("ru = 'Выберите виды цен для отправки:'"));
	ПараметрыФормы.Вставить("МассивВыбранныхЗначений",                СформироватьМассивВыбранныхЗначений(ПараметрыФормы));
	ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения",            Неопределено);
	ПараметрыФормы.Вставить("КоллекцияФильтров",                      Неопределено);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораДополнительныхУсловий",
		ПараметрыФормы,
		ЭтаФорма);

КонецПроцедуры
	
&НаКлиенте
Процедура ОткрытьСписокОтправляемыхСкладовИнформОстатков(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИмяЭлементаФормыДляЗаполнения",          "СкладыИнформативныхОстатков");
	ПараметрыФормы.Вставить("ИмяРеквизитаЭлементаФормыДляЗаполнения", "Склад");
	ПараметрыФормы.Вставить("ИмяТаблицыВыбора",                       "Справочник.Склады");
	ПараметрыФормы.Вставить("ЗаголовокФормыВыбора",                   НСтр("ru = 'Выберите склады, для которых требуется выгрузить информативные остатки:'"));
	ПараметрыФормы.Вставить("МассивВыбранныхЗначений",                СформироватьМассивВыбранныхЗначений(ПараметрыФормы));
	ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения",            Неопределено);
	ПараметрыФормы.Вставить("КоллекцияФильтров",                      Неопределено);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораДополнительныхУсловий",
		ПараметрыФормы,
		ЭтаФорма);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОткрытьСписокВыбранныхРазделовУчета(Команда)
	
	СписокРазделовУчета = Новый СписокЗначений;
	Для Каждого СтрокаРаздела из Объект.РазделыУчета Цикл
		СписокРазделовУчета.Добавить(СтрокаРаздела.РазделУчета, , СтрокаРаздела.Выгружать);
	КонецЦикла;
	
	ОткрытьФорму("ОбщаяФорма.ФормаОтметкиЭлементов",Новый Структура("СписокЗначений", СписокРазделовУчета),ЭтотОбъект);

КонецПроцедуры

#КонецОбласти
#Область СлужебныеПроцедурыИФункции

#Область Прочее

&НаКлиенте
Процедура ЗавершениеВыбораФайлаМенеджераОбмена(Знач РезультатПомещенияФайлов, Знач ДополнительныеПараметры) Экспорт
	
	ОчиститьСообщения();
	
	АдресПомещенногоФайла = РезультатПомещенияФайлов.Хранение;
	ТекстОшибки           = РезультатПомещенияФайлов.ОписаниеОшибки;
	
	Объект.ПутьКМенеджеруОбмена = РезультатПомещенияФайлов.Имя;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьНаСервере()
	
	Элементы.ГруппаНСИ.Видимость = НЕ Объект.ВариантНастройки = "ОбменКасса";
	
	Элементы.ДатаНачалаВыгрузкиДокументов.Доступность =
		?(Объект.ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация", Истина, Ложь);
		
	Элементы.ПереключательДокументыНеОтправлять.Доступность =
		?(Не Объект.ПравилаОтправкиСправочников = "СинхронизироватьПоНеобходимости", Истина, Ложь);
		
	Элементы.ОписаниеДокументыНеОтправлять.Доступность =
		?(Не Объект.ПравилаОтправкиСправочников = "СинхронизироватьПоНеобходимости", Истина, Ложь);
		
	Элементы.ГруппаДокументы.ПодчиненныеЭлементы.ГруппаРежимОтправкиДокументов.Доступность =
		?(Не Объект.ПравилаОтправкиСправочников = "НеСинхронизировать", Истина, Ложь);
		
	Элементы.ГруппаНастройкаОтборов.Доступность =
		?((Объект.ПравилаОтправкиСправочников <> "НеСинхронизировать"
			Или Объект.ПравилаОтправкиДокументов <> "НеСинхронизировать"), Истина, Ложь);
	
	Элементы.ПравилаПолученияДанных.Видимость = Не СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	
#Область ГруппаНастройкаДополнительныхОтборов
	
	#Область РазделыУчета
	// Доступность выгружаемых разделов учета.
	Элементы.ГруппаСтраницыОтборПоРазделамУчета.Видимость = НЕ (Объект.ВариантНастройки = "ОбменУП2ЗУП3"
		ИЛИ Объект.ВариантНастройки = "ОбменКасса");
	
	Если Элементы.ГруппаСтраницыОтборПоРазделамУчета.Видимость Тогда
		
		Элементы.ГруппаСтраницыОтборПоРазделамУчета.Доступность = Объект.ПравилаОтправкиДокументов <> "НеСинхронизировать";
		Элементы.ОткрытьСписокВыбранныхРазделовУчета.Доступность = РежимВыгрузкиРазделовУчета = 1;
		
	КонецЕсли;
	#КонецОбласти
	
	#Область ГруппаСтраницыОтборПоОрганизациям
	
	Элементы.ГруппаСтраницыОтборПоОрганизациям.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	
	Если Элементы.ГруппаСтраницыОтборПоОрганизациям.Видимость Тогда
		
		Элементы.ГруппаСтраницыОтборПоОрганизациям.Доступность = Истина;
		Элементы.ГруппаСтраницыОтборПоОрганизациям.ТекущаяСтраница = 
			Элементы.ГруппаСтраницаОтборПоОрганизациям;
		
		// Видимость управленческой организации и варианта отбора
		ИспользоватьУправленческуюОрганизацию =
			ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию")
				И Не Объект.ВариантНастройки = "ОбменУП2ЗУП3";
				
		// Видимость управленческой организации и варианта отбора.
		Элементы.ГруппаВыборУправленческойОрганизации.Видимость = ИспользоватьУправленческуюОрганизацию;
		
		Если Объект.ПравилаОтправкиСправочников = "НеСинхронизировать" Тогда
			Элементы.ГруппаСтраницыОтборПоОрганизациям.Доступность = Ложь;
		Иначе
			
			Элементы.ОткрытьСписокВыбранныхОрганизаций.Доступность = Объект.ИспользоватьОтборПоОрганизациям;
			
			Если Элементы.ГруппаВыборУправленческойОрганизации.Видимость Тогда
				Элементы.ГруппаСтраницыВариантВыбораОтбора.ТекущаяСтраница = 
					Элементы.ГруппаСтраницаПереключательОтбора;
			Иначе
				
				Элементы.ГруппаСтраницыВариантВыбораОтбора.ТекущаяСтраница = 
					Элементы.ГруппаСтраницаФлагОтбора;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимостьГруппыНаСервере(Элементы, "ГруппировкаОтборов");
	УстановитьВидимостьГруппыНаСервере(Элементы, "ГруппаНастройкаОтборов");
	#КонецОбласти
	
#КонецОбласти
	
#Область ГруппаПрочее

#Область СкладыИнформОстатков
	
	// Видимость выгружаемых складов для информ. остатков.
	Элементы.ГруппаНастройкаОтправлятьИнформОстатки.Видимость = Объект.ВариантНастройки <> "ОбменУП2ЗУП3"
		И Объект.ВариантНастройки <> "ОбменКасса";
	
	Если Элементы.ГруппаНастройкаОтправлятьИнформОстатки.Видимость Тогда
		
		Элементы.ФлагОтправлятьИнформативныеОстатки.Видимость           = Истина;
		Элементы.ГруппаНастройкаОтправлятьИнформОстатки.ТекущаяСтраница = Элементы.ГруппаОтправлятьИнформОстаткиПоСкладам;
		
		Если ФлагФормыВыгрузкиИнформОстатков И ИспользоватьНесколькоСкладов Тогда
			Элементы.ГруппаСтраницыИнформативныеОстаткиПоСкладам.ТекущаяСтраница = 
				Элементы.ГруппаСтраницаКомандаВыбратьСкладыИнформативныхОстатков;
		Иначе
			Элементы.ГруппаСтраницыИнформативныеОстаткиПоСкладам.ТекущаяСтраница = 
				Элементы.ГруппаСтраницаКомандаВыбратьСкладыИнформОстатковПустая;
		КонецЕсли;
		
		Элементы.ГруппаНастройкаОтправлятьИнформОстатки.Доступность = Объект.ПравилаОтправкиСправочников <> "НеСинхронизировать";
		
	КонецЕсли;
	
#КонецОбласти


#Область ВидыЦен
	
	// Видимость выгружаемых видов цен.
	Элементы.ГруппаНастройкаВидовЦен.Видимость = Объект.ВариантНастройки <> "ОбменУП2ЗУП3";
	
	Если Элементы.ГруппаНастройкаВидовЦен.Видимость Тогда
		
		Элементы.ПолеВидЦен.АвтоОтметкаНезаполненного = Объект.ВариантНастройки = "ОбменКасса"
			И ИспользоватьНесколькоВидовЦен;
		
		Если Объект.ВариантНастройки = "ОбменКасса" Тогда
			Элементы.ГруппаНастройкаВидовЦен.ТекущаяСтраница = Элементы.ГруппаОтправлятьВидЦенНоменклатуры;
			Элементы.ГруппаНастройкаВидовЦен.Видимость = ИспользоватьНесколькоВидовЦен;
		Иначе
			Элементы.ГруппаНастройкаВидовЦен.ТекущаяСтраница = Элементы.ГруппаОтправлятьВидыЦенНоменклатуры;
			
			Если Объект.ВыгружатьЦеныНоменклатуры И ИспользоватьНесколькоВидовЦен Тогда
				Элементы.ГруппаСтраницыОтправлятьВидыЦенНоменклатуры.ТекущаяСтраница = 
					Элементы.ГруппаСтраницаКомандаВыбратьВидыЦен;
			Иначе
				Элементы.ГруппаСтраницыОтправлятьВидыЦенНоменклатуры.ТекущаяСтраница = 
					Элементы.ГруппаСтраницаКомандаВыбратьВидыЦенПустая;
			КонецЕсли;
			
			Если Объект.ПравилаОтправкиСправочников = "НеСинхронизировать"
				Или Объект.ПравилаОтправкиСправочников = "СинхронизироватьПоНеобходимости" Тогда
				Элементы.ГруппаОтправлятьВидыЦенНоменклатуры.Доступность = Ложь;
			Иначе
				Элементы.ГруппаОтправлятьВидыЦенНоменклатуры.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
#КонецОбласти

#Область ГруппаВыгружатьАналитикуПоСкладам
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаВыгружатьАналитикуПоСкладам",
		"Видимость", Объект.ВариантНастройки <> "ОбменУП2ЗУП3");
			
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаВыгружатьАналитикуПоСкладам",
		"Доступность", Объект.ПравилаОтправкиДокументов <> "НеСинхронизировать");
		
#КонецОбласти

#Область ГруппаПравилаСозданияДоговоровКонтрагентов

	Элементы.ГруппаПравилаСозданияДоговоровКонтрагентов.Видимость = Объект.ВариантНастройки <> "ОбменУП2ЗУП3";
	Элементы.ПолеПравилаСозданияДоговоровКонтрагентов.АвтоОтметкаНезаполненного = Объект.ВариантНастройки <> "ОбменУП2ЗУП3";
	
	Если Элементы.ГруппаПравилаСозданияДоговоровКонтрагентов.Видимость Тогда
		
		Элементы.ГруппаПравилаСозданияДоговоровКонтрагентов.Доступность = Объект.ПравилаОтправкиДокументов <> "НеСинхронизировать";
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ПолеПравилаСозданияДоговоровКонтрагентов",
			"Доступность",
			Элементы.ПолеПравилаСозданияДоговоровКонтрагентов.СписокВыбора.Количество() > 1);
			
	КонецЕсли;
#КонецОбласти

#Область ГруппаДатаЗапретаРедактированияДанных
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаДатаЗапретаРедактированияДанных",
		"Видимость",
		ПолучитьФункциональнуюОпцию("ИспользоватьДатыЗапретаИзменения"));
#КонецОбласти
	
	УстановитьВидимостьГруппыНаСервере(Элементы, "ГруппаСоставПрочихНастроек");
	УстановитьВидимостьГруппыНаСервере(Элементы, "ГруппаПрочее");
#КонецОбласти
	
#Область ПравилаПолученияДанных
#Область ГруппаИнформацияНастройкаСоставаПолучаемыхДанных
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаИнформацияНастройкаСоставаПолучаемыхДанных",
		"Видимость",
		ПолучитьФункциональнуюОпцию("ИспользоватьДатыЗапретаЗагрузки")
			Или Не Объект.ВариантНастройки = "ОбменУП2ЗУП3");
#КонецОбласти
	
#Область ГруппаДатаЗапретаПолученияДанных
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаДатаЗапретаПолученияДанных",
		"Видимость",
		ПолучитьФункциональнуюОпцию("ИспользоватьДатыЗапретаЗагрузки"));
#КонецОбласти
	
#Область ГруппаСкладПоУмолчанию
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаСкладПоУмолчанию",
		"Видимость",
		Не Объект.ВариантНастройки = "ОбменУП2ЗУП3");
#КонецОбласти
	
	УстановитьВидимостьГруппыНаСервере(Элементы, "ПравилаПолученияДанных");
#КонецОбласти
	
	ОбновитьНаименованиеКомандФормы();
	
КонецПроцедуры

&НаСервере
Функция ФормироватьДоговора()
	
	Возврат (Объект.ПравилаОтправкиДокументов <> "НеСинхронизировать" И Объект.ВариантНастройки <> "ОбменУП2ЗУП3");
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеОбъекта(СтруктураПараметров)
	
	Объект[СтруктураПараметров.ИмяТаблицыДляЗаполнения].Очистить();
	
	СписокВыбранныхЗначений = ПолучитьИзВременногоХранилища(СтруктураПараметров.АдресТаблицыВоВременномХранилище);
	
	Если СписокВыбранныхЗначений.Количество() > 0 Тогда
		СписокВыбранныхЗначений.Колонки.Представление.Имя = СтруктураПараметров.ИмяКолонкиДляЗаполнения;
		Объект[СтруктураПараметров.ИмяТаблицыДляЗаполнения].Загрузить(СписокВыбранныхЗначений);
	КонецЕсли;
	
	ОбновитьНаименованиеКомандФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаименованиеКомандФормы()
	
	// Обновим заголовок выбранных организаций
	Если Объект.Организации.Количество() > 0 Тогда
		
		ВыбранныеОрганизации = Объект.Организации.Выгрузить().ВыгрузитьКолонку("Организация");
		НовыйЗаголовокОрганизаций = СтрСоединить(ВыбранныеОрганизации, ",");
		
	Иначе
		
		НовыйЗаголовокОрганизаций = НСтр("ru = 'Выбрать организации'");
		
	КонецЕсли;
	
	Элементы.ОткрытьСписокВыбранныхОрганизаций.Заголовок = НовыйЗаголовокОрганизаций;
	
	// Обновим заголовок выбранных видов цен
	Если Объект.ВидыЦенНоменклатуры.Количество() > 0 Тогда
		
		ВыбранныеВидыЦен = Объект.ВидыЦенНоменклатуры.Выгрузить().ВыгрузитьКолонку("ВидЦенНоменклатуры");
		НовыйЗаголовокВидовЦен = СтрСоединить(ВыбранныеВидыЦен, ",");
		
	Иначе
		
		НовыйЗаголовокВидовЦен = НСтр("ru = 'Выбрать виды цен'");
		
	КонецЕсли;
	
	Элементы.ОткрытьСписокОтправляемыхВидовЦенНоменклатуры.Заголовок = НовыйЗаголовокВидовЦен;
	
	Если Объект.СкладыИнформативныхОстатков.Количество() > 0 Тогда
		
		ВыбранныеСклады = Объект.СкладыИнформативныхОстатков.Выгрузить().ВыгрузитьКолонку("Склад");
		НовыйЗаголовокСкладов = СтрСоединить(ВыбранныеСклады, ",");
		
	Иначе
		
		НовыйЗаголовокСкладов = НСтр("ru = 'Выбрать склады'");
	КонецЕсли;
	
	Элементы.ОткрытьСписокОтправляемыхСкладовИнформОстатков.Заголовок = НовыйЗаголовокСкладов;
	
	НовыйЗаголовокРазделыУчета = НСтр("ru = 'Выбрать разделы учета'");
	
	// Обновим заголовок выбранных разделов учета
	Если ЭтотОбъект.РежимВыгрузкиРазделовУчета = 1 Тогда
		
		ВыбранныеРазделыУчета = Объект.РазделыУчета.Выгрузить(
			Новый Структура("Выгружать", Истина)).ВыгрузитьКолонку("РазделУчета");
			
		Если ВыбранныеРазделыУчета.Количество() > 0 Тогда
			НовыйЗаголовокРазделыУчета = СтрСоединить(ВыбранныеРазделыУчета, ",");
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ОткрытьСписокВыбранныхРазделовУчета.Заголовок = НовыйЗаголовокРазделыУчета;
	
КонецПроцедуры
	
&НаСервере
Процедура ОбновитьСписокВыбораВерсийФорматаОбмена()
	СписокВерсийФормата = Элементы.ВерсияФорматаОбмена.СписокВыбора;
	СписокВерсийФормата.Очистить();
	
	ВерсииФормата = Новый Соответствие;
	ОбменДаннымиУТ.ДоступныеВерсииУниверсальногоФормата(ВерсииФормата);
	
	Для Каждого ВерсияФормата Из ВерсииФормата Цикл
		СписокВерсийФормата.Добавить(ВерсияФормата.Ключ);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция СформироватьМассивВыбранныхЗначений(ПараметрыФормы)
	
	ТабличнаяЧасть           = Объект[ПараметрыФормы.ИмяЭлементаФормыДляЗаполнения];
	ТаблицаВыбранныхЗначений = ТабличнаяЧасть.Выгрузить(,ПараметрыФормы.ИмяРеквизитаЭлементаФормыДляЗаполнения);
	МассивВыбранныхЗначений  = ТаблицаВыбранныхЗначений.ВыгрузитьКолонку(ПараметрыФормы.ИмяРеквизитаЭлементаФормыДляЗаполнения);
	
	Возврат МассивВыбранныхЗначений;

КонецФункции

&НаКлиенте
Процедура УстановитьУсловияОграниченияСинхронизации()
	
	Если ПравилоОтбораСправочников = "Отбор" Тогда
		
		Объект.ИспользоватьОтборПоОрганизациям = Истина;
		Объект.ВыгружатьУправленческуюОрганизацию = Ложь;
		
	ИначеЕсли ПравилоОтбораСправочников = "УпрОрганизация" Тогда
		
		Объект.ИспользоватьОтборПоОрганизациям = Ложь;
		Объект.ВыгружатьУправленческуюОрганизацию = Истина;
		
	ИначеЕсли ПравилоОтбораСправочников = "БезОтбора" Тогда
		
		Объект.ИспользоватьОтборПоОрганизациям = Ложь;
		Объект.ВыгружатьУправленческуюОрганизацию = Ложь;
		
	КонецЕсли;
	
	Если РежимВыгрузкиРазделовУчета = 1 Тогда
		Объект.ИспользоватьОтборПоРазделамУчета = Истина;
	Иначе
		Объект.ИспользоватьОтборПоРазделамУчета = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьГруппыНаСервере(ЭлементыФормы, ИмяГруппы)
	
	ГруппаФормы = ЭлементыФормы.Найти(ИмяГруппы);
	
	Если ГруппаФормы = Неопределено
		Или Не ТипЗнч(ГруппаФормы) = Тип("ГруппаФормы") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Видимость = Ложь;
	
	Для Каждого ПодчиненныйЭлемент Из ГруппаФормы.ПодчиненныеЭлементы Цикл
		
		Если Не ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") Тогда
			Продолжить; // устанавливаем видимость только по видимости дочерних групп первого уровня вложенности
		КонецЕсли;
		
		Видимость = Видимость ИЛИ ПодчиненныйЭлемент.Видимость;
			
	КонецЦикла;
	
	ГруппаФормы.Видимость = Видимость;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокВыбораПравилФормированияДоговора()
	
	// Сформируем список выбора для реквизита "ПравилаСозданияДоговоровКонтрагентов"
	СписокПравилФормированияДоговора = ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.СписокПравилФормированияДоговора();
	Элементы.ПолеПравилаСозданияДоговоровКонтрагентов.СписокВыбора.Очистить();
	Для Каждого ЭлементПравил Из СписокПравилФормированияДоговора Цикл
		Элементы.ПолеПравилаСозданияДоговоровКонтрагентов.СписокВыбора.Добавить(ЭлементПравил.Значение, ЭлементПравил.Представление);
	КонецЦикла;
	
	Если СписокПравилФормированияДоговора.Количество() = 1 Тогда
		Объект.ПравилаСозданияДоговоровКонтрагентов = СписокПравилФормированияДоговора[0].Значение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПравилаСозданияДоговоровКонтрагентов)
		И СписокПравилФормированияДоговора.НайтиПоЗначению(Объект.ПравилаСозданияДоговоровКонтрагентов) = Неопределено Тогда
		
		Объект.ПравилаСозданияДоговоровКонтрагентов = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

