#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Добавляет команду создания документа "Таможенная декларация на импорт".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ТаможеннаяДекларацияИмпорт) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ТаможеннаяДекларацияИмпорт.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ТаможеннаяДекларацияИмпорт);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьИмпортныеЗакупки";
	

		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	КомандаОтчет = Отчеты.КарточкаРасчетовСПоставщиками.ДобавитьКомандуКарточкаРасчетовСПоставщикомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.ВидимостьВФормах = "ФормаДокумента";
	КонецЕсли;
	
	КомандаОтчет = Отчеты.СостояниеРасчетовСПоставщиками.ДобавитьКомандуОтчетаПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.ВидимостьВФормах = "ФормаДокумента";
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

КонецПроцедуры

// Процедура заполняет массивы реквизитов, зависимых от хозяйственной операции документа.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Выбранная хозяйственная операция
//	ВсеРеквизиты - Массив - Массив всех имен реквизитов, зависимых от хозяйственной операции
//	РеквизитыОперации - Массив - Массив имен реквизитов, используемых в выбранной хозяйственной операции.
//
Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(ХозяйственнаяОперация, ВсеРеквизиты, РеквизитыОперации) Экспорт
	ВсеРеквизиты = Новый Массив;
	РеквизитыОперации = Новый Массив;
	
	ВсеРеквизиты.Добавить("Соглашение");
	ВсеРеквизиты.Добавить("Договор");
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОформлениеГТДБрокером Тогда
		РеквизитыОперации.Добавить("Соглашение");
		РеквизитыОперации.Добавить("Договор");
	КонецЕсли;
КонецПроцедуры

// Получает реквизиты документа
//
// Параметры:
//  ДокументСсылка	 - ДокументСсылка.ТаможеннаяДекларацияИмпорт - Ссылка на документ.
// 
// Возвращаемое значение:
//  Структура - Структура реквизитов.
//
Функция РеквизитыДокумента(ДокументСсылка) Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Дата", '00010101');
	Реквизиты.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОформлениеГТДБрокером);
	Реквизиты.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	Реквизиты.Вставить("Партнер", Справочники.Партнеры.ПустаяСсылка());
	Реквизиты.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	Реквизиты.Вставить("Договор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Реквизиты.Вставить("ПорядокРасчетов", Перечисления.ПорядокРасчетов.ПустаяСсылка());
	Реквизиты.Вставить("РасчетыПоДоговору", Ложь);
	Реквизиты.Вставить("ПоЗаказу", Ложь);
	Реквизиты.Вставить("ВалютаВзаиморасчетов", Справочники.Валюты.ПустаяСсылка());
	Реквизиты.Вставить("СуммаДокумента", 0);
	Реквизиты.Вставить("СуммаВзаиморасчетов", 0);
	Реквизиты.Вставить("НаправлениеДеятельности", Справочники.НаправленияДеятельности.ПустаяСсылка());
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Данные.Дата КАК Дата,
	|	Данные.ВариантОформления КАК ХозяйственнаяОперация,
	|	Данные.Организация КАК Организация,
	|	Данные.Партнер КАК Партнер,
	|	Данные.Контрагент КАК Контрагент,
	|	Данные.Договор КАК Договор,
	|	Данные.ПорядокРасчетов КАК ПорядокРасчетов,
	|	ВЫБОР КОГДА Данные.Договор.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоДоговору,
	|	ЛОЖЬ КАК ПоЗаказу,
	|	Данные.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Данные.СуммаДокумента КАК СуммаДокумента,
	|	ВЫБОР КОГДА Данные.Проведен ТОГДА
	|		Данные.СуммаВзаиморасчетов
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	Данные.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК Данные
	|ГДЕ
	|	Данные.Ссылка = &ДокументСсылка
	|");
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
	КонецЕсли;
	Возврат Реквизиты;
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//  Структура - Состав полей задается в функции ОбработкаТабличнойЧастиКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.ТаможеннаяДекларацияИмпорт";
	
	ПараметрыУказанияСерий.ИмяТЧСерии = "Товары";
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямСклад", Новый Структура());
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура());
	
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПустаяСсылка());
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Склад");
	
	ПараметрыУказанияСерий.ЭтоНакладная = Истина;
	
	ПараметрыУказанияСерий.ТолькоСерииДляСебестоимости = Истина;
	ПараметрыУказанияСерий.Дата = Объект.Дата;
	
	ОперацииТоварыВПути = Новый Массив();
	ОперацииТоварыВПути.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути);
	ОперацииТоварыВПути.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути);
	
	ПараметрыУказанияСерий.ПараметрыЗапроса.Вставить("ХозОперацииТоварыВПути", ОперацииТоварыВПути);
	
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("ХозяйственнаяОперация");
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	ИменаРеквизитов = "Дата";
	
	Возврат ИменаРеквизитов;
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Склад,
	|	Товары.Серия,
	|	Товары.Количество,
	|	Товары.СтатусУказанияСерий,
	|	Товары.ХозяйственнаяОперация,
	|	Товары.НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|					ТОГДА ВЫБОР
	|							КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|								ТОГДА 14
	|							ИНАЧЕ 13
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|			ПО ПолитикиУчетаСерий.Склад = Склады.Ссылка
	|		ПО (ПолитикиУчетаСерий.Склад = Товары.Склад)
	|			И (ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка)
	|ГДЕ
	|	НЕ Товары.ХозяйственнаяОперация В (&ХозОперацииТоварыВПути)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ВидНоменклатуры.ПолитикаУчетаСерий ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВидНоменклатуры.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|					ТОГДА
	|						ВЫБОР
	|							КОГДА ВидНоменклатуры.ПолитикаУчетаСерий.УчетТоваровВПутиОтПоставщикаПоСериям
	|								ТОГДА
	|									ВЫБОР
	|										КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|											ТОГДА 18
	|										ИНАЧЕ 17
	|									КОНЕЦ
	|								ИНАЧЕ 0
	|						КОНЕЦ
	|					ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ИЗ
	|	Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидНоменклатуры
	|	ПО ВидНоменклатуры.Ссылка = ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры
	|ГДЕ
	|	Товары.ХозяйственнаяОперация В (&ХозОперацииТоварыВПути)
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;

КонецФункции

// Возвращает таблицу используемых статусов документа учитывая зависимости от функциональных опций и иных параметров.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. ОбщегоНазначенияУТ.ТаблицаСтатусовИзменяемыхИзСписка().
//
Функция СтатусыДокументаИзменяемыеИзСписка() Экспорт
	
	Таблица = ОбщегоНазначенияУТ.ТаблицаСтатусовИзменяемыхИзСписка();
		
	Возврат Таблица;
	
КонецФункции

//Возвращает количество счетов-фактур к оформлению.
//
// Параметры:
//	Параметры - структура со следующими свойствами:
//	* МассивОрганизаций - Массив - массив организаций.
//	* КонецПериода - Дата - ограничение сверху на дату документа приобретения.
//	* БезОграниченияПериода - Булево - не ограничивать по дате документа приобретения 
//
// Возвращаемое значение:
//	Число - количество счетов-фактур к оформлению.
//
Функция ЕстьСчетаФактурыКОформлению(Параметры) Экспорт
		
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НаДату.ДокументПоступления) КАК КоличествоДокументовКОформлению
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюТаможенныхДеклараций.Остатки(&ДатаОкончания, ) КАК НаДату
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОформлениюТаможенныхДеклараций.Остатки(, ) КАК НаСейчас
	|		ПО НаДату.АналитикаУчетаНоменклатуры = НаСейчас.АналитикаУчетаНоменклатуры
	|			И НаДату.Поставщик = НаСейчас.Поставщик
	|			И НаДату.Организация = НаСейчас.Организация
	|			И НаДату.ВидЗапасов = НаСейчас.ВидЗапасов
	|			И НаДату.ДокументПоступления = НаСейчас.ДокументПоступления
	|ГДЕ
	|	НаСейчас.КоличествоОстаток > 0
	|	И &УсловиеОтбора";
	
	Если ЗначениеЗаполнено(Параметры.МассивОрганизаций) Тогда
		УсловиеОтбора = "НаДату.Организация В (&МассивОрганизаций)";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбора", УсловиеОтбора);
		Запрос.УстановитьПараметр("МассивОрганизаций", Параметры.МассивОрганизаций);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И &УсловиеОтбора", "");
	КонецЕсли;
	
	Если Параметры.Свойство("БезОграниченияПериода") Тогда
		Запрос.УстановитьПараметр("ДатаОкончания", ТекущаяДатаСеанса());
	Иначе
		Запрос.УстановитьПараметр("ДатаОкончания", Параметры.КонецПериода);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И НЕ Выборка.КоличествоДокументовКОформлению = NULL Тогда
		Возврат Выборка.КоличествоДокументовКОформлению;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции


#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)
	|	И ( ЗначениеРазрешено(Партнер)
	|	ИЛИ ЗначениеРазрешено(Поставщик)
	|	) ";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СуммаДокумента(Объект) Экспорт
	Возврат Объект.ТаможенныйСбор + Объект.ТаможенныйШтраф + Объект.Разделы.Итог("СуммаПошлины") + Объект.Разделы.Итог("СуммаНДС");
КонецФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;
	
	Возврат ИсточникиДанных; 

КонецФункции

Процедура УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос)
	
	Если Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуУпр")
		И Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуРегл")
		И Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуВзаиморасчетов") Тогда
		Возврат;
	КонецЕсли;
	
	Коэффициенты =
		РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(Запрос.Параметры.Валюта, Запрос.Параметры.ВалютаВзаиморасчетов, Запрос.Параметры.Период);
	
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУпр",            Коэффициенты.КоэффициентПересчетаВВалютуУпр);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл",           Коэффициенты.КоэффициентПересчетаВВалютуРегл);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуВзаиморасчетов", Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.НомерДекларации КАК НомерДекларации,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		ДанныеДокумента.Договор
	|	ИНАЧЕ
	|		ДанныеДокумента.Ссылка
	|	КОНЕЦ КАК ОбъектРасчетов,
	|	ВЫБОР КОГДА ДанныеДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыТаможенныхДеклараций.ВыпущеноСТаможни) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ВыпущеноСТаможни,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(ДанныеДокумента.Подразделение.ВариантОбособленногоУчетаТоваров, ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПустаяСсылка)) КАК ВариантОбособленногоУчетаТоваров,
	|	ДанныеДокумента.ВариантОформления КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Менеджер КАК Менеджер,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ДанныеДокумента.Соглашение КАК Соглашение,
	|	ДанныеДокумента.КонтрагентПоставщика КАК КонтрагентПоставщика,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеДокумента.РучнаяКорректировкаЖурналаСФ КАК РучнаяКорректировкаЖурналаСФ,
	|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|		И ЕСТЬNULL(ДанныеДокумента.Договор.ЗаданГрафикИсполнения, ЛОЖЬ) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ГрафикИсполненияВДоговоре,
	|	НЕОПРЕДЕЛЕНО КАК Сделка,
	|	ДанныеДокумента.Статус                 КАК Статус,
	|	ДанныеДокумента.Комментарий            КАК Комментарий,
	|	ДанныеДокумента.СуммаДокумента         КАК СуммаДокумента,
	|	ДанныеДокумента.ПометкаУдаления        КАК ПометкаУдаления,
	|	ДанныеДокумента.Проведен               КАК Проведен,
	|	ДанныеДокумента.ФормаОплаты            КАК ФормаОплаты,
	|	ДанныеДокумента.ДатаПлатежа            КАК ДатаПлатежа
	|	
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период", Реквизиты.Период);
	Запрос.УстановитьПараметр("Номер", Реквизиты.Номер);
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(Реквизиты));
	Запрос.УстановитьПараметр("ОбъектРасчетов", Реквизиты.ОбъектРасчетов);
	Запрос.УстановитьПараметр("РасчетыПоНакладным", Реквизиты.ОбъектРасчетов = ДокументСсылка);
	Запрос.УстановитьПараметр("ВыпущеноСТаможни", Реквизиты.ВыпущеноСТаможни);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Контрагент", Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("Подразделение", Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("ВариантОбособленногоУчетаТоваров", Реквизиты.ВариантОбособленногоУчетаТоваров);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", Реквизиты.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("Партнер", Реквизиты.Партнер);
	Запрос.УстановитьПараметр("Менеджер", Реквизиты.Менеджер);
	Запрос.УстановитьПараметр("Договор", Реквизиты.Договор);
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета"));
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", Реквизиты.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ГруппаФинансовогоУчета", Реквизиты.ГруппаФинансовогоУчета);
	Запрос.УстановитьПараметр("Валюта", Реквизиты.Валюта);
	Запрос.УстановитьПараметр("Соглашение", Реквизиты.Соглашение);
	Запрос.УстановитьПараметр("КонтрагентПоставщика", Реквизиты.КонтрагентПоставщика);
	Запрос.УстановитьПараметр("ГрафикИсполненияВДоговоре", Реквизиты.ГрафикИсполненияВДоговоре);
	Запрос.УстановитьПараметр("Статус",                         Реквизиты.Статус);
	Запрос.УстановитьПараметр("НаправлениеДеятельности",        Реквизиты.НаправлениеДеятельности);
	Запрос.УстановитьПараметр("ИдентификаторМетаданных",        ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ТаможеннаяДекларацияИмпорт"));
	Запрос.УстановитьПараметр("Комментарий",                    Реквизиты.Комментарий);
	Запрос.УстановитьПараметр("СуммаДокумента",                 Реквизиты.СуммаДокумента);
	Запрос.УстановитьПараметр("ПометкаУдаления",                Реквизиты.ПометкаУдаления);
	Запрос.УстановитьПараметр("Проведен",                       Реквизиты.Проведен);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета",     Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ФормаОплаты",                    Реквизиты.ФормаОплаты);
	Запрос.УстановитьПараметр("ДатаПлатежа",                    Реквизиты.ДатаПлатежа);
	Запрос.УстановитьПараметр("НалогообложениеОрганизации",     Справочники.Организации.НалогообложениеНДС(Реквизиты.Организация, Неопределено, Реквизиты.Период));
	Запрос.УстановитьПараметр("РучнаяКорректировкаЖурналаСФ",   Реквизиты.РучнаяКорректировкаЖурналаСФ);
	
	Запрос.УстановитьПараметр("НомерДекларации", Реквизиты.НомерДекларации);
	ДатаДекларации = Справочники.НомераГТД.ДатаПринятияДекларацииНаТовары(Реквизиты.НомерДекларации);
	Запрос.УстановитьПараметр("ДатаДекларации", ?(ЗначениеЗаполнено(ДатаДекларации), ДатаДекларации, Реквизиты.Период));
	
	ХозОперацииЗакупкаПоИмпорту = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(
		Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
	Запрос.УстановитьПараметр("ХозОперацииЗакупкаПоИмпорту", ХозОперацииЗакупкаПоИмпорту);
	
	Если ЗначениеЗаполнено(Реквизиты.Договор) Тогда
		ИнформацияПоДоговору = НСтр("ru='По договору ""%Договор%""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ИнформацияПоДоговору = СтрЗаменить(ИнформацияПоДоговору, "%Договор%", Реквизиты.Договор);
	КонецЕсли;
	Запрос.УстановитьПараметр("ИнформацияПоДоговору", ИнформацияПоДоговору);
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	УчетПрослеживаемыхТоваровЛокализация.УстановитьПараметрыИспользованияУчетаПрослеживаемыхТоваров(Запрос);
	
КонецПроцедуры

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	// Создание запроса инициализации движений и заполенение его параметров
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка, ДополнительныеСвойства);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса

	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстЗапросаТаблицаРасчетыСПоставщиками(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыКОформлениюТаможенныхДеклараций(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДатыПоступленияТоваровОрганизаций(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПартииРасходовНаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПартииПрочихРасходов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаЗакупки(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвиженияКонтрагентДоходыРасходы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаЖурналУчетаСчетовФактур(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаНДСПредъявленный(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПартииНДСКРаспределению(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры);
	
	ТекстЗапросаТаблицаСуммыДокументовВВалютеРегл(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Запрос)
	
	Если Запрос.Параметры.Свойство("КлючиАналитикиУчетаНоменклатурыИнициализированы") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросАналитик = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ключи.Номенклатура         КАК Номенклатура,
	|	Ключи.Характеристика       КАК Характеристика,
	|	&ПустоеНазначение          КАК Назначение,
	|	Ключи.Серия                КАК Серия,
	|	Ключи.МестоХранения		   КАК Склад,
	|	Ключи.СтатьяКалькуляции    КАК СтатьяКалькуляции
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК Товары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Ключи
	|	ПО Товары.АналитикаУчетаНоменклатуры = Ключи.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО Ключи.Номенклатура                  = Аналитика.Номенклатура
	|		И Ключи.Характеристика             = Аналитика.Характеристика
	|		И Ключи.Серия                      = Аналитика.Серия
	|		И Ключи.МестоХранения			   = Аналитика.МестоХранения
	|		И &ПустоеНазначение                = Аналитика.Назначение
	|		И Ключи.СтатьяКалькуляции          = Аналитика.СтатьяКалькуляции
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Аналитика.Номенклатура ЕСТЬ NULL
	|	И НЕ &УчитыватьСебестоимостьТоваровПоНазначениям
	|	И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыТаможенныхДеклараций.ВыпущеноСТаможни)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ключи.Номенклатура         КАК Номенклатура,
	|	Ключи.Характеристика       КАК Характеристика,
	|	Ключи.Назначение           КАК Назначение,
	|	Ключи.Серия                КАК Серия,
	|	Товары.Склад               КАК Склад,
	|	Ключи.СтатьяКалькуляции    КАК СтатьяКалькуляции
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК Товары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Ключи
	|	ПО Товары.АналитикаУчетаНоменклатуры = Ключи.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаПоСкладам
	|	ПО АналитикаПоСкладам.Номенклатура = Ключи.Номенклатура
	|		И АналитикаПоСкладам.Характеристика = Ключи.Характеристика
	|		И АналитикаПоСкладам.Серия = Ключи.Серия
	|		И АналитикаПоСкладам.Назначение = Ключи.Назначение
	|		И АналитикаПоСкладам.СтатьяКалькуляции = Ключи.СтатьяКалькуляции
	|		И АналитикаПоСкладам.МестоХранения = Товары.Склад
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И АналитикаПоСкладам.Номенклатура ЕСТЬ NULL
	|	И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыТаможенныхДеклараций.ВыпущеноСТаможни)
	|");
	
	ЗапросАналитик.УстановитьПараметр("Ссылка", Запрос.Параметры.Ссылка);
	ЗапросАналитик.УстановитьПараметр("ПустоеНазначение", Справочники.Назначения.ПустаяСсылка());
	ЗапросАналитик.УстановитьПараметр("УчитыватьСебестоимостьТоваровПоНазначениям", Запрос.Параметры.УчитыватьСебестоимостьТоваровПоНазначениям);
	ЗапросАналитик.УстановитьПараметр("Статус", Запрос.Параметры.Статус);
	
	Выборка = ЗапросАналитик.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаНоменклатуры.СоздатьКлючАналитики(Выборка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КлючиАналитикиУчетаНоменклатурыИнициализированы", Истина);
КонецПроцедуры

Функция ТекстЗапросаТаблицаРасчетыСПоставщиками(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РасчетыСПоставщиками";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	//Порядок и состав полей запроса проведения
	ШаблонПолей = "
	|ВЫБРАТЬ
	|	Шаблон.Период                    КАК Период,
	|	Шаблон.ВидДвижения               КАК ВидДвижения,
	|	Шаблон.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Шаблон.ЗаказПоставщику           КАК ЗаказПоставщику,
	|	Шаблон.Валюта                    КАК Валюта,
	|	Шаблон.Сумма                     КАК Сумма,
	|	Шаблон.СуммаРегл                 КАК СуммаРегл,
	|	Шаблон.СуммаУпр                  КАК СуммаУпр,
	|	Шаблон.КОплате                   КАК КОплате,
	|	Шаблон.КПоступлению              КАК КПоступлению,
	
	|	Шаблон.ХозяйственнаяОперация     КАК ХозяйственнаяОперация,
	|	Шаблон.ФормаОплаты               КАК ФормаОплаты,
	|	Шаблон.ДатаРегистратора          КАК ДатаРегистратора,
	|	Шаблон.НомерРегистратора         КАК НомерРегистратора,
	|	Шаблон.ДатаПлатежа               КАК ДатаПлатежа,
	
	|	Шаблон.Организация               КАК Организация,
	|	Шаблон.ВалютаДокумента           КАК ВалютаДокумента,
	|	Шаблон.КорОбъектРасчетов         КАК КорОбъектРасчетов,
	|	Шаблон.КорАналитикаУчетаПоПартнерам КАК КорАналитикаУчетаПоПартнерам
	|ИЗ
	|	#Шаблон КАК Шаблон
	|ГДЕ
	|	&ОтборШаблон";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ // задолженность перед таможней/брокером
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	&ОбъектРасчетов КАК ЗаказПоставщику,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
	|
	|	ДанныеДокумента.СуммаВзаиморасчетов КАК Сумма,
	|	ВЫБОР КОГДА ДанныеДокумента.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета И &Валюта <> &ВалютаРегламентированногоУчета
	|		ТОГДА ДанныеДокумента.СуммаВзаиморасчетов
	|		ИНАЧЕ ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР КОГДА ДанныеДокумента.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|		ТОГДА ДанныеДокумента.СуммаВзаиморасчетов
	|		ИНАЧЕ ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК СуммаУпр,
	|	0 КАК КОплате,
	|	0 КАК КПоступлению,
	|
	|	ДанныеДокумента.ВариантОформления КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплаты,
	|	ДанныеДокумента.Дата КАК ДатаРегистратора,
	|	ДанныеДокумента.Номер КАК НомерРегистратора,
	|	ДанныеДокумента.ДатаПлатежа КАК ДатаПлатежа,
	|	&Организация КАК Организация,
	|	&Валюта КАК ВалютаДокумента,
	|	Неопределено  КАК КорОбъектРасчетов,
	|	Неопределено КАК КорАналитикаУчетаПоПартнерам
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ВыпущеноСТаможни
	|	И ДанныеДокумента.СуммаВзаиморасчетов <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ // к оплате таможне/брокеру
	|	КОНЕЦПЕРИОДА(ДанныеДокумента.ДатаПлатежа, День) КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	&ОбъектРасчетов КАК ЗаказПоставщику,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
	|
	|	0 КАК Сумма,
	|	0 КАК СуммаРегл,
	|	0 КАК СуммаУпр,
	|	ДанныеДокумента.СуммаВзаиморасчетов КАК КОплате,
	|	0 КАК КПоступлению,
	|
	|	ДанныеДокумента.ВариантОформления КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплаты,
	|	ДанныеДокумента.Дата КАК ДатаРегистратора,
	|	ДанныеДокумента.Номер КАК НомерРегистратора,
	|	ДанныеДокумента.ДатаПлатежа КАК ДатаПлатежа,
	|	&Организация КАК Организация,
	|	&Валюта КАК ВалютаДокумента,
	|	Неопределено  КАК КорОбъектРасчетов,
	|	Неопределено КАК КорАналитикаУчетаПоПартнерам
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка И ДанныеДокумента.СуммаВзаиморасчетов <> 0
	|	И НЕ &ГрафикИсполненияВДоговоре
	|
	|//ЗачетАвансовПоставщикуПоНакладной
	|
	|";
	
	ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"//ЗачетАвансовПоставщикуПоНакладной",
		ВзаиморасчетыСервер.ТекстПроведенияЗачетАвансовПоставщикуПоНакладной("ТаможеннаяДекларацияИмпорт", ШаблонПолей));
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтИсходныеПрочиеРасходы";
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.СтатьяРасходовСбор КАК СтатьяРасходов,
	|	ДанныеДокумента.АналитикаРасходовСбор КАК АналитикаРасходов,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК ВидДеятельностиНДС,
	|
	|	ДанныеДокумента.ТаможенныйСбор * &КоэффициентПересчетаВВалютуУпр КАК СуммаСНДС,
	|	ДанныеДокумента.ТаможенныйСбор * &КоэффициентПересчетаВВалютуУпр КАК СуммаБезНДС,
	|	ДанныеДокумента.ТаможенныйСбор * &КоэффициентПересчетаВВалютуУпр КАК СуммаБезНДСУпр,
	|	ДанныеДокумента.ТаможенныйСбор * &КоэффициентПересчетаВВалютуРегл КАК СуммаСНДСРегл,
	|	ДанныеДокумента.ТаможенныйСбор * &КоэффициентПересчетаВВалютуРегл КАК СуммаБезНДСРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	ДанныеДокумента.ВариантОформления КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаНоменклатуры,
	|	ДанныеДокумента.ИдентификаторСтрокиСбор КАК ИдентификаторСтроки
	|
	|ПОМЕСТИТЬ ВтИсходныеПрочиеРасходы
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ВыпущеноСТаможни
	|	И ДанныеДокумента.ТаможенныйСбор <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.СтатьяРасходовШтраф КАК СтатьяРасходов,
	|	ДанныеДокумента.АналитикаРасходовШтраф КАК АналитикаРасходов,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК ВидДеятельностиНДС,
	|
	|	ДанныеДокумента.ТаможенныйШтраф * &КоэффициентПересчетаВВалютуУпр КАК СуммаСНДС,
	|	ДанныеДокумента.ТаможенныйШтраф * &КоэффициентПересчетаВВалютуУпр КАК СуммаБезНДС,
	|	ДанныеДокумента.ТаможенныйШтраф * &КоэффициентПересчетаВВалютуУпр КАК СуммаБезНДСУпр,
	|	ДанныеДокумента.ТаможенныйШтраф * &КоэффициентПересчетаВВалютуРегл КАК СуммаСНДСРегл,
	|	ДанныеДокумента.ТаможенныйШтраф * &КоэффициентПересчетаВВалютуРегл КАК СуммаБезНДСРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	ДанныеДокумента.ВариантОформления КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаНоменклатуры,
	|	ДанныеДокумента.ИдентификаторСтрокиШтраф КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ВыпущеноСТаможни
	|	И ДанныеДокумента.ТаможенныйШтраф <> 0
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтПрочиеРасходы";
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтИсходныеПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаВтПрочиеРасходы("ИдентификаторСтроки");
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеРасходы";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаПрочиеРасходы("ИдентификаторСтроки");
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса)
	
	// Создадим временную таблицу "ВтТаблицаАналитикУчетаПартий"
	
	ТекстВыборкаПоляАналитик =
	"ВЫБРАТЬ
	|	""Товары"" 												КАК ИмяТабличнойЧасти,
	|	ТаблицаДокумента.НомерСтроки 							КАК НомерСтроки,
	|	ДанныеДокумента.Партнер									КАК Поставщик,
	|	ДанныеДокумента.Контрагент								КАК Контрагент,
	|	ТаблицаРазделыДокумента.СтавкаНДС 						КАК СтавкаНДС,
	|	ТаблицаДокумента.ЗакупкаПодДеятельность					КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныеПлатежи)	КАК ВидЦенности,
	|	0														КАК КодСтроки
	|ПОМЕСТИТЬ ВТПоляАналитикУчетаПартий
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТаможеннаяДекларацияИмпорт.Разделы КАК ТаблицаРазделыДокумента
	|		ПО ТаблицаРазделыДокумента.Ссылка 		= ТаблицаДокумента.Ссылка
	|		 И ТаблицаРазделыДокумента.НомерРаздела = ТаблицаДокумента.НомерРаздела
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Документ"" 												КАК ИмяТабличнойЧасти,
	|	0 															КАК НомерСтроки,
	|	ДанныеДокумента.Партнер										КАК Поставщик,
	|	ДанныеДокумента.Контрагент									КАК Контрагент,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)						КАК СтавкаНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)	КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныеПлатежи)		КАК ВидЦенности,
	|	0															КАК КодСтроки
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	ТекстЗапроса = Справочники.КлючиАналитикиУчетаПартий.ТекстЗапросаВтТаблицаАналитикУчетаПартий(ТекстВыборкаПоляАналитик, Запрос, ТекстыЗапроса);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	ИмяРегистра = "СебестоимостьТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВТТоварыКОформлениюТаможенныхДеклараций", ТекстыЗапроса) Тогда
		ТекстЗапросаВТТоварыКОформлениюТаможенныхДеклараций(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаАналитикУчетаПартий", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Запрос);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
	|		ТОГДА ТоварыДокумента.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ АналитикаБезНазначения.КлючАналитики
	|	КОНЕЦ КАК АналитикаУчетаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТоварыДокумента.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.СобственныйТоварВПути)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.СобственныеТоварыВПути)
	|		КОГДА ТоварыДокумента.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.СобственныйТоварПоНеотфактурованнойПоставке)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НеотфактурованныеПоставки)
	|		КОГДА ТоварыДокумента.Склад.ЦеховаяКладовая
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|	КОНЕЦ КАК РазделУчета,
	|	ТоварыДокумента.ВидЗапасов КАК ВидЗапасов,
	|	ДанныеДокумента.Организация КАК Организация,
	|
	//	партионный учет версии 2.2
	|	НЕОПРЕДЕЛЕНО															КАК Партия,
	|	НЕОПРЕДЕЛЕНО															КАК АналитикаУчетаПартий,
	|	ВЫБОР
	|		КОГДА &ПартионныйУчетВерсии22 ТОГДА
	|			ВЫБОР
	|				КОГДА &ФормироватьВидыЗапасовПоСделкам И ЕСТЬNULL(ТоварыДокумента.ДокументПоступления.Сделка.ОбособленныйУчетТоваровПоСделке, ЛОЖЬ)
	|					ТОГДА ТоварыДокумента.ДокументПоступления.Сделка
	|				КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|				 И ЕСТЬNULL(ТоварыДокумента.ДокументПоступления.Подразделение.ВариантОбособленногоУчетаТоваров, НЕОПРЕДЕЛЕНО)
	|						= ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|					ТОГДА ТоварыДокумента.ДокументПоступления.Менеджер
	|				КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|				 И ЕСТЬNULL(ТоварыДокумента.ДокументПоступления.Подразделение.ВариантОбособленногоУчетаТоваров, НЕОПРЕДЕЛЕНО)
	|						= ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|					ТОГДА ТоварыДокумента.ДокументПоступления.Подразделение
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ 																	КАК АналитикаФинансовогоУчета,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22
	|		ТОГДА ЕСТЬNULL(ТаблицаАналитикУчетаПартий.НалогообложениеНДС, ТоварыДокумента.ЗакупкаПодДеятельность)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ 																	КАК ВидДеятельностиНДС,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22
	|		ТОГДА ЕСТЬNULL(ТаблицаАналитикУчетаПартий.НалогообложениеНДС, ТоварыДокумента.ЗакупкаПодДеятельность)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ 																	КАК КорВидДеятельностиНДС,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22
	|		ТОГДА ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ 																	КАК КорАналитикаУчетаПартий,
	|	СУММА(ЕСТЬNULL(Суммы.СуммаНДСРегл, ВЫБОР 
	|			КОГДА ЕСТЬNULL(ТаблицаАналитикУчетаПартий.НалогообложениеНДС, ТоварыДокумента.ЗакупкаПодДеятельность)
	|					= ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|				ТОГДА 0 
	|			ИНАЧЕ &КоэффициентПересчетаВВалютуРегл * ТоварыДокумента.СуммаНДС
	|		КОНЕЦ))                                                              КАК НДСРегл,
	|
	|	0 КАК Количество,
	|	0 КАК Стоимость,
	|	СУММА(ЕСТЬNULL(Суммы.СуммаБезНДСУпр + Суммы.СуммаНДСУпр, &КоэффициентПересчетаВВалютуУпр * (ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СуммаНДС))) КАК ДопРасходы,
	|	0 КАК СтоимостьБезНДС,
	|	СУММА(ЕСТЬNULL(Суммы.СуммаБезНДСУпр, &КоэффициентПересчетаВВалютуУпр * ТоварыДокумента.СуммаПошлины)) КАК ДопРасходыБезНДС,
	|
	|	СУММА(ВЫБОР
	|			КОГДА &УправленческийУчетОрганизаций
	|				И ЕСТЬNULL(ТаблицаАналитикУчетаПартий.НалогообложениеНДС, ТоварыДокумента.ЗакупкаПодДеятельность) В (
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|				ТОГДА ЕСТЬNULL(Суммы.СуммаБезНДСУпр + Суммы.СуммаНДСУпр, &КоэффициентПересчетаВВалютуУпр * (ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СуммаНДС))
	|			КОГДА &УправленческийУчетОрганизаций
	|				ТОГДА ЕСТЬNULL(Суммы.СуммаБезНДСУпр, &КоэффициентПересчетаВВалютуУпр * ТоварыДокумента.СуммаПошлины)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ДопРасходыУпр,
	|	СУММА(ЕСТЬNULL(Суммы.СуммаНДСУпр, ВЫБОР 
	|			КОГДА ЕСТЬNULL(ТаблицаАналитикУчетаПартий.НалогообложениеНДС, ТоварыДокумента.ЗакупкаПодДеятельность)
	|					= ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|				ТОГДА 0 
	|			ИНАЧЕ &КоэффициентПересчетаВВалютуУпр * ТоварыДокумента.СуммаНДС
	|		КОНЕЦ)) КАК НДСУпр,
	|
	|	СУММА(
	|		ВЫБОР КОГДА &ПартионныйУчетВерсии22 ТОГДА 0
	|		КОГДА ТаблицаАналитикУчетаПартий.НалогообложениеНДС В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|		ТОГДА
	|			ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл, &КоэффициентПересчетаВВалютуРегл * (ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СуммаНДС))
	|		ИНАЧЕ
	|			ЕСТЬNULL(Суммы.СуммаБезНДСРегл, &КоэффициентПересчетаВВалютуРегл * ТоварыДокумента.СуммаПошлины)
	|		КОНЕЦ) КАК СтоимостьРегл,
	|	СУММА(
	|		ВЫБОР КОГДА НЕ &ПартионныйУчетВерсии22 ТОГДА 0
	|		КОГДА ЕСТЬNULL(ТаблицаАналитикУчетаПартий.НалогообложениеНДС, ТоварыДокумента.ЗакупкаПодДеятельность) В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|		ТОГДА
	|			ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл, &КоэффициентПересчетаВВалютуРегл * (ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СуммаНДС))
	|		ИНАЧЕ
	|			ЕСТЬNULL(Суммы.СуммаБезНДСРегл, &КоэффициентПересчетаВВалютуРегл * ТоварыДокумента.СуммаПошлины)
	|		КОНЕЦ) КАК ДопРасходыРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|
	|	(ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТТоварыКОформлениюТаможенныхДеклараций.ДокументПоступленияЗаполнен, ЛОЖЬ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ДополнительныеРасходыСПартией)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ДополнительныеРасходыБезПартии) КОНЕЦ) КАК ХозяйственнаяОперация,
	|	(ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТТоварыКОформлениюТаможенныхДеклараций.ДокументПоступленияЗаполнен, ЛОЖЬ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ДопРасходыСПартией)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ДопРасходыБезПартии) КОНЕЦ) КАК ТипЗаписи,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ТоварыДокумента.ДокументПоступления КАК ДокументИсточник
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТоварыДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|	ПО
	|		ТоварыДокумента.Ссылка = ДанныеДокумента.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВТТоварыКОформлениюТаможенныхДеклараций КАК ВТТоварыКОформлениюТаможенныхДеклараций
	|	ПО
	|		ВТТоварыКОформлениюТаможенныхДеклараций.ДокументПоступления = ТоварыДокумента.ДокументПоступления
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.НомерСтроки 	    = ТоварыДокумента.НомерСтроки
	|	 И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""Товары""
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Ключи
	|	ПО Ключи.Ссылка = ТоварыДокумента.АналитикаУчетаНоменклатуры
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|	ПО АналитикаБезНазначения.Номенклатура = Ключи.Номенклатура
	|		И АналитикаБезНазначения.Характеристика = Ключи.Характеристика
	|		И АналитикаБезНазначения.Серия = Ключи.Серия
	|		И АналитикаБезНазначения.МестоХранения = Ключи.МестоХранения
	|		И АналитикаБезНазначения.СтатьяКалькуляции = Ключи.СтатьяКалькуляции
	|		И АналитикаБезНазначения.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
	|	ПО
	|		ТоварыДокумента.Ссылка = Суммы.Регистратор
	|		И ТоварыДокумента.ИдентификаторСтроки = Суммы.ИдентификаторСтроки
	|		И Суммы.СуммаБезНДСРегл <> 0
	|		И Суммы.СуммаБезНДСУпр <> 0
	|		И ТоварыДокумента.СуммаПошлины = Суммы.СуммаБезНДС
	|		И ТоварыДокумента.СуммаНДС = Суммы.СуммаНДС
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ВыпущеноСТаможни
	|	И (ТоварыДокумента.СуммаПошлины <> 0
	|		ИЛИ ТоварыДокумента.СуммаНДС<>0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
	|		ТОГДА ТоварыДокумента.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ АналитикаБезНазначения.КлючАналитики
	|	КОНЕЦ,
	|	ТоварыДокумента.ВидЗапасов,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.Подразделение,
	|	ТоварыДокумента.ДокументПоступления,
	|	ВЫБОР
	|		КОГДА &ПартионныйУчетВерсии22 ТОГДА
	|			ВЫБОР
	|				КОГДА &ФормироватьВидыЗапасовПоСделкам И ЕСТЬNULL(ТоварыДокумента.ДокументПоступления.Сделка.ОбособленныйУчетТоваровПоСделке, ЛОЖЬ)
	|					ТОГДА ТоварыДокумента.ДокументПоступления.Сделка
	|				КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|				 И ЕСТЬNULL(ТоварыДокумента.ДокументПоступления.Подразделение.ВариантОбособленногоУчетаТоваров, НЕОПРЕДЕЛЕНО)
	|						= ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|					ТОГДА ТоварыДокумента.ДокументПоступления.Менеджер
	|				КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|				 И ЕСТЬNULL(ТоварыДокумента.ДокументПоступления.Подразделение.ВариантОбособленногоУчетаТоваров, НЕОПРЕДЕЛЕНО)
	|						= ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|					ТОГДА ТоварыДокумента.ДокументПоступления.Подразделение
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22
	|		ТОГДА ЕСТЬNULL(ТаблицаАналитикУчетаПартий.НалогообложениеНДС, ТоварыДокумента.ЗакупкаПодДеятельность)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22
	|		ТОГДА ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТоварыДокумента.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.СобственныйТоварВПути)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.СобственныеТоварыВПути)
	|		КОГДА ТоварыДокумента.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.СобственныйТоварПоНеотфактурованнойПоставке)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НеотфактурованныеПоставки)
	|		КОГДА ТоварыДокумента.Склад.ЦеховаяКладовая
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|	КОНЕЦ,
	|	ТоварыДокумента.ВидЗапасов,
	|	(ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТТоварыКОформлениюТаможенныхДеклараций.ДокументПоступленияЗаполнен, ЛОЖЬ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ДополнительныеРасходыСПартией)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ДополнительныеРасходыБезПартии) КОНЕЦ),
	|	(ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТТоварыКОформлениюТаможенныхДеклараций.ДокументПоступленияЗаполнен, ЛОЖЬ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ДопРасходыСПартией)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ДопРасходыБезПартии) КОНЕЦ)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыОрганизаций";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТоварыДокумента.Номенклатура КАК Номенклатура,
	|	ТоварыДокумента.Характеристика КАК Характеристика,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ТоварыДокумента.ВидЗапасов КАК ВидЗапасов,
	|	ТоварыДокумента.НомерГТД КАК НомерГТД,
	|	ТоварыДокумента.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА НЕ &ИспользоватьУчетПрослеживаемыхИмпортныхТоваров
	|				ИЛИ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) < &ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров
	|			ТОГДА 0
	|		ИНАЧЕ ТоварыДокумента.КоличествоПоРНПТ
	|	КОНЕЦ КАК КоличествоПоРНПТ,
	|	ДанныеДокумента.ВариантОформления КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТоварыДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|	ПО
	|		ТоварыДокумента.Ссылка = ДанныеДокумента.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ВыпущеноСТаможни
	|	И ТоварыДокумента.ХозяйственнаяОперация <>
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТоварыДокумента.Номенклатура КАК Номенклатура,
	|	ТоварыДокумента.Характеристика КАК Характеристика,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ТоварыДокумента.ВидЗапасов КАК ВидЗапасов,
	|	ТоварыДокумента.НомерГТД КАК НомерГТД,
	|	ТоварыДокумента.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА НЕ &ИспользоватьУчетПрослеживаемыхИмпортныхТоваров
	|				ИЛИ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) < &ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров
	|			ТОГДА 0
	|		ИНАЧЕ ТоварыДокумента.КоличествоПоРНПТ
	|	КОНЕЦ КАК КоличествоПоРНПТ,
	|	ДанныеДокумента.ВариантОформления КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТоварыДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|	ПО
	|		ТоварыДокумента.Ссылка = ДанныеДокумента.Ссылка
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ВыпущеноСТаможни
	|	И ТоварыДокумента.ХозяйственнаяОперация = 
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДатыПоступленияТоваровОрганизаций(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДатыПоступленияТоваровОрганизаций";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Период КАК ДатаПоступления,
	|	Строки.Номенклатура   КАК Номенклатура,
	|	Строки.Характеристика КАК Характеристика,
	|	Строки.Серия          КАК Серия,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	Строки.ВидЗапасов     КАК ВидЗапасов,
	|	Строки.НомерГТД       КАК НомерГТД
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК Строки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ДатыПоступленияТоваровОрганизаций КАК Даты
	|	ПО
	|		Строки.ВидЗапасов = Даты.ВидЗапасов 
	|		И Строки.Номенклатура = Даты.Номенклатура
	|		И Строки.Характеристика = Даты.Характеристика 
	|		И Строки.Серия = Даты.Серия
	|		И ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) = Даты.Назначение
	|		И Строки.НомерГТД = Даты.НомерГТД 
	|ГДЕ
	|	Строки.Ссылка = &Ссылка И &ВыпущеноСТаможни
	|	И (Даты.ДатаПоступления ЕСТЬ NULL ИЛИ Даты.ДатаПоступления < &Период)
	|	И Строки.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка),
	|		&ХозОперацииЗакупкаПоИмпорту)
	|
	|СГРУППИРОВАТЬ ПО
	|	Строки.Номенклатура,
	|	Строки.Характеристика,
	|	Строки.Серия,
	|	Строки.ВидЗапасов,
	|	Строки.НомерГТД
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТТоварыКОформлениюТаможенныхДеклараций(Запрос, ТекстыЗапроса)
	
	ИмяВременнойТаблицы = "ВТТоварыКОформлениюТаможенныхДеклараций";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ТоварыКОформлениюТаможенныхДеклараций.ДокументПоступления <> ЗНАЧЕНИЕ(Документ.ПриобретениеТоваровУслуг.ПустаяСсылка)
	|			И НЕ ТоварыКОформлениюТаможенныхДеклараций.ДокументПоступления ЕСТЬ NULL
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДокументПоступленияЗаполнен,
	|	ВТПоступления.ДокументПоступления КАК ДокументПоступления
	|ПОМЕСТИТЬ ВТТоварыКОформлениюТаможенныхДеклараций
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДанныеДокумента.ДокументПоступления КАК ДокументПоступления
	|	ИЗ
	|		Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ДанныеДокумента
	|	ГДЕ
	|		ДанныеДокумента.Ссылка = &Ссылка
	|	) КАК ВТПоступления
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОформлениюТаможенныхДеклараций КАК ТоварыКОформлениюТаможенныхДеклараций
	|		ПО ВТПоступления.ДокументПоступления = ТоварыКОформлениюТаможенныхДеклараций.Регистратор
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяВременнойТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыКОформлениюТаможенныхДеклараций(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыКОформлениюТаможенныхДеклараций";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВТТоварыКОформлениюТаможенныхДеклараций", ТекстыЗапроса) Тогда
		ТекстЗапросаВТТоварыКОформлениюТаможенныхДеклараций(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА ТоварыДокумента.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту)) ТОГДА
	|			ТоварыДокумента.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ
	|			ЕСТЬNULL(АналитикаУчетаНоменклатурыПоПартнерам.КлючАналитики, ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка))
	|	КОНЕЦ КАК АналитикаУчетаНоменклатуры,
	|	ДанныеДокумента.Поставщик КАК Поставщик,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ТоварыДокумента.ВидЗапасов КАК ВидЗапасов,
	|	ВЫБОР 
	|		КОГДА 
	|			ЕСТЬNULL(ВтТоварыКОформлению.ДокументПоступленияЗаполнен,ЛОЖЬ) ТОГДА
	|				ТоварыДокумента.ДокументПоступления
	|		ИНАЧЕ
	|			НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументПоступления,
	|
	|	ТоварыДокумента.Количество КАК Количество,
	|	ВЫБОР 
	|		КОГДА 
	|			ЕСТЬNULL(ВтТоварыКОформлению.ДокументПоступленияЗаполнен,ЛОЖЬ) ТОГДА
	|				ТоварыДокумента.ТаможеннаяСтоимость
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК Сумма,
	|
	|	ТоварыДокумента.НомерГТД КАК НомерГТД
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТоварыДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|	ПО ТоварыДокумента.Ссылка = ДанныеДокумента.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТТоварыКОформлениюТаможенныхДеклараций КАК ВтТоварыКОформлению
	|	ПО ВтТоварыКОформлению.ДокументПоступления = ТоварыДокумента.ДокументПоступления
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ДанныеПоступления
	|	ПО ТоварыДокумента.ДокументПоступления = ДанныеПоступления.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатурыПоПартнерам
	|		ПО ТоварыДокумента.Номенклатура = АналитикаУчетаНоменклатурыПоПартнерам.Номенклатура
	|		И ТоварыДокумента.Характеристика = АналитикаУчетаНоменклатурыПоПартнерам.Характеристика
	|		И ТоварыДокумента.Назначение = АналитикаУчетаНоменклатурыПоПартнерам.Назначение
	|		И ТоварыДокумента.Серия = АналитикаУчетаНоменклатурыПоПартнерам.Серия
	|		И ДанныеПоступления.Договор = АналитикаУчетаНоменклатурыПоПартнерам.МестоХранения
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ТоварыДокумента.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка),
	|		&ХозОперацииЗакупкаПоИмпорту)
	|	И &ВыпущеноСТаможни
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЖурналУчетаСчетовФактур(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЖурналУчетаСчетовФактур";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЖурналУчетаСчетовФактур.Период КАК Период,
	|	ЖурналУчетаСчетовФактур.Организация КАК Организация,
	|	ЖурналУчетаСчетовФактур.Контрагент КАК Контрагент,
	|	ЖурналУчетаСчетовФактур.СчетФактура КАК СчетФактура,
	|	ЖурналУчетаСчетовФактур.ЧастьЖурнала КАК ЧастьЖурнала,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактуры КАК НомерСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.КодВидаОперации КАК КодВидаОперации,
	|	ЖурналУчетаСчетовФактур.КодВидаСделки КАК КодВидаСделки,
	|	ЖурналУчетаСчетовФактур.КодСпособаВыставленияПолучения КАК КодСпособаВыставленияПолучения,
	|	ЖурналУчетаСчетовФактур.Валюта КАК Валюта,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре КАК СуммаПоСчетуФактуре,
	|	ЖурналУчетаСчетовФактур.СуммаНДС КАК СуммаНДС,
	|	ЖурналУчетаСчетовФактур.ИндексСтроки КАК ИндексСтроки,
	|	ЖурналУчетаСчетовФактур.Сторно КАК Сторно,
	|	ЖурналУчетаСчетовФактур.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ЖурналУчетаСчетовФактур.СчетФактураВыданныйПокупателю КАК СчетФактураВыданныйПокупателю,
	|	ЖурналУчетаСчетовФактур.СчетФактураПолученныйОтПродавца КАК СчетФактураПолученныйОтПродавца,
	|	ЖурналУчетаСчетовФактур.ИсправлениеСобственнойОшибки КАК ИсправлениеСобственнойОшибки,
	|	ЖурналУчетаСчетовФактур.ДатаВыставленияПолучения КАК ДатаВыставленияПолучения,
	|	ЖурналУчетаСчетовФактур.НомерИсправления КАК НомерИсправления,
	|	ЖурналУчетаСчетовФактур.ДатаИсправления КАК ДатаИсправления,
	|	ЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры КАК НомерКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры КАК ДатаКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры КАК НомерИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры КАК ДатаИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшение КАК СуммаПоСчетуФактуреРазницаУменьшение,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличение КАК СуммаПоСчетуФактуреРазницаУвеличение,
	|	ЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшение КАК СуммаНДСРазницаУменьшение,
	|	ЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличение КАК СуммаНДСРазницаУвеличение,
	|	ЖурналУчетаСчетовФактур.ПоСтавкеБезНДС КАК ПоСтавкеБезНДС,
	|	ЖурналУчетаСчетовФактур.СчетФактураНеВыставляется КАК СчетФактураНеВыставляется,
	|	ЖурналУчетаСчетовФактур.Продавец КАК Продавец,
	|	ЖурналУчетаСчетовФактур.КППКонтрагента КАК КППКонтрагента,
	|	ЖурналУчетаСчетовФактур.Посредник КАК Посредник,
	|	ЖурналУчетаСчетовФактур.УдалитьСчетФактураВыданныйПокупателю КАК УдалитьСчетФактураВыданныйПокупателю,
	|	ЖурналУчетаСчетовФактур.Субкомиссионер КАК Субкомиссионер,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактурыПродавца КАК НомерСчетаФактурыПродавца,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреКомиссия КАК СуммаПоСчетуФактуреКомиссия,
	|	ЖурналУчетаСчетовФактур.СуммаНДСКомиссия КАК СуммаНДСКомиссия,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшениеКомиссия КАК СуммаПоСчетуФактуреРазницаУменьшениеКомиссия,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличениеКомиссия КАК СуммаПоСчетуФактуреРазницаУвеличениеКомиссия,
	|	ЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшениеКомиссия КАК СуммаНДСРазницаУменьшениеКомиссия,
	|	ЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличениеКомиссия КАК СуммаНДСРазницаУвеличениеКомиссия,
	|	ЖурналУчетаСчетовФактур.КодВидаОперацииКомиссия КАК КодВидаОперацииКомиссия,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактурыПродавца КАК ДатаСчетаФактурыПродавца,
	|	ЖурналУчетаСчетовФактур.ИННКонтрагента КАК ИННКонтрагента,
	|	ЖурналУчетаСчетовФактур.ИННПродавца КАК ИННПродавца,
	|	ЖурналУчетаСчетовФактур.КПППродавца КАК КПППродавца,
	|	ЖурналУчетаСчетовФактур.ИННСубкомиссионера КАК ИННСубкомиссионера,
	|	ЖурналУчетаСчетовФактур.КППСубкомиссионера КАК КППСубкомиссионера
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|ГДЕ
	|	ЖурналУчетаСчетовФактур.Регистратор = &Ссылка
	|	И &РучнаяКорректировкаЖурналаСФ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период                         КАК Период,
	|	&Организация                    КАК Организация,
	|	ВЫБОР
	|		КОГДА &КонтрагентПоставщика = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА &Контрагент
	|		ИНАЧЕ &КонтрагентПоставщика
	|	КОНЕЦ                           КАК Контрагент,
	|	&Ссылка                         КАК СчетФактура,
	|	ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры) КАК ЧастьЖурнала,
	|	&НомерДекларации                КАК НомерСчетаФактуры,
	|	&ДатаДекларации                 КАК ДатаСчетаФактуры,
	|	20                              КАК КодВидаОперации,
	|	2                               КАК КодВидаСделки,
	|	1                               КАК КодСпособаПолучения,
	|	&Валюта                         КАК Валюта,
	|	СУММА(ВЫРАЗИТЬ(ДанныеДокумента.СуммаПоСчетуФактуре* &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2))) КАК СуммаПоСчетуФактуре,
	|	СУММА(ВЫРАЗИТЬ(ДанныеДокумента.СуммаНДС * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)))           КАК СуммаНДС,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	// таможенная стоимость (т.к. нет фактурной) и пошлины
	|	(ВЫБРАТЬ
	|		СУММА(Разделы.ТаможеннаяСтоимость + Разделы.СуммаПошлины) КАК СуммаПоСчетуФактуре,
	|		СУММА(Разделы.СуммаНДС)                                   КАК СуммаНДС
	|	ИЗ
	|		Документ.ТаможеннаяДекларацияИмпорт.Разделы КАК Разделы
	|	ГДЕ
	|		Разделы.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// НДС, включенный в стоимость
	|	ВЫБРАТЬ
	|		СУММА(ТаможеннаяДекларацияИмпортТовары.СуммаНДС),
	|		0
	|	ИЗ
	|		Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТаможеннаяДекларацияИмпортТовары
	|	ГДЕ
	|		ТаможеннаяДекларацияИмпортТовары.Ссылка = &Ссылка
	|		И ТаможеннаяДекларацияИмпортТовары.ЗакупкаПодДеятельность В(
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Таможенный сбор и штрафы, если они включаются в стоимость импортированных ценностей.
	|	ВЫБРАТЬ
	|		ВЫБОР
	|				КОГДА ТаможеннаяДекларацияИмпорт.СтатьяРасходовСбор.ВариантРаспределенияРасходовРегл В (
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров))
	|					ТОГДА ТаможеннаяДекларацияИмпорт.ТаможенныйСбор
	|				ИНАЧЕ 0
	|			КОНЕЦ + ВЫБОР
	|				КОГДА ТаможеннаяДекларацияИмпорт.СтатьяРасходовШтраф.ВариантРаспределенияРасходовРегл В (
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров))
	|					ТОГДА ТаможеннаяДекларацияИмпорт.ТаможенныйШтраф
	|				ИНАЧЕ 0
	|			КОНЕЦ ,
	|		0
	|	ИЗ
	|		Документ.ТаможеннаяДекларацияИмпорт КАК ТаможеннаяДекларацияИмпорт
	|	ГДЕ
	|		ТаможеннаяДекларацияИмпорт.Ссылка = &Ссылка) КАК ДанныеДокумента
	|ГДЕ
	|	НЕ &РучнаяКорректировкаЖурналаСФ
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПартииРасходовНаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПартииРасходовНаСебестоимостьТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаАналитикУчетаПартий", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 			КАК ВидДвижения,
	|	ДанныеДокумента.Организация 					КАК Организация,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|	&Ссылка											КАК ДокументПоступления,
	|	ТоварыДокумента.ВидЗапасов 						КАК ВидЗапасов,
	|	ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|	&Ссылка 										КАК ДокументПоступленияРасходов,
	|	НЕОПРЕДЕЛЕНО 									КАК СтатьяРасходов,
	|
	|	СУММА(ТоварыДокумента.Количество)				КАК Количество,
	|	СУММА(&КоэффициентПересчетаВВалютуУпр 
	|			* (ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СуммаНДС)) КАК Стоимость,
	|	СУММА(&КоэффициентПересчетаВВалютуУпр
	|			* ТоварыДокумента.СуммаПошлины) 						КАК СтоимостьБезНДС,
	|	СУММА(ТоварыДокумента.СуммаПошлины) 							КАК СтоимостьРегл,
	|	СУММА(
	|		ВЫБОР 
	|			КОГДА ТаблицаАналитикУчетаПартий.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|				ТОГДА 0 
	|				ИНАЧЕ ТоварыДокумента.СуммаНДС
	|		КОНЕЦ) 														КАК НДСРегл,
	|	&Подразделение													КАК ПодразделениеРасходов,
	|	0																КАК ПостояннаяРазница,
	|	0																КАК ВременнаяРазница
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТоварыДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|	ПО 
	|		ТоварыДокумента.Ссылка = ДанныеДокумента.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.НомерСтроки 	    = ТоварыДокумента.НомерСтроки
	|	 И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""Товары""
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ВыпущеноСТаможни
	|	И &ПартионныйУчетВерсии21
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Организация,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры,
	|	ТоварыДокумента.ВидЗапасов,
	|	ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПартииПрочихРасходов(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтИсходныеПартииПрочихРасходов";
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаАналитикУчетаПартий", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =  "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	&Ссылка КАК ДокументПоступленияРасходов,
	|	ДанныеДокумента.СтатьяРасходовСбор КАК СтатьяРасходов,
	|	ДанныеДокумента.АналитикаРасходовСбор КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаАктивовПассивов,
	|	ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаНоменклатуры,
	|	&НалогообложениеОрганизации КАК ВидДеятельностиНДС,
	|
	|	ДанныеДокумента.ТаможенныйСбор * &КоэффициентПересчетаВВалютуУпр КАК Стоимость,
	|	ДанныеДокумента.ТаможенныйСбор * &КоэффициентПересчетаВВалютуУпр КАК СтоимостьБезНДС,
	|	0 КАК НДСУпр,
	|	ДанныеДокумента.ТаможенныйСбор * &КоэффициентПересчетаВВалютуРегл КАК СтоимостьРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	0 КАК НДСРегл,
	|	ДанныеДокумента.ВариантОформления КАК ХозяйственнаяОперация
	|
	|ПОМЕСТИТЬ ВтИсходныеПартииПрочихРасходов
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|		ПО ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""Документ""
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка 
	|	И &ВыпущеноСТаможни 
	|	И ДанныеДокумента.ТаможенныйСбор <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	&Ссылка КАК ДокументПоступленияРасходов,
	|	ДанныеДокумента.СтатьяРасходовШтраф КАК СтатьяРасходов,
	|	ДанныеДокумента.АналитикаРасходовШтраф КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаАктивовПассивов,
	|	ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаНоменклатуры,
	|	&НалогообложениеОрганизации КАК ВидДеятельностиНДС,
	|
	|	ДанныеДокумента.ТаможенныйШтраф * &КоэффициентПересчетаВВалютуУпр КАК Стоимость,
	|	ДанныеДокумента.ТаможенныйШтраф * &КоэффициентПересчетаВВалютуУпр КАК СтоимостьБезНДС,
	|	0 КАК НДСУпр,
	|	ДанныеДокумента.ТаможенныйШтраф * &КоэффициентПересчетаВВалютуРегл КАК СтоимостьРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	0 КАК НДСРегл,
	|	ДанныеДокумента.ВариантОформления КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|		ПО ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""Документ""
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка 
	|	И &ВыпущеноСТаможни 
	|	И ДанныеДокумента.ТаможенныйШтраф <> 0
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаВтПартииПрочихРасходов(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтПартииПрочихРасходов";
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтИсходныеПартииПрочихРасходов", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПартииПрочихРасходов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПартииПрочихРасходов.ТекстЗапросаТаблицаВтПартииПрочихРасходов();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПартииПрочихРасходов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПартииПрочихРасходов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтПартииПрочихРасходов", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПартииПрочихРасходов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПартииПрочихРасходов.ТекстЗапросаТаблицаПартииПрочихРасходов();

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПартииНДСКРаспределению(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПартииНДСКРаспределению";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаАналитикУчетаПартий", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаРасходов,
	|	ДанныеДокумента.Контрагент КАК Поставщик,
	|	&Ссылка КАК ДокументПоступленияРасходов,
	|	ТаблицаАналитикУчетаПартий.НалогообложениеНДС КАК ВидДеятельностиНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныеПлатежи) КАК ВидЦенности,
	|	ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий.СтавкаНДС КАК СтавкаНДС,
	|
	|	ТоварыДокумента.СуммаПошлины КАК СтоимостьРегл,
	|	ТоварыДокумента.СуммаНДС     КАК НДСРегл,
	|	ВЫБОР
	|		КОГДА &УправленческийУчетОрганизаций
	|			ТОГДА &КоэффициентПересчетаВВалютуУпр * ТоварыДокумента.СуммаНДС
	|		ИНАЧЕ 0 КОНЕЦ            КАК НДСУпр
	|
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТоварыДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|	ПО 
	|		ТоварыДокумента.Ссылка = ДанныеДокумента.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.НомерСтроки 	    = ТоварыДокумента.НомерСтроки
	|	 И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""Товары""
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка 
	|	И &ВыпущеноСТаможни 
	|	И ТоварыДокумента.СуммаНДС <> 0
	|	И ТаблицаАналитикУчетаПартий.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаЗакупки(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "Закупки";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ТекстЗапроса =
	"// Отражение пошлины.
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|	&Менеджер КАК Менеджер,
	|
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТоварыДокумента.Склад КАК Склад,
	|	ТоварыДокумента.ВидЗапасов.ТипЗапасов КАК ТипЗапасов,
	|   ТоварыДокумента.ВидЗапасов КАК ВидЗапасов,
	|	ЕСТЬNULL(ТоварыДокумента.АналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) КАК НаправлениеДеятельностиНоменклатуры,
	|	
	|	&Партнер КАК Партнер,
	|	&Контрагент КАК Контрагент,
	|	&Соглашение КАК Соглашение,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|	&Договор КАК Договор,
	|	НЕОПРЕДЕЛЕНО КАК Заказ,
	|
	|	0 КАК Количество,
	|
	|	ВЫРАЗИТЬ((ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СуммаНДС)
	|			* &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК Сумма,
	|	ВЫРАЗИТЬ(ТоварыДокумента.СуммаПошлины
	|			* &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаБезНДС,
	|	ВЫРАЗИТЬ((ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СуммаНДС)
	|			* &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) КАК СуммаРегл,
	|	ВЫРАЗИТЬ(ТоварыДокумента.СуммаПошлины
	|			* &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) КАК СуммаРеглБезНДС,
	|	0 КАК СуммаСкидки,
	|
	|	0 КАК Стоимость,
	|	0 КАК СтоимостьБезНДС,
	|	ВЫБОР
	|		КОГДА ТоварыДокумента.ЗакупкаПодДеятельность В (
	|			  ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|			  ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|			ТОГДА 
	|				ВЫРАЗИТЬ((ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СуммаНДС)
	|						  * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) 
	|		ИНАЧЕ
	|			ВЫРАЗИТЬ(ТоварыДокумента.СуммаПошлины * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК СтоимостьРегл,
	|	ВЫРАЗИТЬ((ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СуммаНДС)
	|			* &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК ДопРасходы,
	|	ВЫРАЗИТЬ(ТоварыДокумента.СуммаПошлины
	|			* &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК ДопРасходыБезНДС,
	|
	|	&Валюта КАК Валюта,
	|	ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СуммаНДС КАК СуммаВВалютеДокумента,
	|	ТоварыДокумента.СуммаПошлины КАК СуммаБезНДСВВалютеДокумента,
	|	
	|	&ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ВЫРАЗИТЬ((ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СуммаНДС)
	|			* &КоэффициентПересчетаВВалютуВзаиморасчетов КАК ЧИСЛО(31,2)) КАК СуммаВВалютеВзаиморасчетов,
	|	ВЫРАЗИТЬ(ТоварыДокумента.СуммаПошлины
	|			* &КоэффициентПересчетаВВалютуВзаиморасчетов КАК ЧИСЛО(31,2)) КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета
	|			ТОГДА ТоварыДокумента.ВидЗапасов
	|		ИНАЧЕ ТоварыДокумента.Номенклатура
	|	КОНЕЦ КАК ИсточникГФУНоменклатуры,
	|	&ОбъектРасчетов КАК ИсточникГФУРасчетов
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТоварыДокумента
	|ГДЕ
	|	ТоварыДокумента.Ссылка = &Ссылка
	|	И &ВыпущеноСТаможни
	|	И (ТоварыДокумента.СуммаПошлины <> 0
	|		ИЛИ ТоварыДокумента.СуммаНДС<>0)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияКонтрагентДоходыРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияКонтрагентДоходыРасходы";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);

#Область РасходыНаТаможенныеСборы
	РасходыНаТаможенныеСборы = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РасходыНаТаможенныеСборыШтрафы) КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|	
	|	&Партнер КАК Партнер,
	|	&Контрагент КАК Контрагент,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|	&Договор КАК Договор,
	|	НЕОПРЕДЕЛЕНО КАК ОбъектРасчетов,
	|	
	|	ДанныеДокумента.СтатьяРасходовСбор КАК СтатьяДоходовРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаДоходов,
	|	ДанныеДокумента.АналитикаРасходовСбор КАК АналитикаРасходов,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельностиСтатьи,
	|	
	|	ВЫРАЗИТЬ(ДанныеДокумента.ТаможенныйСбор * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК Сумма,
	|	0 КАК СуммаБезНДС,
	|	ВЫРАЗИТЬ(ДанныеДокумента.ТаможенныйСбор * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) КАК СуммаРегл,
	|	0 КАК СуммаРеглБезНДС,
	|	
	|	&Валюта КАК Валюта,
	|	ДанныеДокумента.ТаможенныйСбор КАК СуммаВВалюте,
	|	0 КАК СуммаБезНДСВВалюте,
	|	
	|	&ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ВЫРАЗИТЬ(ДанныеДокумента.ТаможенныйСбор * &КоэффициентПересчетаВВалютуВзаиморасчетов КАК ЧИСЛО(31,2)) КАК СуммаВВалютеВзаиморасчетов,
	|	0 КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	
	|	&ОбъектРасчетов КАК ИсточникГФУРасчетов
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ВыпущеноСТаможни
	|	И ДанныеДокумента.ТаможенныйСбор <> 0
	|"; 
#КонецОбласти

#Область РасходыНаТаможенныеШтрафы
	РасходыНаТаможенныеШтрафы = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РасходыНаТаможенныеСборыШтрафы) КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|	
	|	&Партнер КАК Партнер,
	|	&Контрагент КАК Контрагент,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|	&Договор КАК Договор,
	|	НЕОПРЕДЕЛЕНО КАК ОбъектРасчетов,
	|	
	|	ДанныеДокумента.СтатьяРасходовШтраф КАК СтатьяДоходовРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаДоходов,
	|	ДанныеДокумента.АналитикаРасходовШтраф КАК АналитикаРасходов,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельностиСтатьи,
	|	
	|	ВЫРАЗИТЬ(ДанныеДокумента.ТаможенныйШтраф * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК Сумма,
	|	0 КАК СуммаБезНДС,
	|	ВЫРАЗИТЬ(ДанныеДокумента.ТаможенныйШтраф * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) КАК СуммаРегл,
	|	0 КАК СуммаРеглБезНДС,
	|	
	|	&Валюта КАК Валюта,
	|	ДанныеДокумента.ТаможенныйШтраф КАК СуммаВВалюте,
	|	0 КАК СуммаБезНДСВВалюте,
	|	
	|	&ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ВЫРАЗИТЬ(ДанныеДокумента.ТаможенныйШтраф * &КоэффициентПересчетаВВалютуВзаиморасчетов КАК ЧИСЛО(31,2)) КАК СуммаВВалютеВзаиморасчетов,
	|	0 КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	
	|	&ОбъектРасчетов КАК ИсточникГФУРасчетов
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ВыпущеноСТаможни
	|	И ДанныеДокумента.ТаможенныйШтраф <> 0
	|"; 
#КонецОбласти

	ТекстЗапроса = РасходыНаТаможенныеСборы
		+ " ОБЪЕДИНИТЬ ВСЕ " + РасходыНаТаможенныеШтрафы;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;


КонецФункции

Функция ТекстЗапросаТаблицаНДСПредъявленный(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "НДСПредъявленный";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаАналитикУчетаПартий", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	УчетНДСУПСлужебный.УстановитьПараметрТипыНалогообложенияНДСПоступления(Запрос);
	Запрос.УстановитьПараметр("ДатаНачалаУчетаНДСПоНаправлениямДеятельности", УчетНДСУП.НастройкиУчета().ДатаНачалаУчетаНДСПоНаправлениямДеятельности);
	
	ТекстЗапроса = "
	|
	|ВЫБРАТЬ
	|	&Ссылка                                                КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                 КАК ВидДвижения,
	|	&Период                                                КАК Период,
	|	Операция.Организация                                   КАК Организация,
	|	&Ссылка                                                КАК СчетФактура,
	|	Операция.Контрагент                                    КАК Поставщик,
	|	ТаблицаАналитикУчетаПартий.ВидЦенности                 КАК ВидЦенности,
	|	РазделыДокумента.СтавкаНДС                             КАК СтавкаНДС,
	|	ТаблицаАналитикУчетаПартий.НалогообложениеНДС          КАК ВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО                                           КАК ИсправленныйСчетФактура,
	|	НЕОПРЕДЕЛЕНО                                           КАК РеализацияЭкспорт,
	|	ВЫБОР КОГДА &Период >= &ДатаНачалаУчетаНДСПоНаправлениямДеятельности ТОГДА
	|		ТоварыДокумента.АналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                                  КАК НаправлениеДеятельности,
	|	СУММА(ТоварыДокумента.СуммаПошлины)                    КАК СуммаБезНДС,
	|	СУММА(ТоварыДокумента.СуммаНДС)                        КАК НДС,
	|	СУММА(ВЫБОР 
	|			КОГДА &УправленческийУчетОрганизаций
	|				ТОГДА ТоварыДокумента.СуммаНДС * &КоэффициентПересчетаВВалютуУпр
	|		ИНАЧЕ 0
	|	КОНЕЦ)                                                 КАК НДСУпр,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.НДСПринятКВычету) КАК Событие,
	|	ЛОЖЬ                                                            КАК РегламентнаяОперация
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК Операция
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ТаможеннаяДекларацияИмпорт.Разделы КАК РазделыДокумента
	|	ПО
	|		РазделыДокумента.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТоварыДокумента
	|	ПО
	|		РазделыДокумента.Ссылка = ТоварыДокумента.Ссылка
	|		И РазделыДокумента.НомерРаздела = ТоварыДокумента.НомерРаздела
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.НомерСтроки 	    = ТоварыДокумента.НомерСтроки
	|	 И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""Товары""
	|	
	|ГДЕ
	|	Операция.Ссылка = &Ссылка
	|	И Операция.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	И Операция.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыТаможенныхДеклараций.ВыпущеноСТаможни)
	|	И ТаблицаАналитикУчетаПартий.НалогообложениеНДС В (&ТипыНалогообложенияНДСПоступления)
	|
	|СГРУППИРОВАТЬ ПО
	|	Операция.Организация,
	|	Операция.Контрагент,
	|	РазделыДокумента.СтавкаНДС,
	|	ТаблицаАналитикУчетаПартий.ВидЦенности,
	|	ТаблицаАналитикУчетаПартий.НалогообложениеНДС,
	|	ВЫБОР КОГДА &Период >= &ДатаНачалаУчетаНДСПоНаправлениямДеятельности ТОГДА
	|		ТоварыДокумента.АналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтОснований", ТекстыЗапроса) Тогда
		ТекстЗапросаВтОснований(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                  КАК Ссылка,
	|	&Период                                 КАК ДатаДокументаИБ,
	|	&Номер                                  КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&Организация                            КАК Организация,
	|	ДанныеДокумента.ХозяйственнаяОперация   КАК ХозяйственнаяОперация,
	|	&Партнер                                КАК Партнер,
	|	&Контрагент                             КАК Контрагент,
	|	&Договор                                КАК Договор,
	|	&НаправлениеДеятельности                КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КоличествоМестХранения = 1
	|			ТОГДА ДанныеДокумента.МестоХранения
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                   КАК МестоХранения,
	|	&Подразделение                          КАК Подразделение,
	|	&Менеджер                               КАК Ответственный,
	|	&Комментарий                            КАК Комментарий,
	|	&Валюта                                 КАК Валюта,
	|	&СуммаДокумента                         КАК Сумма,
	|	&Статус                                 КАК Статус,
	|	&Проведен                               КАК Проведен,
	|	&ПометкаУдаления                        КАК ПометкаУдаления,
	|	ДанныеДокумента.ДополнительнаяЗапись    КАК ДополнительнаяЗапись,
	|	&ИнформацияПоДоговору                   КАК Дополнительно,
	|	&Период                                 КАК ДатаПервичногоДокумента,
	|	&НомерДекларации                        КАК НомерПервичногоДокумента,
	|	&Период   КАК ДатаОтраженияВУчете
	|ИЗ
	|	ВтОснований КАК ДанныеДокумента";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтОснований(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтОснований";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ТоварыДокумента.ХозяйственнаяОперация,
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту)) КАК ХозяйственнаяОперация,
	|	МАКСИМУМ(
	|		ЕСТЬNULL(ТоварыДокумента.ДокументПоступления.Склад,
	|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))) КАК МестоХранения,
	|	КОЛИЧЕСТВО(
	|		РАЗЛИЧНЫЕ ЕСТЬNULL(ТоварыДокумента.ДокументПоступления.Склад,
	|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))) КАК КоличествоМестХранения,
	|	(ТоварыДокумента.ХозяйственнаяОперация <> ТаблицаОсновныхОпераций.ОсновнаяОперация) КАК ДополнительнаяЗапись
	|ПОМЕСТИТЬ ВтОснований
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТоварыДокумента
	|		ПО ДанныеДокумента.Ссылка = ТоварыДокумента.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(ДанныеДокумента.ХозяйственнаяОперация) КАК ОсновнаяОперация
	|			ИЗ
	|				Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ДанныеДокумента
	|			ГДЕ
	|				ДанныеДокумента.Ссылка = &Ссылка) КАК ТаблицаОсновныхОпераций
	|		ПО ИСТИНА
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ЕСТЬNULL(ТоварыДокумента.ХозяйственнаяОперация,
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту)),
	|	(ТоварыДокумента.ХозяйственнаяОперация <> ТаблицаОсновныхОпераций.ОсновнаяОперация)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеАктивыПассивы";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтПартииПрочихРасходов", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПартииПрочихРасходов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеАктивыПассивы.ТекстЗапросаТаблицаПрочиеАктивыПассивы();
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции


Функция ТекстЗапросаТаблицаСуммыДокументовВВалютеРегл(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СуммыДокументовВВалютеРегл";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Валюта КАК Валюта,
	|	&ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
	|	ТаблицаТовары.СуммаПошлины КАК СуммаБезНДС,
	|	ЕСТЬNULL(ТаблицаРазделы.СтавкаНДС, ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка)) КАК СтавкаНДС,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|
	|	ЕСТЬNULL(Суммы.СуммаБезНДСУпр,
	|		ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета И &Валюта <> &ВалютаВзаиморасчетов
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаТовары.СуммаПошлины * &КоэффициентПересчетаВВалютуВзаиморасчетов КАК ЧИСЛО(31,2))
	|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаТовары.СуммаПошлины * &КоэффициентПересчетаВВалютуУПР КАК ЧИСЛО(31,2))
	|	КОНЕЦ) КАК СуммаБезНДСУпр,
	|
	|	ЕСТЬNULL(Суммы.СуммаНДСУпр,
	|		ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета И &Валюта <> &ВалютаВзаиморасчетов
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаТовары.СуммаНДС * &КоэффициентПересчетаВВалютуВзаиморасчетов КАК ЧИСЛО(31,2))
	|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаТовары.СуммаНДС * &КоэффициентПересчетаВВалютуУПР КАК ЧИСЛО(31,2))
	|	КОНЕЦ) КАК СуммаНДСУпр,
	|
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл,
	|		ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета И &Валюта <> &ВалютаВзаиморасчетов
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаТовары.СуммаПошлины * &КоэффициентПересчетаВВалютуВзаиморасчетов КАК ЧИСЛО(31,2))
	|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаТовары.СуммаПошлины * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) 
	|		КОНЕЦ 
	|	) КАК СуммаБезНДСРегл,
	|
	|	ЕСТЬNULL(Суммы.СуммаНДСРегл, 
	|		ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета И &Валюта <> &ВалютаВзаиморасчетов
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаТовары.СуммаНДС * &КоэффициентПересчетаВВалютуВзаиморасчетов КАК ЧИСЛО(31,2))
	|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаТовары.СуммаНДС * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2))
	|		КОНЕЦ
	|	) КАК СуммаНДСРегл,
	|
	|	ЕСТЬNULL(Суммы.БазаНДСРегл,
	|		ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета И &Валюта <> &ВалютаВзаиморасчетов
	|			ТОГДА ВЫРАЗИТЬ((ТаблицаТовары.ТаможеннаяСтоимость - ТаблицаТовары.СуммаНДС) * &КоэффициентПересчетаВВалютуВзаиморасчетов КАК ЧИСЛО(31,2))
	|			ИНАЧЕ ВЫРАЗИТЬ((ТаблицаТовары.ТаможеннаяСтоимость - ТаблицаТовары.СуммаНДС) * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) 
	|		КОНЕЦ 
	|	) КАК БазаНДСРегл,
	|
	|	ЕСТЬNULL(Суммы.БазаНДСУпр, 
	|		ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета И &Валюта <> &ВалютаВзаиморасчетов
	|			ТОГДА ВЫРАЗИТЬ((ТаблицаТовары.ТаможеннаяСтоимость - ТаблицаТовары.СуммаНДС) * &КоэффициентПересчетаВВалютуВзаиморасчетов КАК ЧИСЛО(31,2))
	|			ИНАЧЕ ВЫРАЗИТЬ((ТаблицаТовары.ТаможеннаяСтоимость - ТаблицаТовары.СуммаНДС) * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) 
	|		КОНЕЦ 
	|	) КАК БазаНДСУпр,
	|
	|	ВЫРАЗИТЬ((ТаблицаТовары.СуммаПошлины + ТаблицаТовары.СуммаНДС) * &КоэффициентПересчетаВВалютуВзаиморасчетов КАК ЧИСЛО(31,2)) КАК СуммаВзаиморасчетов,
	|	ВЫРАЗИТЬ(ТаблицаТовары.СуммаНДС * &КоэффициентПересчетаВВалютуВзаиморасчетов КАК ЧИСЛО(31,2)) КАК СуммаНДСВзаиморасчетов
	|
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТаблицаТовары
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		Документ.ТаможеннаяДекларацияИмпорт.Разделы КАК ТаблицаРазделы
	|	ПО
	|		ТаблицаРазделы.Ссылка = ТаблицаТовары.Ссылка
	|		И ТаблицаРазделы.НомерРаздела = ТаблицаТовары.НомерРаздела
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
	|	ПО
	|		ТаблицаТовары.Ссылка = Суммы.Регистратор
	|		И ТаблицаТовары.ИдентификаторСтроки = Суммы.ИдентификаторСтроки
	|		И Суммы.СуммаБезНДСРегл <> 0
	|		И Суммы.СуммаБезНДСУпр <> 0
	|		И ТаблицаТовары.СуммаПошлины = Суммы.СуммаБезНДС
	|		И ТаблицаТовары.СуммаНДС = Суммы.СуммаНДС
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &ВыпущеноСТаможни
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Валюта КАК Валюта,
	|	&ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.ИдентификаторСтрокиСбор КАК ИдентификаторСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
	|	ДанныеДокумента.ТаможенныйСбор КАК СуммаБезНДС,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС,
	|	0 КАК СуммаНДС,
	|
	|	ЕСТЬNULL(Суммы.СуммаБезНДСУпр,
	|		ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета И &Валюта <> &ВалютаВзаиморасчетов
	|			ТОГДА ВЫРАЗИТЬ(ДанныеДокумента.ТаможенныйСбор * &КоэффициентПересчетаВВалютуВзаиморасчетов КАК ЧИСЛО(31,2))
	|			ИНАЧЕ ВЫРАЗИТЬ(ДанныеДокумента.ТаможенныйСбор * &КоэффициентПересчетаВВалютуУПР КАК ЧИСЛО(31,2))
	|	КОНЕЦ) КАК СуммаБезНДСУпр,
	|
	|	0 КАК СуммаНДСУпр,
	|
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл,
	|		ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета И &Валюта <> &ВалютаВзаиморасчетов
	|			ТОГДА ВЫРАЗИТЬ(ДанныеДокумента.ТаможенныйСбор * &КоэффициентПересчетаВВалютуВзаиморасчетов КАК ЧИСЛО(31,2))
	|			ИНАЧЕ ВЫРАЗИТЬ(ДанныеДокумента.ТаможенныйСбор * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) 
	|		КОНЕЦ 
	|	) КАК СуммаБезНДСРегл,
	|
	|	0 КАК СуммаНДСРегл,
	|
	|	0 КАК БазаНДСРегл,
	|
	|	0 КАК БазаНДСУпр,
	|
	|	ВЫРАЗИТЬ(ДанныеДокумента.ТаможенныйСбор * &КоэффициентПересчетаВВалютуВзаиморасчетов КАК ЧИСЛО(31,2)) КАК СуммаВзаиморасчетов,
	|	0 КАК СуммаНДСВзаиморасчетов
	|
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
	|	ПО
	|		ДанныеДокумента.Ссылка = Суммы.Регистратор
	|		И ДанныеДокумента.ИдентификаторСтрокиСбор = Суммы.ИдентификаторСтроки
	|		И Суммы.СуммаБезНДСРегл <> 0
	|		И Суммы.СуммаБезНДСУпр <> 0
	|		И ДанныеДокумента.ТаможенныйСбор = Суммы.СуммаБезНДС
	|       И Суммы.СуммаНДС = 0
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ВыпущеноСТаможни
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Валюта КАК Валюта,
	|	&ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.ИдентификаторСтрокиШтраф КАК ИдентификаторСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
	|	ДанныеДокумента.ТаможенныйШтраф КАК СуммаБезНДС,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС,
	|	0 КАК СуммаНДС,
	|
	|	ЕСТЬNULL(Суммы.СуммаБезНДСУпр,
	|		ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета И &Валюта <> &ВалютаВзаиморасчетов
	|			ТОГДА ВЫРАЗИТЬ(ДанныеДокумента.ТаможенныйШтраф * &КоэффициентПересчетаВВалютуВзаиморасчетов КАК ЧИСЛО(31,2))
	|			ИНАЧЕ ВЫРАЗИТЬ(ДанныеДокумента.ТаможенныйШтраф * &КоэффициентПересчетаВВалютуУПР КАК ЧИСЛО(31,2))
	|	КОНЕЦ) КАК СуммаБезНДСУпр,
	|
	|	0 КАК СуммаНДСУпр,
	|
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл,
	|		ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета И &Валюта <> &ВалютаВзаиморасчетов
	|			ТОГДА ВЫРАЗИТЬ(ДанныеДокумента.ТаможенныйШтраф * &КоэффициентПересчетаВВалютуВзаиморасчетов КАК ЧИСЛО(31,2))
	|			ИНАЧЕ ВЫРАЗИТЬ(ДанныеДокумента.ТаможенныйШтраф * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) 
	|		КОНЕЦ 
	|	) КАК СуммаБезНДСРегл,
	|
	|	0 КАК СуммаНДСРегл,
	|
	|	0 КАК БазаНДСРегл,
	|
	|	0 КАК БазаНДСУпр,
	|
	|	ВЫРАЗИТЬ(ДанныеДокумента.ТаможенныйШтраф * &КоэффициентПересчетаВВалютуВзаиморасчетов КАК ЧИСЛО(31,2)) КАК СуммаВзаиморасчетов,
	|	0 КАК СуммаНДСВзаиморасчетов
	|
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
	|	ПО
	|		ДанныеДокумента.Ссылка = Суммы.Регистратор
	|		И ДанныеДокумента.ИдентификаторСтрокиШтраф = Суммы.ИдентификаторСтроки
	|		И Суммы.СуммаБезНДСРегл <> 0
	|		И Суммы.СуммаБезНДСУпр <> 0
	|		И ДанныеДокумента.ТаможенныйШтраф = Суммы.СуммаБезНДС
	|       И Суммы.СуммаНДС = 0
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ВыпущеноСТаможни
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента           = "Документ.ТаможеннаяДекларацияИмпорт";
	СинонимТаблицыДокумента      = "";
	ВЗапросеЕстьИсточник         = Истина;
	ТекстыЗапросаВременныхТаблиц = Новый Соответствие();
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерДекларации",      """""");
	ПереопределениеРасчетаПараметров.Вставить("ИнформацияПоДоговору", """""");
	ПереопределениеРасчетаПараметров.Вставить("ВыпущеноСТаможни",
		"	ВЫБОР КОГДА ДанныеДокумента.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыТаможенныхДеклараций.ВыпущеноСТаможни) ТОГДА
		|		ИСТИНА
		|	ИНАЧЕ
		|		ЛОЖЬ
		|	КОНЕЦ");
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяДокумента));
	ЗначенияПараметров.Вставить("ХозОперацииЗакупкаПоИмпорту",
		ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту));
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		ТекстыЗапросаВременныхТаблиц.Вставить("ВтОснований", ТекстЗапросаВтОснований(Запрос, ТекстыЗапроса));
		СинонимТаблицыДокумента = "ДанныеДокумента";
		
	ИначеЕсли ИмяРегистра = "ТоварыОрганизаций" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ДанныеДокумента";
		
	ИначеЕсли ИмяРегистра = "ТоварыКОформлениюТаможенныхДеклараций" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаТоварыКОформлениюТаможенныхДеклараций(Запрос, ТекстыЗапроса, ИмяРегистра);
		ТекстыЗапросаВременныхТаблиц.Вставить("ВТТоварыКОформлениюТаможенныхДеклараций",
			ТекстЗапросаВТТоварыКОформлениюТаможенныхДеклараций(Запрос, ТекстыЗапроса));
		СинонимТаблицыДокумента = "ДанныеДокумента";
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ВЗапросеЕстьИсточник,
			ПереопределениеРасчетаПараметров,
			ТекстыЗапросаВременныхТаблиц);
		
	Иначе
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ПереопределениеРасчетаПараметров,
			ТекстыЗапросаВременныхТаблиц);
		
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьПоУмолчанию(Объект) Экспорт
	Объект.Менеджер = Пользователи.ТекущийПользователь();
	Объект.Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Объект.Менеджер, Объект.Подразделение);
	
	Объект.Валюта = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(Объект.Валюта);
	Объект.ВалютаВзаиморасчетов = Объект.Валюта;
	
	Объект.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Объект.Организация);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    		= Объект.Организация;
	СтруктураПараметров.БанковскийСчет		= Объект.БанковскийСчетОрганизации;
	Объект.БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(Объект);
	
	ВалютаОплаты  = ДенежныеСредстваСервер.ПолучитьВалютуОплаты(Объект.ФормаОплаты, Объект.БанковскийСчетОрганизации);
	Объект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию(Объект.ВалютаВзаиморасчетов,,ВалютаОплаты);
	
КонецПроцедуры

Процедура ЗаполнитьПоУсловиямЗакупок(Объект, УсловияЗакупок) Экспорт
	ЗаполнитьЗначенияСвойств(Объект, УсловияЗакупок, "ФормаОплаты, ГруппаФинансовогоУчета, НаправлениеДеятельности, ПорядокОплаты");
	Если Не ЗначениеЗаполнено(Объект.ВариантОформления) Тогда
		Объект.ВариантОформления = Перечисления.ХозяйственныеОперации.ОформлениеГТДБрокером;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда
		Объект.Партнер = УсловияЗакупок.Партнер;
	КонецЕсли;
	Если ЗначениеЗаполнено(УсловияЗакупок.Организация) И УсловияЗакупок.Организация<>Объект.Организация Тогда
		Объект.Организация = УсловияЗакупок.Организация;
	КонецЕсли;
	Если ЗначениеЗаполнено(УсловияЗакупок.Контрагент) И УсловияЗакупок.Контрагент<>Объект.Контрагент Тогда
		Объект.Контрагент = УсловияЗакупок.Контрагент;
	КонецЕсли;
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
	
	Если УсловияЗакупок.ИспользуютсяДоговорыКонтрагентов <> Неопределено И УсловияЗакупок.ИспользуютсяДоговорыКонтрагентов Тогда
		
		ДопПараметры = ЗакупкиСервер.ДополнительныеПараметрыОтбораДоговоров();
		ДопПараметры.ВалютаВзаиморасчетов = Объект.ВалютаВзаиморасчетов;
		Объект.Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(
			Объект, ОперацииОтбораСоглашенийДоговоров(), ДопПараметры);
		ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчетОрганизации, Объект.БанковскийСчетКонтрагента);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности") Тогда
			НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗначениеДатыПлатежа = ЗакупкиСервер.ПолучитьПоследнююДатуПоГрафику(Объект.Дата, УсловияЗакупок.Соглашение);
	Если ЗначениеЗаполнено(ЗначениеДатыПлатежа) Тогда
		Объект.ДатаПлатежа = ЗначениеДатыПлатежа;
	КонецЕсли;
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    			= Объект.Организация;
	СтруктураПараметров.БанковскийСчет			= Объект.БанковскийСчетОрганизации;
	СтруктураПараметров.НаправлениеДеятельности	= Объект.НаправлениеДеятельности;
	Объект.БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	Объект.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент, , Объект.БанковскийСчетКонтрагента);
КонецПроцедуры

Процедура ЗаполнитьПоПартнеру(Объект, Партнер) Экспорт
	УсловияЗакупок = Неопределено;
	
	Если Не ЗначениеЗаполнено(Объект.Партнер) Или (Объект.Партнер <> Партнер) Тогда
		Объект.Партнер = Партнер;
	КонецЕсли;
	Если (Объект.ВариантОформления <> Перечисления.ХозяйственныеОперации.ОформлениеГТДСамостоятельно) Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ТолькоДляЗакупки",      Ложь);
		ПараметрыОтбора.Вставить("ХозяйственныеОперации", ОперацииОтбораСоглашенийДоговоров());
		ПараметрыОтбора.Вставить("ВыбранноеСоглашение",   Объект.Соглашение);
		
		УсловияЗакупок =
			ЗакупкиСервер.ПолучитьУсловияЗакупокПоУмолчанию(
				Объект.Партнер,
				ПараметрыОтбора);
	КонецЕсли;
	Если ЗначениеЗаполнено(УсловияЗакупок) Тогда
		Если Объект.Соглашение <> УсловияЗакупок.Соглашение
			И ЗначениеЗаполнено(УсловияЗакупок.Соглашение) Тогда
			
			Объект.Соглашение = УсловияЗакупок.Соглашение;
			ЗаполнитьПоУсловиямЗакупок(Объект, УсловияЗакупок);
		Иначе
			Объект.Соглашение = УсловияЗакупок.Соглашение;
		КонецЕсли;
	Иначе
		Контрагент = Объект.Контрагент;
		ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
		БанковскийСчет = ?(Контрагент = Объект.Контрагент, Объект.БанковскийСчетКонтрагента, Неопределено);
		Объект.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент, , БанковскийСчет);
		Объект.Соглашение = Неопределено;
	КонецЕсли;
КонецПроцедуры

Функция СтруктураЗаполнения() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	Результат.Вставить("Поставщик", Справочники.Партнеры.ПустаяСсылка());
	Результат.Вставить("КонтрагентПоставщика", Справочники.Контрагенты.ПустаяСсылка());
	Результат.Вставить("ДатаПоступления", Неопределено);
	Результат.Вставить("ВалютаПоступления", Справочники.Валюты.ПустаяСсылка());
	Результат.Вставить("ЦенаВключаетНДС", Ложь);
	Результат.Вставить("Товары", Неопределено);
	Результат.Вставить("НаправлениеДеятельности", Справочники.НаправленияДеятельности.ПустаяСсылка());
	
	Возврат Результат;
КонецФункции

Процедура ЗаполнитьПоДанным(Объект, Данные) Экспорт
	ЗаполнитьЗначенияСвойств(Объект, Данные);
	ЗаполнитьПоУмолчанию(Объект);
	Если Данные.Товары<>Неопределено Тогда
		Если Ложь <> Данные.ЦенаВключаетНДС Тогда
			Для Каждого Товар Из Данные.Товары Цикл // в поле Сумма получим сумму без НДС
				Ценообразование.ПересчитатьСуммыВСтрокеПоСуммеСНДС(Товар, Ложь, Ложь, Ложь);
			КонецЦикла;
		КонецЕсли;
		Если Объект.Валюта <> Данные.ВалютаПоступления И ЗначениеЗаполнено(Данные.ВалютаПоступления) Тогда
			ДатаДокумента = ?(ЗначениеЗаполнено(Объект.Дата),Объект.Дата,ТекущаяДатаСеанса());
			КурсыСтарые = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Данные.ВалютаПоступления, ДатаДокумента);
			КурсыНовые  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.Валюта, ДатаДокумента);
			Ценообразование.ПересчитатьСуммыТабличнойЧастиВВалюту(
				Данные.Товары, Ложь, Данные.ВалютаПоступления, Объект.Валюта, КурсыСтарые, КурсыНовые);
		КонецЕсли;
		Раздел = Объект.Разделы.Добавить();
		Раздел.НомерРаздела = 1;
		Для каждого ЭлементБуфера Из Данные.Товары Цикл
			Товар = Объект.Товары.Добавить();
			Товар.НомерРаздела = Раздел.НомерРаздела;
			ЗаполнитьЗначенияСвойств(Товар, ЭлементБуфера,
				"Номенклатура, Характеристика, Серия, Склад, Назначение, ВидЗапасов, Упаковка, Количество, КоличествоУпаковок, ДокументПоступления, ЗакупкаПодДеятельность");
			Товар.ХозяйственнаяОперация = ЭлементБуфера.ХозяйственнаяОперация;
			Товар.ТаможеннаяСтоимость = ЭлементБуфера.Сумма;
			// сумму НДС не заполняем!!!
			Раздел.ТаможеннаяСтоимость = Раздел.ТаможеннаяСтоимость + Товар.ТаможеннаяСтоимость;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Возвращает массив операций, соглашения и договоры по которым доступны к использованию.
Функция ОперацииОтбораСоглашенийДоговоров() Экспорт
	Операции = Новый Массив;
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	Возврат Операции;
КонецФункции

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект
// см. ОбщегоНазначения.ЗначениеРеквизитаОбъекта()
// Если полученное значение не имеет тип булево, возвращается значение Ложь.
//
Функция ЗначениеРеквизитаОбъектаТипаБулево(Ссылка, ИмяРеквизита) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	Если ТипЗнч(Результат) <> Тип("Булево") Тогда
		Результат = Ложь;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);	
	Возврат Результат
КонецФункции

#КонецОбласти

#Область ФормированиеГиперссылкиВЖурналеЗакупок 

Функция СформироватьГиперссылкуКОформлению(Параметры) Экспорт
	
	ЕстьПравоНаЧтениеПоступленийТоваровУслуг = ПравоДоступа("Чтение", Метаданные.Документы.ПриобретениеТоваровУслуг);
	Если Не (ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКОформлениюТаможенныхДеклараций)
		И ЕстьПравоНаЧтениеПоступленийТоваровУслуг) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры.Вставить("МассивОрганизаций",?(ЗначениеЗаполнено(Параметры.Организация), 
											ОбщегоНазначенияУТКлиентСервер.Массив(Параметры.Организация),
											Неопределено));
	Параметры.Вставить("БезОграниченияПериода");
	
	ТекстГиперссылки = НСтр("ru = 'ТД импорт'");
	
	Если ЕстьСчетаФактурыКОформлению(Параметры) Тогда
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,,,
			ИмяФормыРабочееМестоТаможеннаяДекларацияИмпорт());
	Иначе
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,ЦветаСтиля.НезаполненноеПолеТаблицы,,
			ИмяФормыРабочееМестоТаможеннаяДекларацияИмпорт());
	КонецЕсли;
	
КонецФункции

#КонецОбласти

Функция ИмяФормыРабочееМестоТаможеннаяДекларацияИмпорт() Экспорт
	
	Возврат "Документ.ТаможеннаяДекларацияИмпорт.Форма.РабочееМесто";
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Документы.ТаможеннаяДекларацияИмпорт.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.4.12.22";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5c2f5939-170b-4789-8df4-8ccfc9469333");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ТаможеннаяДекларацияИмпорт.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет служебные реквизиты документа ""Таможенная декларация на импорт"".'");

	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ТаможеннаяДекларацияИмпорт.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.СуммыДокументовВВалютеРегл.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ПрочиеДоходы.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());	
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Документы.ТаможеннаяДекларацияИмпорт.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыСведений.СуммыДокументовВВалютеРегл.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.ПрочиеДоходы.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());		
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Документы.ТаможеннаяДекларацияИмпорт.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.РегистрыСведений.СуммыДокументовВВалютеРегл.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.РегистрыНакопления.ПрочиеДоходы.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());			
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВводОстатков.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ПрочиеРасходы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Документ.ТаможеннаяДекларацияИмпорт";
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Ссылка");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаможеннаяДекларацияИмпорт.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ТаможеннаяДекларацияИмпорт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТаможеннаяДекларацияИмпортТовары
	|		ПО (ТаможеннаяДекларацияИмпортТовары.Ссылка = ТаможеннаяДекларацияИмпорт.Ссылка)
	|ГДЕ
	|	(ТаможеннаяДекларацияИмпорт.ИдентификаторСтрокиСбор = """"
	|			ИЛИ ТаможеннаяДекларацияИмпорт.ИдентификаторСтрокиШтраф = """"
	|			ИЛИ ЕСТЬNULL(ТаможеннаяДекларацияИмпортТовары.ИдентификаторСтроки, """") = """")");
	
	Данные = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Данные);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.ТаможеннаяДекларацияИмпорт";

	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОбновляемыхДанных", ОбновляемыеДанные);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДанных.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТОбъектыДляОбработки
	|ИЗ
	|	&ТаблицаОбновляемыхДанных КАК ТаблицаДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаможеннаяДекларацияИмпорт.Ссылка КАК Ссылка,
	|	ТаможеннаяДекларацияИмпорт.ВерсияДанных КАК ВерсияДанных,
	|	ТаможеннаяДекларацияИмпорт.Проведен КАК Проведен,
	|	ТаможеннаяДекларацияИмпорт.УдалитьНумероватьПоТоварам КАК УдалитьНумероватьПоТоварам,
	|	ЕСТЬNULL(ТаблицаТовары.НомерСтроки, 0) КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ТаможеннаяДекларацияИмпорт.УдалитьНумероватьПоТоварам
	|			ТОГДА ЕСТЬNULL(ТаблицаТовары.НомерДляСФ, """")
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаРазделы.УдалитьНомерДляСФ, """")
	|	КОНЕЦ КАК НомерДляСФ
	|ИЗ
	|	ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТаможеннаяДекларацияИмпорт КАК ТаможеннаяДекларацияИмпорт
	|		ПО (ТаможеннаяДекларацияИмпорт.Ссылка = ОбъектыДляОбработки.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТаможеннаяДекларацияИмпорт.Разделы КАК ТаблицаРазделы
	|		ПО (ТаблицаРазделы.Ссылка = ТаможеннаяДекларацияИмпорт.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТаблицаТовары
	|		ПО (ТаблицаТовары.Ссылка = ТаблицаРазделы.Ссылка)
	|			И (ТаблицаТовары.НомерРаздела = ТаблицаРазделы.НомерРаздела)
	|ИТОГИ ПО
	|	Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДокументов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаДокументов.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

			Если ВыборкаДокументов.Проведен Тогда			
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СуммыДокументовВВалютеРегл.НаборЗаписей");
				ЭлементБлокировки.УстановитьЗначение("Регистратор", ВыборкаДокументов.Ссылка);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				
				ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПрочиеРасходы.НаборЗаписей");
				ЭлементБлокировки.УстановитьЗначение("Регистратор", ВыборкаДокументов.Ссылка);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				
				ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.СебестоимостьТоваров.НаборЗаписей");
				ЭлементБлокировки.УстановитьЗначение("Регистратор", ВыборкаДокументов.Ссылка);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			КонецЕсли;
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(
				ВыборкаДокументов.Ссылка, ВыборкаДокументов.ВерсияДанных, Параметры.Очередь);
			Если ДокументОбъект = Неопределено Тогда
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(ДокументОбъект.Товары);
			Если Не ЗначениеЗаполнено(ДокументОбъект.ИдентификаторСтрокиСбор) Тогда
				ДокументОбъект.ИдентификаторСтрокиСбор = Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ДокументОбъект.ИдентификаторСтрокиШтраф) Тогда
				ДокументОбъект.ИдентификаторСтрокиШтраф = Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
			
			Если Не ВыборкаДокументов.УдалитьНумероватьПоТоварам Тогда
				ВыборкаСтрокДокумента = ВыборкаДокументов.Выбрать();
				Пока ВыборкаСтрокДокумента.Следующий() Цикл
					Если ВыборкаСтрокДокумента.НомерСтроки > 0 Тогда
						СтрокаТовары = ДокументОбъект.Товары[ВыборкаСтрокДокумента.НомерСтроки-1];
						СтрокаТовары.НомерДляСФ = ВыборкаСтрокДокумента.НомерДляСФ;
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;	
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект,,,);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ВыборкаДокументов.Ссылка);
			Прервать;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли