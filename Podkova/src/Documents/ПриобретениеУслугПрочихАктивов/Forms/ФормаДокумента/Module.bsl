#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

&НаКлиенте
Перем ПараметрыДляЗаписи Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();

	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если КлиентскоеПриложение.ТекущийВариантИнтерфейса() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаПоДокументу.ЦветФона = Новый Цвет();
	КонецЕсли;

	ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	
	НаправлениеДеятельностиОбязательно = НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(Объект.ХозяйственнаяОперация);
	
	УстановитьЗаголовокСтатьяДоходовРасходов();
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	СформироватьНадписьВалюты(ЭтаФорма);
	
	ИзменитьОтображениеИтоговыхПоказателей(ЭтаФорма);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	ПроверкаКонтрагентовВызовСервераПереопределяемыйУТ.ФормаДокументаПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	Если Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо Тогда
		Для каждого Команда Из Команды Цикл
			Если Команда.Заголовок = НСтр("ru = 'Авансовый отчет'") Тогда
				КнопкаПечатиАвансовогоОтчета = Элементы.ПодменюПечать.ПодчиненныеЭлементы.Найти(Команда.Имя);
				Если КнопкаПечатиАвансовогоОтчета <> Неопределено Тогда
					КнопкаПечатиАвансовогоОтчета.Видимость = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументССылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ПараметрыЭДОПриСоздании.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.СтруктураПредприятия.Форма.ФормаВыбора" Тогда
		
		ВыделенныеСтроки = Элементы.Расходы.ВыделенныеСтроки;
		
		Для Каждого Строка Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Объект.Расходы.НайтиПоИдентификатору(Строка);
			ДанныеСтроки.Подразделение = ВыбранноеЗначение;
		КонецЦикла;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РеквизитыПечатиАвансовогоОтчета" Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		КонецЕсли;
		
	КонецЕсли;
	
	Если УчетНДСУПКлиент.ЗаконченоРедактированиеСчетаФактурыПолученного(ВыбранноеЗначение, ИсточникВыбора) Тогда
		ОбновитьТекстСчетаФактуры();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	// Если документ проводится, предложим дозаполнить недостающие данные
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
		И НЕ ЗначениеЗаполнено(Объект.ДатаПлатежа) Тогда
			
		Объект.ДатаПлатежа = Объект.Дата;
		
	КонецЕсли;
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		Возврат;
	КонецЕсли;
	
	
	ОбщегоНазначенияУТКлиент.ЗаписатьОбъектПриНеобходимости(ЭтотОбъект, ПараметрыЗаписи, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ПриобретениеУслугПрочихАктивов", ПараметрыЗаписи, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ОбновитьСостояниеРасчетовСервер();
	ОбновитьТекстСчетаФактуры();
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.Расходы);
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовЗаказРеализация(Объект.Расходы);
	ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(Объект.Расходы);
	
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;

	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

	СформироватьНадписьВалюты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	Если (ИмяСобытия = "ЗачтенаОплата" Или ЗакупкиКлиент.ИзменилисьДокументыОплатыПоставщиком(ИмяСобытия))
		И Параметр = Объект.Ссылка Тогда
		ОбновитьСостояниеРасчетовСервер();
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения"  И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		ЭтаФорма.Прочитать();
	ИначеЕсли ИмяСобытия = "ОбновитьДокументИБПослеЗаполненияИзФайла"  И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_СоглашенияСПоставщиками" Тогда
		
		УстановитьДоступностьСоглашений();
		
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы 

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "ГруппаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПриИзмененииДатыСервер();
	ДатаДокументаДоИзменения = Объект.Дата;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизацииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПриИзмененииКонтрагентаСервер();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтруктураДополнительногоОтбора = Новый Структура;
	СтруктураДополнительногоОтбора.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	
	ЗакупкиКлиент.НачалоВыбораСоглашенияСПоставщиком(
		Элемент,
		СтандартнаяОбработка,
		Объект.Партнер,
		Объект.Соглашение,
		Объект.Дата,
		СтруктураДополнительногоОтбора);

КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда
		Возврат;
	КонецЕсли; 
	
	ПриИзмененииПартнераСервер();
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ЗакупкиКлиент.ОповеститьОбОкончанииЗаполненияУсловийЗакупокПоУмолчанию();
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)
	
	ПриИзмененииСоглашенияСервер();
	
	Если ЗначениеЗаполнено (Объект.Соглашение) Тогда
		ЗакупкиКлиент.ОповеститьОбОкончанииЗаполненияУсловийЗакупок();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Валюта)
		И ЗначениеЗаполнено(ВалютаДокумента)
		И ВалютаДокумента <> Объект.Валюта 
		И Объект.Расходы.Итог("Цена") <> 0 Тогда
		
		ТекстСообщения = НСтр("ru='Пересчитать суммы в документе в валюту ""%Валюта%""?'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%", Объект.Валюта);
		
		ОтветНаВопрос = Неопределено;

		
		ПоказатьВопрос(Новый ОписаниеОповещения("СоглашениеПриИзмененииЗавершение", ЭтотОбъект), ТекстСообщения,РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	СоглашениеПриИзмененииФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ОтветНаВопрос = РезультатВопроса;
    
    Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
        
        ПриИзмененииВалютыСервер(Объект.Валюта);
        ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
        
    КонецЕсли;
    
    
    СоглашениеПриИзмененииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзмененииФрагмент()
    
    ВалютаДокумента = Объект.Валюта;

КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ПриИзмененииДоговораСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	
	ПриИзмененииНалогообложенияНДССервер();
	ИзменитьОтображениеИтоговыхПоказателей(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	ЦенаВключаетНДСПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокРасчетовПриИзменении(Элемент)
	
	УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСчетаФактурыПолученныеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПараметрыРегистрации = ПараметрыРегистрацииСчетовФактурПолученных(Объект);
	УчетНДСУПКлиент.ОбработкаНавигационнойСсылкиСчетаФактурыПолученные(
		ЭтаФорма,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка,
		ПараметрыРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПечатиАвансовогоОтчетаНажатие(Элемент)
	
	ДанныеПечати = Новый Структура;
	ДанныеПечати.Вставить("НазначениеАванса",             Объект.НазначениеАванса);
	ДанныеПечати.Вставить("КоличествоДокументов",         Объект.КоличествоДокументов);
	ДанныеПечати.Вставить("КоличествоЛистов",             Объект.КоличествоЛистов);
	ДанныеПечати.Вставить("Руководитель",                 Объект.Руководитель);
	ДанныеПечати.Вставить("ГлавныйБухгалтер",             Объект.ГлавныйБухгалтер);
	
	ДанныеПечати.Вставить("Дата",                         Объект.Дата);
	ДанныеПечати.Вставить("Организация",                  Объект.Организация);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДанныеПечати", ДанныеПечати);
	
	ОткрытьФорму("ОбщаяФорма.РеквизитыПечатиАвансовогоОтчета", СтруктураПараметров, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ХозяйственнаяОперацияПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ХозяйственнаяОперацияПриИзмененииСервер()
	
	УстановитьВидимостьЭлементовПоОперацииСервер();
	ХозяйственнаяОперацияДоговора = ПолучитьХозяйственнуюОперациюДоговора(Объект.ХозяйственнаяОперация);
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	НаправлениеДеятельностиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьВалютыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента"         , Объект.Валюта);
	СтруктураПараметров.Вставить("ВалютаВзаиморасчетов"    , Объект.ВалютаВзаиморасчетов);
	СтруктураПараметров.Вставить("СуммаВзаиморасчетов"     , Объект.Расходы.Итог("СуммаВзаиморасчетов"));
	СтруктураПараметров.Вставить("СуммаДокумента"          , Объект.Расходы.Итог("СуммаСНДС"));
	СтруктураПараметров.Вставить("Курс"                    , Объект.Курс);
	СтруктураПараметров.Вставить("Кратность"               , Объект.Кратность);
	СтруктураПараметров.Вставить("ДатаДокумента"           , Объект.Дата);
	СтруктураПараметров.Вставить("ТолькоПросмотр"          , ЭтаФорма.ТолькоПросмотр);
	СтруктураПараметров.Вставить("ЭтоДокументЗакупки"      , Истина);
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо") Тогда
		СтруктураПараметров.Вставить("НеПоказыватьРасчеты",Истина);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеВзаиморасчеты", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ВалютыИКурсДокумента", СтруктураПараметров,,,,,ОповещениеОЗакрытии);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ДекорацияСостояниеЭДОНажатие(ЭтотОбъект, СтандартнаяОбработка);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакупкаПодДеятельностьОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасходы

&НаКлиенте
Процедура РасходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Расходы.ТекущиеДанные;
	
	Если НоваяСтрока И Не Копирование Тогда
		ТекущиеДанные.Подразделение = Объект.Подразделение;
		ТекущиеДанные.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
		ПриДобавлениСтрокиРасходов(ТекущиеДанные, Объект.НалогообложениеНДС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Расходы.ТекущиеДанные;
	
	ТекущаяСтрока = Новый Структура;
	ТекущаяСтрока.Вставить("Количество",          ?(ТекущиеДанные.Количество <> 0, ТекущиеДанные.Количество, 1));
	ТекущаяСтрока.Вставить("Цена",                ТекущиеДанные.Цена);
	ТекущаяСтрока.Вставить("Сумма",               ТекущиеДанные.Сумма);
	ТекущаяСтрока.Вставить("СтавкаНДС",           ТекущиеДанные.СтавкаНДС);
	ТекущаяСтрока.Вставить("СуммаНДС",            ТекущиеДанные.СуммаНДС);
	ТекущаяСтрока.Вставить("СуммаСНДС",           ТекущиеДанные.СуммаСНДС);
	ТекущаяСтрока.Вставить("СуммаВзаиморасчетов", ТекущиеДанные.СуммаВзаиморасчетов);
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличества(СтруктураДействий, ЭтаФорма);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ТекущаяСтрока, , "Количество");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Расходы.ТекущиеДанные;
	
	ТекущаяСтрока = Новый Структура;
	ТекущаяСтрока.Вставить("Количество",          ?(ТекущиеДанные.Количество <> 0, ТекущиеДанные.Количество, 1));
	ТекущаяСтрока.Вставить("Цена",                ТекущиеДанные.Цена);
	ТекущаяСтрока.Вставить("Сумма",               ТекущиеДанные.Сумма);
	ТекущаяСтрока.Вставить("СтавкаНДС",           ТекущиеДанные.СтавкаНДС);
	ТекущаяСтрока.Вставить("СуммаНДС",            ТекущиеДанные.СуммаНДС);
	ТекущаяСтрока.Вставить("СуммаСНДС",           ТекущиеДанные.СуммаСНДС);
	ТекущаяСтрока.Вставить("СуммаВзаиморасчетов", ТекущиеДанные.СуммаВзаиморасчетов);
	
	СтруктураПересчетаСуммы = ПоляПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ТекущаяСтрока, , "Количество");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Расходы.ТекущиеДанные;
	
	ТекущаяСтрока = Новый Структура;
	ТекущаяСтрока.Вставить("Количество",          ?(ТекущиеДанные.Количество <> 0, ТекущиеДанные.Количество, 1));
	ТекущаяСтрока.Вставить("Цена",                ТекущиеДанные.Цена);
	ТекущаяСтрока.Вставить("Сумма",               ТекущиеДанные.Сумма);
	ТекущаяСтрока.Вставить("СтавкаНДС",           ТекущиеДанные.СтавкаНДС);
	ТекущаяСтрока.Вставить("СуммаНДС",            ТекущиеДанные.СуммаНДС);
	ТекущаяСтрока.Вставить("СуммаСНДС",           ТекущиеДанные.СуммаСНДС);
	ТекущаяСтрока.Вставить("СуммаВзаиморасчетов", ТекущиеДанные.СуммаВзаиморасчетов);
	
	СтруктураПересчетаСуммы = ПоляПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВЗакупках", Новый Структура("ИмяКоличества", "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ТекущаяСтрока, , "Количество");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Расходы.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ПоляПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыСуммаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Расходы.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ПоляПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыСтатьяРасходовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Расходы.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТаблицы.СтатьяРасходов) Тогда
		РасходыСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения);
	Иначе
		СтрокаТаблицы.АналитикаРасходов = Неопределено;
		СтрокаТаблицы.АналитикаАктивовПассивов = Неопределено;
		СтрокаТаблицы.АналитикаРасходовОбязательна = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыПослеУдаления(Элемент)
	СформироватьНадписьВалюты(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура РасходыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	СформироватьНадписьВалюты(ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Расходы;
	ДанныеТаблицы = Объект.Расходы;
	
	ПараметрыРазбиенияСтроки = ОбщегоНазначенияУТКлиент.ПараметрыРазбиенияСтроки();
	ПараметрыРазбиенияСтроки.ИмяПоляКоличество = "Количество";
	ПараметрыРазбиенияСтроки.Заголовок = НСтр("ru = 'Введите количество в новой строке'");
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы, Оповещение, ПараметрыРазбиенияСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатьюРасходов(Команда)
	
	ВыделенныеСтроки = Элементы.Расходы.ВыделенныеСтроки;
	
	Если Объект.Расходы.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(ВыделенныеСтроки) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Для выполнения команды требуется выделить строки табличной части.'"));
		Возврат;
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	
	ВыбранноеЗначение = Неопределено;

	
	ОткрытьФорму(
		"ПланВидовХарактеристик.СтатьиРасходов.Форма.ФормаВыбораСтатьиИАналитики", 
		СтруктураПараметры,
		ЭтаФорма,,,, Новый ОписаниеОповещения("УстановитьСтатьюРасходовЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатьюРасходовЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    
    
    ВыбранноеЗначение = Результат;
    
    Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
        
        Для Каждого Строка Из ВыделенныеСтроки Цикл
            
            СтрокаТаблицы = Объект.Расходы.НайтиПоИдентификатору(Строка);
            Если СтрокаТаблицы <> Неопределено Тогда
                СтрокаТаблицы.СтатьяРасходов = ВыбранноеЗначение.СтатьяРасходов;
                СтрокаТаблицы.АналитикаРасходов = ВыбранноеЗначение.АналитикаРасходов;
            КонецЕсли;
            
        КонецЦикла;
        
    КонецЕсли;

КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОтчетыУТКлиентПереопределяемый.ОткрытьОтчетКарточкаРасчетовСПоставщиками("КарточкаРасчетовСПоставщикамиПоДокументамКонтекст", Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьНаПоступления(Команда)
	
	АдресСтрокКРаспределению = ПоместитьВыделенныеСтрокиВХранилище(Элементы.Расходы.ВыделенныеСтроки);
	Если АдресСтрокКРаспределению = Неопределено Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Отсутствуют строки к распределению на документы поступления.'"));
	Иначе
		Обработчик = Новый ОписаниеОповещения("РаспределитьНаПоступленияЗавершение", ЭтотОбъект);
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ссылка",       Объект.Ссылка);
		ПараметрыФормы.Вставить("Валюта",       Объект.Валюта);
		ПараметрыФормы.Вставить("ТаблицаСтрок", АдресСтрокКРаспределению);
		ОткрытьФорму("ОбщаяФорма.РаспределениеРасходовНаПоступления", ПараметрыФормы,,,,, Обработчик, Режим);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РаспределитьНаПоступленияЗавершение(РезультатЗакрытия, Параметры) Экспорт
	Если РезультатЗакрытия <> Неопределено Тогда
		ПеренестиРезультатВТабЧасть(РезультатЗакрытия);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодразделение(Команда)
	
	ВыделенныеСтроки = Элементы.Расходы.ВыделенныеСтроки;
	
	Если Объект.Расходы.Количество() = 0 Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'В список ""Расходы"" не введено ни одной строки.'"));
		Возврат;
	ИначеЕсли ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'В списке ""Расходы"" не выбрано ни одной строки.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Подразделение", Объект.Подразделение);
	
	ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ПриИзмененииКлючевыхРеквизитовСостояниеЭДО()
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	ПараметрыПриИзменении = ОбменСКонтрагентами.ПараметрыКлючевыеРеквизитыТекстСостоянияЭДОПриИзменении();
	
	ПараметрыПриИзменении.Форма                 = ЭтотОбъект;
	ПараметрыПриИзменении.ДокументСсылка        = Объект.Ссылка;
	ПараметрыПриИзменении.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПриИзменении.ГруппаСостояниеЭДО    = Элементы.ГруппаСостояниеЭДО;
	ПараметрыПриИзменении.Организация           = Объект.Организация;
	ПараметрыПриИзменении.Контрагент            = Объект.Контрагент;
	ПараметрыПриИзменении.Договор               = Объект.Договор;
	
	ОбменСКонтрагентами.КлючевыеРеквизитыТекстСостоянияЭДОПриИзменении(ПараметрыПриИзменении);
	
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюОбработатьЗаписьОбъектаВФорме(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Нет Тогда
		
		ОбщегоНазначенияУТКлиент.ЗаписатьОбъектПриНеобходимости(ЭтотОбъект, ДополнительныеПараметры.ПараметрыЗаписи,,Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//
	
	ТипыСтатей = Новый Массив;
	ТипыСтатей.Добавить(1); // Статьи расходов
	ТипыСтатей.Добавить(3); // Статьи активов/пассивов
	ДоходыИРасходыСервер.УстановитьУсловноеОформлениеАналитикПриСовместномИспользованииСтатей(ЭтаФорма, "Расходы", ТипыСтатей);

	//
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(УсловноеОформление, Новый Структура("Расходы"));
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасходыАналитикаРасходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Расходы.СтатьяРасходов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//
	
	УчетНДСУП.УстановитьУсловноеОформлениеСуммНДСПоНалогообложениюЗакупки(ЭтаФорма,
		"РасходыСтавкаНДС",
		"РасходыСуммаНДС",
		"РасходыСуммаСНДС");
														
	//

	Ценообразование.УстановитьУсловноеОформлениеЦенаВключаетНДС(ЭтаФорма, "РасходыСуммаСНДС");

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Договор.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Соглашение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Договор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Договор.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Соглашение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Договор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасходыСуммаВзаиморасчетов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Валюта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВалютаВзаиморасчетов");

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	НаправленияДеятельностиСервер.УстановитьУсловноеОформлениеНаправленияДеятельности(ЭтаФорма);
	
КонецПроцедуры

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ПриИзмененииПартнераСервер()
	
	ДокументЗакупки = РеквизитФормыВЗначение("Объект");
	ДокументЗакупки.ЗаполнитьУсловияЗакупокПоУмолчанию();
	ЗначениеВРеквизитФормы(ДокументЗакупки, "Объект");
	
	ПриИзмененииДоговораСервер();
	
	АктуализироватьЗакупкуПодДеятельность();
	
	ПараметрыЗаполнения = Документы.ПриобретениеУслугПрочихАктивов.ПараметрыЗаполненияНалогообложенияНДСЗакупки(Объект);
	УчетНДСУП.ЗаполнитьСписокВыбораНалогообложенияНДСЗакупки(Элементы.НалогообложениеНДС,
		Объект.НалогообложениеНДС,
		ПараметрыЗаполнения,
		УчетНДСКэшированныеЗначенияПараметров);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСЗакупки(Объект.НалогообложениеНДС, ПараметрыЗаполнения, УчетНДСКэшированныеЗначенияПараметров);
	
	УстановитьДоступностьСоглашений();
	
	ВалютаДокумента = Объект.Валюта;
	ВалютаВзаиморасчетовДокумента = Объект.ВалютаВзаиморасчетов;
	
	ОбновитьФорму = Ложь;
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Ложь, , ОбновитьФорму, Элементы.ПорядокРасчетов);
	Если ОбновитьФорму Тогда
		УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	КонецЕсли;
	
	ЗакупкиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
	ОбновитьТекстСчетаФактуры();
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
	КонецЕсли;

	Перечисления.ПорядокОплатыПоСоглашениям.ЗаполнитьВозможныеПорядкиОплаты(Объект.ВалютаВзаиморасчетов, Элементы.ПорядокОплаты, Объект.ПорядокОплаты);
	ОчиститьРасшифровкуПлатежа();
	ИзменитьОтображениеИтоговыхПоказателей(ЭтаФорма);
	
	ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(Объект.Расходы);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСоглашенияСервер()
	
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		
		ДокументЗакупки = РеквизитФормыВЗначение("Объект");
		УсловияЗакупок = ЗакупкиСервер.ПолучитьУсловияЗакупок(ДокументЗакупки.Соглашение, Истина, Истина);
		ДокументЗакупки.ЗаполнитьУсловияЗакупок(УсловияЗакупок);
		ЗначениеВРеквизитФормы(ДокументЗакупки, "Объект");
		АктуализироватьЗакупкуПодДеятельность();
		
		ВалютаДокумента = Объект.Валюта;
		ВалютаВзаиморасчетовДокумента = Объект.ВалютаВзаиморасчетов;
		
	КонецЕсли;
	
	ОбновитьФорму = Ложь;
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Ложь, , ОбновитьФорму, Элементы.ПорядокРасчетов);
	Если ОбновитьФорму Тогда
		УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	КонецЕсли;
	
	ЗакупкиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
	ОбновитьТекстСчетаФактуры();
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
	КонецЕсли;

	СформироватьНадписьВалюты(ЭтаФорма);
	
	Перечисления.ПорядокОплатыПоСоглашениям.ЗаполнитьВозможныеПорядкиОплаты(Объект.ВалютаВзаиморасчетов, Элементы.ПорядокОплаты, Объект.ПорядокОплаты);
	ОчиститьРасшифровкуПлатежа();
	ИзменитьОтображениеИтоговыхПоказателей(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКонтрагентаСервер()
	
	ЗакупкиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ЗаполнитьДоговорПоУмолчанию();
	КонецЕсли;
	
	ПараметрыЗаполнения = Документы.ПриобретениеУслугПрочихАктивов.ПараметрыЗаполненияНалогообложенияНДСЗакупки(Объект);
	УчетНДСУП.ЗаполнитьСписокВыбораНалогообложенияНДСЗакупки(Элементы.НалогообложениеНДС,
		Объект.НалогообложениеНДС,
		ПараметрыЗаполнения,
		УчетНДСКэшированныеЗначенияПараметров);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСЗакупки(Объект.НалогообложениеНДС, ПараметрыЗаполнения, УчетНДСКэшированныеЗначенияПараметров);
	ПриИзмененииНалогообложенияНДССервер();
	ИзменитьОтображениеИтоговыхПоказателей(ЭтаФорма);
	АктуализироватьЗакупкуПодДеятельность();
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
	КонецЕсли;
	ОчиститьРасшифровкуПлатежа();
	
	ПриИзмененииКлючевыхРеквизитовСостояниеЭДО();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизацииСервер()
	
	ЗакупкиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		ПриИзмененииДоговораСервер();
		
		Если ИспользоватьНаправленияДеятельности Тогда
			НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
		КонецЕсли;
	
		ДенежныеСредстваСервер.ПроверитьЗаполнитьБанковскийСчетОрганизацииПоВладельцу(Объект.Организация, Объект.БанковскийСчетОрганизации, , Объект.НаправлениеДеятельности);
		
		ОбновитьТекстСчетаФактуры();
			
		АктуализироватьЗакупкуПодДеятельность();
		
	КонецЕсли;
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	ОчиститьРасшифровкуПлатежа();
	
	ПриИзмененииКлючевыхРеквизитовСостояниеЭДО();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДоговораСервер()
	
	ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчетОрганизации, Объект.БанковскийСчетКонтрагента);
	ОбновитьФорму = Ложь;
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Ложь, , ОбновитьФорму, Элементы.ПорядокРасчетов);
	Если ОбновитьФорму Тогда
		УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	КонецЕсли;
	
	ПараметрыЗаполнения = Документы.ПриобретениеУслугПрочихАктивов.ПараметрыЗаполненияНалогообложенияНДСЗакупки(Объект);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСЗакупки(Объект.НалогообложениеНДС, ПараметрыЗаполнения, УчетНДСКэшированныеЗначенияПараметров);
	УчетНДСУП.ЗаполнитьСписокВыбораНалогообложенияНДСЗакупки(Элементы.НалогообложениеНДС,
		Объект.НалогообложениеНДС,
		ПараметрыЗаполнения,
		УчетНДСКэшированныеЗначенияПараметров);
	ПриИзмененииНалогообложенияНДССервер();
	ИзменитьОтображениеИтоговыхПоказателей(ЭтаФорма);
	АктуализироватьЗакупкуПодДеятельность();

	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		Объект.ПорядокОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор,"ПорядокОплаты");
	КонецЕсли;
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
	КонецЕсли;
	ОчиститьРасшифровкуПлатежа();
	
	ПриИзмененииКлючевыхРеквизитовСостояниеЭДО();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВалютыСервер(НоваяВалюта)

	СтараяВалюта                = ВалютаДокумента;
	ДатаДокумента               = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());
	СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтараяВалюта, ДатаДокумента);
	СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта,  ДатаДокумента);
	
	Для Каждого ТекСтрока Из Объект.Расходы Цикл
		
		ТекСтрока.Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(ТекСтрока.Цена,
			СтруктураКурсовСтаройВалюты,
			СтруктураКурсовНовойВалюты);
		
		ТекСтрока.Сумма = ТекСтрока.Цена * ?(ТекСтрока.Количество <> 0, ТекСтрока.Количество, 1);
		ТекСтрока.СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(ТекСтрока.Сумма, ТекСтрока.СтавкаНДС, Объект.ЦенаВключаетНДС);
		ТекСтрока.СуммаСНДС = ТекСтрока.Сумма + ?(Объект.ЦенаВключаетНДС, 0, ТекСтрока.СуммаНДС);
		ТекСтрока.СуммаВзаиморасчетов = 0;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииНалогообложенияНДССервер()
	
	УчетНДСУП.УстановитьСписокВыбораСтавокНДСПоНалогообложению(ЭтотОбъект, Объект.НалогообложениеНДС, "РасходыСтавкаНДС");
	
	СтруктураПересчетаСуммы = ПоляПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	Если Объект.НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",
			Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
	КонецЕсли;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Расходы, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьТекстСчетаФактуры();
	
КонецПроцедуры

&НаСервере
Процедура ЦенаВключаетНДСПриИзмененииСервер()
	
	СтруктураПересчетаСуммы = ПоляПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Расходы, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура РасходыСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения)
	
	СтрокаТаблицы = Объект.Расходы.НайтиПоИдентификатору(Элементы.Расходы.ТекущаяСтрока);
	
	Если ТипЗнч(СтрокаТаблицы.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов") Тогда
		ДоходыИРасходыСервер.СтатьяАктивовПассивовПриИзменении(Объект, СтрокаТаблицы.СтатьяРасходов, СтрокаТаблицы.АналитикаАктивовПассивов);
		Если ЗначениеЗаполнено(СтрокаТаблицы.АналитикаРасходов) Тогда
			СтрокаТаблицы.АналитикаРасходов = Неопределено;
			СтрокаТаблицы.АналитикаРасходовОбязательна = Ложь;
			СтрокаТаблицы.АналитикаРасходовЗаказРеализация = Ложь;
		КонецЕсли;
	Иначе
		ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(Объект, СтрокаТаблицы.СтатьяРасходов, СтрокаТаблицы.АналитикаРасходов);
		Если ЗначениеЗаполнено(СтрокаТаблицы.АналитикаАктивовПассивов) Тогда
			СтрокаТаблицы.АналитикаАктивовПассивов = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура("
		|ЗаполнитьПризнакАналитикаРасходовОбязательна, 
		|ЗаполнитьПризнакАналитикаРасходовЗаказРеализация, 
		|ЗаполнитьТипСтатьи");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДатыСервер()
	
	ДатаПлатежа = ЗакупкиСервер.ПолучитьПоследнююДатуПоГрафику(Объект.Дата, Объект.Соглашение);
	
	Если НЕ ЗначениеЗаполнено(ДатаПлатежа) Тогда
		Если Не ЗначениеЗаполнено(ДатаДокументаДоИзменения) Тогда
			ДатаДокументаДоИзменения = Объект.Дата;
		КонецЕсли;
		СдвигДат = (НачалоДня(Объект.Дата) - НачалоДня(ДатаДокументаДоИзменения))/86400;	
		
		Если СдвигДат > 0 Тогда
			Объект.ДатаПлатежа = Объект.Дата + СдвигДат*86400;
		Иначе
			Объект.ДатаПлатежа = Объект.Дата;
		КонецЕсли;
		
	Иначе
		Объект.ДатаПлатежа = ДатаПлатежа;
	КонецЕсли;
	
	АктуализироватьЗакупкуПодДеятельность();
	УчетНДСУП.СкорректироватьСтавкуНДСВТЧДокумента(Объект, Объект.Расходы);
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура НаправлениеДеятельностиПриИзмененииСервер()
	
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
	КонецЕсли;
	АктуализироватьЗакупкуПодДеятельность();
	ОчиститьРасшифровкуПлатежа();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Функция ПоляПересчетаСуммыНДСВСтрокеТЧ(Форма)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Форма.Объект);
	
	Возврат СтруктураПересчетаСуммы;
	
КонецФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ХозяйственнаяОперацияДоговора = ПолучитьХозяйственнуюОперациюДоговора(Объект.ХозяйственнаяОперация);
	УстановитьВидимостьЭлементовПоОперацииСервер();
	УстановитьДоступностьСоглашений();
	
	ВалютаДокумента = Объект.Валюта;
	ВалютаВзаиморасчетовДокумента = Объект.ВалютаВзаиморасчетов;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Ложь , Ложь, , Элементы.ПорядокРасчетов);
	
	ИспользоватьНаправленияДеятельности = ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности");
	
	ПараметрыЗаполнения = Документы.ПриобретениеУслугПрочихАктивов.ПараметрыЗаполненияНалогообложенияНДСЗакупки(Объект);
	УчетНДСУП.ЗаполнитьСписокВыбораНалогообложенияНДСЗакупки(Элементы.НалогообложениеНДС,
		Объект.НалогообложениеНДС,
		ПараметрыЗаполнения,
		УчетНДСКэшированныеЗначенияПараметров);
		
	УчетНДСУП.УстановитьСписокВыбораСтавокНДСПоНалогообложению(ЭтотОбъект, Объект.НалогообложениеНДС, "РасходыСтавкаНДС");
	
	ЗакупкиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость);
	ОбновитьСостояниеРасчетовСервер();
	УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.Расходы);
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовЗаказРеализация(Объект.Расходы);
	ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(Объект.Расходы);
	
	ОбновитьТекстСчетаФактуры();
	
	ДатаДокументаДоИзменения = Объект.Дата;
	
	АктуализироватьЗакупкуПодДеятельность(Ложь);
	
	Перечисления.ПорядокОплатыПоСоглашениям.ЗаполнитьВозможныеПорядкиОплаты(Объект.ВалютаВзаиморасчетов, Элементы.ПорядокОплаты, Объект.ПорядокОплаты);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьХозяйственнуюОперациюДоговора(ХозяйственнаяОперация)
	
	ХозяйственнаяОперацияДоговора = ХозяйственнаяОперация;
	
	Если ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо") Тогда
		ХозяйственнаяОперацияДоговора = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика");
	КонецЕсли;
	
	Возврат ХозяйственнаяОперацияДоговора;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличества(СтруктураДействий, Форма)
	
	СтруктураПересчетаСуммы = ПоляПересчетаСуммыНДСВСтрокеТЧ(Форма);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоговорПоУмолчанию()
	
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		
		ДопПараметры = ЗакупкиСервер.ДополнительныеПараметрыОтбораДоговоров();
		ДопПараметры.ВалютаВзаиморасчетов = Объект.ВалютаВзаиморасчетов;
		ДопПараметры.Налогообложение = Объект.НалогообложениеНДС;
		ДопПараметры.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
		Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(Объект, 
															Объект.ХозяйственнаяОперация, 
															ДопПараметры);
	Иначе
		
		ДопПараметры = ЗакупкиСервер.ДополнительныеПараметрыОтбораДоговоров();
		ДопПараметры.ВалютаВзаиморасчетов = Объект.ВалютаВзаиморасчетов;
		ДопПараметры.Налогообложение = Объект.НалогообложениеНДС;
		Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(Объект, 
															Объект.ХозяйственнаяОперация, 
															ДопПараметры);
	КонецЕсли;

	Если Объект.Договор <> Договор Тогда
		Объект.Договор = Договор;
		ОбновитьФорму = Ложь;
		ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Ложь, , ОбновитьФорму, Элементы.ПорядокРасчетов);
		Если ОбновитьФорму Тогда
			УстановитьСвойстваЭлементовПоПорядкуРасчетов();
		КонецЕсли;
		ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчетОрганизации);
	
		ПараметрыЗаполнения = Документы.ПриобретениеУслугПрочихАктивов.ПараметрыЗаполненияНалогообложенияНДСЗакупки(Объект);
		УчетНДСУП.ЗаполнитьНалогообложениеНДСЗакупки(Объект.НалогообложениеНДС, ПараметрыЗаполнения, УчетНДСКэшированныеЗначенияПараметров);
		УчетНДСУП.ЗаполнитьСписокВыбораНалогообложенияНДСЗакупки(Элементы.НалогообложениеНДС,
			Объект.НалогообложениеНДС,
			ПараметрыЗаполнения,
			УчетНДСКэшированныеЗначенияПараметров);
		ПриИзмененииНалогообложенияНДССервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОтображениеИтоговыхПоказателей(Форма)
	
	ЗакупкаОблагаетсяНДС = УчетНДСУПКлиентСервер.ОтображатьНДСВИтогахДокументаЗакупки(Форма.Объект.НалогообложениеНДС);
	Если НЕ ЗакупкаОблагаетсяНДС Тогда
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаБезНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДС;
	Иначе
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаСНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеРасчетовСервер()
	
	Документы.ПриобретениеУслугПрочихАктивов.РассчитатьСостояние(
		Объект.Ссылка,
		Объект.Договор,
		ЭтаФорма);
	
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам()
	
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		Расчеты = НСтр("ru='Расчеты по договору'");
	Иначе
		Расчеты = НСтр("ru='Оплачено'") + ": " + Формат(СуммаОплаты, "ЧДЦ=2; ЧН=") + " " + ВалютаВзаиморасчетовДокумента + " " + ПроцентОплаты + "%";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСоглашений()
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		ПараметрыОтбора = Новый Структура("ХозяйственныеОперации", Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
		КоличествоСоглашенийСПоставшиком  = ЗакупкиВызовСервера.ПолучитьКоличествоСоглашенийСПоставщиком(Объект.Партнер, ПараметрыОтбора);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Соглашение", "Видимость", КоличествоСоглашенийСПоставшиком > 0);
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура АктуализироватьЗакупкуПодДеятельность(Заполнить = Истина)
	
	ПараметрыЗаполнения = Документы.ПриобретениеУслугПрочихАктивов.ПараметрыЗаполненияВидаДеятельностиНДС(Объект);
	Если Заполнить Тогда
		УчетНДСУП.ЗаполнитьВидДеятельностиНДС(
			Объект.ЗакупкаПодДеятельность, 
			ПараметрыЗаполнения,
			УчетНДСКэшированныеЗначенияПараметров);
	КонецЕсли;
	УчетНДСУП.ЗаполнитьСписокВыбораВидаДеятельностиНДС(
		Элементы.ЗакупкаПодДеятельность,
		Объект.ЗакупкаПодДеятельность,
		ПараметрыЗаполнения, 
		УчетНДСКэшированныеЗначенияПараметров);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВыделенныеСтрокиВХранилище(Знач ВыделенныеСтроки)
	
	ТаблицаСтрок = Новый ТаблицаЗначений;
	ТаблицаСтрок.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3,0)));
	ТаблицаСтрок.Колонки.Добавить("Содержание", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(1000)));
	ТаблицаСтрок.Колонки.Добавить("АналитикаРасходов", Документы.ТипВсеСсылки());
	ТаблицаСтрок.Колонки.Добавить("Сумма", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	ТаблицаСтрок.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаСтрок.Колонки.Добавить("СтавкаНДС", Перечисления.ТипВсеСсылки());
	ТаблицаСтрок.Колонки.Добавить("Подразделение", Справочники.ТипВсеСсылки());
	ТаблицаСтрок.Колонки.Добавить("СтатьяРасходов", ПланыВидовХарактеристик.ТипВсеСсылки());
	
	Для Каждого ТекСтрока Из ВыделенныеСтроки Цикл
		СтрокаТаблицы = Объект.Расходы.НайтиПоИдентификатору(ТекСтрока);
		Если СтрокаТаблицы = Неопределено 
			ИЛИ ТипЗнч(СтрокаТаблицы.АналитикаРасходов) <> Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
		Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаСтрок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
	Если ТаблицаСтрок.Количество() = 0 Тогда
		АдресВоВременномХранилище =  Неопределено;
	Иначе
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТаблицаСтрок, УникальныйИдентификатор);
	КонецЕсли;
	Возврат АдресВоВременномХранилище;
	
КонецФункции

&НаСервере
Процедура ПеренестиРезультатВТабЧасть(РезультатЗакрытия)
	
	КУдалению = Новый Массив();
	РезультатРаспределения = ПолучитьИзВременногоХранилища(РезультатЗакрытия.АдресВоВременномХранилище);
	Для Каждого ТекСтрока Из РезультатРаспределения Цикл
		МассивСтрок = Объект.Расходы.НайтиСтроки(Новый Структура("НомерСтроки",ТекСтрока.НомерСтроки));
		Если МассивСтрок.Количество() <> 1 Тогда
			СтрокаКЗаполнению = Объект.Расходы.Добавить();
			ПриДобавлениСтрокиРасходов(СтрокаКЗаполнению, Объект.НалогообложениеНДС);
		Иначе
			СтрокаКЗаполнению = МассивСтрок[0];
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаКЗаполнению, ТекСтрока,,"Содержание");
		Если СокрЛП(СтрокаКЗаполнению.Содержание) = "" Тогда
			СтрокаКЗаполнению.Содержание = ТекСтрока.Содержание;
		КонецЕсли;
	
		СтруктураПересчетаСуммы = ПоляПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
		Если СтрокаКЗаполнению.Количество <> 0 Тогда
			СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВЗакупках", Новый Структура("ИмяКоличества", "Количество"));
		Иначе
			СтрокаКЗаполнению.Цена = СтрокаКЗаполнению.Сумма;
		КонецЕсли;
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаКЗаполнению, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	КУдалению = ПолучитьИзВременногоХранилища(РезультатЗакрытия.СтрокиКУдалению);
	Для Каждого СтрокаКУдалению Из КУдалению Цикл
		Объект.Расходы.Удалить(СтрокаКУдалению.НомерСтроки - 1);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовПоПорядкуРасчетов()
	
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	
	ВзаиморасчетыСервер.УстановитьВидимостьГруппыФинансовогоУчета(ЭтаФорма);
	ВзаиморасчетыСервер.УстановитьВидимостьДатыПлатежа(ЭтаФорма);
	ВзаиморасчетыСервер.УстановитьВидимостьПорядкаОплаты(ЭтаФорма);
	ВзаиморасчетыСервер.УстановитьВидимостьЗачетаОплаты(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоОперацииСервер()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ПриобретениеУслугПрочихАктивов.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация,
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации);
		
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
		
	Элементы.РеквизитыПечатиАвансовогоОтчета.Видимость = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо);
	
КонецПроцедуры

#Область РаботаСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура РасходыАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.Расходы.ТекущиеДанные;
	Если СтрокаТаблицы.АналитикаРасходовЗаказРеализация Тогда
		ПродажиКлиент.НачалоВыбораАналитикиРасходов(Элемент, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасходыАналитикаРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.Расходы.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасходыАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.Расходы.ТекущиеДанные;
	Если ЗначениеЗаполнено(Текст) И СтрокаТаблицы.АналитикаРасходовЗаказРеализация Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасходыАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасходыСтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", Элементы.Расходы.ТекущаяСтрока);
	ОписаниеОповещения = Новый ОписаниеОповещения("СтатьяРасходовВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Статья", Элементы.Расходы.ТекущиеДанные.СтатьяРасходов);
	ПараметрыФормы.Вставить("ПараметрыВыбора", Элемент.ПараметрыВыбора);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораСтатьи", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст)
	
	ДанныеВыбора = Новый СписокЗначений;
	ПродажиСервер.ЗаполнитьДанныеВыбораАналитикиРасходов(ДанныеВыбора, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.Расходы.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличества(СтруктураДействий, ЭтаФорма);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка = Объект.Расходы.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	Строка.СтатьяРасходов = Результат;
	РасходыСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриДобавлениСтрокиРасходов(Строка, НалогообложениеНДС)
	
	ДоходыИРасходыКлиентСервер.ИнициализироватьПустоеЗначениеСтатьиВСтрокеТЧ(Строка, "СтатьяРасходов");
	ДоходыИРасходыКлиентСервер.ЗаполнитьТипСтатьиВСтрокеТЧ(Строка, "СтатьяРасходов");
	Если НалогообложениеНДС <> ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС") Тогда
		Строка.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗаголовокСтатьяДоходовРасходов()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
		Элементы.РасходыСтатьяРасходов.Заголовок = НСтр("ru = 'Статья расходов'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПорядокОплатыПоУмолчанию()
	
	ВалютаОплаты = ДенежныеСредстваСервер.ПолучитьВалютуОплаты(Объект.ФормаОплаты, Объект.БанковскийСчетОрганизации);
	
	Объект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию(Объект.ВалютаВзаиморасчетов,
																									Объект.НалогообложениеНДС,
																									ВалютаОплаты);
	
	Перечисления.ПорядокОплатыПоСоглашениям.ЗаполнитьВозможныеПорядкиОплаты(Объект.ВалютаВзаиморасчетов, Элементы.ПорядокОплаты, Объект.ПорядокОплаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеВзаиморасчеты(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		ИзмениласьВалютаВзаиморасчетов = РезультатЗакрытия.ВалютаВзаиморасчетов <> Объект.ВалютаВзаиморасчетов;
		ИзмениласьВалюта = РезультатЗакрытия.Валюта <> Объект.Валюта;
		
		Объект.Валюта = РезультатЗакрытия.Валюта;
		
		Если ИзмениласьВалюта Тогда
			
			Если ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Объект, ВалютаДокумента, "Расходы") 
				И РезультатЗакрытия.НеобходимПересчетСуммДокумента Тогда
				
				ПриИзмененииВалютыСервер(Объект.Валюта);
				ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
				
			КонецЕсли;
			
			ВалютаДокумента = Объект.Валюта;
			
		КонецЕсли;
		
		Объект.ВалютаВзаиморасчетов = РезультатЗакрытия.ВалютаВзаиморасчетов;
		
		Если ИзмениласьВалютаВзаиморасчетов Тогда
			
			ЗаполнитьДоговорПоУмолчанию();
			ВалютаВзаиморасчетовДокумента = Объект.ВалютаВзаиморасчетов;
			ЗаполнитьПорядокОплатыПоУмолчанию();
			ОчиститьРасшифровкуПлатежа();
			
		КонецЕсли;
		
		Объект.Курс					= РезультатЗакрытия.Курс;
		Объект.Кратность			= РезультатЗакрытия.Кратность;
		Объект.СуммаВзаиморасчетов	= РезультатЗакрытия.СуммаВзаиморасчетов;
		
		ПерераспредитьСуммуВзаиморасчетовИСформироватьНадпись();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерераспредитьСуммуВзаиморасчетовИСформироватьНадпись()
	
	СтруктураКурса = РаботаСКурсамиВалютУТ.СтруктураКурсаВалюты(Объект.Курс, Объект.Кратность);
	
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьЗначенияСвойствКоллекции(
			Объект.Расходы,
			0,
			"СуммаВзаиморасчетов");
	
	Ценообразование.РассчитатьСуммыВзаиморасчетовВТабличнойЧасти(Объект, "Расходы", СтруктураКурса);
	ВзаиморасчетыСервер.ЗаполнитьСуммуНДСВзаиморасчетовВТабличнойЧасти(Объект, "Расходы");
	
	СформироватьНадписьВалюты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьВалюты(Форма)
	
	ПараметрыНадписиВалюты = ВзаиморасчетыКлиентСервер.ПараметрыНадписиВалюты();
	
	ПараметрыНадписиВалюты.ВалютаДокумента      = Форма.ВалютаДокумента;
	ПараметрыНадписиВалюты.ВалютаВзаиморасчетов = Форма.ВалютаВзаиморасчетовДокумента;
	ПараметрыНадписиВалюты.ВалютаРеглУчета      = Форма.ВалютаРегламентированногоУчета;
	ПараметрыНадписиВалюты.СуммаДокумента       = Форма.Объект.Расходы.Итог("СуммаСНДС");
	ПараметрыНадписиВалюты.СуммаВзаиморасчетов  = Форма.Объект.Расходы.Итог("СуммаВзаиморасчетов");
	ПараметрыНадписиВалюты.Курс                 = Форма.Объект.Курс;
	ПараметрыНадписиВалюты.Кратность            = Форма.Объект.Кратность;
	ПараметрыНадписиВалюты.НеПоказыватьРасчеты  = Форма.Объект.ХозяйственнаяОперация 
		= ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо");
	
	Форма.НадписьВалюты = ВзаиморасчетыКлиентСервер.СформироватьНадписьВалюты(ПараметрыНадписиВалюты);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьРасшифровкуПлатежа()
	
	Объект.РасшифровкаПлатежа.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекстСчетаФактуры()
	
	ПараметрыРегистрации = ПараметрыРегистрацииСчетовФактурПолученных(Объект);
	СчетаФактурыПолученныеНаОсновании = УчетНДСУП.СчетаФактурыПолученныеНаОсновании(ПараметрыРегистрации);
	
	ТекстСчетаФактурыПолученные = СчетаФактурыПолученныеНаОсновании.Представление;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыРегистрацииСчетовФактурПолученных(Объект)
	
	ПараметрыРегистрации = УчетНДСУПКлиентСервер.ПараметрыРегистрацииСчетовФактурПолученных();
	ПараметрыРегистрации.Ссылка = Объект.Ссылка;
	ПараметрыРегистрации.Дата = Объект.Дата;
	ПараметрыРегистрации.Организация = Объект.Организация;
	ПараметрыРегистрации.Контрагент = Объект.Контрагент;
	ПараметрыРегистрации.НалогообложениеНДС = Объект.НалогообложениеНДС;
	ПараметрыРегистрации.ПриобретениеТоваровРаботУслуг = Истина;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбработатьЗаписьОбъекта()
	
	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, ПараметрыДляЗаписи);
	
КонецПроцедуры

#КонецОбласти

