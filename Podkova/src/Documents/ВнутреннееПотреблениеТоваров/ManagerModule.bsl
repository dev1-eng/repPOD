#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.ПрочееОприходованиеТоваров.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.РасходныйОрдерНаТовары.ДобавитьКомандуСоздатьНаОснованииРасходныйОрдерНаТовары(КомандыСозданияНаОсновании);
	
	Документы.ПоручениеЭкспедитору.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	ВнутреннееПотреблениеТоваровЛокализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);

КонецПроцедуры

// Добавляет команду создания документа "Внутреннее потребление товаров".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ВнутреннееПотреблениеТоваров) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ВнутреннееПотреблениеТоваров.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ВнутреннееПотреблениеТоваров);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьВнутреннееПотребление";
		
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Добавляет команду создания документа "Внутреннее потребление товаров".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОснованииЗаказа(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ВнутреннееПотреблениеТоваров) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик = "СозданиеНаОснованииУТКлиент.ВнутреннееПотреблениеТоваровСоздатьНаОснованииЗаказа";
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ВнутреннееПотреблениеТоваров.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ВнутреннееПотреблениеТоваров);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.МножественныйВыбор = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьВнутреннееПотребление";
		
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Добавляет команду создания документа "Внутреннее потребление товаров".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОснованииСписаниеНаРасходыАктивы(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ВнутреннееПотреблениеТоваров) И ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееПотребление") Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик = "СозданиеНаОснованииУТКлиент.СписаниеНаРасходыАктивыНаОсновании";
		КомандаСоздатьНаОсновании.Идентификатор = "СписаниеНаРасходыАктивыНаОсновании";
		КомандаСоздатьНаОсновании.Представление = НСтр("ru = 'Списание на расходы / активы'");
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "НеБазоваяВерсия";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	Отчеты.ОстаткиТоваровОрганизаций.ДобавитьКомандуОтчета(КомандыОтчетов);
	
	КомандаОтчет = Отчеты.СостояниеВыполненияДокументов.ДобавитьКомандуСостояниеВыполненияВнутреннихРаспоряжений(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
	ВнутреннееПотреблениеТоваровЛокализация.ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры);

КонецПроцедуры

#Область Заполнение

// Возвращает структуру необходимую для дальнейшего использования при заполнении документа.
//
// Возвращаемое значение:
//   Структура - структура параметров заполнения документа.
//
Функция ПараметрыЗаполненияДокумента() Экспорт
	
	ПараметрыЗаполнения = Новый Структура();
	
	ПараметрыЗаполнения.Вставить("МассивЗаказов",         Неопределено);
	ПараметрыЗаполнения.Вставить("ФормаОткрыта",          Ложь);
	ПараметрыЗаполнения.Вставить("ЗаполнятьПоОрдеру",     Неопределено);
	
	ПараметрыЗаполнения.Вставить("РеквизитыШапки",        Неопределено);
	ПараметрыЗаполнения.Вставить("Склад",                 Справочники.Склады.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("Организация",           Справочники.Организации.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("Подразделение",         Справочники.СтруктураПредприятия.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПустаяСсылка());
	
	ПараметрыЗаполнения.Вставить("ИмяДокумента",          "ВнутреннееПотреблениеТоваров");
	ПараметрыЗаполнения.Вставить("ИмяРегистраЗаказ",      "ЗаказыНаВнутреннееПотребление");
	ПараметрыЗаполнения.Вставить("ИмяПоляЗаказ",          "ЗаказНаВнутреннееПотребление");
		
	ПараметрыЗаполнения.Вставить("КлючевыеПоля",          "Номенклатура, Характеристика, Серия, Назначение");
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Производит инициализацию структуры параметров заполнения по реквизитам шапки и по заказам.
//
// Параметры:
//  ПараметрыЗаполнения	 - Структура - Параметры по умолчанию получаемые в методе ПараметрыЗаполненияДокумента()
//  РеквизитыШапки		 - Структура - Содержит ключи на основании которых будет происходить заполнение
//  МассивЗаказов		 - Массив - Ссылки на заказы по которым будет происходить заполнение.
//
Процедура ИнициализироватьПараметрыЗаполнения(ПараметрыЗаполнения, РеквизитыШапки, МассивЗаказов) Экспорт
	
	ПараметрыЗаполнения.МассивЗаказов	= МассивЗаказов;
	ПараметрыЗаполнения.РеквизитыШапки	= РеквизитыШапки;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыЗаполнения.Склад) Тогда
		ПараметрыЗаполнения.Склад = РеквизитыШапки.Склад;
	КонецЕсли;
	
	ПараметрыЗаполнения.Организация				= РеквизитыШапки.Организация;
	ПараметрыЗаполнения.Подразделение			= РеквизитыШапки.Подразделение;
	ПараметрыЗаполнения.ХозяйственнаяОперация	= РеквизитыШапки.ХозяйственнаяОперация;
	
	Если ПараметрыЗаполнения.ЗаполнятьПоОрдеру = Неопределено Тогда
		ПараметрыЗаполнения.ЗаполнятьПоОрдеру = НакладныеСервер.ЗаполнятьПоОрдеру(ПараметрыЗаполнения.Склад);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает результат запроса для заполнения накладной по заказам/ордерам
//
// Параметры:
//  ДанныеОтбора   - Структура - поля, по которым будут отобраны остатки заказов для заполнения документа
//  КонтекстВызова - Строка - определяет контекст вызова процедуры: "Подбор", "Заполнение".
//
// Возвращаемое значение:
//  Результат - Выборка, Структура - выборка результата запроса, либо структура содержащая выборку результата запроса
//                                   и дополнительные данные для заполнения.
//
Функция РезультатЗапросаПоОстаткамЗаказов(ДанныеОтбора, КонтекстВызова) Экспорт
	
	// Описание всех возможных параметров запроса.
	ПараметрыЗапросов = Новый Структура("ОтобратьПоЗаказу, МассивЗаказов,
	                                    |Организация, Склад, ХозяйственнаяОперация, Сделка,
	                                    |Регистратор, ТоварыНакладной, НакладнаяПоЗаказам");
	ПараметрыЗапросов.Вставить("УчитыватьСобирается", Ложь);
	ПараметрыЗапросов.Вставить("ЗаполнятьПоСобирается", Ложь);
	
	СписокЗапросов   = Новый СписокЗначений();
	ИменаПодзапросов = Новый Массив();
	
	// Обработка параметров вызова метода.
	Если КонтекстВызова = "СозданиеНаОсновании" Тогда
		
		ПараметрыЗапросаДляСозданияНаОсновании(ПараметрыЗапросов, СписокЗапросов, ИменаПодзапросов, ДанныеОтбора);
		
	ИначеЕсли КонтекстВызова = "Подбор" Тогда
		
		ПараметрыЗапросаДляПодбора(ПараметрыЗапросов, СписокЗапросов, ИменаПодзапросов, ДанныеОтбора);
		
	ИначеЕсли КонтекстВызова = "ПерезаполнениеПоОрдерам" Тогда
		
		ПараметрыЗапросаДляПерезаполненияПоОрдерам(ПараметрыЗапросов, СписокЗапросов, ИменаПодзапросов, ДанныеОтбора);
		
	ИначеЕсли КонтекстВызова = "ЗаполнениеПоЗаказам" Тогда
		
		ПараметрыЗапросаДляЗаполненияПоЗаказам(ПараметрыЗапросов, СписокЗапросов, ИменаПодзапросов, ДанныеОтбора);
		
	КонецЕсли;
	
	
	// Описание всех возможных текстов запросов.
	ТекстыЗапросов = Новый Соответствие();
	ТекстыЗапросов.Вставить("ВтЗаказыОтбор",    ТекстЗапросаВременнойТаблицыРаспоряжений());
	ТекстыЗапросов.Вставить("ВтНакладная",      ТекстЗапросаВременнойТаблицыНакладной());
	ТекстыЗапросов.Вставить("ТаблицаОтгружено", ТекстЗапросаОтгруженоПоОрдерам());
	
	// Используемые подзапросы для формирования таблицы "ТаблицаОформить" должны быть обернуты методом ТекстЗапросаОбъединения(...).
	ТекстыПодзапросов = Новый Соответствие();
	ТекстыПодзапросов.Вставить("БлокРегистрЗаказы",          ТекстЗапросаОстаткиРегистраЗаказы());
	ТекстыПодзапросов.Вставить("БлокСторноНакладная",        ТекстЗапросаСторноНакладная());
	ТекстыПодзапросов.Вставить("БлокНовыеДвиженияНакладная", ТекстЗапросаНовыеДвиженияНакладная());
	
	Для Каждого Элемент Из СписокЗапросов Цикл
		Элемент.Представление = ТекстыЗапросов[Элемент.Значение];
	КонецЦикла;
	
	Элемент = СписокЗапросов.НайтиПоЗначению("ТаблицаОформить");
	Если Элемент <> Неопределено Тогда
		Элемент.Представление = ТекстЗапросаОбъединения(ИменаПодзапросов, ТекстыПодзапросов);
	КонецЕсли;
	
	// Инициализация запроса.
	Запрос = Новый Запрос();
	
	Для Каждого Параметр Из ПараметрыЗапросов Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	Для Каждого Элемент Из СписокЗапросов Цикл
		Запрос.Текст = Запрос.Текст + Элемент.Представление;
	КонецЦикла;
	
	// Выполнение запроса, возврат результата.
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураРезультата = Новый Структура();
	Для Каждого Элемент Из СписокЗапросов Цикл
		СтруктураРезультата.Вставить(Элемент.Значение, РезультатЗапроса[СписокЗапросов.Индекс(Элемент)].Выгрузить());
	КонецЦикла;
	
	Возврат СтруктураРезультата;
	
КонецФункции

// Формирует структуру для создания внутреннего потребления товаров по одному или нескольким заказам на внутреннее
// потреление/заказам на ремонт Если в переданных заказах отличаются реквизиты шапки, выдается сообщение об ошибке.
//
// Параметры:
//  МассивСсылок - Массив - заказы на внутреннее потребление, по которым необходимо ввести накладную
//  РеквизитыШапки - Структура - структура, в которую будут помещены реквизиты шапки из массива заказов.
//
// Возвращаемое значение:
//  Булево - Ложь, если в переданных заказах отличаются реквизиты шапки.
//
Функция ДанныеЗаполненияНакладной(МассивСсылок, СвойстваЗаказов = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Заказ.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	Заказ.Организация КАК Организация,
		|	Заказ.Подразделение КАК Подразделение,
		|	Заказ.Склад КАК Склад,
		|	Заказ.Сделка КАК Сделка,
		|	Заказ.ПотреблениеДляДеятельности КАК ПотреблениеДляДеятельности,
		|	Заказ.НаправлениеДеятельности КАК НаправлениеДеятельности
		|ИЗ
		|	Документ.ЗаказНаВнутреннееПотребление КАК Заказ
		|ГДЕ
		|	Заказ.Ссылка = &Заказ
		|");
	
	Запрос.УстановитьПараметр("Заказ", МассивСсылок[0]);
	
	РеквизитыШапки = Новый Структура("ХозяйственнаяОперация, Организация, Склад, Сделка, Подразделение,
		|ПотреблениеДляДеятельности, НаправлениеДеятельности");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(РеквизитыШапки, Выборка);
	КонецЕсли;
	
	Возврат РеквизитыШапки;
	
КонецФункции

// Формирует данные необходимые для проверки ввода накладной на основании распоряжений.
// (см. функцию СозданиеНаОснованииУТВызовСервера.ПараметрыОткрытияФормыНакладнойНаОснованииЗаказа)
//
// Параметры:
//  Распоряжения - Массив - список распоряжений, на основании которых оформляется накладная
//  ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - вид операции оформляемой накладной.
//
// Возвращаемое значение:
//  Структура - данные для проверки ввода.
//
Функция ДанныеДляПроверкиВводаНаОсновании(Распоряжения, ХозяйственнаяОперация = Неопределено) Экспорт
	
	ДанныеДляВвода = Новый Структура("Основание, Статус, ЕстьОтгрузить, РаспоряженияКОформлению, МожноСгруппировать");
	ДанныеДляВвода.ЕстьОтгрузить = Ложь;
	ДанныеДляВвода.МожноСгруппировать = Ложь;
	ДанныеДляВвода.Вставить("Склад");
	ДанныеДляВвода.Вставить("ХозяйственнаяОперация");
	
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	ЗаказНаВнутреннееПотребление.Ссылка КАК Основание,
		|	ЗаказНаВнутреннееПотребление.Статус КАК Статус,
		|	ЗаказНаВнутреннееПотребление.Склад  КАК Склад,
		|	ЗаказНаВнутреннееПотребление.ХозяйственнаяОперация КАК ХозяйственнаяОперация
		|ИЗ
		|	Документ.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление
		|ГДЕ
		|	ЗаказНаВнутреннееПотребление.Ссылка В(&Распоряжения)
		|");
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Документ.ЗаказНаВнутреннееПотребление.Товары КАК ТоварыЗаказа
		|ГДЕ
		|	ТоварыЗаказа.ВариантОбеспечения В(
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
		|	И ТоварыЗаказа.Ссылка В(&Распоряжения)
		|	И НЕ ТоварыЗаказа.Отменено
		|");
	ТекстыЗапросов.Добавить(РегистрыНакопления.ЗаказыНаВнутреннееПотребление.ТекстЗапросаОстатки("ВтОстаткиКОформлению",
		Новый Структура("ЗаказНаВнутреннееПотребление", "Распоряжения"), "КОформлению <> 0"));
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОстаткиКОформлению.ЗаказНаВнутреннееПотребление КАК РаспоряженияКОформлению
		|ИЗ
		|	ВтОстаткиКОформлению КАК ОстаткиКОформлению");
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ
		|	МАКСИМУМ(ОстаткиКОформлению.Склад) КАК Склад,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОстаткиКОформлению.Склад) > 1 КАК РазныеСклады
		|ИЗ
		|	ВтОстаткиКОформлению КАК ОстаткиКОформлению");
	
	Запрос = Новый Запрос(СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете()));
	Запрос.УстановитьПараметр("Распоряжения", Распоряжения);
	Запрос.УстановитьПараметр("Регистратор", Неопределено);
	Результат = Запрос.ВыполнитьПакет();
	
	Выборка = Результат[0].Выбрать();
	Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
		ДанныеДляВвода.Основание     = Выборка.Основание;
		ДанныеДляВвода.Статус        = Выборка.Статус;
		ДанныеДляВвода.ЕстьОтгрузить = Не Результат[1].Пустой();
		
		ДанныеДляВвода.ХозяйственнаяОперация = Выборка.ХозяйственнаяОперация;
	КонецЕсли;
	
	Если Не Результат[3].Пустой() Тогда
		ДанныеДляВвода.РаспоряженияКОформлению = Результат[3].Выгрузить().ВыгрузитьКолонку("РаспоряженияКОформлению");
		Выборка = Результат[4].Выбрать();
		Если Выборка.Следующий() Тогда
			ДанныеДляВвода.МожноСгруппировать = Не Выборка.РазныеСклады;
			ДанныеДляВвода.Склад = Выборка.Склад;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеДляВвода;
	
КонецФункции

// Формирует параметры для открытия формы рабочего места "Документы к оформлению".
//
// Параметры:
//  ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - вид операции оформляемой накладной.
//
// Возвращаемое значение:
//  Структура - параметры для открытия формы с полями:
//     * ИмяФормы - Строка - имя формы РМ
//     * ПараметрыФормы - Структруа - параметры формы РМ.
//
Функция ПараметрыОткрытияФормыРабочегоМеста(ХозяйственнаяОперация = Неопределено) Экспорт
	
	ОтборХозяйственныеОперации = Новый СписокЗначений;
	Если ЗначениеЗаполнено(ХозяйственнаяОперация) Тогда
		ОтборХозяйственныеОперации.Добавить(ХозяйственнаяОперация);
	Иначе
		ОтборХозяйственныеОперации.ЗагрузитьЗначения(ХозяйственныеОперацииДокумента());
	КонецЕсли;
	
	ОтборТипыДокументов = Новый СписокЗначений;
	ОтборТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ВнутреннееПотреблениеТоваров));
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ОтборХозяйственныеОперации", ОтборХозяйственныеОперации);
	ПараметрыОтбора.Вставить("ОтборТипыДокументов", ОтборТипыДокументов);
	
	ПараметрыОткрытия = Новый Структура("ИмяФормы, ПараметрыФормы");
	ПараметрыОткрытия.ИмяФормы = "Обработка.ЖурналДокументовВнутреннегоТовародвижения.Форма.СписокДокументовКОформлению";
	ПараметрыОткрытия.ПараметрыФормы = Новый Структура;
	ПараметрыОткрытия.ПараметрыФормы.Вставить("КлючНазначенияФормы",     "ВнутренниеПотребленияТоваров");
	ПараметрыОткрытия.ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

// Процедура заполняет поля объекта
//
// Параметры:
//  Объект				 - ДокументОбъект.ВнутреннееПотреблениеТоваров	 - объект для заполнения
//  ПараметрыЗаполнения	 - Структура									 - структура содержащая ключи РеквизитыШапки, ИмяРегистраЗаказ, ИмяПоляЗаказ
//  МассивЗаказов		 - Массив										 - массив заказов.
//
Процедура ЗаполнитьШапкуДокументаПоЗаказу(Объект, ПараметрыЗаполнения, МассивЗаказов) Экспорт
	
	ЗаполнитьЗначенияСвойств(Объект, ПараметрыЗаполнения.РеквизитыШапки);
	
	Объект.Склад = ПараметрыЗаполнения.Склад;
	Объект.ПотреблениеПоЗаказам = Истина;
	
	Объект.Дата = ?(МассивЗаказов.Количество() = 1,
		ЗаказыСервер.ПолучитьМинимальнуюДатуОтгрузкиЗаказа(МассивЗаказов, ПараметрыЗаполнения.ИмяРегистраЗаказ, 
			ПараметрыЗаполнения.ИмяПоляЗаказ),
		ЗаказыСервер.ПолучитьМаксимальнуюДатуОтгрузкиЗаказа(МассивЗаказов, ПараметрыЗаполнения.ИмяРегистраЗаказ, 
			ПараметрыЗаполнения.ИмяПоляЗаказ));
	
	// Заполнение заказа(-ов) в шапке.
	Если МассивЗаказов.Количество() = 1 Тогда
		Объект.ЗаказНаВнутреннееПотребление = МассивЗаказов[0];
	Иначе
		
		ЗаказыСервер.ЗаполнитьЗаказВШапкеПоЗаказамВТабличнойЧасти(
			Объект.ЗаказНаВнутреннееПотребление, 
			Объект.Товары, 
			ПараметрыЗаполнения.ИмяПоляЗаказ);
			
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчитывает поле КоличествоУпаковок и другие зависимые поля
//
// Параметры:
//  Товары				 - ДанныеФормыКоллекция - Табличная часть "Товары"
//  ПараметрыЗаполнения	 - Структура -
//
Процедура ОбновитьЗависимыеРеквизитыТабличнойЧасти(Товары, ПараметрыЗаполнения) Экспорт
	
	ПарамСтатьи = Новый Структура;
	ПарамСтатьи.Вставить("Организация", ПараметрыЗаполнения.Организация);
	ПарамСтатьи.Вставить("Подразделение", ПараметрыЗаполнения.Подразделение);
	ПарамСтатьи.Вставить("ХозяйственнаяОперация", ПараметрыЗаполнения.ХозяйственнаяОперация);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтатьюАналитикуРасходовПоУмолчанию", ПарамСтатьи);
	Если ПараметрыЗаполнения.ФормаОткрыта Тогда
		СтруктураДействий.Вставить("ЗаполнитьПризнакАналитикаРасходовОбязательна");
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	Для Каждого Строка Из Товары Цикл
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, Неопределено);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив содержащий переданную накладную, а так же:
// А. Заказ из массива заказов (если в массиве один элемент)
// Б. Все заказы которые подходят под отбор по реквизитам шапки.
//
// Параметры:
//  Накладная		 - ДокументСсылка.ВнутреннееПотреблениеТоваров -
//  МассивЗаказов	 - Массив - Массив заказов на внутреннее потребление, заказов на ремонт
//  РеквизитыШапки	 - Структура - Должна содержать ключи Организация, Склад,
//  								Сделка, ХозяйственнаяОперация и НаправлениеДеятельности.
//
// Возвращаемое значение:
//  Массив - массив документов ЗаказНаВнутреннееПотребление, ЗаказНаРемонт.
//
Функция РаспоряженияНакладной(Накладная, МассивЗаказов, РеквизитыШапки) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ОтобратьПоЗаказу",        МассивЗаказов.Количество() = 1);
	Запрос.УстановитьПараметр("Регистратор",             Накладная);
	Запрос.УстановитьПараметр("МассивЗаказов",           МассивЗаказов);
	Запрос.УстановитьПараметр("Организация",             РеквизитыШапки.Организация);
	Запрос.УстановитьПараметр("Склад",                   РеквизитыШапки.Склад);
	Запрос.УстановитьПараметр("Сделка",                  РеквизитыШапки.Сделка);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",   РеквизитыШапки.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("НаправлениеДеятельности", РеквизитыШапки.НаправлениеДеятельности);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказНаВнутреннееПотребление.Ссылка КАК Заказ
		|ИЗ
		|	Документ.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление
		|ГДЕ
		|	ВЫБОР
		|		КОГДА &ОтобратьПоЗаказу ТОГДА
		|			ЗаказНаВнутреннееПотребление.Ссылка В (&МассивЗаказов)
		|		ИНАЧЕ
		|			ЗаказНаВнутреннееПотребление.Организация           = &Организация
		|			И ЗаказНаВнутреннееПотребление.Склад                 = &Склад
		|			И ЗаказНаВнутреннееПотребление.Сделка                = &Сделка
		|			И ЗаказНаВнутреннееПотребление.ХозяйственнаяОперация = &ХозяйственнаяОперация
		|			И ЗаказНаВнутреннееПотребление.НаправлениеДеятельности = &НаправлениеДеятельности
		|	КОНЕЦ
		|	И ЗаказНаВнутреннееПотребление.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&Регистратор КАК Заказ";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Заказ");
	
КонецФункции

// Возвращает список реквизитов, по которым можно сгруппировать распоряжения в пределах одной накладной.
//
// Возвращаемое значение:
//  Строка - имена реквизитов, разделенные запятыми.
//
Функция КлючевыеПоляШапкиРаспоряжения() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееПотреблениеПоНесколькимЗаказам") Тогда
		Возврат "Организация, НаправлениеДеятельности, Подразделение, ПотреблениеДляДеятельности";
	Иначе
		Возврат "Ссылка";
	КонецЕсли;
	
КонецФункции
Процедура ЗаполнитьПоЗаказамОрдерам(Товары, Регистратор, ПараметрыЗаполнения) Экспорт
	
	ОтборПоСкладу = ЗначениеЗаполнено(ПараметрыЗаполнения.Склад);
	
	// Если не нужно заполнять по ордеру, передаем пустые параметры запроса - по ордерам вернется пустая таблица.
	Если ПараметрыЗаполнения.ЗаполнятьПоОрдеру Тогда
		РаспоряженияДляОрдеров = ПараметрыЗаполнения.МассивЗаказов;
		РегистраторДляОрдеров  = Регистратор;
	Иначе
		РаспоряженияДляОрдеров = Неопределено;
		РегистраторДляОрдеров  = Неопределено;
	КонецЕсли;
	
	// Заказы
	
	Отбор = Новый Структура();
	Отбор.Вставить("ЗаказНаВнутреннееПотребление", "Распоряжения");
	Если ОтборПоСкладу Тогда
		Отбор.Вставить("Склад", "Склад");
	КонецЕсли;
	
	ТекстЗапросаРегистраЗаказы = РегистрыНакопления.ЗаказыНаВнутреннееПотребление.ТекстЗапросаОстатки(
		"ВтДанныеУчета",
		Отбор,
		"КОформлению <> 0");
		
	Отбор = Новый Структура();
	Отбор.Вставить("Ссылка", "Распоряжения");
	
	ТекстЗапросаЗаказ = Документы.ЗаказНаВнутреннееПотребление.ТекстЗапросаТоварыДокумента(Отбор);
	
	ТекстЗапроса = ТекстЗапросаРегистраЗаказы
					+ ОбщегоНазначенияУТ.РазделительЗапросовВПакете()
					+ ТекстЗапросаЗаказ;
	

	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Распоряжения", ПараметрыЗаполнения.МассивЗаказов);
	Запрос.УстановитьПараметр("Регистратор",  Регистратор);
	Если ОтборПоСкладу Тогда
		Запрос.УстановитьПараметр("Склад", ПараметрыЗаполнения.Склад);
	КонецЕсли;
	
	ТаблицаЗаказы = Запрос.Выполнить().Выгрузить();
	
	ТаблицаЗаказы.Колонки.КОформлению.Имя = "КоличествоВЗаказе";
	
	// Ордера
	Запрос = Новый Запрос();
	
	Отбор = Новый Соответствие;
	Если ОтборПоСкладу Тогда
		ОбщегоНазначенияУТ.ДобавитьЭлементОтбораВКоллекцию(Отбор, "Склад", "&Склад");
	КонецЕсли;	
	
	ТекстЗапросаОсталосьОформить = РегистрыНакопления.ТоварыКОтгрузке.ТекстЗапросаОсталосьОформить(Отбор);
	
	Запрос.Текст = ТекстЗапросаОсталосьОформить;
	
	Запрос.УстановитьПараметр("Распоряжения", РаспоряженияДляОрдеров);
	Запрос.УстановитьПараметр("Регистратор",   РегистраторДляОрдеров);
	Если ОтборПоСкладу Тогда
		Запрос.УстановитьПараметр("Склад", ПараметрыЗаполнения.Склад);
	КонецЕсли;
	
	ТаблицаОрдера = Запрос.Выполнить().Выгрузить();
	
	ТаблицаОрдера.Колонки.Количество.Имя   = "КоличествоВОрдере";
	ТаблицаОрдера.Колонки.Распоряжение.Имя = "ЗаказНаВнутреннееПотребление";
	ТаблицаОрдера.Колонки.Собирается.Имя = "КоличествоСобирается";
	
	// Распределение полученных таблиц
	
	Товары.Индексы.Добавить("ЗаказНаВнутреннееПотребление, " + ПараметрыЗаполнения.КлючевыеПоля);
	
	// Добавление количества заказов
	Ключ = "ЗаказНаВнутреннееПотребление, КодСтроки, " + ПараметрыЗаполнения.КлючевыеПоля;
	
	Условие = "ПО [Количество]";
	НакладныеСервер.РаспределитьКоличество(ТаблицаЗаказы, Товары, "КоличествоВЗаказе", Ключ, Условие, Истина);
	
	// Добавление отдельными строками нераспределенного количества заказов
	НакладныеСервер.ДополнитьТаблицу(ТаблицаЗаказы, Товары, "КоличествоВЗаказе");
	
	// Добавление количества ордеров.
	Ключ = "ЗаказНаВнутреннееПотребление, " + ПараметрыЗаполнения.КлючевыеПоля;
	
	// Есть накладные и заказы
	Условие = "[Количество], [КоличествоВЗаказе], ПО [КоличествоВЗаказе]";
	НакладныеСервер.РаспределитьКоличество(ТаблицаОрдера, Товары, "КоличествоВОрдере", Ключ, Условие, Истина);
	
	// Есть заказы, нет накладных
	Условие = "НЕ [Количество], [КоличествоВЗаказе], ПО [КоличествоВЗаказе]";
	НакладныеСервер.РаспределитьКоличество(ТаблицаОрдера, Товары, "КоличествоВОрдере", Ключ, Условие, Истина);
	
	// Есть накладные, нет заказов
	Условие = "[Количество], НЕ [КоличествоВЗаказе]";
	НакладныеСервер.РаспределитьКоличество(ТаблицаОрдера, Товары, "КоличествоВОрдере", Ключ, Условие, Истина);
	
	// Добавление отдельными строками нераспределенного количества ордеров
	НакладныеСервер.ДополнитьТаблицу(ТаблицаОрдера, Товары, "КоличествоВОрдере");
	
	// Дополнительная информация - сколько товара собирается
	НакладныеСервер.РаспределитьКоличество(ТаблицаОрдера, Товары, "КоличествоСобирается", Ключ, "", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	ИменаРеквизитов = "Склад,Дата";
	
	Возврат ИменаРеквизитов;
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//  Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = ПолноеИмяОбъекта();
	
	ПараметрыСерийСклада = СкладыСервер.ИспользованиеСерийНаСкладе(Объект.Склад, Ложь);
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ПараметрыСерийСклада.ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
	
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаНаВнутренниеНужды);
	
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Назначение");
	
	ПараметрыУказанияСерий.ЭтоНакладная = Истина;
	
	ПараметрыУказанияСерий.ПланированиеОтгрузки = Ложь;
	ПараметрыУказанияСерий.ПланированиеОтбора   = Ложь;
	ПараметрыУказанияСерий.ФактОтбора           = Истина;
	
	ПараметрыУказанияСерий.РегистрироватьСерии = НоменклатураКлиентСервер.НеобходимоРегистрироватьСерии(ПараметрыУказанияСерий);
	
	ПараметрыУказанияСерий.Дата = Объект.Дата;
	
	ПараметрыУказанияСерий.ИменаПолейДляОпределенияРаспоряжения.Добавить("Товары_ЗаказНаВнутреннееПотребление");
	ПараметрыУказанияСерий.ИменаПолейДляОпределенияРаспоряжения.Добавить("Товары_КодСтроки");
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Склад КАК Склад,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Назначение КАК Назначение,
	|	Товары.Серия КАК Серия,
	|	Товары.Количество КАК Количество,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Склад,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Назначение,
	|	Товары.Серия,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры КАК ВидНоменклатуры,
	|	СУММА(Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыДляЗапроса
	|ИЗ
	|	Товары КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Склад,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Назначение,
	|	Товары.Серия,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Склад,
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Назначение,
	|	Серии.Количество
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	&Серии КАК Серии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Склад,
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Назначение,
	|	СУММА(Серии.Количество) КАК Количество
	|ПОМЕСТИТЬ СерииДляЗапроса
	|ИЗ
	|	Серии КАК Серии
	|
	|СГРУППИРОВАТЬ ПО
	|	Серии.Склад,
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 10
	|					ИНАЧЕ 9
	|				КОНЕЦ
	|		КОГДА Склады.ИспользоватьОрдернуюСхемуПриОтгрузке
	|				И &Дата >= Склады.ДатаНачалаОрдернойСхемыПриОтгрузке
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
	|			ТОГДА ВЫБОР
	|					КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчетСерийПоFEFO
	|						ТОГДА ВЫБОР
	|								КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|										И ТоварыДляЗапроса.Количество > 0
	|									ТОГДА 6
	|								ИНАЧЕ 5
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|									И ТоварыДляЗапроса.Количество > 0
	|								ТОГДА 8
	|							ИНАЧЕ 7
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПоФактуОтбора
	|				И &ФактОтбора
	|				И ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеНаВнутренниеНужды
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|								И ТоварыДляЗапроса.Количество > 0
	|							ИЛИ Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА ВЫБОР
	|								КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
	|									ТОГДА 4
	|								ИНАЧЕ 2
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
	|								ТОГДА 3
	|							ИНАЧЕ 1
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыДляЗапроса КАК ТоварыДляЗапроса
	|			ЛЕВОЕ СОЕДИНЕНИЕ СерииДляЗапроса КАК СерииДляЗапроса
	|			ПО ТоварыДляЗапроса.Номенклатура = СерииДляЗапроса.Номенклатура
	|				И ТоварыДляЗапроса.Характеристика = СерииДляЗапроса.Характеристика
	|				И ТоварыДляЗапроса.Назначение = СерииДляЗапроса.Назначение
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|				ПО ПолитикиУчетаСерий.Склад = Склады.Ссылка
	|			ПО (ПолитикиУчетаСерий.Склад = ТоварыДляЗапроса.Склад)
	|				И ТоварыДляЗапроса.ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка
	|		ПО Товары.Номенклатура = ТоварыДляЗапроса.Номенклатура
	|			И Товары.Характеристика = ТоварыДляЗапроса.Характеристика
	|			И Товары.Назначение = ТоварыДляЗапроса.Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает значение распоряжения на поступление или отгрузку.
//
// Параметры:
//	ЗначенияПолейДляОпределенияРаспоряжения - Структура - состав полей определяется значением
//		поля ИменаПолейДляОпределенияРаспоряжения параметров указания серий этого документа.
//
// Возвращаемое значение:
//  ДокументСсылка - распоряжение на поступление или отгрузку.
//
Функция РаспоряжениеНаВыполнениеСкладскойОперации(ЗначенияПолейДляОпределенияРаспоряжения) Экспорт
	
	Если ЗначенияПолейДляОпределенияРаспоряжения.Товары_КодСтроки <> 0 Тогда 
		Возврат ЗначенияПолейДляОпределенияРаспоряжения.Товары_ЗаказНаВнутреннееПотребление;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Возвращает список всех хоз. операций, используемых в документе.
// 
// Возвращаемое значение:
// 	Массив - Cписок всех хоз. операций, используемых в документе.
//
Функция ХозяйственныеОперацииДокумента() Экспорт

	СписокОпераций = Новый Массив;
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию);
	
	ВнутреннееПотреблениеТоваровЛокализация.ХозяйственныеОперацииДокумента(СписокОпераций);	
	
	Возврат СписокОпераций;
	
КонецФункции

// Функция определяет реквизиты выбранного документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВнутреннееПотреблениеТоваров - Ссылка на документ.
//
// Возвращаемое значение:
//	Структура - реквизиты внутреннего потребления товаров.
//
Функция РеквизитыДокумента(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Организация КАК Организация
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументСсылка
	|");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Дата = Выборка.Дата;
		Организация = Выборка.Организация;
	Иначе
		Дата = Дата(1,1,1);
		Организация = Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("Дата, Организация",
		Дата,
		Организация,);
	
	Возврат СтруктураРеквизитов;

КонецФункции

// Заполняет массив реквизитов, зависимых от хозяйственной операции документа.
//
// Параметры:
//  ХозяйственнаяОперация	 - ПеречислениеСсылка.ХозяйственныеОперации	 -
//  МассивВсехРеквизитов	 - Массив									 - Массив всех реквизитов, зависимых от хозяйственной операции
//  МассивРеквизитовОперации - Массив									 - Массив имен реквизитов, используемыз в выбранной хозяйственной операции.
//
Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(ХозяйственнаяОперация, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	МассивВсехРеквизитов = Новый Массив;
	МассивВсехРеквизитов.Добавить("Товары.СтатьяРасходов");
	МассивВсехРеквизитов.Добавить("Товары.АналитикаРасходов");
	МассивВсехРеквизитов.Добавить("Товары.АналитикаАктивовПассивов");
	
	МассивРеквизитовОперации = Новый Массив;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию Тогда
		
		МассивРеквизитовОперации.Добавить("Товары.СтатьяРасходов");
		МассивРеквизитовОперации.Добавить("Товары.АналитикаРасходов");
		МассивРеквизитовОперации.Добавить("Товары.АналитикаАктивовПассивов");
		МассивРеквизитовОперации.Добавить("Подразделение");
	
	КонецЕсли;
	
	ВнутреннееПотреблениеТоваровЛокализация.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации);
	
КонецПроцедуры

// Устанавливает условное оформление типа документа в динамическом списке по хозяйственной операции документа.
//
// Параметры:
//  Список - ДинамическийСписок - Динамической список формы.
//
Процедура УстановитьУсловноеОформлениеСписка(Список) Экспорт
	
	ОформляемоеПоле = "Тип";
	
	// Списание на активы/пассивы
	
	Элемент = Список.КомпоновщикНастроек.ФиксированныеНастройки.УсловноеОформление.Элементы.Добавить();
	Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ОформляемоеПоле);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Тип");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Списание на расходы'"));
	
	ВнутреннееПотреблениеТоваровЛокализация.УстановитьУсловноеОформлениеСписка(Список);
	
КонецПроцедуры

// Инициализирует параметры заполнения вида деятельности НДС
//
// Параметры:
//  Объект - ДокументОбъект.ВнутреннееПотреблениеТоваров, ДанныеФормыСтруктура - документ, для которого необходимо получить параметры.
// 
// Возвращаемое значение:
//  Структура - структура параметров, см. УчетНДСУПКлиентСервер.ПараметрыЗаполненияВидаДеятельностиНДС().
//
Функция ПараметрыЗаполненияВидаДеятельностиНДС(Объект) Экспорт
	
	ПараметрыЗаполнения = УчетНДСУПКлиентСервер.ПараметрыЗаполненияВидаДеятельностиНДС();
	
	ПараметрыЗаполнения.Организация             = Объект.Организация;
	ПараметрыЗаполнения.Дата                    = Объект.Дата;
	ПараметрыЗаполнения.Склад                   = Объект.Склад;
	ПараметрыЗаполнения.Договор                 = Неопределено;
	ПараметрыЗаполнения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию Тогда
		ПараметрыЗаполнения.СписаниеТоваровИРаботНаСтатьи = Истина;
	КонецЕсли;
	
	
	ВнутреннееПотреблениеТоваровЛокализация.ПараметрыЗаполненияВидаДеятельностиНДС(Объект, ПараметрыЗаполнения);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

#КонецОбласти


// Осуществляет инициализацию структуры состояния выполнения документа
//
// Возвращаемое значение:
//  Структура - содержит следующие ключи:
//     * ВыводитьТаблицыОтгрузка   - Число -
//     * ЭтоНакладная              - Булево -
//     * СкладВШапке               - Булево -
//     * ТекстТоварУслугаОтгрузка  - Строка -
//     * ИмяПоляНакладнаяПоЗаказам - Строка -
//
Функция СтруктураСостояниеВыполненияДокумента() Экспорт
	
	СтруктураСостояние = Отчеты.СостояниеВыполненияДокументов.ИнициализироватьСтруктуруСостояниеВыполненияДокумента();
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтгрузка", 1);
	СтруктураСостояние.Вставить("ЭтоНакладная", Истина);
	СтруктураСостояние.Вставить("СкладВШапке", Истина);
	СтруктураСостояние.Вставить("ТекстТоварУслугаОтгрузка", НСтр("ru = 'Товар'"));
	СтруктураСостояние.Вставить("ИмяПоляНакладнаяПоЗаказам", "ПотреблениеПоЗаказам");
	
	Возврат СтруктураСостояние;
	
КонецФункции

Функция ОписаниеФормыДокументаДляЗаполненияРеквизитовСвязанныхСНаправлениемДеятельности() Экспорт
	
	СтруктураОбъекта = НаправленияДеятельностиСервер.СтруктураОбъекта();
	СтруктураОбъекта.Вставить("ВТЧНазначениеОтгрузки", Истина);
	Возврат СтруктураОбъекта;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)
	|	И ЗначениеРазрешено(Склад)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ЗаполнениеДокументаПоЗаказамОрдерам

Функция ДанныеТаблицыТоварыДокумента(Накладная) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки                  КАК НомерСтроки,
	|	Таблица.Номенклатура                 КАК Номенклатура,
	|	Таблица.Характеристика               КАК Характеристика,
	|	Таблица.Упаковка                     КАК Упаковка,
	|	Таблица.КоличествоУпаковок           КАК КоличествоУпаковок,
	|	Таблица.Количество                   КАК Количество,
	|	Таблица.КодСтроки                    КАК КодСтроки,
	|	Таблица.СтатусУказанияСерий          КАК СтатусУказанияСерий,
	|	Таблица.СтатьяРасходов               КАК СтатьяРасходов,
	|	Таблица.АналитикаРасходов            КАК АналитикаРасходов,
	|	ВЫБОР КОГДА Таблица.Ссылка.ПотреблениеПоЗаказам
	|		ТОГДА Таблица.ЗаказНаВнутреннееПотребление
	|		ИНАЧЕ Таблица.Ссылка
	|	КОНЕЦ                                КАК ЗаказНаВнутреннееПотребление,
	|	Таблица.ИдентификаторСтроки          КАК ИдентификаторСтроки,
	|	Таблица.Серия                        КАК Серия,
	|	Таблица.АналитикаУчетаНоменклатуры   КАК АналитикаУчетаНоменклатуры,
	|	Таблица.ГруппаПродукции              КАК ГруппаПродукции,
	|	Таблица.Назначение                   КАК Назначение,
	|
	|	&ВнутреннееПотреблениеТоваров_ТоварыЛокализация
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Накладная";
	
	ВнутреннееПотреблениеТоваровЛокализация.ДобавитьВТекстЗапросаРеквизитыТаблицыТовары(ТекстЗапроса, "Таблица");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Накладная", Накладная);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Ссылка");
	Поля.Добавить("Номер");
	Поля.Добавить("Дата");
	Поля.Добавить("ХозяйственнаяОперация");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда

		СтандартнаяОбработка = Ложь;
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Списание товаров на хознужды %1 от %2'"),
			Данные.Номер,
			Данные.Дата);
		
	ИначеЕсли ЗначениеЗаполнено(Данные.ХозяйственнаяОперация) Тогда

		СтандартнаяОбработка = Ложь;
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 %2 от %3'"),
			Данные.ХозяйственнаяОперация,
			Данные.Номер,
			Данные.Дата);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Параметры.СтрокаПоиска) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Запрос = Новый Запрос;
		
		СтруктураПолей = Новый Структура;
		СтруктураПолей.Вставить("Номенклатура");
		СтруктураПолей.Вставить("Характеристика");
		СтруктураПолей.Вставить("ФизическоеЛицо");
		СтруктураПолей.Вставить("СтатьяРасходов");
		СтруктураПолей.Вставить("АналитикаРасходов");
		
		УсловиеОтбора = "ИСТИНА";
		Для Каждого КлючИЗначениеОтбора Из Параметры.Отбор Цикл
			Если СтруктураПолей.Свойство(КлючИЗначениеОтбора.Ключ) Тогда
				УсловиеОтбора = УсловиеОтбора + "
					|	И Строки." + КлючИЗначениеОтбора.Ключ + " = &" + КлючИЗначениеОтбора.Ключ;
				Запрос.УстановитьПараметр(КлючИЗначениеОтбора.Ключ, КлючИЗначениеОтбора.Значение);
			КонецЕсли;
		КонецЦикла;
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Документы.Ссылка,
		|	Документы.Номер,
		|	Документы.Дата,
		|	Документы.ПометкаУдаления
		|ИЗ
		|	Документ.ВнутреннееПотреблениеТоваров КАК Документы
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееПотреблениеТоваров.Товары КАК Строки
		|	    ПО Строки.Ссылка = Документы.Ссылка
		|ГДЕ
		|	Документы.Номер ПОДОБНО &СтрокаПоиска
		|   И &УсловиеОтбора
		|";
		Запрос.УстановитьПараметр("СтрокаПоиска", Параметры.СтрокаПоиска + "%");
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбора", УсловиеОтбора);
		
		ДанныеВыбора = Новый СписокЗначений;

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекстЗначения = СокрЛП(Выборка.Номер) + " (" + Выборка.Дата + ")";
			
			ЗначениеСписка = Новый Структура;
			ЗначениеСписка.Вставить("Значение", Выборка.Ссылка);
			ЗначениеСписка.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления);
		
			ДанныеВыбора.Добавить(ЗначениеСписка, ТекстЗначения);
			
		КонецЦикла; 	
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Если ИмяРегистра = "ТоварыКОтгрузке" Тогда
		ИсточникиДанных.Вставить("Товары.ЗаказНаВнутреннееПотребление");	
	КонецЕсли;
	
	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт

	// Создание запроса инициализации движений и заполенение его параметров.
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);

	// Формирование текста запроса.
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаЗаказыНаВнутреннееПотребление(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыНаСкладах(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыОрганизацийКПередаче(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыКОформлениюОтчетовКомитенту(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаДвиженияНоменклатураДоходыРасходы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, Регистры);

	// Исполнение запроса и выгрузка полученных таблиц для движений.
	ВнутреннееПотреблениеТоваровЛокализация.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);

КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)

	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);

	Запрос.Текст =
		"ВЫБРАТЬ
		|	Таблица.Дата                           КАК Период,
		|	Таблица.Номер                          КАК Номер,
		|	Таблица.Организация                    КАК Организация,
		|	Таблица.Склад                          КАК Склад,
		|	Таблица.Ссылка                         КАК Ссылка,
		|	Таблица.Подразделение                  КАК Подразделение,
		|	ЕСТЬNULL(Таблица.Подразделение.ВариантОбособленногоУчетаТоваров, ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПустаяСсылка)) КАК ВариантОбособленногоУчетаТоваров,
		|	Таблица.ДатаРаспоряжения               КАК ДатаРаспоряжения,
		|	Таблица.ХозяйственнаяОперация          КАК ХозяйственнаяОперация,
		|	Таблица.ЗаказНаВнутреннееПотребление   КАК ЗаказНаВнутреннееПотребление,
		|	Таблица.ПотреблениеПоЗаказам           КАК ПоЗаказуНаВнутреннееПотребление,
		|	Таблица.ПотреблениеДляДеятельности     КАК ПотреблениеДляДеятельности,
		|	Таблица.НаправлениеДеятельности        КАК НаправлениеДеятельности,
		|	Таблица.Ответственный                  КАК Менеджер,
		|	Таблица.Сделка                         КАК Сделка,
		|	ЕСТЬNULL(Таблица.Сделка.ОбособленныйУчетТоваровПоСделке, ЛОЖЬ) КАК ОбособленныйУчетТоваровПоСделке,
		|	ВЫБОР
		|		КОГДА Таблица.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
		|				И Таблица.Дата >= Таблица.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                  КАК ОрдернаяСхемаПриОтгрузке,
		|	Таблица.Ответственный                  КАК Ответственный,
		|	Таблица.Комментарий                    КАК Комментарий,
		|	Таблица.ПометкаУдаления                КАК ПометкаУдаления,
		|	Таблица.Проведен                       КАК Проведен
		|ИЗ
		|	Документ.ВнутреннееПотреблениеТоваров КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка";

	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Склад",                            Реквизиты.Склад);
	Запрос.УстановитьПараметр("Период",                           Реквизиты.Период);
	Запрос.УстановитьПараметр("ДатаРаспоряжения",                 Реквизиты.ДатаРаспоряжения);
	Запрос.УстановитьПараметр("Организация",                      Реквизиты.Организация);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",            Реквизиты.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ОрдернаяСхемаПриОтгрузке",         Реквизиты.ОрдернаяСхемаПриОтгрузке);
	Запрос.УстановитьПараметр("ЗаказНаВнутреннееПотребление",     Реквизиты.ЗаказНаВнутреннееПотребление);
	Запрос.УстановитьПараметр("ПоЗаказуНаВнутреннееПотребление",  Реквизиты.ПоЗаказуНаВнутреннееПотребление);
	Запрос.УстановитьПараметр("Сделка",                           Реквизиты.Сделка);
	Запрос.УстановитьПараметр("ОбособленныйУчетТоваровПоСделке",  Реквизиты.ОбособленныйУчетТоваровПоСделке);
	Запрос.УстановитьПараметр("ВариантОбособленногоУчетаТоваров", Реквизиты.ВариантОбособленногоУчетаТоваров);
	Запрос.УстановитьПараметр("Подразделение",                    Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("ПотреблениеДляДеятельности",       Реквизиты.ПотреблениеДляДеятельности);
	Запрос.УстановитьПараметр("НаправлениеДеятельности",          Реквизиты.НаправлениеДеятельности);
	Запрос.УстановитьПараметр("Менеджер",                         Реквизиты.Менеджер);
	Запрос.УстановитьПараметр("Валюта",                           Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета"));
	Запрос.УстановитьПараметр("ПустойКлючСвязи",                  Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Запрос.УстановитьПараметр("ПустаяСерия",                      Справочники.СерииНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеНазначение",                 Справочники.Назначения.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("СкладскаяОперация", Перечисления.СкладскиеОперации.ОтгрузкаНаВнутренниеНужды);
	
	Запрос.УстановитьПараметр("Номер",                            Реквизиты.Номер);
	Запрос.УстановитьПараметр("Ответственный",                    Реквизиты.Ответственный);
	Запрос.УстановитьПараметр("Комментарий",                      Реквизиты.Комментарий);
	Запрос.УстановитьПараметр("ПометкаУдаления",                  Реквизиты.ПометкаУдаления);
	Запрос.УстановитьПараметр("Проведен",                         Реквизиты.Проведен);
	
	ЗначенияПараметровПроведения = ЗначенияПараметровПроведения(Реквизиты);
	Для каждого КлючИЗначение Из ЗначенияПараметровПроведения Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла; 
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Функция ЗначенияПараметровПроведения(Реквизиты = Неопределено)

	ЗначенияПараметровПроведения = Новый Структура;
	ЗначенияПараметровПроведения.Вставить("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяОбъекта()));
	ЗначенияПараметровПроведения.Вставить("НазваниеДокумента", НСтр("ru='Внутреннее потребление товаров'"));

	Если Реквизиты <> Неопределено Тогда
		ЗначенияПараметровПроведения.Вставить("НомерНаПечать", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
	КонецЕсли; 
	
	ВнутреннееПотреблениеТоваровЛокализация.ДополнитьЗначенияПараметровПроведения(ЗначенияПараметровПроведения, Реквизиты);

	Возврат ЗначенияПараметровПроведения;
	
КонецФункции

Процедура ИнициализироватьКлючиАналитикиНоменклатуры(Запрос)
	
	Если Запрос.Параметры.Свойство("КлючиАналитикиУчетаНоменклатурыИнициализированы") Тогда
		Возврат;
	КонецЕсли;

	ЗапросАналитик = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТовары.Склад КАК Склад,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Назначение КАК Назначение,
	|	ТаблицаТовары.Серия КАК Серия
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТаблицаВидыЗапасов.ВидЗапасов.ВладелецТовара КАК Склад,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Назначение КАК Назначение,
	|		&ПустаяСерия КАК Серия
	|	ИЗ
	|		Документ.ВнутреннееПотреблениеТоваров.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|	ГДЕ
	|		ТаблицаВидыЗапасов.Ссылка = &Ссылка
	|		И ТаблицаВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТаблицаВидыЗапасов.ВидЗапасов.ВладелецТовара КАК Склад,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|		&ПустоеНазначение КАК Назначение,
	|		&ПустаяСерия КАК Серия
	|	ИЗ
	|		Документ.ВнутреннееПотреблениеТоваров.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|	ГДЕ
	|		ТаблицаВидыЗапасов.Ссылка = &Ссылка
	|		И ТаблицаВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВидыЗапасовВладельца.ВладелецТовара КАК Склад,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Назначение КАК Назначение,
	|		&ПустаяСерия КАК Серия
	|	ИЗ
	|		Документ.ВнутреннееПотреблениеТоваров.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Справочник.ВидыЗапасов КАК ВидыЗапасовВладельца
	|		ПО
	|			ТаблицаВидыЗапасов.ВидЗапасов.ВидЗапасовВладельца = ВидыЗапасовВладельца.Ссылка
	|	ГДЕ
	|		ТаблицаВидыЗапасов.Ссылка = &Ссылка
	|		И ТаблицаВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|		И ВидыЗапасовВладельца.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВидыЗапасовВладельца.ВладелецТовара КАК Склад,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|		&ПустоеНазначение КАК Назначение,
	|		&ПустаяСерия КАК Серия
	|	ИЗ
	|		Документ.ВнутреннееПотреблениеТоваров.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Справочник.ВидыЗапасов КАК ВидыЗапасовВладельца
	|		ПО
	|			ТаблицаВидыЗапасов.ВидЗапасов.ВидЗапасовВладельца = ВидыЗапасовВладельца.Ссылка
	|	ГДЕ
	|		ТаблицаВидыЗапасов.Ссылка = &Ссылка
	|		И ТаблицаВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|		И ВидыЗапасовВладельца.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|		И НЕ &УчитыватьСебестоимостьТоваровПоНазначениям
	|	) КАК ТаблицаТовары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		ТаблицаТовары.Номенклатура = Аналитика.Номенклатура
	|		И ТаблицаТовары.Характеристика = Аналитика.Характеристика
	|		И ТаблицаТовары.Назначение = Аналитика.Назначение
	|		И ТаблицаТовары.Серия = Аналитика.Серия
	|		И ТаблицаТовары.Склад = Аналитика.МестоХранения
	|ГДЕ
	|	Аналитика.Номенклатура ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Склад,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Назначение,
	|	ТаблицаТовары.Серия
	|");
	
	ЗапросАналитик.УстановитьПараметр("Ссылка",                 Запрос.Параметры.Ссылка);
	ЗапросАналитик.УстановитьПараметр("Подразделение",          Запрос.Параметры.Подразделение);
	ЗапросАналитик.УстановитьПараметр("ПустоеНазначение",       Справочники.Назначения.ПустаяСсылка());
	ЗапросАналитик.УстановитьПараметр("ПустаяСерия",            Справочники.СерииНоменклатуры.ПустаяСсылка());
	ЗапросАналитик.УстановитьПараметр("ХозяйственнаяОперация",  Запрос.Параметры.ХозяйственнаяОперация);
	ЗапросАналитик.УстановитьПараметр("УчитыватьСебестоимостьТоваровПоНазначениям",
		Запрос.Параметры.УчитыватьСебестоимостьТоваровПоНазначениям);
	
	Выборка = ЗапросАналитик.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаНоменклатуры.СоздатьКлючАналитики(Выборка)
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КлючиАналитикиУчетаНоменклатурыИнициализированы", Истина);
	
КонецПроцедуры

Функция ТекстЗапросаВтТаблицаСерииТоваров(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтТаблицаСерииТоваров";

	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура                                   КАК Номенклатура,
		|	ТаблицаТовары.Характеристика                                 КАК Характеристика,
		|	ТаблицаТовары.Назначение                                     КАК Назначение,
		|	ТаблицаТовары.Количество                                     КАК Количество,
		|	ТаблицаТовары.СтатусУказанияСерий                            КАК СтатусУказанияСерий,
		|	ВЫБОР КОГДА ТаблицаТовары.СтатусУказанияСерий В(10, 14) ТОГДА
		|			ТаблицаТовары.Серия
		|		КОНЕЦ                                                    КАК Серия,
		|	ТаблицаТовары.НомерСтроки,
		|	0 КАК Порядок,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.СтатусУказанияСерий В (10, 14)
		|			И ТаблицаТовары.КодСтроки = 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КонтролироватьОстатки
		|ПОМЕСТИТЬ ВтТаблицаСерииТоваров
		|ИЗ
		|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И ТаблицаТовары.Количество <> 0
		|	И (ТаблицаТовары.СтатусУказанияСерий В (0, 2, 10, 14)
		|		ИЛИ ТаблицаТовары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСерии.Номенклатура,
		|	ТаблицаСерии.Характеристика,
		|	ТаблицаСерии.Назначение,
		|	ТаблицаСерии.Количество,
		|	МАКСИМУМ(ТаблицаТовары.СтатусУказанияСерий),
		|	ТаблицаСерии.Серия,
		|	МИНИМУМ(ТаблицаСерии.НомерСтроки),
		|	1,
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(ТаблицаТовары.СтатусУказанияСерий) В (6, 8)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КонтролироватьОстатки
		|ИЗ
		|	Документ.ВнутреннееПотреблениеТоваров.Серии КАК ТаблицаСерии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееПотреблениеТоваров.Товары КАК ТаблицаТовары
		|		ПО ТаблицаСерии.Ссылка = ТаблицаТовары.Ссылка
		|			И ТаблицаСерии.Номенклатура = ТаблицаТовары.Номенклатура
		|			И ТаблицаСерии.Характеристика = ТаблицаТовары.Характеристика
		|			И ТаблицаСерии.Назначение = ТаблицаТовары.Назначение
		|ГДЕ
		|	ТаблицаСерии.Ссылка = &Ссылка
		|	И ТаблицаТовары.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаСерии.Номенклатура,
		|	ТаблицаСерии.Характеристика,
		|	ТаблицаСерии.Назначение,
		|	ТаблицаСерии.Серия,
		|	ТаблицаСерии.Количество
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(ТаблицаТовары.СтатусУказанияСерий) В (4, 6, 8)";
		
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаЗаказыНаВнутреннееПотребление(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗаказыНаВнутреннееПотребление";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки                  КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)     КАК ВидДвижения,
		|	&ДатаРаспоряжения                          КАК Период,
		|	ТаблицаТовары.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
		|	ТаблицаТовары.Номенклатура                 КАК Номенклатура,
		|	ТаблицаТовары.Характеристика               КАК Характеристика,
		|	ТаблицаТовары.Серия                        КАК Серия,
		|	ТаблицаТовары.КодСтроки                    КАК КодСтроки,
		|	&Склад                                     КАК Склад,
		|	ТаблицаТовары.Количество                   КАК Заказано,
		|	ТаблицаТовары.Количество                   КАК КОформлению
		|ИЗ
		|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И ТаблицаТовары.КодСтроки <> 0
		|	И &ПоЗаказуНаВнутреннееПотребление
		|
		|";
		
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СвободныеОстатки";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;

	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	&Период                                КАК Период,
		|	&Склад                                 КАК Склад,
		|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
		|	ТаблицаТовары.Характеристика           КАК Характеристика,
		|	ТаблицаТовары.Количество               КАК ВНаличии,
		|	
		|	ВЫБОР КОГДА ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|				ТаблицаТовары.Количество
		|			ИНАЧЕ
		|				0
		|		КОНЕЦ                              КАК ВРезервеПодЗаказ
		|	
		|ИЗ
		|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И ТаблицаТовары.КодСтроки = 0";
		
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыКОтгрузке";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	// Отгрузка по распоряжению с неордерного склада (расход "К отгрузке", "К оформлению").
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Склад                                 КАК Склад,
	|	ТаблицаТовары.ЗаказНаВнутреннееПотребление.Подразделение КАК Получатель,
	|	ТаблицаТовары.ЗаказНаВнутреннееПотребление КАК ДокументОтгрузки,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ВЫБОР КОГДА ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам ТОГДА
	|			ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ	                               КАК Назначение,
	|	ВЫБОР КОГДА ТаблицаТовары.СтатусУказанияСерий В(10, 14) ТОГДА
	|			ТаблицаТовары.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ	                               КАК Серия,
	|	ТаблицаТовары.Количество               КАК КОтгрузке,
	|	ТаблицаТовары.Количество               КАК КОформлению
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ &ОрдернаяСхемаПриОтгрузке
	|	И &ПоЗаказуНаВнутреннееПотребление
	|	И НЕ ТаблицаТовары.КодСтроки = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Оформление накладной ПО распоряжению с ордерного слкада (расход "К оформлению").
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Склад                                 КАК Склад,
	|	ТаблицаТовары.ЗаказНаВнутреннееПотребление.Подразделение КАК Получатель,
	|	ТаблицаТовары.ЗаказНаВнутреннееПотребление КАК ДокументОтгрузки,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ВЫБОР КОГДА ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам ТОГДА
	|			ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		КОНЕЦ                              КАК Назначение,
	|	ВЫБОР КОГДА ТаблицаТовары.СтатусУказанияСерий В(10, 14) ТОГДА
	|			ТаблицаТовары.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ	                               КАК Серия,
	|	0                                      КАК КОтгрузке,
	|	ТаблицаТовары.Количество               КАК КОформлению
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &ОрдернаяСхемаПриОтгрузке
	|	И &ПоЗаказуНаВнутреннееПотребление
	|	И НЕ ТаблицаТовары.КодСтроки = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Выдача распоряжения на отгрузку с ордерного слкада (приход "К отгрузке").
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Склад                                 КАК Склад,
	|	&Подразделение                         КАК Получатель,
	|	&Ссылка                                КАК ДокументОтгрузки,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ВЫБОР КОГДА ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам ТОГДА
	|			ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		КОНЕЦ                              КАК Назначение,
	|	ВЫБОР КОГДА ТаблицаТовары.СтатусУказанияСерий В(10, 14) ТОГДА
	|			ТаблицаТовары.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ	                               КАК Серия,
	|	ТаблицаТовары.Количество               КАК КОтгрузке,
	|	0                                      КАК КОформлению
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &ОрдернаяСхемаПриОтгрузке
	|	И НЕ &ПоЗаказуНаВнутреннееПотребление
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Приход И расход ПО строкам сверхзаказа на любом складе (приход/расход ПО "К отгрузке", "КОформлению").
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Склад                                 КАК Склад,
	|	ТаблицаТовары.ЗаказНаВнутреннееПотребление.Подразделение КАК Получатель,
	|	ТаблицаТовары.ЗаказНаВнутреннееПотребление КАК ДокументОтгрузки,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ВЫБОР КОГДА ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам ТОГДА
	|			ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		КОНЕЦ                              КАК Назначение,
	|	ВЫБОР КОГДА ТаблицаТовары.СтатусУказанияСерий В(10, 14) ТОГДА
	|			ТаблицаТовары.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ	                               КАК Серия,
	|	ТаблицаТовары.Количество               КАК КОтгрузке,
	|	ТаблицаТовары.Количество               КАК КОформлению
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &ПоЗаказуНаВнутреннееПотребление
	|	И ТаблицаТовары.КодСтроки = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Склад                                 КАК Склад,
	|	ТаблицаТовары.ЗаказНаВнутреннееПотребление.Подразделение КАК Получатель,
	|	ТаблицаТовары.ЗаказНаВнутреннееПотребление КАК ДокументОтгрузки,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ВЫБОР КОГДА ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам ТОГДА
	|			ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		КОНЕЦ                              КАК Назначение,
	|	ВЫБОР КОГДА ТаблицаТовары.СтатусУказанияСерий В(10, 14) ТОГДА
	|			ТаблицаТовары.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ	                               КАК Серия,
	|	ВЫБОР 
	|		КОГДА &ОрдернаяСхемаПриОтгрузке ТОГДА 
	|			0 
	|		ИНАЧЕ ТаблицаТовары.Количество 
	|	КОНЕЦ КАК КОтгрузке,
	|	ТаблицаТовары.Количество               КАК КОформлению
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &ПоЗаказуНаВнутреннееПотребление
	|	И ТаблицаТовары.КодСтроки = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Приход И расход ПО накладным НЕ ПО заказу на неордерном складе для доставки (приход/расход ПО "К отгрузке").
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Склад                                 КАК Склад,
	|	&Подразделение                         КАК Получатель,
	|	&Ссылка                                КАК ДокументОтгрузки,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ВЫБОР КОГДА ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам ТОГДА
	|			ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		КОНЕЦ                              КАК Назначение,
	|	ВЫБОР КОГДА ТаблицаТовары.СтатусУказанияСерий В(10, 14) ТОГДА
	|			ТаблицаТовары.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ	                               КАК Серия,
	|	ТаблицаТовары.Количество               КАК КОтгрузке,
	|	0                                      КАК КОформлению
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ &ПоЗаказуНаВнутреннееПотребление
	|	И НЕ &ОрдернаяСхемаПриОтгрузке
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Склад                                 КАК Склад,
	|	&Подразделение                         КАК Получатель,
	|	&Ссылка                                КАК ДокументОтгрузки,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ВЫБОР КОГДА ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам ТОГДА
	|			ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		КОНЕЦ                              КАК Назначение,
	|	ВЫБОР КОГДА ТаблицаТовары.СтатусУказанияСерий В(10, 14) ТОГДА
	|			ТаблицаТовары.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ	                               КАК Серия,
	|	ТаблицаТовары.Количество               КАК КОтгрузке,
	|	0                                      КАК КОформлению
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ &ПоЗаказуНаВнутреннееПотребление
	|	И НЕ &ОрдернаяСхемаПриОтгрузке";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаТоварыНаСкладах(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыНаСкладах";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаСерииТоваров", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаСерииТоваров(Запрос, ТекстыЗапроса)
	КонецЕсли;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	&Период КАК Период,
		|	&Склад КАК Склад,
		|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
		|	ТаблицаТовары.Характеристика           КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
		|			ТОГДА ТаблицаТовары.Назначение
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|	КОНЕЦ                                  КАК Назначение,
		|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
		|	ТаблицаТовары.Порядок                  КАК Порядок,
		|	ТаблицаТовары.Серия                    КАК Серия,
		|	ТаблицаТовары.Количество               КАК ВНаличии,
		|	0                                      КАК КОтгрузке,
		|	ТаблицаТовары.КонтролироватьОстатки    КАК КонтролироватьОстатки
		|ИЗ
		|	ВтТаблицаСерииТоваров КАК ТаблицаТовары
		|ГДЕ
		|	(НЕ &ОрдернаяСхемаПриОтгрузке)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	НомерСтроки";
		
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияСерийТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаСерии.Номенклатура КАК Номенклатура,
	|	ТаблицаСерии.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСерии.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаСерии.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ   	  				  КАК Назначение,
	|	ТаблицаСерии.Серия КАК Серия,
	|	ТаблицаСерии.Количество КАК Количество,
	|	&Склад КАК Отправитель,
	|	ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка) КАК ПомещениеОтправителя,
	|	НЕОПРЕДЕЛЕНО КАК ПомещениеПолучателя,
	|	&СкладскаяОперация КАК СкладскаяОперация,
	|	&Ссылка КАК Документ,
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	НЕ &ОрдернаяСхемаПриОтгрузке КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Серии КАК ТаблицаСерии
	|ГДЕ
	|	ТаблицаСерии.Ссылка = &Ссылка
	|	И ТаблицаСерии.Количество <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаТовары.Серия,
	|	ТаблицаТовары.Количество,
	|	&Склад,
	|	ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка),
	|	НЕОПРЕДЕЛЕНО,
	|	&СкладскаяОперация,
	|	&Ссылка,
	|	&Период,
	|	&Ссылка,
	|	НЕ &ОрдернаяСхемаПриОтгрузке
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса) Экспорт
	
	ИмяРегистра = "ВтВидыЗапасов";
	
	ИнициализироватьКлючиАналитикиНоменклатуры(Запрос);
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаВидыЗапасов.НомерСтроки                КАК НомерСтроки,
		|	Справочник.ВидЗапасовВладельца                КАК ВидЗапасовВладельца,
		|	ТаблицаВидыЗапасов.ВидЗапасов                 КАК ВидЗапасов,
		|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям 
		|		ТОГДА ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры
		|		ИНАЧЕ АналитикаСебестоимости.КлючАналитики
		|	КОНЕЦ                                         КАК АналитикаУчетаСебестоимости,
		|	Аналитика.Номенклатура                        КАК Номенклатура,
		|	Аналитика.Характеристика                      КАК Характеристика,
		|	Аналитика.Назначение                          КАК Назначение,
		|	ТаблицаВидыЗапасов.НомерГТД                   КАК НомерГТД,
		|	ТаблицаВидыЗапасов.Количество                 КАК Количество,
		|	ТаблицаВидыЗапасов.КоличествоПоРНПТ           КАК КоличествоПоРНПТ,
		|	&ХозяйственнаяОперация                        КАК ХозяйственнаяОперация,
		// Если мы списываем товары или комплектующие на статью по модернизации или покупке ОС, НМА
		// то весь входящий НДС приводим к общему знаменателю (всегда ""висит"" остаток на 19 счета).
		|	ВЫБОР
		|		КОГДА ТаблицаВидыЗапасов.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|			И ТаблицаВидыЗапасов.СтатьяРасходов.ВидЦенностиНДС В (ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОС), ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НМА))
		|			И ТаблицаВидыЗапасов.СтатьяРасходов.ВариантРаздельногоУчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРаздельногоУчетаНДС.Распределение)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ВводОСВэксплуатацию)
		|		КОГДА ТаблицаВидыЗапасов.СтатьяРасходов.ВариантРаздельногоУчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРаздельногоУчетаНДС.Распределение)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
		|	ИНАЧЕ
		|		&ПотреблениеДляДеятельности
		|	КОНЕЦ                                         КАК НалогообложениеНДС,
		|	ТаблицаВидыЗапасов.СтатьяРасходов             КАК СтатьяРасходов,
		|	ТаблицаВидыЗапасов.АналитикаРасходов          КАК АналитикаРасходов,
		|	ТаблицаВидыЗапасов.АналитикаАктивовПассивов   КАК АналитикаАктивовПассивов,
 		|	ТаблицаВидыЗапасов.ВидЗапасовПолучателя       КАК КорВидЗапасов,
		|	КлючиКомитента.КлючАналитики                  КАК АналитикаКомитента,
		|	КлючиКомитентаБезНазначения.КлючАналитики     КАК АналитикаКомитентаБезНазначения,
		|	ВЫБОР КОГДА Справочник.ВладелецТовара ССЫЛКА Справочник.Организации
		|		ТОГДА АналитикаРасчетовИнтеркампани.КлючАналитики
		|		ИНАЧЕ АналитикаРасчетов.КлючАналитики
		|	КОНЕЦ                                         КАК АналитикаРасчетовСКомитентом,
		|	КлючиКомитента.МестоХранения				  КАК Комитент,
		|	ТаблицаВидыЗапасов.ВидЗапасов.ТипЗапасов      КАК ТипЗапасов,
		|	ТаблицаВидыЗапасов.ИдентификаторСтроки        КАК ИдентификаторСтроки,
		|	КлючиПроизводства.КлючАналитики               КАК АналитикаПроизводства,
		|	Аналитика.СкладскаяТерритория.ЦеховаяКладовая КАК ЦеховаяКладовая
		|
		|ПОМЕСТИТЬ ВтВидыЗапасов
		|ИЗ
		|	Документ.ВнутреннееПотреблениеТоваров.ВидыЗапасов КАК ТаблицаВидыЗапасов
		|
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Справочник.ВидыЗапасов КАК Справочник
		|	ПО
		|		ТаблицаВидыЗапасов.ВидЗапасов = Справочник.Ссылка
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
		|	ПО
		|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.Ссылка
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.АналитикаУчетаНоменклатуры КАК КлючиКомитента
		|	ПО
		|		Аналитика.Номенклатура = КлючиКомитента.Номенклатура
		|		И Аналитика.Характеристика = КлючиКомитента.Характеристика
		|		И Аналитика.Назначение = КлючиКомитента.Назначение
		|		И ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) = КлючиКомитента.Серия
		|		И ТаблицаВидыЗапасов.ВидЗапасов.ВладелецТовара = КлючиКомитента.МестоХранения
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.АналитикаУчетаНоменклатуры КАК КлючиКомитентаБезНазначения
		|	ПО
		|		КлючиКомитента.Номенклатура = КлючиКомитентаБезНазначения.Номенклатура
		|		И КлючиКомитента.Характеристика = КлючиКомитентаБезНазначения.Характеристика
		|		И ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) = КлючиКомитентаБезНазначения.Назначение
		|		И КлючиКомитента.Серия = КлючиКомитентаБезНазначения.Серия
		|		И ТаблицаВидыЗапасов.ВидЗапасов.ВладелецТовара = КлючиКомитентаБезНазначения.МестоХранения
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.АналитикаУчетаНоменклатуры КАК КлючиПроизводства
		|	ПО
		|		Аналитика.Номенклатура = КлючиПроизводства.Номенклатура
		|		И Аналитика.Характеристика = КлючиПроизводства.Характеристика
		|		И Аналитика.Назначение = КлючиПроизводства.Назначение
		|		И ТаблицаВидыЗапасов.Серия = КлючиПроизводства.Серия
		|		И &Подразделение = КлючиПроизводства.МестоХранения
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаСебестоимости
		|	ПО Аналитика.Номенклатура = АналитикаСебестоимости.Номенклатура
		|		И Аналитика.Характеристика = АналитикаСебестоимости.Характеристика
		|		И Аналитика.Серия = АналитикаСебестоимости.Серия
		|		И Аналитика.МестоХранения = АналитикаСебестоимости.МестоХранения
		|		И &ПустоеНазначение = АналитикаСебестоимости.Назначение
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
		|	ПО
		|		ТаблицаВидыЗапасов.СтатьяРасходов = СтатьиРасходов.Ссылка
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаРасчетов
		|		ПО АналитикаРасчетов.Организация = &Организация
		|		И АналитикаРасчетов.Партнер = Справочник.ВладелецТовара
		|		И АналитикаРасчетов.Контрагент = Справочник.Контрагент
		|		И АналитикаРасчетов.Договор = Справочник.Договор
		|		И АналитикаРасчетов.НаправлениеДеятельности = ТаблицаВидыЗапасов.Назначение.НаправлениеДеятельности
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаРасчетовИнтеркампани
		|		ПО АналитикаРасчетовИнтеркампани.Организация = &Организация
		|		И АналитикаРасчетовИнтеркампани.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|		И АналитикаРасчетовИнтеркампани.Контрагент = Справочник.Контрагент
		|		И АналитикаРасчетовИнтеркампани.Договор = Справочник.Договор
		|		И АналитикаРасчетов.НаправлениеДеятельности = ТаблицаВидыЗапасов.Назначение.НаправлениеДеятельности
		|ГДЕ
		|	ТаблицаВидыЗапасов.Ссылка = &Ссылка";
		
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыОрганизаций";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаВидыЗапасов.НомерСтроки КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	&Период КАК Период,
		|	&Склад КАК Склад,
		|	&Организация КАК ОрганизацияОтгрузки,
		|	ВЫБОР КОГДА ТаблицаВидыЗапасов.ВидЗапасов.РеализацияЗапасовДругойОрганизации ТОГДА
		|		ТаблицаВидыЗапасов.ВидЗапасовВладельца.Организация
		|	ИНАЧЕ
		|		&Организация
		|	КОНЕЦ КАК Организация,
		|
		|	ВЫБОР КОГДА ТаблицаВидыЗапасов.ВидЗапасов.РеализацияЗапасовДругойОрганизации ТОГДА
		|		ТаблицаВидыЗапасов.ВидЗапасовВладельца
		|	ИНАЧЕ
		|		ТаблицаВидыЗапасов.ВидЗапасов
		|	КОНЕЦ КАК ВидЗапасов,
		|
		|	ТаблицаВидыЗапасов.Номенклатура КАК Номенклатура,
		|	ТаблицаВидыЗапасов.Характеристика КАК Характеристика,
		|	ТаблицаВидыЗапасов.НомерГТД КАК НомерГТД,
		|	ТаблицаВидыЗапасов.Количество КАК Количество,
		|	ТаблицаВидыЗапасов.КоличествоПоРНПТ КАК КоличествоПоРНПТ,
		|	ВЫБОР
		|		КОГДА ТаблицаВидыЗапасов.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
		|				И ТаблицаВидыЗапасов.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|			ТОГДА
		|				ВЫБОР ТаблицаВидыЗапасов.СтатьяРасходов.ВидЦенностиНДС
		|					КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОС) ТОГДА
		|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВСоставОС)
		|					КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОбъектыНезавершенногоСтроительства) ТОГДА
		|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВСоставОС)
		|					КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НМА) ТОГДА
		|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВСоставНМА)
		|				КОНЕЦ
		|		КОГДА ТаблицаВидыЗапасов.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
		|				И ТаблицаВидыЗапасов.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаПрочиеЦели)
		|		
		|		КОГДА ТаблицаВидыЗапасов.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиАктивовПассивов
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаПрочиеЦели)
		|		ИНАЧЕ
		|			&ХозяйственнаяОперация_Локализация
		|	КОНЕЦ КАК ХозяйственнаяОперация,
		|
		|	ТаблицаВидыЗапасов.НалогообложениеНДС КАК НалогообложениеНДС,
		|
		|	ТаблицаВидыЗапасов.СтатьяРасходов КАК СтатьяРасходов,
		|	ТаблицаВидыЗапасов.АналитикаРасходов КАК АналитикаРасходов,
		|	ТаблицаВидыЗапасов.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
		|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|
		|	ВЫБОР КОГДА ТаблицаВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар) ТОГДА
		|		ТаблицаВидыЗапасов.АналитикаКомитента
		|	ИНАЧЕ
		|		НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК КорАналитикаУчетаНоменклатуры,
		|	ВЫБОР КОГДА ТаблицаВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар) ТОГДА
		|		НЕОПРЕДЕЛЕНО
		|	ИНАЧЕ
		|		ТаблицаВидыЗапасов.КорВидЗапасов
		|	КОНЕЦ КАК КорВидЗапасов
		|ИЗ
		|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	ВнутреннееПотреблениеТоваровЛокализация.ДополнитьТекстЗапросаТаблицаТоварыОрганизаций(ТекстЗапроса);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыОрганизацийКПередаче(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыОрганизацийКПередаче";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки                     КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)             КАК ВидДвижения,
	|	&Период                                            КАК Период,
	|	&Склад                                             КАК Склад,
	|	ТаблицаВидыЗапасов.ВидЗапасовВладельца.Организация КАК ОрганизацияВладелец,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры      КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов                      КАК ВидЗапасовПродавца,
	|	ТаблицаВидыЗапасов.НомерГТД                        КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Номенклатура                    КАК Номенклатура,
	|	ТаблицаВидыЗапасов.Характеристика                  КАК Характеристика,
	|	ТаблицаВидыЗапасов.Количество                      КАК Количество,
	|	&ХозяйственнаяОперация                             КАК ХозяйственнаяОперация,
	|	ТаблицаВидыЗапасов.НалогообложениеНДС              КАК НалогообложениеНДС
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|ГДЕ
	|	ТаблицаВидыЗапасов.ВидЗапасов.РеализацияЗапасовДругойОрганизации
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыКОформлениюОтчетовКомитенту(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыКОформлениюОтчетовКомитенту";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ИнициализироватьКлючиАналитикиНоменклатуры(Запрос);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки            КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)    КАК ВидДвижения,
	|	&Период                                   КАК Период,
	|	ТаблицаВидыЗапасов.ВидЗапасов             КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.АналитикаКомитентаБезНазначения КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов.Валюта      КАК Валюта,
	|	ТаблицаВидыЗапасов.НомерГТД               КАК НомерГТД,
	|	0                                         КАК Количество,
	|	0                                         КАК СуммаВыручки,
	|	ТаблицаВидыЗапасов.Количество             КАК КоличествоСписано,
	|	0                                         КАК КоличествоКОформлению,
	|	0                                         КАК СуммаВыручкиКОформлению,
	|	ТаблицаВидыЗапасов.Количество             КАК КоличествоСписаноКОформлению,
	|	ТаблицаВидыЗапасов.Номенклатура           КАК Номенклатура,
	|	ТаблицаВидыЗапасов.Характеристика         КАК Характеристика,
	|	&ХозяйственнаяОперация                    КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                              КАК КорВидЗапасов,
	|	НЕОПРЕДЕЛЕНО                              КАК КорАналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.НалогообложениеНДС     КАК НалогообложениеНДС
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|ГДЕ
	|	ТаблицаВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	ИмяРегистра = "СебестоимостьТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	1 КАК Порядок,
	|	Строки.НомерСтроки КАК НомерСтрокиДокумента,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	ВЫБОР КОГДА Строки.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар) ТОГДА
	|			Строки.АналитикаКомитентаБезНазначения
	|		ИНАЧЕ
	|			ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям 
	|				ТОГДА Строки.АналитикаУчетаНоменклатуры
	|				ИНАЧЕ Строки.АналитикаУчетаСебестоимости
	|			КОНЕЦ
	|	КОНЕЦ КАК АналитикаУчетаНоменклатуры,
	|	&Организация КАК Организация,
	|	ВЫБОР КОГДА Строки.ЦеховаяКладовая И Строки.ТипЗапасов <> ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар) 
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|	КОНЕЦ КАК РазделУчета,
	|
	|	ВЫБОР
	|		КОГДА Строки.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар) ТОГДА
	|			НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ
	|			Строки.ВидЗапасов
	|		КОНЕЦ КАК ВидЗапасов,
	|
	|	Строки.Количество КАК Количество,
	|	0 КАК СтоимостьРегл,
	|	ВЫБОР
	|		КОГДА &ХозяйственнаяОперация_Условие1
	|			ТОГДА &ХозяйственнаяОперация_Значение1
	|		КОГДА &ХозяйственнаяОперация_Условие2
	|			ТОГДА &ХозяйственнаяОперация_Значение2
	|		КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|				И Строки.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА
	|				ВЫБОР 
	|					КОГДА Строки.СтатьяРасходов.ВидЦенностиНДС В (
	|							ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОС),
	|							ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОбъектыНезавершенногоСтроительства))
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВСоставОС)
	|					КОГДА Строки.СтатьяРасходов.ВидЦенностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НМА)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВСоставНМА)
	|				КОНЕЦ
	|		КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|				И Строки.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаПрочиеЦели)
	|		КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиАктивовПассивов
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаПрочиеЦели)
	|		ИНАЧЕ
	|			&ХозяйственнаяОперация
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|
	|	Неопределено КАК КорРазделУчета,
	|	Строки.КорВидЗапасов КАК КорВидЗапасов,
	|	Неопределено КАК КорАналитикаУчетаНоменклатуры,
	|
	|	ВЫБОР КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов ТОГДА 
	|		Строки.СтатьяРасходов
	|	ИНАЧЕ 
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтатьяРасходовСписания,
	|	ВЫБОР КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов ТОГДА 
	|		Строки.АналитикаРасходов 
	|	ИНАЧЕ 
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК АналитикаРасходов,
	|	ВЫБОР КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиАктивовПассивов ТОГДА 
	|		Строки.СтатьяРасходов
	|	ИНАЧЕ 
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтатьяАктивовПассивов,
	|	ВЫБОР КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиАктивовПассивов ТОГДА 
	|		Строки.АналитикаАктивовПассивов 
	|	ИНАЧЕ 
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК АналитикаАктивовПассивов,
	|	Строки.АналитикаРасчетовСКомитентом КАК АналитикаУчетаПоПартнерам,
	|	&Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоСделкам И &ОбособленныйУчетТоваровПоСделке
	|			ТОГДА &Сделка
	|		КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|		 И &ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|			ТОГДА &Менеджер
	|		КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|		 И &ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|			ТОГДА &Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КорАналитикаФинансовогоУчета,
	|	Строки.НалогообложениеНДС КАК КорВидДеятельностиНДС,
	|	ЕСТЬNULL(ПрочиеРасходы.ОрганизацияПолучатель, НЕОПРЕДЕЛЕНО) КАК КорОрганизация,
	|	&НаправлениеДеятельности КАК КорНаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Потребление) КАК ТипЗаписи
	|ИЗ
	|	ВтВидыЗапасов КАК Строки
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтПрочиеРасходы КАК ПрочиеРасходы
	|		ПО ПрочиеРасходы.СтатьяРасходов = Строки.СтатьяРасходов
	|		И ПрочиеРасходы.АналитикаРасходов = Строки.АналитикаРасходов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 КАК Порядок,
	|	Строки.НомерСтроки КАК НомерСтрокиДокумента,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	Строки.АналитикаУчетаСебестоимости КАК АналитикаУчетаНоменклатуры,
	|	&Организация КАК Организация,
	|	ВЫБОР КОГДА Строки.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку)
	|	КОНЕЦ КАК РазделУчета,
	|
	|	Строки.ВидЗапасов КАК ВидЗапасов,
	|
	|	Строки.Количество КАК Количество,
	|	0 КАК СтоимостьРегл,
	|	ВЫБОР
	|		КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|				И Строки.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА
	|				ВЫБОР 
	|					КОГДА Строки.СтатьяРасходов.ВидЦенностиНДС В (
	|							ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОС),
	|							ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОбъектыНезавершенногоСтроительства))
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВСоставОС)
	|					КОГДА Строки.СтатьяРасходов.ВидЦенностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НМА)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВСоставНМА)
	|				КОНЕЦ
	|		КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|				И Строки.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаПрочиеЦели)
	|		КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиАктивовПассивов
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаПрочиеЦели)
	|		ИНАЧЕ
	|			&ХозяйственнаяОперация
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|
	|	Неопределено КАК КорРазделУчета,
	|	Строки.КорВидЗапасов КАК КорВидЗапасов,
	|	Неопределено КАК КорАналитикаУчетаНоменклатуры,
	|
	|	ВЫБОР КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов ТОГДА 
	|		Строки.СтатьяРасходов
	|	ИНАЧЕ 
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтатьяРасходовСписания,
	|	ВЫБОР КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов ТОГДА 
	|		Строки.АналитикаРасходов 
	|	ИНАЧЕ 
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК АналитикаРасходов,
	|	ВЫБОР КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиАктивовПассивов ТОГДА 
	|		Строки.СтатьяРасходов
	|	ИНАЧЕ 
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтатьяАктивовПассивов,
	|	ВЫБОР КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиАктивовПассивов ТОГДА 
	|		Строки.АналитикаАктивовПассивов 
	|	ИНАЧЕ 
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК АналитикаАктивовПассивов,
	|	Строки.АналитикаРасчетовСКомитентом КАК АналитикаУчетаПоПартнерам,
	|	&Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоСделкам И &ОбособленныйУчетТоваровПоСделке
	|			ТОГДА &Сделка
	|		КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|		 И &ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|			ТОГДА &Менеджер
	|		КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|		 И &ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|			ТОГДА &Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КорАналитикаФинансовогоУчета,
	|	Строки.НалогообложениеНДС КАК КорВидДеятельностиНДС,
	|	ЕСТЬNULL(ПрочиеРасходы.ОрганизацияПолучатель, НЕОПРЕДЕЛЕНО) КАК КорОрганизация,
	|	&НаправлениеДеятельности КАК КорНаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Потребление) КАК ТипЗаписи
	|ИЗ
	|	ВтВидыЗапасов КАК Строки
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтПрочиеРасходы КАК ПрочиеРасходы
	|		ПО ПрочиеРасходы.СтатьяРасходов = Строки.СтатьяРасходов
	|		И ПрочиеРасходы.АналитикаРасходов = Строки.АналитикаРасходов
	|ГДЕ
	|	Строки.ТипЗапасов В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца))";
	
	ВнутреннееПотреблениеТоваровЛокализация.ДополнитьТекстЗапросаТаблицаСебестоимостьТоваров(ТекстЗапроса);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДвиженияНоменклатураДоходыРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияНоменклатураДоходыРасходы";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ВЫБОР
	|		КОГДА &ХозяйственнаяОперация_Условие1
	|			ТОГДА &ХозяйственнаяОперация_Значение1
	|		КОГДА &ХозяйственнаяОперация_Условие2
	|			ТОГДА &ХозяйственнаяОперация_Значение2
	|		КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|				И Строки.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА
	|				ВЫБОР 
	|					КОГДА Строки.СтатьяРасходов.ВидЦенностиНДС В (
	|							ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОС),
	|							ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОбъектыНезавершенногоСтроительства))
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВСоставОС)
	|					КОГДА Строки.СтатьяРасходов.ВидЦенностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НМА)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВСоставНМА)
	|				КОНЕЦ
	|		КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|				И Строки.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаПрочиеЦели)
	|		КОГДА Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиАктивовПассивов
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаПрочиеЦели)
	|		ИНАЧЕ
	|			&ХозяйственнаяОперация
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|
	|	ВЫБОР КОГДА Строки.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар) ТОГДА
	|			Строки.АналитикаКомитентаБезНазначения
	|		ИНАЧЕ
	|			ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям 
	|				ТОГДА Строки.АналитикаУчетаНоменклатуры
	|				ИНАЧЕ Строки.АналитикаУчетаСебестоимости
	|			КОНЕЦ
	|	КОНЕЦ КАК АналитикаУчетаНоменклатуры,
	|	ВЫБОР КОГДА Строки.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар) ТОГДА
	|		Строки.Комитент
	|	ИНАЧЕ
	|		&Склад
	|	КОНЕЦ КАК Склад,
	|
	|	ВЫБОР
	|		КОГДА Строки.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар) ТОГДА
	|			НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ
	|			Строки.ВидЗапасов
	|		КОНЕЦ КАК ВидЗапасов,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) КАК ТипЗапасов,
	|
	|	Строки.СтатьяРасходов КАК СтатьяДоходовРасходов,
	|	Строки.АналитикаРасходов КАК АналитикаРасходов,
	|	Строки.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|
	|	ВЫБОР КОГДА Строки.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар) ТОГДА
	|			ВидыЗапасов.Договор.НаправлениеДеятельности
	|		ИНАЧЕ
	|			ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям 
	|				ТОГДА Строки.АналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности
	|				ИНАЧЕ Строки.АналитикаУчетаСебестоимости.Назначение.НаправлениеДеятельности
	|			КОНЕЦ
	|	КОНЕЦ КАК НаправлениеДеятельностиНоменклатуры,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельностиСтатьи,
	|
	|	Строки.Количество КАК Количество,
	|	0 КАК Стоимость,
	|	0 КАК СтоимостьБезНДС,
	|	0 КАК СтоимостьРегл,
	|
	|	ВЫБОР КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета ТОГДА
	|		Строки.ВидЗапасов
	|	ИНАЧЕ
	|		Строки.Номенклатура
	|	КОНЕЦ КАК ИсточникГФУНоменклатуры
	|
	|ИЗ
	|	ВтВидыЗапасов КАК Строки
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасов
	|	ПО Строки.ВидЗапасов = ВидыЗапасов.Ссылка";
	
	ВнутреннееПотреблениеТоваровЛокализация.ДополнитьТекстЗапросаТаблицаСебестоимостьТоваров(ТекстЗапроса);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК ДатаДокументаИБ,
	|	&Номер                                  КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&Организация                            КАК Организация,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                            КАК Партнер,
	|	НЕОПРЕДЕЛЕНО                            КАК Контрагент,
	|	&НаправлениеДеятельности                КАК НаправлениеДеятельности,
	|	&Склад                                  КАК МестоХранения,
	|	&Подразделение                          КАК Подразделение,
	|	&Ответственный                          КАК Ответственный,
	|	&Комментарий                            КАК Комментарий,
	|	НЕОПРЕДЕЛЕНО                            КАК Валюта,
	|	0                                       КАК Сумма,
	|	НЕОПРЕДЕЛЕНО                            КАК Статус,
	|	&Проведен                               КАК Проведен,
	|	&ПометкаУдаления                        КАК ПометкаУдаления,
	|	ЛОЖЬ                                    КАК ДополнительнаяЗапись,
	|	""""                                    КАК Дополнительно,
	|	&Период                                 КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать                          КАК НомерПервичногоДокумента,
	|	&Период  КАК ДатаОтраженияВУчете";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ОбеспечениеЗаказов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
		// Отгрузка.
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	&Период                                КАК Период,
		|	&Склад                                 КАК Склад,
		|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
		|	ТаблицаТовары.Характеристика           КАК Характеристика,
		|	ТаблицаТовары.Назначение               КАК Назначение,
		|	ТаблицаТовары.Количество               КАК Потребность,
		|	0                                      КАК КЗаказу,
		|	ТаблицаТовары.Количество               КАК НаличиеПодЗаказ
		|
		|ИЗ
		|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И ТаблицаТовары.КодСтроки = 0
		|	И ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// Потребность.
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	&Период                                КАК Период,
		|	&Склад                                 КАК Склад,
		|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
		|	ТаблицаТовары.Характеристика           КАК Характеристика,
		|	ТаблицаТовары.Назначение               КАК Назначение,
		|	ТаблицаТовары.Количество               КАК Потребность,
		|	ТаблицаТовары.Количество               КАК КЗаказу,
		|	0                                      КАК НаличиеПодЗаказ
		|
		|ИЗ
		|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И ТаблицаТовары.КодСтроки = 0
		|	И ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтИсходныеПрочиеРасходы";
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|	ТаблицаРасходы.СтатьяРасходов КАК СтатьяРасходов,
	|	ТаблицаРасходы.АналитикаРасходов КАК АналитикаРасходов,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК ВидДеятельностиНДС,
	|
	|	0 КАК СуммаСНДС,
	|	0 КАК СуммаБезНДС,
	|	0 КАК СуммаБезНДСУпр,
	|	0 КАК СуммаСНДСРегл,
	|	0 КАК СуммаБезНДСРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаНоменклатуры
	|
	|ПОМЕСТИТЬ ВтИсходныеПрочиеРасходы
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаРасходы
	|ГДЕ
	|	ТаблицаРасходы.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса) Экспорт
	
	ИмяРегистра = "ВтПрочиеРасходы";
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтИсходныеПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаВтПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт

	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	ПолноеИмяДокумента = "Документ.ВнутреннееПотреблениеТоваров";
	
	ВЗапросеЕстьИсточник = Истина;
	
	ЗначенияПараметров = ЗначенияПараметровПроведения();
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("ОрдернаяСхемаПриОтгрузке", 
		"ВЫБОР
		|		КОГДА ТаблицаТовары.Ссылка.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
		|				И ТаблицаТовары.Ссылка.Дата >= ТаблицаТовары.Ссылка.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ");
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать", """""");
	ПереопределениеРасчетаПараметров.Вставить("ПоЗаказуНаВнутреннееПотребление",
		"ТаблицаТовары.Ссылка.ПотреблениеПоЗаказам");
	
	Если ИмяРегистра = "ТоварыКОтгрузке" Тогда
		ТекстЗапроса = ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";
	
	ИначеЕсли ИмяРегистра = "СвободныеОстатки" Тогда
		ТекстЗапроса = ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";
	
	ИначеЕсли ИмяРегистра = "ЗаказыНаВнутреннееПотребление" Тогда
		ТекстЗапроса = ТекстЗапросаТаблицаЗаказыНаВнутреннееПотребление(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "";
		ВЗапросеЕстьИсточник = Ложь;
	
	Иначе
		
		ТекстЗапроса = ВнутреннееПотреблениеТоваровЛокализация.АдаптированныйТекстЗапросаДвиженийПоРегистру(
						ИмяРегистра, 
						СинонимТаблицыДокумента, 
						ВЗапросеЕстьИсточник, 
						ПереопределениеРасчетаПараметров);
						
	КонецЕсли;
	
	Если ТекстЗапроса = Неопределено Тогда
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов"
		ИЛИ ИмяРегистра = "ДокументыПоОС"
		ИЛИ ИмяРегистра = "ДокументыПоНМА" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ВЗапросеЕстьИсточник,
										ПереопределениеРасчетаПараметров);
	Иначе	
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ПереопределениеРасчетаПараметров);
	КонецЕсли; 

	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Описание параметров процедуры см. в ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел().
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	// Определим доступны ли текущему пользователю показатели группы
	Доступность =
		(ОбщиеПараметрыЗапросов.ЭтоПолноправныйПользователь
			Или ПравоДоступа("Просмотр",  Метаданные.Документы.ВнутреннееПотреблениеТоваров))
		И (ПравоДоступа("Добавление", Метаданные.Документы.ВнутреннееПотреблениеТоваров)
			ИЛИ ПравоДоступа("Изменение", Метаданные.Документы.ВнутреннееПотреблениеТоваров))
		И ПравоДоступа("Просмотр",  Метаданные.Документы.ЗаказНаВнутреннееПотребление)
		И ПравоДоступа("Чтение",    Метаданные.РегистрыНакопления.ЗаказыНаВнутреннееПотребление)
		И ПравоДоступа("Чтение",    Метаданные.РегистрыНакопления.ТоварыКОтгрузке)
		И ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаВнутреннееПотребление");
	
	Если НЕ Доступность Тогда
		Возврат;
	КонецЕсли;
	
	ВнутренниеПотребленияТоваровКОформлению = Обработки.ЖурналДокументовВнутреннегоТовародвижения.КоличествоСтрокКОформлению(
		ХозяйственныеОперацииДокумента());
	
	// Заполнение дел.
	// ВнутреннееТовародвижение
	ДелоРодитель = ТекущиеДела.Найти("ВнутреннееТовародвижение", "Идентификатор");
	Если ДелоРодитель = Неопределено Тогда
		ДелоРодитель = ТекущиеДела.Добавить();
		ДелоРодитель.Идентификатор  = "ВнутреннееТовародвижение";
		ДелоРодитель.Представление  = НСтр("ru = 'Внутреннее товародвижение'");
		ДелоРодитель.Владелец       = Метаданные.Подсистемы.Склад;
	КонецЕсли;
	ДелоРодитель.ЕстьДела = ДелоРодитель.ЕстьДела Или ВнутренниеПотребленияТоваровКОформлению > 0;
	
	ПараметрыОткрытия = ПараметрыОткрытияФормыРабочегоМеста();
	ПараметрыОткрытия.ПараметрыФормы.Вставить("КлючНазначенияФормы", "ТекущиеДела");
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ВнутренниеПотребленияТоваровКОформлению";
	Дело.ЕстьДела       = ВнутренниеПотребленияТоваровКОформлению > 0;
	Дело.Представление  = НСтр("ru = 'Внутренние потребления товаров к оформлению'");
	Дело.Количество     = ВнутренниеПотребленияТоваровКОформлению;
	Дело.Важное         = Ложь;
	Дело.Форма          = ПараметрыОткрытия.ИмяФормы;
	Дело.ПараметрыФормы = ПараметрыОткрытия.ПараметрыФормы;
	Дело.Владелец       = "ВнутреннееТовародвижение";
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если ПравоДоступа("Изменение", Метаданные.Документы.ВнутреннееПотреблениеТоваров) Тогда
		// Внутреннее потребление товаров
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ВнутреннееПотреблениеТоваров";
		КомандаПечати.Представление = ?(ПолучитьФункциональнуюОпцию("БазоваяВерсия"),НСтр("ru = 'Списание товаров на хознужды'"),НСтр("ru = 'Внутреннее потребление товаров'"));
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
	КонецЕсли;

	// Задание на отбор товаров
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьЗаданияНаОтборРазмещениеТоваров";
	КомандаПечати.Идентификатор = "ЗаданиеНаОтборРазмещениеТовара";
	КомандаПечати.Представление = НСтр("ru = 'Задание на отбор товаров'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ДополнительныеПараметры.Вставить("ИмяФормы", "ЗаданиеНаОтбор");

	ВнутреннееПотреблениеТоваровЛокализация.ДобавитьКомандыПечати(КомандыПечати);

КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ВнутреннееПотреблениеТоваров") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ВнутреннееПотреблениеТоваров",
			НСтр("ru = 'Внутреннее потребление товаров'"),
			ПечатьВнутреннееПотреблениеТоваров(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
	
	ВнутреннееПотреблениеТоваровЛокализация.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
КонецПроцедуры

// Функция получает данные для формирования печатной формы отбора товаров из ячеек.
//
Функция ПолучитьДанныеДляПечатнойФормыОтборРазмещениеТоваров(ПараметрыПечати, МассивДокументов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВнутреннееПотреблениеТоваров.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ВнутреннееПотреблениеТоваров.Ссылка) КАК СсылкаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ВнутреннееПотреблениеТоваров.Склад) КАК СкладПредставление,
	|	ВнутреннееПотреблениеТоваров.Склад КАК Склад,
	|	ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)) КАК ПомещениеПредставление,
	|	ВнутреннееПотреблениеТоваров.Дата КАК Дата,
	|	ВнутреннееПотреблениеТоваров.Номер КАК Номер,
	|	ЛОЖЬ КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА ВнутреннееПотреблениеТоваров.Склад.ИспользоватьАдресноеХранениеСправочно
	|				И (НЕ ВнутреннееПотреблениеТоваров.Склад.ИспользоватьАдресноеХранение
	|					ИЛИ ВнутреннееПотреблениеТоваров.Дата < ВнутреннееПотреблениеТоваров.Склад.ДатаНачалаАдресногоХраненияОстатков)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользуетсяСправочноеХранение,
	|	ВЫБОР
	|		КОГДА ВнутреннееПотреблениеТоваров.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|				И ВнутреннееПотреблениеТоваров.Дата >= ВнутреннееПотреблениеТоваров.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НарушенаОрдернаяСхема,
	|	ВнутреннееПотреблениеТоваров.Склад.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры,
	|	ВнутреннееПотреблениеТоваров.Склад.ИспользованиеРабочихУчастков КАК ИспользованиеРабочихУчастков
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров КАК ВнутреннееПотреблениеТоваров
	|ГДЕ
	|	ВнутреннееПотреблениеТоваров.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Серия КАК Серия,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).НаборУпаковок КАК НаборУпаковок,
	|	ТаблицаТовары.Количество КАК Количество
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	(ТаблицаТовары.Ссылка В (&МассивОбъектов)
	|				И НЕ ТаблицаТовары.СтатусУказанияСерий В (2, 4, 6, 8)
	|				И НЕ ТаблицаТовары.Ссылка.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|			ИЛИ ТаблицаТовары.Ссылка.Дата < ТаблицаТовары.Ссылка.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСерии.Ссылка,
	|	МИНИМУМ(ТаблицаСерии.НомерСтроки),
	|	ТаблицаСерии.Номенклатура,
	|	ТаблицаСерии.Характеристика,
	|	ТаблицаСерии.Серия,
	|	ВЫРАЗИТЬ(ТаблицаСерии.Номенклатура КАК Справочник.Номенклатура).НаборУпаковок,
	|	ТаблицаСерии.Количество
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Серии КАК ТаблицаСерии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееПотреблениеТоваров.Товары КАК ТаблицаТовары
	|		ПО ТаблицаСерии.Ссылка = ТаблицаТовары.Ссылка
	|			И ТаблицаСерии.Номенклатура = ТаблицаТовары.Номенклатура
	|			И ТаблицаСерии.Характеристика = ТаблицаТовары.Характеристика
	|ГДЕ
	|	ТаблицаСерии.Ссылка В(&МассивОбъектов)
	|	И (НЕ ТаблицаСерии.Ссылка.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|			ИЛИ ТаблицаТовары.Ссылка.Дата < ТаблицаТовары.Ссылка.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСерии.Ссылка,
	|	ТаблицаСерии.Номенклатура,
	|	ТаблицаСерии.Характеристика,
	|	ТаблицаСерии.Серия,
	|	ТаблицаСерии.Количество,
	|	ТаблицаСерии.НомерСтроки
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ТаблицаТовары.СтатусУказанияСерий) В (2, 4, 6, 8)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.Ссылка.Склад КАК Склад,
	|	МИНИМУМ(ТаблицаТовары.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
	|			ТОГДА NULL
	|		ИНАЧЕ ТаблицаТовары.Серия
	|	КОНЕЦ КАК Серия,
	|	ТаблицаТовары.НаборУпаковок КАК НаборУпаковок,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
	|			ТОГДА ТаблицаТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Упаковка,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТаблицаТоваровСуммированная
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
	|			ТОГДА NULL
	|		ИНАЧЕ ТаблицаТовары.Серия
	|	КОНЕЦ,
	|	ТаблицаТовары.НаборУпаковок,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
	|			ТОГДА ТаблицаТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ТаблицаТовары.Ссылка.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваровСуммированная.Ссылка КАК Ссылка,
	|	ТаблицаТоваровСуммированная.Склад КАК Склад,
	|	ТаблицаТоваровСуммированная.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваровСуммированная.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваровСуммированная.Характеристика КАК Характеристика,
	|	ТаблицаТоваровСуммированная.Серия КАК Серия,
	|	ТаблицаТоваровСуммированная.Номенклатура.Код КАК Код,
	|	ТаблицаТоваровСуммированная.Номенклатура.Артикул КАК Артикул,
	|	ТаблицаТоваровСуммированная.Номенклатура.НаименованиеПолное КАК ПредставлениеНоменклатуры,
	|	ТаблицаТоваровСуммированная.Характеристика.НаименованиеПолное КАК ПредставлениеХарактеристики,
	|	ТаблицаТоваровСуммированная.Серия.Наименование КАК ПредставлениеСерии,
	|	ТаблицаТоваровСуммированная.Количество КАК Количество,
	|	ТаблицаТоваровСуммированная.Количество КАК КоличествоУпаковок,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваровСуммированная.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка.РабочийУчасток, ЗНАЧЕНИЕ(Справочник.РабочиеУчастки.ПустаяСсылка)) КАК РабочийУчасток,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка.ПорядокОбхода, 0) КАК ПорядокОбхода,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка, ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка)) КАК ОсновнаяЯчейка,
	|	ЕСТЬNULL(РазмещениеОстальныеЯчейки.Ячейка.ПорядокОбхода, 0) КАК ПорядокОбходаДополнительнаяЯчейка,
	|	ПРЕДСТАВЛЕНИЕ(РазмещениеОсновнаяЯчейка.Ячейка.РабочийУчасток) КАК ПредставлениеРабочегоУчастка,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка.Код, """") КАК ОсновнаяЯчейкаПредставление,
	|	ЕСТЬNULL(РазмещениеОстальныеЯчейки.Ячейка.Код, """") КАК ЯчейкаПредставление,
	|	ТаблицаТоваровСуммированная.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий КАК НастройкаИспользованияСерий,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваровСуммированная.Упаковка) КАК ПредставлениеЕдининицыИзмеренияУпаковки
	|ИЗ
	|	ТаблицаТоваровСуммированная КАК ТаблицаТоваровСуммированная
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК РазмещениеОсновнаяЯчейка
	|		ПО ТаблицаТоваровСуммированная.Номенклатура = РазмещениеОсновнаяЯчейка.Номенклатура
	|			И (РазмещениеОсновнаяЯчейка.ОсновнаяЯчейка = ИСТИНА)
	|			И (РазмещениеОсновнаяЯчейка.Склад = ТаблицаТоваровСуммированная.Ссылка.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК РазмещениеОстальныеЯчейки
	|		ПО ТаблицаТоваровСуммированная.Номенклатура = РазмещениеОстальныеЯчейки.Номенклатура
	|			И (РазмещениеОстальныеЯчейки.ОсновнаяЯчейка = ЛОЖЬ)
	|			И (РазмещениеОстальныеЯчейки.Склад = ТаблицаТоваровСуммированная.Ссылка.Склад)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ТаблицаТоваровСуммированная.Склад,
	|	РабочийУчасток,
	|	НомерСтроки,
	|	Номенклатура,
	|	Характеристика,
	|	Серия
	|ИТОГИ ПО
	|	Ссылка,
	|	Склад,
	|	РабочийУчасток,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТоваровСуммированная.Ссылка КАК Ссылка,
	|	ТаблицаТоваровСуммированная.Склад КАК Склад,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка.РабочийУчасток, ЗНАЧЕНИЕ(Справочник.РабочиеУчастки.ПустаяСсылка)) КАК РабочийУчасток,
	|	ТаблицаТоваровСуммированная.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоличествоВУпаковке,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.ЕдиницаИзмерения.Представление, ПРЕДСТАВЛЕНИЕ(ТаблицаТоваровСуммированная.Номенклатура.ЕдиницаИзмерения)) КАК ПредставлениеЕдининицыИзмеренияУпаковки
	|ИЗ
	|	ТаблицаТоваровСуммированная КАК ТаблицаТоваровСуммированная
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|		ПО (ТаблицаТоваровСуммированная.Номенклатура = УпаковкиНоменклатуры.Владелец
	|				ИЛИ ТаблицаТоваровСуммированная.НаборУпаковок = УпаковкиНоменклатуры.Владелец)
	|			И (НЕ УпаковкиНоменклатуры.ПометкаУдаления)
	|			И ТаблицаТоваровСуммированная.Количество >= &ТекстЗапросаКоэффициентУпаковки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК РазмещениеОсновнаяЯчейка
	|		ПО ТаблицаТоваровСуммированная.Номенклатура = РазмещениеОсновнаяЯчейка.Номенклатура
	|			И (РазмещениеОсновнаяЯчейка.ОсновнаяЯчейка = ИСТИНА)
	|			И (РазмещениеОсновнаяЯчейка.Склад = ТаблицаТоваровСуммированная.Ссылка.Склад)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Склад,
	|	РабочийУчасток,
	|	НомерСтроки,
	|	КоличествоВУпаковке УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.Ссылка.Склад КАК Склад,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия.Наименование КАК ПредставлениеСерии,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка.РабочийУчасток, ЗНАЧЕНИЕ(Справочник.РабочиеУчастки.ПустаяСсылка)) КАК РабочийУчасток
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК РазмещениеОсновнаяЯчейка
	|		ПО ТаблицаТовары.Номенклатура = РазмещениеОсновнаяЯчейка.Номенклатура
	|			И (РазмещениеОсновнаяЯчейка.ОсновнаяЯчейка = ИСТИНА)
	|			И (РазмещениеОсновнаяЯчейка.Склад = ТаблицаТовары.Ссылка.Склад)
	|ГДЕ
	|	ТаблицаТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
	|	И НЕ ТаблицаТовары.Серия ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Склад,
	|	РабочийУчасток,
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика";

	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"УпаковкиНоменклатуры", Неопределено));
		
	Запрос.УстановитьПараметр("МассивОбъектов", МассивДокументов); 
	МассивРезультатов 			= Запрос.ВыполнитьПакет();
	РезультатПоШапке			= МассивРезультатов[0];
	РезультатПоТабличнойЧасти 	= МассивРезультатов[3];
	РезультатПоУпаковкам		= МассивРезультатов[4];
	РезультатПоСериям			= МассивРезультатов[5];
	
	СтруктураДанныхДляПечати 	= Новый Структура();
	
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке",          РезультатПоШапке);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти", РезультатПоТабличнойЧасти);
	СтруктураДанныхДляПечати.Вставить("РезультатПоУпаковкам",      РезультатПоУпаковкам);
	СтруктураДанныхДляПечати.Вставить("РезультатПоСериям",         РезультатПоСериям);
	
	Возврат СтруктураДанныхДляПечати;
КонецФункции

Функция ПечатьВнутреннееПотреблениеТоваров(МассивОбъектов, ОбъектыПечати)

	ДопКолонка = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьДопКолонку = ЗначениеЗаполнено(ДопКолонка);

	ЗапросПоДокументам = Новый Запрос;
	ЗапросПоДокументам.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ЗапросПоДокументам.Текст =
	"ВЫБРАТЬ
	|	Документ.Ссылка                             КАК Ссылка,
	|	Документ.Номер                              КАК Номер,
	|	Документ.Дата                               КАК Дата,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Документ.Склад)         КАК Склад,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Документ.Подразделение)	КАК Подразделение,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Документ.Организация)   КАК Организация,
	|	Документ.Организация.Префикс                КАК Префикс,
	|	Документ.Товары.(
	|
	|		НомерСтроки КАК НомерСтроки,
	|	" + ?(ВыводитьДопКолонку, "Номенклатура." + ДопКолонка +" КАК ДопКолонка,", "") + "
	|		Номенклатура.НаименованиеПолное     КАК Номенклатура,
	|		Характеристика.НаименованиеПолное   КАК Характеристика,
	|		ВЫБОР
	|			КОГДА Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) ТОГДА
	|				ПРЕДСТАВЛЕНИЕССЫЛКИ(Номенклатура.ЕдиницаИзмерения)
	|			ИНАЧЕ 
	|				ПРЕДСТАВЛЕНИЕССЫЛКИ(Упаковка)
	|		КОНЕЦ              КАК Упаковка,
	|		КоличествоУпаковок КАК Количество
	|
	|	) КАК ТаблицаТовары
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата, Ссылка, НомерСтроки
	|";
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВнутреннееПотреблениеТоваров";

	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		СинонимДокумента = НСтр("ru = 'Списание товаров на хознужды'");
	Иначе
		СинонимДокумента = Метаданные.Документы.ВнутреннееПотреблениеТоваров.Синоним;
	КонецЕсли;

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВнутреннееПотреблениеТоваров.ПФ_MXL_ВнутреннееПотреблениеТоваров");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПодписи   = Макет.ПолучитьОбласть("Подписи");
	Если ВыводитьДопКолонку Тогда
		ОбластьСтрока       = Макет.ПолучитьОбласть("СтрокаДопКолонка");
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицыДопКолонка");
	Иначе
		ОбластьСтрока       = Макет.ПолучитьОбласть("Строка");
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	КонецЕсли;
	
	ПервыйДокумент = Истина;
	ВыборкаДокументы = ЗапросПоДокументам.Выполнить().Выбрать();
	Пока ВыборкаДокументы.Следующий() Цикл
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Вывод заголовка.
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаДокументы);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента);
		ОбластьЗаголовок.Параметры.Заполнить(ВыборкаДокументы);
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабДокумент, Макет, ОбластьЗаголовок, ВыборкаДокументы.Ссылка);
		ТабДокумент.Вывести(ОбластьЗаголовок);
		
		// Вывод шапки.
		Если ВыводитьДопКолонку Тогда
			ОбластьШапкаТаблицы.Параметры.ДопКолонка = ДопКолонка;
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// Вывод строк документа.
		
		ВыборкаСтроки = ВыборкаДокументы.ТаблицаТовары.Выбрать();
		Пока ВыборкаСтроки.Следующий() Цикл
			
			ОбластьСтрока.Параметры.Заполнить(ВыборкаСтроки);
			
			ОбластьСтрока.Параметры.Номенклатура = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				ВыборкаСтроки.Номенклатура,
				ВыборкаСтроки.Характеристика);
			
			ТабДокумент.Вывести(ОбластьСтрока);
			
		КонецЦикла;
		
		// Вывод подвала.
		ТабДокумент.Вывести(ОбластьПодписи);

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДокументы.Ссылка);

	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции
#КонецОбласти

#Область ЗаполнениеДокумента

Процедура ПараметрыЗапросаДляСозданияНаОсновании(ПараметрыЗапросов, ИменаЗапросов, ИменаПодзапросов, ДанныеОтбора)
	
	ПараметрыЗапросов.Вставить("МассивЗаказов",    ДанныеОтбора.МассивЗаказов);
	ПараметрыЗапросов.Вставить("ОтобратьПоЗаказу", Истина);
	ПараметрыЗапросов.Вставить("Склад", ДанныеОтбора.РеквизитыШапки.Склад);
	ПараметрыЗапросов.Вставить("НаправлениеДеятельности", ДанныеОтбора.РеквизитыШапки.НаправлениеДеятельности);
	
	Если ДанныеОтбора.ЗаполнятьПоОрдеру Тогда
		
		ИменаЗапросов.Добавить("ВтЗаказыОтбор");
		ИменаЗапросов.Добавить("ТаблицаОтгружено");
		
		ИменаЗапросов.Добавить("ТаблицаОформить");
		ИменаПодзапросов.Добавить("БлокРегистрЗаказы");
		
		
	Иначе
		
		ИменаЗапросов.Добавить("ВтЗаказыОтбор");
		
		ИменаЗапросов.Добавить("ТаблицаОформить");
		ИменаПодзапросов.Добавить("БлокРегистрЗаказы");
		
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПараметрыЗапросаДляПодбора(ПараметрыЗапросов, ИменаЗапросов, ИменаПодзапросов, ДанныеОтбора)
	
	ПараметрыЗапросов.Вставить("ОтобратьПоЗаказу", ДанныеОтбора.МассивЗаказов.Количество() = 1);
	ПараметрыЗапросов.Вставить("Регистратор",      ДанныеОтбора.РеквизитыШапки.Ссылка);
	ПараметрыЗапросов.Вставить("Организация",      ДанныеОтбора.РеквизитыШапки.Организация);
	ПараметрыЗапросов.Вставить("Склад",            ДанныеОтбора.РеквизитыШапки.Склад);
	ПараметрыЗапросов.Вставить("ХозяйственнаяОперация", ДанныеОтбора.РеквизитыШапки.ХозяйственнаяОперация);
	ПараметрыЗапросов.Вставить("Сделка",                ДанныеОтбора.РеквизитыШапки.Сделка);
	ПараметрыЗапросов.Вставить("НаправлениеДеятельности", ДанныеОтбора.РеквизитыШапки.НаправлениеДеятельности);
	ПараметрыЗапросов.Вставить("ТоварыНакладной",       ДанныеОтбора.ТоварыНакладной);
	ПараметрыЗапросов.Вставить("НакладнаяПоЗаказам",    ДанныеОтбора.НакладнаяПоЗаказам);
	ПараметрыЗапросов.Вставить("УчитыватьСобирается", Истина);
	
	ИменаЗапросов.Добавить("ВтЗаказыОтбор");
	ИменаЗапросов.Добавить("ВтНакладная");
	ИменаЗапросов.Добавить("ТаблицаОтгружено");
	
	ИменаЗапросов.Добавить("ТаблицаОформить");
	ИменаПодзапросов.Добавить("БлокРегистрЗаказы");
	ИменаПодзапросов.Добавить("БлокСторноНакладная");
	ИменаПодзапросов.Добавить("БлокНовыеДвиженияНакладная");
	

КонецПроцедуры

Процедура ПараметрыЗапросаДляПерезаполненияПоОрдерам(ПараметрыЗапросов, ИменаЗапросов, ИменаПодзапросов, ДанныеОтбора)
	
	ПараметрыЗапросов.Вставить("МассивЗаказов",      ДанныеОтбора.МассивЗаказов);
	ПараметрыЗапросов.Вставить("ОтобратьПоЗаказу",   Истина);
	ПараметрыЗапросов.Вставить("Регистратор",        ДанныеОтбора.РеквизитыШапки.Ссылка);
	ПараметрыЗапросов.Вставить("Склад",              ДанныеОтбора.РеквизитыШапки.Склад);
	ПараметрыЗапросов.Вставить("ТоварыНакладной",    ДанныеОтбора.ТоварыНакладной);
	ПараметрыЗапросов.Вставить("НакладнаяПоЗаказам", ДанныеОтбора.НакладнаяПоЗаказам);
	ПараметрыЗапросов.Вставить("УчитыватьСобирается", Истина);
	ПараметрыЗапросов.Вставить("ЗаполнятьПоСобирается", Истина);
	
	ИменаЗапросов.Добавить("ВтЗаказыОтбор");
	ИменаЗапросов.Добавить("ВтНакладная");
	ИменаЗапросов.Добавить("ТаблицаОтгружено");
	
	ИменаЗапросов.Добавить("ТаблицаОформить");
	ИменаПодзапросов.Добавить("БлокРегистрЗаказы");
	ИменаПодзапросов.Добавить("БлокСторноНакладная");
	ИменаПодзапросов.Добавить("БлокНовыеДвиженияНакладная");
	

КонецПроцедуры

Процедура ПараметрыЗапросаДляЗаполненияПоЗаказам(ПараметрыЗапросов, ИменаЗапросов, ИменаПодзапросов, ДанныеОтбора)
	
	ПараметрыЗапросов.Вставить("МассивЗаказов",    ДанныеОтбора.МассивЗаказов);
	ПараметрыЗапросов.Вставить("ОтобратьПоЗаказу", ДанныеОтбора.МассивЗаказов.Количество() = 1);
	ПараметрыЗапросов.Вставить("Регистратор",      ДанныеОтбора.РеквизитыШапки.Ссылка);
	ПараметрыЗапросов.Вставить("Организация",      ДанныеОтбора.РеквизитыШапки.Организация);
	ПараметрыЗапросов.Вставить("Склад",            ДанныеОтбора.РеквизитыШапки.Склад);
	ПараметрыЗапросов.Вставить("ХозяйственнаяОперация", ДанныеОтбора.РеквизитыШапки.ХозяйственнаяОперация);
	ПараметрыЗапросов.Вставить("Сделка",                ДанныеОтбора.РеквизитыШапки.Сделка);
	ПараметрыЗапросов.Вставить("НаправлениеДеятельности", ДанныеОтбора.РеквизитыШапки.НаправлениеДеятельности);
	
	Если ДанныеОтбора.ЗаполнятьПоОрдеру Тогда
		
		ИменаЗапросов.Добавить("ВтЗаказыОтбор");
		ИменаЗапросов.Добавить("ТаблицаОтгружено");
		
		ИменаЗапросов.Добавить("ТаблицаОформить");
		ИменаПодзапросов.Добавить("БлокРегистрЗаказы");
		ИменаПодзапросов.Добавить("БлокСторноНакладная");
		
	
	Иначе
		
		ИменаЗапросов.Добавить("ВтЗаказыОтбор");
		
		ИменаЗапросов.Добавить("ТаблицаОформить");
		ИменаПодзапросов.Добавить("БлокРегистрЗаказы");
		ИменаПодзапросов.Добавить("БлокСторноНакладная");
		

	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаВременнойТаблицыНакладной()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.Количество            КАК Количество,
		|
		|	Таблица.НомерСтроки           КАК НомерСтроки,
		|	Таблица.Номенклатура          КАК Номенклатура,
		|	Таблица.Характеристика        КАК Характеристика,
		|	Таблица.Назначение            КАК Назначение,
		|	Таблица.Серия                 КАК Серия,
		|	Таблица.СтатьяРасходов        КАК СтатьяРасходов,
		|	Таблица.АналитикаРасходов     КАК АналитикаРасходов,
		|	Таблица.ФизическоеЛицо        КАК ФизическоеЛицо,
		|	Таблица.КатегорияЭксплуатации КАК КатегорияЭксплуатации,
		|	Таблица.ГруппаПродукции       КАК ГруппаПродукции,
		|
		|	Таблица.КодСтроки             КАК КодСтроки,
		|	Таблица.Упаковка              КАК Упаковка,
		|
		|	ВЫБОР КОГДА НЕ &НакладнаяПоЗаказам ТОГДА
		|				&Регистратор
		|			ИНАЧЕ
		|				Таблица.ЗаказНаВнутреннееПотребление
		|		КОНЕЦ                     КАК Заказ
		|
		|ПОМЕСТИТЬ ВТНакладная
		|ИЗ
		|	&ТоварыНакладной КАК Таблица
		|;
		|
		|//////////////////////////////////////////////////
		|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВременнойТаблицыРаспоряжений()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗаказНаВнутреннееПотребление.Ссылка КАК Заказ
		|ПОМЕСТИТЬ ВТЗаказыОтбор
		|ИЗ
		|	Документ.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление
		|ГДЕ
		|	ВЫБОР
		|		КОГДА &ОтобратьПоЗаказу ТОГДА
		|			ЗаказНаВнутреннееПотребление.Ссылка В (&МассивЗаказов)
		|		ИНАЧЕ
		|			ЗаказНаВнутреннееПотребление.Организация           = &Организация
		|			И ЗаказНаВнутреннееПотребление.Склад                 = &Склад
		|			И ЗаказНаВнутреннееПотребление.Сделка                = &Сделка
		|			И ЗаказНаВнутреннееПотребление.ХозяйственнаяОперация = &ХозяйственнаяОперация
		|			И ЗаказНаВнутреннееПотребление.НаправлениеДеятельности = &НаправлениеДеятельности
		|	КОНЕЦ
		|	И ЗаказНаВнутреннееПотребление.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&Регистратор КАК Заказ
		|;
		|
		|//////////////////////////////////////////////////
		|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОбъединения(Имена, Тексты)
	
	ТекстОбъединения = "";
	ЭтоПервыйБлок = Истина;
	
	Для Каждого Имя Из Имена Цикл
		
		Если ЭтоПервыйБлок Тогда
			ЭтоПервыйБлок = Ложь;
		Иначе
			
			ТекстОбъединения = ТекстОбъединения + "
			                                      |
			                                      |	ОБЪЕДИНИТЬ ВСЕ
			                                      |
			                                      |";
			
		КонецЕсли;
		
		ТекстОбъединения = ТекстОбъединения + Тексты[Имя];
		
	КонецЦикла;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Набор.Заказ             КАК ЗаказНаВнутреннееПотребление,
		|	Набор.КодСтроки         КАК КодСтроки,
		|
		|	Набор.Номенклатура                     КАК Номенклатура,
		|	Набор.Характеристика                   КАК Характеристика,
		|	МАКСИМУМ(Набор.Назначение)             КАК Назначение,
		|	Набор.Серия                            КАК Серия,
		|	МАКСИМУМ(Набор.Дата)                   КАК Дата,
		|	МАКСИМУМ(Набор.НомерСтроки)            КАК НомерСтроки,
		|	МАКСИМУМ(Набор.ДатаОтгрузки)           КАК ДатаОтгрузки,
		|	МАКСИМУМ(Набор.СтатьяРасходов)         КАК СтатьяРасходов,
		|	МАКСИМУМ(Набор.АналитикаРасходов)      КАК АналитикаРасходов,
		|	МАКСИМУМ(Набор.ФизическоеЛицо)         КАК ФизическоеЛицо,
		|	МАКСИМУМ(Набор.КатегорияЭксплуатации)  КАК КатегорияЭксплуатации,
		|	МАКСИМУМ(Набор.ГруппаПродукции)        КАК ГруппаПродукции,
		|	МАКСИМУМ(Набор.ПрисутствуетВДокументе) КАК ПрисутствуетВДокументе,
		|
		|	МАКСИМУМ(ВЫБОР КОГДА Набор.ПрисутствуетВДокументе ТОГДА
		|				Набор.Упаковка
		|			ИНАЧЕ
		|				НЕОПРЕДЕЛЕНО
		|		КОНЕЦ)                             КАК УпаковкаНакладной,
		|
		|	МАКСИМУМ(ВЫБОР КОГДА Набор.ПрисутствуетВДокументе ТОГДА
		|				НЕОПРЕДЕЛЕНО
		|			ИНАЧЕ
		|				Набор.Упаковка
		|		КОНЕЦ)                             КАК УпаковкаЗаказа,
		|
		|	МАКСИМУМ(ВЫБОР КОГДА Набор.ПрисутствуетВДокументе ТОГДА
		|				Набор.УпаковкаКоэффициент
		|			ИНАЧЕ
		|				НЕОПРЕДЕЛЕНО
		|		КОНЕЦ)                             КАК УпаковкаНакладнойКоэффициент,
		|
		|	МАКСИМУМ(ВЫБОР КОГДА Набор.ПрисутствуетВДокументе ТОГДА
		|				НЕОПРЕДЕЛЕНО
		|			ИНАЧЕ
		|				Набор.УпаковкаКоэффициент
		|		КОНЕЦ)                             КАК УпаковкаЗаказаКоэффициент,
		|
		|
		|	СУММА(Набор.КоличествоВЗаказе)        КАК КоличествоВЗаказе,
		|	СУММА(Набор.КоличествоВНакладной)     КАК КоличествоВНакладной
		|
		|ИЗ ТекстОбъединения КАК Набор
		|
		|СГРУППИРОВАТЬ ПО
		|	Набор.Заказ, Набор.КодСтроки,
		|	Набор.Номенклатура, Набор.Характеристика, Набор.Серия,
		|	ВЫБОР КОГДА Набор.КодСтроки <> 0 ТОГДА
		|				0
		|			ИНАЧЕ
		|				Набор.НомерСтроки
		|		КОНЕЦ
		|
		|ИМЕЮЩИЕ
		|	СУММА(Набор.КоличествоВЗаказе) > 0 ИЛИ СУММА(Набор.КоличествоВНакладной) > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата, Заказ, НомерСтроки
		|;
		|
		|/////////////////////////////////////////////////////////////////////
		|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТекстОбъединения", "(" + ТекстОбъединения + ")");
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОстаткиРегистраЗаказы()
	
	ТекстЗапроса =
		"	ВЫБРАТЬ
		|		ТаблицаОстатки.ЗаказНаВнутреннееПотребление КАК Заказ,
		|		ТаблицаОстатки.КодСтроки          КАК КодСтроки,
		|
		|		ТаблицаОстатки.КОформлениюОстаток КАК КоличествоВЗаказе,
		|		0                                 КАК КоличествоВНакладной,
		|
		|		// Справочная информация.
		|		ТаблицаОстатки.Номенклатура       КАК Номенклатура,
		|		ТаблицаОстатки.Характеристика     КАК Характеристика,
		|
		|		ВЫБОР КОГДА Таблица.ВариантОбеспечения В(
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)) ТОГДА
		|			
		|					Таблица.Ссылка.Назначение
		|			
		|				ИНАЧЕ
		|
		|					ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			
		|			КОНЕЦ                         КАК Назначение,
		|
		|		ТаблицаОстатки.Серия              КАК Серия,
		|		Таблица.Ссылка.Дата               КАК Дата,
		|		Таблица.НомерСтроки               КАК НомерСтроки,
		|		Таблица.ДатаОтгрузки              КАК ДатаОтгрузки,
		|		Таблица.СтатьяРасходов            КАК СтатьяРасходов,
		|		Таблица.АналитикаРасходов         КАК АналитикаРасходов,
		|		Таблица.ГруппаПродукции           КАК ГруппаПродукции,
		|		ЛОЖЬ                              КАК ПрисутствуетВДокументе,
		|
		|		Таблица.Упаковка                          КАК Упаковка,
		|		ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК УпаковкаКоэффициент,
		|
		|		&ЗаказНаВнутреннееПотребление_ТоварыЛокализация
		|	ИЗ
		|		РегистрНакопления.ЗаказыНаВнутреннееПотребление.Остатки(,
		|				(ЗаказНаВнутреннееПотребление, Склад) В(
		|					ВЫБРАТЬ
		|						Таблица.Заказ КАК Заказ,
		|						&Склад КАК Склад
		|					ИЗ
		|						ВТЗаказыОтбор КАК Таблица)) КАК ТаблицаОстатки
		|
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление.Товары КАК Таблица
		|			ПО ТаблицаОстатки.ЗаказНаВнутреннееПотребление = Таблица.Ссылка
		|			 И ТаблицаОстатки.КодСтроки = Таблица.КодСтроки";
	
		ЗаказНаВнутреннееПотреблениеЛокализация.ДобавитьВТекстЗапросаРеквизитыТаблицыТовары(ТекстЗапроса, "Таблица");
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Таблица.Упаковка",
			"Таблица.Номенклатура"));
			
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСторноНакладная()
	
	ТекстЗапроса =
		"	ВЫБРАТЬ
		|		ТаблицаСторно.ЗаказНаВнутреннееПотребление КАК Заказ,
		|		ТаблицаСторно.КодСтроки          КАК КодСтроки,
		|
		|		ТаблицаСторно.КОформлению        КАК КоличествоВЗаказе,
		|		0                                КАК КоличествоВНакладной,
		|
		|		// Справочная информация.
		|		ТаблицаСторно.Номенклатура       КАК Номенклатура,
		|		ТаблицаСторно.Характеристика     КАК Характеристика,
		|
		|		ВЫБОР КОГДА Таблица.ВариантОбеспечения В(
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)) ТОГДА
		|			
		|					Таблица.Ссылка.Назначение
		|			
		|				ИНАЧЕ
		|
		|					ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			
		|			КОНЕЦ                        КАК Назначение,
		|
		|		ТаблицаСторно.Серия              КАК Серия,
		|		Таблица.Ссылка.Дата              КАК Дата,
		|		Таблица.НомерСтроки              КАК НомерСтроки,
		|		Таблица.ДатаОтгрузки             КАК ДатаОтгрузки,
		|		Таблица.СтатьяРасходов           КАК СтатьяРасходов,
		|		Таблица.АналитикаРасходов        КАК АналитикаРасходов,
		|		Таблица.ГруппаПродукции          КАК ГруппаПродукции,
		|		ЛОЖЬ                             КАК ПрисутствуетВДокументе,
		|
		|		Таблица.Упаковка                 КАК Упаковка,
		|		ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК УпаковкаКоэффициент,
		|
		|		&ЗаказНаВнутреннееПотребление_ТоварыЛокализация
		|	ИЗ
		|		РегистрНакопления.ЗаказыНаВнутреннееПотребление КАК ТаблицаСторно
		|
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление.Товары КАК Таблица
		|			ПО Таблица.Ссылка = ТаблицаСторно.ЗаказНаВнутреннееПотребление
		|			 И Таблица.КодСтроки = ТаблицаСторно.КодСтроки
		|
		|	ГДЕ
		|		ТаблицаСторно.Регистратор = &Регистратор
		|		И (ТаблицаСторно.ЗаказНаВнутреннееПотребление, ТаблицаСторно.Склад) В(
		|			ВЫБРАТЬ
		|				Таблица.Заказ КАК Заказ,
		|				&Склад КАК Склад
		|			ИЗ
		|				ВТЗаказыОтбор КАК Таблица)
		|		И ТаблицаСторно.Активность";
		
		ЗаказНаВнутреннееПотреблениеЛокализация.ДобавитьВТекстЗапросаРеквизитыТаблицыТовары(ТекстЗапроса, "Таблица");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Таблица.Упаковка",
			"Таблица.Номенклатура"));
			
	Возврат ТекстЗапроса;
	
КонецФункции


Функция ТекстЗапросаОтгруженоПоОрдерам()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаОстатки.ДокументОтгрузки       КАК ЗаказНаВнутреннееПотребление,
		|	ТаблицаОстатки.Номенклатура           КАК Номенклатура,
		|	ТаблицаОстатки.Характеристика         КАК Характеристика,
		|	ТаблицаОстатки.Серия                  КАК Серия,
		|	ТаблицаОстатки.Назначение             КАК Назначение,
		|	1                                     КАК УпаковкаКоэффициент,
		|	
		|	СУММА(ВЫБОР КОГДА ТаблицаОстатки.ДокументОтгрузки = &Регистратор ТОГДА
		|					ТаблицаОстатки.Собирается
		|				ИНАЧЕ
		|					0
		|		КОНЕЦ)                            КАК Собирается,
		|	
		|	СУММА(ВЫБОР КОГДА ТаблицаОстатки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
		|					ТаблицаОстатки.КОтгрузке
		|				ИНАЧЕ
		|					0
		|			КОНЕЦ
		|		+ ВЫБОР КОГДА ТаблицаОстатки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ТаблицаОстатки.Регистратор <> &Регистратор ТОГДА
		|					- ТаблицаОстатки.КОформлению
		|				ИНАЧЕ
		|					0
		|			КОНЕЦ
		|		+ ВЫБОР КОГДА &ЗаполнятьПоСобирается И ТаблицаОстатки.ДокументОтгрузки = &Регистратор ТОГДА
		|					ТаблицаОстатки.Собирается
		|				ИНАЧЕ
		|					0
		|			КОНЕЦ
		|		 + ТаблицаОстатки.Собрано)         КАК Количество
		|ИЗ
		|	ВТЗаказыОтбор КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОтгрузке КАК ТаблицаОстатки
		|		ПО Таблица.Заказ = ТаблицаОстатки.ДокументОтгрузки
		|		 И &Склад = ТаблицаОстатки.Склад
		|		 И ТаблицаОстатки.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОстатки.ДокументОтгрузки,
		|	ТаблицаОстатки.Номенклатура, ТаблицаОстатки.Характеристика, ТаблицаОстатки.Серия, ТаблицаОстатки.Назначение
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВЫБОР КОГДА ТаблицаОстатки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
		|					ТаблицаОстатки.КОтгрузке
		|				ИНАЧЕ
		|					0
		|			КОНЕЦ
		|		+ ВЫБОР КОГДА ТаблицаОстатки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ТаблицаОстатки.Регистратор <> &Регистратор ТОГДА
		|					- ТаблицаОстатки.КОформлению
		|				ИНАЧЕ
		|					0
		|			КОНЕЦ
		|		+ ВЫБОР КОГДА &УчитыватьСобирается И ТаблицаОстатки.ДокументОтгрузки = &Регистратор ТОГДА
		|					ТаблицаОстатки.Собирается
		|				ИНАЧЕ
		|					0
		|			КОНЕЦ + ТаблицаОстатки.Собрано) > 0
		|;
		|
		|///////////////////////////////////////////////////////////////////
		|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаНовыеДвиженияНакладная()
	
	ТекстЗапроса =
		"	ВЫБРАТЬ
		|		Таблица.Заказ       КАК Заказ,
		|		Таблица.КодСтроки   КАК КодСтроки,
		|		0                   КАК КоличествоВЗаказе,
		|		Таблица.Количество  КАК КоличествоВНакладной,
		|
		|		// Справочная информация.
		|		Таблица.Номенклатура          КАК Номенклатура,
		|		Таблица.Характеристика        КАК Характеристика,
		|		Таблица.Назначение            КАК Назначение,
		|		Таблица.Серия                 КАК Серия,
		|		НЕОПРЕДЕЛЕНО                  КАК Дата,
		|		Таблица.НомерСтроки           КАК НомерСтроки,
		|		НЕОПРЕДЕЛЕНО                  КАК ДатаОтгрузки,
		|		Таблица.СтатьяРасходов        КАК СтатьяРасходов,
		|		Таблица.АналитикаРасходов     КАК АналитикаРасходов,
		|		Таблица.ГруппаПродукции       КАК ГруппаПродукции,
		|		ИСТИНА                        КАК ПрисутствуетВДокументе,
		|
		|		Таблица.Упаковка                          КАК Упаковка,
		|		ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК УпаковкаКоэффициент,
		|
		|		&ЗаказНаВнутреннееПотребление_ТоварыЛокализация
		|	ИЗ
		|		ВтНакладная КАК Таблица";
	
	ЗаказНаВнутреннееПотреблениеЛокализация.ДобавитьВТекстЗапросаРеквизитыТаблицыТовары(ТекстЗапроса, "Таблица");

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВЫРАЗИТЬ(Таблица.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения)",
		"Таблица.Номенклатура"));
			
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Функция ПолноеИмяОбъекта()
	Возврат "Документ.ВнутреннееПотреблениеТоваров";
КонецФункции

#КонецОбласти

#КонецЕсли
