#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.СписаниеБезналичныхДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт
	
	ИсточникиДанных = Новый Соответствие;
	
	Возврат ИсточникиДанных;
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос();
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.УведомлениеОЗачисленииВалюты";
	
	Если ИмяРегистра = "ДенежныеСредстваКВыплате" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаДенежныеСредстваКВыплате(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ДанныеДокумента";
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
		ТекстЗапроса, ПолноеИмяДокумента, СинонимТаблицыДокумента);
	
	Возврат Результат;
	
КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаДенежныеСредстваКВыплате(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет) КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация                                                          КАК Организация,
	|	ДанныеДокумента.БанковскийСчет                                                       КАК БанковскийСчет,
	|	ДанныеДокумента.Валюта                                                               КАК Валюта,
	|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств                                        КАК СтатьяДвиженияДенежныхСредств
	|ИЗ
	|	Документ.УведомлениеОЗачисленииВалюты КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств",
		ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств"));
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаДенежныеСредстваКВыплате(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДенежныеСредстваКВыплате";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(ДанныеДокумента.Дата, ДЕНЬ, ДанныеДокумента.БанковскийСчет.СрокИсполненияПлатежа) КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Ссылка КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	
	|	&БанковскийСчет КАК БанковскийСчетКасса,
	|	
	|	&Организация КАК Получатель,
	|	&Организация КАК Организация,
	|	
	|	ДанныеДокумента.СуммаДокумента КАК Сумма,
	|	
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|	
	|ИЗ
	|	Документ.УведомлениеОЗачисленииВалюты КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ИспользоватьЗаявкиНаРасходованиеДенежныхСредств
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Описание параметров процедуры см. в ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел().
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ИмяФормы = "Обработка.ЖурналДокументовБезналичныеПлатежи.Форма.ФормаСписка";
	ИспользоватьВалютныеПлатежи = ПолучитьФункциональнуюОпцию("ИспользоватьВалютныеПлатежи");
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	// Определим доступны ли текущему пользователю показатели группы
	Доступность = ИспользоватьВалютныеПлатежи
		И (ОбщиеПараметрыЗапросов.ЭтоПолноправныйПользователь
			Или ПравоДоступа("Просмотр", Метаданные.Документы.УведомлениеОЗачисленииВалюты))
		И (ПравоДоступа("Добавление", Метаданные.Документы.УведомлениеОЗачисленииВалюты)
			Или ПравоДоступа("Изменение", Метаданные.Документы.УведомлениеОЗачисленииВалюты));
		
	Если Не Доступность Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет показателей
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(ДанныеРегистра.ЗаявкаНаРасходованиеДенежныхСредств КАК Документ.УведомлениеОЗачисленииВалюты).СрокПредоставленияДокументов < НАЧАЛОПЕРИОДА(&ДатаАктуальности, ДЕНЬ)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПросроченоДел,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРегистра.ЗаявкаНаРасходованиеДенежныхСредств) КАК ВсегоДел
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.СуммаОстаток > 0
	|	И ДанныеРегистра.ЗаявкаНаРасходованиеДенежныхСредств ССЫЛКА Документ.УведомлениеОЗачисленииВалюты
	|";
	
	Результат = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	ДелоРодитель = ТекущиеДела.Добавить();
	ДелоРодитель.Идентификатор  = "УведомленияОЗачисленииВалюты";
	ДелоРодитель.Представление  = НСтр("ru = 'Уведомления о зачислении валюты'");
	ДелоРодитель.Владелец       = Метаданные.Подсистемы.Казначейство;
	ДелоРодитель.ЕстьДела       = (Результат.ВсегоДел > 0);
	
	ПараметрыОтбора = Новый Структура;
	СписокОперацийОплаты = Новый СписокЗначений;
	СписокОперацийОплаты.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет,, Истина);
	ПараметрыОтбора.Вставить("СписокОперацийОплаты", СписокОперацийОплаты);
	ПараметрыОтбора.Вставить("ТекущиеДелаУведомлениеОЗачисленииВалюты", Истина);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "УведомленияОЗачисленииВалютыКПереводу";
	Дело.ЕстьДела       = (Результат.ВсегоДел - Результат.ПросроченоДел > 0);
	Дело.Представление  = НСтр("ru = 'Уведомления о зачислении валюты'");
	Дело.Количество     = Результат.ВсегоДел - Результат.ПросроченоДел;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец       = "УведомленияОЗачисленииВалюты";
	
	ПараметрыОтбора = Новый Структура;
	СписокОперацийОплаты = Новый СписокЗначений;
	СписокОперацийОплаты.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет,, Истина);
	ПараметрыОтбора.Вставить("СписокОперацийОплаты", СписокОперацийОплаты);
	ПараметрыОтбора.Вставить("ТекущиеДелаУведомлениеОЗачисленииВалюты", Истина);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "УведомленияОЗачисленииВалютыПросрочено";
	Дело.ЕстьДела       = (Результат.ПросроченоДел > 0);
	Дело.Представление  = НСтр("ru = 'Перевод просрочен'");
	Дело.Количество     = Результат.ПросроченоДел;
	Дело.Важное         = Истина;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец       = "УведомленияОЗачисленииВалюты";
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли