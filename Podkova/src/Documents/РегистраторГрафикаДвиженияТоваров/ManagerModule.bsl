
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Соотвествие со списком реквизитов, по которым определяется уникальность ключа
// 
// Возвращаемое значение:
//   Соотвествие - ключ - имя реквизита 
//
Функция КлючевыеРеквизиты() Экспорт
	
	Результат = Новый Соответствие;
	Результат.Вставить("Распоряжение");
	
	Возврат Результат;
	
КонецФункции

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	
	
КонецПроцедуры

// Добавляет команду создания документа "Регистратор графика движения товаров".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.РегистраторГрафикаДвиженияТоваров) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.РегистраторГрафикаДвиженияТоваров.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.РегистраторГрафикаДвиженияТоваров);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		
	

		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	Возврат; //В дальнейшем будет добавлен код команд
	
КонецПроцедуры

// Ищет документ регистрации по распоряжению
//
// Параметры:
//  Распоряжение - ДокументСсылка, СправочникСсылка.СоглашенияСПоставщиками, СправочникСсылка.ДоговорыКонтрагентов 
//  Создавать	 - Булево - создавать документ-регистратор, если он не найден по распоряжению 
// 
// Возвращаемое значение:
//  ДокументСсылка.РегистраторГрафикаДвиженияТоваров - ссылка на документ.
//
Функция РегистраторПоРаспоряжению(Распоряжение) Экспорт
	
	Если Не (ТипЗнч(Распоряжение) = Тип("СправочникСсылка.СоглашенияСПоставщиками")
		Или ТипЗнч(Распоряжение) = Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
		Возврат Распоряжение;
	КонецЕсли;
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Ссылка КАК Документ
	|ИЗ
	|	Документ.РегистраторГрафикаДвиженияТоваров КАК Таблица
	|ГДЕ
	|	Таблица.Распоряжение = &Распоряжение
	|	И НЕ Таблица.Ссылка.ЭтоДубль";
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Результат = Выборка.Документ;
		
	Иначе
		
		ТекстИсключения = НСтр("ru = 'Не найден документ-регистратор движения графика движения товаров по распоряжению %Распоряжение%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%Распоряжение%", Распоряжение);
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Распоряжение.Партнер)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Документы.РегистраторГрафикаДвиженияТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.4.12.64";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("27de4749-1b95-49d7-bf5a-1c68ffdae076");
	Обработчик.Комментарий = НСтр("ru = 'Помечает на удаление дубли документов РегистраторГрафикаДвиженияТоваров'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.РегистраторГрафикаДвиженияТоваров.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Документы.РегистраторГрафикаДвиженияТоваров.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию() Экспорт
	
	// Выбирает все дубли по распоряжению, исключая одну, произвольную ссылку.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РегистраторГрафикаДвиженияТоваров.Распоряжение КАК Распоряжение,
	|	СУММА(1) КАК КоличествоДокументовПоРаспоряжению
	|ПОМЕСТИТЬ ВтДублиПоДоговорам
	|ИЗ
	|	Документ.РегистраторГрафикаДвиженияТоваров КАК РегистраторГрафикаДвиженияТоваров
	|ГДЕ
	|	НЕ РегистраторГрафикаДвиженияТоваров.ЭтоДубль
	|
	|СГРУППИРОВАТЬ ПО
	|	РегистраторГрафикаДвиженияТоваров.Распоряжение
	|
	|ИМЕЮЩИЕ
	|	СУММА(1) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистраторГрафикаДвиженияТоваров.Ссылка КАК Ссылка,
	|	РегистраторГрафикаДвиженияТоваров.Распоряжение КАК Распоряжение
	|ПОМЕСТИТЬ ВтДублиРегистраторы
	|ИЗ
	|	Документ.РегистраторГрафикаДвиженияТоваров КАК РегистраторГрафикаДвиженияТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДублиПоДоговорам КАК ВтДублиПоДоговорам
	|		ПО РегистраторГрафикаДвиженияТоваров.Распоряжение = ВтДублиПоДоговорам.Распоряжение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВтДублиРегистраторы.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ ВТПервоеВхождение
	|ИЗ
	|	ВтДублиРегистраторы КАК ВтДублиРегистраторы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтДублиРегистраторы.Распоряжение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДублиРегистраторы.Ссылка КАК Ссылка
	|ИЗ
	|	ВтДублиРегистраторы КАК ВтДублиРегистраторы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПервоеВхождение КАК ВТПервоеВхождение
	|		ПО ВтДублиРегистраторы.Ссылка = ВТПервоеВхождение.Ссылка
	|ГДЕ
	|	ВТПервоеВхождение.Ссылка ЕСТЬ NULL"
	);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ЭтоДубль = Истина;
			ДокументОбъект.ДополнительныеСвойства.Вставить("СинхронизацияКлючаСоЗначением");
			ДокументОбъект.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.РегистраторГрафикаДвиженияТоваров,
				Выборка.Ссылка,
				ТекстСообщения);
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
