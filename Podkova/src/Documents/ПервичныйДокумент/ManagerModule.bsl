#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
КонецПроцедуры

// Возвращает массив реквизитов, доступных для типа первичного документа
//
// Параметры:
// 	ТипПервичногоДокумента - ПеречислениеСсылка.ТипыПервичныхДокумента - Тип первичного документа.
//
// Возвращаемое значение:
// 	Результат - Структура - Структура с полями
// 	                          * МассивВсехРеквизитов - Массив - Все условно видиные реквизиты
// 	                          * МассивРеквизитовДляТипа - Массив - Реквизиты, видиные для типа документа.
//
Функция МассивРеквизитовПоТипуПервичногоДокумента(ТипПервичногоДокумента) Экспорт
	
	МассивВсехРеквизитов = Новый Массив;
	МассивВсехРеквизитов.Добавить("Партнер");
	МассивВсехРеквизитов.Добавить("Контрагент");
	МассивВсехРеквизитов.Добавить("Договор");
	МассивВсехРеквизитов.Добавить("ГруппаФинансовогоУчета");
	МассивВсехРеквизитов.Добавить("НаправлениеДеятельности");
	МассивВсехРеквизитов.Добавить("Подразделение");
	МассивВсехРеквизитов.Добавить("ПорядокРасчетов");
	МассивВсехРеквизитов.Добавить("Валюта");
	МассивВсехРеквизитов.Добавить("НомерВходящегоДокумента");
	МассивВсехРеквизитов.Добавить("ДатаВходящегоДокумента");
	МассивВсехРеквизитов.Добавить("СуммаДокумента");
	МассивВсехРеквизитов.Добавить("СуммаРегл");
	
	МассивРеквизитовДляТипа = Новый Массив;
	Если ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.ПриобретениеУПоставщика Тогда
		МассивРеквизитовДляТипа.Добавить("Партнер");
		МассивРеквизитовДляТипа.Добавить("Контрагент");
		МассивРеквизитовДляТипа.Добавить("Договор");
		МассивРеквизитовДляТипа.Добавить("ГруппаФинансовогоУчета");
		МассивРеквизитовДляТипа.Добавить("НаправлениеДеятельности");
		МассивРеквизитовДляТипа.Добавить("Подразделение");
		МассивРеквизитовДляТипа.Добавить("ПорядокРасчетов");
		МассивРеквизитовДляТипа.Добавить("Валюта");
		МассивРеквизитовДляТипа.Добавить("НомерВходящегоДокумента");
		МассивРеквизитовДляТипа.Добавить("ДатаВходящегоДокумента");
		МассивРеквизитовДляТипа.Добавить("СуммаДокумента");
		МассивРеквизитовДляТипа.Добавить("СуммаРегл");
		
	ИначеЕсли ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.РеализацияКлиенту Тогда
		МассивРеквизитовДляТипа.Добавить("Партнер");
		МассивРеквизитовДляТипа.Добавить("Контрагент");
		МассивРеквизитовДляТипа.Добавить("Договор");
		МассивРеквизитовДляТипа.Добавить("ГруппаФинансовогоУчета");
		МассивРеквизитовДляТипа.Добавить("НаправлениеДеятельности");
		МассивРеквизитовДляТипа.Добавить("Подразделение");
		МассивРеквизитовДляТипа.Добавить("ПорядокРасчетов");
		МассивРеквизитовДляТипа.Добавить("Валюта");
		МассивРеквизитовДляТипа.Добавить("СуммаДокумента");
		МассивРеквизитовДляТипа.Добавить("СуммаРегл");
		
	ИначеЕсли ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.ОплатаПоставщику Тогда
		МассивРеквизитовДляТипа.Добавить("Партнер");
		МассивРеквизитовДляТипа.Добавить("Контрагент");
		МассивРеквизитовДляТипа.Добавить("Договор");
		МассивРеквизитовДляТипа.Добавить("ГруппаФинансовогоУчета");
		МассивРеквизитовДляТипа.Добавить("НаправлениеДеятельности");
		МассивРеквизитовДляТипа.Добавить("Подразделение");
		МассивРеквизитовДляТипа.Добавить("ПорядокРасчетов");
		МассивРеквизитовДляТипа.Добавить("Валюта");
		МассивРеквизитовДляТипа.Добавить("НомерВходящегоДокумента");
		МассивРеквизитовДляТипа.Добавить("ДатаВходящегоДокумента");
		МассивРеквизитовДляТипа.Добавить("СуммаДокумента");
		МассивРеквизитовДляТипа.Добавить("СуммаРегл");
		
	ИначеЕсли ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.ОплатаОтКлиента Тогда
		МассивРеквизитовДляТипа.Добавить("Партнер");
		МассивРеквизитовДляТипа.Добавить("Контрагент");
		МассивРеквизитовДляТипа.Добавить("Договор");
		МассивРеквизитовДляТипа.Добавить("ГруппаФинансовогоУчета");
		МассивРеквизитовДляТипа.Добавить("НаправлениеДеятельности");
		МассивРеквизитовДляТипа.Добавить("Подразделение");
		МассивРеквизитовДляТипа.Добавить("ПорядокРасчетов");
		МассивРеквизитовДляТипа.Добавить("Валюта");
		МассивРеквизитовДляТипа.Добавить("НомерВходящегоДокумента");
		МассивРеквизитовДляТипа.Добавить("ДатаВходящегоДокумента");
		МассивРеквизитовДляТипа.Добавить("СуммаДокумента");
		МассивРеквизитовДляТипа.Добавить("СуммаРегл");
		
	ИначеЕсли ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.ЗакупкаЧерезПодотчетноеЛицо Тогда
		
		МассивРеквизитовДляТипа.Добавить("Контрагент");
		МассивРеквизитовДляТипа.Добавить("Подразделение");
		МассивРеквизитовДляТипа.Добавить("Валюта");
		МассивРеквизитовДляТипа.Добавить("НомерВходящегоДокумента");
		МассивРеквизитовДляТипа.Добавить("ДатаВходящегоДокумента");
		МассивРеквизитовДляТипа.Добавить("СуммаДокумента");
		
	ИначеЕсли ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.ВнутренняяНакладная Тогда
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("МассивВсехРеквизитов", МассивВсехРеквизитов);
	Результат.Вставить("МассивРеквизитовДляТипа", МассивРеквизитовДляТипа);
	
	Возврат Результат;
	
КонецФункции

// Инициализирует параметры регистрации счетов-фактур (полученных)
//
// Параметры:
//  Объект		- ДокументОбъект.ПервичныйДокумент, ДанныеФормыСтруктура	- документ, для которого необходимо получить параметры.
//
// Возвращаемое значение:
//  Структура - структура параметров, см. УчетНДСУПКлиентСервер.ПараметрыРегистрацииСчетовФактурПолученных().
//
Функция ПараметрыРегистрацииСчетовФактурПолученных(Объект) Экспорт
	
	ПараметрыРегистрации = УчетНДСУПКлиентСервер.ПараметрыРегистрацииСчетовФактурПолученных();
	ПараметрыРегистрации.Ссылка = Объект.Ссылка;
	ПараметрыРегистрации.Дата = Объект.Дата;
	ПараметрыРегистрации.Организация = Объект.Организация;
	ПараметрыРегистрации.Контрагент = Объект.Контрагент;
	ПараметрыРегистрации.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	Если Объект.ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.ПриобретениеУПоставщика
		Или Объект.ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.ЗакупкаЧерезПодотчетноеЛицо Тогда
		ПараметрыРегистрации.ПриобретениеТоваровРаботУслуг = Истина;
	КонецЕсли;
	Если Объект.ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.ЗакупкаЧерезПодотчетноеЛицо Тогда
		ПараметрыРегистрации.ИнойДокументПодтвержденияНДС = Истина;
	КонецЕсли;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ИнициализироватьВтСуммыДокументовВВалютахУчета(Запрос, ТекстыЗапроса);
	ОтразитьВУчетеНДС(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                  КАК Ссылка,
	|	ДанныеДокумента.Дата                    КАК Период,
	|	ДанныеДокумента.Номер                   КАК Номер,
	|	ДанныеДокумента.Валюта                  КАК Валюта,
	|	ДанныеДокумента.Организация             КАК Организация,
	|	ДанныеДокумента.Подразделение           КАК Подразделение,
	|	ДанныеДокумента.Комментарий             КАК Комментарий,
	|	ДанныеДокумента.СуммаДокумента          КАК СуммаДокумента,
	|	ДанныеДокумента.Партнер                 КАК Партнер,
	|	ДанныеДокумента.Контрагент              КАК Контрагент,
	|	ДанныеДокумента.Договор                 КАК Договор,
	|	ДанныеДокумента.ТипПервичногоДокумента  КАК ТипПервичногоДокумента,
	|	ДанныеДокумента.ПометкаУдаления         КАК ПометкаУдаления,
	|	ДанныеДокумента.Проведен                КАК Проведен
	|ИЗ
	|	Документ.ПервичныйДокумент КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	Для каждого КлючИЗначение Из ЗначенияПараметровПроведения(Реквизиты) Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Функция ЗначенияПараметровПроведения(Реквизиты = Неопределено)
	
	Значения = Новый Структура;
	Значения.Вставить("ИдентификаторМетаданных",                       ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПервичныйДокумент"));
	Значения.Вставить("ХозяйственнаяОперация",                         Перечисления.ХозяйственныеОперации.ПоступлениеУслуг);
	Значения.Вставить("ВалютаРегламентированногоУчета",                Константы.ВалютаРегламентированногоУчета.Получить());
	Значения.Вставить("ВалютаУправленческогоУчета",                    Константы.ВалютаУправленческогоУчета.Получить());
	
	Если Реквизиты <> Неопределено Тогда
		Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(
			Реквизиты.Валюта, Неопределено, Реквизиты.Период);
			
		Значения.Вставить("КоэффициентПересчетаВВалютуУпр",            Коэффициенты.КоэффициентПересчетаВВалютуУпр);
		Значения.Вставить("КоэффициентПересчетаВВалютуРегл",           Коэффициенты.КоэффициентПересчетаВВалютуРегл);
	КонецЕсли;
	
	Возврат Значения;
	
КонецФункции

Процедура ОтразитьВУчетеНДС(Запрос, ТекстыЗапроса, Регистры)
	
	ТекстЦенности = "
	|ВЫБРАТЬ
	|	Операция.Дата                                КАК Период,
	|	Операция.Ссылка                              КАК Ссылка,
	|	Операция.Организация                         КАК Организация,
	|	Операция.Подразделение                       КАК Подразделение,
	|	Операция.Контрагент                          КАК Контрагент,
	|	Операция.Договор                             КАК Договор,
	|	Операция.Контрагент                          КАК Грузоотправитель,
	|	Операция.Ссылка                              КАК ДокументПриобретения,
	|	Операция.Ссылка                              КАК ИсходныйТорговыйДокумент,
	|	ЛОЖЬ                                         КАК ИсправлениеОшибок,
	|	ЛОЖЬ                                         КАК КорректировкаПоСогласованиюСторон,
	|	НЕОПРЕДЕЛЕНО                                 КАК ДокументКорректировкиПриобретения,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС) КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС) КАК ВидДеятельностиНДС,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС,
	|	НЕОПРЕДЕЛЕНО                                 КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО                                 КАК ВидЗапасов,
	|	НЕОПРЕДЕЛЕНО                                 КАК НомерГТД,
	|	Операция.Подразделение                       КАК ПодразделениеУчета,
	|	Операция.НаправлениеДеятельности             КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                 КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО                                 КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                                 КАК СтатьяПрочихАктивов,
	|	НЕОПРЕДЕЛЕНО                                 КАК АналитикаПрочихАктивов,
	|	НЕОПРЕДЕЛЕНО                                 КАК Назначение,
	|	""""                                         КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.ПервичныйДокумент КАК Операция
	|ГДЕ
	|	Операция.Ссылка В (&Ссылка)
	|	И Операция.ТипПервичногоДокумента В (ЗНАЧЕНИЕ(Перечисление.ТипыПервичныхДокументов.ПриобретениеУПоставщика),
	|										 ЗНАЧЕНИЕ(Перечисление.ТипыПервичныхДокументов.ЗакупкаЧерезПодотчетноеЛицо))
	|";
	
	УчетНДСУП.ОтразитьПриобретениеУПоставщика(Запрос, ТекстыЗапроса, Регистры, ТекстЦенности);
	
КонецПроцедуры

Процедура ИнициализироватьВтСуммыДокументовВВалютахУчета(Запрос, ТекстыЗапроса) Экспорт
	
	Если Запрос.Параметры.Свойство("ВтСуммыДокументовВВалютахУчетаИнициализирована") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСуммыДокументовВВалютахУчета = Новый Запрос;
	ЗапросСуммыДокументовВВалютахУчета.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросСуммыДокументовВВалютахУчета.УстановитьПараметр("Ссылка", Запрос.Параметры.Ссылка);
	
	ЗапросСуммыДокументовВВалютахУчета.Текст = "
	|ВЫБРАТЬ
	|	Операция.Ссылка    КАК Ссылка,
	|	Операция.Дата      КАК Дата,
	|	Операция.Валюта    КАК ВалютаДокумента,
	|	Операция.Валюта    КАК ВалютаВзаиморасчетов,
	|	""""               КАК ИдентификаторСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС,
	|	Операция.СуммаРегл КАК СуммаСНДС,
	|	0                  КАК СуммаНДС,
	|	Операция.СуммаРегл КАК СуммаБезНДС,
	|	Операция.СуммаРегл КАК СуммаВзаиморасчетов,
	|	0                  КАК СуммаНДСВзаиморасчетов,
	|	Операция.СуммаРегл КАК СуммаСНДСУпр,
	|	0                  КАК СуммаНДСУпр,
	|	Операция.СуммаРегл КАК СуммаБезНДСУпр,
	|	Операция.СуммаРегл КАК СуммаСНДСРегл,
	|	0                  КАК СуммаНДСРегл,
	|	Операция.СуммаРегл КАК БазаНДСРегл,
	|	Операция.СуммаРегл КАК СуммаБезНДСРегл
	|ПОМЕСТИТЬ ВтСуммыДокументовВВалютахУчета
	|ИЗ
	|	Документ.ПервичныйДокумент КАК Операция
	|ГДЕ
	|	Операция.Ссылка В (&Ссылка)
	|";
	
	ЗапросСуммыДокументовВВалютахУчета.Выполнить();
	
	Запрос.УстановитьПараметр("ВтСуммыДокументовВВалютахУчетаИнициализирована", Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытия

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("Ссылка");
	Поля.Добавить("ТипПервичногоДокумента");
	Поля.Добавить("Номер");
	Поля.Добавить("Дата");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Данные.Ссылка) Тогда
		Представление = СтрШаблон(НСтр("ru = '%1 %2 от %3'"), Данные.ТипПервичногоДокумента, СокрЛП(Данные.Номер), Данные.Дата);
	Иначе
		Представление = СтрШаблон(НСтр("ru = '%1 (создание)'"), Данные.ТипПервичногоДокумента);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
