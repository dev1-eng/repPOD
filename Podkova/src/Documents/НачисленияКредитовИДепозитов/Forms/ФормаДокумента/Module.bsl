
&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)
	
	Если ТипЗнч(РезультатВыбора) = Тип("Структура") Тогда
		Если РезультатВыбора.Свойство("АдресНачисленийВХранилище") Тогда
			ПолучитьНачисленияИзХранилища(РезультатВыбора.АдресНачисленийВХранилище);
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_НачисленияКредитовИДепозитов", ПараметрыЗаписи, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеД
	
	ПВХ = ПланыВидовХарактеристик;
	ПВХ.СтатьиДоходов.ЗаполнитьПризнакАналитикаДоходовОбязательна(Объект.Начисления, "СтатьяДоходовРасходов, АналитикаДоходов");
	ПВХ.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.Начисления, "СтатьяДоходовРасходов, АналитикаРасходов");

	
	ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(Объект.Начисления, "СтатьяДоходовРасходов");
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ХозяйственнаяОперацияПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ХозяйственнаяОперацияПриИзмененииСервер()
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьПараметрыВыбораДоговора();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисления

&НаКлиенте
Процедура НачисленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	Если НоваяСтрока И Не Копирование Тогда
		
		ТекущиеДанные.ТипСуммыГрафика = ПредопределенноеЗначение("Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Проценты");
		
		Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.НачисленияПоКредитам") Тогда
			ТекущиеДанные["СтатьяДоходовРасходов"] = ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка");
		Иначе
			ТекущиеДанные["СтатьяДоходовРасходов"] = ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиДоходов.ПустаяСсылка");
		КонецЕсли;
		ДоходыИРасходыКлиентСервер.ЗаполнитьТипСтатьиВСтрокеТЧ(ТекущиеДанные, "СтатьяДоходовРасходов")
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	ПартнерПриИзмененииНаСервере(ТекущиеДанные.Партнер, ТекущиеДанные.Контрагент);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПартнерПриИзмененииНаСервере(Партнер, Контрагент)
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПриИзмененииНаСервере(КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииНаСервере(КэшированныеЗначения)
	
	ТекущиеДанные = Объект.Начисления.НайтиПоИдентификатору(Элементы.Начисления.ТекущаяСтрока);
	
	Договор = РеквизитыДоговораСервер(ТекущиеДанные.Договор);
	
	ТекущиеДанные.Подразделение = Договор.Подразделение;
	ТекущиеДанные.НаправлениеДеятельности = Договор.НаправлениеДеятельности;
	
	Если ТекущиеДанные.ВалютаВзаиморасчетов <> Договор.ВалютаВзаиморасчетов Тогда
		ТекущиеДанные.ВалютаВзаиморасчетов = Договор.ВалютаВзаиморасчетов;
		ТекущиеДанные.СуммаВзаиморасчетов = 0;
	КонецЕсли;
	
	Если ТекущиеДанные.ТипСуммыГрафика = Перечисления.ТипыСуммГрафикаКредитовИДепозитов.Проценты Тогда
		ТекущиеДанные.СтатьяДоходовРасходов = Договор.СтатьяДоходовРасходовПроцентов;
	ИначеЕсли ТекущиеДанные.ТипСуммыГрафика = Перечисления.ТипыСуммГрафикаКредитовИДепозитов.Комиссия Тогда
		ТекущиеДанные.СтатьяДоходовРасходов = Договор.СтатьяДоходовРасходовКомиссии;
	КонецЕсли;
	
	СтатьяДоходовРасходовПриИзмененииСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДоходовРасходовПриИзменении(Элемент)
	
	СтатьяДоходовРасходовПриИзмененииСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура СтатьяДоходовРасходовПриИзмененииСервер(КэшированныеЗначения)
	
	СтрокаТаблицы = Объект.Начисления.НайтиПоИдентификатору(Элементы.Начисления.ТекущаяСтрока);
	
	Если ТипЗнч(СтрокаТаблицы.СтатьяДоходовРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов") Тогда
		
		ДоходыИРасходыСервер.СтатьяДоходовПриИзменении(
			Объект, СтрокаТаблицы.СтатьяДоходовРасходов, СтрокаТаблицы.Подразделение, СтрокаТаблицы.АналитикаДоходов);
		СтрокаТаблицы.АналитикаРасходов = Неопределено;
		СтрокаТаблицы.АналитикаРасходовОбязательна = Ложь;
		
	ИначеЕсли ТипЗнч(СтрокаТаблицы.СтатьяДоходовРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
		
		ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(
			Объект, СтрокаТаблицы.СтатьяДоходовРасходов, СтрокаТаблицы.АналитикаРасходов);
		СтрокаТаблицы.АналитикаДоходов = Неопределено;
		СтрокаТаблицы.АналитикаДоходовОбязательна = Ложь;
		
	ИначеЕсли ТипЗнч(СтрокаТаблицы.СтатьяДоходовРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов") Тогда
		
		ДоходыИРасходыСервер.СтатьяАктивовПассивовПриИзменении(Объект, СтрокаТаблицы.СтатьяДоходовРасходов, СтрокаТаблицы.АналитикаАктивовПассивов);
		Если ЗначениеЗаполнено(СтрокаТаблицы.АналитикаДоходов) Тогда
			СтрокаТаблицы.АналитикаДоходов = Неопределено;
			СтрокаТаблицы.АналитикаДоходовОбязательна = Ложь;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицы.АналитикаРасходов) Тогда
			СтрокаТаблицы.АналитикаРасходов = Неопределено;
			СтрокаТаблицы.АналитикаРасходовОбязательна = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.СтатьяДоходовРасходов)
		И СтрокаТаблицы.СтатьяДоходовРасходов.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ДоговорыКредитовИДепозитов")) Тогда
		
		Если ТипЗнч(СтрокаТаблицы.СтатьяДоходовРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов") Тогда
			СтрокаТаблицы.АналитикаДоходов = СтрокаТаблицы.Договор;
		ИначеЕсли ТипЗнч(СтрокаТаблицы.СтатьяДоходовРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
			СтрокаТаблицы.АналитикаРасходов = СтрокаТаблицы.Договор;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакАналитикаДоходовОбязательна", "СтатьяДоходовРасходов, АналитикаДоходов");
	СтруктураДействий.Вставить("ЗаполнитьПризнакАналитикаРасходовОбязательна", "СтатьяДоходовРасходов, АналитикаРасходов");
	СтруктураДействий.Вставить("ЗаполнитьТипСтатьи", "СтатьяДоходовРасходов");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДоходовРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", Элементы.Начисления.ТекущаяСтрока);
	ОписаниеОповещения = Новый ОписаниеОповещения("СтатьяДоходовРасходовВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Статья", Элементы.Начисления.ТекущиеДанные.СтатьяДоходовРасходов);
	ПараметрыФормы.Вставить("ПараметрыВыбора", Элемент.ПараметрыВыбора);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораСтатьи", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДоходовРасходовВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Строка = Объект.Начисления.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		Строка.СтатьяДоходовРасходов = Результат;
		СтатьяДоходовРасходовПриИзмененииСервер(КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если ПроверитьЗаполнениеПолейОтбора() Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("АдресНачисленийВХранилище", АдресНачисленийВХранилище());
		ПараметрыОтбора.Вставить("Организация", Объект.Организация);
		ПараметрыОтбора.Вставить("Регистратор", Объект.Ссылка);
		ПараметрыОтбора.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
		ПараметрыОтбора.Вставить("ДатаНачала", Объект.ДатаНачала);
		ПараметрыОтбора.Вставить("ДатаОкончания", Объект.ДатаОкончания);
		ПараметрыОтбора.Вставить("ИдентификаторФормыДокумента", УникальныйИдентификатор);
		
		ОткрытьФорму("Документ.НачисленияКредитовИДепозитов.Форма.ФормаЗаполнения", ПараметрыОтбора, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеПолейОтбора()
	
	Результат = Истина;
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.ХозяйственнаяОперация) Тогда
		Текст = НСтр("ru='Для заполнения начислений требуется указание хозяйственной операции.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "ХозяйственнаяОперация", "Объект");
		Результат = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Текст = НСтр("ru='Для заполнения начислений требуется указание организации.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Организация", "Объект");
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ПланыВидовХарактеристик.СтатьиДоходов.УстановитьУсловноеОформлениеАналитик(
		УсловноеОформление, Новый Структура("Начисления", "СтатьяДоходовРасходов, АналитикаДоходов"));
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(
		УсловноеОформление, Новый Структура("Начисления", "СтатьяДоходовРасходов, АналитикаРасходов"));
	
	ТипыСтатей = Новый Массив;
	ТипыСтатей.Добавить(1); // Статьи расходов
	ТипыСтатей.Добавить(2); // Статьи доходов
	ТипыСтатей.Добавить(3); // Статьи активов/пассивов
	ДоходыИРасходыСервер.УстановитьУсловноеОформлениеАналитикПриСовместномИспользованииСтатей(ЭтаФорма, "Начисления", ТипыСтатей);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатьяДоходовРасходов.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Начисления.ТипСуммыГрафика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыСуммГрафикаКредитовИДепозитов.Комиссия;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Начисления.СтатьяДоходовРасходов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ПВХ = ПланыВидовХарактеристик;
	ПВХ.СтатьиДоходов.ЗаполнитьПризнакАналитикаДоходовОбязательна(Объект.Начисления, "СтатьяДоходовРасходов, АналитикаДоходов");
	ПВХ.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.Начисления, "СтатьяДоходовРасходов, АналитикаРасходов");
	
	ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(Объект.Начисления, "СтатьяДоходовРасходов");
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
		Элементы.СтатьяДоходовРасходов.Заголовок = НСтр("ru = 'Статья доходов / расходов'");
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	УстановитьПараметрыВыбораДоговора();
	
	ПараметрыВыбораСтатьи = Новый Массив;
	ПараметрыВыбораНаправленияДеятельности = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачисленияПоКредитам Тогда
		
		ПараметрыВыбораСтатьи.Добавить(Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПрочиеРасходы));
		ПараметрыВыбораСтатьи.Добавить(Новый ПараметрВыбора("ДополнитьСтатьямиРасходов", Истина));
		ПараметрыВыбораНаправленияДеятельности.Добавить(Новый ПараметрВыбора("Отбор.УчетЗатрат", Истина));
	Иначе
		
		ПараметрыВыбораСтатьи.Добавить(Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПрочиеДоходы));
		ПараметрыВыбораСтатьи.Добавить(Новый ПараметрВыбора("ДополнитьСтатьямиДоходов", Истина));
		ПараметрыВыбораНаправленияДеятельности.Добавить(Новый ПараметрВыбора("Отбор.УчетДоходов", Истина));
	КонецЕсли;
	
	ПараметрыВыбораСтатьи.Добавить(Новый ПараметрВыбора("ДополнитьСтатьямиАктивовПассивов", Истина));
	ПараметрыВыбораНаправленияДеятельности.Добавить(Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыНаправленияДеятельности.Используется));
	
	Элементы.СтатьяДоходовРасходов.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораСтатьи);
	Элементы.НаправлениеДеятельности.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораНаправленияДеятельности);
	
	ПартнерыИКонтрагенты.ЗаголовокЭлементаПартнерВЗависимостиОтХозяйственнойОперации( ЭтотОбъект, "Партнер", Объект.ХозяйственнаяОперация);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитыДоговораСервер(Договор)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор,
		"Партнер, Контрагент, ВалютаВзаиморасчетов, СтатьяДоходовРасходовПроцентов, СтатьяДоходовРасходовКомиссии, ХарактерДоговора,
		|Подразделение, НаправлениеДеятельности");
	
КонецФункции

&НаСервере
Процедура УстановитьПараметрыВыбораДоговора(Партнер = Неопределено, Контрагент = Неопределено)
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления",Ложь));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ХарактерДоговора",
		Справочники.ДоговорыКредитовИДепозитов.ХарактерДоговораПоОперации(Объект.ХозяйственнаяОперация)));
		
	Если Не Объект.Организация.Пустая() Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", Объект.Организация));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Партнер", Партнер));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Контрагент", Контрагент));
	КонецЕсли;
	
	Элементы.Договор.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаСервере
Функция АдресНачисленийВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Начисления.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ПолучитьНачисленияИзХранилища(АдресНачисленийВХранилище)
	
	Объект.Начисления.Загрузить(ПолучитьИзВременногоХранилища(АдресНачисленийВХранилище));
	
	Если Объект.Начисления.Количество() = 0 Тогда
		
		ОрганизацияЗаПериод = НСтр("ru = 'Для организации ""%1"" за период с %2 по %3'");
		ОрганизацияЗаПериод = СтрШаблон(
			ОрганизацияЗаПериод, Объект.Организация, Формат(Объект.ДатаНачала, "ДЛФ=D"), Формат(Объект.ДатаОкончания, "ДЛФ=D"));
			
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачисленияПоКредитам Тогда
			ПоДоговорам = НСтр("ru = 'по действующим договорам кредитов и полученных займов не обнаружены графики начислений'");
		ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачисленияПоДепозитам Тогда
			ПоДоговорам = НСтр("ru = 'по действующим договорам депозитов не обнаружены графики начислений'");
		ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачисленияПоЗаймамВыданным Тогда
			ПоДоговорам = НСтр("ru = 'по действующим договорам выданных займов не обнаружены графики начислений'");
		КонецЕсли;
		
		ТекстСообщения = ОрганизацияЗаПериод + Символы.ПС + ПоДоговорам + ".";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
