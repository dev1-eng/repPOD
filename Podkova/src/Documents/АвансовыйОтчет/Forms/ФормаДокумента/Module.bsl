

#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Параметры.Свойство("ДокументыЗакупки") Тогда
			СписокДокументовЗакупки.ЗагрузитьЗначения(Параметры.ДокументыЗакупки);
		КонецЕсли;
		Параметры.Свойство("РедактируемыйДокументЗакупки", РедактируемыйДокументЗакупки);
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	ВидимостьСозданияПоступленияТоваров = ПравоДоступа("Добавление", Метаданные.Документы.ПриобретениеТоваровУслуг);
	Элементы.СписокДокументовЗакупкиЗакупкиСоздатьПТиУ.Видимость = ВидимостьСозданияПоступленияТоваров;
	
	КнопокСоздания = 0;
	Если ВидимостьСозданияПоступленияТоваров Тогда
		КнопокСоздания = КнопокСоздания + 1;
	КонецЕсли;
	
	Если КнопокСоздания = 1 Тогда
		Если ВидимостьСозданияПоступленияТоваров Тогда
			ЭлементСоздания = Элементы.СписокДокументовЗакупкиЗакупкиСоздатьПТиУ;
		КонецЕсли;
		ЭлементСоздания.Заголовок = НСтр("ru = 'Создать'");
		Элементы.Переместить(ЭлементСоздания, Элементы.ДокументыЗакупки.КоманднаяПанель, Элементы.СписокДокументовЗакупкиГруппаСоздать);
	КонецЕсли;
	
	Если КнопокСоздания = 0 Тогда
		Элементы.СписокДокументовЗакупкиЗакупкиПодобрать.Видимость = Ложь;
		Элементы.СписокДокументовЗакупкиЗакупкиУдалить.Видимость = Ложь;
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// Обработчик механизма "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);

	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	ПараметрыЭДОПриСоздании.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПодборПоРасчетамСПартнерами" Тогда
		
		ПолучитьОплатуПоставщикамИзХранилища(РезультатВыбора.АдресПлатежейВХранилище);
		РассчитатьСуммуДокумента(ЭтаФорма);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.СтруктураПредприятия.Форма.ФормаВыбора" Тогда
		
		ВыделенныеСтроки = Элементы.ПрочиеРасходы.ВыделенныеСтроки;
		Для Каждого Строка Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Объект.ПрочиеРасходы.НайтиПоИдентификатору(Строка);
			ДанныеСтроки.Подразделение = РезультатВыбора;
		КонецЦикла;
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Для каждого СтрокаТаблицы Из Объект.КонвертацияВалюты Цикл
		Элементы.КонвертацияВалюты.ТекущаяСтрока = СтрокаТаблицы.ПолучитьИдентификатор();
		СформироватьКурсТекстом();
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из Объект.ПрочиеРасходы Цикл
		Если СтрокаТаблицы.ПредъявленСФ Тогда
			СтрокаТаблицы.СпособУчетаНДС = 1;
		ИначеЕсли СтрокаТаблицы.БланкСтрогойОтчетности Тогда
			СтрокаТаблицы.СпособУчетаНДС = 2;
		Иначе
			СтрокаТаблицы.СпособУчетаНДС = 0;
		КонецЕсли;
	КонецЦикла;
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.ПрочиеРасходы);
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовЗаказРеализация(Объект.ПрочиеРасходы);
	ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(Объект.ПрочиеРасходы);
	
	ЗаполнитьПредставлениеСчетФактуры();
	
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

	Если Объект.Проведен И Объект.Статус = Перечисления.СтатусыАвансовогоОтчета.Утвержден Тогда
		ДенежныеСредстваСервер.ПереоценитьДенежныеСредстваУПодотчетныхЛиц(Объект.Организация, Объект.Дата, Объект.ПодотчетноеЛицо);
	КонецЕсли;
	
	ЗаполнитьСуммуПолучено();
	ОбновитьДокументыЗакупки();
	
	РассчитатьСуммуДокумента(ЭтаФорма);
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_АвансовыйОтчет", ПараметрыЗаписи, Объект.Ссылка);
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ОповеститьОбИзмененииТекущихДелПоЭДО();
	
	ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента(ЭтаФорма, ПараметрыЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ДокументыЗакупки", СписокДокументовЗакупки.ВыгрузитьЗначения());
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РедактируемыйДокументЗакупки", РедактируемыйДокументЗакупки);
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ПриобретениеТоваровУслуг"
		Или ИмяСобытия = "Запись_ПоступлениеДенежныхДокументов" Тогда
		
		ОбработатьЗаписьДокументаЗакупки();
		Элементы.ДокументыЗакупки.Обновить();
		РассчитатьСуммуДокумента(ЭтаФорма);
	КонецЕсли;
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаписьДокументаЗакупки();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СписокДокументовЗакупки.ЗагрузитьЗначения(Документы.АвансовыйОтчет.СписокДокументовЗакупки(Объект.Ссылка));
	КонецЕсли;
	ОбновитьДокументыЗакупки();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не Объект.ПрочиеРасходы.Количество()
		И Не Объект.ОплатаПоставщикам.Количество()
		И Не Объект.КонвертацияВалюты.Количество()
		И Не СписокДокументовЗакупки.Количество() Тогда
		
		Если ИспользоватьНесколькоВалют Тогда
			Текст = НСтр("ru = 'Сумма израсходованных денежных средств равна 0.
				|Необходимо заполнить данные на закладке ""Закупки"", ""Расходы "", ""Оплата поставщикам"" или ""Конвертация валюты""'");
		Иначе
			Текст = НСтр("ru = 'Сумма израсходованных денежных средств равна 0.
				|Необходимо заполнить данные на закладке ""Закупки"", ""Расходы "" или ""Оплата поставщикам""'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,,, "СуммаИзрасходовано", Отказ);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗначениеЗаполнено(РедактируемыйДокументЗакупки) И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОповеститьОВыборе(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ЗадаватьВопрос = Ложь;
	НайденныеСтроки = Новый Массив;
	Для Каждого СтрокаТаблицы Из Объект.ОплатаПоставщикам Цикл
		Если СтрокаТаблицы.СуммаВзаиморасчетов > 0
			И СтрокаТаблицы.ВалютаВзаиморасчетов <> Объект.Валюта Тогда
			ЗадаватьВопрос = Истина;
			НайденныеСтроки.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗадаватьВопрос Тогда
		Оповещение = Новый ОписаниеОповещения("ДатаПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("НайденныеСтроки", НайденныеСтроки));
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Очистить суммы взаиморасчетов?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ДатаПриИзмененииСервер();
	
	РассчитатьСуммуДокумента(ЭтаФорма);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		НайденныеСтроки = ДополнительныеПараметры.НайденныеСтроки;
		
		Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
			
			СтрокаТаблицы.СуммаВзаиморасчетов = 0;
			
		КонецЦикла;
	КонецЕсли;
	
	ДатаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	РассчитатьСуммуДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаСервере

Процедура ОрганизацияПриИзмененииСервер()
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Организация");
	
	АктуализироватьЗакупкуПодДеятельность();
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	ЗаполнитьСуммуПолучено();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	ВалютаПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодотчетноеЛицоПриИзменении(Элемент)
	
	ПодотчетноеЛицоПриИзмененииСервер();
	РассчитатьСуммуДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПодотчетноеЛицоПриИзмененииСервер()
	
	Если Не ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Объект.Подразделение = ФизическиеЛицаУТ.ПодразделениеФизическогоЛица(Объект.ПодотчетноеЛицо);
	КонецЕсли;
	
	ЗаполнитьСуммуПолучено();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	СтатусПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СтатусПриИзмененииНаСервере()
	
	ЗаполнитьСуммуПолучено();
	НастроитьЗависимыеЭлементыФормыНаСервере("Статус");
	
КонецПроцедуры

&НаКлиенте
Процедура НесколькоВалютПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	НесколькоВалютПриИзмененииНаСервере();
	РассчитатьСуммуДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура НесколькоВалютПриИзмененииНаСервере()
	
	Объект.Мультивалютный = (НесколькоВалют = 1);
	
	Если Объект.Мультивалютный Тогда
		Для каждого СтрокаТЧ Из Объект.ПрочиеРасходы Цикл
			СтрокаТЧ.Валюта = Объект.Валюта;
		КонецЦикла;
		Для каждого СтрокаТЧ Из Объект.ОплатаПоставщикам Цикл
			СтрокаТЧ.Валюта = Объект.Валюта;
		КонецЦикла;
		Объект.Валюта = Неопределено;
	КонецЕсли;
	
	ЗаполнитьСуммуПолучено();
	
	НастроитьЗависимыеЭлементыФормыНаСервере("Мультивалютный");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакупкаПодДеятельностьОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ДекорацияСостояниеЭДОНажатие(ЭтотОбъект, СтандартнаяОбработка);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры  

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыЗакупки

&НаКлиенте
Процедура ДокументыЗакупкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.ДокументЗакупки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОплатаПоставщикам

&НаКлиенте
Процедура ОплатаПоставщикамПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если ИспользоватьЗаказы Тогда
		СтрокаТаблицы = Элементы.ОплатаПоставщикам.ТекущиеДанные;
		ФинансыКлиент.УстановитьПустуюСсылкуНаЗаказ(СтрокаТаблицы.Заказ, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьСуммуДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамПослеУдаления(Элемент)
	
	РассчитатьСуммуДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамПоставщикПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ОплатаПоставщикам.ТекущиеДанные;
	
	Если ИспользоватьЗаказы Тогда
		ФинансыКлиент.УстановитьПустуюСсылкуНаЗаказ(СтрокаТаблицы.Заказ, Ложь);
	КонецЕсли;

	Если СтрокаТаблицы = Неопределено
		Или Не ЗначениеЗаполнено(СтрокаТаблицы.Поставщик)
		Или ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	КонтрагентПоУмолчанию = ПолучитьКонтрагентаПартнераПоУмолчанию(СтрокаТаблицы.Поставщик);
	Если КонтрагентПоУмолчанию <> Неопределено Тогда
		СтрокаТаблицы.Контрагент = КонтрагентПоУмолчанию;
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.ОплатаПоставщикам);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамКонтрагентПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.ОплатаПоставщикам);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамСуммаПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.ОплатаПоставщикам.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.ОплатаПоставщикам.ТекущиеДанные;
	
	ЗначенияОтбора = Новый Структура;
	ЗначенияОтбора.Вставить("Организация",           Объект.Организация);
	ЗначенияОтбора.Вставить("Партнер",               СтрокаТаблицы.Поставщик);
	ЗначенияОтбора.Вставить("Контрагент",            СтрокаТаблицы.Контрагент);
	ЗначенияОтбора.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо"));
	
	НастройкиВыбора = ФинансыКлиент.ПараметрыВыбораДокументаРасчетов();
	НастройкиВыбора.РедактируемыйДокумент          = Объект.Ссылка;
	НастройкиВыбора.ИсключитьХозяйственнуюОперацию = Истина;
	НастройкиВыбора.ЗапретитьДоговорыПоДокументам  = Истина;
	
	ФинансыКлиент.ДокументРасчетовНачалоВыбора(ЗначенияОтбора, НастройкиВыбора, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамЗаказОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицы = Элементы.ОплатаПоставщикам.ТекущиеДанные;	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамВалютаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ОплатаПоставщикам.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрочиеРасходы

&НаКлиенте
Процедура ПрочиеРасходыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ПрочиеРасходыСчетФактура" Тогда
		
		СтрокаТЧ = Объект.ПрочиеРасходы.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
		Если СтрокаТЧ.СпособУчетаНДС = 1 Тогда
			
			ПараметрыФормы = Новый Структура("НомерСФ, ДатаСФ, СчетФактура, Контрагент");
			ЗаполнитьЗначенияСвойств(ПараметрыФормы, СтрокаТЧ);
			ПараметрыФормы.Вставить("Организация", Объект.Организация);
			ПараметрыФормы.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
			
			Оповещение = Новый ОписаниеОповещения("ПрочиеРасходыСчетФактураЗавершениеВыбора", ЭтотОбъект);
			ОткрытьФорму("Документ.АвансовыйОтчет.Форма.РеквизитыСчетФактуры",
				ПараметрыФормы, ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
			СтандартнаяОбработка = Ложь;
			
		ИначеЕсли СтрокаТЧ.СпособУчетаНДС = 2 И ЗначениеЗаполнено(СтрокаТЧ.СчетФактура) Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Ключ", СтрокаТЧ.СчетФактура);
			ОткрытьФорму("Документ.ИнойДокументПодтвержденияНДС.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
			
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСчетФактураЗавершениеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		СтрокаТЧ = Объект.ПрочиеРасходы.НайтиПоИдентификатору(Результат.ВыбраннаяСтрока);
		Если СтрокаТЧ <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, Результат, "НомерСФ, ДатаСФ, СчетФактура");
			СтрокаТЧ.ПредставлениеСФ = ПредставлениеСчетФактуры(СтрокаТЧ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ПрочиеРасходы.ТекущиеДанные;
	
	Если НоваяСтрока И Не Копирование Тогда
		ТекущиеДанные.Подразделение = Объект.Подразделение;
		ТекущиеДанные.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
		ПриДобавлениСтрокиРасходов(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьСуммуДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыПослеУдаления(Элемент)
	
	РассчитатьСуммуДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПрочиеРасходыСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения);
	
	СтрокаТаблицы = Объект.ПрочиеРасходы.НайтиПоИдентификатору(Элементы.ПрочиеРасходы.ТекущаяСтрока);
	
	Если ТипЗнч(СтрокаТаблицы.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов") Тогда
		ДоходыИРасходыСервер.СтатьяАктивовПассивовПриИзменении(Объект, СтрокаТаблицы.СтатьяРасходов, СтрокаТаблицы.АналитикаАктивовПассивов);
		Если ЗначениеЗаполнено(СтрокаТаблицы.АналитикаРасходов) Тогда
			СтрокаТаблицы.АналитикаРасходов = Неопределено;
			СтрокаТаблицы.АналитикаРасходовОбязательна = Ложь;
			СтрокаТаблицы.АналитикаРасходовЗаказРеализация = Ложь;
		КонецЕсли;
	Иначе
		ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(Объект, СтрокаТаблицы.СтатьяРасходов, СтрокаТаблицы.АналитикаРасходов);
		Если ЗначениеЗаполнено(СтрокаТаблицы.АналитикаАктивовПассивов) Тогда
			СтрокаТаблицы.АналитикаАктивовПассивов = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура("
		|ЗаполнитьПризнакАналитикаРасходовОбязательна,
		|ЗаполнитьПризнакАналитикаРасходовЗаказРеализация,
		|ЗаполнитьТипСтатьи");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСтатьяРасходовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ПрочиеРасходы.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТаблицы.СтатьяРасходов) Тогда
		ПрочиеРасходыСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения);
	Иначе
		СтрокаТаблицы.АналитикаРасходов = Неопределено;
		СтрокаТаблицы.АналитикаАктивовПассивов = Неопределено;
		СтрокаТаблицы.АналитикаРасходовОбязательна = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", Элементы.ПрочиеРасходы.ТекущаяСтрока);
	ОписаниеОповещения = Новый ОписаниеОповещения("СтатьяРасходовВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Статья", Элементы.ПрочиеРасходы.ТекущиеДанные.СтатьяРасходов);
	ПараметрыФормы.Вставить("ПараметрыВыбора", Элемент.ПараметрыВыбора);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораСтатьи", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка = Объект.ПрочиеРасходы.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	Строка.СтатьяРасходов = Результат;
	ПрочиеРасходыСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ПрочиеРасходы.ТекущиеДанные;
	Если СтрокаТаблицы.АналитикаРасходовЗаказРеализация Тогда
		ПродажиКлиент.НачалоВыбораАналитикиРасходов(Элемент, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыАналитикаРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ПрочиеРасходы.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ПрочиеРасходы.ТекущиеДанные;
	Если ЗначениеЗаполнено(Текст)
		И СтрокаТаблицы.АналитикаРасходовЗаказРеализация  
	Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
		Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПрочиеРасходы.ТекущиеДанные;
	
	ТекущаяСтрока = Новый Структура;
	ТекущаяСтрока.Вставить("Сумма",               ТекущиеДанные.Сумма);
	ТекущаяСтрока.Вставить("СтавкаНДС",           ТекущиеДанные.СтавкаНДС);
	ТекущаяСтрока.Вставить("СуммаНДС",            ТекущиеДанные.СуммаНДС);
	ТекущаяСтрока.Вставить("СуммаСНДС",           ТекущиеДанные.СуммаСНДС);
	
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПрочиеРасходы.ТекущиеДанные;
	
	Если ТекущаяСтрока.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС")
		Или ТекущаяСтрока.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0")
		Или ТекущаяСтрока.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.ПустаяСсылка") Тогда
		
		ТекущаяСтрока.СпособУчетаНДС = 0;
		ТекущаяСтрока.ПредъявленСФ = Ложь;
		ТекущаяСтрока.БланкСтрогойОтчетности = Ложь;
		ТекущаяСтрока.НомерСФ = "";
		ТекущаяСтрока.ДатаСФ = Неопределено;
	КонецЕсли;
	
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСуммаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПрочиеРасходы.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСпособУчетаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПрочиеРасходы.ТекущиеДанные;
	
	ТекущаяСтрока.ПредъявленСФ = (ТекущаяСтрока.СпособУчетаНДС = 1);
	ТекущаяСтрока.БланкСтрогойОтчетности = (ТекущаяСтрока.СпособУчетаНДС = 2);
	
	Если Не ТекущаяСтрока.ПредъявленСФ Тогда
		ТекущаяСтрока.НомерСФ = "";
		ТекущаяСтрока.ДатаСФ = Неопределено;
		ТекущаяСтрока.СчетФактура = Неопределено;
	КонецЕсли;
	
	ТекущаяСтрока.ПредставлениеСФ = ПредставлениеСчетФактуры(ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонвертацияВалюты

&НаКлиенте
Процедура КонвертацияВалютыВалютаПриИзменении(Элемент)
	
	ПересчитатьКурсКонвертации();
	
КонецПроцедуры

&НаКлиенте
Процедура КонвертацияВалютыСуммаПриИзменении(Элемент)
	
	КурсКонвертацииПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонвертацияВалютыВалютаКонвертацииПриИзменении(Элемент)
	
	ПересчитатьКурсКонвертации();
	
КонецПроцедуры

&НаКлиенте
Процедура КонвертацияВалютыСуммаКонвертацииПриИзменении(Элемент)
	
	СуммаКонвертацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонвертацияВалютыКурсПриИзменении(Элемент)
	
	КурсКонвертацииПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонвертацияВалютыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьСуммуДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КонвертацияВалютыПослеУдаления(Элемент)
	
	РассчитатьСуммуДокумента(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура используется в автотесте процесса продаж.
//
&НаКлиенте
Процедура АвтоТест_ЗаполнитьПолученныеАвансы(Команда) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("АвтоТест_ЗаполнитьПолученныеАвансыЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение,
		ЭтаФорма,
		Объект.ПрочиеРасходы,
		Новый Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткам(Команда)
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Организация");
	
	Если Не Объект.Мультивалютный Тогда
		СтруктураРеквизитов.Вставить("Валюта");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПодборПоОстаткамЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение,
		ЭтаФорма,
		Неопределено,
		СтруктураРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКонвертацию(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьКонвертациюЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение,
		ЭтаФорма,
		Объект.КонвертацияВалюты,
		Новый Структура);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура ЗаполнитьПодразделение(Команда)
	
	ВыделенныеСтроки = Элементы.ПрочиеРасходы.ВыделенныеСтроки;
	
	Если Объект.ПрочиеРасходы.Количество() = 0 Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'В список ""Расходы"" не введено ни одной строки.'"));
		Возврат;
	ИначеЕсли ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'В списке ""Расходы"" не выделено ни одной строки.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Подразделение", Объект.Подразделение);
	
	ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьюРасходовАктивов(Команда)
	
	ВыделенныеСтроки = Элементы.ПрочиеРасходы.ВыделенныеСтроки;
	
	Если Объект.ПрочиеРасходы.Количество() = 0 Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'В список ""Расходы"" не введено ни одной строки.'"));
		Возврат;
	ИначеЕсли ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'В списке ""Расходы"" не выделено ни одной строки.'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СтатьяРасходовВыборДляЗаполненияЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Статья", Элементы.ПрочиеРасходы.ТекущиеДанные.СтатьяРасходов);
	ПараметрыФормы.Вставить("ПараметрыВыбора", Элементы.ПрочиеРасходыСтатьяРасходов.ПараметрыВыбора);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораСтатьи", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовВыборДляЗаполненияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Элементы.ПрочиеРасходы.ВыделенныеСтроки);
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект.ПрочиеРасходы.НайтиПоИдентификатору(Строка);
		ДанныеСтроки.СтатьяРасходов = Результат;
		Элементы.ПрочиеРасходы.ТекущаяСтрока = Строка;
		ПрочиеРасходыСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАналитикуРасходов(Команда)
	
	ВыделенныеСтроки = Элементы.ПрочиеРасходы.ВыделенныеСтроки;
	
	Если Объект.ПрочиеРасходы.Количество() = 0 Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'В список ""Расходы"" не введено ни одной строки.'"));
		Возврат;
	ИначеЕсли ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'В списке ""Расходы"" не выделено ни одной строки.'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("АналитикаВыборДляЗаполненияЗавершение", ЭтотОбъект);
	
	ФормаВыбораАналитики = Неопределено;
	
	Если Элементы.ПрочиеРасходы.ТекущиеДанные.ТипСтатьи = 1 Тогда
		ФормаВыбораАналитики = ФормаВыбораАналитикиАктивовПассивов(ТипЗнч(Элементы.ПрочиеРасходы.ТекущиеДанные.АналитикаРасходов));
	ИначеЕсли Элементы.ПрочиеРасходы.ТекущиеДанные.ТипСтатьи = 3 Тогда
		ФормаВыбораАналитики = ФормаВыбораАналитикиАктивовПассивов(ТипЗнч(Элементы.ПрочиеРасходы.ТекущиеДанные.АналитикаАктивовПассивов));
	КонецЕсли;
	
	Если ФормаВыбораАналитики <> Неопределено Тогда
		ОткрытьФорму(ФормаВыбораАналитики, , ЭтаФорма,,,, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФормаВыбораАналитикиАктивовПассивов(ТипАналитики)
	
	МетаданныеАналитики = Метаданные.НайтиПоТипу(ТипАналитики);
	Если МетаданныеАналитики <> Неопределено Тогда
		Возврат МетаданныеАналитики.ПолноеИмя() + ".ФормаВыбора";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура АналитикаВыборДляЗаполненияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.ПрочиеРасходы.ВыделенныеСтроки;
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект.ПрочиеРасходы.НайтиПоИдентификатору(Строка);
		ДанныеСтроки.АналитикаРасходов = Результат;
		ДанныеСтроки.АналитикаАктивовПассивов = Результат;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст)
	
	ДанныеВыбора = Новый СписокЗначений;
	ПродажиСервер.ЗаполнитьДанныеВыбораАналитикиРасходов(ДанныеВыбора, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ПараметрыРазбиенияСтроки = Новый Структура;
	ПараметрыРазбиенияСтроки.Вставить("ИмяПоляКоличество", "Сумма");
	ПараметрыРазбиенияСтроки.Вставить("Количество", Неопределено);
	ПараметрыРазбиенияСтроки.Вставить("Заголовок", НСтр("ru = 'Введите сумму в новой строке'"));
	ПараметрыРазбиенияСтроки.Вставить("РазрешитьНулевоеКоличество", Истина);
	
	ТаблицаФормы  = Элементы.ПрочиеРасходы;
	ДанныеТаблицы = Объект.ПрочиеРасходы;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы, Оповещение, ПараметрыРазбиенияСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = Элементы.ПрочиеРасходы.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиСтрокуВОплатыПоставщикам(Команда)
	
	ТекущиеДанные = Элементы.ПрочиеРасходы.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		НоваяСтрока = Объект.ОплатаПоставщикам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные, , "НомерСтроки");
	
		Объект.ПрочиеРасходы.Удалить(Объект.ПрочиеРасходы.Индекс(ТекущиеДанные));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиСтрокуВРасходы(Команда)
	
	ТекущиеДанные = Элементы.ОплатаПоставщикам.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		НоваяСтрока = Объект.ПрочиеРасходы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные, , "НомерСтроки");
		ПриДобавлениСтрокиРасходов(НоваяСтрока);
		
		Объект.ОплатаПоставщикам.Удалить(Объект.ОплатаПоставщикам.Индекс(ТекущиеДанные));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакупкиПодобрать(Команда)
	
	ПараметрыПодбора = Новый Структура("Ссылка, ПодотчетноеЛицо, Организация, Подразделение, Мультивалютный");
	ЗаполнитьЗначенияСвойств(ПараметрыПодбора, Объект);
	ПараметрыПодбора.Вставить("Валюта", ?(Объект.Мультивалютный, Неопределено, Объект.Валюта));
	ПараметрыПодбора.Вставить("СуммаПолучено", СуммаПолученоИтог);
	ПараметрыПодбора.Вставить("СуммаИзрасходовано", СуммаИзрасходовано - СуммаЗакупок);
	ПараметрыПодбора.Вставить("СписокДокументовЗакупки", СписокДокументовЗакупки);
	
	ОткрытьФорму("Документ.АвансовыйОтчет.Форма.ПодборДокументовЗакупки",
		ПараметрыПодбора,
		ЭтаФорма,,,,
		Новый ОписаниеОповещения("ЗакупкиПодобратьЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗакупкиПодобратьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И ЭтоАдресВременногоХранилища(Результат) Тогда
		ОбработкаПодбораДокументовЗакупки(Результат);
		РассчитатьСуммуДокумента(ЭтаФорма);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПодбораДокументовЗакупки(АдресВХранилище)
	
	СписокДокументовЗакупки.ЗагрузитьЗначения(ПолучитьИзВременногоХранилища(АдресВХранилище));
	ОбновитьДокументыЗакупки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакупкиУдалить(Команда)
	
	ВыделенныеДокументы = Новый Массив;
	Если Элементы.ДокументыЗакупки.ВыделенныеСтроки.Количество() Тогда
		Для каждого ВыделеннаяСтрока Из Элементы.ДокументыЗакупки.ВыделенныеСтроки Цикл
			ВыделенныеДокументы.Добавить(Элементы.ДокументыЗакупки.ДанныеСтроки(ВыделеннаяСтрока).ДокументЗакупки);
		КонецЦикла;
		УдалитьДокументыЗакупкиИзСписка(ВыделенныеДокументы);
		Модифицированность = Истина;
	КонецЕсли;
	
	РассчитатьСуммуДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДокументыЗакупкиИзСписка(ДокументыКУдалению)
	
	ВыбранныеДокументы = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(СписокДокументовЗакупки.ВыгрузитьЗначения());
	
	Для каждого ДокументКУдалению Из ДокументыКУдалению Цикл
		ИндексЭлемента = ВыбранныеДокументы.Найти(ДокументКУдалению);
		Если ИндексЭлемента <> Неопределено Тогда
			ВыбранныеДокументы.Удалить(ИндексЭлемента);
		КонецЕсли;
	КонецЦикла;
	
	СписокДокументовЗакупки.ЗагрузитьЗначения(ВыбранныеДокументы);
	
	ОбновитьДокументыЗакупки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакупкиСоздатьПТиУ(Команда)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Организация", Объект.Организация);
	ЗначенияЗаполнения.Вставить("ПодотчетноеЛицо", Объект.ПодотчетноеЛицо);
	ЗначенияЗаполнения.Вставить("Подразделение", Объект.Подразделение);
	ЗначенияЗаполнения.Вставить("ХозяйственнаяОперация",
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо"));
	
	ПараметрыСоздания = Новый Структура;
	ПараметрыСоздания.Вставить("ИмяДокумента", "ПриобретениеТоваровУслуг");
	ПараметрыСоздания.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ЗакупкиСоздатьДокументВопрос(ПараметрыСоздания);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакупкиСоздатьПДД(Команда)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Организация", Объект.Организация);
	ЗначенияЗаполнения.Вставить("ПодотчетноеЛицо", Объект.ПодотчетноеЛицо);
	ЗначенияЗаполнения.Вставить("Подразделение", Объект.Подразделение);
	ЗначенияЗаполнения.Вставить("ХозяйственнаяОперация",
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхДокументовОтПодотчетника"));
	
	ПараметрыСоздания = Новый Структура;
	ПараметрыСоздания.Вставить("ИмяДокумента", "ПоступлениеДенежныхДокументов");
	ПараметрыСоздания.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ЗакупкиСоздатьДокументВопрос(ПараметрыСоздания);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакупкиСоздатьДокументВопрос(ДополнительныеПараметры)
	
	Обработчик = Новый ОписаниеОповещения("ЗакупкиСоздатьДокументЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстВопроса = НСтр("ru = 'Авансовый отчет еще не записан.
			|Создание документа закупки возможно только после записи авансового отчета.
			|Данные будут записаны.'");
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ВыполнитьОбработкуОповещения(Обработчик, КодВозвратаДиалога.Пропустить);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакупкиСоздатьДокументЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Записать();
	ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияЗаполнения = ДополнительныеПараметры.ЗначенияЗаполнения;
	ЗначенияЗаполнения.Вставить("АвансовыйОтчет", Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ." + ДополнительныеПараметры.ИмяДокумента + ".ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	НастройкиПолейФормы = Документы.АвансовыйОтчет.НастройкиПолейФормы();
	ЗначениеВРеквизитФормы(НастройкиПолейФормы, "НастройкиПолей");
	ЗависимостиПолейФормы = ДенежныеСредстваСервер.ЗависимостиПолейФормы(НастройкиПолейФормы);
	ЗначениеВРеквизитФормы(ЗависимостиПолейФормы, "ЗависимостиПолей");
	
	
	ВалютаРеглУчета                             = Константы.ВалютаРегламентированногоУчета.Получить();
	ИспользоватьНесколькоВалют                  = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	ИспользоватьСтатусыАвансовыхОтчетов         = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыАвансовыхОтчетов");
	ИспользоватьЗаказы                          = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам");
	КонтролироватьВыдачуПодОтчетВРазрезеЦелей   = ПолучитьФункциональнуюОпцию("КонтролироватьВыдачуПодОтчетВРазрезеЦелей");
	ДатаНачалаПечатиЕдиногоАвансовогоОтчета     = Константы.ДатаНачалаПечатиЕдиногоАвансовогоОтчета.Получить();
	ЕдиныйАвансовыйОтчетБезусловно              = Не Константы.ВидимостьДатыНачалаПечатиЕдиногоАвансовогоОтчета.Получить();
	ОпределитьПечатьЕдиногоАвансовогоОтчета();
	
	Если ИспользоватьСтатусыАвансовыхОтчетов Тогда
		ПравоУтверждения = ПраваПользователяПовтИсп.УтверждениеАвансовыхОтчетов();
	Иначе
		ПравоУтверждения = Истина;
	КонецЕсли;
	
	ТекущаяВалюта = Объект.Валюта;
	НесколькоВалют = Число(Объект.Мультивалютный);
	Если НесколькоВалют Тогда
		Для каждого СтрокаТаблицы Из Объект.КонвертацияВалюты Цикл
			Элементы.КонвертацияВалюты.ТекущаяСтрока = СтрокаТаблицы.ПолучитьИдентификатор();
			СформироватьКурсТекстом();
		КонецЦикла;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из Объект.ПрочиеРасходы Цикл
		Если СтрокаТаблицы.ПредъявленСФ Тогда
			СтрокаТаблицы.СпособУчетаНДС = 1;
		ИначеЕсли СтрокаТаблицы.БланкСтрогойОтчетности Тогда
			СтрокаТаблицы.СпособУчетаНДС = 2;
		Иначе
			СтрокаТаблицы.СпособУчетаНДС = 0;
		КонецЕсли;
	КонецЦикла;
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.ПрочиеРасходы);
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовЗаказРеализация(Объект.ПрочиеРасходы);
	ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(Объект.ПрочиеРасходы);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
		Элементы.ПрочиеРасходыСтатьяРасходов.Заголовок = НСтр("ru = 'Статья расходов'");
	КонецЕсли;
	
	Элементы.ОплатаПоставщикамЭтоНекорректныйКонтрагент.Видимость = ПроверкаКонтрагентов.ПроверкаКонтрагентовВключена();
	
	Если Не ПравоДоступа("Редактирование", Метаданные.Документы.АвансовыйОтчет) Тогда
		Элементы.ОднаВалюта.Доступность = Ложь;
		Элементы.НесколькоВалют.Доступность = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СписокДокументовЗакупки.ЗагрузитьЗначения(Документы.АвансовыйОтчет.СписокДокументовЗакупки(Объект.Ссылка));
	КонецЕсли;
	ОбновитьДокументыЗакупки();
	
	ЗаполнитьСуммуПолучено();
	РассчитатьСуммуДокумента(ЭтаФорма);
	
	ЗаполнитьПредставлениеСчетФактуры();
	
	АктуализироватьЗакупкуПодДеятельность(Ложь);
	
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
КонецПроцедуры


&НаСервере
Процедура НастроитьЗависимыеЭлементыФормыНаСервере(ИзмененныйРеквизит = "")
	
	ДенежныеСредстваКлиентСервер.НастроитьЭлементыФормы(ЭтаФорма, ИзмененныйРеквизит, РеквизитыФормы(ЭтаФорма));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РеквизитыФормы(Форма)
	
	РеквизитыФормы = Новый Структура;
	РеквизитыФормы.Вставить("ИспользоватьНесколькоВалют");
	РеквизитыФормы.Вставить("ПечатьЕдиногоАвансовогоОтчета");
	РеквизитыФормы.Вставить("ИспользоватьСтатусыАвансовыхОтчетов");
	РеквизитыФормы.Вставить("КонтролироватьВыдачуПодОтчетВРазрезеЦелей");
	
	ЗаполнитьЗначенияСвойств(РеквизитыФормы, Форма);
	
	Возврат РеквизитыФормы;
	
КонецФункции

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	АктуализироватьЗакупкуПодДеятельность();
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	ОпределитьПечатьЕдиногоАвансовогоОтчета();
	
	Если Не ПечатьЕдиногоАвансовогоОтчета Тогда
		СписокДокументовЗакупки.Очистить();
		ОбновитьДокументыЗакупки();
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормыНаСервере("ПечатьЕдиногоАвансовогоОтчета");
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзмененииКлиент()
	
	Если ТекущаяВалюта <> Объект.Валюта
		И Объект.ОплатаПоставщикам.Итог("СуммаВзаиморасчетов") <> 0 Тогда
		Для Каждого СтрокаТаблицы Из Объект.ОплатаПоставщикам Цикл
			СтрокаТаблицы.СуммаВзаиморасчетов = 0;
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Заказ) Тогда
				СтрокаТаблицы.ВалютаВзаиморасчетов = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТекущаяВалюта <> Объект.Валюта
		И ЗначениеЗаполнено(ТекущаяВалюта)
		И ЗначениеЗаполнено(Объект.Валюта)
		И Объект.СуммаИзрасходовано <> 0 Тогда
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Пересчитать суммы в документе в валюту %1 ?'"), Объект.Валюта);
		ПоказатьВопрос(Новый ОписаниеОповещения("ВалютаПриИзмененииКлиентЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		
		ТекущаяВалюта = Объект.Валюта;
		ВалютаПриИзмененииСервер();
		РассчитатьСуммуДокумента(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВалютаПриИзмененииСервер()
	
	ЗаполнитьСуммуПолучено();
	ОбновитьДокументыЗакупки();
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Валюта");
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзмененииКлиентЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ПересчетСуммДокументаВВалютуСервер();
		РассчитатьСуммуДокумента(ЭтаФорма);
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Суммы в документе пересчитаны в валюту %1'"), Объект.Валюта);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Суммы пересчитаны'"),, Текст, БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ТекущаяВалюта = Объект.Валюта;
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Валюта");

КонецПроцедуры

&НаСервере
Процедура ПолучитьОплатуПоставщикамИзХранилища(АдресПлатежейВХранилище)

	ТаблицаПлатежей = ПолучитьИзВременногоХранилища(АдресПлатежейВХранилище);
	Для Каждого СтрокаТаблицы Из ТаблицаПлатежей Цикл
		НоваяСтрока = Объект.ОплатаПоставщикам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.Поставщик = СтрокаТаблицы.Партнер;
		Если Объект.Мультивалютный Тогда
			НоваяСтрока.Валюта = СтрокаТаблицы.ВалютаВзаиморасчетов;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуДокумента(Форма)
	
	Объект = Форма.Объект;
	
	Если Не Объект.Мультивалютный Тогда
		
		Объект.СуммаИзрасходовано = 0;
		Объект.СуммаОтклонено = 0;
		
		Для каждого Расход Из Объект.ПрочиеРасходы Цикл
			Если Расход.Отменено Тогда
				Объект.СуммаОтклонено = Объект.СуммаОтклонено + Расход.Сумма;
			Иначе
				Объект.СуммаИзрасходовано = Объект.СуммаИзрасходовано + Расход.Сумма;
			КонецЕсли;
		КонецЦикла;
		
		Объект.СуммаИзрасходовано = Объект.СуммаИзрасходовано + Объект.ОплатаПоставщикам.Итог("Сумма");
		Форма.СуммаИзрасходовано = Объект.СуммаИзрасходовано + Форма.СуммаЗакупок;
		Форма.СуммаПолученоИтог = Форма.СуммаПолучено;
		
		Если Форма.СуммаПолученоИтог < Форма.СуммаИзрасходовано Тогда
			Форма.ОстатокПерерасход = Форма.СуммаИзрасходовано - Форма.СуммаПолученоИтог;
			Форма.Элементы.ОстатокПерерасход.Заголовок = НСтр("ru = 'Перерасход'");
		Иначе
			Форма.ОстатокПерерасход = Форма.СуммаПолученоИтог - Форма.СуммаИзрасходовано;
			Форма.Элементы.ОстатокПерерасход.Заголовок = НСтр("ru = 'Остаток'");
		КонецЕсли;
		
	Иначе
		
		ИтогиПоВалютам = Новый Соответствие;
		
		Для каждого СтрокаТЧ Из Форма.ТаблицаИтоговПоВалютам Цикл
			Если СтрокаТЧ.Получено <> 0 Тогда
				ДобавитьСуммуВИтогиПоВалютам(ИтогиПоВалютам, СтрокаТЧ.Валюта, СтрокаТЧ.Получено, "Получено");
			КонецЕсли;
			Если СтрокаТЧ.СуммаЗакупок <> 0 Тогда
				ДобавитьСуммуВИтогиПоВалютам(ИтогиПоВалютам, СтрокаТЧ.Валюта, СтрокаТЧ.СуммаЗакупок, "Израсходовано");
				ДобавитьСуммуВИтогиПоВалютам(ИтогиПоВалютам, СтрокаТЧ.Валюта, СтрокаТЧ.СуммаЗакупок, "СуммаЗакупок");
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтрокаТЧ Из Объект.ПрочиеРасходы Цикл
			Если СтрокаТЧ.Отменено Тогда
				ДобавитьСуммуВИтогиПоВалютам(ИтогиПоВалютам, СтрокаТЧ.Валюта, СтрокаТЧ.Сумма, "Отклонено");
			Иначе
				ДобавитьСуммуВИтогиПоВалютам(ИтогиПоВалютам, СтрокаТЧ.Валюта, СтрокаТЧ.Сумма, "Израсходовано");
			КонецЕсли;
		КонецЦикла;
		Для каждого СтрокаТЧ Из Объект.ОплатаПоставщикам Цикл
			ДобавитьСуммуВИтогиПоВалютам(ИтогиПоВалютам, СтрокаТЧ.Валюта, СтрокаТЧ.Сумма, "Израсходовано");
		КонецЦикла;
		Для каждого СтрокаТЧ Из Объект.КонвертацияВалюты Цикл
			ДобавитьСуммуВИтогиПоВалютам(ИтогиПоВалютам, СтрокаТЧ.Валюта, -СтрокаТЧ.Сумма, "Конвертировано");
			ДобавитьСуммуВИтогиПоВалютам(ИтогиПоВалютам, СтрокаТЧ.ВалютаКонвертации, СтрокаТЧ.СуммаКонвертации, "Конвертировано");
		КонецЦикла;
		
		УдаляемыеСтроки = Новый Массив;
		
		Для каждого КлючИЗначение Из ИтогиПоВалютам Цикл
			СтрокаИтогов = КлючИЗначение.Значение;
			Если СтрокаИтогов.Получено + СтрокаИтогов.Конвертировано <= СтрокаИтогов.Израсходовано Тогда
				СтрокаИтогов.Перерасход = СтрокаИтогов.Израсходовано - СтрокаИтогов.Получено - СтрокаИтогов.Конвертировано;
				СтрокаИтогов.Остаток = 0;
			Иначе
				СтрокаИтогов.Перерасход = 0;
				СтрокаИтогов.Остаток = СтрокаИтогов.Получено + СтрокаИтогов.Конвертировано - СтрокаИтогов.Израсходовано;
			КонецЕсли;
			УдалитьСтроку = Истина;
			Для каждого КлючИЗначениеИтогов Из СтрокаИтогов Цикл
				Если КлючИЗначениеИтогов.Значение <> 0 Тогда
					УдалитьСтроку = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если УдалитьСтроку Тогда
				УдаляемыеСтроки.Добавить(КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			ИтогиПоВалютам.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
		Форма.МультивалютныеСуммы = СтрокаМультивалютныеСуммы(ИтогиПоВалютам);
		
		Форма.ТаблицаИтоговПоВалютам.Очистить();
		Для каждого КлючИЗначение Из ИтогиПоВалютам Цикл
			НоваяСтрока = Форма.ТаблицаИтоговПоВалютам.Добавить();
			НоваяСтрока.Валюта = КлючИЗначение.Ключ;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчетСуммДокументаВВалютуСервер()
	
	СтруктураКурсовТекущейВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ТекущаяВалюта, Объект.Дата);
	СтруктураКурсовНовойВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.Валюта, Объект.Дата);
	
	Для каждого СтрокаТаблицы Из Объект.ПрочиеРасходы Цикл
		
		СтрокаТаблицы.Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
			СтрокаТаблицы.Сумма, СтруктураКурсовТекущейВалюты, СтруктураКурсовНовойВалюты);
			
		СтрокаТаблицы.СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СтрокаТаблицы.Сумма, СтрокаТаблицы.СтавкаНДС, Объект.ЦенаВключаетНДС);
		СтрокаТаблицы.СуммаСНДС = СтрокаТаблицы.Сумма + ?(Объект.ЦенаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из Объект.ОплатаПоставщикам Цикл
		СтрокаТаблицы.Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
			СтрокаТаблицы.Сумма, СтруктураКурсовТекущейВалюты, СтруктураКурсовНовойВалюты);
	КонецЦикла;
	
	ВалютаПриИзмененииСервер();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКонтрагентаПартнераПоУмолчанию(Партнер)
	
	Возврат ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(Партнер);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Форма)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Форма.Объект);
	
	Возврат СтруктураПересчетаСуммы;
	
КонецФункции

#Область РаботаСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьПодчиненныеСвойстваПоСтатистике(ИмяРеквизитаРодителя)
	ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьПодчиненныеСвойства(Объект, ИмяРеквизитаРодителя);
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	ТипыСтатей = Новый Массив;
	ТипыСтатей.Добавить(1); // Статьи расходов
	ТипыСтатей.Добавить(3); // Статьи активов/пассивов
	ДоходыИРасходыСервер.УстановитьУсловноеОформлениеАналитикПриСовместномИспользованииСтатей(ЭтаФорма, "ПрочиеРасходы", ТипыСтатей);

	//
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(УсловноеОформление, Новый Структура("ПрочиеРасходы"));
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыАналитикаРасходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПрочиеРасходы.СтатьяРасходов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//

	Ценообразование.УстановитьУсловноеОформлениеЦенаВключаетНДС(ЭтаФорма, "ПрочиеРасходыСуммаСНДС");
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыКонтрагент.Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПрочиеРасходы.СтавкаНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтавкиНДС.БезНДС;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыАвансовогоОтчета.Утвержден;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	ЗаказыСервер.УстановитьОформлениеОтмененнойСтроки(УсловноеОформление,
		Элементы.ПрочиеРасходы,
		Элементы.ПрочиеРасходыОтклонено.Имя,
		Элементы.ПрочиеРасходыПричинаОтклонения.Имя);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыПричинаОтклонения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПрочиеРасходы.ПричинаОтмены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Черный);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСтатьяРасходов.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыАналитикаРасходов.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыАналитикаАктивовПассивов.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыПодразделение.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСчетРеглУчетаРасходов.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСчетРеглУчетаАктивовПассивов.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСтавкаНДС.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСуммаНДС.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСуммаСНДС.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСпособУчетаНДС.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСчетФактура.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыАвансовогоОтчета.Утвержден;
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КонвертацияВалютыКурс.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСпособУчетаНДС.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПрочиеРасходы.СпособУчетаНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Списать в расходы'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСпособУчетаНДС.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПрочиеРасходы.СпособУчетаНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Принять к вычету по СФ'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСпособУчетаНДС.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПрочиеРасходы.СпособУчетаНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Принять к вычету по БСО (или иному документу)'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСпособУчетаНДС.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПрочиеРасходы.СтавкаНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокСтавокНДС = Новый СписокЗначений;
	СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.БезНДС);
	СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС0);
	СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.ПустаяСсылка());
	ОтборЭлемента.ПравоеЗначение = СписокСтавокНДС;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСчетФактура.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПрочиеРасходы.СпособУчетаНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСчетФактура.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПрочиеРасходы.СпособУчетаНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Истина);
	
	// Иной документ
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыИнойДокумент.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПрочиеРасходы.СпособУчетаНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПрочиеРасходы.СчетФактура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Создается автоматически>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	
	// Иной документ
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыИнойДокумент.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПрочиеРасходы.СпособУчетаНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 2;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПрочиеРасходы.СчетФактура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Счет фактура
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСчетФактура.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПрочиеРасходы.СпособУчетаНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПрочиеРасходы.СчетФактура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыКонтрагент.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПрочиеРасходы.СпособУчетаНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПрочиеРасходы.Контрагент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСчетФактура.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ГруппаОтбора1 = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПрочиеРасходы.НомерСФ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПрочиеРасходы.ДатаСФ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ГруппаОтбора2 = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПрочиеРасходы.НомерСФ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПрочиеРасходы.ДатаСФ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСуммуПолучено()
	
	ВыборкаПолучено = ВыборкаПолучено();
	
	Если Не Объект.Мультивалютный Тогда
		Если ВыборкаПолучено.Следующий() Тогда
			СуммаПолучено = ВыборкаПолучено.Получено;
		Иначе
			СуммаПолучено = 0;
		КонецЕсли;
	Иначе
		Таблица = РеквизитФормыВЗначение("ТаблицаИтоговПоВалютам");
		Таблица.ЗаполнитьЗначения(0, "Получено");
		Пока ВыборкаПолучено.Следующий() Цикл
			СтрокаИтогПоВалюте = Таблица.Добавить();
			СтрокаИтогПоВалюте.Валюта = ВыборкаПолучено.Валюта;
			СтрокаИтогПоВалюте.Получено = ВыборкаПолучено.Получено;
		КонецЦикла;
		Таблица.Свернуть("Валюта, Курс, Растяжка", "Получено, Израсходовано, Перерасход, Отклонено, Остаток, Конвертировано, СуммаЗакупок");
		ЗначениеВРеквизитФормы(Таблица, "ТаблицаИтоговПоВалютам");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДокументыЗакупки()
	
	ДокументыЗакупки.Параметры.УстановитьЗначениеПараметра("СписокДокументовЗакупки", СписокДокументовЗакупки);
	
	//ЧислоДокументовЗакупки
	ТекстЗапроса = "ВЫБРАТЬ КОЛИЧЕСТВО(*) КАК ЧислоДокументовЗакупки ИЗ (" + ДокументыЗакупки.ТекстЗапроса + ") КАК Данные";
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Для каждого ПараметрЗапроса Из ДокументыЗакупки.Параметры.Элементы Цикл
		Запрос.УстановитьПараметр(Строка(ПараметрЗапроса.Параметр), ПараметрЗапроса.Значение);
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ЧислоДокументовЗакупки = Выборка.ЧислоДокументовЗакупки;
	
	//Итоги
	ТекстЗапроса = "ВЫБРАТЬ СУММА(Данные.Сумма), Данные.Валюта КАК Валюта ИЗ (" + ДокументыЗакупки.ТекстЗапроса + ") КАК Данные СГРУППИРОВАТЬ ПО Данные.Валюта";
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Для каждого ПараметрЗапроса Из ДокументыЗакупки.Параметры.Элементы Цикл
		Запрос.УстановитьПараметр(Строка(ПараметрЗапроса.Параметр), ПараметрЗапроса.Значение);
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Объект.Мультивалютный Тогда
		Если Выборка.Следующий() Тогда
			СуммаЗакупок = Выборка.Сумма;
		Иначе
			СуммаЗакупок = 0;
		КонецЕсли;
	Иначе
		Таблица = РеквизитФормыВЗначение("ТаблицаИтоговПоВалютам");
		Таблица.ЗаполнитьЗначения(0, "СуммаЗакупок");
		Пока Выборка.Следующий() Цикл
			СтрокаИтогПоВалюте = Таблица.Добавить();
			СтрокаИтогПоВалюте.Валюта = Выборка.Валюта;
			СтрокаИтогПоВалюте.СуммаЗакупок = Выборка.Сумма;
		КонецЦикла;
		Таблица.Свернуть("Валюта, Курс, Растяжка", "Получено, Израсходовано, Перерасход, Отклонено, Остаток, Конвертировано, СуммаЗакупок");
		ЗначениеВРеквизитФормы(Таблица, "ТаблицаИтоговПоВалютам");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьСуммуВИтогиПоВалютам(ИтогиПоВалютам, Валюта, Сумма, Колонка)
	
	ИтогПоВалюте = ИтогиПоВалютам.Получить(Валюта);
	Если ИтогПоВалюте = Неопределено Тогда
		ИтогПовалюте = ИнициализироватьИтогПоВалюте();
		ИтогиПоВалютам.Вставить(Валюта, ИтогПовалюте);
	КонецЕсли;
	
	ИсходнаяСумма = 0;
	ИтогПоВалюте.Свойство(Колонка, ИсходнаяСумма);
	ИтогПоВалюте.Вставить(Колонка, ИсходнаяСумма + Сумма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИнициализироватьИтогПоВалюте()
	
	ИтогПоВалюте = Новый Структура;
	ИтогПоВалюте.Вставить("Получено", 0);
	ИтогПоВалюте.Вставить("Израсходовано", 0);
	ИтогПоВалюте.Вставить("Конвертировано", 0);
	ИтогПоВалюте.Вставить("Отклонено", 0);
	ИтогПоВалюте.Вставить("Остаток", 0);
	ИтогПоВалюте.Вставить("Перерасход", 0);
	ИтогПоВалюте.Вставить("СуммаЗакупок", 0);
	
	Возврат ИтогПоВалюте;
	
КонецФункции

&НаСервере
Функция ВыборкаПолучено()
	
	ЗапросДаты = Новый Запрос;
	ЗапросДаты.Текст = "
	|ВЫБРАТЬ
	|	МИНИМУМ(ДанныеДокумента.Дата) КАК ДатаОтчетаНачальная,
	|	МАКСИМУМ(ДанныеДокумента.Дата) КАК ДатаОтчетаКонечная
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеДокумента.Дата КАК Дата
	|	ИЗ
	|		Документ.АвансовыйОтчет КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Документ.АвансовыйОтчет.ОплатаПоставщикам КАК ТЧОплатаПоставщикам
	|		ПО
	|			ТЧОплатаПоставщикам.Ссылка = ДанныеДокумента.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Документ.АвансовыйОтчет.ПрочиеРасходы КАК ТЧПрочиеРасходы
	|		ПО
	|			ТЧПрочиеРасходы.Ссылка = ДанныеДокумента.Ссылка
	|	ГДЕ
	|		ДанныеДокумента.Ссылка = &Ссылка
	|		И ДанныеДокумента.Проведен
	|		И ДанныеДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАвансовогоОтчета.Утвержден)
	|		И (НЕ ТЧОплатаПоставщикам.НомерСтроки ЕСТЬ NULL ИЛИ НЕ ТЧПрочиеРасходы.НомерСтроки ЕСТЬ NULL)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеДокумента.Дата
	|	ИЗ
	|		Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
	|	ГДЕ
	|		ДанныеДокумента.Ссылка В (&СписокДокументовЗакупки)
	|		И ДанныеДокумента.Проведен
	|	
	|	) КАК ДанныеДокумента
	|";
	ЗапросДаты.УстановитьПараметр("Ссылка", Объект.Ссылка);
	ЗапросДаты.УстановитьПараметр("СписокДокументовЗакупки", СписокДокументовЗакупки);
	
	ВыборкаДаты = ЗапросДаты.Выполнить().Выбрать();
	ВыборкаДаты.Следующий();
	
	Если ЗначениеЗаполнено(ВыборкаДаты.ДатаОтчетаНачальная) Тогда
		ДатаОтчетаНачальная = ВыборкаДаты.ДатаОтчетаНачальная;
	Иначе
		ДатаОтчетаНачальная = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаДаты.ДатаОтчетаКонечная) Тогда
		ДатаОтчетаКонечная = ВыборкаДаты.ДатаОтчетаКонечная;
	Иначе
		ДатаОтчетаКонечная = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ДатаОтчетаНачальная, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("НачальнаяДатаОборотов", Новый Граница(ДатаОтчетаНачальная, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонечнаяДатаОборотов", Новый Граница(ДатаОтчетаКонечная, ВидГраницы.Исключая));
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СУММА(ДенежныеСредства.Получено) КАК Получено,
	|	ДенежныеСредства.Валюта
	|ИЗ (
	|ВЫБРАТЬ
	|	ДенежныеСредства.СуммаОстаток КАК Получено,
	|	ДенежныеСредства.Валюта КАК Валюта
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.Остатки(&ДатаОстатков,
	|		Организация = &Организация
	|		И Подразделение = &Подразделение
	|		И ПодотчетноеЛицо = &ПодотчетноеЛицо
	|		И (Валюта = &Валюта ИЛИ &Мультивалютный)
	|	) КАК ДенежныеСредства
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДенежныеСредства.СуммаПриход КАК Получено,
	|	ДенежныеСредства.Валюта КАК Валюта
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.Обороты(&НачальнаяДатаОборотов, &КонечнаяДатаОборотов,,
	|		Организация = &Организация
	|		И Подразделение = &Подразделение
	|		И ПодотчетноеЛицо = &ПодотчетноеЛицо
	|		И (Валюта = &Валюта ИЛИ &Мультивалютный)
	|	) КАК ДенежныеСредства
	|) КАК ДенежныеСредства
	|СГРУППИРОВАТЬ ПО
	|	ДенежныеСредства.Валюта
	|";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("ПодотчетноеЛицо", Объект.ПодотчетноеЛицо);
	Запрос.УстановитьПараметр("Валюта", Объект.Валюта);
	Запрос.УстановитьПараметр("Мультивалютный", Объект.Мультивалютный);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоТест_ЗаполнитьПолученныеАвансыЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ЗаполнитьПолученныеАвансы();
	
	Если Объект.ПрочиеРасходы.Количество() = 0 Тогда
		Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
			Текст = СтрШаблон(
				НСтр("ru = 'У подотчетного лица отсутствуют выданные авансы, за которые он не отчитался перед организацией %1 в подразделении %2 в валюте %3'"),
				Объект.Организация, Объект.Подразделение, Объект.Валюта);
		Иначе
			Текст = СтрШаблон(
				НСтр("ru = 'У подотчетного лица отсутствуют выданные авансы, за которые он не отчитался перед организацией %1 в валюте %2 без указания подразделения'"),
				Объект.Организация, Объект.Валюта);
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	КонецЕсли;
	
	РассчитатьСуммуДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолученныеАвансы()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьПолученныеАвансы();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(Объект.ПрочиеРасходы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткамЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("Валюта", Объект.Валюта);
	ПараметрыПодбора.Вставить("ДатаДокумента", Объект.Дата);
	ПараметрыПодбора.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.АвансовыйОтчет"));
	
	ОткрытьФорму(
		"ОбщаяФорма.ПодборПоРасчетамСПартнерами",
		ПараметрыПодбора,
		ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКонвертациюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Объект.КонвертацияВалюты.Очистить();
	
	Для каждого СтрокаТаблицы Из ТаблицаИтоговПоВалютам Цикл
		Если СтрокаТаблицы.Остаток > 0 Тогда
			НоваяСтрока = Объект.КонвертацияВалюты.Добавить();
			НоваяСтрока.Валюта = СтрокаТаблицы.Валюта;
			НоваяСтрока.Сумма = СтрокаТаблицы.Остаток;
		КонецЕсли;
		Если СтрокаТаблицы.Перерасход > 0 Тогда
			НоваяСтрока = Объект.КонвертацияВалюты.Добавить();
			НоваяСтрока.ВалютаКонвертации = СтрокаТаблицы.Валюта;
			НоваяСтрока.СуммаКонвертации = СтрокаТаблицы.Перерасход;
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.КонвертацияВалюты.Количество() = 0 Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'У подотчетного лица отсутствуют денежные средства от организации %1'"),
			Объект.Организация);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	КонецЕсли;
	
	РассчитатьСуммуДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриДобавлениСтрокиРасходов(Строка)
	
	ДоходыИРасходыКлиентСервер.ИнициализироватьПустоеЗначениеСтатьиВСтрокеТЧ(Строка, "СтатьяРасходов");
	ДоходыИРасходыКлиентСервер.ЗаполнитьТипСтатьиВСтрокеТЧ(Строка, "СтатьяРасходов")
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаМультивалютныеСуммы(ИтогиПоВалютам)
	
	СтрокаОстаток = Новый Массив;
	СтрокаПерерасход = Новый Массив;
	
	Для каждого КлючИЗначение Из ИтогиПоВалютам Цикл
		
		Валюта = Строка(КлючИЗначение.Ключ);
		СтрокаИтогов = КлючИЗначение.Значение;
		
		Если СтрокаИтогов.Остаток <> 0 Тогда
			СтрокаОстаток.Добавить(Строка(СтрокаИтогов.Остаток) + " " + Валюта + " ");
		КонецЕсли;
		Если СтрокаИтогов.Перерасход <> 0 Тогда
			СтрокаПерерасход.Добавить(Строка(СтрокаИтогов.Перерасход) + " " + Валюта + " ");
		КонецЕсли;
	КонецЦикла;
	
	Если Не СтрокаОстаток.Количество() И Не СтрокаПерерасход.Количество() Тогда
		ИтоговаяСтрока = Новый ФорматированнаяСтрока(НСтр("ru = 'Остаток -'"));
	Иначе
		ИтоговаяСтрокаМассив = Новый Массив;
		
		Если СтрокаОстаток.Количество() Тогда
			ИтоговаяСтрокаМассив.Добавить(НСтр("ru = 'Остаток'") + " ");
			ИтоговаяСтрокаМассив.Добавить(СтрокаОстаток);
		КонецЕсли;
		
		Если СтрокаПерерасход.Количество() Тогда
			ИтоговаяСтрокаМассив.Добавить(НСтр("ru = 'Перерасход'") + " ");
			ИтоговаяСтрокаМассив.Добавить(СтрокаПерерасход);
		КонецЕсли;
		
		ИтоговаяСтрока = Новый ФорматированнаяСтрока(ИтоговаяСтрокаМассив);
	КонецЕсли;
	
	Возврат ИтоговаяСтрока;
	
КонецФункции

&НаСервере
Процедура КурсКонвертацииПриИзмененииСервер()
	
	СтрокаТаблицы = Объект.КонвертацияВалюты.НайтиПоИдентификатору(Элементы.КонвертацияВалюты.ТекущаяСтрока);
	ПересчитатьПараметрыКонвертации(СтрокаТаблицы, "КурсКонвертации")
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьКурсКонвертации()
	
	СтрокаТаблицы = Объект.КонвертацияВалюты.НайтиПоИдентификатору(Элементы.КонвертацияВалюты.ТекущаяСтрока);
	ПересчитатьПараметрыКонвертации(СтрокаТаблицы, "ВалютаКонвертации")
	
КонецПроцедуры

&НаСервере
Процедура СуммаКонвертацииПриИзмененииНаСервере()
	
	СтрокаТаблицы = Объект.КонвертацияВалюты.НайтиПоИдентификатору(Элементы.КонвертацияВалюты.ТекущаяСтрока);
	ПересчитатьПараметрыКонвертации(СтрокаТаблицы, "СуммаКонвертации")
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьПараметрыКонвертации(СтрокаТаблицы, ИмяРеквизита)
	
	ПараметрыКонвертации = ДенежныеСредстваСервер.ИнициализироватьПараметрыКонвертации();
	ЗаполнитьЗначенияСвойств(ПараметрыКонвертации, СтрокаТаблицы);
	ПараметрыКонвертации.СуммаДокумента = СтрокаТаблицы.Сумма;
	ПараметрыКонвертации.Дата = Объект.Дата;
	ПараметрыКонвертации.ВалютаРеглУчета = ВалютаРеглУчета;
	
	ДенежныеСредстваСервер.РассчитатьПараметрыКонвертации(ПараметрыКонвертации, ИмяРеквизита);
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыКонвертации);
	СтрокаТаблицы.Сумма = ПараметрыКонвертации.СуммаДокумента;
	
	СформироватьКурсТекстом();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьКурсТекстом()
	
	СтрокаТаблицы = Объект.КонвертацияВалюты.НайтиПоИдентификатору(Элементы.КонвертацияВалюты.ТекущаяСтрока);
	
	ШаблонКурса = "%1 %2 = %3 %4";
	
	Если СтрокаТаблицы.КурсКонвертации <> 0 Тогда
		Если СтрокаТаблицы.Валюта = ВалютаРеглУчета Тогда
			СтрокаТаблицы.КурсТекстом = СтрШаблон(
				ШаблонКурса,
				Строка(Формат(СтрокаТаблицы.КурсКонвертации, "ЧДЦ=4")),
				СтрокаТаблицы.Валюта,
				СтрокаТаблицы.КратностьКурсаКонвертации,
				СтрокаТаблицы.ВалютаКонвертации);
		Иначе
			СтрокаТаблицы.КурсТекстом = СтрШаблон(
				ШаблонКурса,
				СтрокаТаблицы.КратностьКурсаКонвертации,
				СтрокаТаблицы.Валюта,
				Строка(Формат(СтрокаТаблицы.КурсКонвертации, "ЧДЦ=4")),
				СтрокаТаблицы.ВалютаКонвертации);
		КонецЕсли;
	Иначе
		СтрокаТаблицы.КурсТекстом = "0";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьЗакупкуПодДеятельность(Заполнить = Истина)
	
	ПараметрыЗаполнения = Документы.АвансовыйОтчет.ПараметрыЗаполненияВидаДеятельностиНДС(Объект);
	
	Если Заполнить Тогда
		УчетНДСУП.ЗаполнитьВидДеятельностиНДС(
			Объект.ЗакупкаПодДеятельность,
			ПараметрыЗаполнения,
			УчетНДСКэшированныеЗначенияПараметров);
	КонецЕсли;
	
	УчетНДСУП.ЗаполнитьСписокВыбораВидаДеятельностиНДС(
		Элементы.ЗакупкаПодДеятельность,
		Объект.ЗакупкаПодДеятельность,
		ПараметрыЗаполнения,
		УчетНДСКэшированныеЗначенияПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеСчетФактуры()
	
	Для каждого СтрокаТЧ Из Объект.ПрочиеРасходы Цикл
		СтрокаТЧ.ПредставлениеСФ = ПредставлениеСчетФактуры(СтрокаТЧ);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСчетФактуры(СтрокаТЧ)
	
	Результат = "";
	
	Если СтрокаТЧ.БланкСтрогойОтчетности И ЗначениеЗаполнено(СтрокаТЧ.СчетФактура) Тогда
		
		Результат = Строка(СтрокаТЧ.СчетФактура);
		
	ИначеЕсли СтрокаТЧ.ПредъявленСФ Тогда
		
		Если ЗначениеЗаполнено(СтрокаТЧ.НомерСФ) Или ЗначениеЗаполнено(СтрокаТЧ.ДатаСФ) Тогда
			Результат = "Счет-фактура №" + СтрокаТЧ.НомерСФ + " " + НСтр("ru = 'от'") + " " + Формат(СтрокаТЧ.ДатаСФ, "ДЛФ=""Д""");
		Иначе
			Результат = НСтр("ru = '<Указать реквизиты счета-фактуры>'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОпределитьПечатьЕдиногоАвансовогоОтчета()
	
	Если ЗначениеЗаполнено(ДатаНачалаПечатиЕдиногоАвансовогоОтчета) Тогда
		Если ЗначениеЗаполнено(Объект.Дата) Тогда
			ПечатьЕдиногоАвансовогоОтчета = (Объект.Дата >= ДатаНачалаПечатиЕдиногоАвансовогоОтчета);
		Иначе
			ПечатьЕдиногоАвансовогоОтчета = (ТекущаяДатаСеанса() >= ДатаНачалаПечатиЕдиногоАвансовогоОтчета);
		КонецЕсли;
	Иначе
		ПечатьЕдиногоАвансовогоОтчета = ЕдиныйАвансовыйОтчетБезусловно;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
