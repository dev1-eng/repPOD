#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет табличную часть ПрочиеРасходы остатками денежных средств у подотчетного лица.
//
Процедура ЗаполнитьПолученныеАвансы() Экспорт

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДенежныеСредства.ЦельВыдачи КАК СтатьяДвиженияДенежныхСредств,
	|	ДенежныеСредства.Валюта КАК Валюта,
	|	ДенежныеСредства.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.Остатки(&Дата,
	|		Организация = &Организация
	|		И ПодотчетноеЛицо = &ПодотчетноеЛицо
	|		И Подразделение = &Подразделение
	|		И (Валюта = &Валюта ИЛИ &Мультивалютный)
	|	) КАК ДенежныеСредства
	|ГДЕ
	|	ДенежныеСредства.СуммаОстаток > 0
	|");
	
	Запрос.УстановитьПараметр("Дата", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПодотчетноеЛицо", ПодотчетноеЛицо);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("Мультивалютный", Мультивалютный);
	
	ПрочиеРасходы.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Для каждого Строка Из ПрочиеРасходы Цикл
		ДоходыИРасходыКлиентСервер.ИнициализироватьПустоеЗначениеСтатьиВСтрокеТЧ(Строка, "СтатьяРасходов");
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		
		ЗаполнитьПоРасходномуКассовомуОрдеру(ДанныеЗаполнения, ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		
		ЗаполнитьПоСписаниюБезналичныхДенежныхСредств(ДанныеЗаполнения, ДанныеЗаполнения);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		КОформлению = Новый Массив;
		Если ДанныеЗаполнения.Свойство("КОформлению", КОформлению) Тогда
		
			Шапка = КОформлению[0];
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Шапка);
			
			Для каждого СтрокаКОформлению Из КОформлению Цикл
				
				Если СтрокаКОформлению.СуммаОстаток <> 0 Тогда
					Расход = ПрочиеРасходы.Добавить();
					Расход.Сумма = СтрокаКОформлению.СуммаОстаток;
					Если СтрокаКОформлению.Свойство("ЦельВыдачи") Тогда
						Расход.СтатьяДвиженияДенежныхСредств = СтрокаКОформлению.ЦельВыдачи;
					КонецЕсли;
					Если СтрокаКОформлению.Свойство("Валюта") Тогда
						Расход.Валюта = СтрокаКОформлению.Валюта;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
	ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьСвойстваОбъекта(ЭтотОбъект, ДанныеЗаполнения);
	
	АвансовыйОтчетЛокализация.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);
	
	ПараметрыЗаполнения = Документы.АвансовыйОтчет.ПараметрыЗаполненияВидаДеятельностиНДС(ЭтотОбъект);
	УчетНДСУП.ЗаполнитьВидДеятельностиНДС(ЗакупкаПодДеятельность, ПараметрыЗаполнения);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Ответственный = Пользователи.ТекущийПользователь();
	ОплатаПоставщикам.Очистить();
	
	СуммаИзрасходовано = 0;
	СуммаОтклонено     = 0;
	
	Для каждого СтрокаТЧ Из ПрочиеРасходы Цикл
		СтрокаТЧ.ПредъявленСФ = Ложь;
		СтрокаТЧ.БланкСтрогойОтчетности = Ложь;
		СтрокаТЧ.НомерСФ = "";
		СтрокаТЧ.ДатаСФ = Неопределено;
		СтрокаТЧ.СчетФактура = Неопределено;
	КонецЦикла;
	
	УчетНДСУП.СкорректироватьСтавкуНДСВТЧДокумента(ЭтотОбъект, ПрочиеРасходы);
	
	АвансовыйОтчетЛокализация.ПриКопировании(ЭтотОбъект, ОбъектКопирования);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ИспользоватьСтатусыАвансовыхОтчетов = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыАвансовыхОтчетов");
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	МассивНепроверяемыхРеквизитов.Добавить("ПрочиеРасходы.ПричинаОтмены");
	
	МассивРеквизитовРучнойПроверки = Новый Массив;
	МассивРеквизитовРучнойПроверки.Добавить("СтатьяРасходов");
	МассивРеквизитовРучнойПроверки.Добавить("СтавкаНДС");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения") Тогда
		МассивРеквизитовРучнойПроверки.Добавить("Подразделение");
	КонецЕсли;
	
	Для каждого Реквизит Из МассивРеквизитовРучнойПроверки Цикл
		МассивНепроверяемыхРеквизитов.Добавить("ПрочиеРасходы." + Реквизит);
	КонецЦикла;
	
	Если Мультивалютный Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Валюта");
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("ПрочиеРасходы.Валюта");
		МассивНепроверяемыхРеквизитов.Добавить("ОплатаПоставщикам.Валюта");
		МассивНепроверяемыхРеквизитов.Добавить("КонвертацияВалюты");
		МассивНепроверяемыхРеквизитов.Добавить("КонвертацияВалюты.Сумма");
		МассивНепроверяемыхРеквизитов.Добавить("КонвертацияВалюты.Валюта");
		МассивНепроверяемыхРеквизитов.Добавить("КонвертацияВалюты.СуммаКонвертации");
		МассивНепроверяемыхРеквизитов.Добавить("КонвертацияВалюты.ВалютаКонвертации");
		МассивНепроверяемыхРеквизитов.Добавить("КонвертацияВалюты.Курс");
		МассивНепроверяемыхРеквизитов.Добавить("КонвертацияВалюты.СтатьяДвиженияДенежныхСредств");
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("ПрочиеРасходы.Контрагент");
	
	Если ИспользоватьСтатусыАвансовыхОтчетов
		И Статус = Перечисления.СтатусыАвансовогоОтчета.Утвержден Тогда
		Если Не ПраваПользователяПовтИсп.УтверждениеАвансовыхОтчетов() Тогда
			ТекстОшибки = НСтр("ru='У вас отсутствует право утверждения авансовых отчетов.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект,,, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	ОтразитьДокументВУчете = Не ИспользоватьСтатусыАвансовыхОтчетов
		Или ИспользоватьСтатусыАвансовыхОтчетов И Статус = Перечисления.СтатусыАвансовогоОтчета.Утвержден;
	
	ПроверитьСтатьюСписанияНДСВУчетнойПолитике = Ложь;
	
	Для ТекИндекс = 0 По ПрочиеРасходы.Количество()-1 Цикл
		
		АдресОшибки = СтрШаблон(НСтр("ru='в строке %1 списка ""Расходы""'"), ПрочиеРасходы[ТекИндекс].НомерСтроки);
		
		Если ИспользоватьСтатусыАвансовыхОтчетов
			И ПрочиеРасходы[ТекИндекс].Отменено И
			Не ЗначениеЗаполнено(ПрочиеРасходы[ТекИндекс].ПричинаОтмены) Тогда
			
			ТекстОшибки = НСтр("ru='Необходимо указать причину отмены'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + " " + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПрочиеРасходы", ПрочиеРасходы[ТекИндекс].НомерСтроки, "ПричинаОтмены"),,
				Отказ);
		КонецЕсли;
		
		ОтразитьСтрокуВУчете = ОтразитьДокументВУчете И Не ПрочиеРасходы[ТекИндекс].Отменено;
		
		Для каждого Реквизит Из МассивРеквизитовРучнойПроверки Цикл
			Если Не ЗначениеЗаполнено(ПрочиеРасходы[ТекИндекс][Реквизит])
				И ОтразитьСтрокуВУчете Тогда
				
				ТекстОшибки = СтрШаблон(НСтр("ru='Не заполнена колонка ""%1""'"), Реквизит);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + " " + АдресОшибки,
					ЭтотОбъект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПрочиеРасходы", ПрочиеРасходы[ТекИндекс].НомерСтроки, Реквизит),,
					Отказ);
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ПрочиеРасходы[ТекИндекс]["Контрагент"])
			И (ПрочиеРасходы[ТекИндекс]["СтавкаНДС"] <> Перечисления.СтавкиНДС.БезНДС
				И (ПрочиеРасходы[ТекИндекс]["ПредъявленСФ"] Или ПрочиеРасходы[ТекИндекс]["БланкСтрогойОтчетности"]))
			И ОтразитьСтрокуВУчете Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Контрагент""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + " " + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПрочиеРасходы", ПрочиеРасходы[ТекИндекс].НомерСтроки, "Контрагент"),,
				Отказ);
		КонецЕсли;
		
		Если (Не ЗначениеЗаполнено(ПрочиеРасходы[ТекИндекс]["НомерСФ"]) Или Не ЗначениеЗаполнено(ПрочиеРасходы[ТекИндекс]["ДатаСФ"]))
			И ПрочиеРасходы[ТекИндекс]["ПредъявленСФ"]
			И ПрочиеРасходы[ТекИндекс]["СтавкаНДС"] <> Перечисления.СтавкиНДС.БезНДС
			И ОтразитьСтрокуВУчете Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнены параметры счет-фактуры'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + " " + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПрочиеРасходы", ПрочиеРасходы[ТекИндекс].НомерСтроки, "ПредставлениеСФ"),,
				Отказ);
		КонецЕсли;
		
		Если ОтразитьДокументВУчете И ПрочиеРасходы[ТекИндекс].СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС
			И Не ПрочиеРасходы[ТекИндекс].ПредъявленСФ И Не ПрочиеРасходы[ТекИндекс].БланкСтрогойОтчетности Тогда
			ПроверитьСтатьюСписанияНДСВУчетнойПолитике = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ПроверитьСтатьюСписанияНДСВУчетнойПолитике Тогда
		Политика = РегистрыСведений.УчетнаяПолитикаОрганизаций.УчетныеПолитикиОрганизаций(Организация);
		Если Политика <> Неопределено И Политика.Количество()
			И Не ЗначениеЗаполнено(Политика[0].СтатьяРасходовСписаниеНДС) Тогда
			ТекстОшибки = НСтр("ru='Для списания НДС в расходы в действующей учетной политике должна быть заполнена статья списания.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "Организация",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	ОшибкиЗаполненияСтатейРасходов = Новый Структура;
	ОшибкиЗаполненияСтатейРасходов.Вставить("ПрограммнаяПроверка", Истина);
	ПланыВидовХарактеристик.СтатьиРасходов.ПроверитьЗаполнениеАналитик(
		ЭтотОбъект, Новый Структура("ПрочиеРасходы"), МассивНепроверяемыхРеквизитов, Отказ, ОшибкиЗаполненияСтатейРасходов);
		
	Для каждого ОшибкаЗаполненияАналитики Из ОшибкиЗаполненияСтатейРасходов.Ошибки.СписокОшибок Цикл
		Если Не ПрочиеРасходы[ОшибкаЗаполненияАналитики.НомерСтроки].Отменено Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(ОшибкаЗаполненияАналитики.ТекстДляНесколькихОшибок, ОшибкаЗаполненияАналитики.НомерСтроки + 1) + " " + НСтр("ru='списка ""Расходы""'"),
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПрочиеРасходы", ОшибкаЗаполненияАналитики.НомерСтроки + 1, "АналитикаРасходов"),,
				Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаКонвертации Из КонвертацияВалюты Цикл
		Если СтрокаКонвертации.Валюта = СтрокаКонвертации.ВалютаКонвертации Тогда
			
			АдресОшибки = СтрШаблон(НСтр("ru='в строке %1 списка ""Конвертация валюты""'"), СтрокаКонвертации.НомерСтроки);
			ТекстОшибки = НСтр("ru = 'Валюта конвертации должна отличаться от валюты документа'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + " " + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("КонвертацияВалюты", СтрокаКонвертации.НомерСтроки, "ВалютаКонвертации"),,
				Отказ);
		КонецЕсли;
	КонецЦикла;
	
	ПроверитьДублиУчетаНДСПервичныхДокументов(Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	
	АвансовыйОтчетЛокализация.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	СформироватьСписокЗависимыхЗаказов();
	
	СуммаИзрасходовано = 0;
	СуммаОтклонено = 0;
	
	Если Не Мультивалютный Тогда
		Для каждого Расход Из ПрочиеРасходы Цикл
			Если Расход.Отменено Тогда
				СуммаОтклонено = СуммаОтклонено + Расход.Сумма;
			Иначе
				СуммаИзрасходовано = СуммаИзрасходовано + Расход.Сумма;
			КонецЕсли;
			Расход.Валюта = Валюта;
		КонецЦикла;
		Для каждого Оплата Из ОплатаПоставщикам Цикл
			Оплата.Валюта = Валюта;
		КонецЦикла;
		СуммаИзрасходовано = СуммаИзрасходовано + ОплатаПоставщикам.Итог("Сумма");
		КонвертацияВалюты.Очистить();
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ВзаиморасчетыСервер.ЗаполнитьСуммуВзаиморасчетовВТабличнойЧасти(Валюта, Дата, ОплатаПоставщикам);
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(ПрочиеРасходы);
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(ОплатаПоставщикам);
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(КонвертацияВалюты);
	КонецЕсли;
	
	ДоходыИРасходыСервер.ИнициализироватьПустоеЗначениеСтатьиВТЧ(ПрочиеРасходы, "СтатьяРасходов");
	
	СгенерироватьПервичныеДокументы(Отказ);
	
	АвансовыйОтчетЛокализация.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ДокументыЗакупки") Тогда
		
		ДокументыКДобавлению = Новый Массив;
		ДокументыКУдалению = Новый Массив;
		
		ДокументыЗакупки = ДополнительныеСвойства.ДокументыЗакупки;
		ДокументыВОтчете = Документы.АвансовыйОтчет.СписокДокументовЗакупки(Ссылка);
		
		Для каждого ДокументВОтчете Из ДокументыВОтчете Цикл
			Если ДокументыЗакупки.Найти(ДокументВОтчете) = Неопределено Тогда
				ДокументыКУдалению.Добавить(ДокументВОтчете);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ДокументЗакупки Из ДокументыЗакупки Цикл
			Если ДокументыВОтчете.Найти(ДокументЗакупки) = Неопределено Тогда
				ДокументыКДобавлению.Добавить(ДокументЗакупки);
			КонецЕсли;
		КонецЦикла;
		
		УдалитьДобавитьДокументыЗакупки(Неопределено, ДокументыКУдалению, Отказ);
		УдалитьДобавитьДокументыЗакупки(Ссылка, ДокументыКДобавлению, Отказ);
	КонецЕсли;
	
	Если Не Отказ И Не ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	КонецЕсли;
	
	Если Не ЭтоНовый() И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		ОбновитьПервичныеДокументы(РежимЗаписиДокумента.Запись, Отказ);
	КонецЕсли;
	
	АвансовыйОтчетЛокализация.ПриЗаписи(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	// Инициализация данных документа
	Документы.АвансовыйОтчет.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Движения по денежным средствам
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваУПодотчетныхЛиц(ДополнительныеСвойства, Движения, Отказ);
	
	// Движения по расчетам с поставщиками
	ВзаиморасчетыСервер.ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ);
	
	// Движения по прочим доходам и расходам
	ДоходыИРасходыСервер.ОтразитьПрочиеДоходы(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПрочиеРасходы(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПартииПрочихРасходов(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПрочиеАктивыПассивы(ДополнительныеСвойства, Движения, Отказ);
	
	ВзаиморасчетыСервер.ОтразитьСуммыДокументаВВалютеРегл(ДополнительныеСвойства, Движения, Отказ);
	
	УчетНДСУП.СформироватьДвиженияВРегистры(ДополнительныеСвойства, Движения, Отказ);
	
	// Движения по оборотным регистрам управленческого учета
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияДенежныхСредств(ДополнительныеСвойства, Движения, Отказ);
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияДенежныеСредстваДоходыРасходы(ДополнительныеСвойства, Движения, Отказ);
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияДенежныеСредстваКонтрагент(ДополнительныеСвойства, Движения, Отказ);
	
	ОбновитьПервичныеДокументы(РежимЗаписиДокумента.Проведение, Отказ);
	
	// Запись наборов записей
	АвансовыйОтчетЛокализация.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения);
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	РегистрыСведений.СостоянияЗаказовПоставщикам.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	РегистрыСведений.РеестрДокументов.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ОбновитьПервичныеДокументы(РежимЗаписиДокумента.ОтменаПроведения, Отказ);
	
	// Запись наборов записей
	АвансовыйОтчетЛокализация.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ);
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	РегистрыСведений.СостоянияЗаказовПоставщикам.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьПоРасходномуКассовомуОрдеру(Знач ДокументОснование, ДанныеЗаполнения)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	&Ссылка КАК ДокументОснование,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ДанныеДокумента.Касса.ВалютаДенежныхСредств КАК Валюта,
	|	ДанныеДокумента.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	НЕ ДанныеДокумента.Проведен КАК ЕстьОшибкиПроведен,
	|	ДенежныеСредства.ЦельВыдачи КАК СтатьяДвиженияДенежныхСредств,
	|	ДенежныеСредства.СуммаОстаток КАК Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС) КАК СтавкаНДС
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.Остатки(,
	|			ПодотчетноеЛицо = &ПодотчетноеЛицо
	|			И Организация = &Организация
	|			И Валюта = &Валюта) КАК ДенежныеСредства
	|	ПО
	|		ИСТИНА
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику)
	|");
	
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Организация, Подразделение, ПодотчетноеЛицо, Валюта");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.УстановитьПараметр("Организация", РеквизитыОснования.Организация);
	Запрос.УстановитьПараметр("Подразделение", РеквизитыОснования.Подразделение);
	Запрос.УстановитьПараметр("ПодотчетноеЛицо", РеквизитыОснования.ПодотчетноеЛицо);
	Запрос.УстановитьПараметр("Валюта", РеквизитыОснования.Валюта);
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить авансовый отчет на основании документа %1'"),
			ДокументОснование);
		ВызватьИсключение Текст;
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			ДокументОснование,
			Неопределено, // Статус
			Выборка.ЕстьОшибкиПроведен);
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		Выборка.Сбросить();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ПрочиеРасходы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоСписаниюБезналичныхДенежныхСредств(Знач ДокументОснование, ДанныеЗаполнения)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	&Ссылка КАК ДокументОснование,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ДанныеДокумента.БанковскийСчет КАК БанковскийСчет,
	|	ДанныеДокумента.БанковскийСчет.ВалютаДенежныхСредств КАК Валюта,
	|	ДанныеДокумента.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	НЕ ДанныеДокумента.Проведен КАК ЕстьОшибкиПроведен,
	|	ДенежныеСредства.ЦельВыдачи КАК СтатьяДвиженияДенежныхСредств,
	|	ДенежныеСредства.СуммаОстаток КАК Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС) КАК СтавкаНДС
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.Остатки(,
	|			ПодотчетноеЛицо = &ПодотчетноеЛицо
	|			И Организация = &Организация
	|			И Валюта = &Валюта) КАК ДенежныеСредства
	|	ПО
	|		ИСТИНА
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику)
	|");
	
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Организация, Подразделение, ПодотчетноеЛицо, Валюта");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.УстановитьПараметр("Организация", РеквизитыОснования.Организация);
	Запрос.УстановитьПараметр("Подразделение", РеквизитыОснования.Подразделение);
	Запрос.УстановитьПараметр("ПодотчетноеЛицо", РеквизитыОснования.ПодотчетноеЛицо);
	Запрос.УстановитьПараметр("Валюта", РеквизитыОснования.Валюта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить авансовый отчет на основании документа %1'"),
			ДокументОснование);
		ВызватьИсключение Текст;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			ДокументОснование,
			Неопределено, // Статус
			Выборка.ЕстьОшибкиПроведен);
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		Выборка.Сбросить();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ПрочиеРасходы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		Подразделение = ФизическиеЛицаУТ.ПодразделениеФизическогоЛица(ПодотчетноеЛицо);
	КонецЕсли;
	
	Если (ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("Валюта"))
		И Не (ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Мультивалютный") И ДанныеЗаполнения.Мультивалютный) Тогда
		Валюта = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(Валюта);
	Иначе
		Валюта = Неопределено;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыАвансовыхОтчетов") Тогда
		Статус = Перечисления.СтатусыАвансовогоОтчета.Утвержден;
	Иначе
		Статус = Перечисления.СтатусыАвансовогоОтчета.Подготовлен;
	КонецЕсли;
	
	ДоходыИРасходыСервер.ИнициализироватьПустоеЗначениеСтатьиВТЧ(ПрочиеРасходы, "СтатьяРасходов");
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ПрочиеРасходы, СтруктураДействий, Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура СформироватьСписокЗависимыхЗаказов()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка КАК ЗаказПоставщику
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка В(&МассивЗаказов)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПоставщику.Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка КАК ЗаказПоставщику
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка В ( ВЫБРАТЬ
	|			ОплатаПоставщикам.Заказ КАК ЗаказПоставщику
	|		ИЗ
	|			Документ.АвансовыйОтчет.ОплатаПоставщикам КАК ОплатаПоставщикам
	|		ГДЕ
	|			ОплатаПоставщикам.Ссылка = &Ссылка
	|		СГРУППИРОВАТЬ ПО
	|			Заказ)
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПоставщику.Ссылка
	|";
	
	Запрос.УстановитьПараметр("МассивЗаказов", ЭтотОбъект.ОплатаПоставщикам.ВыгрузитьКолонку("Заказ"));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	МассивЗависимыхЗаказов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЗаказПоставщику");
	ЭтотОбъект.ДополнительныеСвойства.Вставить("МассивЗависимыхЗаказовПоставщикам", Новый ФиксированныйМассив(МассивЗависимыхЗаказов));
	
КонецПроцедуры

Процедура УдалитьДобавитьДокументыЗакупки(Ссылка, ДокументыКИзменению, Отказ)
	
	РедактируемыйДокументЗакупки = Неопределено;
	ДополнительныеСвойства.Свойство("РедактируемыйДокументЗакупки", РедактируемыйДокументЗакупки);
	
	Для каждого ДокументКИзменению Из ДокументыКИзменению Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			ДокументОбъект = ДокументКИзменению.ПолучитьОбъект();
			
			Если ДокументКИзменению <> РедактируемыйДокументЗакупки Тогда
				Попытка
					ДокументОбъект.Заблокировать();
				Исключение
					ТекстСообщения = СтрШаблон(
						НСтр("ru = '%1 находится в процессе редактирования пользователем или системой и не может быть изменено.'"),
						ДокументОбъект);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					ВызватьИсключение;
				КонецПопытки;
			КонецЕсли;
			
			ДокументОбъект.АвансовыйОтчет = Ссылка;
			ДокументОбъект.ДополнительныеСвойства.Вставить("НеОбновлятьАвансовыйОтчет");
			УстановитьПривилегированныйРежим(Истина);
			ДокументОбъект.Записать();
			УстановитьПривилегированныйРежим(Ложь);
			
			НаборЗаписей = РегистрыНакопления.ДенежныеСредстваУПодотчетныхЛиц.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор["Регистратор"].Установить(ДокументОбъект.Ссылка);
			
			ДопСвойства = Новый Структура;
			ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументОбъект.Ссылка, ДопСвойства);
			МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументОбъект.Ссылка);
			
			УстановитьПривилегированныйРежим(Истина);
			МенеджерДокумента.ИнициализироватьДанныеДокумента(ДокументОбъект.Ссылка, ДопСвойства, "ДенежныеСредстваУПодотчетныхЛиц");
			НаборЗаписей.Загрузить(ДопСвойства.ТаблицыДляДвижений["ТаблицаДенежныеСредстваУПодотчетныхЛиц"]);
			НаборЗаписей.Записать();
			УстановитьПривилегированныйРежим(Ложь);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстСообщения = НСтр("ru = 'Не удалось изменить документ закупки по причине: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ТекстОшибки = НСтр("ru = 'Не удалось изменить документ закупки.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(
				ТекстОшибки,
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				
			Отказ = Истина;
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура СгенерироватьПервичныеДокументы(Отказ)
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ПрочиеРасходы
	|ИЗ
	|	&ПрочиеРасходы КАК ПрочиеРасходы
	|";
	
	Запрос.УстановитьПараметр("ПрочиеРасходы", ПрочиеРасходы.Выгрузить());
	Запрос.Выполнить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КурсВалюты.Валюта КАК Валюта,
	|	КурсВалюты.Курс * КурсВалютыРегл.Кратность / (КурсВалюты.Кратность * КурсВалютыРегл.Курс) КАК КоэффициентПересчета
	|ПОМЕСТИТЬ ВТКурсыВалютРегл
	|ИЗ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсВалюты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаРегламентированногоУчета) КАК КурсВалютыРегл
	|	ПО (ИСТИНА)
	|ГДЕ
	|	КурсВалюты.Кратность <> 0
	|	И КурсВалютыРегл.Курс <> 0
	|;
	|ВЫБРАТЬ
	|	ПрочиеРасходы.НомерВходящегоДокумента,
	|	ПрочиеРасходы.ДатаВходящегоДокумента,
	|	ПрочиеРасходы.Контрагент,
	|	ПрочиеРасходы.Валюта,
	|	СУММА(ПрочиеРасходы.Сумма) КАК СуммаДокумента,
	|	СУММА(ПрочиеРасходы.Сумма * ЕСТЬNULL(ТаблицаКурсыВалютРеглСумма.КоэффициентПересчета, 0)) КАК СуммаРегл
	|ПОМЕСТИТЬ ПервичныеДокументыИтог
	|ИЗ
	|	ПрочиеРасходы КАК ПрочиеРасходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютРегл КАК ТаблицаКурсыВалютРеглСумма
	|		ПО ТаблицаКурсыВалютРеглСумма.Валюта = ПрочиеРасходы.Валюта
	|ГДЕ
	|	(ПрочиеРасходы.ПредъявленСФ
	|	ИЛИ ПрочиеРасходы.БланкСтрогойОтчетности)
	|	И НЕ ПрочиеРасходы.Отменено
	|СГРУППИРОВАТЬ ПО
	|	ПрочиеРасходы.НомерВходящегоДокумента,
	|	ПрочиеРасходы.ДатаВходящегоДокумента,
	|	ПрочиеРасходы.Контрагент,
	|	ПрочиеРасходы.Валюта
	|;
	|
	|ВЫБРАТЬ
	|	ПервичныеДокументыИтог.НомерВходящегоДокумента,
	|	ПервичныеДокументыИтог.ДатаВходящегоДокумента,
	|	ПервичныеДокументыИтог.Контрагент,
	|	ПервичныеДокументыИтог.Валюта,
	|	ПервичныеДокументыИтог.СуммаДокумента,
	|	ПервичныеДокументыИтог.СуммаРегл,
	|	ПервичныйДокументОтчета.Ссылка КАК ПервичныйДокумент,
	|	ВЫБОР
	|		КОГДА ПервичныйДокументОтчета.Ссылка ЕСТЬ NULL ТОГДА
	|			1 // Создать
	|		КОГДА ПервичныеДокументыИтог.СуммаДокумента <> ПервичныйДокументОтчета.СуммаДокумента
	|			ИЛИ ПервичныеДокументыИтог.СуммаРегл <> ПервичныйДокументОтчета.СуммаРегл ТОГДА
	|			2 // Обновить
	|		ИНАЧЕ
	|			3 // Оставить, как есть
	|	КОНЕЦ КАК СтатусОбработки
	|ИЗ
	|	ПервичныеДокументыИтог
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ПервичныйДокумент КАК ПервичныйДокументОтчета
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Документ.АвансовыйОтчет.ПрочиеРасходы КАК ЭтотАвансовыйОтчет
	|		ПО
	|			ЭтотАвансовыйОтчет.ПервичныйДокумент = ПервичныйДокументОтчета.Ссылка
	|			И ЭтотАвансовыйОтчет.Ссылка = &Ссылка
	|	ПО
	|		ПервичныйДокументОтчета.НомерВходящегоДокумента = ПервичныеДокументыИтог.НомерВходящегоДокумента
	|		И ПервичныйДокументОтчета.ДатаВходящегоДокумента = ПервичныеДокументыИтог.ДатаВходящегоДокумента
	|		И ПервичныйДокументОтчета.Контрагент = ПервичныеДокументыИтог.Контрагент
	|		И ПервичныйДокументОтчета.Валюта = ПервичныеДокументыИтог.Валюта
	|		И ПервичныйДокументОтчета.Организация = &Организация
	|		И ПервичныйДокументОтчета.Дата = &Период
	|";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	
	ПервичныеДокументыНовыйСостав = Новый Массив;
	
	Выборка = Результат[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СтатусОбработки = 1 И Не ПометкаУдаления Тогда
			
			ДокументОбъект = Документы.ПервичныйДокумент.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(ДокументОбъект, Выборка);
			ДокументОбъект.Организация = Организация;
			ДокументОбъект.ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.ЗакупкаЧерезПодотчетноеЛицо;
			ДокументОбъект.Подразделение = Подразделение;
			ДокументОбъект.Дата = Дата;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			ПервичныеДокументыНовыйСостав.Добавить(ДокументОбъект.Ссылка);
			
		ИначеЕсли Выборка.СтатусОбработки = 2 Тогда
			
			ДокументОбъект = Выборка.ПервичныйДокумент.ПолучитьОбъект();
			
			Попытка
				ДокументОбъект.Заблокировать();
			Исключение
				ТекстСообщения =
					СтрШаблон(НСтр("ru = '%1 находится в процессе редактирования и не может быть изменен.'"), ДокументОбъект);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
				Возврат;
			КонецПопытки;
			
			ДокументОбъект.СуммаДокумента = Выборка.СуммаДокумента;
			ДокументОбъект.СуммаРегл = Выборка.СуммаРегл;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			ПервичныеДокументыНовыйСостав.Добавить(ДокументОбъект.Ссылка);
		Иначе
			
			ПервичныеДокументыНовыйСостав.Добавить(Выборка.ПервичныйДокумент);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЭтотАвансовыйОтчет.ПервичныйДокумент КАК Ссылка
	|ИЗ
	|	Документ.АвансовыйОтчет.ПрочиеРасходы КАК ЭтотАвансовыйОтчет
	|ГДЕ
	|	НЕ ЭтотАвансовыйОтчет.ПервичныйДокумент В (&ПервичныеДокументыНовыйСостав)
	|	И ЭтотАвансовыйОтчет.Ссылка = &Ссылка
	|;
	|
	|ВЫБРАТЬ
	|	*,
	|	ДокументПервичныйДокумент.Ссылка КАК ПервичныйДокумент
	|ИЗ
	|	ПрочиеРасходы
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ПервичныйДокумент КАК ДокументПервичныйДокумент
	|	ПО
	|		ДокументПервичныйДокумент.НомерВходящегоДокумента = ПрочиеРасходы.НомерВходящегоДокумента
	|		И ДокументПервичныйДокумент.ДатаВходящегоДокумента = ПрочиеРасходы.ДатаВходящегоДокумента
	|		И ДокументПервичныйДокумент.Контрагент = ПрочиеРасходы.Контрагент
	|		И ДокументПервичныйДокумент.Валюта = ПрочиеРасходы.Валюта
	|		И ДокументПервичныйДокумент.Организация = &Организация
	|		И (ПрочиеРасходы.ПредъявленСФ
	|			ИЛИ ПрочиеРасходы.БланкСтрогойОтчетности)
	|		И ДокументПервичныйДокумент.Ссылка В (&ПервичныеДокументыНовыйСостав)
	|		И ДокументПервичныйДокумент.Дата = &Период
	|";
	
	Запрос.УстановитьПараметр("ПервичныеДокументыНовыйСостав", ПервичныеДокументыНовыйСостав);
	
	Результат = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	Выборка = Результат[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Попытка
				ДокументОбъект.Заблокировать();
			Исключение
				ТекстСообщения =
					СтрШаблон(НСтр("ru = '%1 находится в процессе редактирования и не может быть изменен.'"), ДокументОбъект);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
				Возврат;
			КонецПопытки;
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ДокументОбъект.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	ПрочиеРасходы.Загрузить(Результат[1].Выгрузить());
	
КонецПроцедуры

Процедура ОбновитьПервичныеДокументы(РежимЗаписи, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ПометкаУдаления <> &ПометкаУдаления КАК ИзменитьПометкуУдаления,
	|	ДанныеДокумента.Проведен <> &Проведен И НЕ (ДанныеДокумента.ПометкаУдаления <> &ПометкаУдаления) КАК ИзменитьРежимЗаписи
	|ИЗ
	|	Документ.ПервичныйДокумент КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&ПервичныеДокументыОтчета)
	|	И (ДанныеДокумента.ПометкаУдаления <> &ПометкаУдаления
	|		ИЛИ ДанныеДокумента.Проведен <> &Проведен И &ПотенциальнаяСменаРежимаПроведения)
	|";
	
	Запрос.УстановитьПараметр("ПервичныеДокументыОтчета", ПрочиеРасходы.ВыгрузитьКолонку("ПервичныйДокумент"));
	Запрос.УстановитьПараметр("ПометкаУдаления", ПометкаУдаления);
	Запрос.УстановитьПараметр("Проведен", РежимЗаписи = РежимЗаписиДокумента.Проведение);
	Запрос.УстановитьПараметр("ПотенциальнаяСменаРежимаПроведения",
		РежимЗаписи = РежимЗаписиДокумента.Проведение Или РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения);
		
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения =
				СтрШаблон(НСтр("ru = '%1 находится в процессе редактирования и не может быть изменен.'"), ДокументОбъект);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Возврат;
		КонецПопытки;
		
		Если Выборка.ИзменитьРежимЗаписи Тогда
			ДокументОбъект.Записать(РежимЗаписи);
		КонецЕсли;
		
		Если Выборка.ИзменитьПометкуУдаления Тогда
			ДокументОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
		КонецЕсли;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПроверитьДублиУчетаНДСПервичныхДокументов(Отказ)
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	&ПрочиеРасходы КАК ПрочиеРасходы
	|";
	
	Запрос.УстановитьПараметр("ПрочиеРасходы", ПрочиеРасходы.Выгрузить());
	Запрос.Выполнить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.НомерВходящегоДокумента          КАК НомерВходящегоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента           КАК ДатаВходящегоДокумента,
	|	МАКСИМУМ(ДанныеДокумента.НомерСтроки)            КАК НомерСтроки
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.СтавкаНДС НЕ В (
	|		ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС),
	|		ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0))
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.НомерВходящегоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента,
	|	ДанныеДокумента.Контрагент
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеДокумента.БланкСтрогойОтчетности) > 1
	|	ИЛИ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеДокумента.ПредъявленСФ) > 1
	|";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Для документа №%1 от %2 указано одновременно несколько вариантов учета НДС'"),
			Выборка.НомерВходящегоДокумента, Формат(Выборка.ДатаВходящегоДокумента, "ДЛФ=Д"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПрочиеРасходы", Выборка.НомерСтроки, "СпособУчетаНДС"),,
			Отказ);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
