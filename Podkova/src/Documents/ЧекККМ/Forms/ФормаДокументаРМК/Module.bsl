&НаКлиенте
Перем КэшированныеЗначения;//используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	ИспользоватьАвтоматическиеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	ИспользоватьРучныеСкидкиВПродажах         = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	НазначатьСкидкиПоКнопкеРасчетВЧекеККМ     = ПолучитьФункциональнуюОпцию("НазначатьСкидкиПоКнопкеРасчетВЧекеККМ");
	ИспользоватьОплатуПлатежнымиКартами       = ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами");
	ИспользоватьПодарочныеСертификаты         = ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты");
	ИспользоватьХарактеристикиНоменклатуры    = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьНесколькоСкладов              = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	ИспользоватьКартыЛояльности               = ПолучитьФункциональнуюОпцию("ИспользоватьКартыЛояльности");
	
	ДанныеФискальнойОперации = РозничныеПродажи.СтруктураДанныеФискальнойОперации();
	
	КонтролироватьАссортимент = АссортиментСерверПовтИсп.КонтролироватьАссортимент(Объект.Склад, Объект.Дата);
	
	ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода,
	                                              |ДисплейПокупателя,
	                                              |ФискальныйРегистратор,
	                                              |ЭквайринговыйТерминал,
	                                              |ЭлектронныеВесы,
	                                              |СчитывательМагнитныхКарт";
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтотОбъект, "");
	РозничныеПродажи.ЗаполнитьТаблицуОборудование(ЭтотОбъект, ПоддерживаемыеТипыПодключаемогоОборудования);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ОборудованиеПодключено = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам(
			Неопределено,
			Неопределено,
			МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента()).Количество() > 0;
		ЗначениеОткрыватьФормуСПодключеннымОборудованием = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ЧекККМ", "ОткрыватьФормуСПодключеннымОборудованием");
		Если ЗначениеОткрыватьФормуСПодключеннымОборудованием = Неопределено Тогда
			ОткрыватьФормуСПодключеннымОборудованием = ОборудованиеПодключено;
		Иначе
			ОткрыватьФормуСПодключеннымОборудованием = ЗначениеОткрыватьФормуСПодключеннымОборудованием И ОборудованиеПодключено;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьЗначенияПоНастройкам();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	ОбщегоНазначенияУТ.ИнициализироватьКешТекущейСтроки(ЭтотОбъект, "Товары");
	
	ПриСозданииЧека();
	УчетМаркируемойПродукции = ИнтеграцияИС.ИспользуетсяМаркируемаяПродукция();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Объект.ВидЦены)
		И НЕ ВидЦеныВключаетСуммаНДС(Объект.ВидЦены) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Вид цены, используемый для продажи в розницу, должен включать в цене НДС.'"));
			
		ЭтотОбъект.ТолькоПросмотр = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		
		Если ОткрыватьФормуСПодключеннымОборудованием Тогда
			
			ПодключитьОбработчикОжидания("ОткрытьФормуПодключенноеОборудованиеОбработчикОжидания", 0.5, Истина);
			
		Иначе
			
			Для Каждого СтрокаТЧ Из Оборудование Цикл
				
				МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоИдентификатору(
					Новый ОписаниеОповещения("НачатьПодключениеОборудованиеПоИдентификаторуЗавершение", ЭтотОбъект, СтрокаТЧ),
					ЭтотОбъект.УникальныйИдентификатор,
					СтрокаТЧ.Ссылка);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
	Если ПринудительнаяАвторизация Тогда
		ПодключитьОбработчикОжидания("ОткрытьОкноАвторизации", 0.5, Истина);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПринудительноеЗавершениеРаботы ИЛИ ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ПередЗакрытиемЧека(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтотОбъект, ПараметрыУказанияСерий, ВыбранноеЗначение);
		
		ДополнительныеПараметры = Новый Структура;
		СобытияФормКлиент.ПриИзмененииЭлемента(ЭтотОбъект, "Товары", ДополнительныеПараметры);
		Если ДополнительныеПараметры.Свойство("ТребуетсяСерверныйВызов") Тогда
			КэшированныеЗначения.Вставить("СобытияФорм");
			ТоварыПриОкончанииРедактированияНаСервере(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор(), КэшированныеЗначения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		ПересчитатьДокументНаКлиенте();
		ПодключитьОбработчикОжидания("УстановитьТекущийЭлементНаТабличнуюЧастьТовары", 0.1, Истина);
	КонецЕсли;
	
	Если ИсточникВыбора.ИмяФормы = "Документ.ЧекККМ.Форма.ВыборОтложенногоЧека" Тогда
		ЗагрузитьНовыйЧек(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, Источник)

	ДополнительныеПараметры = Новый Структура("ИмяСобытия, Параметр, Источник", ИмяСобытия, Параметр, Источник);
	СобытияФорм.ПриИзмененииЭлемента(ЭтотОбъект, "Событие", ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КэшированныеЗначения",    КэшированныеЗначения);
	ДополнительныеПараметры.Вставить("СтандартнаяОбработка",    Истина);
	ДополнительныеПараметры.Вставить("ТребуетсяСерверныйВызов", Ложь);
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры);
	КэшированныеЗначения = ДополнительныеПараметры.КэшированныеЗначения;
	Если ДополнительныеПараметры.ТребуетсяСерверныйВызов Тогда
		ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	Если Не ДополнительныеПараметры.СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен()
		И Не ТолькоПросмотр Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
				ДанныеШтрихкодов = МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
				ОбработатьШтрихкоды(ДанныеШтрихкодов);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "СчитанаКартаЛояльности"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		СчитанаКартаЛояльности(Параметр.КартаЛояльности);
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПолученыСообщения"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		ПолученыСообщения(Параметр.Сообщения);
		ПересчитатьДокументНаКлиенте();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыбранБыстрыйТовар"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, Параметр);
		ПараметрыТовара.Продавец = ТекущийПродавец;
		ПараметрыТовара.КоличествоУпаковок = Параметр.КоличествоУпаковок;
		
		ПараметрыТовара.Цена = ПолучитьЦенуПоОтбору(Параметр.Номенклатура, Параметр.Характеристика, Параметр.Упаковка);
		
		ДобавитьВКорзину(ПараметрыТовара);
		
	КонецЕсли;
	
	Если ИмяСобытия = "АвторизованПользователь" Тогда
		
		Если Параметр.Режим = "СменитьПрава" Тогда
			НастроитьПраваДляПользователя(Параметр.Пользователь);
			ПересчитатьДокументНаКлиенте();
		ИначеЕсли Параметр.Режим = "ЗакрытьЧекККМ" Тогда
			ПринудительноеЗавершениеРаботы = Истина;
			Если Открыта() Тогда
				Закрыть();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ЧтениеКомандФормы"
		И Параметр.Форма = УникальныйИдентификатор Тогда
		
		Оповестить("ЧтениеКомандФормы", Новый Структура("Форма, ФормаВладелец, АдресВоВременномХранилище", Параметр.ФормаВладелец, УникальныйИдентификатор, ПолучитьКомандыФормы(Параметр.ФормаВладелец)));
		
	КонецЕсли;
	
	Если ИмяСобытия = "Закрытие_РедактированиеКомплекта"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		ПриОкончанииРедактированияНабора(Параметр.АдресВоВременномХранилище);
		ПересчитатьДокументНаКлиенте();
	КонецЕсли;
	
	Если ИмяСобытия = "РедактироватьНабор"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		ПараметрыКомплекта = Новый Структура;
		ПараметрыКомплекта.Вставить("НоменклатураНабора", Параметр.НоменклатураНабора);
		ПараметрыКомплекта.Вставить("ХарактеристикаНабора", Параметр.ХарактеристикаНабора);
		ПараметрыКомплекта.Вставить("КолонкиНабора", КолонкиНабора(ЭтотОбъект));
		
		АдресНабораВоВременномХранилище = АдресНабораВоВременномХранилище(ПараметрыКомплекта);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("АдресВоВременномХранилище", АдресНабораВоВременномХранилище);
		ПараметрыОткрытия.Вставить("НоменклатураНабора",   Параметр.НоменклатураНабора);
		ПараметрыОткрытия.Вставить("ХарактеристикаНабора", Параметр.ХарактеристикаНабора);
		ПараметрыОткрытия.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
		ПараметрыОткрытия.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		ПараметрыОткрытия.Вставить("Валюта", Объект.Валюта);
		ПараметрыОткрытия.Вставить("ВидЦены", Объект.ВидЦены);
		ПараметрыОткрытия.Вставить("Дата", Объект.Дата);
		ПараметрыОткрытия.Вставить("Ссылка", Объект.Ссылка);
		ПараметрыОткрытия.Вставить("Склад", Объект.Склад);
		ПараметрыОткрытия.Вставить("ЗапретРедактированияЦены", Истина);
		ПараметрыОткрытия.Вставить("СкрыватьКомандуОстаткиНаСкладах", Ложь);
		
		ОткрытьФорму("Обработка.РедактированиеНабора.Форма.Форма", ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор);
		
	КонецЕсли;
	
	Если ИмяСобытия = "ОборудованиеПодключено" Тогда
		ПодключитьОбработчикОжидания("ВывестиИнформациюНаДисплейПокупателя", 1, Истина);
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененоРабочееМестоТекущегоСеанса" Тогда
		
		НастроитьРМК();
		Если (НЕ ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования И Не ЗначениеЗаполнено(ПараметрыКассыККМ.ИдентификаторУстройства))
			ИЛИ Не ЗначениеЗаполнено(ПараметрыКассыККМ.НастройкиРМК) Тогда
			
			ПоказатьПредупреждение(
				Новый ОписаниеОповещения("ОбработкаОповещенияИзмененоРабочееМестоТекущегоСеансаЗавершение", ЭтотОбъект, Новый Структура("ИмяСобытия, Параметр", ИмяСобытия, Параметр)),
				НСтр("ru = 'Изменено рабочее место подключаемого оборудования. Для данного рабочего места не настроено оборудование.'"));
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеКассовойСмены" Тогда
		СтруктураСостояниеКассовойСмены = РозничныеПродажиВызовСервера.СостояниеКассовойСмены(Объект.КассаККМ);
		ЗаполнитьЗначенияСвойств(Объект, СтруктураСостояниеКассовойСмены,, "Кассир");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЧекККМ));
	
	УстановитьВидимостьЭлементовСерий();
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(Объект.КассаККМ));
	КонтролироватьАссортимент = АссортиментСерверПовтИсп.КонтролироватьАссортимент(Объект.Склад, Объект.Дата);
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(ТекущийОбъект, Документы.ЧекККМ));
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	Если НЕ ПараметрыЗаписи.Свойство("РежимТранзакции") ИЛИ НЕ ПараметрыЗаписи.РежимТранзакции Тогда
		// СтандартныеПодсистемы.УправлениеДоступом
		УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
		// Конец СтандартныеПодсистемы.УправлениеДоступом
		
		СобытияФорм.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ЧекККМ", ПараметрыЗаписи, Объект.Ссылка);

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если НаборыКлиент.БлокируемыйЭлемент(Поле) Тогда
		
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора) Тогда
			
			ПараметрОповещения = Новый Структура;
			ПараметрОповещения.Вставить("НоменклатураНабора",   ТекущаяСтрока.НоменклатураНабора);
			ПараметрОповещения.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
			ПараметрОповещения.Вставить("ФормаВладелец", УникальныйИдентификатор);
			
			Оповестить("РедактироватьНабор", ПараметрОповещения, ЭтотОбъект);
			
		КонецЕсли;
		
	ИначеЕсли Поле = Элементы.ТоварыНоменклатураНабора Тогда
		ПоказатьЗначение(Неопределено, Элементы.Товары.ТекущиеДанные.НоменклатураНабора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	СобытияФормКлиент.ПриАктивизацииЯчейки(ЭтотОбъект, Элемент);
	
	Если Не Элемент.ТекущийЭлемент = Элементы.ТоварыШтрихкод Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Элементы.ТоварыШтрихкод.СписокВыбора.Очистить();
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыШтрихкод Тогда
		Структура = Новый Структура;
		Структура.Вставить("Номенклатура",   ТекущиеДанные.Номенклатура);
		Структура.Вставить("Характеристика", ТекущиеДанные.Характеристика);
		Структура.Вставить("Упаковка",       ТекущиеДанные.Упаковка);
	
		Элементы.ТоварыШтрихкод.СписокВыбора.ЗагрузитьЗначения(РозничныеПродажиВызовСервера.ПолучитьШтрихкодыНоменклатуры(Структура));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		НаборыКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтотОбъект, "Товары", Отказ, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "Товары");

	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
		Элемент,
		КэшированныеЗначения,
		ПараметрыУказанияСерий,
		Копирование);
	
	Если Копирование Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторСтроки) Тогда
			ТекущиеДанные.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПересчитатьДокументНаКлиенте();
	
	ДополнительныеПараметры = Новый Структура;
	СобытияФормКлиент.ПриИзмененииЭлемента(ЭтотОбъект, "Товары", ДополнительныеПараметры);
	
	Если ДополнительныеПараметры.Свойство("ТребуетсяСерверныйВызов") Тогда
		КэшированныеЗначения.Вставить("СобытияФорм");
	КонецЕсли;
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий) Тогда
		КэшированныеЗначения.Вставить("НеобходимоОбновитьСтатусыСерий");
		ДополнительныеПараметры.Вставить("ТребуетсяСерверныйВызов");
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ТребуетсяСерверныйВызов") Тогда
		ПодключитьОбработчикОжидания("ТоварыПриОкончанииРедактированияДляСерверногоВызова", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактированияДляСерверногоВызова()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТипЗнч(КэшированныеЗначения) = Тип("Структура") И КэшированныеЗначения.Свойство("НеобходимоОбновитьСтатусыСерий") Тогда
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	КонецЕсли;
	
	ТоварыПриОкончанииРедактированияНаСервере(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
	Если ТипЗнч(КэшированныеЗначения) = Тип("Структура") И КэшированныеЗначения.Свойство("НеобходимоОбновитьСтатусыСерий") Тогда
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
		КэшированныеЗначения.Удалить("НеобходимоОбновитьСтатусыСерий");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПриОкончанииРедактированияНаСервере(ИдентификаторСтроки, КэшированныеЗначения)

	Если КэшированныеЗначения.Свойство("НеобходимоОбновитьСтатусыСерий") Тогда
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ИдентификаторСтроки, КэшированныеЗначения);
	КонецЕсли;

	Если КэшированныеЗначения.Свойство("СобытияФорм") Тогда
		СобытияФорм.ПриИзмененииЭлемента(ЭтотОбъект, "Товары");
		КэшированныеЗначения.Удалить("СобытияФорм");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Если Не ПраваДоступа.КорректировкаСтрок Тогда
		Отказ = Истина;
	КонецЕсли;
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
		Элемент,
		КэшированныеЗначения,
		ПараметрыУказанияСерий);
	
	НаборыКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтотОбъект, "Товары", Отказ);
	
	ОчиститьСообщения();
	
	ДополнительныеРеквизиты = Новый Структура("ПередУдалением");
	СобытияФормКлиент.ПриИзмененииЭлемента(ЭтотОбъект, "Товары", ДополнительныеРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	ПересчитатьДокументНаКлиенте();
	
	ДополнительныеРеквизиты = Новый Структура("ТребуетсяСерверныйВызов, ПослеУдаления", Ложь);
	СобытияФормКлиент.ПриИзмененииЭлемента(ЭтотОбъект, "Товары", ДополнительныеРеквизиты);
	Если ТипЗнч(КэшированныеЗначения) = Тип("Структура")
		И ДополнительныеРеквизиты.ТребуетсяСерверныйВызов Тогда
		
		КэшированныеЗначения.Вставить("СобытияФорм");
	КонецЕсли;

	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий, Истина) Тогда
		ДополнительныеРеквизиты.ТребуетсяСерверныйВызов = Истина;
		
		Если ТипЗнч(КэшированныеЗначения) = Тип("Структура") Тогда
			КэшированныеЗначения.Вставить("НеобходимоОбновитьСтатусыСерий");
		КонецЕсли;
	КонецЕсли;

	Если ДополнительныеРеквизиты.ТребуетсяСерверныйВызов Тогда
		ТоварыПриОкончанииРедактированияНаСервере(Неопределено, КэшированныеЗначения);
	КонецЕсли;

	Если ТипЗнч(КэшированныеЗначения) = Тип("Структура")
		И КэшированныеЗначения.Свойство("НеобходимоОбновитьСтатусыСерий") Тогда
		
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
		КэшированныеЗначения.Удалить("НеобходимоОбновитьСтатусыСерий");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ИдентификаторТекущейСтроки = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	
	ТоварыНоменклатураПриИзмененииСервер(ИдентификаторТекущейСтроки);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииСервер(ИдентификаторТекущейСтроки)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если КонтролироватьАссортимент Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
	СтруктураДействий.Вставить("ЗаполнитьПомещение", Новый Структура("Склад, Номенклатура, Характеристика", Объект.Склад, ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика));
	СтруктураДействий.Вставить("ЗаполнитьПродавца", Новый Структура("Продавец", ТекущийПродавец));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий));
	
	Если КонтролироватьАссортимент Тогда
		СтруктураПроверкиАссортимента = АссортиментКлиентСервер.ПараметрыПроверкиАссортимента();
		СтруктураПроверкиАссортимента.Ссылка = Объект.Ссылка;
		СтруктураПроверкиАссортимента.Склад = Объект.Склад;
		СтруктураПроверкиАссортимента.Дата = Объект.Дата;
		СтруктураПроверкиАссортимента.ТекстСообщения = НСтр("ru = 'Товар %1 не включен в ассортимент магазина или запрещен к продаже.'");
		СтруктураПроверкиАссортимента.ИмяРесурсаАссортимента = "РазрешеныПродажи";
		СтруктураПроверкиАссортимента.ПровереноМожноДобавлять = Истина;
		СтруктураПроверкиАссортимента.РазрешатьДобавление = Ложь;
		
		СтруктураДействий.Вставить("ПроверитьАссортиментСтроки", СтруктураПроверкиАссортимента);
	КонецЕсли;
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтотОбъект.ИмяФормы, "Товары"));
	
	ОбработкаТабличнойЧастиКлиентСерверЛокализация.ДополнитьСтруктуруДействийПриИзмененииЭлемента(ЭтотОбъект, "Номенклатура", СтруктураДействий);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ИдентификаторТекущейСтроки = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	
	ТоварыХарактеристикаПриИзмененииСервер(ИдентификаторТекущейСтроки);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыХарактеристикаПриИзмененииСервер(ИдентификаторТекущейСтроки)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	
	СтруктураДействий = Новый Структура;
	Если КонтролироватьАссортимент Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьПомещение", Новый Структура("Склад, Номенклатура, Характеристика", Объект.Склад, ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтотОбъект.ИмяФормы, "Товары"));
	
	ОбработкаТабличнойЧастиКлиентСерверЛокализация.ДополнитьСтруктуруДействийПриИзмененииЭлемента(ЭтотОбъект, "Характеристика", СтруктураДействий);
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ЗначениеЗаполнено(Объект.ВидЦены) Тогда
		Если КонтролироватьАссортимент Тогда
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
		Иначе
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
		КонецЕсли;
	ИначеЕсли ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение                   = Элементы.Товары.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтотОбъект, ПараметрыУказанияСерий, ВыбранноеЗначение);
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ОбработкаТабличнойЧастиКлиентСерверЛокализация.ДополнитьСтруктуруДействийПриИзмененииЭлемента(ЭтотОбъект, "Серия", СтруктураДействий);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки", Ложь, Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ИнформационнаяПанельПрочиеПараметрыЗначениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПродавецЗначениеНеЗаполнено"
		Или НавигационнаяСсылкаФорматированнойСтроки = "Продавец" Тогда
		ОткрытьФорму(
			"Справочник.Пользователи.ФормаВыбора",
			Новый Структура("РежимВыбора", Истина),,,,,
			Новый ОписаниеОповещения("ИзменитьПродавцаГиперссылкаЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПомещениеЗначениеНеЗаполнено"
		Или НавигационнаяСсылкаФорматированнойСтроки = "Помещение" Тогда
		ИзменитьПомещение(Неопределено);
	КонецЕсли;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "Карта" Тогда
		ПоказатьЗначение(,Объект.КартаЛояльности);
	КонецЕсли;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "Сообщения" Тогда
		СкидкиНаценкиКлиент.ОткрытьФормуСообщений(СтруктураСообщений, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяПанельРасчетСуммыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "РучнаяСкидка" Тогда
		ОткрытьФормуНазначенияРучныхСкидок();
	КонецЕсли;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "АвтоматическаяСкидка" Тогда
		Если Не Объект.СкидкиРассчитаны Тогда
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ОткрытьИнформациюОСкидкахЗавершение", ЭтотОбъект),
				НСтр("ru = 'Скидки (наценки) не рассчитаны, рассчитать?'"), РежимДиалогаВопрос.ДаНет);
		Иначе
			ОткрытьИнформациюОСкидкахФрагмент();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидки(Команда)
	
	Объект.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПустаяСсылка");
	
	Оповещение = Новый ОписаниеОповещения("НазначитьАвтоматическиеСкидкиЗавершение", ЭтотОбъект);
	Если ПараметрыПримененияСкидок.НазначеныУправляемыеСкидки Тогда
		СкидкиНаценкиКлиент.ОткрытьФормуНазначенияУправляемыхСкидокНаценок(
			ВыполнитьПредварительныйРасчетСкидокНаСервере(),
			Оповещение);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, УправляемыеСкидки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьПоследнийСлипЧек(Команда)
	
	СтрокаСлипЧека = "";
	
	Если Не глПодключаемоеОборудование.Свойство("ПоследнийСлипЧек", СтрокаСлипЧека)
		Или ТипЗнч(СтрокаСлипЧека) <> Тип("Строка") 
		Или ПустаяСтрока(СтрокаСлипЧека) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Слип-чек отсутствует.
			         |Возможно для данного сеанса еще не выполнялась эквайринговая операция.'"));
		
		Возврат;
		
	КонецЕсли;
	
	ОборудованиеПодключено = МенеджерОборудованияУТКлиент.ОборудованиеПодключено(ПараметрыКассыККМ.ИдентификаторУстройства);
	Если ОборудованиеПодключено Тогда
		
		МенеджерОборудованияКлиент.НачатьПечатьТекста(
			Новый ОписаниеОповещения("ПослеЗавершенияПечатиСлипЧека", ЭтотОбъект),
			ЭтотОбъект.УникальныйИдентификатор,
			СтрокаСлипЧека,
			ПараметрыКассыККМ.ИдентификаторУстройства);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Фискальное устройство не подключено.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйЧек(Команда)
	
	ЗагрузитьНовыйЧек();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	
	Если Не Объект.СкидкиРассчитаны Тогда
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ОткрытьИнформациюОСкидкахЗавершение", ЭтотОбъект),
			НСтр("ru = 'Скидки (наценки) не рассчитаны, рассчитать?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ОткрытьИнформациюОСкидкахФрагмент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСообщения(Команда)
	
	СкидкиНаценкиКлиент.ОткрытьФормуСообщений(СтруктураСообщений(), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ОчиститьСообщения();
	
	ТекущаяСтрока = МенеджерОборудованияУТКлиент.ТекущаяСтрока(ЭтотОбъект);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(
		Новый ОписаниеОповещения("ПолучитьВесЗавершение", ЭтотОбъект, ТекущаяСтрока),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СчитатьКартуЛояльности(Команда)
	
	Если ТолькоПросмотр Тогда // Чек пробит. Изменение информации запрещено.
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура(
		"НеИспользоватьРучнойВвод, НеПодключатьОборудование",
		Не ПраваДоступа.ИзменениеКартЛояльности, Истина);
	
	ОткрытьФорму(
		"Справочник.КартыЛояльности.Форма.СчитываниеКартыЛояльности",
		ПараметрыОткрытия,
		ЭтотОбъект,
		ЭтотОбъект.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(Команда)
	
	ОткрытьПодборСерий();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранБыстрыйТовар(Команда)
	
	НайденныеСтроки = БыстрыеТовары.НайтиСтроки(Новый Структура("ИмяКоманды", Команда.Имя));
	
	ПараметрыОповещения = Новый Структура();
	ПараметрыОповещения.Вставить("Номенклатура", НайденныеСтроки[0].Номенклатура);
	ПараметрыОповещения.Вставить("Характеристика", НайденныеСтроки[0].Характеристика);
	ПараметрыОповещения.Вставить("Упаковка", НайденныеСтроки[0].Упаковка);
	ПараметрыОповещения.Вставить("ТипНоменклатуры", НайденныеСтроки[0].ТипНоменклатуры);
	ПараметрыОповещения.Вставить("КоличествоУпаковок", 1);
	ПараметрыОповещения.Вставить("ФормаВладелец", ЭтотОбъект.УникальныйИдентификатор);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Оповестить("ВыбранБыстрыйТовар", ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеТовары(Команда)
	
	ОткрытьФорму("Документ.ЧекККМ.Форма.БыстрыеТовары", Новый Структура("ГорячиеКлавиши", ГорячиеКлавиши), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратТовара(Команда)
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ВозвратТовараОбработкаОповещения", ЭтотОбъект);
	
	РозничныеПродажиКлиент.ОбработатьСостояниеСмены(ЭтотОбъект, ОбработкаОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПомещение(Команда)
	
	Если Элементы.Товары.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ВыделенныеСтроки[0]);
	
	Отбор = Новый Структура("Владелец", Объект.Склад);
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("Отбор", Отбор);
	ПараметрыОткрытия.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
	ПараметрыОткрытия.Вставить("Характеристика", СтрокаТЧ.Характеристика);
	
	ОткрытьФорму(
		"Справочник.СкладскиеПомещения.Форма.ФормаВыбораСОстатками",
		ПараметрыОткрытия,,,,,
		Новый ОписаниеОповещения("ИзменитьПомещениеЗавершение", ЭтотОбъект, Новый Структура("СтрокаТЧ", СтрокаТЧ)),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПродавца(Команда)
	
	ОткрытьФорму(
		"Документ.ЧекККМ.Форма.ВыборПродавца",,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ИзменитьПродавцаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНабора(Команда)
	
	ВыбраннаяСтрока = Элементы.Товары.ТекущаяСтрока;
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКомплекта = Новый Структура;
	ПараметрыКомплекта.Вставить("НоменклатураНабора", ТекущаяСтрока.НоменклатураНабора);
	ПараметрыКомплекта.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
	ПараметрыКомплекта.Вставить("КолонкиНабора", КолонкиНабора(ЭтотОбъект));
	
	АдресНабораВоВременномХранилище = АдресНабораВоВременномХранилище(ПараметрыКомплекта);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресВоВременномХранилище", АдресНабораВоВременномХранилище);
	ПараметрыОткрытия.Вставить("НоменклатураНабора", ТекущаяСтрока.НоменклатураНабора);
	ПараметрыОткрытия.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
	ПараметрыОткрытия.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыОткрытия.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	ПараметрыОткрытия.Вставить("Валюта", Объект.Валюта);
	ПараметрыОткрытия.Вставить("ВидЦены", Объект.ВидЦены);
	ПараметрыОткрытия.Вставить("Дата", Объект.Дата);
	ПараметрыОткрытия.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("Склад", Объект.Склад);
	ПараметрыОткрытия.Вставить("ЗапретРедактированияЦены", Истина);
	ПараметрыОткрытия.Вставить("СкрыватьКомандуОстаткиНаСкладах", Ложь);
	
	ОткрытьФорму("Обработка.РедактированиеНабора.Форма.Форма", ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключенноеОборудование(Команда)
	
	ОткрытьФормуПодключенноеОборудование(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМенюОперацииСККМ(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("КассаККМ", Объект.КассаККМ);
	ПараметрыОткрытияФормы.Вставить("Кассир",   Объект.Кассир);
	ПараметрыОткрытияФормы.Вставить("ИзменитьКассуККМ", Истина);
	
	ОткрытьФорму("Документ.ЧекККМ.Форма.МенюОперацииСККМ", ПараметрыОткрытияФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМенюПрочихОпераций(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("КассаККМ",       Объект.КассаККМ);
	ПараметрыОткрытияФормы.Вставить("Кассир",         Объект.Кассир);
	ПараметрыОткрытияФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ПараметрыОткрытияФормы.Вставить("Документ",       Объект.Ссылка);
	
	ПараметрыОткрытияФормы.Вставить("ПроверитьКоличествоВДокументе",         Истина);
	ПараметрыОткрытияФормы.Вставить("ПродажаПодарочногоСертификата",         ИспользоватьПодарочныеСертификаты);
	ПараметрыОткрытияФормы.Вставить("ВозвратПодарочногоСертификата",         ИспользоватьПодарочныеСертификаты);
	ПараметрыОткрытияФормы.Вставить("Заблокировать",                         ПринудительнаяАвторизация);
	ПараметрыОткрытияФормы.Вставить("АдресКомандПечатиВоВременномХранилище", АдресКомандПечатиВоВременномХранилище);
	
	ОткрытьФорму("Документ.ЧекККМ.Форма.МенюПрочиеОперации", ПараметрыОткрытияФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьПодарочнымСертификатом(Команда)
	
	ОчиститьСообщения();
	
	ВыбраннаяФормаОплаты = Новый Структура;
	ВыбраннаяФормаОплаты.Вставить("Наличные",              Ложь);
	ВыбраннаяФормаОплаты.Вставить("БонусныеБаллы",         Ложь);
	ВыбраннаяФормаОплаты.Вставить("ПлатежныеКарты",        Ложь);
	ВыбраннаяФормаОплаты.Вставить("ПодарочныеСертификаты", Истина);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыбраннаяФормаОплаты", ВыбраннаяФормаОплаты);
	
	РозничныеПродажиКлиент.ОбработатьСостояниеСмены(
		ЭтотОбъект,
		Новый ОписаниеОповещения("ОплатитьПодарочнымСертификатомОбработкаОповещения", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьПлатежнойКартой(Команда)
	
	ОчиститьСообщения();
	
	ВыбраннаяФормаОплаты = Новый Структура;
	ВыбраннаяФормаОплаты.Вставить("Наличные",              Ложь);
	ВыбраннаяФормаОплаты.Вставить("БонусныеБаллы",         Ложь);
	ВыбраннаяФормаОплаты.Вставить("ПлатежныеКарты",        Истина);
	ВыбраннаяФормаОплаты.Вставить("ПодарочныеСертификаты", Ложь);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыбраннаяФормаОплаты", ВыбраннаяФормаОплаты);
	
	РозничныеПродажиКлиент.ОбработатьСостояниеСмены(
		ЭтотОбъект,
		Новый ОписаниеОповещения("ОплатитьПлатежнойКартойОбработкаОповещения", ЭтотОбъект, ДополнительныеПараметры));
		
	РеалVisa();
	ПечатьДетализации(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура СмешаннаяОплата(Команда)
	
	ОчиститьСообщения();
	
	РозничныеПродажиКлиент.ОбработатьСостояниеСмены(
		ЭтотОбъект,
		Новый ОписаниеОповещения("СмешаннаяОплатаОбработкаОповещения", ЭтотОбъект));
		
	РеалVisa();
	ПечатьДетализации(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьНаличными(Команда)
	
	ОчиститьСообщения();
	
	ВыбраннаяФормаОплаты = Новый Структура;
	ВыбраннаяФормаОплаты.Вставить("Наличные",              Истина);
	ВыбраннаяФормаОплаты.Вставить("БонусныеБаллы",         Ложь);
	ВыбраннаяФормаОплаты.Вставить("ПлатежныеКарты",        Ложь);
	ВыбраннаяФормаОплаты.Вставить("ПодарочныеСертификаты", Ложь);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыбраннаяФормаОплаты", ВыбраннаяФормаОплаты);
	
	РозничныеПродажиКлиент.ОбработатьСостояниеСмены(
		ЭтотОбъект,
		Новый ОписаниеОповещения("ОплатитьНаличнымиОбработкаОповещения", ЭтотОбъект, ДополнительныеПараметры));
		
	//РеалVisa();
	ПечатьДетализации(Команда);
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЧекККМ.ФормаДокументаРМК.Команда.ОткрытьПодбор");
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='чек ККМ'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидЦены", Объект.ВидЦены);
	ПараметрыФормы.Вставить("РежимПодбораБезСоглашенийСКлиентами ", Истина);
	ПараметрыФормы.Вставить("ВариантАнализаНоменклатурыПродаваемойСовместно", ПредопределенноеЗначение("Перечисление.ВариантыАнализаНоменклатурыПродаваемойСовместно.РозничнаяТорговля"));
	ПараметрыФормы.Вставить("РежимОтбораПоАссортименту", КонтролироватьАссортимент);
	
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", Ложь);
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",                      Ложь);
	ПараметрыФормы.Вставить("Склад",                                   Объект.Склад);
	ПараметрыФормы.Вставить("Валюта",                                  Объект.Валюта);
	ПараметрыФормы.Вставить("Заголовок",                               ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата",                                    Объект.Дата);
	ПараметрыФормы.Вставить("Документ",                                Объект.Ссылка);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                  Истина);
	ПараметрыФормы.Вставить("ПараметрыУказанияСерий",                  ПараметрыУказанияСерий);
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РучныеСкидки(Команда)
	
	ОткрытьФормуНазначенияРучныхСкидок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОплатыПлатежнымиКартами(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ВыполнитьОбработкуОповещения(
		Новый ОписаниеОповещения("ОтменитьОплатыПлатежнымиКартами", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

Процедура РеалVisa()
	
	ОбжРеал = Константы.ШМРеализацияVISA.Получить().ПолучитьОбъект();
	ОбжРеал.VISA=Истина;
	ОбжРеал.Записать();
	Константы.ШМРеализацияVISA.Установить(Документы.РеализацияТоваровУслуг.ПустаяСсылка());
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтотОбъект, Ложь);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеСтатусовУказанияСерий(ЭтотОбъект, Ложь);
	
	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтотОбъект);

	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	
	//
	
	НаборыСервер.УстановитьУсловноеОформление(ЭтотОбъект, "Товары");
	
КонецПроцедуры

#Область Наборы

&НаКлиентеНаСервереБезКонтекста
Функция КолонкиНабора(Форма)
	
	Колонки = Новый Массив;
	Колонки.Добавить("Номенклатура");
	Колонки.Добавить("Характеристика");
	
	Колонки.Добавить("Цена");
	Колонки.Добавить("Упаковка");
	Колонки.Добавить("Количество");
	Колонки.Добавить("КоличествоУпаковок");
	
	Если Форма.ИспользоватьРучныеСкидкиВПродажах Тогда
		Колонки.Добавить("ПроцентРучнойСкидки");
		Колонки.Добавить("СуммаРучнойСкидки");
	КонецЕсли;
	Если Форма.ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
		Колонки.Добавить("ПроцентАвтоматическойСкидки");
		Колонки.Добавить("СуммаАвтоматическойСкидки");
	КонецЕсли;
	
	Колонки.Добавить("СтавкаНДС");
	Колонки.Добавить("СуммаНДС");
	Колонки.Добавить("Сумма");
	
	Возврат Колонки;
	
КонецФункции

&НаКлиенте
// Вызывается через ОписаниеОповещения из общего модуля НаборыКлиент 
Процедура ПриУдаленииКомплектующих(Действие, ДополнительныйПараметр) Экспорт
	
	Если НаборыКлиент.ДействиеРедактироватьНабор(Действие) Тогда
		НаборыКлиент.ПриУдаленииКомплектующих(ЭтотОбъект, "Товары", ДополнительныйПараметр);
	ИначеЕсли НаборыКлиент.ДействиеУдалитьВесьНабор(Действие) Тогда
		ПриУдаленииКомплектующихНаСервере("Товары", ДополнительныйПараметр, КэшированныеЗначения);
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ПриУдаленииКомплектующихНаСервере(ИмяТЧ, ДополнительныйПараметр, КэшированныеЗначения)
	
	НаборыСервер.ПриУдаленииКомплектующих(ЭтотОбъект, ИмяТЧ, ДополнительныйПараметр);
	
	КэшированныеЗначения.Вставить("СобытияФорм");
	ТоварыПриОкончанииРедактированияНаСервере(Неопределено, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Функция АдресНабораВоВременномХранилище(Параметры)
	
	Возврат НаборыСервер.АдресНабораВоВременномХранилище(ЭтотОбъект, Параметры, "Товары");
	
КонецФункции

&НаСервере
Процедура ПриОкончанииРедактированияНабора(АдресВоВременномХранилище)
	
	ИзменятьКоличество = Не ТолькоПросмотр;
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПомещение", Новый Структура("Склад", Объект.Склад));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПродавца", Новый Структура("Продавец", ТекущийПродавец));
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	
	ПараметрыДанных = Новый Структура;
	ПараметрыДанных.Вставить("Данные", ПолучитьИзВременногоХранилища(АдресВоВременномХранилище));
	ПараметрыДанных.Вставить("СтруктураДействийСИзмененнымиСтроками", СтруктураДействийСИзмененнымиСтроками);
	ПараметрыДанных.Вставить("СтруктураДействийСДобавленнымиСтроками", СтруктураДействийСДобавленнымиСтроками);
	ПараметрыДанных.Вставить("КолонкиНабора", КолонкиНабора(ЭтотОбъект));
	
	НаборыСервер.ПриОкончанииРедактированияНабора(ЭтотОбъект, "Товары", ПараметрыДанных);
	
КонецПроцедуры

#КонецОбласти

#Область РасчетСкидок

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиИОткрытьФормуОплаты(ДополнительныеПараметры)
	
	ЭтотОбъект.ТекущийЭлемент = Элементы.Еще;
	
	Если ИспользоватьАвтоматическиеСкидкиВПродажах
		И (ПараметрыПримененияСкидок.ФормаОплатыВлияетНаРасчетСкидок ИЛИ ПараметрыПримененияСкидок.ОплатаБалламиВлияетНаНачислениеБаллов)
		И ПараметрыПримененияСкидок.НазначеныСкидки Тогда
		
		Если Не ДополнительныеПараметры.Свойство("ВыбраннаяФормаОплаты") Тогда
			
			Если Не ПроверитьЗаполнение() Тогда
				Возврат;
			КонецЕсли;
			
			ДоступныеВидыОплаты = ДоступныеВидыОплаты(ЭтотОбъект);
			
			ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить(
			"Наличные",
			Новый Структура("Значение, Видимость", Истина, ДоступныеВидыОплаты.Наличные));
			ПараметрыОткрытияФормы.Вставить(
			"ПлатежныеКарты",
			Новый Структура("Значение, Видимость", Ложь, ДоступныеВидыОплаты.ПлатежныеКарты));
			ПараметрыОткрытияФормы.Вставить(
			"БонусныеБаллы",
			Новый Структура("Значение, Видимость, Параметр", Ложь, ДоступныеВидыОплаты.БонусныеБаллы, Объект.КартаЛояльности));
			ПараметрыОткрытияФормы.Вставить(
			"ПодарочныеСертификаты",
			Новый Структура("Значение, Видимость", Ложь, ДоступныеВидыОплаты.ПодарочныеСертификаты));
			
			ОткрытьФорму(
			"Документ.ЧекККМ.Форма.ВыборФормыОплаты",
			Новый Структура("Параметр", ПараметрыОткрытияФормы),
			ЭтотОбъект,
			УникальныйИдентификатор,,,
			Новый ОписаниеОповещения("ВыборФормыОплатыОплатыЗавершение", ЭтотОбъект, ДополнительныеПараметры));
			
		Иначе
			
			ОбновитьДаннныеОФормеОплаты(ЭтотОбъект, ДополнительныеПараметры.ВыбраннаяФормаОплаты);
			РасчетФрагмент(ДополнительныеПараметры);
			
		КонецЕсли;
		
	Иначе
		
		// Форма оплаты не влияет на расчет скидок (наценок)
		Если Не ДополнительныеПараметры.Свойство("ВыбраннаяФормаОплаты") Тогда
			ВыбраннаяФормаОплаты = ДоступныеВидыОплаты(ЭтотОбъект);
		Иначе
			ВыбраннаяФормаОплаты = ДополнительныеПараметры.ВыбраннаяФормаОплаты;
		КонецЕсли;
		
		ОбновитьДаннныеОФормеОплаты(ЭтотОбъект, ВыбраннаяФормаОплаты);		
		ДополнительныеПараметры.Вставить("ВыбраннаяФормаОплаты", ВыбраннаяФормаОплаты);
		РасчетФрагмент(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРасчет(ДополнительныеПараметры)
	
	Если ПараметрыПримененияСкидок <> Неопределено И ПараметрыПримененияСкидок.НазначеныСкидки И НЕ Объект.СкидкиРассчитаны И Объект.Товары.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НеобходимоРассчитатьСкидкиНаценкиВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(Истина, НСтр("ru = 'Да'"));
		Кнопки.Добавить(Ложь,   НСтр("ru = 'Нет'"));
		ТесктВопроса = НСтр("ru='Предварительно необходимо рассчитать скидки (наценки). Выполнить расчет?'");
		ПоказатьВопрос(ОписаниеОповещения, ТесктВопроса, Кнопки);
	Иначе
		РассчитатьСкидкиНаценкиИОткрытьФормуОплаты(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НеобходимоРассчитатьСкидкиНаценкиВопросЗавершение(НеобходимоРассчитать, ДополнительныеПараметры) Экспорт
	
	Если Не НеобходимоРассчитать Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьСкидкиНаценкиИОткрытьФормуОплаты(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФормыОплатыОплатыЗавершение(ВыбраннаяФормаОплаты, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ВыбраннаяФормаОплаты) Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ДополнительныеПараметры.Вставить("ВыбраннаяФормаОплаты", ВыбраннаяФормаОплаты);
	ОбновитьДаннныеОФормеОплаты(ЭтотОбъект, ВыбраннаяФормаОплаты);
	РасчетФрагмент(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетФрагмент(ДополнительныеПараметры)
	
	Если ИспользоватьАвтоматическиеСкидкиВПродажах
		И ПараметрыПримененияСкидок.НазначеныСкидки
		И (ПараметрыПримененияСкидок.НазначеныУправляемыеСкидки И Не Объект.СкидкиРассчитаны)
		И НазначатьСкидкиПоКнопкеРасчетВЧекеККМ Тогда
		
		Оповещение = Новый ОписаниеОповещения("РасчетПослеВыбораУправляемыхСкидок", ЭтотОбъект, ДополнительныеПараметры);
		СкидкиНаценкиКлиент.ОткрытьФормуНазначенияУправляемыхСкидокНаценок(
			ВыполнитьПредварительныйРасчетСкидокНаСервере(),
			Оповещение);
		
	Иначе
		РасчетСкидокНаКлиенте(УправляемыеСкидки, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетПослеВыбораУправляемыхСкидок(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасчетСкидокНаКлиенте(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетСкидокНаКлиенте(ВозвращенноеЗначениеУправляемыеСкидки, ДополнительныеПараметры)
	
	Если (ИспользоватьАвтоматическиеСкидкиВПродажах
		И ПараметрыПримененияСкидок.НазначеныСкидки)
		Или (Не КонтрольНаСкладеОтключен) Тогда
		 
		ЭтотОбъект.Объект.ИспользоватьОплатуБонуснымиБаллами = ДополнительныеПараметры.ВыбраннаяФормаОплаты.БонусныеБаллы;
		
		ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
		Результат = ВыполнитьЧастьРасчетаНаСервере(ВозвращенноеЗначениеУправляемыеСкидки, ТребуетсяПовторнаяПопыткаЗаписи);
		Если Не Результат.РасчетВыполненУспешно Тогда
			
			ДополнительныеПараметрыПопыткаЗаписи = РозничныеПродажиКлиентСервер.СтруктураПовтораЗаписи();
			ДополнительныеПараметрыПопыткаЗаписи.ОписаниеОповещения         = Новый ОписаниеОповещения("РасчетСкидокНаКлиентеПовторнаяЗаписьЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ДополнительныеПараметрыПопыткаЗаписи.ТекстСообщения             = НСтр("ru = 'При выполнении операции резервирования не удалось записать документ.'");
			ДополнительныеПараметрыПопыткаЗаписи.ВозвращатьРезультатФункции = Истина;
			ДополнительныеПараметрыПопыткаЗаписи.ИмяПроцедуры               = "ВыполнитьЧастьРасчетаНаСервере";
			ДополнительныеПараметрыПопыткаЗаписи.ПараметрыПроцедуры         = ВозвращенноеЗначениеУправляемыеСкидки;
			ДополнительныеПараметрыПопыткаЗаписи.РезультатОперации          = Результат;
			
			Если Не ТребуетсяПовторнаяПопыткаЗаписи Тогда
				ОшибкаПриПроведенииЧекаВопросЗавершение(КодВозвратаДиалога.Отмена, ДополнительныеПараметрыПопыткаЗаписи);
				Возврат;
			КонецЕсли;
			
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ОшибкаПриПроведенииЧекаВопросЗавершение", ЭтотОбъект, ДополнительныеПараметрыПопыткаЗаписи),
				ДополнительныеПараметрыПопыткаЗаписи.ТекстСообщения,
				РежимДиалогаВопрос.ПовторитьОтмена, 10, КодВозвратаДиалога.Повторить,,КодВозвратаДиалога.Повторить);
			Возврат;
			
		КонецЕсли;
		
		Если Результат.СтруктураСообщений <> Неопределено И Результат.СтруктураСообщений.Сообщения.Количество() > 0 И Результат.СтруктураСообщений.АвтоматическиОткрывать Тогда
			Элементы.ПоказатьСообщения.Видимость = Результат.СтруктураСообщений.Сообщения.Количество() > 0;
			
			ДанныеОткрытияФормы = Результат.СтруктураСообщений;
			ДанныеОткрытияФормы.Вставить("ПередВыполнениемОплатыВЧекеККМ", Истина);
			ДанныеОткрытияФормы.Вставить("ВыбраннаяФормаОплаты", ДополнительныеПараметры.ВыбраннаяФормаОплаты);
			
			ОткрытьФорму(
				"ОбщаяФорма.СообщенияСкидокНаценок",
				ДанныеОткрытияФормы,
				ЭтотОбъект,
				УникальныйИдентификатор,,,
				Новый ОписаниеОповещения("СообщенияСкидокНаценокЗавершение", ЭтотОбъект, ДополнительныеПараметры));
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.ВыбраннаяФормаОплаты);
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СообщенияСкидокНаценокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат <> Ложь Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Результат);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Ложь);
		
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетСкидокНаКлиентеПовторнаяЗаписьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.РасчетВыполненУспешно Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Ложь);
		Возврат;
	КонецЕсли;
	
	Если Результат.СтруктураСообщений <> Неопределено И Результат.СтруктураСообщений.Сообщения.Количество() > 0 И Результат.СтруктураСообщений.АвтоматическиОткрывать Тогда
		Элементы.ПоказатьСообщения.Видимость = Результат.СтруктураСообщений.Сообщения.Количество() > 0;
		ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", Результат.СтруктураСообщений, ЭтотОбъект, УникальныйИдентификатор);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Истина);
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область ПечатьЧека

&НаСервере
Функция ДанныеДляПробитияЧека()
	
	МассивСтрок = Новый Массив;
	
	ПредметыРасчетовПоДокументу = Документы.ЧекККМ.ПредметыРасчетовПоДокументу(Объект.Ссылка);
	
	Для каждого СтрокаТЧ из ПредметыРасчетовПоДокументу.Товары Цикл
		
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
		
		// Общие данные строки чека
		СтрокаПозицииЧека.ПризнакСпособаРасчета  = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой");
		СтрокаПозицииЧека.ПризнакПредметаРасчета = РозничныеПродажиКлиентСервер.ПризнакПредметаРасчетаФискальнойОперации(
		СтрокаТЧ.ТипНоменклатуры, СтрокаТЧ.ПодакцизныйТовар);
		          СтрокаПозицииЧека.Наименование = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
		          СтрокаТЧ.НоменклатураНаименование,
		          СтрокаТЧ.ХарактеристикаНаименование,
		          СтрокаТЧ.УпаковкаНаименование);
		СтрокаПозицииЧека.НомерСекции            = 1;
		СтрокаПозицииЧека.Цена                   = СтрокаТЧ.Цена;
		СтрокаПозицииЧека.СтавкаНДС              = РозничныеПродажиКлиентСервер.СтавкаНДСФискальнойОперации(СтрокаТЧ.СтавкаНДС);
		СтрокаПозицииЧека.СуммаНДС               = СтрокаТЧ.СуммаНДС;
		
		// Расчетные данные строки чека
		СтрокаПозицииЧека.Количество = СтрокаТЧ.КоличествоУпаковок;
		СтрокаПозицииЧека.Сумма      = СтрокаТЧ.СуммаСНДС;
		
		Если СтрокаПозицииЧека.Количество <> 0 Тогда
			СтрокаПозицииЧека.ЦенаСоСкидками = Окр(СтрокаТЧ.СуммаСНДС / СтрокаТЧ.КоличествоУпаковок, 2);
			СтрокаПозицииЧека.СуммаСкидок    = СтрокаТЧ.СуммаСкидки;
		КонецЕсли;
		
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаТЧ, "Штрихкод") Тогда
			СтрокаПозицииЧека.Штрихкод                           = СтрокаТЧ.Штрихкод;
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаТЧ, "КодВидаНоменклатурнойКлассификации") Тогда
				СтрокаПозицииЧека.КодВидаНоменклатурнойКлассификации = СтрокаТЧ.КодВидаНоменклатурнойКлассификации;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ТипМаркировки                          = Неопределено;
		СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.КонтрольныйИдентификационныйЗнак       = Неопределено;
		СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы = Неопределено;
		СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.СерийныйНомер                          = Неопределено;
		
		ЗаполнитьСтрокуПоДаннымРазбораШтрихкода(СтрокаПозицииЧека, СтрокаТЧ);
		
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаТЧ, "ОсобенностьУчета")
			И ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаТЧ, "Агент")
			И (СтрокаТЧ.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Партнером
			ИЛИ СтрокаТЧ.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ОрганизациейПоАгентскойСхеме)
			И ЗначениеЗаполнено(СтрокаТЧ.Агент) Тогда
			
			РеквизитыКомитента = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(СтрокаТЧ.Агент, ТекущаяДатаСеанса());
			
			СтрокаПозицииЧека.ПризнакАгентаПоПредметуРасчета = Перечисления.ПризнакиАгента.Агент;
			
			ДанныеПоставщика = Новый Структура();
			ДанныеПоставщика.Вставить("Телефон"	 	, РеквизитыКомитента.Телефоны);
			ДанныеПоставщика.Вставить("Наименование", РеквизитыКомитента.ПолноеНаименование);
			ДанныеПоставщика.Вставить("ИНН"		 	, РеквизитыКомитента.ИНН);
			
			СтрокаПозицииЧека.ДанныеПоставщика = ДанныеПоставщика; 
		КонецЕсли;
		
		МассивСтрок.Добавить(СтрокаПозицииЧека);
		
	КонецЦикла;
	
	Возврат МассивСтрок;
	
КонецФункции

&НаКлиенте
Функция ПараметрыОперацииФискализацииЧека()
	
	ПараметрыОперацииФискализацииЧека = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	
	ПараметрыОперацииФискализацииЧека.ПозицииЧека = ДанныеДляПробитияЧека();	
	
	ПараметрыОперацииФискализацииЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств");
	РозничныеПродажиКлиентСервер.ЗаполнитьДанныеФискальнойОперации(ПараметрыОперацииФискализацииЧека, ДанныеФискальнойОперации);
	ПараметрыОперацииФискализацииЧека.ДокументОснование = Объект.Ссылка;
	
	ПараметрыОперацииФискализацииЧека.Кассир                 = РеквизитыКассира.Наименование;
	Если ЗначениеЗаполнено(РеквизитыКассира.Должность) Тогда
		ПараметрыОперацииФискализацииЧека.Кассир = ПараметрыОперацииФискализацииЧека.Кассир + " - " + РеквизитыКассира.Должность;
	КонецЕсли;
	ПараметрыОперацииФискализацииЧека.КассирИНН              = РеквизитыКассира.ИНН;
	ПараметрыОперацииФискализацииЧека.СистемаНалогообложения = СтруктураСостояниеКассовойСмены.СистемаНалогообложения;
	ПараметрыОперацииФискализацииЧека.АдресРасчетов          = СтруктураСостояниеКассовойСмены.АдресСклада;
	ПараметрыОперацииФискализацииЧека.МестоРасчетов          = "";
	
	ПараметрыОперацииФискализацииЧека.Организация		  = СтруктураСостояниеКассовойСмены.Организация;
	ПараметрыОперацииФискализацииЧека.ОрганизацияНазвание = СтруктураСостояниеКассовойСмены.СведенияООрганизации.ОфициальноеНаименование;
	ПараметрыОперацииФискализацииЧека.ОрганизацияИНН      = СтруктураСостояниеКассовойСмены.СведенияООрганизации.ИНН;
	ПараметрыОперацииФискализацииЧека.ОрганизацияКПП      = СтруктураСостояниеКассовойСмены.СведенияООрганизации.КПП;
	ПараметрыОперацииФискализацииЧека.НомерКассы          = "00001";
	ПараметрыОперацииФискализацииЧека.НомерЧека           = 1;
	ПараметрыОперацииФискализацииЧека.НомерСмены          = 1;
	
	ПараметрыОперацииФискализацииЧека.ТорговыйОбъект	     = СтруктураСостояниеКассовойСмены.КассаККМ;
	ПараметрыОперацииФискализацииЧека.АдресМагазина          = СтруктураСостояниеКассовойСмены.АдресСклада;
	ПараметрыОперацииФискализацииЧека.НаименованиеМагазина   = Строка(СтруктураСостояниеКассовойСмены.Склад);
	ПараметрыОперацииФискализацииЧека.СерийныйНомер          = ПараметрыКассыККМ.СерийныйНомер;
	
	// Подготовка таблицы оплат
	ИнформацияОбОплате = ИнформацияОбОплате(ЭтотОбъект);
	
	// Наличные
	СтрокаОплаты = МенеджерОборудованияКлиентСервер.ПараметрыСтрокиОплаты();
	СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные"));
	СтрокаОплаты.Вставить("Сумма",     ИнформацияОбОплате.Наличные);
	ПараметрыОперацииФискализацииЧека.ТаблицаОплат.Добавить(СтрокаОплаты);
	
	// Безналичные
	СтрокаОплаты = МенеджерОборудованияКлиентСервер.ПараметрыСтрокиОплаты();
	СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно"));
	СтрокаОплаты.Вставить("Сумма",     ИнформацияОбОплате.ПлатежныеКарты);
	ПараметрыОперацииФискализацииЧека.ТаблицаОплат.Добавить(СтрокаОплаты);
	
	// Сертификатом
	СтрокаОплаты = МенеджерОборудованияКлиентСервер.ПараметрыСтрокиОплаты();
	СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Предоплата"));
	СтрокаОплаты.Вставить("Сумма",     ИнформацияОбОплате.ПодарочныеСертификаты);
	ПараметрыОперацииФискализацииЧека.ТаблицаОплат.Добавить(СтрокаОплаты);
	
	//Если ПараметрыКассыККМ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
	
	ПодключаемоеОборудованиеУТВызовСервера.ДобавитьВнереализационнуюПрибыль(ЭтотОбъект.Объект, ПараметрыОперацииФискализацииЧека);
	
	//КонецЕсли;
	
	Возврат ПараметрыОперацииФискализацииЧека;
	
КонецФункции

&НаКлиенте
Процедура ПробитьЧек()
	
	ОчиститьСообщения();
	
	ЕстьОшибки = Ложь;
	
	Если Объект.ПометкаУдаления Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Документ помечен на удаление'"), Объект.Ссылка,,,ЕстьОшибки);
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если ЕстьОшибки Или Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОперацииФискализацииЧека = ПараметрыОперацииФискализацииЧека();
	ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ПараметрыОперацииФискализацииЧека, ПараметрыКассыККМ.ИдентификаторУстройства);
	
	ВыполнитьДействиеПослеЗаписи(
		Новый ОписаниеОповещения("ПробитьЧекПослеПроведения", ЭтотОбъект, ПараметрыОперацииФискализацииЧека),
		НСтр("ru = 'Перед выполнением операции пробития чека не удалось провести документ.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекПослеПроведения(Проведен, ПараметрыОперацииФискализацииЧека) Экспорт
	
	Если НЕ Проведен Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПробитьЧекЗавершение", ЭтотОбъект);
	
	Результат = МенеджерОборудованияУТКлиент.ОборудованиеПодключено(ПараметрыКассыККМ.ИдентификаторУстройства);
	
	Если Результат Или ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования Тогда
		
		Если Не ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования Тогда

			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ОписаниеОповещения",                ОписаниеОповещения);
			ДополнительныеПараметры.Вставить("ПараметрыОперацииФискализацииЧека", ПараметрыОперацииФискализацииЧека);
			
			СобытияФормКлиент.ПриИзмененииЭлемента(ЭтотОбъект, "ПробитьЧекПослеПроведения", ДополнительныеПараметры);

			Оповещение            = Новый ОписаниеОповещения("ПечатьЧека_Завершение",            ЭтотОбъект, ДополнительныеПараметры);
			ПослеОткрытияЧека     = Новый ОписаниеОповещения("ПечатьЧека_ПослеОткрытияЧека",     ЭтотОбъект, ДополнительныеПараметры);
			ПослеОшибкиПечатиЧека = Новый ОписаниеОповещения("ПечатьЧека_ПослеОшибкиПечатиЧека", ЭтотОбъект, ДополнительныеПараметры);
		
			МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
				Оповещение,
				УникальныйИдентификатор,
				ПараметрыОперацииФискализацииЧека,
				ПараметрыКассыККМ.ИдентификаторУстройства,,
				ПослеОткрытияЧека,
				ПослеОшибкиПечатиЧека);
			
		Иначе
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
			
			РезультатВыполнения = Новый Структура;
			РезультатВыполнения.Вставить("Результат", Истина);
			ПечатьЧека_Завершение(
				РезультатВыполнения,
				ДополнительныеПараметры);
			
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Фискальное устройство не подключено. Чек не напечатан.'"));
			
		ВыполнитьОбработкуОповещения(
			ОписаниеОповещения,
			Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны",
				Ложь, Ложь));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ПараметрыЛокализации = Новый Структура;
	ПараметрыЛокализации.Вставить("ПараметрыВыполнения",     ПараметрыВыполнения);
	ПараметрыЛокализации.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	ПараметрыЛокализации.Вставить("СтандартнаяОбработка",    Истина);
	СобытияФормКлиент.ПриИзмененииЭлемента(ЭтотОбъект, "ПечатьЧека_ПослеОткрытияЧека", ПараметрыЛокализации);

	Если ПараметрыЛокализации.СтандартнаяОбработка Тогда
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПослеОшибкиПечатиЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ПараметрыЛокализации = Новый Структура;
	ПараметрыЛокализации.Вставить("ПараметрыВыполнения",     ПараметрыВыполнения);
	ПараметрыЛокализации.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	ПараметрыЛокализации.Вставить("СтандартнаяОбработка",    Истина);
	СобытияФормКлиент.ПриИзмененииЭлемента(ЭтотОбъект, "ПечатьЧека_ПослеОшибкиПечатиЧека", ПараметрыЛокализации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_Завершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	ИзмененныеДанныеЗаписаны = Ложь;
	ВыполненаОперацияНаУстройстве = Ложь;
	
	//На устройстве чек успешно напечатан
	Если РезультатВыполнения.Результат Тогда
		
		СписаноБонусныхБалловВВалюте   = Объект.Товары.Итог("СуммаБонусныхБалловКСписаниюВВалюте");
		НачисленоБонусныхБалловВВалюте = Объект.Товары.Итог("СуммаНачисленныхБонусныхБалловВВалюте");
		
		ТекстоваяСтрокаДляПечатиНаККТ = "";
		Если ЗначениеЗаполнено(Объект.КартаЛояльности)
			И (СписаноБонусныхБалловВВалюте <> 0) Тогда
			
			ТекстоваяСтрокаДляПечатиНаККТ = ТекстоваяСтрокаДляПечатиНаККТ + СтрШаблон(
				НСтр("ru = 'Списано бонусных баллов: %1 %2'"),
				СписаноБонусныхБалловВВалюте,
				Объект.Валюта);
			
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.КартаЛояльности)
			И (НачисленоБонусныхБалловВВалюте <> 0) Тогда
			
			ТекстоваяСтрокаДляПечатиНаККТ = ТекстоваяСтрокаДляПечатиНаККТ + Символы.ПС + СтрШаблон(
				НСтр("ru = 'Начислено бонусных баллов: %1 %2'"),
				НачисленоБонусныхБалловВВалюте,
				Объект.Валюта);
			
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекстоваяСтрокаДляПечатиНаККТ) Тогда
			
			МенеджерОборудованияКлиент.НачатьПечатьТекста(
				Новый ОписаниеОповещения("ПослеЗавершенияПечатиСлипЧека", ЭтотОбъект),
				ЭтотОбъект.УникальныйИдентификатор,
				ТекстоваяСтрокаДляПечатиНаККТ,
				ПараметрыКассыККМ.ИдентификаторУстройства);
			
		КонецЕсли;
		
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит");
		
		ДанныеДляЖурналаРегистрации = Новый Структура;
		ДанныеДляЖурналаРегистрации.Вставить("Дата",   Объект.Дата);
		ДанныеДляЖурналаРегистрации.Вставить("Статус", Объект.Статус);
		
		ПараметрыФискализации = Неопределено;
		Если РезультатВыполнения.Свойство("ВыходныеПараметры")
			И РезультатВыполнения.ВыходныеПараметры.Количество() > 1 Тогда
			
			ДанныеДляЖурналаРегистрации.Вставить("НомерЧекаККМ", РезультатВыполнения.ВыходныеПараметры[1]);

			// Если данные в регистр ФискальныеОперации не были записаны - произошла ошибка при записи.
			Если РезультатВыполнения.ВыходныеПараметры.Количество() > 8 Тогда
				ПараметрыФискализации = РезультатВыполнения.ВыходныеПараметры[8];
			КонецЕсли;
		КонецЕсли;
		
		ВыполненаОперацияНаУстройстве = Истина;
		Модифицированность = Истина;
		
		ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
		ИзмененныеДанныеЗаписаны = ЗаписатьФискальнуюОперациюНаКлиенте(ТребуетсяПовторнаяПопыткаЗаписи, ПараметрыФискализации);
		Если Не ИзмененныеДанныеЗаписаны Тогда
			
			ДополнительныеПараметрыПовторЗаписи = РозничныеПродажиКлиентСервер.СтруктураПовтораЗаписи();
			ДополнительныеПараметрыПовторЗаписи.РеквизитыФискальнойОперацииКассовогоУзла = ПараметрыФискализации;
			ДополнительныеПараметрыПовторЗаписи.ОписаниеОповещения                       = ДополнительныеПараметры.ОписаниеОповещения;
			ДополнительныеПараметрыПовторЗаписи.ТекстСообщения                 = НСтр("ru = 'После пробития чека на ФР не удалось сохранить документ.'");
			ДополнительныеПараметрыПовторЗаписи.ВозвращатьРезультатФункции     = Ложь;
			ДополнительныеПараметрыПовторЗаписи.РезультатПриУспешномПроведении = Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Истина, Истина);
			ДополнительныеПараметрыПовторЗаписи.РезультатПриОтмене             = Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Истина, Ложь);
			ДополнительныеПараметрыПовторЗаписи.ИмяПроцедуры                   = "ЗаписатьФискальнуюОперациюНаСервере";
			ДополнительныеПараметрыПовторЗаписи.РезультатОперации              = ИзмененныеДанныеЗаписаны;
			
			Если Не ТребуетсяПовторнаяПопыткаЗаписи Тогда
				ОшибкаПриПроведенииЧекаВопросЗавершение(КодВозвратаДиалога.Отмена, ДополнительныеПараметрыПовторЗаписи);
				Возврат;
			КонецЕсли;
			
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ОшибкаПриПроведенииЧекаВопросЗавершение", ЭтотОбъект, ДополнительныеПараметрыПовторЗаписи),
				ДополнительныеПараметрыПовторЗаписи.ТекстСообщения,
				РежимДиалогаВопрос.ПовторитьОтмена, 10, КодВозвратаДиалога.Повторить,,КодВозвратаДиалога.Повторить);
			Возврат;
			
		КонецЕсли;
			
	Иначе
		
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
		                            |Чек не напечатан на фискальном устройстве.
		                            |Дополнительное описание:
		                            |%ДополнительноеОписание%'");
		
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%ДополнительноеОписание%",
			РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(
		ДополнительныеПараметры.ОписаниеОповещения,
		Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны",
			ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны));
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.ВыполненаОперацияНаУстройстве
		И Результат.ИзмененныеДанныеЗаписаны Тогда
		
		ТолькоПросмотр = Истина;
		
		ПодключитьОбработчикОжидания("УстановитьТекущийЭлементНаКнопкуНовыйЧек", 0.1, Истина);
		
	Иначе
		
		Если Результат.ВыполненаОперацияНаУстройстве И Не Результат.ИзмененныеДанныеЗаписаны Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Данные", Объект.Ссылка);
			ПараметрыФормы.Вставить("ДанныеДляЖурналаРегистрации", ДанныеДляЖурналаРегистрации);
			ПараметрыФормы.Вставить("ТекстСообщения",
				НСтр("ru = 'ВНИМАНИЕ! Произошла исключительная ситуация:
				|Чек ККМ пробит, но не зафиксирован в системе.'"));
			
			ОткрытьФорму("Документ.ЧекККМ.Форма.ОшибкаЗаписи", ПараметрыФормы, ЭтотОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуПоДаннымРазбораШтрихкода(СтрокаПозицииЧека, СтрокаДляДобавленияВЧек)
	
	ВидПродукции = Неопределено;
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаДляДобавленияВЧек, "ОсобенностьУчета")
		И ЗначениеЗаполнено(СтрокаДляДобавленияВЧек.ОсобенностьУчета)
		И ЗначениеЗаполнено(СтрокаДляДобавленияВЧек.Штрихкод) Тогда
		ВидПродукции = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(СтрокаДляДобавленияВЧек.ОсобенностьУчета);
	КонецЕсли;
	
	Если Не (ЗначениеЗаполнено(ВидПродукции) И ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ВидПродукции, Истина)) Тогда
		Возврат;
	КонецЕсли;
	
	ТипМаркировкиККТ = ИнтеграцияИСКлиентСервер.ТипМаркировкиККТПоВидуПродукции(ВидПродукции);
	Если Не ЗначениеЗаполнено(ТипМаркировкиККТ) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(СтрокаДляДобавленияВЧек.Штрихкод, ВидПродукции);
	Если ДанныеРазбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПозицииЧека.Штрихкод                                                              = СтрокаДляДобавленияВЧек.Штрихкод;
	СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ТипМаркировки                          = ТипМаркировкиККТ;
	СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы = ДанныеРазбора.СоставКодаМаркировки.GTIN;
	СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.СерийныйНомер                          = ДанныеРазбора.СоставКодаМаркировки.СерийныйНомер;
	
КонецПроцедуры

#Область ФискальнаяОперация

&НаКлиенте
Функция ЗаписатьФискальнуюОперациюНаКлиенте(ТребуетсяПовторнаяПопыткаЗаписи, ПараметрыФискализации)
	
	Результат = ЗаписатьФискальнуюОперациюНаСервере(ТребуетсяПовторнаяПопыткаЗаписи, ПараметрыФискализации);
	
	Если Результат Тогда
		Оповестить("Запись_ЧекККМ", Новый Структура, Неопределено);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаписатьФискальнуюОперациюНаСервере(ТребуетсяПовторнаяПопыткаЗаписи, ПараметрыФискализации)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Объект.Дата = ТекущаяДатаСеанса();
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить();
		ЭлементБлокировки.Область = "Документ.ЧекККМ";
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Объект.Ссылка);
		
		НужноЗаписатьФискальнуюОперацию = Ложь;
		Если ПараметрыФискализации <> Неопределено Тогда
			Если НЕ ПараметрыФискализации.ОперацияЗаписана Тогда
				НужноЗаписатьФискальнуюОперацию = Истина;
				Если ЗначениеЗаполнено(ПараметрыФискализации.ДокументОснование) Тогда
					ЭлементБлокировки = Блокировка.Добавить();
					ЭлементБлокировки.Область = "РегистрСведений.ФискальныеОперации";
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
					ЭлементБлокировки.УстановитьЗначение("ДокументОснование", ПараметрыФискализации.ДокументОснование);
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
		Блокировка.Заблокировать();
		
		Если НужноЗаписатьФискальнуюОперацию Тогда
			МенеджерОборудованияВызовСервера.ЗаписатьФискальнуюОперацию(ПараметрыФискализации);
		КонецЕсли;
		
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		ПараметрыЗаписи.Вставить("РежимПроведения", РежимПроведенияДокумента.Оперативный);
		ПараметрыЗаписи.Вставить("РежимТранзакции", Истина);
		
		Результат = Записать(ПараметрыЗаписи);
		
		ЗафиксироватьТранзакцию();
		
		ПараметрыЗаписи.Вставить("РежимТранзакции", Ложь);
		ПослеЗаписиНаСервере(РеквизитФормыВЗначение("Объект"), ПараметрыЗаписи);
		
	Исключение
		
		ОтменитьТранзакцию();
		ТребуетсяПовторнаяПопыткаЗаписи = Истина;
		Возврат Ложь;
		
	КонецПопытки;
	
	Если Не Результат Тогда
		
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЧекККМ));
		
		ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПриИзмененииРеквизитов

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьВСтруктуруДействияПриИзмененииКоличестваЕдиниц(СтруктураДействий,Объект)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
КонецФункции

#КонецОбласти

#Область ЦенообразованиеИСкидки

&НаСервере
Процедура НазначитьРучнуюСкидкуНаСервере(СуммаСкидкиНаценки, Знач ВыделенныеСтроки, АдресВоВременномХранилище)
	
	ПараметрыСкидки = Новый Структура();
	ПараметрыСкидки.Вставить("ИспользуютсяАвтоматическиеСкидки", Истина);
	ПараметрыСкидки.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
	ПараметрыСкидки.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	
	СкидкиНаценкиСервер.НазначитьРучнуюСкидку(Объект, "Товары", СуммаСкидкиНаценки, ПараметрыСкидки);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТабличнуюЧастьОплатыПлатежнымиКартамиВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.ОплатаПлатежнымиКартами.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура РассчитатьСкидкиБезПримененияКОбъекту()
	
	Объект.Дата = ТекущаяДатаСеанса();
	
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, Ложь);
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПредварительныйРасчетСкидокНаСервере()
	
	Объект.Дата = ТекущаяДатаСеанса();
	
	СтруктураПараметры = Новый Структура;
	
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Истина);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки",                УправляемыеСкидки);
	
	Возврат ПоместитьВоВременноеХранилище(СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры)
	
	Объект.Дата = ТекущаяДатаСеанса();
	
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
	
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
	Модифицированность = Истина;
	
	Возврат СкидкиНаценкиСервер.СтруктураСообщений(Объект);
	
КонецФункции

&НаСервере
Процедура ОтменитьСкидкиНаценкиНаСервере()
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		СтрокаТЧ.СуммаБонусныхБалловКСписанию = 0;
		СтрокаТЧ.СуммаБонусныхБалловКСписаниюВВалюте = 0;
	КонецЦикла;
	
	СкидкиНаценкиСервер.ОтменитьСкидки(Объект, "Товары",,,Истина);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыПримененияСкидокНаценок(Объект, Дата)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ГруппыСкладов = Новый Массив;
	Если ИспользоватьНесколькоСкладов Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Ссылка.Родитель КАК Ссылка
		|ИЗ
		|	Справочник.Склады КАК Т
		|ГДЕ
		|	Т.Ссылка В (&Склад)
		|ИТОГИ ПО
		|	Ссылка ТОЛЬКО ИЕРАРХИЯ
		|");
		Запрос.Параметры.Вставить("Склад", Объект.Склад);
		ГруппыСкладов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокСкидок.СкидкаНаценка КАК СкидкаНаценка,
	|	СписокСкидок.Управляемая КАК Управляемая
	|ПОМЕСТИТЬ СписокСкидок
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Таблица.СкидкаНаценка КАК СкидкаНаценка,
	|		Таблица.СкидкаНаценка.Управляемая КАК Управляемая
	|	ИЗ
	|		РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
	|				&ТекущаяДата,
	|				Источник = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|				//ИспользоватьНесколькоСкладов ИЛИ Источник = &Склад ИЛИ Источник В (&ГруппыСкладов)
	|		) КАК Таблица
	|	ГДЕ
	|		Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|";
	
	Если ИспользоватьНесколькоСкладов Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ИспользоватьНесколькоСкладов", "");
	КонецЕсли;
	
	Если ИспользоватьКартыЛояльности Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.СкидкаНаценка,
		|	Таблица.СкидкаНаценка.Управляемая
		|ИЗ
		|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ТекущаяДата, Источник ССЫЛКА Справочник.ВидыКартЛояльности) КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КартыЛояльности КАК КартыЛояльности
		|		ПО (КартыЛояльности.Владелец = Таблица.Источник)
		|			И (КартыЛояльности.Ссылка = &КартаЛояльности)
		|ГДЕ
		|	КартыЛояльности.Владелец.ДатаНачалаДействия <= &ТекущаяДата
		|	И ВЫБОР
		|			КОГДА КартыЛояльности.Владелец.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ КОНЕЦПЕРИОДА(КартыЛояльности.Владелец.ДатаОкончанияДействия, ДЕНЬ) >= &ТекущаяДата
		|		КОНЕЦ
		|	И Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|) КАК СписокСкидок
	|";
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СписокСкидок.СкидкаНаценка
	|ИЗ
	|	СписокСкидок КАК СписокСкидок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СписокСкидок.СкидкаНаценка
	|ИЗ
	|	СписокСкидок КАК СписокСкидок
	|ГДЕ
	|	СписокСкидок.Управляемая
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления КАК УсловиеПредоставления
	|ИЗ
	|	Справочник.СкидкиНаценки.УсловияПредоставления КАК СкидкиНаценкиУсловияПредоставления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокСкидок КАК СписокСкидок
	|		ПО СкидкиНаценкиУсловияПредоставления.Ссылка = СписокСкидок.СкидкаНаценка
	|ГДЕ
	|	СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления.УсловиеПредоставления = &УсловиеПредоставления
	|";
	
	Если ИспользоватьБонусныеПрограммыЛояльности И ИспользоватьКартыЛояльности Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|;
		|
		|ВЫБРАТЬ
		|	ЕСТЬNULL(КартыЛояльности.Владелец.БонуснаяПрограммаЛояльности.НеНачислятьБаллыПриОплатеБонусами, Ложь) КАК НеНачислятьБаллыПриОплатеБонусами
		|ИЗ
		|	Справочник.КартыЛояльности КАК КартыЛояльности
		|ГДЕ
		|	КартыЛояльности.Ссылка = &КартаЛояльности
		|	И ЕСТЬNULL(КартыЛояльности.Владелец.БонуснаяПрограммаЛояльности.НеНачислятьБаллыПриОплатеБонусами, Ложь) = ИСТИНА
		|";
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.Параметры.Вставить("ТекущаяДата", Дата);
	Запрос.Параметры.Вставить("УсловиеПредоставления", Перечисления.УсловияПредоставленияСкидокНаценок.ЗаФормуОплаты);
	
	Если ИспользоватьНесколькоСкладов Тогда
		Запрос.Параметры.Вставить("Склад",         Объект.Склад);
		Запрос.Параметры.Вставить("ГруппыСкладов", ГруппыСкладов);
	КонецЕсли;
	
	Если ИспользоватьКартыЛояльности Тогда
		Запрос.Параметры.Вставить("КартаЛояльности", Объект.КартаЛояльности);
	КонецЕсли;
	
	Результат = Запрос.ВыполнитьПакет();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НазначеныСкидки",                       Ложь);
	СтруктураПараметров.Вставить("НазначеныУправляемыеСкидки",            Ложь);
	СтруктураПараметров.Вставить("ФормаОплатыВлияетНаРасчетСкидок",       Ложь);
	СтруктураПараметров.Вставить("ОплатаБалламиВлияетНаНачислениеБаллов", Ложь);
	
	СтруктураПараметров.НазначеныСкидки                 = НЕ Результат[1].Пустой();
	СтруктураПараметров.НазначеныУправляемыеСкидки      = НЕ Результат[2].Пустой();
	СтруктураПараметров.ФормаОплатыВлияетНаРасчетСкидок = НЕ Результат[3].Пустой();
	
	Если ИспользоватьБонусныеПрограммыЛояльности И ИспользоватьКартыЛояльности Тогда
		СтруктураПараметров.ОплатаБалламиВлияетНаНачислениеБаллов = НЕ Результат[4].Пустой() И (ЗначениеЗаполнено(Объект.КартаЛояльности));
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Процедура НастроитьАвтоматическиеСкидкиНаценки()
	
	ПараметрыПримененияСкидок = ПараметрыПримененияСкидокНаценок(Объект, Объект.Дата);
	
	Элементы.ТоварыПроцентАвтоматическойСкидки.Видимость = ПараметрыПримененияСкидок.НазначеныСкидки;
	Элементы.ТоварыСуммаАвтоматическойСкидки.Видимость   = ПараметрыПримененияСкидок.НазначеныСкидки;
	
	Элементы.ТоварыКонтекстноеМенюОткрытьИнформациюОСкидках.Видимость = ПараметрыПримененияСкидок.НазначеныСкидки;
	
КонецПроцедуры

&НаСервере
Функция СчитанаКартаЛояльностиНаСервере(КартаЛояльности)
	
	Результат = Истина;
	
	ДанныеКартыЛояльности = КартыЛояльностиВызовСервера.ПолучитьДанныеКартыЛояльности(КартаЛояльности, Ложь);
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Ссылка) Тогда
		
		Объект.КартаЛояльности = КартаЛояльности;
		
		Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Партнер) И ДанныеКартыЛояльности.Партнер <> Объект.Партнер Тогда
			Объект.Партнер = ДанныеКартыЛояльности.Партнер;
		ИначеЕсли Не ЗначениеЗаполнено(ДанныеКартыЛояльности.Партнер) Тогда
			Объект.Партнер = ПредопределенноеЗначение("Справочник.Партнеры.РозничныйПокупатель");
		КонецЕсли;
		
		АнализВозможностиОплатыБонуснымиБаллами(Истина);
		
		НастроитьАвтоматическиеСкидкиНаценки();
		
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СчитанаКартаЛояльности(КартаЛояльности)
	
	Если СчитанаКартаЛояльностиНаСервере(КартаЛояльности) Тогда
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
		
		ОбновитьДанныеИнформационнойПанели(ЭтотОбъект, Истина = ТолькоПросмотр);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидкиЗавершение(ВозвращенноеЗначение, ДополнительныеПараметры) Экспорт 
	
	Если ВозвращенноеЗначение <> Неопределено Тогда
		
		УправляемыеСкидки = ВозвращенноеЗначение;
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту", Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет", Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
		СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
		
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		Элементы.ПоказатьСообщения.Видимость = СтруктураСообщений.Сообщения.Количество() > 0;
		
		ПересчитатьДокументНаКлиенте();
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Скидки (наценки)'"),
			,
			НСтр("ru = 'Скидки (наценки) рассчитаны'"),
			БиблиотекаКартинок.Информация32);
		
		Если СтруктураСообщений.Сообщения.Количество() > 0 
			И СтруктураСообщений.АвтоматическиОткрывать Тогда
			
			ОткрытьФорму(
				"ОбщаяФорма.СообщенияСкидокНаценок",
				СтруктураСообщений,
				ЭтотОбъект,
				УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Результат = РезультатВопроса;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту", Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет", Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
		СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
		
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		Элементы.ПоказатьСообщения.Видимость = СтруктураСообщений.Сообщения.Количество() > 0;
		
		ПересчитатьДокументНаКлиенте();
		
		Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
			ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтотОбъект, УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	ОткрытьИнформациюОСкидкахФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахФрагмент()
	
	Перем ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
		РассчитатьСкидкиБезПримененияКОбъекту();
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры) Экспорт 
	
	АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		Модифицированность = Истина;
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Элементы.Товары.ВыделенныеСтроки, АдресВоВременномХранилище);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();

КонецПроцедуры

&НаСервере
Функция СтруктураСообщений()
	
	Возврат СкидкиНаценкиСервер.СтруктураСообщений(Объект);
	
КонецФункции

&НаСервере
Процедура ПолученыСообщения(Сообщения)
	
	СкидкиНаценкиСервер.СохранитьОтработанныеСообщения(Объект, Сообщения);
	
	СтруктураСообщений = СкидкиНаценкиСервер.СтруктураСообщений(Объект);
	Элементы.ПоказатьСообщения.Видимость = СтруктураСообщений.Сообщения.Количество() > 0;
	
КонецПроцедуры

&НаСервере
Функция АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ТолькоВыделенныеСтроки)
	
	Возврат СкидкиНаценкиСервер.АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ЭтотОбъект, "Товары", УникальныйИдентификатор, ТолькоВыделенныеСтроки, "Товары");
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуНазначенияРучныхСкидок()
	
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Истина);
	
	Оповещение = Новый ОписаниеОповещения(
		"НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение", 
		ЭтотОбъект, 
		Новый Структура("АдресВоВременномХранилище", АдресВоВременномХранилище));
	
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
		АдресВоВременномХранилище,
		Объект.Валюта,
		Оповещение);
	
КонецПроцедуры

&НаСервере
Функция АдресТабличнойЧастиТоварыДляАнализаВозможностиОплатыПодарочнымиСертификатами()
	
	ТабличнаяЧастьТовары = Объект.Товары.Выгрузить(,"Номенклатура, Характеристика, Сумма");
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТабличнаяЧастьТовары, УникальныйИдентификатор);
	
	Возврат АдресВоВременномХранилище;
	
КонецФункции

&НаСервере
Функция АдресТабличнойЧастьПодарочныеСертификаты()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.ПодарочныеСертификаты.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьТабличнуюЧастьПодарочныеСертификатыИзХранилища(АдресВХранилище)
	
	Объект.ПодарочныеСертификаты.Загрузить(ПолучитьИзВременногоХранилища(АдресВХранилище));
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьОплатуБонуснымиБаллами(АдресВоВременномХранилище)
	
	УдалениеОплаты = Ложь;
	Если АдресВоВременномХранилище <> Неопределено Тогда
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	Иначе
		ТаблицаТоваров = Объект.Товары;
		УдалениеОплаты = Истина;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		Если УдалениеОплаты Тогда
			СтрокаТЧ = СтрокаТаблицы;
			СтрокаТЧ.СуммаБонусныхБалловКСписанию        = 0;
			СтрокаТЧ.СуммаБонусныхБалловКСписаниюВВалюте = 0;
		Иначе
			СтрокаТЧ = Объект.Товары.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаТаблицы.КлючСвязи))[0];
			СтрокаТЧ.СуммаБонусныхБалловКСписанию        = СтрокаТаблицы.СуммаБонусныхБалловКСписанию;
			СтрокаТЧ.СуммаБонусныхБалловКСписаниюВВалюте = СтрокаТаблицы.СуммаБонусныхБалловКСписаниюВВалюте;
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки", Ложь, Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект));
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	РезультатЗаписи = ЗаписатьНаСервере();
	Если НЕ РезультатЗаписи Тогда
		ТекстСообщения = НСтр("ru = 'После изменения оплаты бонусными баллами не удалось сохранить документ.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область БыстрыеТоварыИОбработкаПроверкиКоличества

&НаСервере
Процедура ДобавитьВКорзинуНаСервере(ПараметрыТовара, НовыеСтроки)
	
	Для Каждого СтрокаТовара Из НовыеСтроки Цикл
		
		Если СтрокаТовара.Упаковка.Пустая() Тогда
			СтрокаТовара.Упаковка = ПодборТоваровВызовСервера.ПолучитьУпаковкуХранения(СтрокаТовара.Номенклатура);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТовара.Цена) И ПараметрыТовара.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Набор Тогда
			СтрокаТовара.Цена = ПолучитьЦенуПоОтбору(СтрокаТовара.Номенклатура, СтрокаТовара.Характеристика, СтрокаТовара.Упаковка);
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("НоменклатураНабора",   СтрокаТовара.НоменклатураНабора);
		Отбор.Вставить("ХарактеристикаНабора", СтрокаТовара.ХарактеристикаНабора);
		Отбор.Вставить("Номенклатура",   СтрокаТовара.Номенклатура);
		Отбор.Вставить("Характеристика", СтрокаТовара.Характеристика);
		Отбор.Вставить("Упаковка",       СтрокаТовара.Упаковка);
		Отбор.Вставить("Цена",           СтрокаТовара.Цена);
		Отбор.Вставить("Помещение",      СтрокаТовара.Помещение);
		
		РезультатПоиска = Объект.Товары.НайтиСтроки(Отбор);
		
		Если РезультатПоиска.Количество() = 0 ИЛИ СтрокаТовара.Погрешность <> 0 Тогда
			
			ТекущаяСтрока = Объект.Товары.Добавить();
			
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ПараметрыТовара);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
			ТекущаяСтрока.ИндексНабора = ?(ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора), 1, 0);
			
			СтруктураДействий = Новый Структура;
			
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
			СтруктураДействий.Вставить("ЗаполнитьПомещение", Новый Структура("Склад", Объект.Склад));
			СтруктураДействий.Вставить("ЗаполнитьПродавца", Новый Структура("Продавец", ТекущийПродавец));
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",
				Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомПогрешностиОкругления", СтрокаТовара.Погрешность);
			Если КонтролироватьАссортимент Тогда
				ДобавитьПроверкуАссортиментаВСтруктуруДействий(СтруктураДействий);
			КонецЕсли;
			
			ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
			ОбработкаТабличнойЧастиКлиентСерверЛокализация.ДополнитьСтруктуруДействийПриИзмененииЭлемента(ЭтотОбъект, "Номенклатура", СтруктураДействий);
			
		Иначе
			
			ТекущаяСтрока = РезультатПоиска[0];
			
			ТекущаяСтрока.КоличествоУпаковок = СтрокаТовара.КоличествоУпаковок + ТекущаяСтрока.КоличествоУпаковок;
			
			СтруктураДействий = Новый Структура;
			ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
			Если КонтролироватьАссортимент Тогда
				ДобавитьПроверкуАссортиментаВСтруктуруДействий(СтруктураДействий);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекущаяСтрока <> Неопределено Тогда
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	Если НовыеСтроки.Количество() Тогда
		ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
		СобытияФорм.ПриИзмененииЭлемента(ЭтотОбъект, "Товары");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКорзину(ПараметрыТовара)
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	НовыеСтроки = Новый Массив;
	
	Если ЗапрашиватьКоличество Тогда
		
		ПараметрыФормы = Новый Структура("Склад, Номенклатура, Характеристика, ВидЦены, Упаковка, Цена, 
		|Дата, Валюта, РедактироватьЦену, РедактироватьВидЦены");
		
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, ПараметрыТовара);
		
		ПараметрыФормы.Склад = Объект.Склад;
		ПараметрыФормы.Дата = Объект.Дата;
		ПараметрыФормы.Валюта = Объект.Валюта;
		ПараметрыФормы.РедактироватьЦену = Ложь;
		ПараметрыФормы.РедактироватьВидЦены = Ложь;
		ПараметрыФормы.ВидЦены = Объект.ВидЦены;
		
		Если ПараметрыТовара.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор") Тогда
			ИмяФормыЗапросаКоличества = "Документ.ЧекККМ.Форма.ЗапросКоличестваНабор";
		Иначе
			ИмяФормыЗапросаКоличества = "Документ.ЧекККМ.Форма.ЗапросКоличества";
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("НовыеСтроки", НовыеСтроки);
		ДополнительныеПараметры.Вставить("ПараметрыТовара", ПараметрыТовара);
		ОткрытьФорму(
			ИмяФормыЗапросаКоличества,
			ПараметрыФормы,
			ЭтотОбъект,
			УникальныйИдентификатор,,,
			Новый ОписаниеОповещения("ЗапросКоличестваЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		
	Иначе
		
		Если ПараметрыТовара.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор") Тогда
			
			ПараметрыКомплектующих = ПодборТоваровКлиентСервер.ПараметрыТовара();
			ЗаполнитьЗначенияСвойств(ПараметрыКомплектующих, ПараметрыТовара);
			ПараметрыКомплектующих.НоменклатураНабора   = ПараметрыТовара.Номенклатура;
			ПараметрыКомплектующих.ХарактеристикаНабора = ПараметрыТовара.Характеристика;
			ПараметрыКомплектующих.Вставить("ВариантКомплектацииНоменклатуры", Неопределено);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Дата",    Объект.Дата);
			ДополнительныеПараметры.Вставить("Валюта",  Объект.Валюта);
			ДополнительныеПараметры.Вставить("ВидЦены", Объект.ВидЦены);
			ДополнительныеПараметры.Вставить("Цена",    ПараметрыТовара.Цена);
			ПодобранныеТовары = НаборыВызовСервера.Комплектующие(ПараметрыКомплектующих, ДополнительныеПараметры);
			
			Для Каждого ПодобранныйТовар Из ПодобранныеТовары Цикл
				НовыеСтроки.Добавить(ПодобранныйТовар);
			КонецЦикла;
			
		Иначе
			
			Если Не ЗначениеЗаполнено(ПараметрыТовара.Упаковка) Тогда
				ПараметрыТовара.Упаковка = ПодборТоваровВызовСервера.ПолучитьУпаковкуХранения(ПараметрыТовара.Номенклатура);	
			КонецЕсли;
			
			НовыеСтроки.Добавить(ПараметрыТовара);
			
		КонецЕсли;
		
		ПараметрыДанных = Новый Структура;
		ПараметрыДанных.Вставить("НовыеСтроки", НовыеСтроки);
		ПараметрыДанных.Вставить("ПараметрыТовара", ПараметрыТовара);
		
		ДобавитьВКорзинуФрагмент(ПараметрыДанных);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКорзинуФрагмент(ПараметрыДанных)
	
	НовыеСтроки = ПараметрыДанных.НовыеСтроки;
	ПараметрыТовара = ПараметрыДанных.ПараметрыТовара;
	
	ДобавитьВКорзинуНаСервере(ПараметрыТовара, НовыеСтроки);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	ПересчитатьДокументНаКлиенте();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТабличнуюЧастьТоварыВоВременноеХранилищеДляПроверкиКоличества()
	
	Товары = Объект.Товары.Выгрузить(,"ИдентификаторСтроки, НоменклатураНабора, ХарактеристикаНабора, НоменклатураЕГАИС, Номенклатура, Характеристика, Серия, Помещение, СтатусУказанияСерий, ТипНоменклатуры, ХарактеристикиИспользуются, Упаковка, КоличествоУпаковок, Количество");
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Товары, УникальныйИдентификатор);
	
	Возврат АдресВоВременномХранилище;
	
КонецФункции

&НаСервере
Процедура ИзменитьТабличнуюЧастьПоРезультатамПроверки(ВозвращаемыеПараметры, КэшированныеЗначения)
	
	ТаблицаТовары = ПолучитьИзВременногоХранилища(ВозвращаемыеПараметры.Товары);
	
	УдаляемыеСтроки              = Новый Массив;
	
	Для Каждого СтрокаИсточник Из ТаблицаТовары Цикл
		
		Отбор = Новый Структура("НоменклатураНабора, ХарактеристикаНабора, Номенклатура, Характеристика, Серия, ХарактеристикиИспользуются, Упаковка");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаИсточник);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл

			Если СтрокаИсточник.КоличествоУпаковок = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаТЧ.КоличествоУпаковок = 0
				И СтрокаИсточник.КоличествоУпаковок < 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаИсточник.КоличествоУпаковок >= 0 Тогда
				
				СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок + СтрокаИсточник.КоличествоУпаковок;
				СтрокаИсточник.КоличествоУпаковок = 0;
				
			Иначе
				
				КоличествоКСписанию = -СтрокаИсточник.КоличествоУпаковок;
				КоличествоВСтроке   = СтрокаТЧ.КоличествоУпаковок;
				
				Если КоличествоКСписанию > КоличествоВСтроке Тогда
					СтрокаИсточник.КоличествоУпаковок = КоличествоВСтроке - КоличествоКСписанию;
					СтрокаТЧ.КоличествоУпаковок = 0;
				Иначе
					СтрокаИсточник.КоличествоУпаковок = 0;
					СтрокаТЧ.КоличествоУпаковок = КоличествоВСтроке - КоличествоКСписанию;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаТЧ.КоличествоУпаковок = 0 Тогда
				
				Если УдаляемыеСтроки.Найти(СтрокаТЧ) = Неопределено Тогда
					УдаляемыеСтроки.Добавить(СтрокаТЧ);
				КонецЕсли;

			Иначе
				
				СтруктураДействий = Новый Структура;
				ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			СтрокаТЧ = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаИсточник);
			
			Если СтрокаТЧ.Упаковка.Пустая() Тогда
				СтрокаТЧ.Упаковка = ПодборТоваровВызовСервера.ПолучитьУпаковкуХранения(СтрокаТЧ.Номенклатура);
			КонецЕсли;
			
			СтруктураДействий = Новый Структура;
			
			Если КонтролироватьАссортимент Тогда
				ДобавитьПроверкуАссортиментаВСтруктуруДействий(СтруктураДействий);
				СтруктураДействий.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
			Иначе
				СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
			КонецЕсли;
			СтруктураДействий.Вставить("ЗаполнитьПомещение", Новый Структура("Склад", Объект.Склад));
			СтруктураДействий.Вставить("ЗаполнитьПродавца",  Новый Структура("Продавец", ТекущийПродавец));
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
			
			ТоварыНоменклатураПриИзмененииСервер(СтрокаТЧ.ПолучитьИдентификатор());
			
			ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);

		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из УдаляемыеСтроки Цикл
		Объект.Товары.Удалить(СтрокаТЧ);
	КонецЦикла;

	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	СобытияФорм.ПриИзмененииЭлемента(ЭтотОбъект, "ЗавершенаПроверкаКоличества", ВозвращаемыеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов, ЗагрузкаИзТСД = Ложь)

	ИзменятьКоличество = Не ТолькоПросмотр;
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	Если КонтролироватьАссортимент Тогда
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПомещение", Новый Структура("Склад", Объект.Склад));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПродавца", Новый Структура("Продавец", ТекущийПродавец));
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками, Объект);
	ОбработкаТабличнойЧастиКлиентСерверЛокализация.ДополнитьСтруктуруДействийПриИзмененииЭлемента(ЭтотОбъект, "Номенклатура", СтруктураДействийСДобавленнымиСтроками);

	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками,Объект);
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий;
	СтруктураДействий.ИзменятьКоличество                     = ИзменятьКоличество;
	СтруктураДействий.РассчитыватьНаборы                     = Истина;
	СтруктураДействий.МаркируемаяПродукцияВТЧ                = УчетМаркируемойПродукции;
	СтруктураДействий.ШтрихкодыВТЧ                           = Истина;
	СтруктураДействий.ЗагрузкаИзТСД                          = ЗагрузкаИзТСД;
	
	Если КонтролироватьАссортимент Тогда
		СтруктураПроверкиАссортимента = АссортиментКлиентСервер.ПараметрыПроверкиАссортимента();
		СтруктураПроверкиАссортимента.Ссылка = Объект.Ссылка;
		СтруктураПроверкиАссортимента.Склад = Объект.Склад;
		СтруктураПроверкиАссортимента.Дата = Объект.Дата;
		СтруктураПроверкиАссортимента.ТекстСообщения = НСтр("ru = 'Товар %1 не включен в ассортимент магазина или запрещен к продаже.'");
		СтруктураПроверкиАссортимента.ИмяРесурсаАссортимента = "РазрешеныПродажи";
		СтруктураПроверкиАссортимента.ПровереноМожноДобавлять = Истина;
		СтруктураПроверкиАссортимента.РазрешатьДобавление = Ложь;
		
		СтруктураДействий.ПараметрыПроверкиАссортимента = СтруктураПроверкиАссортимента;
	КонецЕсли;
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	
	ДанныеДляОбработки = СтруктураДействий;
	Подключаемый_ПослеОбработкиШтрихкодов();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтотОбъект,Объект,СтруктураПараметровДействия,КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСсылкиНаОборудование()
	
	ЭквайринговыеТерминалы.Очистить();
	
	РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЭквайринговыеТерминалы.ЭквайринговыйТерминал КАК Ссылка,
	|	ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования КАК ИспользоватьБезПодключенияОборудования,
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ИЗ
	|	Справочник.НастройкиРМК.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.Ссылка.РабочееМесто = &РабочееМесто
	|	И ((ЭквайринговыеТерминалы.ПодключаемоеОборудование <> ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)
	|		И ЭквайринговыеТерминалы.ПодключаемоеОборудование.РабочееМесто = &РабочееМестоОборудования)
	|		ИЛИ ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования)
	|	И ЭквайринговыеТерминалы.ЭквайринговыйТерминал.БанковскийСчет.Владелец = &Организация
	|");
	
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	Запрос.УстановитьПараметр("Организация",  Объект.Организация);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		Запрос.УстановитьПараметр("РабочееМестоОборудования", РабочееМесто);
	Иначе
		Запрос.УстановитьПараметр("РабочееМестоОборудования", Справочники.РабочиеМеста.ПустаяСсылка());
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЭквайринговыйТерминал = Новый Структура;
		ЭквайринговыйТерминал.Вставить("Ссылка",                                 Выборка.Ссылка);
		ЭквайринговыйТерминал.Вставить("ПодключаемоеОборудование",               Выборка.ПодключаемоеОборудование);
		ЭквайринговыйТерминал.Вставить("ИспользоватьБезПодключенияОборудования", Выборка.ИспользоватьБезПодключенияОборудования);
		
		ЭквайринговыеТерминалы.Добавить(ЭквайринговыйТерминал);
		
	КонецЦикла;
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		Дисплеи.ЗагрузитьЗначения(МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("ДисплейПокупателя"));
	КонецЕсли;
	
	ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(Объект.КассаККМ));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодключенноеОборудование(ПодключитьОборудованиеПриОткрытии = Истина)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("УникальныйИдентификатор",           УникальныйИдентификатор);
	ПараметрыОткрытия.Вставить("ПодключитьОборудованиеПриОткрытии", ПодключитьОборудованиеПриОткрытии);
	ПараметрыОткрытия.Вставить("ПоддерживаемыеТипыПодключаемогоОборудования", ПоддерживаемыеТипыПодключаемогоОборудования);
	
	ОткрытьФорму("Документ.ЧекККМ.Форма.ПодключенноеОборудование", ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодключенноеОборудованиеОбработчикОжидания()
	
	ОткрытьФормуПодключенноеОборудование(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодключениеОборудованиеПоИдентификаторуЗавершение(Данные, СтрокаТЧ) Экспорт

	Если НЕ Данные.Результат Тогда
		
		ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка:
		                            |""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", Данные.ОписаниеОшибки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		СтрокаТЧ.Подключено = 1;
		
	Иначе
		
		СтрокаТЧ.Подключено = 0;
		
		Если СтрокаТЧ.ТипОборудования = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ДисплейПокупателя") Тогда
			ПодключитьОбработчикОжидания("ВывестиИнформациюНаДисплейПокупателя", 0.1, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиИнформациюНаДисплейПокупателя()
	
	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;
	
	Если ВывестиКОплатеНаДисплейПокупателя Тогда
	
		ИнформацияОбОплате = ИнформацияОбОплате(ЭтотОбъект);
		ДПТекст1 = РозничныеПродажиКлиент.ПодготовитьСтрокуКВыводуНаДисплейПокупателя(
			НСтр("ru='К оплате:'"), ИнформацияОбОплате.СуммаКОплате);
		ДПТекст2 = "";
		
	Иначе
		
		КоличествоСтрокВТЧ = Объект.Товары.Количество();
		
		ТекущаяСтрока = Элементы.Товары.ТекущаяСтрока;
		Если ТекущаяСтрока = Неопределено И КоличествоСтрокВТЧ > 0 Тогда
			ТекущиеДанные = Объект.Товары[КоличествоСтрокВТЧ - 1];
			Элементы.Товары.ТекущаяСтрока = ТекущиеДанные.ПолучитьИдентификатор();
		ИначеЕсли ТекущаяСтрока = Неопределено И КоличествоСтрокВТЧ = 0 Тогда
			ТекущиеДанные = Неопределено;
		Иначе
			ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
		КонецЕсли;
		
		ДПТекст1 = НСтр("ru = 'Здравствуйте!'");
		Если ТекущиеДанные <> Неопределено Тогда
			ДПТекст1 = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
					ТекущиеДанные.Номенклатура,
					ТекущиеДанные.Характеристика,
					,
					ТекущиеДанные.Серия);
		КонецЕсли;
		
		ДПТекст2 = РозничныеПродажиКлиент.ПодготовитьСтрокуКВыводуНаДисплейПокупателя(
			НСтр("ru='Итог:'"), СуммаДокумента);
		
	КонецЕсли;
	
	РозничныеПродажиКлиент.ВывестиТекстНаДисплеиПокупателя(
		ЭтотОбъект,
		Дисплеи,
		ДПТекст1 + Символы.ПС + ДПТекст2);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ИсходныеДанные, ДополнительныеПараметры) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования = ШтрихкодированиеИСКлиент.ПараметрыСканирования(ЭтотОбъект);
	
	ШтрихкодКоличество = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ИсходныеДанные, Ложь);
	ШтрихкодированиеИСКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ШтрихкодКоличество);
	
	РезультатОбработки = ОбработатьВводШтрихкода(ШтрихкодКоличество, Неопределено, ПараметрыСканирования);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования);
	ШтрихкодированиеИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
	АктивироватьСтрокуСПозицией(РезультатОбработки);
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьСтрокуСПозицией(Знач РезультатОбработки)
	
	Если РезультатОбработки.ДанныеШтрихкода = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Отбор = Новый Структура;
	Отбор.Вставить("Номенклатура", РезультатОбработки.ДанныеШтрихкода.Номенклатура);
	Отбор.Вставить("Штрихкод", РезультатОбработки.ДанныеШтрихкода.Штрихкод);
	
	МассивСтрок = Объект.Товары.НайтиСтроки(Отбор);
	Если МассивСтрок.Количество() > 0 Тогда
		Элементы.Товары.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	Если МассивСтрок.Количество() = 0 Тогда
		Отбор.Удалить("Штрихкод");
		
		МассивСтрок = Объект.Товары.НайтиСтроки(Отбор);
		Если МассивСтрок.Количество() > 0 Тогда
			Элементы.Товары.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОбработатьВводШтрихкода(ШтрихкодКоличество, КэшированныеЗначения, ПараметрыСканирования = Неопределено)
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ОбработатьВводШтрихкода(
		ЭтотОбъект, ШтрихкодКоличество, КэшированныеЗначения, ПараметрыСканирования);
	
	ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаКлиенте
Функция ОбработкаКодаМаркировкиВыполнитьДействие(ДанныеДляВыполненияДействия, ДополнительныеПараметры) Экспорт
	
	РезультатВыбора             = ДанныеДляВыполненияДействия.РезультатВыбора;
	РезультатОбработкиШтрихкода = ДанныеДляВыполненияДействия.РезультатОбработкиШтрихкода;
	КэшированныеЗначения        = ДанныеДляВыполненияДействия.КэшированныеЗначения;
	ПараметрыСканирования       = ДанныеДляВыполненияДействия.ПараметрыСканирования;
	
	Действие = ДанныеДляВыполненияДействия.Действие;
	РезультатОбработкиШтрихкода = ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(
		ДанныеДляВыполненияДействия.ИсходныеДанные, РезультатОбработкиШтрихкода, ДанныеДляВыполненияДействия.ПараметрыСканирования);
	ШтрихкодированиеИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецФункции

&НаСервере
Функция ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения)
	
	ПараметрыОбработкиВыбора    = ШтрихкодированиеИС.ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ВыполнитьДействие(ЭтотОбъект, Действие, ПараметрыОбработкиВыбора);
	
	ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаКлиенте
Функция ОписаниеОповещенияОбработкиКодаМаркировки()
	
	Возврат Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Функция ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования)
	
	ПараметрыЗавершенияВводаШтрихкода = ШтрихкодированиеИСКлиент.ПараметрыЗавершенияОбработкиШтрихкода();
	ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода  = РезультатОбработки;
	ПараметрыЗавершенияВводаШтрихкода.Форма                        = ЭтотОбъект;
	ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования        = ПараметрыСканирования;
	ПараметрыЗавершенияВводаШтрихкода.ДанныеШтрихкода              = ИсходныеДанные;
	ПараметрыЗавершенияВводаШтрихкода.ОповещениеОбработкиШтрихкода = ОписаниеОповещенияОбработкиКодаМаркировки();
	ПараметрыЗавершенияВводаШтрихкода.ОповещениеВыполнитьДействие  = Новый ОписаниеОповещения("ОбработкаКодаМаркировкиВыполнитьДействие", ЭтотОбъект);
	
	Возврат ПараметрыЗавершенияВводаШтрихкода;
	
КонецФункции

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОткрытьФормуУточненияДанных()
	
	ШтрихкодированиеИСКлиент.Подключаемый_ОткрытьФормуУточненияДанных(ЭтотОбъект, ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеОбработкиШтрихкодов()
	
	ИзменятьКоличество = Не ТолькоПросмотр;
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(ДанныеДляОбработки,КэшированныеЗначения,ЭтотОбъект);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КэшированныеЗначения", КэшированныеЗначения);
	ДополнительныеПараметры.Вставить("ДанныеДляОбработки", ДанныеДляОбработки);
	ДополнительныеПараметры.Вставить("СтандартнаяОбработка", Истина);
	СобытияФормКлиент.ПриИзмененииЭлемента(ЭтотОбъект, "ПослеОбработкиШтрихкодов", ДополнительныеПараметры);
	
	КэшированныеЗначения = ДополнительныеПараметры.КэшированныеЗначения;

	Если Не ДополнительныеПараметры.СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;

	Если ШтрихкодированиеНоменклатурыКлиент.НужноОткрытьФормуУказанияСерийПослеОбработкиШтрихкодов(ДанныеДляОбработки) Тогда
		
		ТекущиеДанныеИдентификатор = ДанныеДляОбработки.МассивСтрокССериями[0];
		Если ТекущиеДанныеИдентификатор <> Неопределено Тогда
			
			ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
			ОткрытьПодборСерий(,ТекущиеДанные);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИзменятьКоличество Тогда
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	КонецЕсли;
	
	Если ДанныеДляОбработки.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = ДанныеДляОбработки.ТекущаяСтрока;
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСтрокиТЧ(ДобавленныеСтроки, ИзмененныеСтроки, КэшированныеЗначения = Неопределено) Экспорт
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	Если КонтролироватьАссортимент Тогда
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПомещение", Новый Структура("Склад", Объект.Склад));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПродавца", Новый Структура("Продавец", ТекущийПродавец));
	СтруктураДействийСДобавленнымиСтроками.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтотОбъект.ИмяФормы, "Товары"));
		
	ОбработкаТабличнойЧастиКлиентСерверЛокализация.ДополнитьСтруктуруДействийПриИзмененииЭлемента(
		ЭтотОбъект, "Номенклатура", СтруктураДействийСДобавленнымиСтроками);
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваЕдиниц(СтруктураДействийСДобавленнымиСтроками, Объект);
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваЕдиниц(СтруктураДействийСИзмененнымиСтроками, Объект);
	
	Для Каждого СтрокаТЧ Из ДобавленныеСтроки Цикл
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействийСДобавленнымиСтроками, КэшированныеЗначения);
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ИзмененныеСтроки Цикл
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействийСИзмененнымиСтроками, КэшированныеЗначения);
		
	КонецЦикла;
	
	ОбновитьДанныеИнформационнойПанели(ЭтотОбъект, Истина = ТолькоПросмотр);
	
	Если ДобавленныеСтроки.Количество() > 0 Тогда
		Элементы.Товары.ТекущаяСтрока = ДобавленныеСтроки[ДобавленныеСтроки.Количество() - 1].ПолучитьИдентификатор();
	ИначеЕсли ИзмененныеСтроки.Количество() > 0 Тогда
		Элементы.Товары.ТекущаяСтрока = ИзмененныеСтроки[ИзмененныеСтроки.Количество() - 1].ПолучитьИдентификатор();
	КонецЕсли;
	
	Если ДобавленныеСтроки.Количество()>0 Или ИзмененныеСтроки.Количество()>0 Тогда
		СобытияФорм.ПриИзмененииЭлемента(ЭтотОбъект, "Товары");
	КонецЕсли;

	
КонецПроцедуры

&НаСервере
Функция ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения)
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	Если КэшированныеЗначения.ПравоРегистрацииШтрихкодовНоменклатурыДоступно = Неопределено Тогда
		ПравоРегистрации = ШтрихкодированиеНоменклатурыСервер.ПравоРегистрацииШтрихкодовНоменклатурыДоступно();
		КэшированныеЗначения.ПравоРегистрацииШтрихкодовНоменклатурыДоступно = ПравоРегистрации;
	КонецЕсли;
	
	Если РезультатОбработкиШтрихкода.ТребуетсяОбработкаШтрихкода Тогда
		
		ЗагрузкаИзТСД = Ложь;
		
		Если ТипЗнч(РезультатОбработкиШтрихкода.ИсходныеДанные) = Тип("Структура") Тогда
			ДанныеШтрихкодов = Новый Массив;
			ДанныеШтрихкодов.Добавить(РезультатОбработкиШтрихкода.ИсходныеДанные);
		Иначе
			ДанныеШтрихкодов = РезультатОбработкиШтрихкода.ИсходныеДанные;
		КонецЕсли;
		
		ИзменятьКоличество = Не ТолькоПросмотр;
		
		СтруктураДействийСДобавленнымиСтроками = Новый Структура;
		Если КонтролироватьАссортимент Тогда
			СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
		Иначе
			СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
		КонецЕсли;
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПомещение", Новый Структура("Склад", Объект.Склад));
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПродавца", Новый Структура("Продавец", ТекущийПродавец));
		
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками, Объект);
		ОбработкаТабличнойЧастиКлиентСерверЛокализация.ДополнитьСтруктуруДействийПриИзмененииЭлемента(
			ЭтотОбъект, "Номенклатура", СтруктураДействийСДобавленнымиСтроками);
		
		СтруктураДействийСИзмененнымиСтроками = Новый Структура;
		
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками,Объект);
		
		ДанныеДляОбработки = ШтрихкодированиеНоменклатурыКлиентСервер.ПараметрыОбработкиШтрихкодов();

		ДанныеДляОбработки.Штрихкоды                              = ДанныеШтрихкодов;
		ДанныеДляОбработки.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
		ДанныеДляОбработки.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
		ДанныеДляОбработки.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий;
		ДанныеДляОбработки.ИзменятьКоличество                     = ИзменятьКоличество;
		ДанныеДляОбработки.РассчитыватьНаборы                     = Истина;
		ДанныеДляОбработки.МаркируемаяПродукцияВТЧ                = УчетМаркируемойПродукции;
		ДанныеДляОбработки.ШтрихкодыВТЧ                           = Истина;
		ДанныеДляОбработки.ЗагрузкаИзТСД                          = ЗагрузкаИзТСД;
		
		Если КонтролироватьАссортимент Тогда
			СтруктураПроверкиАссортимента = АссортиментКлиентСервер.ПараметрыПроверкиАссортимента();
			СтруктураПроверкиАссортимента.Ссылка = Объект.Ссылка;
			СтруктураПроверкиАссортимента.Склад = Объект.Склад;
			СтруктураПроверкиАссортимента.Дата = Объект.Дата;
			СтруктураПроверкиАссортимента.ТекстСообщения = НСтр("ru = 'Товар %1 не включен в ассортимент магазина или запрещен к продаже.'");
			СтруктураПроверкиАссортимента.ИмяРесурсаАссортимента = "РазрешеныПродажи";
			СтруктураПроверкиАссортимента.ПровереноМожноДобавлять = Истина;
			СтруктураПроверкиАссортимента.РазрешатьДобавление = Ложь;
			
			ДанныеДляОбработки.ПараметрыПроверкиАссортимента = СтруктураПроверкиАссортимента;
		КонецЕсли;
		
		ОбработатьШтрихкодыСервер(ДанныеДляОбработки, КэшированныеЗначения);
		
	Иначе
		
		ОбработатьСтрокиТЧ(
			РезультатОбработкиШтрихкода.ДобавленныеСтроки,
			РезультатОбработкиШтрихкода.ИзмененныеСтроки,
			КэшированныеЗначения);
		
	КонецЕсли;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Результат Тогда
		ОбработатьШтрихкоды(Результат.ТаблицаТоваров, Истина);
	Иначе
		МенеджерОборудованияУТКлиент.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВесЗавершение(РезультатВыполнения, ТекущаяСтрока) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ТекущаяСтрока.КоличествоУпаковок = РезультатВыполнения.Вес;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
		
		ПересчитатьДокументНаКлиенте();
	Иначе
		МенеджерОборудованияУТКлиент.СообщитьОбОшибке(РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Серии

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий()
	
	Элементы.ТоварыСтатусУказанияСерий.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.ТоварыСерия.Видимость = ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям;
	Элементы.ТоварыСерияДополнительно.Видимость = ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям;
	
	Элементы.УказатьСерии.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
		Объект, 
		ПараметрыУказанияСерий, 
		ТекущаяСтрокаИдентификатор, 
		КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", ТекущиеДанные = Неопределено, ОповещениеПриЗавершении = Неопределено)
	
	Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтотОбъект,ПараметрыУказанияСерий,Текст, ТекущиеДанные)Тогда
		
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
		Иначе
			ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		КонецЕсли;

		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрыФормыУказанияСерий", ПараметрыФормыУказанияСерий);
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		
		ОткрытьФорму(
			ПараметрыФормыУказанияСерий.ИмяФормы,
			ПараметрыФормыУказанияСерий,
			ЭтотОбъект,,,,
			Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыФормыУказанияСерий = ДополнительныеПараметры.ПараметрыФормыУказанияСерий;
	
	Если Результат <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеПриЗавершении") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтотОбъект);
	
КонецФункции

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект, ПараметрыУказанияСерий, ПараметрыФормыУказанияСерий);
	СобытияФорм.ПриИзмененииЭлемента(ЭтотОбъект, "Серии");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область КомандыРаботыСЧеком

&НаСервере
Функция ЗарезервироватьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи)
	
	РезервированиеВыполнено = Истина;
	
	СтарыйСтатус = Объект.Статус;
	Объект.Статус = Перечисления.СтатусыЧековККМ.ТоварЗарезервирован;
	
	Если ИспользоватьАвтоматическиеСкидкиВПродажах 
		И ПараметрыПримененияСкидок.НазначеныСкидки Тогда
		
		ОтменитьСкидкиНаценкиНаСервере();
		
	КонецЕсли;
	
	Попытка
		
		РезервированиеВыполнено = ЗаписатьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи);
		
		Если Не РезервированиеВыполнено Тогда
			Объект.Статус = СтарыйСтатус;
		КонецЕсли;
		
	Исключение
		
		Объект.Статус = СтарыйСтатус;
		РезервированиеВыполнено = Ложь;
		
	КонецПопытки;
	
	Возврат РезервированиеВыполнено;
	
КонецФункции

&НаКлиенте
Процедура ЗарезервироватьНаКлиенте(РезультатОтложенДо, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(РезультатОтложенДо) Тогда
		Возврат;
	ИначеЕсли РезультатОтложенДо < Объект.Дата Тогда
		ТекстПредупреждения = НСтр("ru = 'Дата резерва должна быть не меньше даты чека %ДатаЧека%'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ДатаЧека%", Объект.Дата);
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Объект.ОтложенДо = РезультатОтложенДо;
	
	ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
	Результат = ЗарезервироватьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи);
	
	Если Не Результат Тогда
		
		ДополнительныеПараметрыПовторЗаписи = РозничныеПродажиКлиентСервер.СтруктураПовтораЗаписи();
		ДополнительныеПараметрыПовторЗаписи.ОписаниеОповещения         = ДополнительныеПараметры.ОповещениеПриЗавершении;
		ДополнительныеПараметрыПовторЗаписи.ТекстСообщения             = НСтр("ru = 'После выполнения операции отмены оплаты не удалось записать документ.'");
		ДополнительныеПараметрыПовторЗаписи.ВозвращатьРезультатФункции = Истина;
		ДополнительныеПараметрыПовторЗаписи.ИмяПроцедуры               = "ЗарезервироватьНаСервере";
		ДополнительныеПараметрыПовторЗаписи.РезультатОперации          = Результат;
		
		Если Не ТребуетсяПовторнаяПопыткаЗаписи Тогда
			ОшибкаПриПроведенииЧекаВопросЗавершение(КодВозвратаДиалога.Отмена, ДополнительныеПараметрыПовторЗаписи);
			Возврат;
		КонецЕсли;
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ОшибкаПриПроведенииЧекаВопросЗавершение", ЭтотОбъект, ДополнительныеПараметрыПовторЗаписи),
			ДополнительныеПараметрыПовторЗаписи.ТекстСообщения,
			РежимДиалогаВопрос.ПовторитьОтмена, 10, КодВозвратаДиалога.Повторить,,КодВозвратаДиалога.Повторить);
		Возврат;
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОтложитьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи)
	
	ОтложитьВыполнено = Истина;
	
	СтарыйСтатус = Объект.Статус;
	Объект.Статус = Перечисления.СтатусыЧековККМ.Отложен;
	
	Если ИспользоватьАвтоматическиеСкидкиВПродажах 
		И ПараметрыПримененияСкидок.НазначеныСкидки Тогда
		
		ОтменитьСкидкиНаценкиНаСервере();
		
	КонецЕсли;
	
	Попытка
		
		ОтложитьВыполнено = ЗаписатьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи);
		
		Если Не ОтложитьВыполнено Тогда
			Объект.Статус = СтарыйСтатус;
		КонецЕсли;
		
	Исключение
		
		Объект.Статус = СтарыйСтатус;
		ОтложитьВыполнено = Ложь;
		
	КонецПопытки;
	
	Возврат ОтложитьВыполнено;
	
КонецФункции

&НаКлиенте
Процедура ОтложитьНаКлиенте(ОповещениеПриЗавершении)
	
	Объект.ОтложенДо = Дата(1,1,1);
	Модифицированность = Истина;
	
	ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
	Результат = ОтложитьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи);
	
	Если Не Результат Тогда
		
		ДополнительныеПараметрыПопытка = РозничныеПродажиКлиентСервер.СтруктураПовтораЗаписи();
		ДополнительныеПараметрыПопытка.ОписаниеОповещения         = ОповещениеПриЗавершении;
		ДополнительныеПараметрыПопытка.ТекстСообщения             = НСтр("ru = 'После выполнения операции отмены оплаты не удалось записать документ.'");
		ДополнительныеПараметрыПопытка.ВозвращатьРезультатФункции = Истина;
		ДополнительныеПараметрыПопытка.ИмяПроцедуры               = "ОтложитьНаСервере";
		ДополнительныеПараметрыПопытка.РезультатОперации          = Результат;
		
		Если Не ТребуетсяПовторнаяПопыткаЗаписи Тогда
			ОшибкаПриПроведенииЧекаВопросЗавершение(КодВозвратаДиалога.Отмена, ДополнительныеПараметрыПопытка);
			Возврат;
		КонецЕсли;
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ОшибкаПриПроведенииЧекаВопросЗавершение", ЭтотОбъект, ДополнительныеПараметрыПопытка),
			ДополнительныеПараметрыПопытка.ТекстСообщения,
			РежимДиалогаВопрос.ПовторитьОтмена, 10, КодВозвратаДиалога.Повторить,,КодВозвратаДиалога.Повторить);
		Возврат;
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьЧастьРасчетаНаСервере(ВозвращенноеЗначениеУправляемыеСкидки, ТребуетсяПовторнаяПопыткаЗаписи)

	Результат = Истина;
	СтруктураСообщений = Неопределено;
	
	Если Не КонтрольНаСкладеОтключен Тогда
		
		ТоварЗарезервирован = ЗарезервироватьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи);
		Если Не ТоварЗарезервирован Тогда
			Результат = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Результат
		И ИспользоватьАвтоматическиеСкидкиВПродажах
		И ПараметрыПримененияСкидок.НазначеныСкидки Тогда
		
		Если ПараметрыПримененияСкидок.НазначеныУправляемыеСкидки Тогда
			
			УправляемыеСкидки = ВозвращенноеЗначениеУправляемыеСкидки;
			
			СтруктураПараметры = Новый Структура;
			СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
			СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
			СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
			СтруктураПараметры.Вставить("УправляемыеСкидки",                УправляемыеСкидки);
			
		Иначе
			
			СтруктураПараметры = Новый Структура;
			СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
			СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
			СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
			СтруктураПараметры.Вставить("УправляемыеСкидки",                Неопределено);
			
		КонецЕсли;
		
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			Для Каждого СтрокаТЧ Из Объект.Товары Цикл
				Если СтрокаТЧ.Сумма = 0 И СтрокаТЧ.Цена * СтрокаТЧ.КоличествоУпаковок > 0  Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не корректно настроены скидки (наценки). После расчета скидок (наценок) сумма в строке %1 равна нулю.'"), СтрокаТЧ.НомерСтроки), Объект.Ссылка, "Объект.Товары");
					Результат = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			Если Не Результат Тогда
				ОтменитьСкидкиНаценкиНаСервере();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат Новый Структура("РасчетВыполненУспешно, СтруктураСообщений", Результат, СтруктураСообщений);
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()
	
	Элементы.ВозвратТовара.Доступность     = ПраваДоступа.ВозвратТовара;
	
	Элементы.Товары.ИзменятьСоставСтрок    = ПраваДоступа.КорректировкаСтрок;
	
	Элементы.КонтекстноеМенюОбластьКорзиныТоварыДобавить.Доступность    = ПраваДоступа.КорректировкаСтрок;
	Элементы.КонтекстноеМенюОбластьКорзиныТоварыСкопировать.Доступность = ПраваДоступа.КорректировкаСтрок;
	
	Элементы.ТоварыКоличествоУпаковок.ТолькоПросмотр = Не ПраваДоступа.КорректировкаСтрок;
	Элементы.ТоварыНоменклатура.ТолькоПросмотр       = Не ПраваДоступа.КорректировкаСтрок;
	Элементы.ТоварыШтрихкод.ТолькоПросмотр           = Не ПраваДоступа.КорректировкаСтрок;
	Элементы.ТоварыХарактеристика.ТолькоПросмотр     = Не ПраваДоступа.КорректировкаСтрок;
	Элементы.ТоварыПродавец.ТолькоПросмотр           = Не ПраваДоступа.КорректировкаСтрок;
	
	СобытияФормКлиент.ПриИзмененииЭлемента(ЭтотОбъект, "ПраваДоступа");
	
	ОбновитьДанныеИнформационнойПанели(ЭтотОбъект, Истина = ТолькоПросмотр);
	
	ПодключитьОбработчикОжидания("ВывестиИнформациюНаДисплейПокупателя", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура НовыйЧекНаСервере(Ссылка = Неопределено)
	
	Если Ссылка = Неопределено Тогда
		НовыйЧек = Документы.ЧекККМ.СоздатьДокумент();
		НовыйЧек.Партнер = Справочники.Партнеры.РозничныйПокупатель;
		НовыйЧек.ОбработкаЗаполнения(Новый Структура("КассаККМ", Объект.КассаККМ), Истина);
	Иначе
		НовыйЧек = Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	НовыйЧек.Дата = ТекущаяДатаСеанса();
	РазблокироватьДанныеФормыДляРедактирования();
	
	Кассир = ?(ЗначениеЗаполнено(Объект.Кассир), Объект.Кассир, НовыйЧек.Кассир);
	
	ЗначениеВДанныеФормы(НовыйЧек, Объект);
	
	Объект.Кассир = Кассир;
	
	ТолькоПросмотр = Ложь;
	Модифицированность = Ложь;
	ВывестиКОплатеНаДисплейПокупателя = Ложь;
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЧекККМ));
	
	ПриСозданииЧека();
	
КонецПроцедуры

#КонецОбласти

#Область Оплата

&НаКлиентеНаСервереБезКонтекста
Функция ДоступныеВидыОплаты(Форма)
	
	ОплатаПлатежнымиКартами = Ложь;
	Если Форма.ИспользоватьОплатуПлатежнымиКартами
		И Форма.ЭквайринговыеТерминалы.Количество() > 0 Тогда
		
		ОплатаПлатежнымиКартами = Истина;
		
	КонецЕсли;
	
	ОплатаБонуснымиБаллами = Ложь;
	Если Форма.ИспользоватьБонусныеПрограммыЛояльности И ЗначениеЗаполнено(Форма.Объект.КартаЛояльности) Тогда
		
		ОплатаБонуснымиБаллами = Истина;
		
	КонецЕсли;
	
	ДоступныеВидыОплаты = Новый Структура;
	ДоступныеВидыОплаты.Вставить("Наличные",              Истина);
	ДоступныеВидыОплаты.Вставить("ПлатежныеКарты",        ОплатаПлатежнымиКартами);
	ДоступныеВидыОплаты.Вставить("БонусныеБаллы",         ОплатаБонуснымиБаллами);
	ДоступныеВидыОплаты.Вставить("ПодарочныеСертификаты", Форма.ИспользоватьПодарочныеСертификаты);
	
	Возврат ДоступныеВидыОплаты;
	
КонецФункции


&НаКлиенте
Процедура ОплатитьНаличнымиОбработкаОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьСостояниеКассовойСмены();
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ОповещениеОЗавершении", Новый ОписаниеОповещения("ОплатитьНаличнымиЗавершениеРасчета", ЭтотОбъект));
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ВыбраннаяФормаОплаты") Тогда
		ПараметрыРасчета.Вставить("ВыбраннаяФормаОплаты", ДополнительныеПараметры.ВыбраннаяФормаОплаты);
	КонецЕсли;
	
	ВыполнитьРасчет(ПараметрыРасчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьНаличнымиЗавершениеРасчета(Результат, ДополнительныеПараметры) Экспорт
	
	// ВыбраннаяФормаОплата или Булево
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьДействиеПослеЗаписи(
		Новый ОписаниеОповещения("ОткрытьФормуОплатыНаличными", ЭтотОбъект),
		НСтр("ru = 'Перед открытием формы оплаты не удалось записать документ.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОплатыНаличными(ИзмененныеДанныеЗаписаны, ДополнительныеПараметры) Экспорт
	
	Если Не ИзмененныеДанныеЗаписаны Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ИнформацияОбОплате",     ИнформацияОбОплате(ЭтотОбъект));
	ПараметрыОткрытияФормы.Вставить("Партнер",                Объект.Партнер);
	ПараметрыОткрытияФормы.Вставить("ДоступнаПередачаДанных", ПараметрыКассыККМ.ДоступнаПередачаДанных);
	
	ОткрытьФорму(
		"Документ.ЧекККМ.Форма.ФормаОплатыНаличными",
		ПараметрыОткрытияФормы,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ЗавершениеОплаты", ЭтотОбъект));
	
КонецПроцедуры


&НаКлиенте
Процедура СмешаннаяОплатаОбработкаОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьСостояниеКассовойСмены();
	
	ВывестиКОплатеНаДисплейПокупателя = Истина;
	ПодключитьОбработчикОжидания("ВывестиИнформациюНаДисплейПокупателя", 0.1, Истина);
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ОповещениеОЗавершении", Новый ОписаниеОповещения("СмешаннаяОплатаЗавершениеРасчета", ЭтотОбъект));
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ВыбраннаяФормаОплаты") Тогда
		ПараметрыРасчета.Вставить("ВыбраннаяФормаОплаты", ДополнительныеПараметры.ВыбраннаяФормаОплаты);
		ОбновитьДаннныеОФормеОплаты(ЭтотОбъект, ДополнительныеПараметры.ВыбраннаяФормаОплаты);
	КонецЕсли;
	
	ВыполнитьРасчет(ПараметрыРасчета);
	
КонецПроцедуры

&НаКлиенте
Процедура СмешаннаяОплатаЗавершениеРасчета(Результат, ДополнительныеПараметры) Экспорт
	
	// ВыбраннаяФормаОплата или Булево
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьДействиеПослеЗаписи(
		Новый ОписаниеОповещения("ОткрытьФормуСмешаннойОплаты", ЭтотОбъект, Результат),
		НСтр("ru = 'Перед открытием формы оплаты не удалось записать документ.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСмешаннойОплаты(ИзмененныеДанныеЗаписаны, ДоступныеВидыОплаты) Экспорт
	
	Если Не ИзмененныеДанныеЗаписаны Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиКОплатеНаДисплейПокупателя = Истина;
	ПодключитьОбработчикОжидания("ВывестиИнформациюНаДисплейПокупателя", 0.1, Истина);
	
	ДанныеОбОплате = Новый Массив;
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ИнформацияОбОплате",     ИнформацияОбОплате(ЭтотОбъект));
	ПараметрыОткрытияФормы.Вставить("Партнер",                Объект.Партнер);
	ПараметрыОткрытияФормы.Вставить("ДоступнаПередачаДанных", ПараметрыКассыККМ.ДоступнаПередачаДанных);
	Если ДоступныеВидыОплаты <> Неопределено Тогда
		ПараметрыОткрытияФормы.ИнформацияОбОплате.ДоступныеВидыОплаты = ДоступныеВидыОплаты;
	КонецЕсли;
	
	ОткрытьФорму(
		"Документ.ЧекККМ.Форма.ФормаСмешаннойОплаты",
		ПараметрыОткрытияФормы,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ЗавершениеОплаты", ЭтотОбъект));
	
КонецПроцедуры


&НаКлиенте
Процедура ОплатитьПлатежнойКартойОбработкаОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьСостояниеКассовойСмены();
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ОповещениеОЗавершении", Новый ОписаниеОповещения("ОплатитьПлатежнойКартойЗавершениеРасчета", ЭтотОбъект));
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ВыбраннаяФормаОплаты") Тогда
		ПараметрыРасчета.Вставить("ВыбраннаяФормаОплаты", ДополнительныеПараметры.ВыбраннаяФормаОплаты);
	КонецЕсли;
	
	ВыполнитьРасчет(ПараметрыРасчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьПлатежнойКартойЗавершениеРасчета(Результат, ДополнительныеПараметры) Экспорт
	
	// ВыбраннаяФормаОплата или Булево
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьДействиеПослеЗаписи(
		Новый ОписаниеОповещения("ДобавитьОплатуКартой", ЭтотОбъект),
		НСтр("ru = 'Перед открытием формы оплаты не удалось записать документ.'"));
	
КонецПроцедуры


&НаСервере
Процедура АнализВозможностиОплатыБонуснымиБаллами(НастроитьРМК = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КартыЛояльности.Владелец.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности
	|ИЗ
	|	Справочник.КартыЛояльности КАК КартыЛояльности
	|ГДЕ
	|	КартыЛояльности.Ссылка = &КартаЛояльности";
	
	Запрос.УстановитьПараметр("КартаЛояльности", Объект.КартаЛояльности);
	
	БонуснаяПрограммаЗаполнена = Ложь;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		БонуснаяПрограммаЗаполнена = ЗначениеЗаполнено(Выборка.БонуснаяПрограммаЛояльности);
	КонецЕсли;
	
	ИспользоватьБонусныеПрограммыЛояльности = ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммыЛояльности") И БонуснаяПрограммаЗаполнена;
	
	Если НастроитьРМК Тогда
		НастроитьРМК();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьБонуснымиБалламиОбработкаОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьДействиеПослеЗаписи(
		Новый ОписаниеОповещения("ДобавитьОплатуБонуснымиБаллами", ЭтотОбъект),
		НСтр("ru = 'Перед открытием формы оплаты не удалось записать документ.'"));
	
КонецПроцедуры

// Вызывается из формы сложной оплаты
&НаКлиенте
Процедура ДобавитьОплатуБонуснымиБаллами(ИзмененныеДанныеЗаписаны, ПараметрыЗавершения) Экспорт
	
	Если Не ИзмененныеДанныеЗаписаны Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗавершения <> Неопределено Тогда
		Объект.ПолученоНаличными = ПараметрыЗавершения.ПолученоНаличными;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Партнер",                   Объект.Партнер);
	ПараметрыОткрытияФормы.Вставить("КартаЛояльности",           Объект.КартаЛояльности);
	ПараметрыОткрытияФормы.Вставить("АдресТабличнойЧастиТовары", АдресТабличнойЧастиТовары());
	ПараметрыОткрытияФормы.Вставить("Валюта",                    Объект.Валюта);
	
	ОткрытьФорму(
		"Справочник.БонусныеПрограммыЛояльности.Форма.ОплатаБонуснымиБаллами",
		ПараметрыОткрытияФормы,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ДобавитьОплатуБонуснымиБалламиЗавершение", ЭтотОбъект, ПараметрыЗавершения));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОплатуБонуснымиБалламиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		ОбработатьДобавлениеОплаты(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	ПрименитьОплатуБонуснымиБаллами(Результат.АдресВоВременномХранилище);
	
	ОбработатьДобавлениеОплаты(ДополнительныеПараметры);
	
КонецПроцедуры


&НаКлиенте
Процедура ОплатитьПодарочнымСертификатомОбработкаОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ОповещениеОЗавершении", Новый ОписаниеОповещения("ОплатитьПодарочнымСертификатомЗавершениеРасчета", ЭтотОбъект));
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ВыбраннаяФормаОплаты") Тогда
		ПараметрыРасчета.Вставить("ВыбраннаяФормаОплаты", ДополнительныеПараметры.ВыбраннаяФормаОплаты);
	КонецЕсли;
	
	ВыполнитьРасчет(ПараметрыРасчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьПодарочнымСертификатомЗавершениеРасчета(Результат, ДополнительныеПараметры) Экспорт
	
	// ВыбраннаяФормаОплата или Булево
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьДействиеПослеЗаписи(
		Новый ОписаниеОповещения("ДобавитьОплатуПодарочнымСертификатом", ЭтотОбъект),
		НСтр("ru = 'Перед открытием формы оплаты не удалось записать документ.'"));
	
КонецПроцедуры

// Вызывается из формы сложной оплаты
&НаКлиенте
Процедура ДобавитьОплатуПодарочнымСертификатом(ИзмененныеДанныеЗаписаны, ПараметрыЗавершения) Экспорт
	
	Если Не ИзмененныеДанныеЗаписаны Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗавершения <> Неопределено Тогда
		Объект.ПолученоНаличными = ПараметрыЗавершения.ПолученоНаличными;
	КонецЕсли;
	
	ВывестиКОплатеНаДисплейПокупателя = Истина;
	ПодключитьОбработчикОжидания("ВывестиИнформациюНаДисплейПокупателя", 0.1, Истина);
	
	ИнформацияОбОплате = ИнформацияОбОплате(ЭтотОбъект);
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("АдресВХранилище",       АдресТабличнойЧастьПодарочныеСертификаты());
	ПараметрыОткрытияФормы.Вставить("АдресВХранилищеТовары", АдресТабличнойЧастиТоварыДляАнализаВозможностиОплатыПодарочнымиСертификатами());
	ПараметрыОткрытияФормы.Вставить("Валюта",                Объект.Валюта);
	ПараметрыОткрытияФормы.Вставить("Доплатить",             ИнформацияОбОплате.СуммаКОплате - ИнформацияОбОплате.ИтогоОплачено);

	ОткрытьФорму(
		"Документ.ЧекККМ.Форма.ТабличнаяЧастьПодарочныеСертификаты",
		ПараметрыОткрытияФормы,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ДобавитьОплатуПодарочнымСертификатомЗавершение", ЭтотОбъект, ПараметрыЗавершения),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОплатуПодарочнымСертификатомЗавершение(АдресВХранилище, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(АдресВХранилище) Тогда
		
		ЗагрузитьТабличнуюЧастьПодарочныеСертификатыИзХранилища(АдресВХранилище);
		
	КонецЕсли;
	
	ОбработатьДобавлениеОплаты(ДополнительныеПараметры);
	
КонецПроцедуры


&НаКлиенте
Процедура ЗавершениеОплаты(РезультатОплаты, ДополнительныеПараметры) Экспорт
	Если РезультатОплаты <> Неопределено И РезультатОплаты <> "Отмена" Тогда
		
		Объект.ПолученоНаличными = РезультатОплаты.ПолученоНаличными;
		Объект.Партнер           = РезультатОплаты.ДанныеЭлектронногоЧека.Партнер;
		
		ДанныеФискальнойОперации.ВариантОтправкиЭлектронногоЧека  = РезультатОплаты.ДанныеЭлектронногоЧека.ВариантОтправкиЭлектронногоЧека;
		ДанныеФискальнойОперации.КонтактныеДанныеЭлектронногоЧека = РезультатОплаты.ДанныеЭлектронногоЧека.КонтактныеДанныеЭлектронногоЧека;
		
	ИначеЕсли РезультатОплаты = "Отмена" Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДаннныеОФормеОплаты(ЭтотОбъект, ИнформацияОбОплате(ЭтотОбъект));
	ОбработатьДобавлениеОплаты(ДополнительныеПараметры);
	
КонецПроцедуры

#Область ОплатаСлужебные

&НаКлиентеНаСервереБезКонтекста
Функция ИнформацияОбОплате(Форма)
	
	Форма.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Форма.Объект.Товары, Форма.Объект.ЦенаВключаетНДС);
	
	СуммаСкидки = Форма.Объект.Товары.Итог("СуммаРучнойСкидки")
	            + Форма.Объект.Товары.Итог("СуммаАвтоматическойСкидки");
	СуммаСкидкиБонусныеБаллы = Форма.Объект.Товары.Итог("СуммаБонусныхБалловКСписаниюВВалюте");
	
	Если Форма.Объект.ЦенаВключаетНДС Тогда
		СуммаБезСкидки = Форма.СуммаДокумента + СуммаСкидки + СуммаСкидкиБонусныеБаллы;
	Иначе
		СуммаБезСкидки = Форма.СуммаДокумента - Форма.Объект.Товары.Итог("СуммаНДС") + СуммаСкидки + СуммаСкидкиБонусныеБаллы;
	КонецЕсли;
	
	СуммаКОплате = СуммаБезСкидки - СуммаСкидки;
	
	ИнформацияОбОплате = Новый Структура;
	ИнформацияОбОплате.Вставить("Документ",              Форма.Объект.Ссылка);
	
	ИнформацияОбОплате.Вставить("Наличные",              Форма.Объект.ПолученоНаличными);
	ИнформацияОбОплате.Вставить("ПлатежныеКарты",        Форма.Объект.ОплатаПлатежнымиКартами.Итог("Сумма"));
	ИнформацияОбОплате.Вставить("ПодарочныеСертификаты", Форма.Объект.ПодарочныеСертификаты.Итог("Сумма"));
	ИнформацияОбОплате.Вставить("БонусныеБаллы",         СуммаСкидкиБонусныеБаллы);
	
	ИнформацияОбОплате.Вставить("СуммаДокумента",        Форма.СуммаДокумента);
	ИнформацияОбОплате.Вставить("СуммаБезСкидки",        СуммаБезСкидки);
	ИнформацияОбОплате.Вставить("СуммаКОплате",          СуммаКОплате);
	ИнформацияОбОплате.Вставить("СуммаСкидки",           СуммаСкидки);
	ИнформацияОбОплате.Вставить("ИтогоОплачено",         ИнформацияОбОплате.Наличные + ИнформацияОбОплате.ПлатежныеКарты + ИнформацияОбОплате.ПодарочныеСертификаты + ИнформацияОбОплате.БонусныеБаллы);
	
	ИнформацияОбОплате.Вставить("ДоступныеВидыОплаты", ДоступныеВидыОплаты(Форма));
	
	Возврат ИнформацияОбОплате;
	
КонецФункции

#Область ОплатаПлатежнымиКартами

// Вызывается из формы сложной оплаты
&НаКлиенте
Процедура ДобавитьОплатуКартой(ИзмененныеДанныеЗаписаны, ПараметрыЗавершения) Экспорт
	
	Если Не ИзмененныеДанныеЗаписаны Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗавершения <> Неопределено Тогда
		Объект.ПолученоНаличными = ПараметрыЗавершения.ПолученоНаличными;
	КонецЕсли;
	
	ВывестиКОплатеНаДисплейПокупателя = Истина;
	ПодключитьОбработчикОжидания("ВывестиИнформациюНаДисплейПокупателя", 0.1, Истина);
	
	ИнформацияОбОплате = ИнформацияОбОплате(ЭтотОбъект);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", Новый ОписаниеОповещения("ДобавитьОплатуКартойЗавершение", ЭтотОбъект, ПараметрыЗавершения));
	
	ДополнительныеПараметры.Вставить("Форма",                  ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ЭквайринговыеТерминалы", ЭквайринговыеТерминалы);
	ДополнительныеПараметры.Вставить("ПараметрыКассыККМ",      ПараметрыКассыККМ);
	ДополнительныеПараметры.Вставить("ФормаАвторизации_Сумма",       ИнформацияОбОплате.СуммаКОплате - ИнформацияОбОплате.ИтогоОплачено);
	ДополнительныеПараметры.Вставить("ФормаАвторизации_ПределСуммы", ИнформацияОбОплате.СуммаКОплате - ИнформацияОбОплате.ИтогоОплачено + ИнформацияОбОплате.Наличные);
	ДополнительныеПараметры.Вставить("Валюта",                       Объект.Валюта);
	ДополнительныеПараметры.Вставить("СтруктураЭквайринговыйТерминал");
	ДополнительныеПараметры.Вставить("ИдентификаторУстройстваЭТ");
	
	ВыполнитьДействиеПослеЗаписи(
		Новый ОписаниеОповещения("ДобавитьОплатуКартой", РозничныеПродажиКлиент, ДополнительныеПараметры),
		НСтр("ru = 'Перед оплатой платежной картой не удалось записать документ.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОплатуКартойЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		ОбработатьДобавлениеОплаты(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	// Сохранить в таблице данные оплаты картой
	СтрокаОплатыКартой = Объект.ОплатаПлатежнымиКартами.Добавить();
	
	СтрокаОплатыКартой.ЭквайринговыйТерминал = Результат.ЭквайринговыйТерминал;
	СтрокаОплатыКартой.НомерПлатежнойКарты   = Результат.НомерКарты; // Возможна запись пустого номера карты или номера вида "****************"
	СтрокаОплатыКартой.Сумма                 = Результат.СуммаОперации;
	СтрокаОплатыКартой.СсылочныйНомер        = Результат.СсылочныйНомер;
	СтрокаОплатыКартой.НомерЧекаЭТ           = Результат.НомерЧека;
	СтрокаОплатыКартой.КодАвторизации        = Результат.КодАвторизации;
	
	ДанныеДляЖурналаРегистрации = Новый Структура;
	ДанныеДляЖурналаРегистрации.Вставить("СуммаОперации",  Результат.СуммаОперации);
	ДанныеДляЖурналаРегистрации.Вставить("СсылочныйНомер", Результат.СсылочныйНомер);
	ДанныеДляЖурналаРегистрации.Вставить("НомерКарты",     Результат.НомерКарты);
	ДанныеДляЖурналаРегистрации.Вставить("НомерЧекаЭТ",    Результат.НомерЧека);
	ДанныеДляЖурналаРегистрации.Вставить("КодАвторизации", Результат.КодАвторизации);
	
	Модифицированность = Истина;
	
	ПересчитатьДокументНаКлиенте();
	
	ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
	ИзмененныеДанныеЗаписаны = ЗаписатьНаКлиенте(ТребуетсяПовторнаяПопыткаЗаписи);
	Если Не ИзмененныеДанныеЗаписаны Тогда
		
		ДополнительныеПараметрыЗавершение = РозничныеПродажиКлиентСервер.СтруктураПовтораЗаписи();
		ДополнительныеПараметрыЗавершение.ОписаниеОповещения             = Новый ОписаниеОповещения("ДобавитьОплатуКартойЗаписьЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДополнительныеПараметрыЗавершение.ТекстСообщения                 = НСтр("ru = 'После проведения оплаты платежной картой не удалось сохранить документ.'");
		ДополнительныеПараметрыЗавершение.ВозвращатьРезультатФункции     = Ложь;
		ДополнительныеПараметрыЗавершение.РезультатПриУспешномПроведении = Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Истина, Истина);
		ДополнительныеПараметрыЗавершение.РезультатПриОтмене             = Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Истина, Ложь);
		ДополнительныеПараметрыЗавершение.ИмяПроцедуры                   = "ЗаписатьНаСервере";
		ДополнительныеПараметрыЗавершение.РезультатОперации              = ИзмененныеДанныеЗаписаны;
		
		Если Не ТребуетсяПовторнаяПопыткаЗаписи Тогда
			ОшибкаПриПроведенииЧекаВопросЗавершение(КодВозвратаДиалога.Отмена, ДополнительныеПараметрыЗавершение);
			Возврат;
		КонецЕсли;
	
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ОшибкаПриПроведенииЧекаВопросЗавершение", ЭтотОбъект, ДополнительныеПараметрыЗавершение),
			ДополнительныеПараметрыЗавершение.ТекстСообщения,
			РежимДиалогаВопрос.ПовторитьОтмена, 10, КодВозвратаДиалога.Повторить,,КодВозвратаДиалога.Повторить);
		Возврат;
		
	Иначе
		
		ОбработатьДобавлениеОплаты(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОплатуКартойЗаписьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработатьДобавлениеОплаты(ДополнительныеПараметры);
	
	Если Результат.ВыполненаОперацияНаУстройстве И Не Результат.ИзмененныеДанныеЗаписаны Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Данные", Объект.Ссылка);
		ПараметрыФормы.Вставить("ДанныеДляЖурналаРегистрации", ДанныеДляЖурналаРегистрации);
		ПараметрыФормы.Вставить("ТекстСообщения",
			НСтр("ru = 'ВНИМАНИЕ! Произошла исключительная ситуация:
			|Оплата произведена, но не зафиксирована в системе.'"));
		
		ОткрытьФорму("Документ.ЧекККМ.Форма.ОшибкаЗаписи", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДобавлениеОплаты(ДополнительныеПараметры)
	
	ВывестиКОплатеНаДисплейПокупателя = Ложь;
	ПодключитьОбработчикОжидания("ВывестиИнформациюНаДисплейПокупателя", 0.1, Истина);
	
	ИнформацияОбОплате = ИнформацияОбОплате(ЭтотОбъект);
	
	// Команда оплаты картой вызвана из формы РМК
	Если ДополнительныеПараметры = Неопределено Тогда
		
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит") Тогда
			
			ВывестиКОплатеНаДисплейПокупателя = Истина;
			
			ОбновитьДанныеИнформационнойПанели(ЭтотОбъект, Истина);
			
		Иначе
			
			Если ИнформацияОбОплате.ИтогоОплачено >= ИнформацияОбОплате.СуммаКОплате
				И ЗначениеЗаполнено(ДанныеФискальнойОперации.ВариантОтправкиЭлектронногоЧека) Тогда
				
				ВывестиКОплатеНаДисплейПокупателя = Истина;
				
				ОбновитьДанныеИнформационнойПанели(ЭтотОбъект, Истина);
				
				ПробитьЧек();
				
			ИначеЕсли ИнформацияОбОплате.ИтогоОплачено > 0 Тогда
				
				ВыполнитьДействиеПослеЗаписи(
					Новый ОписаниеОповещения("ОткрытьФормуСмешаннойОплаты", ЭтотОбъект),
					НСтр("ru = 'Перед открытием формы оплаты не удалось записать документ.'"));
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеВФормуОплаты, ИнформацияОбОплате);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтменаОплатыПлатежнымиКартами

&НаКлиенте
Процедура ОтменитьОплатыПлатежнымиКартами(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресВХранилище", ПоместитьТабличнуюЧастьОплатыПлатежнымиКартамиВХранилище());
	
	Если ДополнительныеПараметры.Свойство("ПолученоНаличными") Тогда
		Объект.ПолученоНаличными = ДополнительныеПараметры.ПолученоНаличными;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("Форма",             ЭтотОбъект);
	ДополнительныеПараметры.Вставить("Валюта",            Объект.Валюта);
	ДополнительныеПараметры.Вставить("ПараметрыКассыККМ", ПараметрыКассыККМ);
	ДополнительныеПараметры.Вставить("ТипТранзакции",     "AuthorizeVoid");
	
	ОткрытьФорму(
		"Документ.ЧекККМ.Форма.ТабличнаяЧастьОплатаПлатежнымиКартами",
		ПараметрыФормы,,,,,
		Новый ОписаниеОповещения("ОтменитьОплатыПлатежнымиКартамиВыборСтрокиОплатыЗавершение", РозничныеПродажиКлиент, ДополнительныеПараметры),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатыПлатежнымиКартамиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.ВыполненаОперацияНаУстройстве И Не Результат.ИзмененныеДанныеЗаписаны Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Данные", ДополнительныеПараметры.Форма.Объект.Ссылка);
		ПараметрыФормы.Вставить("ДанныеДляЖурналаРегистрации", ДополнительныеПараметры.Форма.ДанныеДляЖурналаРегистрации);
		ПараметрыФормы.Вставить("ТекстСообщения",
			НСтр("ru = 'ВНИМАНИЕ! Произошла исключительная ситуация:
			|Отмена оплаты не зафиксирована в системе.'"));
		
		ОткрытьФорму("Документ.ЧекККМ.Форма.ОшибкаЗаписи", ПараметрыФормы, ДополнительныеПараметры.Форма);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеВФормуОплаты") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеВФормуОплаты, ИнформацияОбОплате(ЭтотОбъект));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатуПлатежнойКартой(Результат, ДополнительныеПараметры) Экспорт
	
	ВыполнитьДействиеПослеЗаписи(
		Новый ОписаниеОповещения("ОтменитьОплатуКартой", РозничныеПродажиКлиент, ДополнительныеПараметры),
		НСтр("ru = 'Перед открытием формы оплаты не удалось записать документ.'"));
	
КонецПроцедуры

&НаКлиенте
Функция ОтменитьОплатуПлатежнымиКартами(ОповещениеОЗавершении)
	
	СтрокиОплатыПлатежнымиКартами = Новый Массив;
	Для каждого СтрокаОплаты Из Объект.ОплатаПлатежнымиКартами Цикл
		СтрокиОплатыПлатежнымиКартами.Добавить(СтрокаОплаты);
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении",       ОповещениеОЗавершении);
	ДополнительныеПараметры.Вставить("СтрокиОплатыПлатежнымиКартами", СтрокиОплатыПлатежнымиКартами);
	
	ДополнительныеПараметры.Вставить("Форма",             ЭтотОбъект);
	ДополнительныеПараметры.Вставить("Валюта",            Объект.Валюта);
	ДополнительныеПараметры.Вставить("ПараметрыКассыККМ", ПараметрыКассыККМ);
	ДополнительныеПараметры.Вставить("ТипТранзакции",     "AuthorizeVoid");
	
	РозничныеПродажиКлиент.ОтменитьОплатуПлатежнымиКартамиПоследовательно(
		Неопределено,
		ДополнительныеПараметры);
	
КонецФункции

&НаКлиенте
Процедура ОтменитьОплатуПлатежнойКартойЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДанныеДляЖурналаРегистрации = Новый Структура;
	ДанныеДляЖурналаРегистрации.Вставить("СуммаОперации",  ДополнительныеПараметры.СуммаОперации);
	ДанныеДляЖурналаРегистрации.Вставить("СсылочныйНомер", ДополнительныеПараметры.СсылочныйНомер);
	ДанныеДляЖурналаРегистрации.Вставить("НомерЧекаЭТ",    ДополнительныеПараметры.НомерЧека);
	
	Объект.ОплатаПлатежнымиКартами.Удалить(Объект.ОплатаПлатежнымиКартами.Индекс(ДополнительныеПараметры.СтрокаОплаты));
	Модифицированность = Истина;
	
	ПересчитатьДокументНаКлиенте();
	
	ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
	ИзмененныеДанныеЗаписаны = ЗаписатьНаКлиенте(ТребуетсяПовторнаяПопыткаЗаписи);
	Если Не ИзмененныеДанныеЗаписаны Тогда
		
		ДополнительныеПараметрыПовторЗаписи = РозничныеПродажиКлиентСервер.СтруктураПовтораЗаписи();
		ДополнительныеПараметрыПовторЗаписи.ОписаниеОповещения             = ДополнительныеПараметры.ОповещениеПриЗавершении;
		ДополнительныеПараметрыПовторЗаписи.ТекстСообщения                 = НСтр("ru = 'После выполнения операции отмены оплаты не удалось записать документ.'");
		ДополнительныеПараметрыПовторЗаписи.ВозвращатьРезультатФункции     = Ложь;
		ДополнительныеПараметрыПовторЗаписи.РезультатПриУспешномПроведении = Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Истина, Истина);
		ДополнительныеПараметрыПовторЗаписи.РезультатПриОтмене             = Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Истина, Ложь);
		ДополнительныеПараметрыПовторЗаписи.ИмяПроцедуры                   = "ЗаписатьНаСервере";
		ДополнительныеПараметрыПовторЗаписи.РезультатОперации              = ИзмененныеДанныеЗаписаны;
		
		Если Не ТребуетсяПовторнаяПопыткаЗаписи Тогда
			ОшибкаПриПроведенииЧекаВопросЗавершение(КодВозвратаДиалога.Отмена, ДополнительныеПараметрыПовторЗаписи);
			Возврат;
		КонецЕсли;
	
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ОшибкаПриПроведенииЧекаВопросЗавершение", РозничныеПродажиКлиент, ДополнительныеПараметрыПовторЗаписи),
			ДополнительныеПараметрыПовторЗаписи.ТекстСообщения,
			РежимДиалогаВопрос.ПовторитьОтмена, 10, КодВозвратаДиалога.Повторить,,КодВозвратаДиалога.Повторить);
		Возврат;
		
	Иначе
		
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОповещениеПриЗавершении,
			Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны",
				Истина, Истина));
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из формы сложной оплаты
&НаКлиенте
Процедура ОтменитьОплату(ИзмененныеДанныеЗаписаны, ДополнительныеПараметры) Экспорт
	
	Если Не ИзмененныеДанныеЗаписаны Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПолученоНаличными = 0;
	Объект.ПодарочныеСертификаты.Очистить();
	ПрименитьОплатуБонуснымиБаллами(Неопределено);
	
	ОтменитьОплатуПлатежнымиКартами(
		Новый ОписаниеОповещения("ОтменитьОплатуЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеВФормуОплаты, ИнформацияОбОплате(ЭтотОбъект));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Прочие

&НаКлиенте
Процедура ОшибкаПриПроведенииЧекаВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Отмена Тогда
		
		ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
		Если ДополнительныеПараметры.ИмяПроцедуры = "ЗаписатьНаСервере" Тогда
			РезультатОперации = ЗаписатьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи);
		ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = "ЗаписатьФискальнуюОперациюНаСервере" Тогда
			РезультатОперации = ЗаписатьФискальнуюОперациюНаСервере(ТребуетсяПовторнаяПопыткаЗаписи, ДополнительныеПараметры.РеквизитыФискальнойОперацииКассовогоУзла);
		ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = "ОтложитьНаСервере" Тогда
			РезультатОперации = ОтложитьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи);
		ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = "ЗарезервироватьНаСервере" Тогда
			РезультатОперации = ЗарезервироватьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи);
		ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = "ВыполнитьЧастьРасчетаНаСервере" Тогда
			РезультатОперации = ВыполнитьЧастьРасчетаНаСервере(ДополнительныеПараметры.ПараметрыПроцедуры, ТребуетсяПовторнаяПопыткаЗаписи);
		КонецЕсли;
		
		Если (ТипЗнч(РезультатОперации) = Тип("Булево") И РезультатОперации)
			ИЛИ (ТипЗнч(РезультатОперации) = Тип("Структура") И РезультатОперации.Свойство("РасчетВыполненУспешно") И РезультатОперации.РасчетВыполненУспешно) Тогда
			
			ВыполнитьОбработкуОповещения(
				ДополнительныеПараметры.ОписаниеОповещения,
				?(ДополнительныеПараметры.ВозвращатьРезультатФункции, РезультатОперации, ДополнительныеПараметры.РезультатПриУспешномПроведении));
			
		Иначе
			
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ОшибкаПриПроведенииЧекаВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
				ДополнительныеПараметры.ТекстСообщения,
				РежимДиалогаВопрос.ПовторитьОтмена, 10, КодВозвратаДиалога.Повторить,,КодВозвратаДиалога.Повторить);
			
		КонецЕсли;
		
	Иначе
		
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОписаниеОповещения,
			?(ДополнительныеПараметры.ВозвращатьРезультатФункции, ДополнительныеПараметры.РезультатОперации, ДополнительныеПараметры.РезультатПриОтмене));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеПослеЗаписи(ОповещениеПриЗавершении, ТекстСообщения)
	
	ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
	ИзмененныеДанныеЗаписаны = ЗаписатьНаКлиенте(ТребуетсяПовторнаяПопыткаЗаписи);
	Если Не ИзмененныеДанныеЗаписаны Тогда
		
		ДополнительныеПараметры = РозничныеПродажиКлиентСервер.СтруктураПовтораЗаписи();
		ДополнительныеПараметры.ОписаниеОповещения         = ОповещениеПриЗавершении;
		ДополнительныеПараметры.ТекстСообщения             = ТекстСообщения;
		ДополнительныеПараметры.ВозвращатьРезультатФункции = Истина;
		ДополнительныеПараметры.ИмяПроцедуры               = "ЗаписатьНаСервере";
		ДополнительныеПараметры.РезультатОперации          = ИзмененныеДанныеЗаписаны;
		
		Если Не ТребуетсяПовторнаяПопыткаЗаписи Тогда
			ОшибкаПриПроведенииЧекаВопросЗавершение(КодВозвратаДиалога.Отмена, ДополнительныеПараметры);
			Возврат;
		КонецЕсли;
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ОшибкаПриПроведенииЧекаВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			ДополнительныеПараметры.ТекстСообщения,
			РежимДиалогаВопрос.ПовторитьОтмена, 10, КодВозвратаДиалога.Повторить,,КодВозвратаДиалога.Повторить);
		Возврат;
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи = Неопределено)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Значение = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.ЧекККМ"));
		Значение.УстановитьСсылкуНового(Документы.ЧекККМ.ПолучитьСсылку());
		ЗначениеВДанныеФормы(Значение, Объект);
	КонецЕсли;
	
	Объект.Дата = ТекущаяДатаСеанса();
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить();
		ЭлементБлокировки.Область = "Документ.ЧекККМ";
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Объект.Ссылка);
		Блокировка.Заблокировать();
		
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		//ПараметрыЗаписи.Вставить("РежимПроведения", РежимПроведенияДокумента.Оперативный);
		ПараметрыЗаписи.Вставить("РежимПроведения", РежимПроведенияДокумента.Неоперативный);
		ПараметрыЗаписи.Вставить("РежимТранзакции", Истина);
		
		Результат = Записать(ПараметрыЗаписи);
		
		ЗафиксироватьТранзакцию();
		
		ПараметрыЗаписи.Вставить("РежимТранзакции", Ложь);
		ПослеЗаписиНаСервере(РеквизитФормыВЗначение("Объект"), ПараметрыЗаписи);
		
	Исключение
		
		ОтменитьТранзакцию();
		ТребуетсяПовторнаяПопыткаЗаписи = Истина;
		Результат = Ложь;
		
	КонецПопытки;
	
	Если Не Результат Тогда
		
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЧекККМ));
		
		ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЗаписатьНаКлиенте(ТребуетсяПовторнаяПопыткаЗаписи = Неопределено)
	
	Если Модифицированность Тогда
		
		Результат = ЗаписатьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи);
		
		Если Результат Тогда
			Оповестить("Запись_ЧекККМ", Новый Структура, Неопределено);
		КонецЕсли;
		
		Возврат Результат;
		
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещенияИзмененоРабочееМестоТекущегоСеансаЗавершение(ДополнительныеПараметры) Экспорт
	
	ПринудительноеЗавершениеРаботы = Истина;
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре()
	
	ЗаполнитьПризнакХарактеристикиИспользуются = Новый Структура("Номенклатура", "ХарактеристикиИспользуются");
	ЗаполнитьПризнакТипНоменклатуры            = Новый Структура("Номенклатура", "ТипНоменклатуры");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", ЗаполнитьПризнакХарактеристикиИспользуются);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",            ЗаполнитьПризнакТипНоменклатуры);

	ОбработкаТабличнойЧастиКлиентСерверЛокализация.ДополнитьСтруктуруДействийПриИзмененииЭлемента(ЭтотОбъект, "НоменклатураПризнаки", СтруктураДействий);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураДействий);
	СобытияФорм.ПриИзмененииЭлемента(ЭтотОбъект, "Товары");
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПроверкуАссортиментаВСтруктуруДействий(СтруктураДействий)
	
	СтруктураПроверкиАссортимента = АссортиментКлиентСервер.ПараметрыПроверкиАссортимента();
	СтруктураПроверкиАссортимента.Ссылка = Объект.Ссылка;
	СтруктураПроверкиАссортимента.Склад = Объект.Склад;
	СтруктураПроверкиАссортимента.Дата = Объект.Дата;
	СтруктураПроверкиАссортимента.ТекстСообщения = НСтр("ru = 'Товар %1 не включен в ассортимент магазина или запрещен к продаже.'");
	СтруктураПроверкиАссортимента.ИмяРесурсаАссортимента = "РазрешеныПродажи";
	СтруктураПроверкиАссортимента.ПровереноМожноДобавлять = Истина;
	СтруктураПроверкиАссортимента.РазрешатьДобавление = Ложь;
	
	СтруктураДействий.Вставить("ПроверитьАссортиментСтроки", СтруктураПроверкиАссортимента);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДаннныеОФормеОплаты(Форма, ИнформацияОбОплате)
	
	ФормыОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПустаяСсылка");
	
	Наличные              = ИнформацияОбОплате.Наличные;
	ПлатежныеКарты        = ИнформацияОбОплате.ПлатежныеКарты;
	ПодарочныеСертификаты = ИнформацияОбОплате.ПодарочныеСертификаты;
	БонусныеБаллы         = ИнформацияОбОплате.БонусныеБаллы;
	
	Если Наличные > 0 И ПлатежныеКарты = 0 И ПодарочныеСертификаты = 0 И БонусныеБаллы = 0 Тогда
		ФормыОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличная");
	ИначеЕсли Наличные = 0 И ПлатежныеКарты > 0 И ПодарочныеСертификаты = 0 И БонусныеБаллы = 0 Тогда
		ФормыОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПлатежнаяКарта");
	ИначеЕсли Наличные = 0 И ПлатежныеКарты = 0 И ПодарочныеСертификаты > 0 И БонусныеБаллы = 0 Тогда
		ФормыОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПодарочныйСертификат");
	ИначеЕсли Наличные = 0 И ПлатежныеКарты = 0 И ПодарочныеСертификаты = 0 И БонусныеБаллы > 0 Тогда
		ФормыОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.БонусныеБаллы");
	КонецЕсли;
	
	Форма.Объект.ФормаОплаты = ФормыОплаты;
	
КонецПроцедуры

&НаСервере
Функция АдресТабличнойЧастиТовары()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьНовыйЧек(Ссылка = Неопределено)
	
	Если Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит") Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Ссылка", Ссылка);
		
		Отказ = Ложь;
		ПередЗакрытиемЧека(
			Отказ,
			Новый ОписаниеОповещения("ЗагрузитьНовыйЧекЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		
		НовыйЧекНаСервере();
		ЗагрузитьНовыйЧекФрагмент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНовыйЧекФрагмент()
	
	АдресПримененныхСкидокВоВременномХранилище = "";
	УправляемыеСкидки = Новый СписокЗначений;
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНовыйЧекЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	НовыйЧекНаСервере(ДополнительныеПараметры.Ссылка);
	
	ЗагрузитьНовыйЧекФрагмент();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДанныеИнформационнойПанели(Форма, ОтобразитьСдачу = Ложь)
	
	ИнформацияОбОплате = ИнформацияОбОплате(Форма);
	
	Форма.ИнформационнаяПанельСуммаКОплате   = ИнформацияОбОплате.СуммаКОплате;
	Форма.ИнформационнаяПанельСуммаБезСкидки = ИнформацияОбОплате.СуммаБезСкидки;
	Форма.ИнформационнаяПанельСуммаСкидки    = ИнформацияОбОплате.СуммаСкидки;
	
	КоличествоСтрокВТЧ = Форма.Объект.Товары.Количество();
	
	ТекущаяСтрока = Форма.Элементы.Товары.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено И КоличествоСтрокВТЧ > 0 Тогда
		ТекущиеДанные = Форма.Объект.Товары[КоличествоСтрокВТЧ - 1];
		Форма.Элементы.Товары.ТекущаяСтрока = ТекущиеДанные.ПолучитьИдентификатор();
	ИначеЕсли ТекущаяСтрока = Неопределено И КоличествоСтрокВТЧ = 0 Тогда
		ТекущиеДанные = Неопределено;
	Иначе
		ТекущиеДанные = Форма.Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
	КонецЕсли;
	
	НаименованиеТовара = "";
	Если ТекущиеДанные <> Неопределено Тогда
		НаименованиеТовара = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
			ТекущиеДанные.Номенклатура,
			ТекущиеДанные.Характеристика,
			,
			ТекущиеДанные.Серия);
	КонецЕсли;
	
	ОбязательныеРеквизиты = Новый Массив;
	ДанныеСтроки = Новый Структура;
	ПродавецТолькоКассир = Форма.КассирМожетБытьПродавцом И Не Форма.МенеджерТорговогоЗалаМожетБытьПродавцом;
	Если Не ПродавецТолькоКассир И ТекущиеДанные <> Неопределено Тогда
		ОбязательныеРеквизиты.Добавить("Продавец");
		ДанныеСтроки.Вставить("Продавец", ТекущиеДанные.Продавец);
	КонецЕсли;
	Если Форма.ПараметрыКассыККМ.ИспользоватьСкладскиеПомещения И ТекущиеДанные <> Неопределено Тогда
		ОбязательныеРеквизиты.Добавить("Помещение");
		ДанныеСтроки.Вставить("Помещение", ТекущиеДанные.Помещение);
	КонецЕсли;
	Если Форма.ИспользоватьКартыЛояльности Тогда
		ДанныеСтроки.Вставить("Карта", Форма.Объект.КартаЛояльности);
	КонецЕсли;
	
	СуммовыеПараметры = Новый Структура;
	СуммовыеПараметры.Вставить("Количество",                  0);
	СуммовыеПараметры.Вставить("Цена",                        0);
	СуммовыеПараметры.Вставить("СуммаРучнойСкидки",           0);
	СуммовыеПараметры.Вставить("ПроцентРучнойСкидки",         0);
	СуммовыеПараметры.Вставить("СуммаАвтоматическойСкидки",   0);
	СуммовыеПараметры.Вставить("ПроцентАвтоматическойСкидки", 0);
	СуммовыеПараметры.Вставить("Сумма",                       0);
	Если ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СуммовыеПараметры, ТекущиеДанные);
	КонецЕсли;
	
	Данные = Новый Структура;
	Данные.Вставить("НаименованиеТовара",    НаименованиеТовара);
	Данные.Вставить("ДанныеСтроки",          ДанныеСтроки);
	Данные.Вставить("СуммовыеПараметры",     СуммовыеПараметры);
	Данные.Вставить("ОбязательныеРеквизиты", ОбязательныеРеквизиты);
	Если ОтобразитьСдачу Тогда
		
		ТекстНачисленныеБонусныеБаллы = СтрШаблон(
			НСтр("ru = 'Начислено бонусных баллов: %1 %2'"),
			Форма.Объект.Товары.Итог("СуммаНачисленныхБонусныхБалловВВалюте"),
			Форма.Объект.Валюта);
		
		ТекстСдача = Новый ФорматированнаяСтрока(
			СтрШаблон(НСтр("ru = 'Сдача: %1'"),
				Формат(ИнформацияОбОплате.ИтогоОплачено - ИнформацияОбОплате.СуммаКОплате, "ЧДЦ=2; ЧН=0.00")));
		
		Данные.Вставить("ОтобразитьСдачу",               Истина);
		Данные.Вставить("ТекстСдача",                    ТекстСдача);
		Данные.Вставить("ТекстНачисленныеБонусныеБаллы", ТекстНачисленныеБонусныеБаллы);
		
	Иначе
		Данные.Вставить("ОтобразитьСдачу", Ложь);
	КонецЕсли;
	Данные.Вставить("СтруктураСообщений", Форма.СтруктураСообщений);
	
	РозничныеПродажиКлиентСервер.ОбновитьДанныеИнформационнойПанели(Форма, Данные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ОбновитьДанныеИнформационнойПанели(ЭтотОбъект, Истина = ТолькоПросмотр);
	
КонецПроцедуры

// Вызывается из меню прочих операций
&НаКлиенте
Процедура ПроверитьКоличествоВДокументе(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТолькоПросмотр Тогда // Чек пробит. Изменение информации запрещено.
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	СобытияФормКлиент.ПриИзмененииЭлемента(ЭтотОбъект, "ПроверитьКоличествоВДокументе", ПараметрыОткрытия);

	ПараметрыОткрытия.Вставить("АдресВоВременномХранилище",            ПоместитьТабличнуюЧастьТоварыВоВременноеХранилищеДляПроверкиКоличества());
	ПараметрыОткрытия.Вставить("ПревышениеКоличестваТоваровРазрешено", Истина);
	ПараметрыОткрытия.Вставить("ПараметрыУказанияСерий",               ПараметрыУказанияСерий);
	ПараметрыОткрытия.Вставить("Склад",                                Объект.Склад);
	ПараметрыОткрытия.Вставить("ИмяТабличнойЧасти",                    "Товары");
	ПараметрыОткрытия.Вставить("Ссылка",                               Объект.Ссылка);
	
	ОткрытьФорму(
		"ОбщаяФорма.ПроверкаЗаполненияДокументов",
		ПараметрыОткрытия,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ПроверитьКоличествоВДокументеЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Оповестить("Запись_ЧекККМ", Новый Структура, Неопределено);
	
	Если Результат Тогда
		
		ЗагрузитьНовыйЧек();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		СписокСвойств = "НоменклатураНабора, ХарактеристикаНабора, Номенклатура, Характеристика, Упаковка, Серия, Цена, 
			|КоличествоУпаковок, ПроцентРучнойСкидки";
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, СписокСвойств);
	
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
		СтруктураДействий.Вставить("ЗаполнитьПомещение", Новый Структура("Склад, Номенклатура, Характеристика", Объект.Склад, ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика));
		СтруктураДействий.Вставить("ЗаполнитьПродавца", Новый Структура("Продавец", ТекущийПродавец));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий));
		
		Если КонтролироватьАссортимент Тогда
			
			СтруктураПроверкиАссортимента = АссортиментКлиентСервер.ПараметрыПроверкиАссортимента();
			СтруктураПроверкиАссортимента.Ссылка = Объект.Ссылка;
			СтруктураПроверкиАссортимента.Склад = Объект.Склад;
			СтруктураПроверкиАссортимента.Дата = Объект.Дата;
			СтруктураПроверкиАссортимента.ТекстСообщения = НСтр("ru = 'Товар %1 не включен в ассортимент магазина или запрещен к продаже.'");
			СтруктураПроверкиАссортимента.ИмяРесурсаАссортимента = "РазрешеныПродажи";
			СтруктураПроверкиАссортимента.ПровереноМожноДобавлять = Истина;
			СтруктураПроверкиАссортимента.РазрешатьДобавление = Ложь;
			
			СтруктураДействий.Вставить("ПроверитьАссортиментСтроки", СтруктураПроверкиАссортимента);
			
		КонецЕсли;
	
		СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
			ЭтотОбъект.ИмяФормы, "Товары"));
			
		ОбработкаТабличнойЧастиКлиентСерверЛокализация.ДополнитьСтруктуруДействийПриИзмененииЭлемента(ЭтотОбъект, "Номенклатура", СтруктураДействий);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	КонецЦикла;
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЧекККМ));
	
	Если ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	ОбновитьДанныеИнформационнойПанели(ЭтотОбъект, Истина = ТолькоПросмотр);
	
	Если ТаблицаТоваров.Количество() Тогда
		СобытияФорм.ПриИзмененииЭлемента(ЭтотОбъект, "Товары");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПродавцаЗавершение(Продавец, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Продавец) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийПродавец = Продавец;
	ЗаполнитьПродавцаВТабличнойЧасти();
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

// Вызывается при клике на гиперссылку в информационной панели
&НаКлиенте
Процедура ИзменитьПродавцаГиперссылкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Продавец = Результат;
	Если Не ЗначениеЗаполнено(Продавец) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
		
		СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
		СтрокаТЧ.Продавец = Продавец;
		
	КонецЦикла;
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПродавцаВТабличнойЧасти()
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Продавец) Тогда
			СтрокаТЧ.Продавец = ТекущийПродавец;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПомещениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтрокаТЧ = ДополнительныеПараметры.СтрокаТЧ;
	
	Помещение = Результат;
	Если Не ЗначениеЗаполнено(Помещение) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТЧ.Помещение = Помещение;
	
	ОбновитьДанныеИнформационнойПанели(ЭтотОбъект, Истина = ТолькоПросмотр);
	
КонецПроцедуры

&НаКлиенте
// Вызывается из формы МенюОперацииСККМ
Процедура ИзменитьКассуККМЗавершение(КассаККМ, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(КассаККМ) Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьКассуККМ(КассаККМ);
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратТовараОбработкаОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КассаККМ", Объект.КассаККМ);
	ПараметрыОткрытия.Вставить("Кассир", Объект.Кассир);
	
	ОткрытьФорму("Документ.ЧекККМ.Форма.ОформлениеВозвратаДеньВДень", ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКоличествоВДокументеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВозвращаемыеПараметры = Результат;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		ИзменитьТабличнуюЧастьПоРезультатамПроверки(ВозвращаемыеПараметры, ?(КэшированныеЗначения = Неопределено, ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения(), КэшированныеЗначения));
		
		Модифицированность = Истина;
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
		ПересчитатьДокументНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияПоНастройкам()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		СтруктураСостояниеКассовойСмены = РозничныеПродажи.ПолучитьСостояниеКассовойСмены(Объект.КассаККМ);
		Если Объект.Статус <> Перечисления.СтатусыЧековККМ.Пробит
			И Объект.КассоваяСмена <> СтруктураСостояниеКассовойСмены.КассоваяСмена Тогда
			Объект.КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
		КонецЕсли;
		
		ТекущийПользователь = Пользователи.ТекущийПользователь();
		Если Объект.Статус <> Перечисления.СтатусыЧековККМ.Пробит
			И Объект.Кассир <> ТекущийПользователь Тогда
			Объект.Кассир = ТекущийПользователь;
		КонецЕсли;
		
	Иначе
		
		ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
		
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЧекККМ));
		УстановитьВидимостьЭлементовСерий();
		
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования)
			И ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
			
			Объект.Серии.Очистить();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеКассовойСмены()
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) Тогда
		
		СтруктураСостояниеКассовойСмены = РозничныеПродажи.ПолучитьСостояниеКассовойСмены(Объект.КассаККМ);
		Если Объект.Статус <> Перечисления.СтатусыЧековККМ.Пробит
			И Объект.КассоваяСмена <> СтруктураСостояниеКассовойСмены.КассоваяСмена Тогда
			Объект.КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
		КонецЕсли;
		
		ТекущийПользователь = Пользователи.ТекущийПользователь();
		Если Объект.Статус <> Перечисления.СтатусыЧековККМ.Пробит
			И Объект.Кассир <> ТекущийПользователь
			И НЕ ЗначениеЗаполнено(Объект.Кассир) Тогда
			
			Объект.Кассир = ТекущийПользователь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокФормы()
	
	Заголовок = НСтр("ru = 'Продажа (Кассир: %Кассир%, Продавец: %Продавец%)'");
	Заголовок = СтрЗаменить(Заголовок, "%Кассир%", Объект.Кассир);
	Заголовок = СтрЗаменить(Заголовок, "%Продавец%", ?(ЗначениеЗаполнено(ТекущийПродавец),ТекущийПродавец, НСтр("ru='<Не выбран>'")));
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧека()
	
	СтруктураСообщений = СкидкиНаценкиСервер.СтруктураСообщений(Объект);
	Элементы.ПоказатьСообщения.Видимость = СтруктураСообщений.Сообщения.Количество() > 0;
	
	АнализВозможностиОплатыБонуснымиБаллами();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЧекККМ));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		
		УстановитьВидимостьЭлементовСерий();
		
	КонецЕсли;
	
	СтруктураСостояниеКассовойСмены = РозничныеПродажиВызовСервера.СостояниеКассовойСмены(Объект.КассаККМ);
	ЗаполнитьЗначенияСвойств(Объект, СтруктураСостояниеКассовойСмены,, "Кассир");
	РозничныеПродажи.ОчиститьДанныеФискальнойОперации(ДанныеФискальнойОперации);
	
	Объект.Дата = ТекущаяДатаСеанса();
	
	ОбновитьЗаголовокФормы();
	
	НастроитьРМК();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЧека(Отказ, ОписаниеОповещения = Неопределено)
	
	Кнопки = Новый СписокЗначений;
	
	РезервироватьДо = КонецДня((Объект.Дата + 24*60*60));
	
	Если Не ТолькоПросмотр И (Модифицированность ИЛИ ЗначениеЗаполнено(Объект.Ссылка)) Тогда
		
		ТекстВопроса = НСтр("ru = 'Данные чека ККМ были изменены.'");
		
		Если КонтрольНаСкладеОтключен Тогда
			Если ПраваДоступа.Отложить Тогда
				Кнопки.Добавить(1, НСтр("ru = 'Отложить'"));
			КонецЕсли;
		Иначе
			Если ПраваДоступа.Отложить Тогда
				Кнопки.Добавить(1, НСтр("ru = 'Отложить без резервирования'"));
			КонецЕсли;
			Если ПраваДоступа.Зарезервировать Тогда
				Кнопки.Добавить(2, НСтр("ru = 'Зарезервировать до...'"));
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Ссылка) И ПраваДоступа.КорректировкаСтрок Тогда
			Кнопки.Добавить(4, НСтр("ru = 'Удалить чек'"));
		КонецЕсли;
		
		Если ПраваДоступа.КорректировкаСтрок Тогда
			Если Модифицированность Тогда
				Кнопки.Добавить(3, НСтр("ru = 'Закрыть без сохранения'"));
			Иначе
				Кнопки.Добавить(3, НСтр("ru = 'Закрыть'"));
			КонецЕсли;
		КонецЕсли;
		
		Кнопки.Добавить(99, НСтр("ru = 'Отмена'"));
		
	КонецЕсли;
	
	Если Кнопки.Количество() > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("РезервироватьДо", РезервироватьДо);
		ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
		
		Отказ = Истина;
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ВопросПередЗакрытиемЧекаЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			ТекстВопроса,
			Кнопки);
		
	Иначе
		
		Если ОписаниеОповещения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемОперацияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Оповестить("Запись_ЧекККМ", Новый Структура, Неопределено);
	
	Если Результат Тогда
		
		Если ДополнительныеПараметры.ОписаниеОповещения = Неопределено Тогда
			ПринудительноеЗавершениеРаботы = Истина;
			Закрыть(Неопределено);
		Иначе
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЧекаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
		
	ОчиститьСообщения();
	
	Если РезультатВопроса = 1 Тогда
		
		// Отложить чек без резервирования
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемОперацияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОтложитьНаКлиенте(Оповещение);
		
	ИначеЕсли РезультатВопроса = 2 Тогда
		
		РезервироватьДо = КонецДня((Объект.Дата + 24*60*60));
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемОперацияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДополнительныеПараметры = Новый Структура("ОповещениеПриЗавершении", Оповещение);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
				"ЗарезервироватьНаКлиенте",
				ЭтотОбъект,
				ДополнительныеПараметры);
			
		// Отложить чек с резервированием
		ПоказатьВводДаты(
			ОписаниеОповещения,
			РезервироватьДо,
			НСтр("ru = 'Зарезервировать до:'"),
			ЧастиДаты.ДатаВремя);
		
	ИначеЕсли РезультатВопроса = 3 Тогда
		
		// Закрыть без сохранения.
		Если ДополнительныеПараметры.ОписаниеОповещения = Неопределено Тогда
			ПринудительноеЗавершениеРаботы = Истина;
			Закрыть(Неопределено);
		Иначе
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Неопределено);
		КонецЕсли;
		
	ИначеЕсли РезультатВопроса = 4 Тогда
		
		// Удалить чек.
		УдалениеВыполнено = РозничныеПродажиВызовСервера.УдалитьДокументПриОтменеФискальнойОперации(Объект.Ссылка);
		
		Если УдалениеВыполнено Тогда
			
			Оповестить("Запись_ЧекККМ", Новый Структура, Неопределено);
			
			Если ДополнительныеПараметры.ОписаниеОповещения = Неопределено Тогда
				ПринудительноеЗавершениеРаботы = Истина;
				Закрыть(Неопределено);
			Иначе
				ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Неопределено);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКомандыФормы(УникальныйИдентификатор)
	
	КомандыФормы = Новый Массив;
	Для Каждого КомандаФормы Из Команды Цикл
		Если НЕ КомандаФормы.СочетаниеКлавиш.Клавиша = Клавиша.Нет Тогда
			КомандыФормы.Добавить(Новый Структура("ИмяКоманды, Заголовок, СочетаниеКлавиш", КомандаФормы.Имя, КомандаФормы.Заголовок, КомандаФормы.СочетаниеКлавиш));
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(КомандыФормы, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ИзменитьКассуККМ(КассаККМ)
	
	Объект.КассаККМ = КассаККМ;
	ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(Объект.КассаККМ));
	
	НовыйЧекНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПраваДляПользователя(Пользователь)
	
	ПраваДоступа = НастройкиПродажДляПользователейСервер.ПраваДоступаРМК(Пользователь);
	
	Объект.Кассир = Пользователь;
	РеквизитыКассира = РозничныеПродажи.РеквизитыКассира(Пользователь, Объект.Организация);
	
	Если КассирМожетБытьПродавцом И Не МенеджерТорговогоЗалаМожетБытьПродавцом Тогда
		ТекущийПродавец = Пользователь;
		Для Каждого СтрокаТЧ Из Объект.Товары Цикл
			СтрокаТЧ.Продавец = Пользователь;
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьРМК()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПолучитьСсылкиНаОборудование();
	
	// Параметры времени выполнения.
	КонтрольНаСкладеОтключен = Справочники.Склады.КонтрольОстатковНаСкладеОтключен(Объект.Склад)
	                           И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "КонтролироватьОперативныеОстатки");
	
	Если ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
		НастроитьАвтоматическиеСкидкиНаценки();
	КонецЕсли;
	
	Если КлиентскоеПриложение.ТекущийВариантИнтерфейса() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.СуммаБезСкидки.Ширина = 22;
		Элементы.СуммаСкидки.Ширина    = 22;
		Элементы.СуммаКОплате.Ширина   = 22;
	КонецЕсли;
	
	РозничныеПродажи.ПодписатьГорячиеКлавишиНаКнопках(ЭтотОбъект);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕСТЬNULL(НастройкиРМК.ГорячиеКлавиши, Неопределено)               КАК ГорячиеКлавиши,
	|	ЕСТЬNULL(НастройкиРМК.ГорячиеКлавиши.БыстрыеТовары, Неопределено) КАК БыстрыеТовары,
	|	ЕСТЬNULL(НастройкиРМК.ГорячиеКлавиши.КомандыФормы, Неопределено)  КАК КомандыФормы,
	|	НастройкиРМК.КассирМожетБытьПродавцом                             КАК КассирМожетБытьПродавцом,
	|	НастройкиРМК.МенеджерТорговогоЗалаМожетБытьПродавцом              КАК МенеджерТорговогоЗалаМожетБытьПродавцом,
	|	НастройкиРМК.ИспользоватьАвторизацию
	|ИЗ
	|	Справочник.НастройкиРМК КАК НастройкиРМК
	|ГДЕ
	|	НастройкиРМК.РабочееМесто = &РабочееМесто
	|	И НастройкиРМК.Ссылка В (ВЫБРАТЬ Различные Т.Ссылка Из Справочник.НастройкиРМК.КассыККМ КАК Т Где Т.КассаККМ = &КассаККМ)
	|");
	
	Запрос.УстановитьПараметр("РабочееМесто", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	Запрос.УстановитьПараметр("КассаККМ", Объект.КассаККМ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ГорячиеКлавиши            = Выборка.ГорячиеКлавиши;
		ПринудительнаяАвторизация = Выборка.ИспользоватьАвторизацию;
		МенеджерТорговогоЗалаМожетБытьПродавцом = Выборка.МенеджерТорговогоЗалаМожетБытьПродавцом;
		КассирМожетБытьПродавцом  = Выборка.КассирМожетБытьПродавцом;
		
		Если ЗначениеЗаполнено(ГорячиеКлавиши) Тогда
			РозничныеПродажи.НастроитьБыстрыеТоварыИГорячиеКлавиши(ЭтотОбъект, Выборка);
		КонецЕсли;
		
	Иначе
		
		ГорячиеКлавиши                          = Неопределено;
		ПринудительнаяАвторизация               = Ложь;
		МенеджерТорговогоЗалаМожетБытьПродавцом = Ложь;
		КассирМожетБытьПродавцом                = Истина;
		
	КонецЕсли;
	
	НастроитьПраваДляПользователя(Объект.Кассир);
	
	ПродавецТолькоКассир = КассирМожетБытьПродавцом И Не МенеджерТорговогоЗалаМожетБытьПродавцом;
	Элементы.ТоварыПродавец.Видимость = Не ПродавецТолькоКассир;
	
	Элементы.БыстрыеТовары.Видимость    = БыстрыеТовары.Количество() > 0;
	Элементы.РассчитатьСкидки.Видимость = ИспользоватьАвтоматическиеСкидкиВПродажах;
	
	Элементы.ИзменитьПродавца.Видимость  = Не ПродавецТолькоКассир;
	Элементы.ИзменитьПомещение.Видимость = ПараметрыКассыККМ.ИспользоватьСкладскиеПомещения;
	Элементы.ТоварыПомещение.Видимость   = ПараметрыКассыККМ.ИспользоватьСкладскиеПомещения;
	Элементы.СоставНабора.Видимость      = ПолучитьФункциональнуюОпцию("ИспользоватьНаборы");
	Элементы.УказатьСерии.Видимость      = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.РучныеСкидки.Видимость      = ИспользоватьРучныеСкидкиВПродажах;

	// Установка видимости команды "Получить вес"
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтотОбъект, "");
	
	ДоступныеВидыОплаты = ДоступныеВидыОплаты(ЭтотОбъект);
	Элементы.ОплатитьНаличными.Видимость              = ДоступныеВидыОплаты.Наличные;
	Элементы.ОплатитьКартой.Видимость                 = ДоступныеВидыОплаты.ПлатежныеКарты;
	Элементы.СмешаннаяОплата.Видимость                = ДоступныеВидыОплаты.ПлатежныеКарты ИЛИ ДоступныеВидыОплаты.ПодарочныеСертификаты ИЛИ ДоступныеВидыОплаты.БонусныеБаллы;
	Элементы.ОплатитьПодарочнымСертификатом.Видимость = ДоступныеВидыОплаты.ПодарочныеСертификаты;
	
	ЭлементыНаПерегруппировку = Новый Массив;
	
	ЭлементыНаПерегруппировку.Добавить(Элементы.БыстрыеТовары);
	ЭлементыНаПерегруппировку.Добавить(Элементы.РассчитатьСкидки);
	
	Для Каждого Подгруппа Из Элементы.ГруппаНижняяКоманднаяПанельКонтекстныеКоманды.ПодчиненныеЭлементы Цикл
		Для Каждого Элемент Из Подгруппа.ПодчиненныеЭлементы Цикл
			ЭлементыНаПерегруппировку.Добавить(Элемент);
		КонецЦикла;
	КонецЦикла;
	
	ЭлементыНаПерегруппировку.Добавить(Элементы.ОплатитьНаличными);
	ЭлементыНаПерегруппировку.Добавить(Элементы.ОплатитьКартой);
	
	ЭлементыНаПерегруппировку.Добавить(Элементы.СмешаннаяОплата);
	ЭлементыНаПерегруппировку.Добавить(Элементы.ОплатитьПодарочнымСертификатом);
	
	РозничныеПродажи.ПерегруппироватьКнопкиФормы(ЭтотОбъект, ЭлементыНаПерегруппировку);
	
	РозничныеПродажи.НастроитьКомандыПечати(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОкноАвторизации()
	
	ОткрытьФорму("Документ.ЧекККМ.Форма.Авторизация", Новый Структура("Режим", "СменитьПрава"), ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЦенуПоОтбору(Номенклатура, Характеристика, Упаковка)
	
	СтруктураПараметровОтбора = Новый Структура("Валюта, Дата, ВидЦены, Номенклатура, Характеристика, Упаковка");
	СтруктураПараметровОтбора.Номенклатура = Номенклатура;
	СтруктураПараметровОтбора.Характеристика = Характеристика;
	СтруктураПараметровОтбора.Упаковка = Упаковка;
	СтруктураПараметровОтбора.Валюта = Объект.Валюта;
	СтруктураПараметровОтбора.Дата = ТекущаяДатаСеанса();
	СтруктураПараметровОтбора.ВидЦены = Объект.ВидЦены;
	
	Возврат ПродажиСервер.ПолучитьЦенуПоОтбору(СтруктураПараметровОтбора);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьКомандуПечати(ИмяКоманды, ДополнительныеПараметры) Экспорт

	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команды[ИмяКоманды], Объект);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементНаКнопкуНовыйЧек()
	
	ТекущийЭлемент = Элементы.НовыйЧек;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементНаТабличнуюЧастьТовары()
	
	ТекущийЭлемент = Элементы.Товары;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗавершенияПечатиСлипЧека(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'При печати слип-чека возникла ошибка:
			           |""%1"".'"),
			РезультатВыполнения.ОписаниеОшибки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидЦеныВключаетСуммаНДС(ВидЦены)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидЦены, "ЦенаВключаетНДС");
	
КонецФункции

&НаКлиенте
Процедура ПечатьДетализации(Команда)
	
	//МК_Текст = МК_СформироватьТекстКопииЧека();
    МК_Структура = Новый Структура;
    МК_Структура.Вставить("МК_ДетализацияЧека", МК_Текст);
    
    Оповещение = Новый ОписаниеОповещения("НапечататьМК_ДетализацияЧека", ЭтотОбъект, МК_Структура);
    
    МенеджерОборудованияКлиент.НачатьПечатьТекстовыхДокументов(Оповещение, УникальныйИдентификатор, ""); //МК_Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьМК_ДетализацияЧека(РезультатВыполнения, Параметры) Экспорт
    
    // НЕ УДАЛЯТЬ ЭТУ ПРОЦЕДУРУ. ОНА СВЯЗАНА С ОПОВЕЩЕНИЕМ!
    
КонецПроцедуры

//&НаСервере
//Функция МК_СформироватьТекстКопииЧека()
//    
//	//// Шапка       
//	//ТекстОрганизация   = "" + ДокументЧек.Организация.НаименованиеПолное;
//	//ТекстИНН           = "ИНН: " + ДокументЧек.Организация.ИНН;
//	//ТекстДатаНомерЧека = "Дата: " + Формат(ДокументЧек.Дата, "ДФ=dd.MM.yy") + "  ФД №: " + СтрЗаменить("" + ДокументЧек.НомерЧекаККМ, " ", ""); 
//	
//	//ТекстОрганизация = "Тест строка 1";
//	//ТекстИНН = "Тест строка 2";
//	//ТекстДатаНомерЧека = "Тест строка 3";
//	//
//	//ТекстКопииЧека = "<?xml version=""1.0"" encoding=""UTF-8"" ?>
//	//|<Document>
//	//|   <Positions> 
//	//|      <TextString Text=""        *** ДЕТАЛИЗАЦИЯ ***        ""/>
//	//|      <TextString Text=""" + ТекстОрганизация + """/> 
//	//|      <TextString Text=""" + ТекстИНН + """/> 
//	//|      <TextString Text=""" + ТекстДатаНомерЧека + """/> 
//	//|      <TextString Text=""        ""/>";
//	
//	ТекстСтрока1 = "Технологическая мойка колеса 17";
//	ТекстСтрока11 = "                    60         Х 1    =60";
//	ТекстСтрока2 = "Разборотовка профиль 45  и ниже 17";
//	ТекстСтрока21 = "                    170        Х 1   =170";
//	ТекстСтрока3 = "Забортовка 17";
//	ТекстСтрока31 = "                    130        Х 1   =130";
//	ТекстСтрока4 = "Герметизация бортов шины герметиком 17";
//	ТекстСтрока41 = "                    140        Х 1   =140";
//	ТекстСтрока5 = "Балансировка (со стоимостью грузов) 17";
//	ТекстСтрока51 = "                    190        Х 1   =190";
//	ТекстСтрока6 = "17 Правка литого диска";
//	ТекстСтрока61 = "                    1600       Х 1  =1600";
//	ТекстСтрока7 = "17 Правка литого диска с восьмеркой";
//	ТекстСтрока71 = "                    2200       Х 1  =2200";
//	ТекстИтоговаяСкидка = "ИТОГОВАЯ СКИДКА        0.00";
//	ТекстВыделение = "__________________________________________";
//	ТекстИтог = "ИТОГО К ОПЛТЕ         4490.00";
//	ТекстНДС = "НДС не облагается";
//	ТекстПунктир = "------------------------------------------";
//	 ТекстКопииЧека = "<?xml version=""1.0"" encoding=""UTF-8"" ?>
//	|<Document>
//	|   <Positions> 
//	|      <TextString Text=""        *** ДЕТАЛИЗАЦИЯ ***        ""/>
//	|      <TextString Text=""" + ТекстСтрока1 + """/>
//	|      <TextString Text=""" + ТекстСтрока11 + """/>
//	|      <TextString Text=""" + ТекстПунктир + """/>
//	|      <TextString Text=""" + ТекстСтрока2 + """/>
//	|      <TextString Text=""" + ТекстСтрока21 + """/>
//	|      <TextString Text=""" + ТекстПунктир + """/>
//	|      <TextString Text=""" + ТекстСтрока3 + """/>
//	|      <TextString Text=""" + ТекстСтрока31 + """/>
//	|      <TextString Text=""" + ТекстПунктир + """/>
//	|      <TextString Text=""" + ТекстСтрока4 + """/> 
//	|      <TextString Text=""" + ТекстСтрока41 + """/>
//	|      <TextString Text=""" + ТекстПунктир + """/>
//	|      <TextString Text=""" + ТекстСтрока5 + """/>
//	|      <TextString Text=""" + ТекстСтрока51 + """/>
//	|      <TextString Text=""" + ТекстПунктир + """/>
//	|      <TextString Text=""" + ТекстСтрока6 + """/>
//	|      <TextString Text=""" + ТекстСтрока61 + """/>
//	|      <TextString Text=""" + ТекстПунктир + """/>
//	|      <TextString Text=""" + ТекстСтрока7 + """/>
//	|      <TextString Text=""" + ТекстСтрока71 + """/>
//	|      <TextString Text=""" + ТекстПунктир + """/>
//	|      <TextString Text=""" + ТекстИтоговаяСкидка + """/>
//	|      <TextString Text=""" + ТекстВыделение + """/>
//	|      <TextString Text=""" + ТекстИтог + """/>
//	|      <TextString Text=""" + ТекстВыделение + """/>
//	|      <TextString Text=""" + ТекстНДС + """/> 
//	|      <TextString Text=""        ""/>";
//	 
//	//ТекстСтрока1 = "Ск.10% Технологическая мойка колеса 17";
//	//ТекстСтрока11 = "                    54         Х 1    =54";
//	//ТекстСтрока2 = "Ск.10% Разборотовка профиль 45  и ниже 17";
//	//ТекстСтрока21 = "                    153        Х 1   =153";
//	//ТекстСтрока3 = "Ск.10% Забортовка 17";
//	//ТекстСтрока31 = "                    117        Х 1   =117";
//	//ТекстСтрока4 = "Ск.0%  Герметизация бортов шины герметик";
//	//ТекстСтрока41 = "м 17";
//	//ТекстСтрока42 = "                    140        Х 1   =140";
//	//ТекстСтрока5 = "Ск.10% Балансировка (со стоимостью грузов)";
//	//ТекстСтрока51 = " 17";
//	//ТекстСтрока52 = "                    171        Х 1   =171";
//	//ТекстСтрока6 = "Ск.10% 17 Правка литого диска";
//	//ТекстСтрока61 = "                    1440       Х 1  =1440";
//	//ТекстСтрока7 = "Ск.10% 17 Правка литого диска с восьмеркой";
//	//ТекстСтрока71 = "                    1980       Х 1  =1980";
//	//ТекстПунктир = "------------------------------------------";
//	//
//	//ТекстИтоговаяСкидка = "ИТОГОВАЯ СКИДКА        435.00";
//	//ТекстВыделение = "__________________________________________";
//	//ТекстИтог = "ИТОГО К ОПЛТЕ         4055.00";
//	//ТекстНДС = "НДС не облагается";
//	//
//	// ТекстКопииЧека = "<?xml version=""1.0"" encoding=""UTF-8"" ?>
//	//|<Document>
//	//|   <Positions> 
//	//|      <TextString Text=""        *** ДЕТАЛИЗАЦИЯ ***        ""/>
//	//|      <TextString Text=""" + ТекстСтрока1 + """/> 
//	//|      <TextString Text=""" + ТекстСтрока11 + """/>
//	//|      <TextString Text=""" + ТекстПунктир + """/>
//	//|      <TextString Text=""" + ТекстСтрока2 + """/>
//	//|      <TextString Text=""" + ТекстСтрока21 + """/>
//	//|      <TextString Text=""" + ТекстПунктир + """/>
//	//|      <TextString Text=""" + ТекстСтрока3 + """/> 
//	//|      <TextString Text=""" + ТекстСтрока31 + """/> 
//	//|      <TextString Text=""" + ТекстПунктир + """/>
//	//|      <TextString Text=""" + ТекстСтрока4 + """/> 
//	//|      <TextString Text=""" + ТекстСтрока41 + """/> 
//	//|      <TextString Text=""" + ТекстСтрока42 + """/> 
//	//|      <TextString Text=""" + ТекстПунктир + """/>
//	//|      <TextString Text=""" + ТекстСтрока5 + """/>
//	//|      <TextString Text=""" + ТекстСтрока51 + """/> 
//	//|      <TextString Text=""" + ТекстСтрока52 + """/> 
//	//|      <TextString Text=""" + ТекстПунктир + """/>
//	//|      <TextString Text=""" + ТекстСтрока6 + """/>
//	//|      <TextString Text=""" + ТекстСтрока61 + """/>
//	//|      <TextString Text=""" + ТекстПунктир + """/>
//	//|      <TextString Text=""" + ТекстСтрока7 + """/>
//	//|      <TextString Text=""" + ТекстСтрока71 + """/>
//	//|      <TextString Text=""" + ТекстПунктир + """/>
//	//|      <TextString Text=""" + ТекстИтоговаяСкидка + """/>
//	//|      <TextString Text=""" + ТекстВыделение + """/>
//	//|      <TextString Text=""" + ТекстИтог + """/>
//	//|      <TextString Text=""" + ТекстВыделение + """/>
//	//|      <TextString Text=""" + ТекстНДС + """/> 
//	//|      <TextString Text=""        ""/>";
//	// 
//	
//	//// Товары
//	//Для Каждого СтрокаТовар Из ДокументЧек.Запасы Цикл
//	//    ТекстТовар = "" + Символы.ПС;
//	//    ТекстТовар = ТекстТовар + "<TextString Text=""" + Формат(СтрокаТовар.НомерСтроки, "ЧЦ=2; ЧВН=") + "     " 
//	//                    + Формат(СтрокаТовар.Количество, "ЧДЦ=3") + " * " + Формат(СтрокаТовар.Цена, "ЧДЦ=2") + " = " + Формат(СтрокаТовар.Сумма, "ЧДЦ=2") + """/>";
//	//    МК_СуммаСкидки = СтрокаТовар.СуммаАвтоматическойСкидки + СтрокаТовар.СуммаСкидкиНаценки;
//	//    
//	//    Если МК_СуммаСкидки <> 0 Тогда 
//	//        ТекстТовар = ТекстТовар + Символы.ПС + "<TextString Text="" СКИДКА: " + Формат(МК_СуммаСкидки, "ЧДЦ=2") + """/>";
//	//    КонецЕсли;
//	//    
//	//    ТекстТовар = ТекстТовар + Символы.ПС + "<TextString Text=""" + СтрокаТовар.Номенклатура.НаименованиеПолное + """/>";
//	//    
//	//    ТекстКопииЧека = ТекстКопииЧека + ТекстТовар;
//	//КонецЦикла;   
// 
//	//// Подвал
//	//ТекстКопииЧека = ТекстКопииЧека + Символы.ПС + "<TextString Text="" ИТОГ:                 " + Формат(ДокументЧек.СуммаДокумента, "ЧДЦ=2") + """/>
//	// |      <TextString Text=""  Сумма без НДС:       " +  Формат(ДокументЧек.СуммаДокумента, "ЧДЦ=2") + """/>
//	// |   </Positions>
//	// |</Document>";
//	
//	ТекстКопииЧека = ТекстКопииЧека + Символы.ПС +  """/>
//	 |   </Positions>
//	 |</Document>";
//    
//    Возврат ТекстКопииЧека;
//    
//КонецФункции

#КонецОбласти

#КонецОбласти
