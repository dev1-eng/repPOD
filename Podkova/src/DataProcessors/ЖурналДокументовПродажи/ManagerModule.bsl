#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Процедура ПриОпределенииКомандПодключенныхКОбъекту(Команды) Экспорт
	
	МассивКомандОтчетов = Команды.НайтиСтроки(Новый Структура("Вид", "Отчеты"));
	МассивКомандПечати = Команды.НайтиСтроки(Новый Структура("Вид", "Печать"));
	
	МенеджерОтклоненияОтУсловийПродаж = Метаданные.Отчеты.ОтклоненияОтУсловийПродаж.ПолноеИмя();
	МенеджерСостояниеРасчетовСКлиентами = Метаданные.Отчеты.СостояниеРасчетовСКлиентами.ПолноеИмя();
	МенеджерКарточкаРасчетовСКлиентами = Метаданные.Отчеты.КарточкаРасчетовСКлиентами.ПолноеИмя();
	МенеджерКарточкаРасчетовПоПереданнойВозвратнойТаре = Метаданные.Отчеты.КарточкаРасчетовПоПереданнойВозвратнойТаре.ПолноеИмя();
	МенеджерАнализЦенПоставщиков = Метаданные.Отчеты.АнализЦенПоставщиков.ПолноеИмя();
	
	Для каждого ТекКоманда Из МассивКомандОтчетов Цикл
		Если ТекКоманда.Менеджер = МенеджерОтклоненияОтУсловийПродаж Тогда
			ТекКоманда.Важность = "Обычное"
		КонецЕсли;
		Если ТекКоманда.Менеджер = МенеджерСостояниеРасчетовСКлиентами Тогда
			ТекКоманда.Важность = "Обычное";
			ТекКоманда.Порядок = 1;
		КонецЕсли;
		Если ТекКоманда.Менеджер = МенеджерКарточкаРасчетовСКлиентами Тогда
			ТекКоманда.Важность = "Обычное";
			ТекКоманда.Порядок = 2;
		КонецЕсли;
		Если ТекКоманда.Менеджер = МенеджерКарточкаРасчетовПоПереданнойВозвратнойТаре Тогда
			ТекКоманда.Порядок = 3;
		КонецЕсли;
		Если ТекКоманда.Менеджер = МенеджерАнализЦенПоставщиков Тогда
			ТекКоманда.Важность = "СмТакже";
			ТекКоманда.Порядок = 2;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекКоманда Из МассивКомандПечати Цикл
		ТекКоманда.ВидимостьВФормах = "СписокДокументов";
	КонецЦикла;
	
КонецПроцедуры

Процедура ОформитьНакладные(Параметры, АдресРезультата) Экспорт
	
	ОформитьРядНакладныхПоТаблицам(Параметры);
	Параметры.Удалить("ДокументыПоТипамНакладных");
	ПоместитьВоВременноеХранилище(Параметры, АдресРезультата);
	
КонецПроцедуры

Процедура СоздатьДокументПродажи(ПоляДокумента, ПараметрыОснования, МассивДокументов, ПараметрыФормирования) Экспорт
	
	МенеджерНакладной = Документы.РеализацияТоваровУслуг;
	
	ПечататьРеализациюТоваровУслуг   = ПараметрыФормирования.ПечататьРеализациюТоваровУслуг;
	ПечататьАктВыполненныхРабот = ПараметрыФормирования.ПечататьАктВыполненныхРабот;
	СоздаватьДокументПродажи    = ПараметрыФормирования.СоздаватьДокументПродажи;
	СоздаватьСчетФактуру        = ПараметрыФормирования.СоздаватьСчетФактуру;
	
	Если ПоляДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента Тогда
		МенеджерНакладной = Документы.ВозвратТоваровОтКлиента;
		НовыйДокумент = Документы.ВозвратТоваровОтКлиента.СоздатьДокумент();
	ИначеЕсли ПоляДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера Тогда
		МенеджерНакладной = Документы.ВозвратТоваровОтКлиента;
		НовыйДокумент = Документы.ВозвратТоваровОтКлиента.СоздатьДокумент();
	ИначеЕсли ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг Тогда
		НовыйДокумент = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		НовыйДокумент.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
		НовыйДокумент.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
	ИначеЕсли ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав Тогда
		НовыйДокумент = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		НовыйДокумент.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
		НовыйДокумент.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав;
	Иначе
		НовыйДокумент = Документы.АктВыполненныхРабот.СоздатьДокумент();
	КонецЕсли;
	
	НовыйДокумент.Дата = ТекущаяДатаСеанса();
	НовыйДокумент.Заполнить(ПараметрыОснования);
	
	Если ПоляДокумента.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента
		И ПоляДокумента.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера
		Тогда
		НовыйДокумент.СкидкиРассчитаны = Истина;
	КонецЕсли;
	
	Если ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг
		Или ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав Тогда
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(НовыйДокумент, МенеджерНакладной);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(НовыйДокумент, ПараметрыУказанияСерий);
	КонецЕсли;
	
	ДокументПроведен = Ложь;
	
	НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
	
	Если НовыйДокумент.ПроверитьЗаполнение() Тогда
		
		Если (ПечататьРеализациюТоваровУслуг
			И (ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг
				Или ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав))
			Или (ПечататьАктВыполненныхРабот
				И ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот) Тогда
			
			Печатать = Истина;
			
		Иначе
			
			Печатать = Ложь;
			
		КонецЕсли;
		
		Если СоздаватьДокументПродажи Тогда
			Попытка
				НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
				ДокументПроведен = Истина;
				МассивДокументов.Добавить(Новый Структура("Документ,Проведен,Печатать", НовыйДокумент.Ссылка, Истина, Печатать));
			Исключение
				МассивДокументов.Добавить(Новый Структура("Документ,Проведен,ЕстьОшибки", НовыйДокумент.Ссылка, Ложь, Истина));
			КонецПопытки;
		Иначе
			Печатать = Ложь;
			МассивДокументов.Добавить(Новый Структура("Документ,Проведен,Печатать", НовыйДокумент.Ссылка, Ложь, Печатать));
		КонецЕсли;
		
		Если ПоляДокумента.НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС
			И (ДокументПроведен
				И ((ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг
					Или ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав)
				И Не (ПоляДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
					Или ПоляДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента
					Или ПоляДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера))
			Или ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот)
			И СоздаватьСчетФактуру Тогда
			
			ИмяДокумента = УчетНДСУП.ПолноеИмяСчетФактурыВыданный();
			Если ЗначениеЗаполнено(ИмяДокумента) Тогда
				МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяДокумента);
				ДокументОбъект = МенеджерДокумента.СоздатьДокумент();
				ПараметрыРегистрации = УчетНДСУПКлиентСервер.ПараметрыРегистрацииСчетовФактурВыданных();
				ПараметрыРегистрации.Ссылка = НовыйДокумент.Ссылка;
				ПараметрыРегистрации.Дата = НовыйДокумент.Дата;
				ПараметрыРегистрации.Организация = НовыйДокумент.Организация;
				ПараметрыРегистрации.Контрагент = НовыйДокумент.Контрагент;
				ПараметрыРегистрации.Организация = НовыйДокумент.Организация;
				ПараметрыРегистрации.НалогообложениеНДС = НовыйДокумент.НалогообложениеНДС;
				ПараметрыРегистрации.РеализацияТоваров = Истина;
				ПараметрыРегистрации.РеализацияРаботУслуг = Истина;
				Результат = УчетНДСУП.ЗаполнитьСчетФактураВыданный(ДокументОбъект, ПараметрыРегистрации);
				Если Результат.Проведен Тогда
					МассивДокументов.Добавить(Новый Структура("Документ,Проведен,Печатать", ДокументОбъект.Ссылка, Истина, Ложь));
				Иначе
					МассивДокументов.Добавить(Новый Структура("Документ,Проведен,Печатать", ДокументОбъект.Ссылка, Ложь, Ложь));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		МассивДокументов.Добавить(Новый Структура("Документ,Проведен,ЕстьОшибки", НовыйДокумент.Ссылка, Ложь,Истина));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОформитьРядНакладныхПоТаблицам(ПараметрыФормированияДокументов)
	
	ДокументыПоТипамНакладных = ПараметрыФормированияДокументов.ДокументыПоТипамНакладных;
	СписокОшибок = ПараметрыФормированияДокументов.СписокОшибок;
	ПараметрыФормирования = ПараметрыФормированияДокументов.ПараметрыФормирования;
	
	ИспользоватьРеализациюПоНесколькимЗаказам = ПолучитьФункциональнуюОпцию("ИспользоватьРеализациюПоНесколькимЗаказам");
	ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам = ПолучитьФункциональнуюОпцию("ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам");
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормированияДокументов.Вставить("ИмяФормы", "Обработка.ЖурналДокументовПродажи.Форма.ФормаСозданныеДокументы");
	СозданныеДокументы = Новый СписокЗначений();
	
	СтруктураПоиска = СтруктураЗначащихРеквизитов();
	
	Для Каждого Таблица Из ДокументыПоТипамНакладных Цикл
		
		ПерваяСтрока = Таблица[0];
		Если ПерваяСтрока.СостояниеНакладной > 0 Тогда
			
			ЕстьВариантОформленияПродаж = Таблица.Колонки.Найти("ВариантОформленияПродажи") <> Неопределено;
			
			МассивСсылок = Таблица.ВыгрузитьКолонку("Ссылка");
			ПараметрыОснования = Новый Структура();
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ПерваяСтрока);
			Если ЕстьВариантОформленияПродаж
				И (ПерваяСтрока.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг
					Или ПерваяСтрока.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав) Тогда
				ПараметрыОснования.Вставить("СкладОтгрузки", ПараметрыФормирования.Склад);
				ПараметрыОснования.Вставить("ВариантОформленияПродажи", ПерваяСтрока.ВариантОформленияПродажи);
				ПараметрыОснования.Вставить("ПараметрыОформления", Новый Структура("ПоЗаказам, ПоОрдерам", Не ПараметрыФормирования.ПоОрдерам, ПараметрыФормирования.ПоОрдерам));
			КонецЕсли;
			
			Если ЕстьВариантОформленияПродаж
				И (
				((ПерваяСтрока.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг
						Или ПерваяСтрока.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав)
					И ИспользоватьРеализациюПоНесколькимЗаказам)
				Или (ПерваяСтрока.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот
					И ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам))
				Или (ПерваяСтрока.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента
					Или ПерваяСтрока.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера
					Или ПерваяСтрока.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтХранителя) Тогда
				
				РеквизитыРаспоряжения = ПолучитьРеквизитыРаспоряжений(МассивСсылок);
				РеквизитыШапки = Новый Структура();
				ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(РеквизитыШапки, СтруктураПоиска, Истина);
				ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(РеквизитыШапки, РеквизитыРаспоряжения, Истина);
				
				ПараметрыОснования.Вставить("РеквизитыШапки",    РеквизитыШапки);
				ПараметрыОснования.Вставить("ДокументОснование", МассивСсылок);
				
				ПараметрыОснования.Вставить("МассивЗаказов",     МассивСсылок);
				ПараметрыОснования.Вставить("ЗаполнятьПоОрдеру", ПараметрыФормирования.ПоОрдерам);
				
				СоздатьДокументПродажи(СтруктураПоиска, ПараметрыОснования, СозданныеДокументы,ПараметрыФормирования);
				
			Иначе
				
				Для Каждого ТекЭлемент Из МассивСсылок Цикл
					ПараметрыОснования.Вставить("ДокументОснование", ТекЭлемент);
					СоздатьДокументПродажи(СтруктураПоиска, ПараметрыОснования, СозданныеДокументы,ПараметрыФормирования);
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЕстьОшибки = Ложь;
	Для каждого Элемент Из СозданныеДокументы Цикл
		Если Элемент.Значение.Свойство("ЕстьОшибки",ЕстьОшибки) И ЕстьОшибки = Истина Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	ПараметрыФормы.Вставить("СозданныеДокументы", СозданныеДокументы);
	ПараметрыФормы.Вставить("ЕстьОшибкиСозданияДокументов", ЕстьОшибки = Истина);
	ПараметрыФормированияДокументов.Вставить("Параметры", ПараметрыФормы);
	
	Если ПараметрыФормирования.НеОткрыватьФормуСозданногоДокумента Тогда
		ПараметрыФормированияДокументов.Вставить("РежимПечатиДокументов", Истина);
	КонецЕсли;
	
	Владелец = Пользователи.АвторизованныйПользователь();
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, СозданныеДокументы.ВыгрузитьЗначения(), "ФормаСозданныеДокументыПродажи");
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция СтруктураЗначащихРеквизитов() Экспорт
	
	Возврат Новый Структура("
		|Партнер,
		|Контрагент,
		|Договор,
		|Организация,
		|Соглашение,
		|Сделка,
		|Склад,
		|Подразделение,
		|СкладОтгрузки,
		|ХозяйственнаяОперация,
		|ВалютаВзаиморасчетов,
		|НалогообложениеНДС,
		|ЦенаВключаетНДС,
		|ЗапрещеноВыбиратьГруппуСкладов,
		|ВариантОформленияПродажи,
		|СпособДоставки,
		|ПеревозчикПартнер,
		|АдресДоставки,
		|АдресДоставкиПеревозчика,
		|ВернутьМногооборотнуюТару,
		|СрокВозвратаМногооборотнойТары,
		|ТребуетсяЗалогЗаТару,
		|КалендарьВозвратаТары,
		|РассчитыватьДатуВозвратаТарыПоКалендарю,
		|НаправлениеДеятельности,
		|ПорядокРасчетов
		|");
		
КонецФункции

Функция ПолучитьРеквизитыРаспоряжений(МассивРаспоряжений) Экспорт
	
	СтруктураРеквизитов = Новый Структура();
	
	ЕстьДоступКЗаказамКлиентов = ПравоДоступа("Чтение", Метаданные.Документы.ЗаказКлиента);
	ЕстьДоступКЗаявкамНаВозврат = ПравоДоступа("Чтение", Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента);
	
	Если Не ЕстьДоступКЗаказамКлиентов
		И Не ЕстьДоступКЗаявкамНаВозврат Тогда
		Возврат СтруктураРеквизитов;
	КонецЕсли;
	
	ТекстыИсточниковДанных = Новый Массив();
	
	Если ЕстьДоступКЗаказамКлиентов Тогда
		ТекстЗапросаЗаказыКлиентов = 
		"	ВЫБРАТЬ
		|		ЗаказКлиента.Контрагент                            КАК Контрагент,
		|		ЗаказКлиента.Организация                           КАК Организация,
		|		ЗаказКлиента.БанковскийСчет                        КАК БанковскийСчет,
		|		ЗаказКлиента.БанковскийСчетКонтрагента             КАК БанковскийСчетКонтрагента,
		|		ЗаказКлиента.Грузоотправитель                      КАК Грузоотправитель,
		|		ЗаказКлиента.Грузополучатель                       КАК Грузополучатель,
		|		ЗаказКлиента.БанковскийСчетГрузоотправителя        КАК БанковскийСчетГрузоотправителя,
		|		ЗаказКлиента.БанковскийСчетГрузополучателя         КАК БанковскийСчетГрузополучателя,
		|		ЗаказКлиента.Касса                                 КАК Касса,
		|		ЗаказКлиента.ФормаОплаты                           КАК ФормаОплаты,
		|		ЗаказКлиента.СпособДоставки                        КАК СпособДоставки,
		|		ЗаказКлиента.АдресДоставкиЗначенияПолей            КАК АдресДоставкиЗначенияПолей,
		|		ЗаказКлиента.АдресДоставкиПеревозчикаЗначенияПолей КАК АдресДоставкиПеревозчикаЗначенияПолей,
		|		ЗаказКлиента.ЗонаДоставки                          КАК ЗонаДоставки,
		|		ЗаказКлиента.ВремяДоставкиС                        КАК ВремяДоставкиС,
		|		ЗаказКлиента.ВремяДоставкиПо                       КАК ВремяДоставкиПо,
		|		ЗаказКлиента.ДополнительнаяИнформацияПоДоставке    КАК ДополнительнаяИнформацияПоДоставке,
		|		ЗаказКлиента.ЦенаВключаетНДС                       КАК ЦенаВключаетНДС,
		|		ЗаказКлиента.Договор                               КАК Договор,
		|		ЗаказКлиента.Соглашение                            КАК Соглашение
		|	ПОМЕСТИТЬ ВТИсточникиДанных
		|	ИЗ
		|		Документ.ЗаказКлиента КАК ЗаказКлиента
		|	ГДЕ
		|		ЗаказКлиента.Ссылка В(&МассивРаспоряжений)";
		ТекстыИсточниковДанных.Добавить(ТекстЗапросаЗаказыКлиентов);
	КонецЕсли;
	Если ЕстьДоступКЗаявкамНаВозврат Тогда
		ТекстЗапросаЗаявкиНаВозврат = 
		"	ВЫБРАТЬ
		|		ЗаявкаНаВозвратТоваровОтКлиента.Контрагент,
		|		ЗаявкаНаВозвратТоваровОтКлиента.Организация,
		|		ЗаявкаНаВозвратТоваровОтКлиента.БанковскийСчет,
		|		ЗаявкаНаВозвратТоваровОтКлиента.БанковскийСчетКонтрагента,
		|		ЗаявкаНаВозвратТоваровОтКлиента.Грузоотправитель,
		|		ЗаявкаНаВозвратТоваровОтКлиента.Грузополучатель,
		|		ЗаявкаНаВозвратТоваровОтКлиента.БанковскийСчетГрузоотправителя,
		|		ЗаявкаНаВозвратТоваровОтКлиента.БанковскийСчетГрузополучателя,
		|		ЗаявкаНаВозвратТоваровОтКлиента.Касса,
		|		ЗаявкаНаВозвратТоваровОтКлиента.ФормаОплаты,
		|		ЗаявкаНаВозвратТоваровОтКлиента.СпособДоставки,
		|		ЗаявкаНаВозвратТоваровОтКлиента.АдресДоставкиЗначенияПолей,
		|		ЗаявкаНаВозвратТоваровОтКлиента.АдресДоставкиПеревозчикаЗначенияПолей,
		|		ЗаявкаНаВозвратТоваровОтКлиента.ЗонаДоставки,
		|		ЗаявкаНаВозвратТоваровОтКлиента.ВремяДоставкиС,
		|		ЗаявкаНаВозвратТоваровОтКлиента.ВремяДоставкиПо,
		|		ЗаявкаНаВозвратТоваровОтКлиента.ДополнительнаяИнформацияПоДоставке,
		|		ЗаявкаНаВозвратТоваровОтКлиента.ЦенаВключаетНДС,
		|		ЗаявкаНаВозвратТоваровОтКлиента.Договор,
		|		ЗаявкаНаВозвратТоваровОтКлиента.Соглашение
		|	//&ПОМЕСТИТЬ ВТИсточникиДанных
		|	ИЗ
		|		Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозвратТоваровОтКлиента
		|	ГДЕ
		|		ЗаявкаНаВозвратТоваровОтКлиента.Ссылка В(&МассивРаспоряжений)";
		Если ТекстыИсточниковДанных.Количество() = 0 Тогда
			ТекстЗапросаЗаявкиНаВозврат = СтрЗаменить(ТекстЗапросаЗаявкиНаВозврат, "//&ПОМЕСТИТЬ ВТИсточникиДанных", "ПОМЕСТИТЬ ВТИсточникиДанных");
		КонецЕсли;
		ТекстыИсточниковДанных.Добавить(ТекстЗапросаЗаявкиНаВозврат);
	КонецЕсли;
	
	ТекстЗапросаИсточникиДанных = СтрСоединить(ТекстыИсточниковДанных, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|						КОГДА ЗаказКлиента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|							ТОГДА ЗаказКлиента.БанковскийСчет
	|						ИНАЧЕ NULL
	|					КОНЕЦ) = 1
	|				И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Организация) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.БанковскийСчет)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|	КОНЕЦ КАК БанковскийСчет,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|						КОГДА ЗаказКлиента.БанковскийСчетКонтрагента <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|							ТОГДА ЗаказКлиента.БанковскийСчетКонтрагента
	|						ИНАЧЕ NULL
	|					КОНЕЦ) = 1
	|				И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Контрагент) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.БанковскийСчетКонтрагента)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК БанковскийСчетКонтрагента,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|					КОГДА ЗаказКлиента.Грузоотправитель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|						ТОГДА ЗаказКлиента.Грузоотправитель
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.Грузоотправитель)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Грузоотправитель,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|					КОГДА ЗаказКлиента.Грузополучатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|						ТОГДА ЗаказКлиента.Грузополучатель
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.Грузополучатель)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|						КОГДА ЗаказКлиента.БанковскийСчетГрузоотправителя <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|							ТОГДА ЗаказКлиента.БанковскийСчетГрузоотправителя
	|						ИНАЧЕ NULL
	|					КОНЕЦ) = 1
	|				И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|						КОГДА ЗаказКлиента.Грузоотправитель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|							ТОГДА ЗаказКлиента.Грузоотправитель
	|						ИНАЧЕ NULL
	|					КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.БанковскийСчетГрузоотправителя)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК БанковскийСчетГрузоотправителя,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|						КОГДА ЗаказКлиента.БанковскийСчетГрузополучателя <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|							ТОГДА ЗаказКлиента.БанковскийСчетГрузополучателя
	|						ИНАЧЕ NULL
	|					КОНЕЦ) = 1
	|				И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|						КОГДА ЗаказКлиента.Грузополучатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|							ТОГДА ЗаказКлиента.Грузополучатель
	|						ИНАЧЕ NULL
	|					КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.БанковскийСчетГрузополучателя)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК БанковскийСчетГрузополучателя,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|					КОГДА ЗаказКлиента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
	|						ТОГДА ЗаказКлиента.Касса
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.Касса)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
	|	КОНЕЦ КАК Касса,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.ФормаОплаты) > 1
	|		ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка)
	|		ИНАЧЕ
	|			МИНИМУМ(ЗаказКлиента.ФормаОплаты)
	|	КОНЕЦ КАК ФормаОплаты,	
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫРАЗИТЬ(ЗаказКлиента.АдресДоставкиЗначенияПолей КАК СТРОКА(1000))) = 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК АдресДоставкиЗначенияПолей,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|					КОГДА ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|							ИЛИ ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
	|						ТОГДА ВЫРАЗИТЬ(ЗаказКлиента.АдресДоставкиПеревозчикаЗначенияПолей КАК СТРОКА(1000))
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК АдресДоставкиПеревозчикаЗначенияПолей,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|					КОГДА (ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
	|							ИЛИ ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
	|							И ЗаказКлиента.ЗонаДоставки <> ЗНАЧЕНИЕ(Справочник.ЗоныДоставки.ПустаяСсылка)
	|						ТОГДА ЗаказКлиента.ЗонаДоставки
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.ЗонаДоставки)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЗоныДоставки.ПустаяСсылка)
	|	КОНЕЦ КАК ЗонаДоставки,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|					КОГДА ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
	|							ИЛИ ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
	|						ТОГДА ЗаказКлиента.ВремяДоставкиС
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.ВремяДоставкиС)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ВремяДоставкиС,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|					КОГДА ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
	|							ИЛИ ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
	|						ТОГДА ЗаказКлиента.ВремяДоставкиПо
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.ВремяДоставкиПо)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ВремяДоставкиПо,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫРАЗИТЬ(ЗаказКлиента.ДополнительнаяИнформацияПоДоставке КАК СТРОКА(1000))) = 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДополнительнаяИнформацияПоДоставке,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.ЦенаВключаетНДС) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.ЦенаВключаетНДС)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Договор) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.Договор)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК Договор,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Соглашение) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.Соглашение)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
	|	КОНЕЦ КАК Соглашение
	|ПОМЕСТИТЬ ВТРеквизитыШапки
	|ИЗ
	|	ВТИсточникиДанных КАК ЗаказКлиента
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШапкаДокумента.БанковскийСчет КАК БанковскийСчет,
	|	ШапкаДокумента.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|	ШапкаДокумента.Грузоотправитель КАК Грузоотправитель,
	|	ШапкаДокумента.Грузополучатель КАК Грузополучатель,
	|	ШапкаДокумента.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
	|	ШапкаДокумента.БанковскийСчетГрузополучателя КАК БанковскийСчетГрузополучателя,
	|	ШапкаДокумента.Касса КАК Касса,
	|	ШапкаДокумента.ФормаОплаты КАК ФормаОплаты,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.АдресДоставкиЗначенияПолей
	|			ТОГДА ШапкаЗаказа.АдресДоставкиЗначенияПолей
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК АдресДоставкиЗначенияПолей,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.АдресДоставкиПеревозчикаЗначенияПолей
	|			ТОГДА ШапкаЗаказа.АдресДоставкиПеревозчикаЗначенияПолей
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК АдресДоставкиПеревозчикаЗначенияПолей,
	|	ШапкаДокумента.ЗонаДоставки КАК ЗонаДоставки,
	|	ШапкаДокумента.ВремяДоставкиС КАК ВремяДоставкиС,
	|	ШапкаДокумента.ВремяДоставкиПо КАК ВремяДоставкиПо,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.ДополнительнаяИнформацияПоДоставке
	|			ТОГДА ШапкаЗаказа.ДополнительнаяИнформацияПоДоставке
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ДополнительнаяИнформацияПоДоставке,
	|	ШапкаДокумента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ШапкаДокумента.Договор КАК Договор,
	|	ШапкаДокумента.Соглашение КАК Соглашение
	|ИЗ
	|	ВТРеквизитыШапки КАК ШапкаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсточникиДанных КАК ШапкаЗаказа
	|		ПО ШапкаДокумента.ФормаОплаты = ШапкаЗаказа.ФормаОплаты
	|";
	
	ТекстыЗапросов = Новый Массив();
	ТекстыЗапросов.Добавить(ТекстЗапросаИсточникиДанных);
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	Запрос = Новый Запрос();
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	
	Запрос.УстановитьПараметр("МассивРаспоряжений", МассивРаспоряжений);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	СтруктураРеквизитов.Вставить("БанковскийСчет",                 Выборка.БанковскийСчет);
	СтруктураРеквизитов.Вставить("БанковскийСчетКонтрагента",      Выборка.БанковскийСчетКонтрагента);
	СтруктураРеквизитов.Вставить("Грузоотправитель",               Выборка.Грузоотправитель);
	СтруктураРеквизитов.Вставить("Грузополучатель",                Выборка.Грузополучатель);
	СтруктураРеквизитов.Вставить("БанковскийСчетГрузоотправителя", Выборка.БанковскийСчетГрузоотправителя);
	СтруктураРеквизитов.Вставить("БанковскийСчетГрузополучателя",  Выборка.БанковскийСчетГрузополучателя);
	СтруктураРеквизитов.Вставить("Касса",                          Выборка.Касса);
	СтруктураРеквизитов.Вставить("ФормаОплаты",                    Выборка.ФормаОплаты);
	СтруктураРеквизитов.Вставить("ЦенаВключаетНДС",                Выборка.ЦенаВключаетНДС);
	СтруктураРеквизитов.Вставить("Договор",                        Выборка.Договор);
	СтруктураРеквизитов.Вставить("Соглашение",                     Выборка.Соглашение);
	
	СтруктураРеквизитов.Вставить("АдресДоставкиЗначенияПолей",            Выборка.АдресДоставкиЗначенияПолей);
	СтруктураРеквизитов.Вставить("АдресДоставкиПеревозчикаЗначенияПолей", Выборка.АдресДоставкиПеревозчикаЗначенияПолей);
	СтруктураРеквизитов.Вставить("ЗонаДоставки",                          Выборка.ЗонаДоставки);
	СтруктураРеквизитов.Вставить("ВремяДоставкиС",                        Выборка.ВремяДоставкиС);
	СтруктураРеквизитов.Вставить("ВремяДоставкиПо",                       Выборка.ВремяДоставкиПо);
	СтруктураРеквизитов.Вставить("ДополнительнаяИнформацияПоДоставке",    Выборка.ДополнительнаяИнформацияПоДоставке);
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

Функция ИмяФормыСпискаОформляемыхНакладных()
	
	Возврат "Обработка.ЖурналДокументовПродажи.Форма.КОформлениюНакладных";
	
КонецФункции

Функция ИмяФормыРабочееМестоКОформлению()
	
	Возврат "Обработка.ЖурналДокументовПродажи.Форма.КОформлениюНакладныхВозвратов";
	
КонецФункции

#Область ФормированиеГиперссылкиВЖурналеДокументовПродажи

// Возвращает текст гиперссылки перехода из журнала документов в рабочее место оформления накладных.
//
// Параметры:
//	Параметры - Структура - параметры формирования текста гиперссылки.
//
// ВозвращаемоеЗначение:
//	ФорматированнаяСтрока, Неопределено - текст гиперссылки перехода в рабочее место оформления отчетов по комиссии.
//
Функция СформироватьГиперссылкуКОформлению(Параметры) Экспорт
	
	МассивСтрок = Новый Массив;
	
	// Накладные
	
	Организация = Параметры.Организация;
	Склад       = Параметры.Склад;
	
	ИспользоватьРасширенныеВозможностиЗаказаКлиента = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
	
	ПоказыватьЗаказы = (ИспользоватьРасширенныеВозможностиЗаказаКлиента
							И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыКлиентов)
							И ПравоДоступа("Чтение", Метаданные.Документы.ЗаказКлиента)
							И ПравоДоступа("Чтение", Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента)
							И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКОтгрузке))
						И (ПравоДоступа("Добавление", Метаданные.Документы.АктВыполненныхРабот)
							ИЛИ ПравоДоступа("Добавление", Метаданные.Документы.РеализацияТоваровУслуг));
	
	Если ПоказыватьЗаказы Тогда
		
		ТекстГиперссылки = НСтр("ru = 'Накладные'");
		
		Если ЕстьЗаказыКОформлению(Организация, Склад) Тогда
			Гиперссылка = Новый ФорматированнаяСтрока(ТекстГиперссылки, , , , ИмяФормыСпискаОформляемыхНакладных());
		Иначе
			Гиперссылка = Новый ФорматированнаяСтрока(ТекстГиперссылки, , ЦветаСтиля.НезаполненноеПолеТаблицы, ,
				ИмяФормыСпискаОформляемыхНакладных());
		КонецЕсли;
		
		ДобавитьГиперссылкуВСписок(Гиперссылка, МассивСтрок);
		
	КонецЕсли;
	
	// Возвраты
	
	ПоказыватьНакладные = ПравоДоступа("Чтение", Метаданные.Документы.ВозвратТоваровОтКлиента)
		И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаявкиНаВозвратТоваровОтКлиентов);
	
	ПоказыватьРаспоряженияНаПриемку = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКПоступлению);
		
	
	Если ПоказыватьНакладные
			И ПоказыватьРаспоряженияНаПриемку Тогда
		
		ТекстГиперссылки = НСтр("ru = 'Возвраты'");
		
		Если ЕстьРаспоряженияНаПриемкуПоВозврату(Организация, Склад)
				Тогда
			Гиперссылка = Новый ФорматированнаяСтрока(ТекстГиперссылки,
				,
				,
				,
				ИмяФормыРабочееМестоКОформлению());
		Иначе
			Гиперссылка = Новый ФорматированнаяСтрока(ТекстГиперссылки,
				,
				ЦветаСтиля.НезаполненноеПолеТаблицы,
				,
				ИмяФормыРабочееМестоКОформлению());
		КонецЕсли;
		
		ДобавитьГиперссылкуВСписок(Гиперссылка, МассивСтрок);
		
	КонецЕсли;
	
	Если МассивСтрок.Количество() > 0 Тогда
		Возврат Новый ФорматированнаяСтрока(МассивСтрок);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура СформироватьГиперссылкуКОформлениюФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	Результат = Новый Структура("КОформлению, СмТакжеВРаботе");
	Результат.КОформлению = ОбщегоНазначенияУТ.СформироватьГиперссылкуКОформлению(Параметры[0], Параметры[1]);
	
	МассивМенеджеровРасчетаСмТакжеВРаботе = Новый Массив();
	МассивМенеджеровРасчетаСмТакжеВРаботе.Добавить("Документ.ЗаказКлиента");
	МассивМенеджеровРасчетаСмТакжеВРаботе.Добавить("Документ.ЗаявкаНаВозвратТоваровОтКлиента");
	МассивМенеджеровРасчетаСмТакжеВРаботе.Добавить("Документ.ДоверенностьВыданная");
	
	ДополнитьМассивМенеджеровРасчетаСмТакжеВРаботеЛокализация(МассивМенеджеровРасчетаСмТакжеВРаботе);
	
	Результат.СмТакжеВРаботе = ОбщегоНазначенияУТ.СформироватьГиперссылкуСмТакжеВРаботе(МассивМенеджеровРасчетаСмТакжеВРаботе, Параметры[1]);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ДобавитьГиперссылкуВСписок(Гиперссылка, МассивСтрок)
	
	Если ЗначениеЗаполнено(Гиперссылка) Тогда
		Если МассивСтрок.Количество() > 0 Тогда
			МассивСтрок.Добавить("; ");
		КонецЕсли;
		МассивСтрок.Добавить(Гиперссылка);
	КонецЕсли;

КонецПроцедуры

Функция ЕстьРаспоряженияНаПриемкуПоВозврату(Организация, Склад)
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКПоступлению) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ОстаткиРегистра.ДокументПоступления
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.Остатки(,
	|		(ДокументПоступления ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|			ИЛИ ДокументПоступления ССЫЛКА Документ.ВозвратТоваровОтКлиента)
	|		//&УсловиеОтбораПоСкладу
	|		//&УсловиеОтбораПоОрганизации
	|		) КАК ОстаткиРегистра
	|ГДЕ
	|	ОстаткиРегистра.КОформлениюОрдеровОстаток <> 0
	|	ИЛИ ОстаткиРегистра.КОформлениюПоступленийПоОрдерамОстаток <> 0
	|	ИЛИ ОстаткиРегистра.КОформлениюНакладныхПоРаспоряжениюОстаток <> 0
	|	И (НЕ ОстаткиРегистра.ДокументПоступления ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|		ИЛИ (ОстаткиРегистра.ДокументПоступления ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|			И ВЫРАЗИТЬ(ОстаткиРегистра.ДокументПоступления КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).ХозяйственнаяОперация <> 
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтХранителя)))";
	
	Если ЗначениеЗаполнено(Склад) Тогда
		ОтборПоСкладу = "И Склад = &Склад";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//&УсловиеОтбораПоСкладу", ОтборПоСкладу);
	КонецЕсли;
	Если ЗначениеЗаполнено(Организация) Тогда
		ОтборПоОрганизации = 
		"И (ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Организация = &Организация
		|	ИЛИ ВЫРАЗИТЬ(ДокументПоступления КАК Документ.ВозвратТоваровОтКлиента).Организация = &Организация)";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//&УсловиеОтбораПоОрганизации", ОтборПоОрганизации);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции


// Возвращает признак необходимости оформления накладные продаж по складу организации.
//
// Параметры;
//	Организация - СправочникСсылка.Организации - организация, для которой проверяется наличие накладных.
//	Склад       - СправочникСсылка.Склады      - склад,  для которого проверяется наличие накладных.
//
// ВозвращаемоеЗначение:
//	Булево - Истина, необходимо оформить накладные продаж по складу организации.
//
Функция ЕстьЗаказыКОформлению(Организация = Неопределено, Склад = Неопределено)
	
	ТекстЗапроса = ТекстЗапросаЗаказыКОформлению(Организация, Склад);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Склад",       Склад);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает текст запроса, который используется для получения данных об оформляемых накладных по продажам.
//
// Параметры;
//	Организация - СправочникСсылка.Организации - организация, по которой требуется оформить накладные.
//	Склад       - СправочникСсылка.Склады      - склад, по которому требуется оформить накладные.
//
// ВозвращаемоеЗначение:
//	Строка - текст запроса, который используется для получения данных об оформляемых накладных по продажам.
//
Функция ТекстЗапросаЗаказыКОформлению(Организация = Неопределено, Склад = Неопределено)
	
	ИспользуютсяПередачиНаХранение = Ложь;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ИСТИНА КАК ПолеВыборки
	|ГДЕ
	|	(ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА КАК ПолеВыборки
	|		ИЗ
	|			РегистрНакопления.ТоварыКОтгрузке.Остатки(, (Склад = &Склад
	|				ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	|				И ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
	|				//&УсловиеОтбораПоДокументуПередачи
	|			) КАК ТоварыКОтгрузке
	|		ГДЕ
	|			(ТоварыКОтгрузке.КОтгрузкеОстаток - ТоварыКОтгрузке.СобраноОстаток > 0
	|				ИЛИ ТоварыКОтгрузке.КОформлениюОстаток > 0)
	|			И ТоварыКОтгрузке.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|			И ТоварыКОтгрузке.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке <= &ТекущаяДата
	|			И &УсловиеОтбораОрганизацияТоварыКОтгрузке)
	|	ИЛИ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА КАК ПолеВыборки
	|		ИЗ
	|			РегистрНакопления.ТоварыКОтгрузке.Остатки(, (Склад = &Склад
	|				ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	|				И ДокументОтгрузки В
	|					(ВЫБРАТЬ
	|						РаспоряженияНаОформление.Ссылка
	|					ИЗ
	|						Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК РаспоряженияНаОформление
	|					ГДЕ
	|						ИСТИНА
	|						//&УсловиеОтбораПоВозврату
	|						//&УсловиеОтбораОрганизацияЗаявкиНаВозврат
	|					)
	|			) КАК ТоварыКОтгрузке
	|		ГДЕ
	|			(ТоварыКОтгрузке.КОтгрузкеОстаток - ТоварыКОтгрузке.СобраноОстаток > 0
	|				ИЛИ ТоварыКОтгрузке.КОформлениюОстаток > 0)
	|			И ТоварыКОтгрузке.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|			И ТоварыКОтгрузке.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке <= &ТекущаяДата
	|			И &УсловиеОтбораОрганизацияТоварыКОтгрузке)
	|	ИЛИ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА КАК ПолеВыборки
	|		ИЗ
	|			РегистрНакопления.ТоварыКОтгрузке.Остатки(, (Склад = &Склад
	|				ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	|				И ДокументОтгрузки В
	|					(ВЫБРАТЬ
	|						РаспоряженияНаОформление.Ссылка
	|					ИЗ
	|						Документ.ЗаказКлиента КАК РаспоряженияНаОформление
	|					ГДЕ
	|						ИСТИНА
	|						//&УсловиеОтбораПоПередаче
	|						//&УсловиеОтбораОрганизацияЗаказыКлиентов
	|					)
	|			) КАК ТоварыКОтгрузке
	|		ГДЕ
	|			(ТоварыКОтгрузке.КОтгрузкеОстаток - ТоварыКОтгрузке.СобраноОстаток > 0
	|				ИЛИ ТоварыКОтгрузке.КОформлениюОстаток > 0)
	|			И ТоварыКОтгрузке.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|			И ТоварыКОтгрузке.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке <= &ТекущаяДата)
	|	ИЛИ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрНакопления.ЗаказыКлиентов.Остатки(, (Склад = &Склад
	|				ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	|				И ЗаказКлиента В
	|					(ВЫБРАТЬ
	|						РаспоряженияНаОформление.Ссылка КАК Ссылка
	|					ИЗ
	|						Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК РаспоряженияНаОформление
	|					ГДЕ
	|						ИСТИНА
	|						//&УсловиеОтбораПоВозврату
	|						//&УсловиеОтбораОрганизацияЗаявкиНаВозврат
	|					)
	|			) КАК ЗаказыКлиентов
	|		ГДЕ
	|			ЗаказыКлиентов.КОформлениюОстаток > 0)
	|	ИЛИ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрНакопления.ЗаказыКлиентов.Остатки(, (Склад = &Склад
	|				ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	|				И ЗаказКлиента В
	|					(ВЫБРАТЬ
	|						РаспоряженияНаОформление.Ссылка КАК Ссылка
	|					ИЗ
	|						Документ.ЗаказКлиента КАК РаспоряженияНаОформление
	|					ГДЕ
	|						ИСТИНА
	|						//&УсловиеОтбораПоПередаче
	|						//&УсловиеОтбораОрганизацияЗаказыКлиентов
	|					)
	|			) КАК ЗаказыКлиентов
	|		ГДЕ
	|			ЗаказыКлиентов.КОформлениюОстаток > 0))";
	
	Если Не ИспользуютсяПередачиНаХранение Тогда
		
		УсловиеОтбора = "И РаспоряженияНаОформление.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи)";
		ТекстЗапроса  = СтрЗаменить(ТекстЗапроса, "//&УсловиеОтбораПоПередаче", УсловиеОтбора);
		
		УсловиеОтбора = "И РаспоряженияНаОформление.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтХранителя)";
		ТекстЗапроса  = СтрЗаменить(ТекстЗапроса, "//&УсловиеОтбораПоВозврату", УсловиеОтбора);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//&УсловиеОтбораПоДокументуПередачи", "");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		УсловиеОтбора = "
		|		И ВЫРАЗИТЬ(РаспоряженияНаОформление.Ссылка КАК Документ.ЗаказКлиента).Организация = &Организация";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"//&УсловиеОтбораОрганизацияЗаказыКлиентов", УсловиеОтбора);
		
		УсловиеОтбора = "
		|		И ВЫРАЗИТЬ(РаспоряженияНаОформление.Ссылка КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Организация = &Организация";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"//&УсловиеОтбораОрганизацияЗаявкиНаВозврат", УсловиеОтбора);
		
		УсловиеОтбора = "
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Организация
		|			&УсловиеОтбораПоОрганизацииПередачи
		|		КОНЕЦ = &Организация";
		
		Если Не ИспользуютсяПередачиНаХранение Тогда
			УсловиеОтбора = СтрЗаменить(УсловиеОтбора, "&УсловиеОтбораПоОрганизацииПередачи", "");
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбораОрганизацияТоварыКОтгрузке", УсловиеОтбора);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И &УсловиеОтбораОрганизацияЗаказы", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И &УсловиеОтбораОрганизацияТоварыКОтгрузке", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Локализация

Процедура ДополнитьМассивМенеджеровРасчетаСмТакжеВРаботеЛокализация(МассивМенеджеровРасчетаСмТакжеВРаботе)
	
	//++ Локализация
	МассивМенеджеровРасчетаСмТакжеВРаботе.Добавить("Документ.ТранспортнаяНакладная");
	МассивМенеджеровРасчетаСмТакжеВРаботе.Добавить("Обработка.ЖурналДокументовНДС");
	//-- Локализация
	
	Возврат;
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт

КонецПроцедуры

#КонецОбласти

#КонецЕсли
