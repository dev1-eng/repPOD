#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не СервисДоставки.ПравоРаботыССервисомДоставки(Истина) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("ТипГрузоперевозки", ТипГрузоперевозки);
	
	Если НЕ ЗначениеЗаполнено(ТипГрузоперевозки) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не выбран тип грузоперевозки'"));
		Отказ = Истина;
		Возврат;
	ИначеЕсли НЕ СервисДоставки.ТипГрузоперевозкиДоступен(ТипГрузоперевозки) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Выбранный тип грузоперевозки не доступен'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДоступнаОтправкаЗаказовНаДоставку = СервисДоставки.ПравоОтправкиЗаказовНаДоставкуПеревозчику();
	
	УстановитьУсловноеОформление();
	
	Параметры.Свойство("РежимМастера", РежимМастера);
	Параметры.Свойство("ИдентификаторЗаказа", ИдентификаторЗаказа);
	Параметры.Свойство("ДокументОснование", ДокументОснование);
	Параметры.Свойство("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	
	Если ЗначениеЗаполнено(РежимМастера) И Не ЗначениеЗаполнено(ИдентификаторЗаказа) Тогда
		ТекстСообщения = НСтр("ru = 'Идентификатор заказа не указан. Работа с заказом на доставку невозможна.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ОрганизацияБизнесСетиСсылка);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСпискиВыбора();
	
	Если РежимМастера = 0 Тогда
		
		Если Параметры.Свойство("ПараметрыЗаказа") Тогда
			ПараметрыЗаказа = Параметры.ПараметрыЗаказа;
			ПараметрыЗаказа.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
			ПроверитьПараметрыЗаказа(ПараметрыЗаказа, Отказ);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ДокументОснование) Тогда
			ПараметрыЗаказа = ПараметрыЗаказаНаДоставкуПоДокументуОснованию(ТипГрузоперевозки, ДокументОснование);
		Иначе
			ПараметрыЗаказа = ПараметрыЗаказаНаДоставкуПоУмолчанию(ТипГрузоперевозки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОрганизацияБизнесСетиСсылка) Тогда
			ПараметрыЗаказа.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
		КонецЕсли;
		
		ОбработатьПараметры(ПараметрыЗаказа);
		
		Если ПараметрыЗаказа.Свойство("ТоварныйСостав") Тогда
			Для Каждого ТекСтрока Из ПараметрыЗаказа.ТоварныйСостав Цикл
				НоваяСтрока = ТоварныйСостав.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			КонецЦикла;
		КонецЕсли;
		
		КлючИдемпотентности = Новый УникальныйИдентификатор();
		
	КонецЕсли;
	
	СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ОрганизацияБизнесСетиСсылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьЗначенияПоУмолчанию();
	
	Если РежимМастера = 0
		ИЛИ РежимМастера = 1 Тогда
		
		ФоновоеЗаданиеПолучитьУслугиТарифов = ПолучитьУслугиТарифовВФоне();
		ТарифыУстановитьРежимСортировки(ТарифыРежимСортировки);
		
	КонецЕсли;
	
	Если РежимМастера <> 0 Тогда
		
		ФоновоеЗаданиеПолучитьЗаказНаДоставку = ПолучитьЗаказНаДоставкуВФоне();
		
	КонецЕсли;
	
	ПереключательРасшифровки = ?(ГрузКоличествоГрузовыхМест = 1, 0, 1);
	СформироватьПредставлениеДокументаОснования();
	УстановитьВидимостьДоступность();
	СформироватьЗаголовокФормы();
	ОформитьЭлементыУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьЗаголовок();
	УстановитьВидимостьДоступностьНаСтраницеОсновная();
	УстановитьВидимостьДоступностьНаСтраницеПараметровГруза();
	УстановитьВидимостьДоступностьНаСтраницеПараметрыТарифа();
	УстановитьВидимостьДоступностьНаСтраницеКарточки();
	УстановитьВидимостьДоступностьНаСтраницеТарифы();

	ОбновитьФормуДляДокументаОснования();
	СформироватьПредставлениеТарифаИГрузоперевозчика();
	
	Если ЗначениеЗаполнено(ФоновоеЗаданиеПолучитьУслугиТарифов) Тогда
		ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
		ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьУслугиТарифов();
		ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение услуг тарифов'");
		
		ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФоновоеЗаданиеПолучитьЗаказНаДоставку) Тогда
		ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
		ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказНаДоставку();
		ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение данных по заказу на доставку'");
		
		ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФоновоеЗаданиеПолучитьТипыГрузоперевозки) Тогда
		ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
		ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТипыГрузоперевозки();
		ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение типов грузоперевозки'");
		
		ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации);
	КонецЕсли;
	
	// Если создание нового заказа, то переходим на незаполненную страницу
	Если РежимМастера = 0 Тогда
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			ПерейтиКТекущемуШагуМастера(Ложь);
		ИначеЕсли ТипГрузоперевозки = 1 Тогда
			ЕстьОшибки = Ложь;
			ПроверитьВремяОтгрузки(ЕстьОшибки, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект),
			НСтр("ru = 'Данные были изменены. Сохранить изменения?'"),
			РежимДиалогаВопрос.ДаНетОтмена);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Отказ = Ложь;
		СоздатьИзменитьЗаказНаДоставку(,Истина);
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область СтраницаОсновное

&НаКлиенте
Процедура ДокументыОснованияПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, 
	СтандартнаяОбработка)
	
	Если НавигационнаяСсылка = "ИзменитьДокументыОснования" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуВыбораДокументаОснования();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ОтправительКонтрагентЭтоОрганизация Тогда
		ОткрытьФормуВыбора("ОрганизацияСервисДоставки", Элемент.Имя + "Ссылка");
	Иначе
		ОткрытьФормуВыбора("КонтрагентСервисДоставки", Элемент.Имя + "Ссылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПолучательКонтрагентЭтоОрганизация Тогда
		ОткрытьФормуВыбора("ОрганизацияСервисДоставки", Элемент.Имя + "Ссылка");
	Иначе
		ОткрытьФормуВыбора("КонтрагентСервисДоставки", Элемент.Имя + "Ссылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = 1 Тогда
		ОткрытьФормуВыбора("ОрганизацияСервисДоставки", Элемент.Имя + "Ссылка");
	ИначеЕсли ВыбранноеЗначение = 2 Тогда
		ОткрытьФормуВыбора("КонтрагентСервисДоставки", Элемент.Имя + "Ссылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = 1 Тогда
		ОткрытьФормуВыбора("ОрганизацияСервисДоставки", Элемент.Имя + "Ссылка");
	ИначеЕсли ВыбранноеЗначение = 2 Тогда
		ОткрытьФормуВыбора("КонтрагентСервисДоставки", Элемент.Имя + "Ссылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КонтрагентОткрытие(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КонтрагентОткрытие(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьРеквизит(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьРеквизит(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОтбора = Новый Структура(); 
	
	Если ОтправительКонтрагентЭтоОрганизация Тогда
		ЗаполнитьПараметрыОтбораКонтактногоЛицаОрганизации(ПараметрыОтбора, ОтправительКонтрагентСсылка);
		ОткрытьФормуВыбора("КонтактноеЛицоОрганизацииСервисДоставки", Элемент.Имя + "Ссылка", ПараметрыОтбора);
	Иначе
		ЗаполнитьПараметрыОтбораКонтактногоЛицаКонтрагента(ПараметрыОтбора, ОтправительКонтрагентСсылка);
		ОткрытьФормуВыбора("КонтактноеЛицоКонтрагентаСервисДоставки", Элемент.Имя + "Ссылка", ПараметрыОтбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОтбора = Новый Структура(); 
	
	Если ПолучательКонтрагентЭтоОрганизация Тогда
		ЗаполнитьПараметрыОтбораКонтактногоЛицаОрганизации(ПараметрыОтбора, ПолучательКонтрагентСсылка);
		ОткрытьФормуВыбора("КонтактноеЛицоОрганизацииСервисДоставки", Элемент.Имя + "Ссылка", ПараметрыОтбора);
	Иначе
		ЗаполнитьПараметрыОтбораКонтактногоЛицаКонтрагента(ПараметрыОтбора, ПолучательКонтрагентСсылка);
		ОткрытьФормуВыбора("КонтактноеЛицоКонтрагентаСервисДоставки", Элемент.Имя + "Ссылка", ПараметрыОтбора);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОтбораКонтактногоЛицаКонтрагента(ПараметрыОтбора, ПолучательКонтрагентСсылка)
	СервисДоставкиПереопределяемый.ЗаполнитьПараметрыОтбораКонтактногоЛицаКонтрагента(ПараметрыОтбора,
		ПолучательКонтрагентСсылка);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОтбораКонтактногоЛицаОрганизации(ПараметрыОтбора, ПолучательКонтрагентСсылка)
	СервисДоставкиПереопределяемый.ЗаполнитьПараметрыОтбораКонтактногоЛицаОрганизации(ПараметрыОтбора,
		ПолучательКонтрагентСсылка);
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактноеЛицоОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьРеквизит(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактноеЛицоОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьРеквизит(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры   

&НаКлиенте
Процедура ОтправительДатаПлановойОтгрузкиПриИзменении(Элемент)
	
	УстановитьДатуОтгрузки(ДатаОтгрузки);
	Если ТипГрузоперевозки = 1 Тогда
		ЕстьОшибки = Ложь;
		ПроверитьВремяОтгрузки(ЕстьОшибки, Истина);
	КонецЕсли;
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяОтгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораВремениИДаты(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяДоставкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораВремениИДаты(2);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактноеЛицоТелефонПриИзменении(Элемент)
	
	ОбработатьИзменениеКонтактнойИнформации(Элемент, "Телефон");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактноеЛицоТелефонОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТелефонНачалоВыбора(Элемент, ОтправительКонтрагентЭтоОрганизация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактноеЛицоТелефонПриИзменении(Элемент)
	
	ОбработатьИзменениеКонтактнойИнформации(Элемент, "Телефон");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательКонтактноеЛицоТелефонОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТелефонНачалоВыбора(Элемент, ПолучательКонтрагентЭтоОрганизация);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПолучательКонтрагентНажатие(Элемент)
	
	Отказ = Ложь;
	ОбработатьИзменениеРеквизитаФормыНаСервере("ПолучательКонтрагентСсылка", Отказ);
	ЗаполнитьПолучателяПоОтправителю();
	УстановитьВидимостьОнЖе();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолучателяПоОтправителю()
	
	ПараметрыУчастника = СервисДоставки.НовыйПараметрыУчастникаГрузоперевозки();
	ПараметрыКонтрагента = ПараметрыУчастника.Контрагент;
	ПараметрыКонтрагента.Ссылка = ОтправительКонтрагентСсылка;
	ПараметрыКонтрагента.ИНН = ОтправительКонтрагентИНН;
	ПараметрыКонтрагента.КПП = ОтправительКонтрагентКПП;
	ПараметрыКонтрагента.Наименование = ОтправительКонтрагентНаименование;
	ПараметрыКонтрагента.ЮрФизЛицо = ОтправительКонтрагентЮрФизЛицо;
	
	ОбработатьПараметры(ПараметрыУчастника, "Получатель");
	ОтборыИзменение = Истина;
	УстановитьПризнакОрганизаций();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительАдресОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	АдресНачалоВыбора(Элемент, ОтправительКонтрагентЭтоОрганизация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательАдресОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	АдресНачалоВыбора(Элемент, ПолучательКонтрагентЭтоОрганизация);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительАдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	АдресОбработкаВыбора(Элемент, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательАдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	АдресОбработкаВыбора(Элемент, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресОбработкаВыбора(Элемент, ВыбранноеЗначение)
	
	ПараметрыОтбора = Новый Структура(); 
	
	ИмяРеквизита = Элемент.Имя;
	
	Префикс = СтрЗаменить(ИмяРеквизита, "Адрес", "");
	
	Если ВыбранноеЗначение = 1 Тогда
		
		ЗаполнитьПараметрыОтбораАдресаОрганизации(ПараметрыОтбора, ЭтотОбъект[Префикс + "КонтрагентСсылка"]);
		ОткрытьФормуВыбора("АдресОрганизацииСервисДоставки", Элемент.Имя + "Владелец", ПараметрыОтбора);
		
	ИначеЕсли ВыбранноеЗначение = 2 Тогда
			
		ЗаполнитьПараметрыОтбораАдресаКонтрагента(ПараметрыОтбора, ЭтотОбъект[Префикс + "КонтрагентСсылка"]);
		ОткрытьФормуВыбора("АдресКонтрагентаСервисДоставки", Элемент.Имя + "Владелец", ПараметрыОтбора);
		
	ИначеЕсли ВыбранноеЗначение = 3 Тогда
			
		АдресНачалоВыбора(Элемент, ЭтаФорма[СтрЗаменить(Элемент.Имя, "Адрес", "") + "КонтрагентЭтоОрганизация"]);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОтбораАдресаОрганизации(ПараметрыОтбора, ПолучательКонтрагентСсылка)
	СервисДоставкиПереопределяемый.ЗаполнитьПараметрыОтбораАдресаОрганизации(ПараметрыОтбора, ПолучательКонтрагентСсылка);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПараметрыОтбораАдресаКонтрагента(ПараметрыОтбора, ПолучательКонтрагентСсылка)
	СервисДоставкиПереопределяемый.ЗаполнитьПараметрыОтбораАдресаКонтрагента(ПараметрыОтбора, ПолучательКонтрагентСсылка);
КонецПроцедуры

&НаКлиенте
Процедура ВремяОтгрузкиОчистка(Элемент, СтандартнаяОбработка)
	
	ВремяОтгрузкиС = Неопределено;
	ВремяОтгрузкиПо =  Неопределено;
	ВремяОтгрузкиОбедС = Неопределено;
	ВремяОтгрузкиОбедПо = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяДоставкиОчистка(Элемент, СтандартнаяОбработка)
	
	ВремяДоставкиС = Неопределено;
	ВремяДоставкиПо =  Неопределено;
	ВремяДоставкиОбедС = Неопределено;
	ВремяДоставкиОбедПо = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлательщикРольОчистка(Элемент, СтандартнаяОбработка)
	
	ПлательщикРоль = 0;
	ПлательщикРольПредставление = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПлательщикРольОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗначениеСписка = Элементы.ПлательщикРоль.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	
	ПлательщикРольСтарое = ПлательщикРоль; 
	Если ЗначениеСписка = Неопределено Тогда
		ПлательщикРоль = 0;
		ПлательщикРольПредставление = "";
	Иначе
		ПлательщикРоль = ВыбранноеЗначение;
		ПлательщикРольПредставление = ЗначениеСписка.Представление;
	КонецЕсли;
	
	Если ПлательщикРольСтарое<>ПлательщикРоль Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузкаНаБлижайшееВремяПриИзменении(Элемент)
	
	ОбновитьИнформациюПоДатеОтгрузки(ОбщегоНазначенияКлиент.ДатаСеанса());
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяОтгрузкиКПриИзменении(Элемент)
	
	ЕстьОшибки = Ложь;
	ПроверитьВремяОтгрузки(ЕстьОшибки,Истина);
	ОбновитьИнформациюПоДатеОтгрузки();
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаПараметрыГруза

&НаКлиенте
Процедура ПереключательРасшифровкиПриИзменении(Элемент)
	
	УстановитьВидимостьДоступностьГруппыВГХ();
	
	ГрузКоличествоГрузовыхМестДо = ГрузКоличествоГрузовыхМест;
	ГрузКоличествоГрузовыхМест = ?(ПереключательРасшифровки = 0, 1, 0);
	
	ГрузОбъемДо = ГрузОбъем;
	РассчитатьОбъем();
	
	ГрузВесДо = ГрузВес;
	РассчитатьВес();
	
	Если ГрузКоличествоГрузовыхМестДо <> ГрузКоличествоГрузовыхМест 
		ИЛИ ГрузОбъемДо <> ГрузОбъем 
		ИЛИ ГрузВес <> ГрузМаксимальныйВес Тогда
		ЗарегистрироватьИзменениеОтборов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузОдноМестоВесПриИзменении(Элемент)
	
	ГрузМаксимальныйВес = ГрузВес;
	ПроверитьВГХ("ГрузВес");
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаОбъявленнойЦенностиПриИзменении(Элемент)
	
	ПроверитьВГХ("ГрузСтоимость");
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузОдноМестоКоличествоГрузовыхМестПриИзменении(Элемент)
	
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузКоличествоГрузовыхМестПриИзменении(Элемент)
	
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузОбщийВесПриИзменении(Элемент)
	
	ПроверитьВГХ("ГрузВес");
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузОбщийОбъемПриИзменении(Элемент)
	
	ПроверитьВГХ("ГрузОбъем");
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузОдноМестоВысотаПриИзменении(Элемент)
	
	РассчитатьОбъем();
	ПроверитьВГХ("ГрузМаксимальнаяВысота");
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузОдноМестоШиринаПриИзменении(Элемент)
	
	РассчитатьОбъем();
	ПроверитьВГХ("ГрузМаксимальнаяШирина");
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузОдноМестоДлинаПриИзменении(Элемент)
	
	РассчитатьОбъем();
	ПроверитьВГХ("ГрузМаксимальнаяДлина");
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузМаксимальнаяВысотаПриИзменении(Элемент)
	
	ПроверитьВГХ("ГрузМаксимальнаяВысота");
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузМаксимальнаяШиринаПриИзменении(Элемент)
	
	ПроверитьВГХ("ГрузМаксимальнаяШирина");
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузМаксимальнаяДлинаПриИзменении(Элемент)
	
	ПроверитьВГХ("ГрузМаксимальнаяДлина");
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузМаксимальныйВесПриИзменении(Элемент)
	
	ПроверитьВГХ("ГрузМаксимальныйВес");
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаТарифы

&НаКлиенте
Процедура ТекущаяЛогистическаяКомпанияНаименованиеНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьФормуГрузоперевозчика();
	
КонецПроцедуры

&НаКлиенте
Процедура ТарифыТекущийТарифПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуТарифа();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие(Элемент)
	
	Если Найти(Элемент.Имя, "ОчиститьОтбор_") Тогда
		
		// Очистка отбора.
		ИмяРеквизита = Сред(Элемент.Имя, СтрНайти(Элемент.Имя, "_") + 1);
		
		Если СтрНайти(ИмяРеквизита, "_") Тогда
			
			Идентификатор = Сред(ИмяРеквизита, СтрНайти(ИмяРеквизита, "_") + 1);
			ИмяРеквизита = Лев(ИмяРеквизита, СтрНайти(ИмяРеквизита, "_") - 1);
			
			СтрокаТаблицы = ЭтотОбъект[ИмяРеквизита].НайтиПоИдентификатору(Идентификатор);
			
			Если СтрокаТаблицы <> Неопределено Тогда 
				ЗначениеРеквизита = СтрокаТаблицы.Значение;
				СтрокаТаблицы.Использовать = Ложь;
				
				Если ТипЗнч(ЗначениеРеквизита) = Тип("Булево") Тогда
					СтрокаТаблицы.Значение = Ложь;
				ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Число") Тогда
					СтрокаТаблицы.Значение = 0;
				ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Строка") Тогда
					СтрокаТаблицы.Значение = "";
				ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Дата") Тогда
					СтрокаТаблицы.Значение = Неопределено;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			ЗначениеРеквизита = ЭтотОбъект[ИмяРеквизита];
			
			Если ТипЗнч(ЗначениеРеквизита) = Тип("Булево") Тогда
				ЭтотОбъект[ИмяРеквизита] = Ложь;
			ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Число") Тогда
				ЭтотОбъект[ИмяРеквизита] = 0;
			ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Строка") Тогда
				ЭтотОбъект[ИмяРеквизита] = "";
			ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("СписокЗначений") Тогда 
				Для Каждого ЭлементСписка Из ЭтотОбъект[ИмяРеквизита] Цикл
					ЭлементСписка.Пометка = Ложь;
				КонецЦикла;
			ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("СтандартныйПериод") Тогда
				ЭтотОбъект[ИмяРеквизита] = Неопределено;
			Иначе
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		ОбработатьПрименениеОтборов();
		
	ИначеЕсли Найти(Элемент.Имя, "ЗаголовокОтбора_") Тогда
		
		ИмяРеквизита = Сред(Элемент.Имя, СтрНайти(Элемент.Имя, "_") + 1);
		
		Если СтрНайти(ИмяРеквизита, "_") Тогда
			
			Идентификатор = Сред(ИмяРеквизита, СтрНайти(ИмяРеквизита, "_") + 1);
			ИмяРеквизита = Лев(ИмяРеквизита, СтрНайти(ИмяРеквизита, "_") - 1);
			
			Элементы[ИмяРеквизита].ТекущаяСтрока = Идентификатор;
			
		КонецЕсли;
		
		ТекущийЭлемент = Элементы[ИмяРеквизита];
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОтгрузкиПриИзменении(Элемент)
	
	СформироватьОтборыТарифов();
	РазвернутьРодителейСпискаСВыбраннымиСтроками();
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособДоставкиПриИзменении(Элемент)
	
	СформироватьОтборыТарифов();
	РазвернутьРодителейСпискаСВыбраннымиСтроками();
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыТарифовИспользоватьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтборыТарифов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Использовать Тогда
		СброситьВзаимоисключающие(ТекущиеДанные);
		Элементы.ОтборыТарифов.Развернуть(ТекущиеДанные.ПолучитьИдентификатор());
	Иначе
		Элементы.ОтборыТарифов.Свернуть(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыТарифовПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.ОтборыТарифов.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
	
		Поле = Элемент.ТекущийЭлемент;
		Поле.ТолькоПросмотр = Не ТекущиеДанные.ТребуетсяЗначение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыТарифовЗначениеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элементы.ОтборыТарифов.ТекущиеДанные.Значение) Тогда
		
		СтрокаОтбора = ОтборыТарифов.НайтиПоИдентификатору(Элементы.ОтборыТарифов.ТекущаяСтрока);
		Если СтрокаОтбора <> Неопределено Тогда
			СтрокаУслуги = СтрокаОтбора.ПолучитьРодителя();
			СтрокаУслуги.Использовать = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗарегистрироватьИзменениеОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыТарифовПередРазворачиванием(Элемент, Строка, Отказ)
	
	ТекущиеДанные = ОтборыТарифов.НайтиПоИдентификатору(Строка);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (Не ТекущиеДанные.Использовать) И ТекущиеДанные.ТипСтроки = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыТарифовПередСворачиванием(Элемент, Строка, Отказ)
	
	ТекущиеДанные = ОтборыТарифов.НайтиПоИдентификатору(Строка);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Использовать И ТекущиеДанные.ТипСтроки = 1 Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПараметрыТарифа

&НаКлиенте
Процедура ОтправительТерминалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	 ТерминалНачалоВыбора(1);
	 
КонецПроцедуры

&НаКлиенте
Процедура ПолучательТерминалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	 ТерминалНачалоВыбора(2);
	
КонецПроцедуры

&НаКлиенте
Процедура ТерминалНачалоВыбора(Направление)

	Если Не ЗначениеЗаполнено(ТарифИдентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметрыОповещения = Новый Структура;
	ДополнительныеПараметрыОповещения.Вставить("Направление", Направление);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьПодборТерминала", ЭтаФорма, ДополнительныеПараметрыОповещения);
	
	Если Направление = 1 Тогда
		Адресат = "Отправитель";
	Иначе
		Адресат = "Получатель";
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Адрес", ЭтаФорма[Адресат + "АдресПредставление"]);
	ПараметрыОткрытияФормы.Вставить("АдресЗначение", ЭтаФорма[Адресат + "АдресЗначение"]);
	ПараметрыОткрытияФормы.Вставить("Направление", Направление);
	ПараметрыОткрытияФормы.Вставить("ГрузоперевозчикИдентификатор", ГрузоперевозчикИдентификатор);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму(
		"Обработка.СервисДоставки.Форма.СписокТерминалов",
		ПараметрыОткрытияФормы,
		ЭтаФорма,,,,ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОтправительТерминалОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуТерминала(ПунктПриемаГрузаИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательТерминалОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуТерминала(ПунктВыдачиГрузаИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыОчистка(Элемент, СтандартнаяОбработка)
	
	ФормаОплаты = 0;
	ФормаОплатыПредставление = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗначениеСписка = Элементы.ФормаОплаты.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если ЗначениеСписка = Неопределено Тогда
		ФормаОплаты = 0;
		ФормаОплатыПредставление = "";
	Иначе
		ФормаОплаты = ВыбранноеЗначение;
		ФормаОплатыПредставление = ЗначениеСписка.Представление;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТарифы

&НаКлиенте
Процедура ТарифыПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.Тарифы.ТекущиеДанные;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		ИнформацияПоТарифу = ТабличныйДокументИнформацияПоТарифу(Элементы.Тарифы.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТарифыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбратьТариф(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьТариф(Команда)
	
	ТекущаяСтрока = Элементы.Тарифы.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	СброситьТариф();
	
	ДанныеПоТарифу = Новый Структура();
	ДанныеПоТарифу.Вставить("ГрузоперевозчикИдентификатор", ТекущаяСтрока.ГрузоперевозчикИдентификатор);
	ДанныеПоТарифу.Вставить("ГрузоперевозчикНаименование", ТекущаяСтрока.ГрузоперевозчикНаименование);
	ДанныеПоТарифу.Вставить("ТарифИдентификатор", ТекущаяСтрока.ТарифИдентификатор);
	ДанныеПоТарифу.Вставить("ТарифНаименование", ТекущаяСтрока.ТарифНаименование);
	ДанныеПоТарифу.Вставить("ТарифНегабарит", ТекущаяСтрока.Негабарит);
	ДанныеПоТарифу.Вставить("ФормаОплаты", ТекущаяСтрока.ФормаОплаты);
	ДанныеПоТарифу.Вставить("ТолькоВремяДоставки", ТекущаяСтрока.ТолькоВремяДоставки);
	ДанныеПоТарифу.Вставить("ТочкаОтправленияШирота", ТекущаяСтрока.ТочкаОтправленияШирота);
	ДанныеПоТарифу.Вставить("ТочкаОтправленияДолгота", ТекущаяСтрока.ТочкаОтправленияДолгота);
	ДанныеПоТарифу.Вставить("ТочкаДоставкиШирота", ТекущаяСтрока.ТочкаДоставкиШирота);
	ДанныеПоТарифу.Вставить("ТочкаДоставкиДолгота", ТекущаяСтрока.ТочкаДоставкиДолгота);

	ДанныеПоТарифуИзТаблицы = Тарифы.НайтиПоИдентификатору(ТекущаяСтрока.ПолучитьИдентификатор());
	ДанныеПоТарифу.Вставить("Описание", ДанныеПоТарифуИзТаблицы.Описание);
	
	ОбработатьВыборТарифа(ДанныеПоТарифу);
	СформироватьПредставлениеТарифаИГрузоперевозчика();
	ЗаполнитьЗначенияСписковВыбора();
	СформироватьДопУслугиПоТарифу(ДанныеПоТарифуИзТаблицы.ДополнительныеУслуги);
	ОбновитьИнформациюПоВыбраннымДопУслугам();
	Элементы.ГруппаПредупрежденияПоДопУслугам.Видимость = ПроверитьЗаполнениеЗначенийДополнительныхУслуг();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиОсновное(Команда)
	
	ПерейтиКШагуОсновное();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиГруз(Команда)
	
	ПерейтиКШагуГруз();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиТарифы(Команда)
	
	Отказ = Ложь;
	ПроверитьЗаполнениеОбязательныхРеквизитов(2, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПерейтиКШагуТарифы();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиПараметрыТарифа(Команда)
	
	Отказ = Ложь;
	ПроверитьЗаполнениеОбязательныхРеквизитов(3, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПерейтиКШагуПараметрыТарифа();

КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиПроверка(Команда)
	
	Отказ = Ложь;
	ПроверитьЗаполнениеОбязательныхРеквизитов(4, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПерейтиКШагуПроверка();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКТекущемуШагуМастера(ВыводитьПредупреждения)
	
	Отказ = Ложь;
	ПроверитьЗаполнениеОбязательныхРеквизитов(4, Отказ, ВыводитьПредупреждения);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПерейтиКШагуПроверка();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиКарточка(Команда)
	
	ПерейтиКШагуКарточка();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКШагуОсновное()
	
	Элементы.ГруппаТарифыГрузоперевозчик.Видимость = Ложь;
	СброситьПометкиКомандШапки(Элементы);
	Элементы.ПерейтиОсновное.Пометка = Истина;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОсновное;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКШагуГруз()
	
	Элементы.ГруппаТарифыГрузоперевозчик.Видимость = Ложь;
	СброситьПометкиКомандШапки(Элементы);
	Элементы.ПерейтиГруз.Пометка = Истина;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПараметрыГруза;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКШагуТарифы()
	
	Элементы.ГруппаТарифыГрузоперевозчик.Видимость = Истина;
	СброситьПометкиКомандШапки(Элементы);
	Элементы.ПерейтиТарифы.Пометка = Истина;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаТарифы;
	
	Если ОтборыИзменение Тогда
		ОбработатьПрименениеОтборов();
	Иначе
		СформироватьПараметрыОтбора();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКШагуПараметрыТарифа()
	
	Элементы.ГруппаТарифыГрузоперевозчик.Видимость = Истина;
	СброситьПометкиКомандШапки(Элементы);
	Элементы.ПерейтиПараметрыТарифа.Пометка = Истина;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПараметрыТарифа;
	Элементы.ГруппаНегабаритныеМеста.Видимость = (ТарифНеГабарит И ГрузКоличествоГрузовыхМест <> 1);
	Элементы.ГрузКоличествоНегабаритныхГрузовыхМест.МаксимальноеЗначение = ГрузКоличествоГрузовыхМест;
	Элементы.ГрузНегабаритныйВес.МаксимальноеЗначение = ГрузВес;
	Элементы.ГрузНегабаритныйОбъем.МаксимальноеЗначение = ГрузОбъем;
	
	ОбработатьИзменениеВариантовДоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКШагуПроверка()
	
	СформироватьИтоговуюИнформацию();
	Элементы.ГруппаТарифыГрузоперевозчик.Видимость = Ложь;
	СброситьПометкиКомандШапки(Элементы);
	Элементы.ПерейтиПроверка.Пометка = Истина;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаКарточка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКШагуКарточка()
	
	Элементы.ГруппаТарифыГрузоперевозчик.Видимость = Ложь;
	СброситьПометкиКомандШапки(Элементы);
	Элементы.ПерейтиКарточка.Пометка = Истина;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаКарточка;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьСохранитьЗаказ(Команда)
	
	Если ДоступнаОтправкаЗаказовНаДоставку Тогда
		ОформитьЗаказ();
	Иначе
		СоздатьИзменитьЗаказНаДоставку(,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеОбязательныхРеквизитов(НомерШага, Отказ, ВыводитьПредупреждения = Истина)
	
	ОчиститьСообщения();
	
	Если РежимМастера = 2 
		ИЛИ НомерШага <= 1 Тогда
		Возврат;
	КонецЕсли;
	
	ОбязательныеРеквизиты = ОбязательныеРеквизитыДляПереходаНаСтраницу(НомерШага);
	
	ТекстОшибки = НСтр("ru='Поле ""%1"" на шаге ""%2"" не заполнено'");
	
	ШагОшибки = 10;
	
	ПроверитьЗаполнениеРеквизитовНаСервере(ШагОшибки, Отказ, ВыводитьПредупреждения);
	
	ЕстьОшибки = Ложь;
	ПроверитьТелефоныКонтактныхЛиц(ЕстьОшибки, ВыводитьПредупреждения);
	Если ЕстьОшибки Тогда
		Отказ = Истина;
		ШагОшибки = 0;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	ПроверитьДатуОтгрузки(ЕстьОшибки, Истина);
	Если ЕстьОшибки Тогда
		Отказ = Истина;
		ШагОшибки = 0;
	КонецЕсли;
	
	Если НомерШага = 4 Тогда
		ЕстьОшибки = Ложь;
		ТекущийШагОшибки = ПроверитьВремяОтгрузки(ЕстьОшибки, Истина);
		Если ЕстьОшибки Тогда
			ШагОшибки = Мин(ШагОшибки, ТекущийШагОшибки);
			Отказ = Истина;
		КонецЕсли;
		Если НЕ Отказ И ПроверитьЗаполнениеЗначенийДополнительныхУслуг() Тогда
			ЕстьОшибки = Истина;
			Если ВыводитьПредупреждения Тогда
				ТекстСообщения = НСтр("ru = 'Есть незаполненные свойства для выбранных дополнительных услуг.'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			Отказ = Истина;
			ШагОшибки = 3;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	ПроверитьВГХ("",ЕстьОшибки, ВыводитьПредупреждения);
	Если ЕстьОшибки Тогда
		Отказ = Истина;
		ШагОшибки = 1;
	КонецЕсли;
	
	// Выполняем проверки заполнения реквизитов формы.
	Для Каждого ТекущийРеквизит Из ОбязательныеРеквизиты Цикл
		
		ПараметрыРеквизита = СтрРазделить(ТекущийРеквизит.Значение, ".");
		ШагТекущейОшибки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыРеквизита[0]);
		Значение = ПараметрыРеквизита[1];
		
		Если ШагТекущейОшибки > ШагОшибки Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЭтотОбъект[Значение]) Тогда
			
			ТекстСообщения = СтрШаблон(ТекстОшибки, 
										ТекущийРеквизит.Представление, 
										Элементы.ГруппаСтраницы.ПодчиненныеЭлементы[ШагТекущейОшибки].Заголовок);
										
			Отказ = Истина;
			Если ВыводитьПредупреждения Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,Значение,,Отказ);
			КонецЕсли;
			
			ШагОшибки = Мин(ШагОшибки, ШагТекущейОшибки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НомерШага = 5 И НЕ Отказ Тогда
		ТекущийШагОшибки = ПроверитьВремяОтгрузки(ЕстьОшибки, Истина);
		
		Если ЕстьОшибки Тогда
			ШагОшибки = Мин(ШагОшибки, ТекущийШагОшибки);
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Если ШагОшибки = 0 Тогда
			ПерейтиКШагуОсновное();
		ИначеЕсли ШагОшибки = 1 Тогда
			ПерейтиКШагуГруз();
		ИначеЕсли ШагОшибки = 2 Тогда
			ПерейтиКШагуТарифы();
		ИначеЕсли ШагОшибки = 3 Тогда
			ПерейтиКШагуПараметрыТарифа();
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеРеквизитовНаСервере(ШагОшибки, Отказ, ВыводитьПредупреждения = Истина)
	
	ЕстьОшибки = Ложь;
	ПроверитьРеквизитыКонтрагентов(ЕстьОшибки, ВыводитьПредупреждения);
	Если ЕстьОшибки Тогда
		Отказ = Истина;
		ШагОшибки = 0;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	ПроверитьРеквизитыАдресов(ЕстьОшибки, ВыводитьПредупреждения);
	Если ЕстьОшибки Тогда
		Отказ = Истина;
		ШагОшибки = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьРеквизитыАдресов(ЕстьОшибки, ВыводитьПредупреждения)
	
	ПроверитьРеквизитыАдреса("ОтправительАдрес", ЕстьОшибки, ВыводитьПредупреждения);
	ПроверитьРеквизитыАдреса("ПолучательАдрес", ЕстьОшибки, ВыводитьПредупреждения);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьРеквизитыАдреса(ИмяРеквизита, ЕстьОшибки, ВыводитьПредупреждения)
	
	СервисДоставкиСлужебный.ПроверитьРеквизитыАдреса(ЭтотОбъект, ИмяРеквизита, ЕстьОшибки, ВыводитьПредупреждения);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьРеквизитыКонтрагентов(ЕстьОшибки, ВыводитьПредупреждения = Истина)
	
	ПроверитьРеквизитыКонтрагента("ОтправительКонтрагент", ЕстьОшибки, ВыводитьПредупреждения);
	ПроверитьРеквизитыКонтрагента("ПолучательКонтрагент", ЕстьОшибки, ВыводитьПредупреждения);
	
	Если ПлательщикРоль = 3 Тогда
		ПроверитьРеквизитыКонтрагента("Плательщик", ЕстьОшибки, ВыводитьПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьРеквизитыКонтрагента(Префикс, ЕстьОшибки, ВыводитьПредупреждения = Истина)
	
	ИмяРеквизита = Префикс + "Наименование";
	КонтрагентСсылка = ЭтотОбъект[Префикс + "Ссылка"];
	КонтрагентНаименование = ЭтотОбъект[Префикс + "Наименование"];
	КонтрагентЮрФизЛицо = ЭтотОбъект[Префикс + "ЮрФизЛицо"];
	КонтрагентИНН = ЭтотОбъект[Префикс + "ИНН"];
	КонтрагентКПП = ЭтотОбъект[Префикс + "КПП"];
	
	ЭтоОтправитель = (СтрНайти(Префикс, "Отправитель") > 0);
	
	Если Не ЗначениеЗаполнено(КонтрагентСсылка) 
		И КонтрагентНаименование = "" Тогда
		Возврат;
	КонецЕсли;
	
	УчастникГрузоперевозки = СтрЗаменить(Префикс, "Контрагент", "");
	
	ТекстОшибки = НСтр("ru='Некорректный реквизит ""%1"" у участника грузоперевозки в поле ""%2"".'");
	
	Если ЗначениеЗаполнено(КонтрагентСсылка) 
		И КонтрагентНаименование = "" Тогда
		ТекстСообщения = СтрШаблон(ТекстОшибки, НСтр("ru='Наименование'"), УчастникГрузоперевозки);
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ИмяРеквизита);
		КонецЕсли;
		
	КонецЕсли;
	
	Если КонтрагентЮрФизЛицо = 0 Тогда
		
		ТекстСообщения = СтрШаблон(ТекстОшибки, НСтр("ru='Вид'"), УчастникГрузоперевозки);
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ИмяРеквизита);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если КонтрагентЮрФизЛицо = 2 Тогда
		
		Если ЭтоОтправитель Тогда
			ТекстСообщения = НСтр("ru='Отправитель не может быть физическим лицом'");
			
			ЕстьОшибки = Истина;
			Если ВыводитьПредупреждения Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ИмяРеквизита);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КонтрагентИНН) Тогда
		
		ТекстСообщения = СтрШаблон(ТекстОшибки, НСтр("ru='ИНН'"), УчастникГрузоперевозки);
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ИмяРеквизита);
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = "";
		Если Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(КонтрагентИНН, КонтрагентЮрФизЛицо = 1,
			ТекстСообщения) Тогда
			
			ТекстСообщения = СтрШаблон(ТекстОшибки, НСтр("ru='ИНН'"), УчастникГрузоперевозки)
								+ Символы.ПС + ТекстСообщения;
		
			ЕстьОшибки = Истина;
			Если ВыводитьПредупреждения Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ИмяРеквизита);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверяем юридический адрес только на наличие
	КонтрагентЮридическийАдрес = ЭтотОбъект[Префикс + "ЮридическийАдресПредставление"];
	
	Если СтрДлина(СокрЛП(КонтрагентЮридическийАдрес)) < 5 Тогда
		
		ТекстСообщения = СтрШаблон(ТекстОшибки, НСтр("ru='Юридический адрес'"), УчастникГрузоперевозки);
									
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ИмяРеквизита);
		КонецЕсли;
		
	КонецЕсли;
	
	Если КонтрагентЮрФизЛицо = 3 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КонтрагентКПП) Тогда
		
		ТекстСообщения = СтрШаблон(ТекстОшибки, НСтр("ru='КПП'"), УчастникГрузоперевозки);
									
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ИмяРеквизита);
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = "";
		Если Не РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(КонтрагентКПП, ТекстСообщения) Тогда
			
			ТекстСообщения = СтрШаблон(ТекстОшибки, НСтр("ru='КПП'"), УчастникГрузоперевозки)
								+ Символы.ПС + ТекстСообщения;
		
			ЕстьОшибки = Истина;
			Если ВыводитьПредупреждения Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ИмяРеквизита);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТелефоныКонтактныхЛиц(ЕстьОшибки, ВыводитьПредупреждения)
	
	ПроверитьНомерТелефона("ОтправительКонтактноеЛицоТелефон", ЕстьОшибки, ВыводитьПредупреждения);
	ПроверитьНомерТелефона("ПолучательКонтактноеЛицоТелефон", ЕстьОшибки, ВыводитьПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНомерТелефона(Префикс, ЕстьОшибки, ВыводитьПредупреждения = Истина)
	
	ИмяРеквизита = Префикс + "Представление";
	ЭтоТелефонОтправителя = (СтрНайти(ИмяРеквизита, "Отправитель") > 0);
	
	Представление = ЭтотОбъект[ИмяРеквизита];
	
	Если Не ЗначениеЗаполнено(Представление) Тогда
		Возврат;
	КонецЕсли;
	
	СписокОшибок = ОшибкиЗаполненияТелефона(Префикс);
	
	ЕстьОшибки = СписокОшибок.Количество();
	
	ТекстСообщения = "";
	Для Каждого ТекущаяОшибка Из СписокОшибок Цикл
		ТекстСообщения = ТекстСообщения + Символы.ПС + ТекущаяОшибка.Представление;
	КонецЦикла;
	
	ТекстСообщения = СокрЛП(ТекстСообщения);
	
	Если ВыводитьПредупреждения 
		И ЕстьОшибки Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru='Некорректный формат номера телефона в поле ""Телефон"" группы ""%1"".'"),
			?(ЭтоТелефонОтправителя, "Отправитель", "Получатель"));
		ТекстСообщения = ТекстОшибки + Символы.ПС + ТекстСообщения;
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,ИмяРеквизита);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДатуОтгрузки(ЕстьОшибки, ВыводитьПредупреждения)
	
	Если ЗначениеЗаполнено(ДатаОтгрузки) Тогда
	
		ТекущаяДата = '00010101';
		УстановитьДатуОтгрузки(ТекущаяДата);
		
		Если ТекущаяДата > ДатаОтгрузки Тогда
			
			ЕстьОшибки = Истина;
			Если ВыводитьПредупреждения Тогда
				ТекстОшибки = НСтр("ru='Выбранная дата отгрузки недоступна. Укажите актуальную дату.'");
				ТекстСообщения = ТекстОшибки;
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ДатаОтгрузки");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВремяОтгрузки(ЕстьОшибки, ВыводитьПредупреждения)
	
	ШагОшибки = 0;
	ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
	НачалоТекущегоДня = НачалоДня(ТекущаяДата);
	ТекущееВремя = Дата(1,1,1) + (ТекущаяДата - НачалоТекущегоДня);
	НачалоДняОтгрузки = НачалоДня(ДатаОтгрузки);
	
	Если ТипГрузоперевозки = 2 Тогда
		Если НЕ ОтгрузкаНаБлижайшееВремя Тогда
			Если НачалоТекущегоДня = НачалоДняОтгрузки 
				И ТекущееВремя > ВремяОтгрузкиК 
				И ВремяОтгрузкиК <> Дата(1,1,1,0,0,0) Тогда
				ЕстьОшибки = Истина;
				ШагОшибки = 3;
				Если ВыводитьПредупреждения Тогда
					ТекстОшибки = НСтр("ru='Выбранное время отгрузки не может быть меньше текущего времени'");
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,,"ВремяОтгрузкиК");
				КонецЕсли;
			ИначеЕсли НачалоТекущегоДня < НачалоДняОтгрузки И ВремяОтгрузкиК = Дата(1,1,1,0,0,0) Тогда
				ЕстьОшибки = Истина;
				ШагОшибки = 3;
				Если ВыводитьПредупреждения Тогда
					ТекстОшибки = НСтр("ru='При отгрузке не на ближайшее время необходимо указать время'");
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,,"ВремяОтгрузкиК");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если НачалоТекущегоДня = НачалоДняОтгрузки
			И ВремяОтгрузкиПо <> Дата(1,1,1,0,0,0)
			И ТекущееВремя > ВремяОтгрузкиПо Тогда
			ЕстьОшибки = Истина;
			Если ВыводитьПредупреждения Тогда
				ТекстОшибки = НСтр("ru='Невозможно оформить доставку на указанное время отгрузки. Время отгрузки меньше, чем текущее.'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,,"ОтправительВремяПлановойОтгрузки");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ШагОшибки;
	
КонецФункции

&НаСервере
Процедура ПроверитьДозаполнитьАдрес(Префикс, ЕстьОшибки)
	
	ИмяРеквизитаАдресЗначение = Префикс + "Значение";
	ЭтоАдресОтправителя = (СтрНайти(Префикс, "Отправитель") > 0);
	
	СтруктураАдреса = СервисДоставки.ЗначениеИзСтрокиJSON(ЭтотОбъект[ИмяРеквизитаАдресЗначение]);
	
	Если Не ЗначениеЗаполнено(СтруктураАдреса) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизитаАдресЗначение]) Тогда
		
		Если УправлениеКонтактнойИнформацией.АдресВведенВСвободнойФорме(ЭтотОбъект[ИмяРеквизитаАдресЗначение]) Тогда
			
			ВызватьИсключение НСтр("ru = 'Для заказов на доставку нельзя использовать адрес в свободной форме.'");
			
		Иначе
			СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ЭтотОбъект[ИмяРеквизитаАдресЗначение],
				Новый Структура("КодыАдреса", Истина));
			ЭтотОбъект[ИмяРеквизитаАдресЗначение] = РаботаСАдресами.ПоляАдресаВJSON(СведенияОбАдресе);
		КонецЕсли;
		
		ЕстьИзменения = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОбязательныеРеквизитыДляПереходаНаСтраницу(НомерШага)
	
	ОбязательныеРеквизиты = Новый СписокЗначений();
	
	Если РежимМастера = 2
		ИЛИ НомерШага <= 1 Тогда
		Возврат ОбязательныеРеквизиты;
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("0.ОтправительКонтрагентНаименование", НСтр("ru='Отправитель'"));
	
	Если ЗначениеЗаполнено(ОтправительКонтрагентНаименование) Тогда
		Если НомерШага > 3  Тогда
			ОбязательныеРеквизиты.Добавить("0.ОтправительКонтактноеЛицоНаименование",
				НСтр("ru='Контактное лицо отправителя'"));
			ОбязательныеРеквизиты.Добавить("0.ОтправительКонтактноеЛицоТелефонПредставление",
				НСтр("ru='Телефон контактного лица отправителя'"));
		КонецЕсли;
		ОбязательныеРеквизиты.Добавить("0.ОтправительАдресПредставление", НСтр("ru='Откуда'"));
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("0.ПолучательКонтрагентНаименование", НСтр("ru='Получатель'"));
	
	Если ЗначениеЗаполнено(ПолучательКонтрагентНаименование) Тогда
		Если НомерШага > 3 Тогда
			ОбязательныеРеквизиты.Добавить("0.ПолучательКонтактноеЛицоНаименование",
				НСтр("ru='Контактное лицо получателя'"));
			ОбязательныеРеквизиты.Добавить("0.ПолучательКонтактноеЛицоТелефонПредставление",
				НСтр("ru='Телефон контактного лица получателя'"));
		КонецЕсли;
		ОбязательныеРеквизиты.Добавить("0.ПолучательАдресПредставление", НСтр("ru='Куда'"));
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("0.ДатаОтгрузки", НСтр("ru='Дата отгрузки'"));
	
	ОбязательныеРеквизиты.Добавить("0.ПлательщикРоль", НСтр("ru='Роль плательщика'"));
	
	ОбязательныеРеквизиты.Добавить("0.ОрганизацияБизнесСетиСсылка", НСтр("ru='Организация БС'"));
	
	ОбязательныеРеквизиты.Добавить("1.ГрузКоличествоГрузовыхМест", НСтр("ru='Количество мест'"));
	Если ГрузКоличествоГрузовыхМест > 1 Тогда
		ОбязательныеРеквизиты.Добавить("1.ГрузВес", НСтр("ru='Общий вес'"));
	КонецЕсли;
	
	ОбязательныеРеквизиты.Добавить("1.ГрузСодержимое", НСтр("ru='Описание содержимого'"));
	ОбязательныеРеквизиты.Добавить("1.ГрузМаксимальныйВес", НСтр("ru='Вес'"));
	ОбязательныеРеквизиты.Добавить("1.ГрузОбъем", НСтр("ru='Объем'"));
	ОбязательныеРеквизиты.Добавить("1.ГрузМаксимальнаяВысота", НСтр("ru='Высота'"));
	ОбязательныеРеквизиты.Добавить("1.ГрузМаксимальнаяШирина", НСтр("ru='Ширина'"));
	ОбязательныеРеквизиты.Добавить("1.ГрузМаксимальнаяДлина", НСтр("ru='Длина'"));;
	
	Если НомерШага > 2 Тогда
	
		Если Не ЗначениеЗаполнено(ТарифИдентификатор) Тогда
			ОбязательныеРеквизиты.Добавить("2.ТарифИдентификатор", НСтр("ru='Тариф грузоперевозки'"));
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерШага > 3 Тогда
		
		Если ЗначениеЗаполнено(ТарифИдентификатор) Тогда
			ОбязательныеРеквизиты.Добавить("3.ФормаОплатыПредставление", НСтр("ru='Форма оплаты'"));
			
			Если СпособОтгрузки = 1 Тогда
				ОбязательныеРеквизиты.Добавить("3.ПунктПриемаГрузаНаименование", НСтр("ru='Пункт приема груза'"));
			ИначеЕсли СпособОтгрузки = 2 Тогда
				ОбязательныеРеквизиты.Добавить("3.ВремяОтгрузкиПредставление", НСтр("ru='Время отгрузки'"));
			КонецЕсли;
			
			Если СпособДоставки = 1 Тогда
				ОбязательныеРеквизиты.Добавить("3.ПунктВыдачиГрузаНаименование", НСтр("ru='Пункт выдачи груза'"));
			ИначеЕсли СпособДоставки = 2 Тогда
				ОбязательныеРеквизиты.Добавить("3.ВремяДоставкиПредставление", НСтр("ru='Время доставки'"));
			КонецЕсли;
			
			Если ТарифНеГабарит Тогда
				ОбязательныеРеквизиты.Добавить("3.ГрузНегабаритныйВес", НСтр("ru='Вес негабаритных мест'"));
				ОбязательныеРеквизиты.Добавить("3.ГрузНегабаритныйОбъем", НСтр("ru='Объем негабаритных мест'"));
				ОбязательныеРеквизиты.Добавить("3.ГрузКоличествоНегабаритныхГрузовыхМест",
					НСтр("ru='Количество негабаритных грузовых мест'"));
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбязательныеРеквизиты;
	
КонецФункции

&НаКлиенте
Процедура СортироватьТарифыПоЦене(Команда)
	
	ТарифыУстановитьРежимСортировки(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьТарифыПоСроку(Команда)
	
	ТарифыУстановитьРежимСортировки(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТарифы(Команда)
	
	Если ОтборыИзменение Тогда
		ОбработатьПрименениеОтборов();
	Иначе
		ПолучитьТарифы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКакЧерновик(Команда)
	
	СоздатьИзменитьЗаказНаДоставку();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	ОписаниеОЗавершении = Новый ОписаниеОповещения("ЗавершениеОтменитьЗаказ", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОЗавершении, НСтр("ru='Отменить заказ?'"), РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОтменитьЗаказ(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда //Отменить
		ОтменитьЗаказНаДоставку();
	ИначеЕсли Результат = КодВозвратаДиалога.Повторить Тогда //Отменить платно
		ОтменитьЗаказНаДоставку(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьОтборы(Команда)
	
	Отказ = Ложь;
	
	ПроверитьЗаполнениеЗначенийОтборовТарифов(Отказ);
	
	Если Не Отказ Тогда
		
		Модифицированность = Истина;
		Элементы.ГруппаОтборы.Скрыть();
		ОбработатьИзменениеВариантовДоставки();
		ОбработатьПрименениеОтборов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьТариф()
	
	ГрузоперевозчикИдентификатор = "";
	ТарифИдентификатор = "";
	ГрузоперевозчикНаименование = "";
	ТарифНаименование = "";
	ТарифНеГабарит = Ложь;
	ГрузНегабаритныйВес = 0;
	ГрузНегабаритныйОбъем = 0;
	ГрузКоличествоНегабаритныхГрузовыхМест = 0;
	ОтправительАдресШирота = 0;
	ОтправительАдресДолгота = 0;
	ПолучательАдресШирота = 0;
	ПолучательАдресДолгота = 0;
	
	ИнформацияПоТекущемуТарифу = Новый ТабличныйДокумент();
	
	СброситьТерминал("ПунктПриема");
	СброситьТерминал("ПунктВыдачи");
	ФормаОплаты = 0;
	ФормаОплатыПредставление = "";
	
	УслугиТарифа.Очистить();
	
	СформироватьПредставлениеТарифаИГрузоперевозчика();
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ИдентификаторЗаказа", ИдентификаторЗаказа);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);

	ОткрытьФорму(
		"Обработка.СервисДоставки.Форма.ПечатныеФормы",
		ПараметрыОткрытияФормы,
		ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоЗаказуУГрузоперевозчика(Команда)
	
	Если РежимМастера = 2 Тогда
		ОбновитьЗаказНаДоставку();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	// Категории отборов тарифов.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыТарифовИспользовать.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтборыТарифов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	// Категории отборов тарифов.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыТарифовНаименование.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтборыТарифов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЖирныйШрифтБЭД);
	
	// Значение отборов тарифов.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыТарифовИспользовать.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтборыТарифов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Значение отборов тарифов.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыТарифов.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтборыТарифов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.НаклонныйТекстСервисДоставки);
	
	// Значение отборов тарифов.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборыТарифовЗначение.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтборыТарифов.ТребуетсяЗначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтборыТарифов.Значение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Пусто>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение",
		ГоризонтальноеПоложение.Центр);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);

	// Время отгрузки.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтправительВремяПлановойОтгрузки.Имя);
	ОтборГруппа = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтборыТарифов.ОтправительВремяОтгрузкиПо");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "";
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтборыТарифов.ОтправительВремяОтгрузкиС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "";
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Тарифы "Текущий тариф".
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Тарифы.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Тарифы.ТарифИдентификатор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ТарифИдентификатор");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Тарифы.ТочкаОтправленияШирота");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ОтправительАдресШирота");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Тарифы.ТочкаДоставкиШирота");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ПолучательАдресШирота");
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЖирныйШрифтБЭД);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЖирныйШрифтБЭД);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона",
		ЦветаСтиля.ЦветФонаКнопкаПоУмолчаниюСервисДоставки);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПрименитьОтборы");

	/////////////////////////
	
	// Категории дополнительных услуг.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОборотыДопУслугИспользовать.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТарифДопУслуг.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	// Категории дополнительных услуг.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОборотыДопУслугНаименование.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТарифДопУслуг.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЖирныйШрифтБЭД);
	
	// Значение дополнительных услуг.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОборотыДопУслугИспользовать.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТарифДопУслуг.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	// Значение дополнительных услуг.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОборотыДопУслугЗначение.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТарифДопУслуг.ТребуетсяЗначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТарифДопУслуг.Значение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Пусто>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение",
		ГоризонтальноеПоложение.Центр);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);

	// Значение дополнительных услуг.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОборотыДопУслугИспользовать.Имя);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТарифДопУслуг.Обязательная");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТарифДопУслуг.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаСервере
Процедура ОбработатьПараметры(Параметры, Префикс = "")
	
	ПараметрыДляФормы = Новый Структура;
	
	СервисДоставкиКлиентСервер.ЗаполнитьЛинейныеДанныеПоСтруктуре(Параметры, ПараметрыДляФормы, Префикс);
	
	Если ПараметрыДляФормы.Свойство("ТипГрузоперевозки") Тогда
		
		Если ПараметрыДляФормы.ТипГрузоперевозки = 0 Тогда
			ПараметрыДляФормы.ТипГрузоперевозки = ?(ТипГрузоперевозки = 0, 1, ТипГрузоперевозки);
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаИсключений = "";
	
	Если ПараметрыДляФормы.Свойство("ТоварныйСостав") Тогда
		СтрокаИсключений = СтрокаИсключений + "ТоварныйСостав";
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ПараметрыДляФормы,,СтрокаИсключений);
	УстановитьПризнакОрганизаций();
	ЗаполнитьЗначенияСписковВыбора();
	
	Если Префикс = ""
		И ГрузКоличествоГрузовыхМест = 1 Тогда
		ГрузМаксимальныйВес = ГрузВес;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакОрганизаций()
	
	ТипКонтрагента = ТипЗнч(ОтправительКонтрагентСсылка);
	ОтправительКонтрагентЭтоОрганизация
		= Метаданные.ОпределяемыеТипы.ОрганизацияСервисДоставки.Тип.СодержитТип(ТипКонтрагента);
	
	ТипКонтрагента = ТипЗнч(ПолучательКонтрагентСсылка);
	ПолучательКонтрагентЭтоОрганизация
		= Метаданные.ОпределяемыеТипы.ОрганизацияСервисДоставки.Тип.СодержитТип(ТипКонтрагента);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьДатуОтгрузки(ДатаОтгрузки)
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	ДатаОтгрузки = НачалоДня(ДатаОтгрузки);
	ВремяОтгрузкиК = '00010101000000';
	
	Если ДатаОтгрузки < НачалоДня(ТекущаяДата) Тогда
		ДатаОтгрузки = НачалоДня(ТекущаяДата);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодОтгрузкиПоУмолчанию()
	
	ВремяОтгрузкиС = '00010101090000';
	ВремяОтгрузкиПо = '00010101180000';
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодДоставкиПоУмолчанию()
	
	ВремяДоставкиС = '00010101090000';
	ВремяДоставкиПо = '00010101180000';
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбора()
	
	СписокВыбораТиповДокументовОснований();
	
	СписокВыбора = Элементы.ОтправительКонтрагент.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(1, НСтр("ru='Наша организация...'"));
	СписокВыбора.Добавить(2, НСтр("ru='Контрагент...'"));

	СписокВыбора = Элементы.ПолучательКонтрагент.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(1, НСтр("ru='Наша организация...'"));
	СписокВыбора.Добавить(2, НСтр("ru='Контрагент...'"));
	
	СписокВыбора = Элементы.СпособОтгрузки.СписокВыбора;
	СписокВыбора.Очистить();
	
	СписокВыбора = Элементы.СпособДоставки.СписокВыбора;
	СписокВыбора.Очистить();
	
	СписокВыбора = Элементы.ФормаОплаты.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(1, НСтр("ru='Безналичная'"));
	СписокВыбора.Добавить(2, НСтр("ru='Наличная'"));
	
	СписокВыбора = Элементы.ПлательщикРоль.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(1, НСтр("ru='Отправитель'"));
	СписокВыбора.Добавить(2, НСтр("ru='Получатель'"));
	
	СписокВыбора = Элементы.ОрганизацияБизнесСетиСсылка.СписокВыбора;
	ОрганизацииБизнесСети = ОрганизацииБизнесСетиНаСервере();
	Для Каждого ТекущаяОрганизация Из ОрганизацииБизнесСети Цикл
		СписокВыбора.Добавить(ТекущаяОрганизация.Организация, ТекущаяОрганизация.Наименование);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияСписковВыбора()
	
	СписокВыбора = Элементы.ФормаОплаты.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если ТарифФормаОплаты.Количество() = 0 Тогда
		СписокВыбора.Добавить(1, НСтр("ru='Безналичная'"));
		СписокВыбора.Добавить(2, НСтр("ru='Наличная'"));
	Иначе
		Для каждого ЗначениеФормыОплаты Из ТарифФормаОплаты Цикл
			Если ЗначениеФормыОплаты.Значение = 1 Тогда
				СписокВыбора.Добавить(1, НСтр("ru='Безналичная'"));
			ИначеЕсли ЗначениеФормыОплаты.Значение = 2 Тогда
				СписокВыбора.Добавить(2, НСтр("ru='Наличная'"));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗначениеСписка = Элементы.ФормаОплаты.СписокВыбора.НайтиПоЗначению(ФормаОплаты);
	Если ЗначениеСписка = Неопределено Тогда
		ФормаОплатыПредставление = "";
	Иначе
		ФормаОплатыПредставление = ЗначениеСписка.Представление;
	КонецЕсли;
	
	ЗначениеСписка = Элементы.ПлательщикРоль.СписокВыбора.НайтиПоЗначению(ПлательщикРоль);
	Если ЗначениеСписка = Неопределено Тогда
		ПлательщикРольПредставление = "";
	Иначе
		ПлательщикРольПредставление = ЗначениеСписка.Представление;
	КонецЕсли;
	
	Если ТарифТолькоВремяДоставки Тогда
		ВремяОтгрузкиК = Дата(1,1,1) + (ДатаОтгрузки-НачалоДня(ДатаОтгрузки));
		Элементы.ПараметрыТарифаВремяДоставки.Видимость = Ложь;
		Элементы.ПараметрыТарифаВремяОтгрузки.Видимость = Ложь;
		Элементы.ГруппаОтгрузкиПоВремени.Видимость = Истина;
		ТекущаяДата = ТекущаяДатаСеанса();
		ОтгрузкаТекущимДнем = НачалоДня(ДатаОтгрузки) = НачалоДня(ТекущаяДата);
		Элементы.ОтгрузкаНаБлижайшееВремя.Видимость = ОтгрузкаТекущимДнем;
		Если ОтгрузкаТекущимДнем И ВремяОтгрузкиК = НачалоДня(ВремяОтгрузкиК) Тогда
			ОтгрузкаНаБлижайшееВремя = Истина;
		Иначе
			ОтгрузкаНаБлижайшееВремя = Ложь;
		КонецЕсли;
		ОбновитьИнформациюПоДатеОтгрузки();
	Иначе
		Элементы.ПараметрыТарифаВремяДоставки.Видимость = Истина;
		Элементы.ПараметрыТарифаВремяОтгрузки.Видимость = Истина;
		Элементы.ГруппаОтгрузкиПоВремени.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПоДатеОтгрузки(ТекущаяДата = Неопределено)
	
	Если ОтгрузкаНаБлижайшееВремя Тогда
		Элементы.ВремяОтгрузкиК.Доступность = Ложь;
		ВремяОтгрузкиК = '00010101000000';
		ДатаОтгрузки = НачалоДня(ДатаОтгрузки);
	Иначе
		Если Не ТекущаяДата = Неопределено Тогда
			ВремяОтгрузкиК = ТекущаяДата+3600;
		КонецЕсли;
		Элементы.ВремяОтгрузкиК.Доступность = Истина;
		ДатаОтгрузки = НачалоДня(ДатаОтгрузки) + (ВремяОтгрузкиК-НачалоДня(ВремяОтгрузкиК));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораОтправительАдрес()
	
	СписокВыбора = Элементы.ОтправительАдрес.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если ОтправительКонтрагентЭтоОрганизация Тогда
		СписокВыбора.Добавить(1, НСтр("ru='Наш склад...'"));
	Иначе
		СписокВыбора.Добавить(2, НСтр("ru='Адрес контрагента...'"));
	КонецЕсли;
	
	СписокВыбора.Добавить(3, НСтр("ru='Произвольный адрес...'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораПолучательАдрес()
	
	СписокВыбора = Элементы.ПолучательАдрес.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если ПолучательКонтрагентЭтоОрганизация Тогда
		СписокВыбора.Добавить(1, НСтр("ru='Наш склад...'"));
	Иначе
		СписокВыбора.Добавить(2, НСтр("ru='Адрес контрагента...'"));
	КонецЕсли;
	
	СписокВыбора.Добавить(3, НСтр("ru='Произвольный адрес...'"));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()
	
	КлючНастроекФормы = "Обработка.СервисДоставки.Форма.КарточкаЗаказа/ТекущиеДанные";
	Настройки = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекФормы);
	
	Если Настройки <> Неопределено
		И ТипЗнч(Настройки) = Тип("Соответствие") Тогда
		ТарифыРежимСортировки = Настройки.Получить("ТарифыРежимСортировки");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТипГрузоперевозки) Тогда
		ТипГрузоперевозки = 1;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ГрузКоличествоГрузовыхМест) Тогда
		ГрузКоличествоГрузовыхМест = 1;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаОтгрузки) Тогда
		УстановитьДатуОтгрузки(ДатаОтгрузки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВремяОтгрузкиПо) Тогда
		УстановитьПериодОтгрузкиПоУмолчанию();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВремяДоставкиПо) Тогда
		УстановитьПериодДоставкиПоУмолчанию();
	КонецЕсли;
	
	ВыбиратьКонтактноеЛицоКонтрагента
		= (Метаданные.ОпределяемыеТипы.КонтактноеЛицоКонтрагентаСервисДоставки.Тип.Типы().Количество() > 1)
		ИЛИ (Не Метаданные.ОпределяемыеТипы.КонтактноеЛицоКонтрагентаСервисДоставки.Тип.СодержитТип(Тип("Строка")));
	
	ВыбиратьКонтактноеЛицоОрганизации
		= (Метаданные.ОпределяемыеТипы.КонтактноеЛицоОрганизацииСервисДоставки.Тип.Типы().Количество() > 1)
		ИЛИ (Не Метаданные.ОпределяемыеТипы.КонтактноеЛицоОрганизацииСервисДоставки.Тип.СодержитТип(Тип("Строка")));
	
	Если Не ЗначениеЗаполнено(СпособОтгрузки) Тогда
		СпособОтгрузки = 1;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СпособДоставки) Тогда
		СпособДоставки = 1;
	КонецЕсли;
	
	ПараметрыВалюты = СервисДоставки.НовыйПараметрыВалюты();
	ВалютаНаименование = ПараметрыВалюты.Наименование;
	ВалютаКод = ПараметрыВалюты.Код;
	
	Если НЕ ЗначениеЗаполнено(ВалютаСсылка) Тогда
		ВалютаСсылка = ПараметрыВалюты.Ссылка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВалютаСсылка) Тогда
		ПараметрыВалюты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВалютаСсылка, "Код, Наименование");
		ВалютаНаименование = ПараметрыВалюты.Наименование;
		ВалютаКод = ПараметрыВалюты.Код;
	КонецЕсли;
	
	ГрузОграничениеВес = 20000;
	ГрузОграничениеОбъем = 80;
	ГрузОграничениеВысота = 240;
	ГрузОграничениеДлина = 1340;
	ГрузОграничениеШирина = 240;
	ГрузОграничениеСтоимость = 300000000;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПараметрыОтбора()
	
	// Быстрые отборы.
	
	БыстрыеОтборы.Очистить();
	
	Если СпособОтгрузки = 1 Тогда
		БыстрыеОтборы.Добавить("СпособОтгрузки", СтрШаблон(НСтр("ru = 'Способ отгрузки: %1'"), НСтр("ru='Самопривоз'")));
	Иначе
		БыстрыеОтборы.Добавить("СпособОтгрузки", СтрШаблон(НСтр("ru = 'Способ отгрузки: %1'"), НСтр("ru='Забор от адреса'")));
	КонецЕсли;
	
	Если СпособДоставки = 1 Тогда
		БыстрыеОтборы.Добавить("СпособДоставки", СтрШаблон(НСтр("ru = 'Способ доставки: %1'"), НСтр("ru='Самовывоз'")));
	Иначе
		БыстрыеОтборы.Добавить("СпособДоставки", СтрШаблон(НСтр("ru = 'Способ доставки: %1'"), НСтр("ru='Доставка до адреса'")));
	КонецЕсли;
	
	СтрокиОтборовВерхнийУровень = ОтборыТарифов.ПолучитьЭлементы();
	
	Для Каждого СтрокаОтбораВерхнийУровень Из СтрокиОтборовВерхнийУровень Цикл
		
		СтрокиОтборы = СтрокаОтбораВерхнийУровень.ПолучитьЭлементы();
		
		Если СтрокиОтборы.Количество() Тогда
			Для Каждого СтрокаОтборы Из СтрокиОтборы Цикл
				Если СтрокаОтборы.Использовать Тогда
					БыстрыеОтборы.Добавить("ОтборыТарифов_" + СтрокаОтборы.ПолучитьИдентификатор(), СтрШаблон(НСтр("ru = '%1'"),
						СтрокаОтборы.Наименование));
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если СтрокаОтбораВерхнийУровень.Использовать Тогда
				БыстрыеОтборы.Добавить("ОтборыТарифов_" + СтрокаОтбораВерхнийУровень.ПолучитьИдентификатор(),
					СтрШаблон(НСтр("ru = '%1'"), СтрокаОтбораВерхнийУровень.Наименование));
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаление старых элементов быстрых отборов.
	МассивЭлементовУдаления = Новый Массив;
	КоличествоЭлементов = Элементы.ГруппаБыстрыхОтборов.ПодчиненныеЭлементы.Количество();
	Для ОбратныйИндекс = 1 По КоличествоЭлементов Цикл
		ЭлементОтбора = Элементы.ГруппаБыстрыхОтборов.ПодчиненныеЭлементы[КоличествоЭлементов - ОбратныйИндекс];
		Если ЭлементОтбора.Видимость Тогда
			Элементы.Удалить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
	// Создание новых элементов быстрых отборов.
	Для Каждого ЭлементОтбора Из БыстрыеОтборы Цикл
		
		// Добавление пустой группы.
		НоваяГруппа = Элементы.Добавить("ГруппаБыстрогоОтбора_" + ЭлементОтбора.Значение, Тип("ГруппаФормы"),
			Элементы.ГруппаБыстрыхОтборов);
		НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
		НоваяГруппа.ОтображатьЗаголовок = Ложь;
		НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		НоваяГруппа.Видимость = Истина;
		НоваяГруппа.ОтображатьОтступСлева = Ложь;
		НоваяГруппа.ЦветФона = WebЦвета.СветлоЖелтый;
		НоваяГруппа.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
		
		НовыйЭлемент = Элементы.Добавить("ЗаголовокОтбора_" + ЭлементОтбора.Значение, Тип("ДекорацияФормы"), НоваяГруппа);
		
		// Разбитие на форматированную строку.
		НачалоПредставления = Лев(ЭлементОтбора.Представление, СтрНайти(ЭлементОтбора.Представление, ":"));
		КонецПредставления = Сред(ЭлементОтбора.Представление, СтрНайти(ЭлементОтбора.Представление, ":")+1);
		
		НовыйЭлемент.Заголовок 
			= СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru='%1 <span style=""color: ЦветВажнойНадписиБИП"">%2</span>'"),
			НачалоПредставления,
			КонецПредставления);
		НовыйЭлемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
		НовыйЭлемент.Гиперссылка = Истина;
		НовыйЭлемент.УстановитьДействие("Нажатие", "Подключаемый_Нажатие");
		
		Если НЕ (ЭлементОтбора.Значение = "СпособОтгрузки"
			ИЛИ ЭлементОтбора.Значение = "СпособДоставки") Тогда
			
			НовыйЭлемент = Элементы.Добавить("ОчиститьОтбор_" + ЭлементОтбора.Значение, Тип("ДекорацияФормы"), НоваяГруппа);
			НовыйЭлемент.Вид = ВидДекорацииФормы.Картинка;
			НовыйЭлемент.Картинка = БиблиотекаКартинок.Очистить;
			НовыйЭлемент.Гиперссылка = Истина;
			НовыйЭлемент.УстановитьДействие("Нажатие", "Подключаемый_Нажатие");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеДокументаОснования()
	
	ЕстьДоступныеДокументы = СписокВыбораДокументовОснований.Количество() <> 0;
	
	Элементы.ДокументыОснованияПредставление.Доступность = ЕстьДоступныеДокументы;
	ДокументыОснованияПредставление = Новый ФорматированнаяСтрока("");
	
	Если ЕстьДоступныеДокументы Тогда
		
		ЕстьДокументОснование = ЗначениеЗаполнено(ДокументОснование);
		
		Если Не ЕстьДокументОснование 
			И РежимМастера = 0 Тогда
			
			ДокументыОснованияПредставление = Новый ФорматированнаяСтрока(
				НСтр("ru = 'Выбрать'"), ,
				ЦветаСтиля.ГиперссылкаЦвет, ,
				"ИзменитьДокументыОснования");
			
		ИначеЕсли ЕстьДокументОснование Тогда
			
			ПервыйДокумент = ДокументОснование;
			
			СтрокаДляДокументыОснованияПредставление = СтрШаблон("<a style=""color: ЦветГиперссылкиБЭД"" href = ""%1"">%2</a>",
				ПолучитьНавигационнуюСсылку(ПервыйДокумент), Строка(ПервыйДокумент));
				
			Если РежимМастера = 0 Тогда
				СтрокаДляДокументыОснованияПредставление = СтрокаДляДокументыОснованияПредставление
					+ НСтр("ru='<a style=""color: ЦветГиперссылкиБЭД"" href = ""ИзменитьДокументыОснования"">  (Изменить)</a>'");
			КонецЕсли;
				
			ДокументыОснованияПредставление = СтроковыеФункции.ФорматированнаяСтрока(СтрокаДляДокументыОснованияПредставление);
				
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФормуДляДокументаОснования()
	
	УстановитьВидимостьДоступностьНаСтраницеПараметровГруза();
	УстановитьВидимостьДоступностьНаСтраницеКарточки();
	СформироватьПредставлениеВремениОтгрузки();
	СформироватьПредставлениеВремениДоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьОнЖе()
	
	Элементы.ДекорацияПолучательКонтрагент.Заголовок = ?(ПолучательКонтрагентЭтоОрганизация, НСтр("ru='Она же'"),
		НСтр("ru='Он же'"));
	Элементы.ДекорацияПолучательКонтрагент.Видимость = (РежимМастера <> 2)
												И (ТипЗнч(ПолучательКонтрагентСсылка) = ТипЗнч(ОтправительКонтрагентСсылка))
												И (ПолучательКонтрагентСсылка <> ОтправительКонтрагентСсылка);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьОрганизации()
	
	ДоступноИзменениеОрганизации = (РежимМастера = 0);
	Элементы.ОрганизацияБизнесСетиСсылка.ТолькоПросмотр = Не ДоступноИзменениеОрганизации;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность();
	
	Если РежимМастера = 0 Тогда
		
		Элементы.СохранитьКакЧерновик.Видимость = Истина;
		Элементы.ОтменитьЗаказ.Видимость = Ложь;
		Элементы.Печать.Видимость = Ложь;
		Элементы.ПерейтиКарточка.Видимость = Ложь;
		Элементы.ПерейтиТарифы.Видимость = Истина;
		Элементы.ПерейтиПроверка.Видимость = Истина;
		Элементы.ОформитьЗаказ.Видимость = Истина;
		Элементы.Обновить.Видимость = Ложь;
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОсновное;
		Элементы.ПерейтиОсновное.Пометка = Истина;
		
	ИначеЕсли РежимМастера = 1 Тогда
		
		Элементы.СохранитьКакЧерновик.Видимость = Истина;
		Элементы.ОтменитьЗаказ.Видимость = Истина;
		Элементы.ОтменитьЗаказ.Доступность = ДоступнаОтмена;
		Элементы.Печать.Видимость = Ложь;
		Элементы.ПерейтиКарточка.Видимость = Ложь;
		Элементы.ПерейтиТарифы.Видимость = Истина;
		Элементы.ПерейтиПроверка.Видимость = Истина;
		Элементы.ОформитьЗаказ.Видимость = Истина;
		Элементы.Обновить.Видимость = Ложь;
		
		Элементы.ГруппаОсновное.ТолькоПросмотр = Ложь;
		Элементы.ГруппаПараметрыГруза.ТолькоПросмотр = Ложь;
		Элементы.ГруппаПараметрыТарифа.ТолькоПросмотр = Ложь;
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОсновное;
		Элементы.ПерейтиОсновное.Пометка = Истина;
		
		Элементы.ГруппаОснование.Видимость = ЗначениеЗаполнено(ДокументОснование);
		
	Иначе
		
		Элементы.СохранитьКакЧерновик.Видимость = Ложь;
		Элементы.ОтменитьЗаказ.Видимость = ДоступнаОтмена;
		Элементы.Печать.Видимость = Истина;
		Элементы.ПерейтиКарточка.Видимость = Истина;
		Элементы.ПерейтиТарифы.Видимость = Ложь;
		Элементы.ПерейтиПроверка.Видимость = Ложь;
		Элементы.ОформитьЗаказ.Видимость = Ложь;
		Элементы.Обновить.Видимость = Истина;
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаКарточка;
		Элементы.ПерейтиКарточка.Пометка = Истина;
		Элементы.ГруппаДанныхПоДопУслугам.Видимость = Ложь;
	
		Элементы.ГруппаОсновное.ТолькоПросмотр = Истина;
		Элементы.ГруппаПараметрыГруза.ТолькоПросмотр = Истина;
		Элементы.ГруппаПараметрыТарифа.ТолькоПросмотр = Истина;
		
		Элементы.ГруппаОснование.Видимость = ЗначениеЗаполнено(ДокументОснование);
		
	КонецЕсли;
	
	Элементы.ГруппаТарифыГрузоперевозчик.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокФормы()
	
	Если РежимМастера = 0 Тогда
		ЗаказНаДоставкуПредставление = НСтр("ru='Заказ на доставку (создание)'");
	ИначеЕсли ЗначениеЗаполнено(НомерЗаказа) Тогда
		ЗаказНаДоставкуПредставление = СтрШаблон(НСтр("ru='Заказ на доставку %1 от %2'"),
			НомерЗаказа, Формат(ДатаЗаказа, "ДЛФ=DT"));
	Иначе
		ЗаказНаДоставкуПредставление = НСтр("ru='Заказ на доставку (открытие)'");
	КонецЕсли;
	
	Если ТипГрузоперевозки = 1 Тогда
		ТекстЗаголовка =  НСтр("ru='1С:Доставка: %1'");
	Иначе
		ТекстЗаголовка =  НСтр("ru='1С:Курьер: %1'");
	КонецЕсли;
	
	Заголовок = СтрШаблон(ТекстЗаголовка, ЗаказНаДоставкуПредставление);
	
КонецПроцедуры

&НаСервере
Процедура ОформитьЭлементыУправления()
	
	Если Не ДоступнаОтправкаЗаказовНаДоставку Тогда
		Элементы.ОформитьЗаказ.Заголовок = НСтр("ru='Сохранить и закрыть'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораДокументаОснования()
	
	Если СписокВыбораДокументовОснований.Количество() > 1 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборТипаОснования", ЭтаФорма); 		
		СписокВыбораДокументовОснований.ПоказатьВыборЭлемента(ОписаниеОповещения);
	ИначеЕсли СписокВыбораДокументовОснований.Количество() = 1 Тогда
		ОбработатьВыборТипаОснования(СписокВыбораДокументовОснований[0], Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбора(ИмяСправочника, ИмяРеквизита, ПараметрыОтбора = Неопределено, 
	ИмяПроцедурыОбработки="ОбработатьВыборЗначения")
	
	Если ПараметрыОтбора = Неопределено Тогда
		ПараметрыОтбора = Новый Структура();
	КонецЕсли;
	
	ТекущееЗначениеРеквизита = ЭтотОбъект[ИмяРеквизита];
	
	ИмяФормыВыбора = СервисДоставкиВызовСервера.ИмяФормыВыбораПоОпределяемомуТипу(ИмяСправочника);
	
	Если ИмяФормыВыбора <> "" Тогда
		
		ПараметрыОткрытия = Новый Структура("ТекущаяСтрока", ТекущееЗначениеРеквизита);
		ПараметрыОткрытия.Вставить("Отбор", ПараметрыОтбора);
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		
		СервисДоставкиКлиент.ПередОткрытиемФормыВыбора(ПараметрыОткрытия, ИмяСправочника);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(ИмяПроцедурыОбработки, ЭтотОбъект,
														Новый Структура("ИмяРеквизита", ИмяРеквизита));
		ОткрытьФорму(
			ИмяФормыВыбора,
			ПараметрыОткрытия,
			ЭтаФорма,,,,ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОбъекта(ИмяОбъекта, ИмяРеквизита, ИмяПроцедурыОбработки="ОбработатьИзменениеРеквизитовОбъекта")
	
	ТекущееЗначениеРеквизита = ЭтотОбъект[ИмяРеквизита];
	
	ИмяФормыВыбора = СервисДоставкиВызовСервера.ИмяФормыОбъектаПоОпределяемомуТипу(ИмяОбъекта);
	
	Если ИмяФормыВыбора <> "" Тогда
		
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("Ключ", ТекущееЗначениеРеквизита);
		
		Если РежимМастера = 2 
			ИЛИ Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаКарточка Тогда
			ПараметрыОткрытия.Вставить("ТолькоПросмотр", Истина);
			ОписаниеОповещения = Новый ОписаниеОповещения();
		Иначе
			ОписаниеОповещения = Новый ОписаниеОповещения(ИмяПроцедурыОбработки, ЭтотОбъект,
															Новый Структура("ИмяРеквизита", ИмяРеквизита));
		КонецЕсли;
														
		ОткрытьФорму(
			ИмяФормыВыбора,
			ПараметрыОткрытия,
			ЭтаФорма,,,,ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборТипаОснования(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяОбъекта = Результат.Значение;
	
	ИмяФормыВыбора = "";
	СервисДоставкиКлиентПереопределяемый.УстановитьИмяФормыВыбораОбъектаПоИмени(ПолноеИмяОбъекта, ИмяФормыВыбора);
	
	Если ИмяФормыВыбора = "" Тогда
		ИмяФормыВыбора = ПолноеИмяОбъекта + ".ФормаВыбора";
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("ТекущаяСтрока", ДокументОснование);
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборЗначения", ЭтотОбъект, 
													Новый Структура("ИмяРеквизита", "ДокументОснование"));
	ОткрытьФорму(
		ИмяФормыВыбора,
		ПараметрыОткрытия,
		ЭтаФорма,,,,ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборЗначения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		
		ЭтотОбъект[ДополнительныеПараметры.ИмяРеквизита] = Результат;
		ОбработатьИзменениеРеквизитаФормы(ДополнительныеПараметры.ИмяРеквизита);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеРеквизитовОбъекта(Результат, ДополнительныеПараметры) Экспорт
	
	ОчиститьСообщения();
	Если РежимМастера = 2 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		
		ИмяРеквизита = СтрЗаменить(ДополнительныеПараметры.ИмяРеквизита, "Ссылка", "");
		ИмяРеквизита = ИмяРеквизита + "Реквизиты";
		ОбработатьИзменениеРеквизитаФормы(ИмяРеквизита);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеРеквизитаФормы(ИмяРеквизита)
	
	ОчиститьСообщения();
	Отказ = Ложь;
	ОбработатьИзменениеРеквизитаФормыНаСервере(ИмяРеквизита, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяРеквизита = "ДокументОснование" Тогда
		СформироватьОтборыТарифов(Истина);
		РазвернутьРодителейСпискаСВыбраннымиСтроками();
	КонецЕсли;
	
	УстановитьВидимостьДоступностьНаСтраницеОсновная();
	СформироватьНадписьОтбора();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеРеквизитаФормыНаСервере(ИмяРеквизита, Отказ = Ложь)
	
	Модифицированность = Истина;
	
	Если ИмяРеквизита = "ДокументОснование" Тогда
		
		ПараметрыРеквизита = ПараметрыЗаказаНаДоставкуПоДокументуОснованию(ТипГрузоперевозки, ЭтотОбъект[ИмяРеквизита]);
		ПроверитьПараметрыЗаказа(ПараметрыРеквизита, Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ОбработатьПараметры(ПараметрыРеквизита);
		
		УстановитьДатуОтгрузки(ДатаОтгрузки);
	
		Если Не ЗначениеЗаполнено(ВремяОтгрузкиПо) Тогда
			УстановитьПериодОтгрузкиПоУмолчанию();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВремяДоставкиПо) Тогда
			УстановитьПериодДоставкиПоУмолчанию();
		КонецЕсли;
		
		ОтборыИзменение = Истина;
		ПереключательРасшифровки = ?(ГрузКоличествоГрузовыхМест = 1, 0, 1);
		СформироватьПредставлениеДокументаОснования();
		
		ТоварныйСостав.Очистить();
		
		Если ПараметрыРеквизита.Свойство("ТоварныйСостав") Тогда
			Для Каждого ТекСтрока Из ПараметрыРеквизита.ТоварныйСостав Цикл
				НоваяСтрока = ТоварныйСостав.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "ОтправительКонтрагентСсылка" 
		ИЛИ ИмяРеквизита = "ПолучательКонтрагентСсылка" Тогда
		
		ПараметрыУчастника = ПараметрыУчастникаГрузоперевозки(ЭтотОбъект[ИмяРеквизита]);
		
		ОбработатьПараметры(ПараметрыУчастника, СтрЗаменить(ИмяРеквизита, "КонтрагентСсылка", ""));
		ОтборыИзменение = Истина;
		
		ИмяЭлемента = СтрЗаменить(ИмяРеквизита, "Ссылка", "");
		ЕстьОшибки = Ложь;
		ПроверитьРеквизитыКонтрагента(ИмяЭлемента, ЕстьОшибки, Истина);
		
	ИначеЕсли ИмяРеквизита = "ОтправительКонтрагентРеквизиты" 
		ИЛИ ИмяРеквизита = "ПолучательКонтрагентРеквизиты" Тогда
		
		ИмяЭлемента = СтрЗаменить(ИмяРеквизита, "Реквизиты", "");
		ПараметрыКонтрагента = ПараметрыКонтрагента(ЭтотОбъект[ИмяЭлемента + "Ссылка"]);
		
		ЕстьИзменения = Ложь;
		Для Каждого ТекущийПараметр Из ПараметрыКонтрагента Цикл
			
			Если ТипЗнч(ТекущийПараметр.Значение) = Тип("Структура") Тогда
				Продолжить;
			ИначеЕсли ТекущийПараметр.Значение <> ЭтотОбъект[ИмяЭлемента + ТекущийПараметр.Ключ] Тогда
				ЕстьИзменения = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПараметрыКонтрагента.ЮридическийАдрес.Представление
			<> ЭтотОбъект[ИмяЭлемента + "ЮридическийАдресПредставление"] Тогда
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Если ПараметрыКонтрагента.ЮридическийАдрес.Значение
			<> ЭтотОбъект[ИмяЭлемента + "ЮридическийАдресЗначение"] Тогда
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Если ЕстьИзменения Тогда
			ОбработатьПараметры(ПараметрыКонтрагента, ИмяЭлемента);
			
			ЕстьОшибки = Ложь;
			ПроверитьРеквизитыКонтрагента(ИмяЭлемента, ЕстьОшибки, Истина);
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "ОтправительКонтактноеЛицоСсылка" 
		ИЛИ ИмяРеквизита = "ПолучательКонтактноеЛицоСсылка" Тогда
		
		Если ТипЗнч(ЭтотОбъект[ИмяРеквизита]) <> Тип("Строка") Тогда
			
			ПараметрыРеквизита = ПараметрыКонтактногоЛица(ЭтотОбъект[ИмяРеквизита]);
			ОбработатьПараметры(ПараметрыРеквизита, СтрЗаменить(ИмяРеквизита, "Ссылка", ""));
			
		КонецЕсли;

	ИначеЕсли ИмяРеквизита = "ОтправительАдресВладелец" 
		ИЛИ ИмяРеквизита = "ПолучательАдресВладелец" Тогда
		
		ПараметрыРеквизита = ПараметрыАдреса(ЭтотОбъект[ИмяРеквизита]);
		
		ИмяЭлемента = СтрЗаменить(ИмяРеквизита, "Владелец", "");
		ОбработатьПараметры(ПараметрыРеквизита, ИмяЭлемента);
		
		ЕстьОшибки = Ложь;
		ПроверитьРеквизитыАдреса(ИмяЭлемента, ЕстьОшибки, Истина);
		ОтборыИзменение = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыЗаказаНаДоставкуПоДокументуОснованию(ТипГрузоперевозки, Значение)
	
	Возврат СервисДоставкиВызовСервера.ПараметрыЗаказаНаДоставкуПоДокументуОснованию(ТипГрузоперевозки, Значение);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыЗаказаНаДоставкуПоУмолчанию(ТипГрузоперевозки)
	
	Возврат СервисДоставкиВызовСервера.ПараметрыЗаказаНаДоставкуПоДокументуОснованию(ТипГрузоперевозки);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПроверитьПараметрыЗаказа(ПараметрыЗаказа, Отказ)
	
	ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось заполнить заказ на доставку по документу основанию %1.'"),
		ПараметрыЗаказа.ДокументОснование);
	ТекстОшибкиДетально = НСтр("ru='Не заполнен обязательный реквизит ""%1""'");
	
	ТекстСообщения = "";
	Если Не ЗначениеЗаполнено(ПараметрыЗаказа.Отправитель.Контрагент.Ссылка) Тогда
		
		ТекстСообщения = ТекстСообщения + Символы.ПС + СтрШаблон(ТекстОшибкиДетально, "Отправитель");
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыЗаказа.Получатель.Контрагент.Ссылка) Тогда
		
		ТекстСообщения = ТекстСообщения + Символы.ПС + СтрШаблон(ТекстОшибкиДетально, "Получатель");
		
	КонецЕсли;
	
	ТекстСообщения = СокрЛП(ТекстСообщения);
	
	Если ТекстСообщения <> "" Тогда
		ТекстСообщения = ТекстОшибки + Символы.ПС+ ТекстСообщения;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыУчастникаГрузоперевозки(Значение)
	
	ПараметрыУчастника = СервисДоставки.НовыйПараметрыУчастникаГрузоперевозки();
	
	ПараметрыУчастника.Контрагент = ПараметрыКонтрагента(Значение);
	
	Возврат ПараметрыУчастника;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыКонтрагента(Значение)
	
	ПараметрыКонтрагента = СервисДоставки.НовыйПараметрыКонтрагента();
	ПараметрыКонтрагента.Ссылка = Значение;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		СервисДоставкиПереопределяемый.ЗаполнитьПараметрыКонтрагента(ПараметрыКонтрагента);
	КонецЕсли;
	
	Возврат ПараметрыКонтрагента;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыКонтактногоЛица(Значение)
	
	Параметры = СервисДоставки.НовыйПараметрыКонтактногоЛица();
	Параметры.Ссылка = Значение;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		СервисДоставкиПереопределяемый.ЗаполнитьПараметрыКонтактногоЛица(Параметры);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыАдреса(Значение)
	
	Параметры = СервисДоставки.НовыйПараметрыАдреса("АдресДоставки");
	Параметры.Владелец = Значение;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		СервисДоставкиСлужебный.ЗаполнитьАдресПоПараметрам(Параметры);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьЗаголовок()
	
	Если ТипГрузоперевозки = 1 Тогда
		Заголовок = НСтр("ru = '1C:Доставка: Помощник создания заказа на доставку'");
	Иначе
		Заголовок = НСтр("ru = '1C:Курьер: Помощник создания заказа на доставку'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьНаСтраницеОсновная()
	
	Элементы.ОтправительКонтрагент.Заголовок = ?(ОтправительКонтрагентЭтоОрганизация, НСтр("ru='Организация'"),
		НСтр("ru='Контрагент'"));
	Элементы.ПолучательКонтрагент.Заголовок = ?(ПолучательКонтрагентЭтоОрганизация, НСтр("ru='Организация'"),
		НСтр("ru='Контрагент'"));
	
	ЕстьОтправитель = ЗначениеЗаполнено(ОтправительКонтрагентСсылка);
	ЕстьПолучатель = ЗначениеЗаполнено(ПолучательКонтрагентСсылка);
	
	Элементы.ОтправительКонтактноеЛицо.КнопкаВыбора = ЕстьОтправитель
														И ((ОтправительКонтрагентЭтоОрганизация
														И ВыбиратьКонтактноеЛицоОрганизации)
														ИЛИ (Не ОтправительКонтрагентЭтоОрганизация
														И ВыбиратьКонтактноеЛицоКонтрагента));
	Элементы.ПолучательКонтактноеЛицо.КнопкаВыбора = ЕстьПолучатель
														И ((ПолучательКонтрагентЭтоОрганизация
														И ВыбиратьКонтактноеЛицоОрганизации)
														ИЛИ (Не ПолучательКонтрагентЭтоОрганизация
														И ВыбиратьКонтактноеЛицоКонтрагента));
	
	Элементы.ОтправительАдрес.КнопкаВыпадающегоСписка = ЕстьОтправитель;
	Элементы.ПолучательАдрес.КнопкаВыпадающегоСписка = ЕстьПолучатель;

	Элементы.ГруппаОтправительРеквизиты.Доступность = ЗначениеЗаполнено(ОтправительКонтрагентНаименование);
	Элементы.ГруппаПолучательРеквизиты.Доступность = ЗначениеЗаполнено(ПолучательКонтрагентНаименование);
	
	ЕстьОснование = ЗначениеЗаполнено(ДокументОснование);
	
	Элементы.ОтправительКонтрагент.ТолькоПросмотр = ЕстьОснование;
	Элементы.ПолучательКонтрагент.ТолькоПросмотр = ЕстьОснование;
	
	Элементы.ПолучательКонтрагент.КнопкаВыпадающегоСписка = Не ЕстьОснование;
	
	Элементы.ОтправительКонтрагент.КнопкаВыпадающегоСписка = Не ЕстьОснование;
	
	Элементы.ГруппаОсновноеПериоды.Видимость = ?(ТипГрузоперевозки = 1, Истина, Ложь);
	
	УстановитьВидимостьОнЖе();
	УстановитьВидимостьДоступностьОрганизации();
	
	ЗаполнитьСписокВыбораОтправительАдрес();
	ЗаполнитьСписокВыбораПолучательАдрес();
	
	ОбновитьФормуДляДокументаОснования();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьНаСтраницеПараметровГруза()
	
	УстановитьВидимостьДоступностьГруппыВГХ();

	ЕстьПозиционныйСостав = ЗначениеЗаполнено(ТоварныйСостав);
	Элементы.ТоварныйСоставГруза.Видимость = ?(ТипГрузоперевозки = 1, Ложь, ЕстьПозиционныйСостав И Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьГруппыВГХ()
	
	ОдноМесто = (ПереключательРасшифровки = 0);
	
	Элементы.ГруппаОдноМестоВГХ.Видимость = ОдноМесто;
	Элементы.ГруппаНесколькоМест.Видимость = Не ОдноМесто;
	Элементы.ДекорацияНесколькоМест.Видимость = Не ОдноМесто;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьНаСтраницеТарифы()
	
	Элементы.ТарифыГруппаАдреса.Видимость = ?(ТипГрузоперевозки = 1, Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьНаСтраницеПараметрыТарифа()
	
	Элементы.ОтправительТерминал.КнопкаВыбора = (РежимМастера <> 2);
	Элементы.ПолучательТерминал.КнопкаВыбора = (РежимМастера <> 2);
	Элементы.ОтправительТерминал.КнопкаОткрытия = (РежимМастера = 2);
	Элементы.ПолучательТерминал.КнопкаОткрытия = (РежимМастера = 2);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьНаСтраницеКарточки()
	
	ЕстьПозиционныйСостав = ЗначениеЗаполнено(ТоварныйСостав);
	Элементы.ТоварныйСостав.Видимость = ?(ТипГрузоперевозки = 1, Ложь, ЕстьПозиционныйСостав И Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПредставлениеТарифаИГрузоперевозчика()
	
	ТарифПредставление = ?(ЗначениеЗаполнено(ТарифНаименование), ТарифНаименование, НСтр("ru='<Не выбран>'"));
	
	ГрузоперевозчикПредставление = 
								?(ЗначениеЗаполнено(ГрузоперевозчикНаименование),
								ГрузоперевозчикНаименование 
								+ ?(ГрузоперевозчикТелефон <> ""," ", "") + ГрузоперевозчикТелефон,
								НСтр("ru='<Не выбран>'"));
								
	Элементы.ТарифыТекущийГрузоперевозчик.Гиперссылка = ЗначениеЗаполнено(ГрузоперевозчикНаименование);
	Элементы.ТарифыТекущийТарифПредставление.Гиперссылка = ЗначениеЗаполнено(ГрузоперевозчикНаименование);
								
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОбъем()
	
	Если ГрузКоличествоГрузовыхМест = 1 Тогда
		ГрузОбъемРасчетный = ГрузМаксимальнаяВысота*ГрузМаксимальнаяДлина*ГрузМаксимальнаяШирина*0.01*0.01*0.01;
		Если ГрузОбъемРасчетный > 0 Тогда
			ГрузОбъем = Макс(ГрузОбъемРасчетный, 0.001);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВес()
	
	Если ГрузКоличествоГрузовыхМест = 1 
		И ГрузМаксимальныйВес > 0 Тогда
		ГрузВес = Мин(ГрузВес, ГрузМаксимальныйВес);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВГХ(ИмяРеквизита = "", ЕстьОшибки = Ложь, ВыводитьПредупреждения = Истина)
	
	ПроверитьВсе = (ИмяРеквизита = "");
	
	Если (ПроверитьВсе ИЛИ ИмяРеквизита = "ГрузСтоимость")
		И ЗначениеЗаполнено(ГрузСтоимость) 
		И ЗначениеЗаполнено(ГрузОграничениеСтоимость)
		И ГрузСтоимость > ГрузОграничениеСтоимость Тогда
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ТекстОшибки = НСтр("ru='Стоимость превышает максимальное значение, допустимо не более %1 рублей.'");
			ТекстСообщения = СтрШаблон(ТекстОшибки, Формат(ГрузОграничениеСтоимость,"ЧГ=0"));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ГрузСтоимость");
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ПроверитьВсе ИЛИ ИмяРеквизита = "ГрузВес")
		И ЗначениеЗаполнено(ГрузВес) 
		И ЗначениеЗаполнено(ГрузОграничениеВес)
		И ГрузВес > ГрузОграничениеВес Тогда
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ТекстОшибки = НСтр("ru='Вес превышает максимальное значение, допустимо не более %1 т.'");
			ТекстСообщения = СтрШаблон(ТекстОшибки, Формат(Цел(ГрузОграничениеВес/1000),"ЧГ=0"));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ГрузВес");
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ПроверитьВсе ИЛИ ИмяРеквизита = "ГрузВес")
		И ЗначениеЗаполнено(ГрузВес) 
		И ЗначениеЗаполнено(ГрузМаксимальныйВес)
		И ГрузМаксимальныйВес > ГрузВес Тогда
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ТекстОшибки = НСтр("ru='Общий вес меньше значения самого тяжелого места'");
			ТекстСообщения = ТекстОшибки;
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ГрузВес");
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ПроверитьВсе ИЛИ ИмяРеквизита = "ГрузОбъем")
		И ЗначениеЗаполнено(ГрузОбъем) 
		И ЗначениеЗаполнено(ГрузОграничениеОбъем)
		И ГрузОбъем > ГрузОграничениеОбъем Тогда
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ТекстОшибки = НСтр("ru='Объем превышает максимальное значение, допустимо не более %1 м³.'");
			ТекстСообщения = СтрШаблон(ТекстОшибки, Формат(ГрузОграничениеОбъем,"ЧГ=0"));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ГрузОбъем");
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ПроверитьВсе ИЛИ ИмяРеквизита = "ГрузМаксимальнаяДлина")
		И ЗначениеЗаполнено(ГрузМаксимальнаяДлина) 
		И ЗначениеЗаполнено(ГрузОграничениеДлина)
		И ГрузМаксимальнаяДлина > ГрузОграничениеДлина Тогда
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ТекстОшибки = НСтр("ru='Длина превышает максимальное значение, допустимо не более %1 м.'");
			ТекстСообщения = СтрШаблон(ТекстОшибки, Формат(ГрузОграничениеДлина/100,"ЧГ=0"));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ГрузМаксимальнаяДлина");
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ПроверитьВсе ИЛИ ИмяРеквизита = "ГрузМаксимальнаяШирина")
		И ЗначениеЗаполнено(ГрузМаксимальнаяШирина) 
		И ЗначениеЗаполнено(ГрузОграничениеШирина)
		И ГрузМаксимальнаяШирина > ГрузОграничениеШирина Тогда
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ТекстОшибки = НСтр("ru='Ширина превышает максимальное значение, допустимо не более %1 м.'");
			ТекстСообщения = СтрШаблон(ТекстОшибки, Формат(ГрузОграничениеШирина/100,"ЧГ=0"));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ГрузМаксимальнаяШирина");
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ПроверитьВсе ИЛИ ИмяРеквизита = "ГрузМаксимальнаяВысота")
		И ЗначениеЗаполнено(ГрузМаксимальнаяВысота) 
		И ЗначениеЗаполнено(ГрузОграничениеВысота)
		И ГрузМаксимальнаяВысота > ГрузОграничениеВысота Тогда
		
		ЕстьОшибки = Истина;
		Если ВыводитьПредупреждения Тогда
			ТекстОшибки = НСтр("ru='Высота превышает максимальное значение, допустимо не более %1 м.'");
			ТекстСообщения = СтрШаблон(ТекстОшибки, Формат(ГрузОграничениеВысота/100,"ЧГ=0"));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ГрузМаксимальнаяВысота");
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если ПереключательРасшифровки = 1 Тогда
	
		Если (ИмяРеквизита = "ГрузМаксимальныйВес")
			И ЗначениеЗаполнено(ГрузВес) 
			И ЗначениеЗаполнено(ГрузМаксимальныйВес)
			И ГрузМаксимальныйВес > ГрузВес Тогда
			
			ЕстьОшибки = Истина;
			Если ВыводитьПредупреждения Тогда
				ТекстОшибки = НСтр("ru='Общий вес меньше значения самого тяжелого места.'");
				ТекстСообщения = ТекстОшибки;
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ГрузМаксимальныйВес");
			КонецЕсли;
			
		КонецЕсли;
		
		Если (ПроверитьВсе ИЛИ ИмяРеквизита = "ГрузМаксимальныйВес")
			И ЗначениеЗаполнено(ГрузМаксимальныйВес) 
			И ЗначениеЗаполнено(ГрузОграничениеВес)
			И ГрузМаксимальныйВес > ГрузОграничениеВес Тогда
			
			ЕстьОшибки = Истина;
			Если ВыводитьПредупреждения Тогда
				ТекстОшибки = НСтр("ru='Вес превышает максимальное значение, допустимо не более %1 т.'");
				ТекстСообщения = СтрШаблон(ТекстОшибки, Формат(Цел(ГрузОграничениеВес/1000),"ЧГ=0"));
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ГрузМаксимальныйВес");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СписокВыбораТиповДокументовОснований()
	
	ТипыДокументов = Метаданные.ОпределяемыеТипы.ОснованиеЗаказаСервисДоставки.Тип.Типы();
	
	Для Каждого ТекущийТип Из ТипыДокументов Цикл
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТекущийТип);
		
		Если ОбъектМетаданных <> Неопределено
			И ПравоДоступа("Чтение", ОбъектМетаданных) Тогда
			
			ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
			Если ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОбъектМетаданных) Тогда
				СписокВыбораДокументовОснований.Добавить(ПолноеИмя, ОбъектМетаданных.Синоним);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизит(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИмяРеквизита = Элемент.Имя + "Ссылка";
	ЭтотОбъект[ИмяРеквизита] = Неопределено;
	ОбработатьИзменениеРеквизитаФормы(ИмяРеквизита);
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонНачалоВыбора(Элемент, ЭтоНашаОрганизация)
	
	КонтактнаяИнформацияНачалоВыбора(Элемент, ?(ЭтоНашаОрганизация, 
												"ТелефонКонтактногоЛицаОрганизации",
												"ТелефонКонтактногоЛицаКонтрагента"));
КонецПроцедуры

&НаКлиенте
Процедура АдресНачалоВыбора(Элемент, ЭтоНашаОрганизация)

	КонтактнаяИнформацияНачалоВыбора(Элемент, ?(ЭтоНашаОрганизация, 
												"АдресСкладаОрганизации",
												"АдресСкладаКонтрагента"));
	
КонецПроцедуры	

&НаКлиенте
Процедура КонтактнаяИнформацияНачалоВыбора(Элемент, ВидКонтактнойИнформацииСтрока)
	
	ПараметрыВидаКонтактнойИнформации = ПараметрыВидаКонтактнойИнформации(ВидКонтактнойИнформацииСтрока);
	
	Если Не ЗначениеЗаполнено(ПараметрыВидаКонтактнойИнформации) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = Элемент.Имя;
	ИмяРеквизитаПредставление = ИмяРеквизита + "Представление";
	ИмяРеквизитаЗначенияПолей = ИмяРеквизита + "Значение";
	
	ЕстьИзменение = Ложь;
	Если Элемент.ТекстРедактирования <> ЭтотОбъект[ИмяРеквизитаПредставление] Тогда 
		ЭтотОбъект[ИмяРеквизитаПредставление] = Элемент.ТекстРедактирования;
		ЕстьИзменение = Истина;
	КонецЕсли;
	
	Если (ЭтотОбъект[ИмяРеквизитаЗначенияПолей] = ""
		И ЭтотОбъект[ИмяРеквизитаПредставление] <> "")
		ИЛИ ЕстьИзменение Тогда
		ЭтотОбъект[ИмяРеквизитаЗначенияПолей]
			= СервисДоставкиВызовСервера.КонтактнаяИнформацияПоПредставлению(ЭтотОбъект[ИмяРеквизитаПредставление],
			ПараметрыВидаКонтактнойИнформации.ТипНаименование);
		
	КонецЕсли;
		
	ЭтотОбъект[ИмяРеквизитаЗначенияПолей] = СервисДоставкиВызовСервера.АдресСДополнительнымиПолями(ПараметрыВидаКонтактнойИнформации.Тип, ЭтотОбъект[ИмяРеквизитаЗначенияПолей]);
	
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ПараметрыВидаКонтактнойИнформации.Вид, ЭтотОбъект[ИмяРеквизитаЗначенияПолей],
		ЭтотОбъект[ИмяРеквизитаПредставление],, ПараметрыВидаКонтактнойИнформации.Тип);
		
	ПараметрыОткрытия.Вставить("Заголовок", Элемент.Заголовок);
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", РежимМастера = 2 
		ИЛИ Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаКарточка);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРеквизита", ИмяРеквизита);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуКонтактнойИнформацииЗавершение", ЭтотОбъект, 
								ДополнительныеПараметры);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, ЭтотОбъект, Оповещение);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыВидаКонтактнойИнформации(ВидКонтактнойИнформацииСтрока)
	
	Возврат СервисДоставкиСлужебный.ПараметрыВидаКонтактнойИнформации(ВидКонтактнойИнформацииСтрока);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеКонтактнойИнформации(Элемент, ТипКонтактнойИнформацииСтрока)
	
	ИмяРеквизита = Элемент.Имя;
	ИмяРеквизитаПредставление = ИмяРеквизита + "Представление";
	ИмяРеквизитаЗначенияПолей = ИмяРеквизита + "Значение";
	
	Если ТипКонтактнойИнформацииСтрока = "Телефон" Тогда
		
		Значение = СервисДоставкиВызовСервера.КонтактнаяИнформацияПоПредставлению(ЭтотОбъект[ИмяРеквизитаПредставление], ТипКонтактнойИнформацииСтрока);
		ЭтотОбъект[ИмяРеквизитаЗначенияПолей] = Значение;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	Отказ = Ложь;
	ПроверитьПредставлениеКонтактнойИнформации(ИмяРеквизита, Отказ);
	
	Если ЭтотОбъект[ИмяРеквизитаПредставление] <> Элемент.ТекстРедактирования Тогда
		ЭтотОбъект[ИмяРеквизитаПредставление] = Элемент.ТекстРедактирования;
	КонецЕсли;
	
	ЭтотОбъект[ИмяРеквизитаЗначенияПолей] = СервисДоставкиВызовСервера.КонтактнаяИнформацияПоПредставлению(ЭтотОбъект[ИмяРеквизитаПредставление],
		ТипКонтактнойИнформацииСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПредставлениеКонтактнойИнформации(Префикс, ЕстьОшибки)
	
	ОчиститьСообщения();
	
	Если Найти(Префикс, "Телефон") Тогда
		
		ПроверитьНомерТелефона(Префикс, ЕстьОшибки);
		
	ИначеЕсли Найти(Префикс, "Адрес") Тогда
		
		ПроверитьДозаполнитьАдрес(Префикс, ЕстьОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если (Не ЗначениеЗаполнено(Результат)) 
		ИЛИ РежимМастера = 2 Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	ИмяРеквизита = ДополнительныеПараметры.ИмяРеквизита;
		
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ЕстьИзменения = Ложь;
		Реквизит = ЭтотОбъект[ИмяРеквизита + "Представление"];
		Если Результат.Свойство("Представление") 
			И (Реквизит <> Результат.Представление) Тогда
			Результат.Свойство("Представление", ЭтотОбъект[ИмяРеквизита + "Представление"]);
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		ЕстьИзменения = Ложь;
		Реквизит = ЭтотОбъект[ИмяРеквизита + "Значение"];
		Если Результат.Свойство("Значение") 
			И (Реквизит <> Результат.Значение) Тогда
			Результат.Свойство("Значение", ЭтотОбъект[ИмяРеквизита + "Значение"]);
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		ОтборыИзменение = ОтборыИзменение ИЛИ ЕстьИзменения;
		
		Отказ = Ложь;
		ПроверитьПредставлениеКонтактнойИнформации(ИмяРеквизита, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьПометкиКомандШапки(Элементы)
	
	Элементы.ПерейтиОсновное.Пометка = Ложь;
	Элементы.ПерейтиГруз.Пометка = Ложь;
	Элементы.ПерейтиТарифы.Пометка = Ложь;
	Элементы.ПерейтиПараметрыТарифа.Пометка = Ложь;
	Элементы.ПерейтиПроверка.Пометка = Ложь;
	Элементы.ПерейтиКарточка.Пометка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеЗначенийОтборовТарифов(Отказ)
	
	ЭлементыДереваСписка = ОтборыТарифов.ПолучитьЭлементы();
	ТекстОшибки = НСтр("ru='Значение поля ""%1"" услуги ""%2"" не заполнено'");
	
	Для Каждого ЭлементДереваСписка Из ЭлементыДереваСписка Цикл
		ЭлементыУслуги = ЭлементДереваСписка.ПолучитьЭлементы();
		Для Каждого ЭлементДереваСпискаУслуги Из ЭлементыУслуги Цикл
			Если ЭлементДереваСпискаУслуги.Использовать Тогда
				ЭлементыДереваСпискаУслугиСвойства = ЭлементДереваСпискаУслуги.ПолучитьЭлементы();
				Для Каждого ЭлементДереваСпискаУслугиСвойства Из ЭлементыДереваСпискаУслугиСвойства Цикл
					
					Если Не ЗначениеЗаполнено(ЭлементДереваСпискаУслугиСвойства.Значение) Тогда
						
						ТекстСообщения = СтрШаблон(ТекстОшибки, ЭлементДереваСпискаУслугиСвойства.Наименование,
							ЭлементДереваСпискаУслуги.Наименование);
						ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОткрытие(Элемент)
	
	ИмяРеквизита = Элемент.Имя + "Ссылка";
	ИмяРеквизитаЭтоОрганизация = Элемент.Имя + "ЭтоОрганизация";
	
	ЗначениеРеквизита = ЭтотОбъект[ИмяРеквизита];
	ЭтоОрганизация = ЭтотОбъект[ИмяРеквизитаЭтоОрганизация];
	
	Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		
		Если ЭтоОрганизация Тогда
			ОткрытьФормуОбъекта("ОрганизацияСервисДоставки", ИмяРеквизита);
		Иначе
			ОткрытьФормуОбъекта("КонтрагентСервисДоставки", ИмяРеквизита);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ЗапросыКСервису

&НаКлиенте
Процедура ПолучитьТарифы()
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТарифы();
	ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Поиск подходящих тарифов'");
	ПараметрыОперации.ВыводитьОкноОжидания = Ложь;
	Тарифы.Очистить();
	ИнформацияПоТарифу = Новый ТабличныйДокумент;
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьУслугиТарифов()
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьУслугиТарифов();
	ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение услуг тарифов'");
	ПараметрыОперации.ВыводитьОкноОжидания = Ложь;
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецФункции

&НаКлиенте
Процедура СоздатьИзменитьЗаказНаДоставку(ОформитьЗаказ = Ложь, ЗакрытьПослеЗавершенияОперации = Ложь)
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыСоздатьИзменитьЗаказНаДоставку();
	
	Если ЗначениеЗаполнено(ИдентификаторЗаказа) Тогда
		НаименованиеОперации = НСтр("ru = 'Сохранение заказа на доставку'");
	Иначе
		НаименованиеОперации = НСтр("ru = 'Создание заказа на доставку'");
	КонецЕсли;
	
	ПараметрыОперации.НаименованиеОперации = НаименованиеОперации;
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	ПараметрыОперации.Вставить("ОформитьЗаказ", ОформитьЗаказ);
	ПараметрыОперации.Вставить("ЗакрытьПослеЗавершенияОперации", ЗакрытьПослеЗавершенияОперации);
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьЗаказНаДоставку(НаименованиеОперации = "")
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОформитьЗаказНаДоставку();
	
	Если НаименованиеОперации = "" Тогда
		НаименованиеОперации = НСтр("ru = 'Отправка заказа на доставку грузоперевозчику'");
	КонецЕсли;
	
	ПараметрыОперации.НаименованиеОперации = НаименованиеОперации;
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьЗаказ()
	
	ОчиститьСообщения();
	Отказ = Ложь;
	ПроверитьЗаполнениеОбязательныхРеквизитов(5, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Элементы.ПерейтиПроверка.Пометка Тогда
		ПерейтиКШагуПроверка();
	ИначеЕсли Модифицированность Тогда
		СоздатьИзменитьЗаказНаДоставку(Истина);
	Иначе
		ОформитьЗаказНаДоставку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗаказНаДоставку(ПлатнаяОтмена = Ложь)
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОтменитьЗаказНаДоставку();
	ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Отмена заказа на доставку.'");
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	ПараметрыОперации.Вставить("ПлатнаяОтмена", ПлатнаяОтмена);
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаказНаДоставку()
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОбновитьЗаказНаДоставку();
	ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Обновление данных по заказу на доставку'");
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	
	ВыполнитьЗапрос(ПараметрыОперации);
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнитьЗапрос

&НаКлиенте
Процедура ВыполнитьЗапрос(ПараметрыОперации)
	
	ИнтернетПоддержкаПодключена = Ложь;
	ОчиститьСообщения();
	
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ПараметрыОперации.ИмяПроцедуры;
	ФоновоеЗадание = ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации);
	ЭтотОбъект[ИмяФоновогоЗадания] = ФоновоеЗадание;
	
	Если ИнтернетПоддержкаПодключена = Ложь Тогда
		
		// Загрузка с проверкой подключения интернет-поддержки.
		Оповещение = Новый ОписаниеОповещения("ВыполнитьЗапросПродолжение", ЭтотОбъект, ПараметрыОперации);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Оповещение, ЭтотОбъект);
		Возврат;
		
	Иначе
		
		ПараметрыОперации.Вставить("ФоновоеЗадание", ФоновоеЗадание);
		ВыполнитьЗапросПродолжение(Истина, ПараметрыОперации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяФоновогоЗадания = "ФоновоеЗадание"+ ДополнительныеПараметры.ИмяПроцедуры;
	
	Если Результат = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Отсутствует подключение к Интернет-поддержке пользователей.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("Логин") Тогда
		// Повторный вызов метода после подключения к Интернет-поддержке.
		ИнтернетПоддержкаПодключена = Ложь;
		ЭтотОбъект[ИмяФоновогоЗадания] = ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ДополнительныеПараметры);
		ДополнительныеПараметры.Добавить("ФоновоеЗадание", ЭтотОбъект[ИмяФоновогоЗадания]);
	КонецЕсли;
	
	Если ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект[ИмяФоновогоЗадания].Статус = "Выполняется" Тогда
		
		ОжидатьЗавершениеВыполненияЗапроса(ДополнительныеПараметры);
		
	ИначеЕсли ЭтотОбъект[ИмяФоновогоЗадания].Статус = "Выполнено" Тогда
		
		ВыполнитьЗапросЗавершение(ЭтотОбъект[ИмяФоновогоЗадания], ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершениеВыполненияЗапроса(ПараметрыОперации)
	
	ВыводитьОкноОжидания = ?(ЗначениеЗаполнено(ПараметрыОперации.ВыводитьОкноОжидания), 
																	ПараметрыОперации.ВыводитьОкноОжидания,
																	Ложь);
	// Установка картинки длительной операции.
	Если Не ВыводитьОкноОжидания Тогда
		
		Если ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьУслугиТарифов() Тогда
			
			Элементы.ГруппаОжиданиеЗагрузкиОтборов.Видимость = Истина;
			Элементы.ОбновитьТарифы.Доступность = Ложь;
			
		ИначеЕсли ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказНаДоставку() Тогда
			
			Если РежимМастера = 2 Тогда
				Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОжиданиеЗагрузкиЗаказа;
			КонецЕсли;
			
		ИначеЕсли ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТарифы() Тогда
			
			Элементы.ОбновитьТарифы.Картинка = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация;
			Элементы.ДекорацияСостояниеВыполненияЗапросаТарифы.Заголовок = НСтр("ru='Поиск подходящих тарифов...'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Инициализация обработчик ожидания завершения.
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ПараметрыОперации.ИмяПроцедуры;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	ПараметрыОперации.Вставить("ФоновоеЗадание", ФоновоеЗадание);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = ПараметрыОперации.НаименованиеОперации;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	ПараметрыОжидания.ВыводитьОкноОжидания = ВыводитьОкноОжидания;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.Вставить("ИдентификаторЗадания", ФоновоеЗадание.ИдентификаторЗадания);
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ВыполнитьЗапросЗавершение",
		ЭтотОбъект, ПараметрыОперации);
		
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, ОбработкаЗавершения,	ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// Инициализация.
	Отказ = Ложь;
	ТекстСообщения = "";
	ДанныеОбновлены = Ложь;
	
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ДополнительныеПараметры.ИмяПроцедуры;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	
	// Вывод сообщений из фонового задания.
	Если Результат = Неопределено ИЛИ ФоновоеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СервисДоставкиКлиент.ОбработатьРезультатФоновогоЗадания(Результат, ДополнительныеПараметры, Отказ);
	
	// Проверка результата поиска.
	Если Не Отказ И Результат.Статус = "Выполнено" Тогда
		Если ЗначениеЗаполнено(Результат.АдресРезультата)
			И ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
			
			Если ДополнительныеПараметры.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыСоздатьИзменитьЗаказНаДоставку()
				И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания
				= ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
					
				ОперацияВыполнена = Истина;
				ЭтоСоздание = (ИдентификаторЗаказа = "");
				ЗагрузитьРезультатСозданияЗаказа(Результат.АдресРезультата, ОперацияВыполнена);
				Если ОперацияВыполнена = Истина Тогда 
					Если ЭтоСоздание Тогда
						ТекстПояснения = НСтр("ru='Заказ на доставку создан.'");
						ТипОперации = НСтр("ru='Создание:'");
					Иначе
						ТекстПояснения = НСтр("ru='Заказ на доставку изменен.'");
						ТипОперации = НСтр("ru='Изменение:'");
					КонецЕсли;
					
					ПоказатьОповещениеПользователя(ТипОперации,, ТекстПояснения, БиблиотекаКартинок.Информация32);
					УстановитьВидимостьДоступностьОрганизации();
				КонецЕсли;
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				ДанныеОбновлены = Истина;
				
				Если ОперацияВыполнена Тогда
					
					Модифицированность = Ложь;
					
					Если ЭтоСоздание Тогда
						Оповестить("ОбновитьСписокЗаказовНаДоставку");
					КонецЕсли;
					
					Если ДополнительныеПараметры.ОформитьЗаказ Тогда
						ОформитьЗаказНаДоставку();
					КонецЕсли;
					
					Если ДополнительныеПараметры.Свойство("ЗакрытьПослеЗавершенияОперации")
						И ДополнительныеПараметры.ЗакрытьПослеЗавершенияОперации Тогда
						Закрыть();
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОформитьЗаказНаДоставку()
				И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания
				= ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
					
				РезультатОформленияЗаказаНаДоставку = 1;
				ЗагрузитьРезультатОформленияЗаказа(Результат.АдресРезультата, РезультатОформленияЗаказаНаДоставку);
				
				Если РезультатОформленияЗаказаНаДоставку = 1 Тогда 
					ТекстПояснения = НСтр("ru='Заказ на доставку передан к оформлению грузоперевозчику'");
					ТипОперации = НСтр("ru='Оформление:'");
					ПоказатьОповещениеПользователя(ТипОперации,, ТекстПояснения, БиблиотекаКартинок.Информация32);
				КонецЕсли;
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				ДанныеОбновлены = Истина;
				
				Если РезультатОформленияЗаказаНаДоставку = 1 Тогда
					Оповестить("ОбновитьСписокЗаказовНаДоставку");
					Закрыть();
				ИначеЕсли РезультатОформленияЗаказаНаДоставку = 2 Тогда
					ОформитьЗаказНаДоставку(НСтр("ru='Расчет стоимости заказа на доставку'"));
				КонецЕсли;
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТарифы()
				И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания
				= ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
				
				ЗагрузитьРезультатПолученияТарифов(Результат.АдресРезультата);
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				ОтборыИзменение = Ложь;
				СформироватьНадписьОтбора();
				ДанныеОбновлены = Истина;
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьУслугиТарифов()
				И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания
				= ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
				
				ОперацияВыполнена = Истина;
				ЗагрузитьРезультатПолученияУслугТарифов(Результат.АдресРезультата, ОперацияВыполнена);
				РазвернутьРодителейСпискаСВыбраннымиСтроками();
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				Если ОперацияВыполнена Тогда
					ПроверитьЗаполнениеЗначенийОтборовТарифов(Отказ);
					Если Не Отказ Тогда
						Элементы.ГруппаОтборы.Скрыть();
						ОбработатьИзменениеВариантовДоставки();
						Если ДополнительныеПараметры.ВыводитьОкноОжидания = Истина Тогда
							ОбработатьПрименениеОтборов();
						КонецЕсли;
						
						Если РежимМастера = 0 
							И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаТарифы Тогда
							ОбработатьПрименениеОтборов();
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				ДанныеОбновлены = Истина;
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры
				= СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказНаДоставку()
				И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания
				= ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
				
				ДанныеОбновлены = Истина;
				ЗагрузитьРезультатПолученияЗаказаНаДоставку(Результат.АдресРезультата, ДанныеОбновлены);
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				Если ДанныеОбновлены Тогда
					УстановитьВидимостьДоступностьНаСтраницеОсновная();
					ОбновитьФормуДляДокументаОснования();
					СформироватьПредставлениеТарифаИГрузоперевозчика();
					Если РежимМастера = 1 Тогда
						ПерейтиКТекущемуШагуМастера(Ложь);
						ПолучитьУслугиТарифов();
						ТарифыУстановитьРежимСортировки(ТарифыРежимСортировки);
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОбновитьЗаказНаДоставку()
				И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания
				= ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
					
				ЗагрузитьРезультатОбновленияЗаказа(Результат.АдресРезультата, ДанныеОбновлены);
				
				Если ДанныеОбновлены Тогда
					ЗагрузитьРезультатПолученияЗаказаНаДоставку(Результат.АдресРезультата, ДанныеОбновлены);
					Если ДанныеОбновлены Тогда
						ПолучитьУслугиТарифов();
						ТарифыУстановитьРежимСортировки(ТарифыРежимСортировки);
						УстановитьВидимостьДоступностьНаСтраницеОсновная();
						ОбновитьФормуДляДокументаОснования();
						СформироватьПредставлениеТарифаИГрузоперевозчика();
					КонецЕсли;
				КонецЕсли;
				
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				
			ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры
				= СервисДоставкиКлиентСервер.ИмяПроцедурыОтменитьЗаказНаДоставку()
				И ДополнительныеПараметры.ФоновоеЗадание.ИдентификаторЗадания
				= ЭтотОбъект[ИмяФоновогоЗадания].ИдентификаторЗадания Тогда
				
				РезультатОтмены = 0;
				СуммаОтмены = 0;
				ЗагрузитьРезультатОтменыЗаказа(Результат.АдресРезультата, РезультатОтмены, СуммаОтмены);
				Если РезультатОтмены = 1 Тогда //Отменен
					
					ТекстПояснения = НСтр("ru='Заказ на доставку отменен.'");
					ПоказатьОповещениеПользователя(НСтр("ru='Отмена:'"),, ТекстПояснения, БиблиотекаКартинок.Информация32);
					Оповестить("ОбновитьСписокЗаказовНаДоставку");
					Закрыть();
					
				ИначеЕсли РезультатОтмены = 2 Тогда //Возможна платная отмена
					
					ОписаниеОЗавершении = Новый ОписаниеОповещения("ЗавершениеОтменитьЗаказ", ЭтотОбъект);
					
					СписокКнопок = Новый СписокЗначений();
					СписокКнопок.Добавить(КодВозвратаДиалога.Повторить, НСтр("ru='Да'"));
					СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
					
					ТекстСообщения = НСтр("ru='Доступна только платная отмена заказа.'");
					Если СуммаОтмены > 0 Тогда
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Сумма отмены заказа %1.'"), СуммаОтмены);
					КонецЕсли;
						
					ТекстСообщения = ТекстСообщения + НСтр("ru='Отменить платно заказ?'");
					ПоказатьВопрос(ОписаниеОЗавершении, ТекстСообщения, СписокКнопок);
					
				ИначеЕсли РезультатОтмены = 3 Тогда //Отмена заказа уже невозможна
					
					ТекстПояснения = НСтр("ru='Заказ на доставку невозможно отменить.'");
					ПоказатьОповещениеПользователя(НСтр("ru='Отмена:'"),, ТекстПояснения, БиблиотекаКартинок.Информация32);
					
				КонецЕсли;
				ЭтотОбъект[ИмяФоновогоЗадания] = Неопределено;
				ДанныеОбновлены = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыЗапроса

&НаСервере
Функция ПараметрыЗапроса(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = Новый Структура();
	
	ИмяПроцедуры = ПараметрыОперации.ИмяПроцедуры;
	
	Если ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьУслугиТарифов() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаПолучитьУслугиТарифов(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТарифы() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаПолучитьТарифы(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыСоздатьИзменитьЗаказНаДоставку() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаСоздатьИзменитьЗаказНаДоставку(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОформитьЗаказНаДоставку() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаОформитьЗаказНаДоставку(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказНаДоставку() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаПолучитьЗаказНаДоставку(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОбновитьЗаказНаДоставку() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаОбновитьЗаказНаДоставку(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыОтменитьЗаказНаДоставку() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаОтменитьЗаказНаДоставку(ПараметрыОперации, Отказ);
	ИначеЕсли ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьТипыГрузоперевозки() Тогда
		ПараметрыЗапроса = ПараметрыЗапросаПолучитьТипыГрузоперевозки(ПараметрыОперации, Отказ);
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьУслугиТарифов(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьУслугиТарифов();
	
	ПараметрыЗапроса.ТипГрузоперевозки = ТипГрузоперевозки;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьЗаказНаДоставку(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьЗаказНаДоставку();
	ПараметрыЗапроса.Вставить("Идентификатор", ИдентификаторЗаказа);

	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаОбновитьЗаказНаДоставку(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаОбновитьЗаказНаДоставку();
	ПараметрыЗапроса.Вставить("Идентификатор", ИдентификаторЗаказа);

	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаОтменитьЗаказНаДоставку(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаОтменитьЗаказНаДоставку();
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗаказа)
		ИЛИ Не ДоступнаОтмена Тогда
		ТекстСообщения = НСтр("ru='Отмена данного заказа недоступна. Невозможно отменить заказ.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
		Возврат ПараметрыЗапроса;
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("Идентификатор", ИдентификаторЗаказа);
	ПараметрыЗапроса.Вставить("ОтменитьЗаказПлатно", ?(ПараметрыОперации.ПлатнаяОтмена, "1", "0"));
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьТарифы(ПараметрыОперации, Отказ)
	
	Результат = СервисДоставки.НовыйПараметрыЗапросаПолучитьТарифы();
	
	Результат.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	Если ОрганизацияБизнесСетиСсылка = ОтправительКонтрагентСсылка Тогда
		ЗаказчикРоль = 1;
	ИначеЕсли ОрганизацияБизнесСетиСсылка = ПолучательКонтрагентСсылка Тогда
		ЗаказчикРоль = 2;
	ИначеЕсли ОрганизацияБизнесСетиСсылка = ПлательщикКонтрагентСсылка Тогда
		ЗаказчикРоль = 3;
	Иначе
		ЗаказчикРоль = 4;
	КонецЕсли;
	
	Результат.Вставить("ЗаказчикРоль", ЗаказчикРоль);
	
	Результат.Вставить("ДатаОтгрузки", ДатаОтгрузки);
	Результат.Вставить("ВремяОтгрузкиС", ВремяОтгрузкиС);
	Результат.Вставить("ВремяОтгрузкиПо", ВремяОтгрузкиПо);
	Результат.Вставить("ВремяОтгрузкиОбедС", ВремяОтгрузкиОбедС);
	Результат.Вставить("ВремяОтгрузкиОбедПо", ВремяОтгрузкиОбедПо);
	
	Результат.Вставить("ДатаДоставки", ДатаДоставки);
	Результат.Вставить("ВремяДоставкиС", ВремяДоставкиС);
	Результат.Вставить("ВремяДоставкиПо", ВремяДоставкиПо);
	Результат.Вставить("ВремяДоставкиОбедС", ВремяДоставкиОбедС);
	Результат.Вставить("ВремяДоставкиОбедПо", ВремяДоставкиОбедПо);

	Результат.Вставить("ОтправительАдрес", ОтправительАдресПредставление);         //Полный адрес
	Результат.Вставить("ОтправительАдресЗначение", Новый ХранилищеЗначения(ОтправительАдресЗначение,
		Новый СжатиеДанных(9))); //Формат JSON 1С:БСП
	
	Результат.Вставить("ПолучательАдрес", ПолучательАдресПредставление);          //Полный адрес
	Результат.Вставить("ПолучательАдресЗначение", Новый ХранилищеЗначения(ПолучательАдресЗначение,
		Новый СжатиеДанных(9))); //Формат JSON 1С:БСП
	
	Результат.Вставить("ГрузКоличествоГрузовыхМест", ГрузКоличествоГрузовыхМест);
	Результат.Вставить("ГрузОбщийВес", ГрузВес);
	Результат.Вставить("ГрузОбщийОбъем", ГрузОбъем);
	Результат.Вставить("ГрузМаксимальнаяВысота", ГрузМаксимальнаяВысота);
	Результат.Вставить("ГрузМаксимальнаяДлина", ГрузМаксимальнаяДлина);
	Результат.Вставить("ГрузМаксимальнаяШирина", ГрузМаксимальнаяШирина);
	Результат.Вставить("ГрузМаксимальныйВес", ГрузМаксимальныйВес);
	Результат.Вставить("ГрузСодержимое", ГрузСодержимое);
	Результат.Вставить("ГрузСтоимость", ГрузСтоимость);
	
	Для Каждого ТекущаяУслуга Из УслугиТарифов Цикл
		Если ТекущаяУслуга.Использовать Тогда
			НоваяУслуга = Результат.Услуги.Добавить();
			НоваяУслуга.Идентификатор = ТекущаяУслуга.Идентификатор;
			НоваяУслуга.Свойства = Новый Массив();
			Для Каждого ТекущееСвойство Из ТекущаяУслуга.Свойства Цикл
				ПараметрыСвойстваУслуги = СервисДоставки.НовыйПараметрыСвойстваУслуги();
				ПараметрыСвойстваУслуги.Идентификатор = ТекущееСвойство.Идентификатор;
				ПараметрыСвойстваУслуги.Значение = ТекущееСвойство.Значение;
				НоваяУслуга.Свойства.Добавить(ПараметрыСвойстваУслуги);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаТовара Из ТоварныйСостав Цикл
		НовыйТовар = Результат.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйТовар, СтрокаТовара);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаСоздатьИзменитьЗаказНаДоставку(ПараметрыОперации, Отказ)
	
	Результат = СервисДоставки.НовыйПараметрыЗапросаСоздатьИзменитьЗаказНаДоставку();
	Результат.Вставить("КлючИдемпотентности", КлючИдемпотентности);
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		Результат.Вставить("ДокументОснованиеИдентификатор", ДокументОснование.УникальныйИдентификатор());
	КонецЕсли;
	
	Если ПлательщикРоль = 0 Тогда
		ПлательщикРоль = ?(ОтправительКонтрагентЭтоОрганизация, 1, 2); //1 - отправитель, 2 - получатель, 3 - третье лицо
	КонецЕсли;
	
	РеквизитыФормы = ПолучитьРеквизиты();
	ДанныеФормы = Новый Структура();
	Для Каждого ТекущийРеквизит Из РеквизитыФормы Цикл
		ДанныеФормы.Вставить(ТекущийРеквизит.Имя, ЭтаФорма[ТекущийРеквизит.Имя]);
	КонецЦикла;
	СервисДоставкиКлиентСервер.ЗаполнитьСтруктуруПоЛинейнымДанным(Результат, ДанныеФормы);
	
	Для Каждого ТекущаяУслуга Из УслугиТарифа Цикл
		Если ТекущаяУслуга.Использовать Тогда
			НоваяУслуга = Результат.Услуги.Добавить();
			НоваяУслуга.Идентификатор = ТекущаяУслуга.Идентификатор;
			НоваяУслуга.Свойства = Новый Массив();
			Для Каждого ТекущееСвойство Из ТекущаяУслуга.Свойства Цикл
				ПараметрыСвойстваУслуги = СервисДоставки.НовыйПараметрыСвойстваУслуги();
				ПараметрыСвойстваУслуги.Идентификатор = ТекущееСвойство.Идентификатор;
				ПараметрыСвойстваУслуги.Значение = ТекущееСвойство.Значение;
				НоваяУслуга.Свойства.Добавить(ПараметрыСвойстваУслуги);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекущаяПозиция Из ТоварныйСостав Цикл
		НоваяПозиция = Результат.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяПозиция, ТекущаяПозиция);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаОформитьЗаказНаДоставку(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаОформитьЗаказНаДоставку();
	ПараметрыЗапроса.Вставить("Идентификатор", ИдентификаторЗаказа);

	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаПолучитьТипыГрузоперевозки(ПараметрыОперации, Отказ)
	
	ПараметрыЗапроса = СервисДоставки.НовыйПараметрыЗапросаПолучитьТипыГрузоперевозки();
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

#КонецОбласти

#Область ЗагрузитьРезультаты

&НаСервере
Процедура ЗагрузитьРезультатПолученияУслугТарифов(АдресРезультата, ОперацияВыполнена = Истина)
	
	Элементы.ГруппаОжиданиеЗагрузкиОтборов.Видимость = Ложь;
	Элементы.ОбновитьТарифы.Доступность = Истина;
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если Результат <> Неопределено Тогда
		
			Если Результат.Свойство("Список") Тогда
				ЗагрузитьУслугиТарифовДляТипаГрузоперевозки(Результат.Список);
			Иначе
				ОперацияВыполнена = Ложь;
			КонецЕсли;
				
			Если Результат.Свойство("СписокНесовместимыеУслуги") Тогда
				ЗагрузитьНесовместимыеУслуги(Результат.СписокНесовместимыеУслуги);
			Иначе
				ОперацияВыполнена = Ложь;
			КонецЕсли;
			
			Если Результат.Свойство("Ошибки") Тогда
				Если ТипЗнч(Результат.Ошибки) = Тип("Массив") Тогда
					Для Каждого ТекущаяОшибка Из Результат.Ошибки Цикл
						ОбщегоНазначения.СообщитьПользователю(ТекущаяОшибка);
					КонецЦикла;
				КонецЕсли;
				ОперацияВыполнена = Ложь;
			КонецЕсли;
		Иначе
			ОперацияВыполнена = Ложь;
		КонецЕсли;
	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
	Если ОперацияВыполнена Тогда
		СформироватьОтборыТарифов(Истина);
		СформироватьПараметрыОтбора();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьУслугиТарифовДляТипаГрузоперевозки(Услуги)
	
	УслугиТарифов.Очистить();
	
	ИдентификаторУслугиОтгрузки = ?(СпособОтгрузки = 1, "000000002", "000000001");
	ИдентификаторУслугиДоставки = ?(СпособДоставки = 1, "000000004", "000000003");
	
	Для Каждого ТекущаяУслуга Из Услуги Цикл
		
		ДобавитьПредопределенныеУслуги(ТекущаяУслуга.Идентификатор);
		
		НоваяУслуга = УслугиТарифов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяУслуга, ТекущаяУслуга,,"Свойства");
		
		НоваяУслуга.Использовать = (НоваяУслуга.Идентификатор = ИдентификаторУслугиОтгрузки
									ИЛИ НоваяУслуга.Идентификатор = ИдентификаторУслугиДоставки);
									
		НайденныеСтроки = УслугиТарифа.НайтиСтроки(Новый Структура("Идентификатор", НоваяУслуга.Идентификатор));
		
		БратьЗначенияИзТарифа = НайденныеСтроки.Количество();
		Если БратьЗначенияИзТарифа Тогда
			ДанныеИзТарифа = НайденныеСтроки[0];
			НоваяУслуга.Использовать = ДанныеИзТарифа.Использовать;
		КонецЕсли;
			
		Для Каждого ТекущееСвойство Из ТекущаяУслуга.Свойства Цикл
			
			НовоеСвойство = НоваяУслуга.Свойства.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеСвойство, ТекущееСвойство);
			
			НовоеСвойство.Значение = ?(НовоеСвойство.ТипЗначения = "Число", 0,
				?(НовоеСвойство.ТипЗначения = "Булево", Ложь, ""));
			
			Если БратьЗначенияИзТарифа Тогда
				НайденныеСвойства = ДанныеИзТарифа.Свойства.НайтиСтроки(Новый Структура("Идентификатор",
					НовоеСвойство.Идентификатор));
					
				Если НайденныеСвойства.Количество() Тогда
					НовоеСвойство.Значение = НайденныеСвойства[0].Значение;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНесовместимыеУслуги(Услуги)
	
	НесовместимыеУслуги.Очистить();
	
	Для Каждого ТекущаяУслуга Из Услуги Цикл
		ДобавитьПредопределенныеУслуги(ТекущаяУслуга.Идентификатор);
		НоваяУслуга = НесовместимыеУслуги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяУслуга, ТекущаяУслуга);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПредопределенныеУслуги(ИдентификаторУслуги)
	
	Если ИдентификаторУслуги = "000000002" И Элементы.СпособОтгрузки.СписокВыбора.НайтиПоЗначению(1) = Неопределено Тогда
		Элементы.СпособОтгрузки.СписокВыбора.Добавить(1, НСтр("ru='Самопривоз'"));
	КонецЕсли;
	
	Если ИдентификаторУслуги = "000000001" И Элементы.СпособОтгрузки.СписокВыбора.НайтиПоЗначению(2) = Неопределено Тогда
		Элементы.СпособОтгрузки.СписокВыбора.Добавить(2, НСтр("ru='Забор от адреса'"));
	КонецЕсли;
	
	Если ИдентификаторУслуги = "000000004" И Элементы.СпособДоставки.СписокВыбора.НайтиПоЗначению(1) = Неопределено Тогда
		Элементы.СпособДоставки.СписокВыбора.Добавить(1, НСтр("ru='Самовывоз'"));
	КонецЕсли;
	
	Если ИдентификаторУслуги = "000000003" И Элементы.СпособДоставки.СписокВыбора.НайтиПоЗначению(2) = Неопределено Тогда
		Элементы.СпособДоставки.СписокВыбора.Добавить(2, НСтр("ru='Доставка до адреса'"));
	КонецЕсли;
	

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатПолученияТарифов(АдресРезультата)
	
	Элементы.ОбновитьТарифы.Картинка = БиблиотекаКартинок.Обновить;
	СостояниеВыполненияЗапроса = "";
	Тарифы.Очистить();
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если Результат <> Неопределено Тогда
		
			Если Результат.Свойство("Список") Тогда
				Для Каждого ТекущаяСтрока Из Результат.Список Цикл
					
					НоваяСтрока = Тарифы.Добавить();
					
					НоваяСтрока.ГрузоперевозчикИдентификатор = ТекущаяСтрока.ГрузоперевозчикИдентификатор;
					НоваяСтрока.ГрузоперевозчикНаименование = ТекущаяСтрока.ГрузоперевозчикНаименование;
					НоваяСтрока.ТарифИдентификатор = ТекущаяСтрока.ТарифИдентификатор;
					НоваяСтрока.ТарифНаименование = ТекущаяСтрока.ТарифНаименование;
					НоваяСтрока.Стоимость = ТекущаяСтрока.Стоимость;
					НоваяСтрока.МинимальныйСрок = ТекущаяСтрока.МинимальныйСрок;
					НоваяСтрока.МаксимальныйСрок = ТекущаяСтрока.МаксимальныйСрок;
					НоваяСтрока.Негабарит = ТекущаяСтрока.Негабарит;
					НоваяСтрока.ОписаниеНеГабарит = ТекущаяСтрока.ОписаниеНеГабарит;
					НоваяСтрока.Описание = ТекущаяСтрока.Описание;
					НоваяСтрока.МаксВес = ТекущаяСтрока.МаксВес;
					НоваяСтрока.МаксОбъем = ТекущаяСтрока.МаксОбъем;
					НоваяСтрока.МаксДлина = ТекущаяСтрока.МаксДлина;
					НоваяСтрока.ТочкаОтправленияПредставление = ТекущаяСтрока.ТочкаОтправленияПредставление;
					НоваяСтрока.ТочкаОтправленияШирота = ТекущаяСтрока.ТочкаОтправленияШирота;
					НоваяСтрока.ТочкаОтправленияДолгота = ТекущаяСтрока.ТочкаОтправленияДолгота;
					НоваяСтрока.ТочкаДоставкиПредставление = ТекущаяСтрока.ТочкаДоставкиПредставление;
					НоваяСтрока.ТочкаДоставкиШирота = ТекущаяСтрока.ТочкаДоставкиШирота;
					НоваяСтрока.ТочкаДоставкиДолгота = ТекущаяСтрока.ТочкаДоставкиДолгота;
					НоваяСтрока.НегабаритныйВес = ТекущаяСтрока.НегабаритныйВес;
					НоваяСтрока.НегабаритныйОбъем = ТекущаяСтрока.НегабаритныйОбъем;
					НоваяСтрока.НегабаритнаяДлина = ТекущаяСтрока.НегабаритнаяДлина;
					Если ТипЗнч(ТекущаяСтрока.ФормаОплаты) = Тип("Массив") Тогда
						НоваяСтрока.ФормаОплаты.ЗагрузитьЗначения(ТекущаяСтрока.ФормаОплаты);
					КонецЕсли;
					НоваяСтрока.ТолькоВремяДоставки = ТекущаяСтрока.ТолькоВремяДоставки;
					НоваяСтрока.Срок = "" + НоваяСтрока.МинимальныйСрок + " - " + НоваяСтрока.МаксимальныйСрок + "";
			
					Для Каждого ТекущаяУслуга Из ТекущаяСтрока.ДетализацияСтоимости Цикл
				
						НоваяУслуга = НоваяСтрока.ДетализацияСтоимостиПоУслугам.Добавить();
						НоваяУслуга.Идентификатор = ТекущаяУслуга.Идентификатор;
						НоваяУслуга.Наименование = ТекущаяУслуга.Наименование;
						НоваяУслуга.Стоимость = ТекущаяУслуга.Стоимость;
						НоваяУслуга.ВариантУчета = ТекущаяУслуга.ВариантУчета;
						НоваяУслуга.Описание = ТекущаяУслуга.Описание;
						
					КонецЦикла;
					
					Для Каждого ТекущаяДопУслуга Из ТекущаяСтрока.ДополнительныеУслуги Цикл
				
						НоваяДопУслуга = НоваяСтрока.ДополнительныеУслуги.Добавить();
						НоваяДопУслуга.Идентификатор = ТекущаяДопУслуга.Идентификатор;
						НоваяДопУслуга.Наименование = ТекущаяДопУслуга.Наименование;
						НоваяДопУслуга.Обязательная = ТекущаяДопУслуга.Обязательная;
						НоваяДопУслуга.Категория = ТекущаяДопУслуга.Категория;
						НоваяДопУслуга.Использовать = ТекущаяДопУслуга.Использовать;
						
						Для Каждого ТекущееСвойство Из ТекущаяДопУслуга.Свойства Цикл
							
							НовоеСвойство = НоваяДопУслуга.Свойства.Добавить();
							НовоеСвойство.Идентификатор = ТекущееСвойство.Идентификатор;
							НовоеСвойство.Наименование = ТекущееСвойство.Наименование;
							НовоеСвойство.ЕдиницаИзмерения = ТекущееСвойство.ЕдиницаИзмерения;
							НовоеСвойство.ТипЗначения = ТекущееСвойство.ТипЗначения;
							Если ТекущееСвойство.Свойство("Использовать")
								И ТекущееСвойство.Использовать Тогда
								НовоеСвойство.Использовать = ТекущееСвойство.Использовать;
								НовоеСвойство.Значение = ТекущееСвойство.Значение;
							КонецЕсли;
						КонецЦикла;
						
					КонецЦикла;
					
					НоваяСтрока.КартинкаТариф = 0;
					
					ЕстьУслугиНеВключенныеВТариф = (НоваяСтрока.ДетализацияСтоимостиПоУслугам.НайтиСтроки(
						Новый Структура("ВариантУчета", 3)).Количество());
					ЕстьУслугиНеВключенныеВРасчет = (НоваяСтрока.ДетализацияСтоимостиПоУслугам.НайтиСтроки(
						Новый Структура("ВариантУчета", 2)).Количество());
					
					Если ЕстьУслугиНеВключенныеВРасчет Тогда
						НоваяСтрока.КартинкаТариф = ?(ЕстьУслугиНеВключенныеВТариф, 3, 1);
					ИначеЕсли ЕстьУслугиНеВключенныеВТариф Тогда
						НоваяСтрока.КартинкаТариф = ?(ЕстьУслугиНеВключенныеВРасчет, 3, 2);
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			Если Результат.Свойство("Ошибки") Тогда
			
				Если ТипЗнч(Результат.Ошибки) = Тип("Массив") Тогда
					
					Для Каждого ТекущаяОшибка Из Результат.Ошибки Цикл
						
						ОбщегоНазначения.СообщитьПользователю(ТекущаяОшибка);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	КоличествоСтрок = Тарифы.Количество();
	Если КоличествоСтрок = 0 Тогда
		СостояниеВыполненияЗапроса = НСтр("ru = 'Подходящие тарифы не найдены. Проверьте условия запроса.
			|Возможно для работы с перевозчиками требуется авторизация. Проверьте настройки перевозчиков.'");
	Иначе
		СостояниеВыполненияЗапроса = СтрШаблон(НСтр("ru = 'Найдено подходящих тарифов: %1'"),КоличествоСтрок);
		ТарифыУстановитьРежимСортировки(ТарифыРежимСортировки);
	КонецЕсли;
	Элементы.ДекорацияСостояниеВыполненияЗапросаТарифы.Заголовок = СостояниеВыполненияЗапроса;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатСозданияЗаказа(АдресРезультата, ОперацияВыполнена)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
			Если Результат.Свойство("Идентификатор") Тогда
				Результат.Свойство("Идентификатор", ИдентификаторЗаказа);
				Результат.Свойство("НомерЗаказа", НомерЗаказа);
				Результат.Свойство("ДатаЗаказа", ДатаЗаказа);
			Иначе
				ОперацияВыполнена = Ложь;
			КонецЕсли;
			
			Если ОперацияВыполнена 
				И РежимМастера = 0 Тогда
				РежимМастера = 1;
				СформироватьЗаголовокФормы();
				СформироватьПредставлениеДокументаОснования();
			КонецЕсли;
			
			Если Результат.Свойство("Ошибки") Тогда
			
				Если ТипЗнч(Результат.Ошибки) = Тип("Массив") Тогда
					
					Для Каждого ТекущаяОшибка Из Результат.Ошибки Цикл
						
						ОбщегоНазначения.СообщитьПользователю(ТекущаяОшибка);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			ОперацияВыполнена = Ложь;
		КонецЕсли;
		
	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
	Если ОперацияВыполнена Тогда
		СервисДоставкиПереопределяемый.ОбработатьРезультатСозданияЗаказаНаДоставку(Результат, ДокументОснование);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатОформленияЗаказа(АдресРезультата, РезультатОформленияЗаказаНаДоставку)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
			Если Результат.Свойство("ДатаСозданияЗаказа") Тогда
				ЗаполнитьЗначенияСвойств(ЭтаФорма, Результат);
			Иначе
				РезультатОформленияЗаказаНаДоставку = 0;
			КонецЕсли;
			
			Если Результат.Свойство("ОжидатьРасчета")
				И Результат.ОжидатьРасчета = Истина Тогда
				РезультатОформленияЗаказаНаДоставку = 2;
			КонецЕсли;
			
			Если Результат.Свойство("Ошибки") Тогда
			
				Если ТипЗнч(Результат.Ошибки) = Тип("Массив") Тогда
					
					Для Каждого ТекущаяОшибка Из Результат.Ошибки Цикл
						
						ОбщегоНазначения.СообщитьПользователю(ТекущаяОшибка);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			РезультатОформленияЗаказаНаДоставку = 0;
		КонецЕсли;
		
	Иначе
		РезультатОформленияЗаказаНаДоставку = 0;
	КонецЕсли;
	
	Если РезультатОформленияЗаказаНаДоставку = 1 Тогда
		СервисДоставкиПереопределяемый.ОбработатьРезультатОформленияЗаказаНаДоставку(Результат, ДокументОснование);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатОтменыЗаказа(АдресРезультата, РезультатВыполнения, СуммаОтмены)
	
	РезультатВыполнения = 0;
	ОперацияВыполнена = Истина;
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		Если ЗначениеЗаполнено(Результат) 
			И ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Если Результат.Свойство("Идентификатор") Тогда
				
				Если Результат.Свойство("ДокументОтменен")
					И Результат.ДокументОтменен = Истина Тогда
					РезультатВыполнения = 1;
				ИначеЕсли Результат.Свойство("ДоступнаПлатнаяОтмена")
					И Результат.ДоступнаПлатнаяОтмена = Истина Тогда
					РезультатВыполнения = 2;
					СуммаОтмены = Результат.СуммаПлатнойОтмены;
				ИначеЕсли Результат.Свойство("ДоступнаОтмена")
					И Не Результат.ДоступнаОтмена Тогда
					РезультатВыполнения = 3;
				КонецЕсли;
			Иначе
				СервисДоставки.ОбработатьБлокОшибок(Результат, ОперацияВыполнена);
			КонецЕсли;
			
		Иначе
			ОперацияВыполнена = Ложь;
		КонецЕсли;
	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
	Если ОперацияВыполнена Тогда
		СервисДоставкиПереопределяемый.ОбработатьРезультатОтменыЗаказаНаДоставку(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатОбновленияЗаказа(АдресРезультата, РезультатВыполнения)
	
	ОперацияВыполнена = Истина;
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
			Если Результат.Свойство("ДатаОбновления") Тогда
				ЗаполнитьЗначенияСвойств(ЭтаФорма, Результат);
			Иначе
				ОперацияВыполнена = Ложь;
			КонецЕсли;
			
			Если Результат.Свойство("ЗаказОбновлен") Тогда
				РезультатВыполнения = Результат.ЗаказОбновлен;
			КонецЕсли;
			
			Если Результат.Свойство("Ошибки") Тогда
			
				Если ТипЗнч(Результат.Ошибки) = Тип("Массив") Тогда
					
					Для Каждого ТекущаяОшибка Из Результат.Ошибки Цикл
						
						ОбщегоНазначения.СообщитьПользователю(ТекущаяОшибка);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			ОперацияВыполнена = Ложь;
		КонецЕсли;
		
	Иначе
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
	Если ОперацияВыполнена Тогда
		СервисДоставкиПереопределяемый.ОбработатьРезультатОбновленияЗаказаНаДоставку(Результат);
		Если Не Результат.ЗаказОбновлен Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Текущая версия заказа, является актуальной.'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатПолученияЗаказаНаДоставку(АдресРезультата, ДанныеОбновлены = Истина)
	
	Если РежимМастера = 2 Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаКарточка;
	КонецЕсли;

	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Если Результат.Свойство("Данные") Тогда
				
				ДанныеЗаказа = Результат.Данные;
				РежимМастера = ?(ДанныеЗаказа.СостояниеИдентификатор = 0, 1, 2);
				ОбработатьПараметры(ДанныеЗаказа);
				УслугиТарифа.Очистить();
				Если ДанныеЗаказа.Свойство("Услуги") 
					И ДанныеЗаказа.Услуги.Количество() Тогда
					
					Для Каждого ТекущаяУслуга Из ДанныеЗаказа.Услуги Цикл
						
						НоваяУслуга = УслугиТарифа.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяУслуга, ТекущаяУслуга);
						НоваяУслуга.Использовать = Истина;
						НайденныеСтроки = УслугиТарифов.НайтиСтроки(Новый Структура("Идентификатор", НоваяУслуга.Идентификатор));
						
						ТекущаяУслугаТарифов = Неопределено;
						Если НайденныеСтроки.Количество() Тогда
							ТекущаяУслугаТарифов = НайденныеСтроки[0];
							ЗаполнитьЗначенияСвойств(ТекущаяУслугаТарифов, НоваяУслуга,,"Свойства");
							ТекущаяУслугаТарифов.Свойства.Очистить();
						КонецЕсли;
						
						Для Каждого ТекущееСвойство Из ТекущаяУслуга.СвойстваУслуги Цикл
							НовоеСвойство = НоваяУслуга.Свойства.Добавить();
							ЗаполнитьЗначенияСвойств(НовоеСвойство, ТекущееСвойство);
							Если ТекущаяУслугаТарифов <> Неопределено Тогда
								НовоеСвойствоУслугиТарифов = ТекущаяУслугаТарифов.Свойства.Добавить();
								ЗаполнитьЗначенияСвойств(НовоеСвойствоУслугиТарифов, ТекущееСвойство);
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
				
				Если РежимМастера < 2 И ДанныеЗаказа.Свойство("ДополнительныеУслуги")
					И ДанныеЗаказа.ДополнительныеУслуги.Количество() Тогда
					
					Для Каждого ТекущаяУслуга Из ДанныеЗаказа.ДополнительныеУслуги Цикл
						
						НоваяУслуга = ДополнительныеУслугиТарифа.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяУслуга, ТекущаяУслуга);
						НайденныеСтроки = УслугиТарифов.НайтиСтроки(Новый Структура("Идентификатор", НоваяУслуга.Идентификатор));
						
						ТекущаяУслугаТарифов = Неопределено;
						Если НайденныеСтроки.Количество() Тогда
							ТекущаяУслугаТарифов = НайденныеСтроки[0];
							ЗаполнитьЗначенияСвойств(ТекущаяУслугаТарифов, НоваяУслуга,,"Свойства");
							ТекущаяУслугаТарифов.Свойства.Очистить();
						КонецЕсли;
						
						Для Каждого ТекущееСвойство Из ТекущаяУслуга.СвойстваУслуги Цикл
							НовоеСвойство = НоваяУслуга.Свойства.Добавить();
							ЗаполнитьЗначенияСвойств(НовоеСвойство, ТекущееСвойство);
							Если ТекущаяУслугаТарифов <> Неопределено Тогда
								НовоеСвойствоУслугиТарифов = ТекущаяУслугаТарифов.Свойства.Добавить();
								ЗаполнитьЗначенияСвойств(НовоеСвойствоУслугиТарифов, ТекущееСвойство);
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
					
					СформироватьДопУслугиПоТарифу(ДополнительныеУслугиТарифа);
					ОбновитьИнформациюПоВыбраннымДопУслугам();
					Элементы.ГруппаПредупрежденияПоДопУслугам.Видимость = ПроверитьЗаполнениеЗначенийДополнительныхУслуг();
					
				КонецЕсли;
				
				Если ДанныеЗаказа.Свойство("Товары") Тогда
					ТоварныйСостав.Загрузить(ДанныеЗаказа.Товары);
				КонецЕсли;
				
				СписокДокументов.Очистить();
				Если ДанныеЗаказа.Свойство("Документы") 
					И ДанныеЗаказа.Документы.Количество() Тогда
					
					Для Каждого ТекущийДокумент Из ДанныеЗаказа.Документы Цикл
						
						НовыйДокумент = СписокДокументов.Добавить();
						ЗаполнитьЗначенияСвойств(НовыйДокумент, ТекущийДокумент);
					КонецЦикла;
				КонецЕсли;
				
				ДополнительныеДанные.Очистить();
				Если ДанныеЗаказа.Свойство("ДополнительныеДанныеЗаказа")
					И ЗначениеЗаполнено(ДанныеЗаказа.ДополнительныеДанныеЗаказа)
					И ДанныеЗаказа.ДополнительныеДанныеЗаказа.Количество() Тогда
					
					Для Каждого ТекущиеДанные Из ДанныеЗаказа.ДополнительныеДанныеЗаказа Цикл
						НоваяСтрока = ДополнительныеДанные.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные,,"Список");
						Для Каждого ТекущийЭлементСписка Из ТекущиеДанные.Список Цикл
							НовыйЭлемент = НоваяСтрока.Список.Добавить();
							ЗаполнитьЗначенияСвойств(НовыйЭлемент, ТекущийЭлементСписка);
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
					
				ПереключательРасшифровки = ?(ГрузКоличествоГрузовыхМест = 1, 0, 1);
				СформироватьПредставлениеДокументаОснования();
				УстановитьВидимостьДоступность();
				СформироватьЗаголовокФормы();
				
				ВремяОтгрузкиПредставление = ПредставлениеДатыВремени(ДатаОтгрузки, 
												ВремяОтгрузкиС, 
												ВремяОтгрузкиПо, 
												ВремяОтгрузкиОбедС, 
												ВремяОтгрузкиОбедПо, 1);
				
				ВремяДоставкиПредставление = ПредставлениеДатыВремени(ДатаДоставки, 
												ВремяДоставкиС, 
												ВремяДоставкиПо, 
												ВремяДоставкиОбедС, 
												ВремяДоставкиОбедПо, 2);
												
				Если ЗначениеЗаполнено(ТарифИдентификатор) Тогда
					СформироватьОтборыТарифов(Истина);
					ЗаполнитьИнформациюПоТекущемуТарифу();
				КонецЕсли;
				
				Если РежимМастера = 2 Тогда
					СформироватьИтоговуюИнформацию();
				КонецЕсли;
			КонецЕсли;
			
			Если Результат.Свойство("Ошибки") Тогда
			
				Если ТипЗнч(Результат.Ошибки) = Тип("Массив") Тогда
					
					Для Каждого ТекущаяОшибка Из Результат.Ошибки Цикл
						
						ОбщегоНазначения.СообщитьПользователю(ТекущаяОшибка);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ДанныеОбновлены = Ложь;
			
		КонецЕсли;
	Иначе
		
		ДанныеОбновлены = Ложь;
	КонецЕсли;
	
	Если ДанныеОбновлены Тогда
		СервисДоставкиПереопределяемый.ОбработатьРезультатПолученияЗаказаНаДоставку(Результат, ДокументОснование);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнитьЗапросВФоне

&НаСервере
Функция ВыполнитьЗапросВФоне(ИнтернетПоддержкаПодключена, ПараметрыОперации)
	
	// Проверка подключения Интернет-поддержки пользователей.
	ИнтернетПоддержкаПодключена 
		= ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	Если Не ИнтернетПоддержкаПодключена Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Отказ = Ложь;
	ПараметрыЗапроса = ПараметрыЗапроса(ПараметрыОперации, Отказ);
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяФоновогоЗадания = "ФоновоеЗадание" + ПараметрыОперации.ИмяПроцедуры;
	ФоновоеЗадание = ЭтотОбъект[ИмяФоновогоЗадания];
	Если ФоновоеЗадание <> Неопределено Тогда
		ОтменитьВыполнениеЗадания(ФоновоеЗадание.ИдентификаторЗадания);
	КонецЕсли;
	
	Задание = Новый Структура("ИмяПроцедуры, Наименование, ПараметрыПроцедуры");
	Задание.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '1С:Доставка. %1.'"),
		ПараметрыОперации.НаименованиеОперации);
	Задание.ИмяПроцедуры = "СервисДоставки." + ПараметрыОперации.ИмяПроцедуры;
	Задание.ПараметрыПроцедуры = ПараметрыЗапроса;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Задание.Наименование;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(Задание.ИмяПроцедуры,
		Задание.ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьУслугиТарифовВФоне()
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьУслугиТарифов();
	ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение услуг тарифов'");
	
	Возврат ВыполнитьЗапросВФоне(Ложь, ПараметрыОперации);
	
КонецФункции

&НаСервере
Функция ПолучитьЗаказНаДоставкуВФоне()
	
	ПараметрыОперации = Новый Структура("ИмяПроцедуры, НаименованиеОперации, ВыводитьОкноОжидания");
	ПараметрыОперации.ИмяПроцедуры = СервисДоставкиКлиентСервер.ИмяПроцедурыПолучитьЗаказНаДоставку();
	ПараметрыОперации.НаименованиеОперации = НСтр("ru = 'Получение данных по заказу на доставку'");
	ПараметрыОперации.ВыводитьОкноОжидания = Истина;
	
	Возврат ВыполнитьЗапросВФоне(Ложь, ПараметрыОперации);
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура СформироватьОтборыТарифов(ЗаполнитьИспользоватьПоТарифам = Ложь)
	
	ОтборыТарифовКатегории = ОтборыТарифов.ПолучитьЭлементы();
	
	ТекущиеДанные = Новый ТаблицаЗначений();
	ТекущиеДанные.Колонки.Добавить("Идентификатор");
	ТекущиеДанные.Колонки.Добавить("Свойства");
	
	Если Не ЗаполнитьИспользоватьПоТарифам Тогда
		Для Каждого ТекущаяКатегория Из ОтборыТарифовКатегории Цикл
			
			ОтборыТарифовЭлементы = ТекущаяКатегория.ПолучитьЭлементы();
			Для Каждого ТекущаяУслуга Из ОтборыТарифовЭлементы Цикл
				
				Если ТекущаяУслуга.Использовать Тогда
					
					НоваяСтрока = ТекущиеДанные.Добавить();
					НоваяСтрока.Идентификатор = ТекущаяУслуга.Идентификатор;
					НоваяСтрока.Свойства = Новый Массив();
					
					ОтборыТарифовСвойства = ТекущаяУслуга.ПолучитьЭлементы();
					
					Для Каждого ТекущееСвойство Из ОтборыТарифовСвойства Цикл
						
						СтрокаСвойство = Новый Структура();
						СтрокаСвойство.Вставить("Наименование", ТекущееСвойство.Наименование);
						СтрокаСвойство.Вставить("Использовать", Ложь);
						СтрокаСвойство.Вставить("Идентификатор", ТекущееСвойство.Идентификатор);
						СтрокаСвойство.Вставить("Значение", ТекущееСвойство.Значение);
						СтрокаСвойство.Вставить("ТребуетсяЗначение", Истина);
						СтрокаСвойство.Вставить("ЕдиницаИзмерения", ТекущееСвойство.ЕдиницаИзмерения);
						СтрокаСвойство.Вставить("ИдентификаторУслугТарифов", ТекущееСвойство.ИдентификаторУслугТарифов);
						
						НоваяСтрока.Свойства.Добавить(СтрокаСвойство);
						
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	Если Элементы.СпособДоставки.СписокВыбора.НайтиПоЗначению(СпособДоставки) = Неопределено 
		И Элементы.СпособДоставки.СписокВыбора.Количество() > 0 Тогда
		СпособДоставки = Элементы.СпособДоставки.СписокВыбора[0].Значение;
	КонецЕсли;
	
	Если Элементы.СпособОтгрузки.СписокВыбора.НайтиПоЗначению(СпособОтгрузки) = Неопределено 
		И Элементы.СпособОтгрузки.СписокВыбора.Количество() > 0 Тогда
		СпособОтгрузки = Элементы.СпособОтгрузки.СписокВыбора[0].Значение;
	КонецЕсли;
	
	ОтборыТарифовКатегории.Очистить();
	
	ТекущаяКатегория = "";
	
	Для Каждого ТекущаяУслуга Из УслугиТарифов Цикл
		
		
		Если СпособОтгрузки = 1 
			И НесовместимыеУслуги.НайтиСтроки(Новый Структура("Идентификатор,ИдентификаторНесовместимойУслуги", "000000002",
				ТекущаяУслуга.Идентификатор)).Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		Если СпособДоставки = 1 
			И НесовместимыеУслуги.НайтиСтроки(Новый Структура("Идентификатор,ИдентификаторНесовместимойУслуги", "000000004",
				ТекущаяУслуга.Идентификатор)).Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяУслуга.Обязательная Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяКатегория <> ТекущаяУслуга.Категория Тогда
			ТекущаяКатегория = ТекущаяУслуга.Категория;
			
			СтрокаДерева = ОтборыТарифовКатегории.Добавить();
			СтрокаДерева.Наименование = ТекущаяУслуга.Категория;
			СтрокаДерева.Использовать = Истина;
			СтрокаДерева.Идентификатор = "";
			СтрокаДерева.Значение = Неопределено;
			СтрокаДерева.ТребуетсяЗначение = Ложь;
			СтрокаДерева.Обязательный = Ложь;
			СтрокаДерева.ТипСтроки = 0;
			
		КонецЕсли;
		
		СтрокаДереваВетка = СтрокаДерева.ПолучитьЭлементы().Добавить();
		СтрокаДереваВетка.Наименование = ТекущаяУслуга.Наименование;
		СтрокаДереваВетка.Использовать = ?(ЗаполнитьИспользоватьПоТарифам, ТекущаяУслуга.Использовать, Ложь);
		СтрокаДереваВетка.Идентификатор = ТекущаяУслуга.Идентификатор;
		СтрокаДереваВетка.ТипСтроки = 1;
		СтрокаДереваВетка.ИдентификаторУслугТарифов = ТекущаяУслуга.ПолучитьИдентификатор();
		
		НайденныеСтроки = ТекущиеДанные.НайтиСтроки(Новый Структура("Идентификатор", ТекущаяУслуга.Идентификатор));
		
		Свойства = Неопределено;
		Если НайденныеСтроки.Количество() Тогда
			СтрокаДереваВетка.Использовать = Истина;
			Свойства = НайденныеСтроки[0].Свойства;
		КонецЕсли;
		
		СвойстваУслуги = ТекущаяУслуга.Свойства;
		
		Если СвойстваУслуги.Количество() Тогда
			
			СтрокиСвойств = СтрокаДереваВетка.ПолучитьЭлементы();
			СтрокиСвойств.Очистить();
			
			ЗаполнитьИдентификаторУслугТарифов = (Свойства = Неопределено);
			Свойства = ?(ЗаполнитьИдентификаторУслугТарифов, СвойстваУслуги, Свойства);
			
			Для Каждого ТекущееСвойство Из Свойства Цикл
				
				СтрокаДереваСвойство = СтрокиСвойств.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДереваСвойство, ТекущееСвойство);
				СтрокаДереваСвойство.ТребуетсяЗначение = Истина;
				СтрокаДереваСвойство.ТипСтроки = 2;
				
				Если ЗаполнитьИдентификаторУслугТарифов Тогда
					СтрокаДереваСвойство.ИдентификаторУслугТарифов = ТекущееСвойство.ПолучитьИдентификатор();
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьРодителейСпискаСВыбраннымиСтроками()
	
	ЭлементыДереваСписка = ОтборыТарифов.ПолучитьЭлементы();
	Для Каждого ЭлементДереваСписка Из ЭлементыДереваСписка Цикл
		Элементы.ОтборыТарифов.Развернуть(ЭлементДереваСписка.ПолучитьИдентификатор());
		ЭлементыУслуги = ЭлементДереваСписка.ПолучитьЭлементы();
		Для Каждого ЭлементДереваСпискаУслуги Из ЭлементыУслуги Цикл
			
			Если ЭлементДереваСпискаУслуги.Использовать Тогда
				Элементы.ОтборыТарифов.Развернуть(ЭлементДереваСпискаУслуги.ПолучитьИдентификатор());
			КонецЕсли;
				
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеВариантовДоставки()
	
	Элементы.ГруппаОтгрузкаАдрес.Видимость = (СпособОтгрузки = 2);
	Элементы.ГруппаОтгрузкаТерминал.Видимость = (СпособОтгрузки = 1);
	Элементы.ПараметрыТарифаВремяОтгрузки.АвтоОтметкаНезаполненного = (СпособОтгрузки = 2);
	
	Элементы.ГруппаДоставкаАдрес.Видимость = (СпособДоставки = 2);
	Элементы.ГруппаДоставкаТерминал.Видимость = (СпособДоставки = 1);
	Элементы.ПараметрыТарифаВремяДоставки.АвтоОтметкаНезаполненного = (СпособДоставки = 2);
	
КонецПроцедуры

&НаСервере
Процедура ТарифыУстановитьРежимСортировки(ВыбранныйВариантСортировки)
	
	Если Не ЗначениеЗаполнено(ВыбранныйВариантСортировки) Тогда
		ВыбранныйВариантСортировки = "СортироватьТарифыПоЦене";
	КонецЕсли;
	
	Если Не ВариантыСортировки().Свойство(ВыбранныйВариантСортировки) Тогда
		ВыбранныйВариантСортировки = "СортироватьТарифыПоЦене";
	КонецЕсли;
	
	Элементы.ГруппаПодменюТарифыСортировать.Заголовок = Команды[ВыбранныйВариантСортировки].Заголовок;
	
	Для Каждого ТекущийВариант Из ВариантыСортировки() Цикл
		Элементы[ТекущийВариант.Ключ].Пометка = ТекущийВариант.Ключ = ВыбранныйВариантСортировки;
	КонецЦикла;
	
	ТарифыРежимСортировки = ВыбранныйВариантСортировки;
	
	Если Тарифы.Количество() Тогда
		СортироватьТарифы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВариантыСортировки()
	
	Результат = Новый Структура;
	Результат.Вставить("СортироватьТарифыПоЦене", 					"КартинкаТариф Возр, Стоимость Возр");
	Результат.Вставить("СортироватьТарифыПоСроку", 					"МинимальныйСрок Возр");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СортироватьТарифы()
	
	Тарифы.Сортировать(ВариантыСортировки()[ТарифыРежимСортировки]);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборТарифа(ДанныеПоТарифу=Неопределено)
	
	Если ДанныеПоТарифу <> Неопределено Тогда
		
		ГрузоперевозчикИдентификатор = ДанныеПоТарифу.ГрузоперевозчикИдентификатор;
		ГрузоперевозчикНаименование = ДанныеПоТарифу.ГрузоперевозчикНаименование;
		ТарифИдентификатор = ДанныеПоТарифу.ТарифИдентификатор;
		ТарифНаименование = ДанныеПоТарифу.ТарифНаименование;
		ТарифОписание = ДанныеПоТарифу.Описание;
		ТарифНегабарит = ДанныеПоТарифу.ТарифНегабарит;
		ТарифТолькоВремяДоставки = ДанныеПоТарифу.ТолькоВремяДоставки;
		ОтправительАдресШирота = ДанныеПоТарифу.ТочкаОтправленияШирота;
		ОтправительАдресДолгота = ДанныеПоТарифу.ТочкаОтправленияДолгота;
		ПолучательАдресШирота = ДанныеПоТарифу.ТочкаДоставкиШирота;
		ПолучательАдресДолгота = ДанныеПоТарифу.ТочкаДоставкиДолгота;
		
		Если ТарифНегабарит Тогда
			ГрузКоличествоНегабаритныхГрузовыхМест = 1;
			Если ГрузКоличествоГрузовыхМест = 1 Тогда
				ГрузНегабаритныйВес = ГрузВес;
				ГрузНегабаритныйОбъем = ГрузОбъем;
			КонецЕсли;
		КонецЕсли;
		
		ТарифФормаОплаты = ДанныеПоТарифу.ФормаОплаты;
		
		Если НЕ ТарифФормаОплаты.Количество() = 0
			И ТарифФормаОплаты.НайтиПоЗначению(ФормаОплаты) = Неопределено Тогда
			ФормаОплаты = ТарифФормаОплаты[0].Значение;
		КонецЕсли;
		
	КонецЕсли;
		
	Для Каждого ТекущаяСтрокаУслугиТарифа Из УслугиТарифов Цикл
		НоваяСтрока = УслугиТарифа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрокаУслугиТарифа,,"Свойства");
		
		СтрокиСвойств = ТекущаяСтрокаУслугиТарифа.Свойства;
		
		Для Каждого ТекущееСвойство Из СтрокиСвойств Цикл
			НовоеСвойство = НоваяСтрока.Свойства.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеСвойство, ТекущееСвойство);
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаполнитьИнформациюПоТекущемуТарифу();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюПоТекущемуТарифу()
	
	ТабличныйДокумент = Новый ТабличныйДокумент();
	
	Если Не ЗначениеЗаполнено(ТарифИдентификатор) Тогда
		ИнформацияПоТекущемуТарифу = ТабличныйДокумент;
		Возврат;
	КонецЕсли;
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Макет = Обработка.ПолучитьМакет("ВыбранныеУслугиТарифа");
	
	ОбластьТабличнаяЧастьУслуги = ТабличнаяЧастьУслуги(Макет, УслугиТарифа);
	
	Если ОбластьТабличнаяЧастьУслуги.ВысотаТаблицы < 4 Тогда
		ИнформацияПоТекущемуТарифу = ТабличныйДокумент;
		Возврат;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьТабличнаяЧастьУслуги);
	
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
	
	Если ЗначениеЗаполнено(ТарифОписание) Тогда
		ОбластьОписаниеТарифа = Макет.ПолучитьОбласть("ОписаниеТарифа");
		ОбластьОписаниеТарифа.Параметры.ОписаниеТарифа = ТарифОписание;
		ТабличныйДокумент.Вывести(ОбластьОписаниеТарифа);
	КонецЕсли;
	
	ИнформацияПоТекущемуТарифу = ТабличныйДокумент;
	
КонецПроцедуры

&НаСервере
Функция ТабличнаяЧастьУслуги(Макет, Услуги)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ОбластьМакетаШапкаТалицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабличныйДокумент.Вывести(ОбластьМакетаШапкаТалицы);
	
	ОбластьМакетаКатегория         = Макет.ПолучитьОбласть("СтрокаТаблицыКатегория");
	ОбластьМакетаУслуга = Макет.ПолучитьОбласть("СтрокаТаблицыУслуга");
	ОбластьМакетаСвойство = Макет.ПолучитьОбласть("СтрокаТаблицыСвойство");
	
	ТекущаяКатегория = "";
	Для Каждого ТекущаяУслугаТарифа Из Услуги Цикл
		
		Если (Не ТекущаяУслугаТарифа.Использовать)
			ИЛИ ТекущаяУслугаТарифа.Обязательная Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяКатегория <> ТекущаяУслугаТарифа.Категория Тогда
			ТекущаяКатегория = ТекущаяУслугаТарифа.Категория;
			ОбластьСтрокаТаблицы = ОбластьМакетаКатегория;
			ОбластьСтрокаТаблицы.Параметры.Наименование = ТекущаяУслугаТарифа.Категория;
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
		КонецЕсли;
		
		ОбластьСтрокаТаблицы = ОбластьМакетаУслуга;
		ОбластьСтрокаТаблицы.Параметры.Наименование = ТекущаяУслугаТарифа.Наименование;
		ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
		
		Для Каждого ТекущееСвойство Из ТекущаяУслугаТарифа.Свойства Цикл
			ОбластьСтрокаТаблицы = ОбластьМакетаСвойство;
			ЗаполнитьЗначенияСвойств(ОбластьСтрокаТаблицы.Параметры, ТекущееСвойство);
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаКлиенте
Процедура СброситьТерминал(ПрефиксТерминала)
	
	ИмяРеквизита = ПрефиксТерминала+"Груза";
	
	ЭтотОбъект[ИмяРеквизита + "Идентификатор"] = Неопределено;
	ЭтотОбъект[ИмяРеквизита + "Наименование"] = Неопределено;
	ЭтотОбъект[ИмяРеквизита + "Описание"] = Неопределено;
	ЭтотОбъект[ИмяРеквизита + "Адрес"] = Неопределено;
	ЭтотОбъект[ИмяРеквизита + "Телефон"] = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПрименениеОтборов()
	
	СформироватьПараметрыОтбора();
	
	ОбновитьЗначенияВУслугахТарифов();
	
	СброситьТариф();
	
	ПолучитьТарифы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначенияВУслугахТарифов()
	
	СтрокиОтборовВерхнийУровень = ОтборыТарифов.ПолучитьЭлементы();
	
	ИдентификаторУслугиСпособаОтгрузки = ?(СпособОтгрузки = 1, "000000002", "000000001");
	ИдентификаторУслугиСпособаДоставки = ?(СпособДоставки = 1, "000000004", "000000003");
	
	Для Каждого ТекущаяСтрока Из УслугиТарифов Цикл
		ТекущаяСтрока.Использовать = Ложь;
		
		Если ТекущаяСтрока.Идентификатор = ИдентификаторУслугиСпособаОтгрузки Тогда
			ТекущаяСтрока.Использовать = Истина;
		КонецЕсли;
		
		Если ТекущаяСтрока.Идентификатор = ИдентификаторУслугиСпособаДоставки Тогда
			ТекущаяСтрока.Использовать = Истина;
		КонецЕсли;
		
		Если ТекущаяСтрока.Свойства.Количество() Тогда
			Для Каждого ТекущееСвойство Из ТекущаяСтрока.Свойства Цикл
				ТекущееСвойство.Значение = ?(ТекущееСвойство.ТипЗначения = "Число", 0,
					?(ТекущееСвойство.ТипЗначения = "Булево", Ложь, ""));
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаОтбораВерхнийУровень Из СтрокиОтборовВерхнийУровень Цикл
		
		СтрокиОтборы = СтрокаОтбораВерхнийУровень.ПолучитьЭлементы();
		
		Если СтрокиОтборы.Количество() Тогда
			Для Каждого СтрокаОтборы Из СтрокиОтборы Цикл
				Если СтрокаОтборы.Использовать Тогда
					НайденнаяУслуга = УслугиТарифов.НайтиПоИдентификатору(СтрокаОтборы.ИдентификаторУслугТарифов);
					Если НайденнаяУслуга <> Неопределено Тогда
						НайденнаяУслуга.Использовать = Истина;
						НайденнаяУслуга.Свойства.Очистить();
						Свойства = СтрокаОтборы.ПолучитьЭлементы();
						Для Каждого ТекущееСвойство Из Свойства Цикл
							
							НовоеСвойство = НайденнаяУслуга.Свойства.Добавить();
							ЗаполнитьЗначенияСвойств(НовоеСвойство, ТекущееСвойство);
							
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ТабличныйДокументИнформацияПоТарифу(ИдентификаторСтроки)
	
	ТабличныйДокумент = Новый ТабличныйДокумент();
	
	Если ИдентификаторСтроки = Неопределено Тогда
		Возврат ТабличныйДокумент;
	КонецЕсли;
	
	ДанныеПоТарифу = Тарифы.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Макет = Обработка.ПолучитьМакет("ДетализацияСтоимости");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	
	ОбластьШапка.Параметры.ГрузоперевозчикНаименование = ДанныеПоТарифу.ГрузоперевозчикНаименование;
	ОбластьШапка.Параметры.ТарифНаименование = ДанныеПоТарифу.ТарифНаименование;
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ОбластьПредупреждениеВерх = Макет.ПолучитьОбласть("ПредупреждениеВерх");
	
	ТабличныйДокумент.Вывести(ОбластьПредупреждениеВерх);
	
	ОбластьШапкаТалицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	
	ТабличныйДокумент.Вывести(ОбластьШапкаТалицы);
	
	Для Каждого ТекущаяСтрока Из ДанныеПоТарифу.ДетализацияСтоимостиПоУслугам Цикл
		
		Если ТекущаяСтрока.ВариантУчета = 0 Тогда
			ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыОбычная");
		ИначеЕсли ТекущаяСтрока.ВариантУчета = 2 Тогда
			ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыБезСтоимости");
		ИначеЕсли ТекущаяСтрока.ВариантУчета = 3 Тогда
			ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыОтсутствиеУслуги");
		КонецЕсли;
			
		ОбластьСтрокаТаблицы.Параметры.УслугаНаименование = ТекущаяСтрока.Наименование;
		ОбластьСтрокаТаблицы.Параметры.Стоимость = ТекущаяСтрока.Стоимость;
		ОбластьСтрокаТаблицы.Параметры.ВалютаНаименование = ВалютаНаименование;
			
		ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
		
	КонецЦикла;
	
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	
	ОбластьПодвалТаблицы.Параметры.Стоимость = ДанныеПоТарифу.Стоимость;
	ОбластьПодвалТаблицы.Параметры.ВалютаНаименование = ВалютаНаименование;
	
	ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
	
	Если ДанныеПоТарифу.КартинкаТариф = 1
		ИЛИ ДанныеПоТарифу.КартинкаТариф = 3 Тогда
	
		ОбластьПредупреждениеНизБезСтоимости = Макет.ПолучитьОбласть("ПредупреждениеНизБезСтоимости");
		
		ТабличныйДокумент.Вывести(ОбластьПредупреждениеНизБезСтоимости);
		
	КонецЕсли;
	
	Если ДанныеПоТарифу.КартинкаТариф = 2
		ИЛИ ДанныеПоТарифу.КартинкаТариф = 3 Тогда
		
		ОбластьПредупреждениеНизОтсутствиеУслуги = Макет.ПолучитьОбласть("ПредупреждениеНизОтсутствиеУслуги");
		
		ТабличныйДокумент.Вывести(ОбластьПредупреждениеНизОтсутствиеУслуги);
		
	КонецЕсли;
	
	Если ДанныеПоТарифу.Негабарит Тогда
		ОбластьПредупреждениеНеГабарит = Макет.ПолучитьОбласть("ПредупреждениеНеГабарит");
		ОбластьПредупреждениеНеГабарит.Параметры.ПредупреждениеНеГабарит = ДанныеПоТарифу.ОписаниеНеГабарит;
		ТабличныйДокумент.Вывести(ОбластьПредупреждениеНеГабарит);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПоТарифу.Описание) Тогда
		ОбластьОписаниеТарифа = Макет.ПолучитьОбласть("ОписаниеТарифа");
		ОбластьОписаниеТарифа.Параметры.ОписаниеТарифа = ДанныеПоТарифу.Описание;
		ТабличныйДокумент.Вывести(ОбластьОписаниеТарифа);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;

КонецФункции

&НаСервере
Функция ТабличныйДокументИтоговаяИнформация()
	
	ТабличныйДокумент = Новый ТабличныйДокумент();
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Макет = Обработка.ПолучитьМакет("Заказ");
	
	Если Заблокирован Тогда
		ОбластьМакетаЗаголовокБлокировки = Макет.ПолучитьОбласть("ЗаголовокБлокировки");
		ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокБлокировки);
	КонецЕсли;
	
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
	ПараметрыОбласти = ОбластьМакетаШапка.Параметры;
	
	ПараметрыОбласти.ОснованиеПредставление = ДокументОснование;
	ПараметрыОбласти.РасшифровкаОснование = ДокументОснование;
	ПараметрыОбласти.ГрузоперевозчикНаименование = ГрузоперевозчикНаименование;
	ПараметрыОбласти.РасшифровкаГрузоперевозчик = "Грузоперевозчик";
	ПараметрыОбласти.ТарифНаименование = ТарифНаименование;
	ПараметрыОбласти.РасшифровкаТариф = "Тариф";
	
	ФормаОплатыЭлемент = Элементы.ФормаОплаты.СписокВыбора.НайтиПоЗначению(ФормаОплаты);
	
	Если ФормаОплатыЭлемент <> Неопределено Тогда
		ПараметрыОбласти.ФормаОплатыНаименование 
			= ФормаОплатыЭлемент.Представление;
	КонецЕсли;
	
	ПараметрыОбласти.ОплатаПредставление = ?(Оплачен, НСтр("ru='Оплачено'"), НСтр("ru='Требует оплаты'"));
	ПараметрыОбласти.ПлательщикПредставление = ?(ПлательщикРоль = 1, НСтр("ru='Отправитель'"), НСтр("ru='Получатель'"));
	
	ПараметрыОбласти.ДатаИВремяОформления = Формат(ДатаСозданияЗаказа,"ДЛФ=DT");
	ПараметрыОбласти.Состояние = Состояние;
	ПараметрыОбласти.РасшифровкаСостояние = "Состояние";
	ПараметрыОбласти.ТрекНомер = ТрекНомер;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
	
	Если ИсполнительНаименование <> "" ИЛИ ИсполнительТелефон <> "" Тогда
		ОбластьМакетаИсполнитель = Макет.ПолучитьОбласть("Исполнитель");
		ПараметрыОбласти = ОбластьМакетаИсполнитель.Параметры;
		ПараметрыОбласти.ИсполнительПредставление = ИсполнительНаименование;
		ПараметрыОбласти.ИсполнительНомерТелефонаПредставление = ИсполнительТелефон;
		ТабличныйДокумент.Вывести(ОбластьМакетаИсполнитель);
	КонецЕсли;
	
	Если АвтомобильМарка <> "" ИЛИ АвтомобильНомер <> "" Тогда
		ОбластьМакетаАвтомобиль = Макет.ПолучитьОбласть("Автомобиль");
		ПараметрыОбласти = ОбластьМакетаАвтомобиль.Параметры;
		ПараметрыОбласти.АвтомобильПредставление = СокрЛП(СтрШаблон(НСтр("ru='%1 %2'"), АвтомобильМарка, АвтомобильНомер));
		ТабличныйДокумент.Вывести(ОбластьМакетаАвтомобиль);
	КонецЕсли;
	
	ОбластьМакетаКонтрагенты = Макет.ПолучитьОбласть("Контрагенты");
	ПараметрыОбласти = ОбластьМакетаКонтрагенты.Параметры;
	
	ПараметрыОбласти.ОтправительНаименование = ОтправительКонтрагентНаименование;
	ПараметрыОбласти.РасшифровкаОтправительКонтрагент = "ОтправительКонтрагент";
	ПараметрыОбласти.ОтправительКонтактноеЛицо = ОтправительКонтактноеЛицоНаименование;
	ПараметрыОбласти.ОтправительТелефон = ОтправительКонтактноеЛицоТелефонПредставление;
	
	ПараметрыОбласти.ПолучательНаименование = ПолучательКонтрагентНаименование;
	ПараметрыОбласти.РасшифровкаПолучательКонтрагент = "ПолучательКонтрагент";
	ПараметрыОбласти.ПолучательКонтактноеЛицо = ПолучательКонтактноеЛицоНаименование;
	ПараметрыОбласти.ПолучательТелефон = ПолучательКонтактноеЛицоТелефонПредставление;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаКонтрагенты);
	
	ОбластьМакетаАдреса = Макет.ПолучитьОбласть("Адреса");
	ПараметрыОбласти = ОбластьМакетаАдреса.Параметры;
	
	ПараметрыОбласти.СпособОтгрузки = Элементы.СпособОтгрузки.СписокВыбора.НайтиПоЗначению(СпособОтгрузки);
	
	Если СпособОтгрузки = 1 Тогда
		ОтправительТерминалОтправительАдрес = ПунктПриемаГрузаНаименование;
		ОтправительТипАдресаНаименование = ?(ПунктПриемаГрузаТипНаименование="", НСтр("ru='Адрес'"),
			ПунктПриемаГрузаТипНаименование);
		Если ЗначениеЗаполнено(ПунктПриемаГрузаАдрес) Тогда
			ОтправительТерминалОтправительАдрес = ОтправительТерминалОтправительАдрес
												  + "(" + ПунктПриемаГрузаАдрес + ")";
		КонецЕсли;
	Иначе
		ОтправительТерминалОтправительАдрес = ОтправительАдресПредставление;
		ОтправительТипАдресаНаименование = НСтр("ru='Адрес'");
	КонецЕсли;
	
	ПараметрыОбласти.РасшифровкаОтправительТерминалОтправительАдрес = "ОтправительТерминалОтправительАдрес";
	ПараметрыОбласти.ОтправительТипАдресаНаименование = ОтправительТипАдресаНаименование;
	
	Если СпособДоставки = 1 Тогда
		ПолучательТерминалПолучательАдрес = ПунктВыдачиГрузаНаименование;
		ПолучательТипАдресаНаименование = ?(ПунктВыдачиГрузаТипНаименование="", НСтр("ru='Адрес'"),
			ПунктВыдачиГрузаТипНаименование);
		Если ЗначениеЗаполнено(ПунктВыдачиГрузаАдрес) Тогда
			ПолучательТерминалПолучательАдрес = ПолучательТерминалПолучательАдрес
												+ "(" + ПунктВыдачиГрузаАдрес + ")";
		КонецЕсли;
	Иначе
		ПолучательТерминалПолучательАдрес = ПолучательАдресПредставление;
		ПолучательТипАдресаНаименование = НСтр("ru='Адрес'");
	КонецЕсли;
	
	ПараметрыОбласти.РасшифровкаПолучательТерминалПолучательАдрес = "ПолучательТерминалПолучательАдрес";
	ПараметрыОбласти.ПолучательТипАдресаНаименование = ПолучательТипАдресаНаименование;
	
	ПараметрыОбласти.ОтправительТерминалОтправительАдрес = ОтправительТерминалОтправительАдрес;
	ПараметрыОбласти.ОтправительТерминалТелефон = ПунктПриемаГрузаТелефон;
	ПараметрыОбласти.СпособДоставки = Элементы.СпособДоставки.СписокВыбора.НайтиПоЗначению(СпособДоставки);
	ПараметрыОбласти.ПолучательТерминалПолучательАдрес = ПолучательТерминалПолучательАдрес;
	ПараметрыОбласти.ПолучательТерминалТелефон = ПунктВыдачиГрузаТелефон;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаАдреса);
	
	Если ТипГрузоперевозки = 1 Тогда
		ОбластьМакетаШапкаВремя = Макет.ПолучитьОбласть("ШапкаВремя1");
		ПараметрыОбласти = ОбластьМакетаШапкаВремя.Параметры;
		ПараметрыОбласти.ОтправительДатаИВремяОтгрузкиПредставление = Формат(ДатаОтгрузки,"ДЛФ=D")
			+ " " + ВремяОтгрузкиПредставление;
		ПараметрыОбласти.ПолучательДатаВремяОтгрузкиПредставление = Формат(ДатаДоставки,"ДЛФ=D")
			+ " " + ВремяДоставкиПредставление;
		
	Иначе
		ОбластьМакетаШапкаВремя = Макет.ПолучитьОбласть("ШапкаВремя2");
		ПараметрыОбласти = ОбластьМакетаШапкаВремя.Параметры;
		ПараметрыОбласти.ДатаОтгрузки = Формат(ДатаОтгрузки,"ДЛФ=D")
			+" "+?(ЗначениеЗаполнено(ВремяОтгрузкиК), Формат(ВремяОтгрузкиК,"ДЛФ=T"), НСтр("ru = '(на ближайшее время)'"));
			
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаШапкаВремя);
	
	ОбластьМакетаПараметрыГруза = Макет.ПолучитьОбласть("ПараметрыГруза");
	
	ПараметрыОбласти = ОбластьМакетаПараметрыГруза.Параметры;
	
	ПараметрыОбласти.Валюта = ВалютаНаименование;
	ПараметрыОбласти.ГрузСодержимое = ГрузСодержимое;
	ПараметрыОбласти.ГрузСтоимость = ГрузСтоимость;
	ПараметрыОбласти.ГрузКоличествоГрузовыхМест = ГрузКоличествоГрузовыхМест;
	ПараметрыОбласти.ГрузВес = ГрузВес;
	ПараметрыОбласти.ГрузОбъем = ГрузОбъем;
	ПараметрыОбласти.ГрузМаксимальныйВес = ГрузМаксимальныйВес;
	ПараметрыОбласти.ГрузМаксимальнаяВысота = ГрузМаксимальнаяВысота;
	ПараметрыОбласти.ГрузМаксимальнаяШирина = ГрузМаксимальнаяШирина;
	ПараметрыОбласти.ГрузМаксимальнаяДлина = ГрузМаксимальнаяДлина;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаПараметрыГруза);
	
	Если ГрузНегабаритныйВес <> 0 
		ИЛИ ГрузНегабаритныйОбъем <> 0 
		ИЛИ ГрузКоличествоНегабаритныхГрузовыхМест <> 0 Тогда 
		ОбластьПараметрыНегабаритногоГруза = Макет.ПолучитьОбласть("ПараметрыНегабаритногоГруза");
		ОбластьПараметрыНегабаритногоГруза.Параметры.ГрузНегабаритныйВес = ГрузНегабаритныйВес;
		ОбластьПараметрыНегабаритногоГруза.Параметры.ГрузНегабаритныйОбъем = ГрузНегабаритныйОбъем;
		ОбластьПараметрыНегабаритногоГруза.Параметры.ГрузКоличествоНегабаритныхГрузовыхМест 
			= ГрузКоличествоНегабаритныхГрузовыхМест;
		
		ТабличныйДокумент.Вывести(ОбластьПараметрыНегабаритногоГруза);
	КонецЕсли;
	
	ОбластьТабличнаяЧастьУслуги = ТабличнаяЧастьУслуги(Макет, УслугиТарифа);
	ТабличныйДокумент.Вывести(ОбластьТабличнаяЧастьУслуги);
	
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакетаПодвал.Параметры.СуммаДокумента = Формат(СуммаДокумента,"ЧН=-");
	ОбластьМакетаПодвал.Параметры.Валюта = ВалютаНаименование;
	ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
	
	Если ДополнительнаяИнформация <> "" Тогда
		ОбластьМакетаДополнительнаяИнформация = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
		ОбластьМакетаДополнительнаяИнформация.Параметры.Комментарий = ДополнительнаяИнформация;
		ТабличныйДокумент.Вывести(ОбластьМакетаДополнительнаяИнформация);
	КонецЕсли;
	
	Если РежимМастера = 2 Тогда
		
		ОбластьМакетаДополнительныеДанныеЗаголовок1 			= Макет.ПолучитьОбласть("ДополнительныеДанныеЗаголовок1");
		ОбластьМакетаДополнительныеДанныеЗаголовок2 			= Макет.ПолучитьОбласть("ДополнительныеДанныеЗаголовок2");
		ОбластьМакетаДополнительныеДанныеСтрока 				= Макет.ПолучитьОбласть("ДополнительныеДанныеСтрока");
		ОбластьМакетаДополнительныеДанныеСтрокаСНаименованием
			= Макет.ПолучитьОбласть("ДополнительныеДанныеСтрокаСНаименованием");
		
		Для Каждого ТекущиеДополнительныеДанные Из ДополнительныеДанные Цикл
			
			ТекущаяОбласть = ОбластьМакетаДополнительныеДанныеЗаголовок1;
			
			ТекущаяОбласть.Параметры.Наименование = ТекущиеДополнительныеДанные.Наименование;
			ТабличныйДокумент.Вывести(ТекущаяОбласть);
			
			Если ТекущиеДополнительныеДанные.Список.Количество() = 0 Тогда
				ТекущаяОбласть = ОбластьМакетаДополнительныеДанныеСтрока;
				ТекущаяОбласть.Параметры.Значение = ТекущиеДополнительныеДанные.Значение;
				ТабличныйДокумент.Вывести(ТекущаяОбласть);
			Иначе
				Для Каждого ТекущиеДанныеИзСписка Из ТекущиеДополнительныеДанные.Список Цикл
					
					Если ЗначениеЗаполнено(ТекущиеДанныеИзСписка.Наименование) Тогда
						ТекущаяОбласть = ОбластьМакетаДополнительныеДанныеСтрокаСНаименованием;
						ТекущаяОбласть.Параметры.Наименование = ТекущиеДанныеИзСписка.Наименование;
					Иначе
						ТекущаяОбласть = ОбластьМакетаДополнительныеДанныеСтрока;
					КонецЕсли;
					
					ТекущаяОбласть.Параметры.Значение = ТекущиеДанныеИзСписка.Значение;
					ТабличныйДокумент.Вывести(ТекущаяОбласть);
					
				КонецЦикла;
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТабличныйДокумент;

КонецФункции

&НаСервере
Процедура СформироватьИтоговуюИнформацию()
	
	Обработка = РеквизитФормыВЗначение("Объект");

	ИтоговаяИнформация = ТабличныйДокументИтоговаяИнформация();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораВремениИДаты(ВариантВыбораВремени)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборДатыВремени", ЭтаФорма);
	
	ПараметрыОткрытияФормы = Новый Структура;
	
	Если ВариантВыбораВремени = 1 Тогда
		
		ПараметрыОткрытияФормы.Вставить("Дата", ДатаОтгрузки);
		ПараметрыОткрытияФормы.Вставить("ВремяРаботыС", ВремяОтгрузкиС);
		ПараметрыОткрытияФормы.Вставить("ВремяРаботыПо", ВремяОтгрузкиПо);
		ПараметрыОткрытияФормы.Вставить("ВремяОбедС", ВремяОтгрузкиОбедС);  
		ПараметрыОткрытияФормы.Вставить("ВремяОбедПо", ВремяОтгрузкиОбедПо);
		ПараметрыОткрытияФормы.Вставить("ВариантВыбораВремени", 1);
		
	ИначеЕсли ВариантВыбораВремени = 2 Тогда
		
		ПараметрыОткрытияФормы.Вставить("Дата", ДатаДоставки);
		ПараметрыОткрытияФормы.Вставить("ВремяРаботыС", ВремяДоставкиС);
		ПараметрыОткрытияФормы.Вставить("ВремяРаботыПо", ВремяДоставкиПо);
		ПараметрыОткрытияФормы.Вставить("ВремяОбедС", ВремяДоставкиОбедС);  
		ПараметрыОткрытияФормы.Вставить("ВремяОбедПо", ВремяДоставкиОбедПо);
		ПараметрыОткрытияФормы.Вставить("ВариантВыбораВремени", 2);
			
	КонецЕсли;
	
	ПараметрыОткрытияФормы.Вставить("ТолькоПросмотр", РежимМастера = 2);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму(
		"Обработка.СервисДоставки.Форма.ВыборВремениПередачиГруза",
		ПараметрыОткрытияФормы,
		ЭтаФорма,,,,ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДатыВремени(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ВариантВыбораВремени = 0;
	Если Результат.Свойство("ВариантВыбораВремени", ВариантВыбораВремени) Тогда 
		Если ВариантВыбораВремени = 1 Тогда
			
			Результат.Свойство("ВремяРаботыС", ВремяОтгрузкиС);
			Результат.Свойство("ВремяРаботыПо", ВремяОтгрузкиПо);
			Результат.Свойство("ВремяОбедС", ВремяОтгрузкиОбедС);  
			Результат.Свойство("ВремяОбедПо", ВремяОтгрузкиОбедПо);
			
			СформироватьПредставлениеВремениОтгрузки();
			
		ИначеЕсли ВариантВыбораВремени = 2 Тогда

			Результат.Свойство("ВремяРаботыС", ВремяДоставкиС);
			Результат.Свойство("ВремяРаботыПо", ВремяДоставкиПо);
			Результат.Свойство("ВремяОбедС", ВремяДоставкиОбедС);  
			Результат.Свойство("ВремяОбедПо", ВремяДоставкиОбедПо);
			
			СформироватьПредставлениеВремениДоставки();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	ПроверитьВремяОтгрузки(ЕстьОшибки, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПредставлениеВремениОтгрузки()
	
	ВремяОтгрузкиПредставление = ПредставлениеДатыВремени(ДатаОтгрузки, 
									ВремяОтгрузкиС, 
									ВремяОтгрузкиПо, 
									ВремяОтгрузкиОбедС, 
									ВремяОтгрузкиОбедПо, 1);
									
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПредставлениеВремениДоставки()
	
	ВремяДоставкиПредставление = ПредставлениеДатыВремени(ДатаДоставки, 
									ВремяДоставкиС, 
									ВремяДоставкиПо, 
									ВремяДоставкиОбедС, 
									ВремяДоставкиОбедПо, 2);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеДатыВремени(ДатаДоставки, ВремяРаботыС, ВремяРаботыПо, ВремяОбедС, ВремяОбедПо, Режим)
	
	СтрокаПредставления = "";
	
	Если ЗначениеЗаполнено(ВремяРаботыС) ИЛИ ЗначениеЗаполнено(ВремяРаботыПо) Тогда
		СтрокаПредставления = СтрокаПредставления + Формат(ВремяРаботыС, "ДФ=HH:mm; ДП=00:00")
			+ "-" + Формат(ВремяРаботыПо, "ДФ=HH:mm");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВремяОбедС) ИЛИ ЗначениеЗаполнено(ВремяОбедПо) Тогда
		СтрокаПредставления = СтрокаПредставления + " (обед " + Формат(ВремяОбедС, "ДФ=HH:mm; ДП=00:00")
			+ "-" + Формат(ВремяОбедПо, "ДФ=HH:mm") + ")";
	КонецЕсли;
	
	Возврат СтрокаПредставления;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПодборТерминала(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если ДополнительныеПараметры.Направление = 1 Тогда
		Адресат = "ПунктПриемаГруза";
	Иначе
		Адресат = "ПунктВыдачиГруза";
	КонецЕсли;
	
	Результат.Свойство("ТерминалИдентификатор", ЭтаФорма[Адресат + "Идентификатор"]);
	Результат.Свойство("Терминал", ЭтаФорма[Адресат + "Наименование"]);
	Результат.Свойство("Адрес", ЭтаФорма[Адресат + "Адрес"]);
	Результат.Свойство("Телефон", ЭтаФорма[Адресат + "Телефон"]);
	Результат.Свойство("Описание", ЭтаФорма[Адресат + "Описание"]);
	Результат.Свойство("ТипНаименование", ЭтаФорма[Адресат + "ТипНаименование"]);
	Результат.Свойство("ТипИдентификатор", ЭтаФорма[Адресат + "ТипИдентификатор"]);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуТерминала(Идентификатор)
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура;
	
	ПараметрыОткрытияФормы.Вставить("Идентификатор", Идентификатор);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму(
		"Обработка.СервисДоставки.Форма.КарточкаТерминала",
		ПараметрыОткрытияФормы,
		ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
 
КонецПроцедуры

&НаКлиенте
Процедура СброситьВзаимоисключающие(ТекущиеДанные)
	
	НайденныеСтроки = НесовместимыеУслуги.НайтиСтроки(Новый Структура("Идентификатор", ТекущиеДанные.Идентификатор));
	
	Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
		СброситьВзаимоисключающее(ТекущиеДанные, ТекущаяСтрока.Идентификатор,
			ТекущаяСтрока.ИдентификаторНесовместимойУслуги);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьВзаимоисключающее(ТекущиеДанные, ИдентификаторНового, ИдентификаторТекущего)
	
	Если ТекущиеДанные.Идентификатор = ИдентификаторНового Тогда
		Родитель = ТекущиеДанные.ПолучитьРодителя();
		СтрокиДерева = Родитель.ПолучитьЭлементы();
		Для Каждого ТекущаяСтрокаДерева Из СтрокиДерева Цикл
			Если ТекущаяСтрокаДерева.Идентификатор = ИдентификаторТекущего Тогда
				ТекущаяСтрокаДерева.Использовать = Ложь;
				Элементы.ОтборыТарифов.Свернуть(ТекущаяСтрокаДерева.ПолучитьИдентификатор());
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьИзменениеОтборов()
	
	ОтборыИзменение = Истина;
	СформироватьНадписьОтбора();
	
	СброситьТариф();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНадписьОтбора()
	
	ТекстЗаголовка = НСтр("ru='Настроить отбор'");
	Элементы.ГруппаОтборы.Заголовок = ?(ОтборыИзменение, ТекстЗаголовка + "*", ТекстЗаголовка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуГрафикаДвиженияЗаказа()
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ИдентификаторЗаказа", ИдентификаторЗаказа);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
		
	ОткрытьФорму("Обработка.СервисДоставки.Форма.ОтслеживаниеЗаказа",
		ПараметрыОткрытияФормы,
		ЭтаФорма,
		ИдентификаторЗаказа,,,,
		РежимОткрытияОкнаФормы.Независимый);
							
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуГрузоперевозчика()
	
	ПараметрыОткрытияФормы = Новый Структура();
	ПараметрыОткрытияФормы.Вставить("Идентификатор", ГрузоперевозчикИдентификатор);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.КарточкаГрузоперевозчика", 
		ПараметрыОткрытияФормы,
		ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
							
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуТарифа()
	
	ПараметрыОткрытияФормы = Новый Структура();
	ПараметрыОткрытияФормы.Вставить("Идентификатор", ТарифИдентификатор);
	ПараметрыОткрытияФормы.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСетиСсылка);
	ПараметрыОткрытияФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.КарточкаТарифа", 
		ПараметрыОткрытияФормы,
		ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
							
КонецПроцедуры


&НаКлиенте
Процедура ИтоговаяИнформацияОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	Если Расшифровка = "Грузоперевозчик" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуГрузоперевозчика();
		
	ИначеЕсли Расшифровка = "Состояние" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОткрытьФормуГрафикаДвиженияЗаказа();
		
	ИначеЕсли Расшифровка = "ОтправительТерминалОтправительАдрес" Тогда
		
		СтандартнаяОбработка = Ложь;
		Если СпособОтгрузки = 1 Тогда
			ОткрытьФормуТерминала(ПунктПриемаГрузаИдентификатор);
		Иначе
			АдресНачалоВыбора(Элементы.ОтправительАдрес, ОтправительКонтрагентЭтоОрганизация);
		КонецЕсли;
	ИначеЕсли Расшифровка = "ПолучательТерминалПолучательАдрес" Тогда
		
		СтандартнаяОбработка = Ложь;
		Если СпособДоставки = 1 Тогда
			ОткрытьФормуТерминала(ПунктВыдачиГрузаИдентификатор);
		Иначе
			АдресНачалоВыбора(Элементы.ПолучательАдрес, ПолучательКонтрагентЭтоОрганизация);
		КонецЕсли;
		
	ИначеЕсли Расшифровка = "ОтправительКонтрагент" Тогда
		
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(ОтправительКонтрагентСсылка) Тогда
			КонтрагентОткрытие(Элементы.ОтправительКонтрагент)
		КонецЕсли;
		
	ИначеЕсли Расшифровка = "ПолучательКонтрагент" Тогда
		
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(ПолучательКонтрагентСсылка) Тогда
			КонтрагентОткрытие(Элементы.ПолучательКонтрагент)
		КонецЕсли;
		
	ИначеЕсли Расшифровка = "Тариф" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуТарифа();
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список ошибок заполнения в виде списка значений:
//      Представление   - описание ошибки.
//      Значение        - XPath для поля.
&НаКлиенте
Функция ОшибкиЗаполненияТелефона(Префикс)
	
	Представление = ЭтотОбъект[Префикс + "Представление"];
	Значение = ЭтотОбъект[Префикс + "Значение"];
	
	СписокОшибок = Новый СписокЗначений;
	
	Если Представление = "" Тогда
		Возврат СписокОшибок;
	КонецЕсли;
	
	СтруктураТелефона = Неопределено;
	
	Если Значение <> "" Тогда
		
		Отказ = Ложь;
		ТекстОшибки = "";
		СтруктураТелефона = ЗначениеИзСтрокиJSON(Значение, Отказ, ТекстОшибки);
		
	КонецЕсли;
	
	Если СтруктураТелефона = Неопределено Тогда
		
		Значение = СервисДоставкиВызовСервера.КонтактнаяИнформацияПоПредставлению(Представление, "Телефон");
		ЭтотОбъект[Префикс + "Значение"] = Значение;
		Отказ = Ложь;
		ТекстОшибки = "";
		СтруктураТелефона = ЗначениеИзСтрокиJSON(Значение, Отказ, ТекстОшибки);
		
	КонецЕсли;
	
	ПолныйНомерТелефона = "";
	Если СтруктураТелефона.Свойство("countryCode") Тогда
		ПолныйНомерТелефона = ПолныйНомерТелефона + СтруктураТелефона.countryCode;
	КонецЕсли;
	
	Если СтруктураТелефона.Свойство("areaCode") Тогда
		ПолныйНомерТелефона = ПолныйНомерТелефона + СтруктураТелефона.areaCode;
	КонецЕсли;
	
	Если СтруктураТелефона.Свойство("number") Тогда
		ПолныйНомерТелефона = ПолныйНомерТелефона + СтруктураТелефона.number;
	КонецЕсли;
	
	НомерТелефонаТолькоЦифры = ТолькоЦифры(ПолныйНомерТелефона);
	
	Если СтрДлина(НомерТелефонаТолькоЦифры) < 10 Тогда
		СписокОшибок.Добавить("НомерТелефона", НСтр("ru = 'Номер телефона слишком короткий (менее 10 цифр)'"));
	КонецЕсли;
	
	Если СтрДлина(НомерТелефонаТолькоЦифры) > 15 Тогда
		СписокОшибок.Добавить("НомерТелефона", НСтр("ru = 'Номер телефона слишком длинный'"));
	КонецЕсли;
	
	Если НомерТелефонаСодержитНедопустимыеСимволы(ПолныйНомерТелефона) Тогда
		СписокОшибок.Добавить("НомерТелефона", НСтр("ru = 'Номер телефона содержит недопустимые символы'"));
	КонецЕсли;
	
	Возврат СписокОшибок;
	
КонецФункции

// Проверяет, содержит ли строка только 
//
// Параметры:
//  СтрокаПроверки          - Строка - Строка для проверки.
//
// Возвращаемое значение:
//   Булево - Истина - строка содержит только цифры или пустая, Ложь - строка содержит иные символы.
//
&НаКлиенте
Функция НомерТелефонаСодержитНедопустимыеСимволы(Знач СтрокаПроверки)
	
	СписокДопустимыхСимволов = "+-.,() wp1234567890";
	Возврат СтрРазделить(СтрокаПроверки, СписокДопустимыхСимволов, Ложь).Количество() > 0;
	
КонецФункции

&НаКлиенте
Функция ТолькоЦифры(Знач СтрокаДляПроверки)
	
	Возврат СервисДоставкиКлиент.ТолькоЦифры(СтрокаДляПроверки);
	
КонецФункции

&НаСервереБезКонтекста
Функция ОрганизацииБизнесСетиНаСервере()
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(СервисДоставкиСлужебный.ОрганизацииБизнесСети());
	
КонецФункции

&НаКлиенте
Процедура ОрганизацияБизнесСетиСсылкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокВыбора = Элементы.ОрганизацияБизнесСетиСсылка.СписокВыбора;
	СписокВыбора.Очистить();
	
	ОрганизацииБизнесСети = ОрганизацииБизнесСетиНаСервере();
	Для Каждого ТекущаяОрганизация Из ОрганизацииБизнесСети Цикл
		СписокВыбора.Добавить(ТекущаяОрганизация.Организация, ТекущаяОрганизация.Наименование);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеИзСтрокиJSON(Значение, Отказ, ТекстОшибки)
	
	Возврат СервисДоставки.ЗначениеИзСтрокиJSON(Значение, Отказ, ТекстОшибки);
	
КонецФункции

&НаКлиенте
Процедура ТоварныйСостав(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТоварныйСостав", ТоварныйСостав);
	ПараметрыФормы.Вставить("ТипГрузоперевозки", ТипГрузоперевозки);
	
	ОткрытьФорму("Обработка.СервисДоставки.Форма.ТоварныйСостав",ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияПоДопУслугамПриИзменении(Элемент)
	СписокИдентификаторовСвойства = СтрРазделить(Элемент.ТекущаяОбласть.Имя,".");
	Если СписокИдентификаторовСвойства.Количество() = 2 Тогда
		ТекущаяСтрокаТарифа = Элементы.Тарифы.ТекущиеДанные;
		Если Не ТекущаяСтрокаТарифа = Неопределено Тогда
			СтрокаУслуги = ТекущаяСтрокаТарифа.ДополнительныеУслуги.НайтиПоИдентификатору(СписокИдентификаторовСвойства[0]);
			Если Не СтрокаУслуги = Неопределено Тогда
				СтрокаСвойства = СтрокаУслуги.Свойства.НайтиПоИдентификатору(СписокИдентификаторовСвойства[1]);
				Если Не СтрокаСвойства = Неопределено Тогда
					СтрокаСвойства.Значение = Элемент.ТекущаяОбласть.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОборотыДопУслугПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.ТарифДопУслуг.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
	
		Поле = Элемент.ТекущийЭлемент;
		Поле.ТолькоПросмотр = Не ТекущиеДанные.ТребуетсяЗначение;
		
		Если ТекущиеДанные.ТипСтроки = 1 И ТекущиеДанные.Обязательная Тогда
			Элементы.ТарифДопУслуг.Развернуть(ТекущиеДанные.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОборотыДопУслугПередРазворачиванием(Элемент, Строка, Отказ)
	
	ТекущиеДанные = ТарифДопУслуг.НайтиПоИдентификатору(Строка);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (Не ТекущиеДанные.Использовать) И ТекущиеДанные.ТипСтроки = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОборотыДопУслугПередСворачиванием(Элемент, Строка, Отказ)
	
	ТекущиеДанные = ТарифДопУслуг.НайтиПоИдентификатору(Строка);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Использовать И ТекущиеДанные.ТипСтроки = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОборотыДопУслугЗначениеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элементы.ТарифДопУслуг.ТекущиеДанные.Значение) Тогда
		
		СтрокаОтбора = ТарифДопУслуг.НайтиПоИдентификатору(Элементы.ТарифДопУслуг.ТекущаяСтрока);
		Если СтрокаОтбора <> Неопределено Тогда
			СтрокаУслуги = СтрокаОтбора.ПолучитьРодителя();
			СтрокаУслуги.Использовать = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОборотыДопУслугИспользоватьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТарифДопУслуг.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Использовать Тогда
		СброситьВзаимоисключающие(ТекущиеДанные);
		Элементы.ТарифДопУслуг.Развернуть(ТекущиеДанные.ПолучитьИдентификатор());
	Иначе
		Элементы.ТарифДопУслуг.Свернуть(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
	Если ПроверитьЗаполнениеЗначенийДополнительныхУслуг() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Есть незаполненные свойства для выбранных дополнительных услуг.'"));
	Иначе
		ОбновитьИнформациюПоВыбраннымДопУслугам();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДопУслугиПоТарифу(Знач ТабДопУслуг)

	ДеревоДопУслуг = ТарифДопУслуг.ПолучитьЭлементы();
	
	ДеревоДопУслуг.Очистить();
	
	ТекущаяКатегория = "";
	
	МассивВыбранныхУслуг = Новый Массив();
	
	Для Каждого ТекущаяУслуга Из ТабДопУслуг Цикл
		
		ЕстьНесовместимаяУслуга = Ложь;
		Для Каждого ИдентификаторВыбраннойУслуги Из МассивВыбранныхУслуг Цикл
			
			Если НесовместимыеУслуги.НайтиСтроки(Новый Структура("Идентификатор,ИдентификаторНесовместимойУслуги",
				ИдентификаторВыбраннойУслуги, ТекущаяУслуга.Идентификатор)).Количество() Тогда
				ЕстьНесовместимаяУслуга = Истина;
				Продолжить;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьНесовместимаяУслуга Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяКатегория <> ТекущаяУслуга.Категория Тогда
			ТекущаяКатегория = ТекущаяУслуга.Категория;
			
			СтрокаДерева = ДеревоДопУслуг.Добавить();
			СтрокаДерева.Наименование = ТекущаяУслуга.Категория;
			СтрокаДерева.Использовать = Истина;
			СтрокаДерева.Идентификатор = "";
			СтрокаДерева.Значение = Неопределено;
			СтрокаДерева.ТребуетсяЗначение = Ложь;
			СтрокаДерева.Обязательная = Ложь;
			СтрокаДерева.ТипСтроки = 0;
			
		КонецЕсли;
		
		СтрокаДереваВетка = СтрокаДерева.ПолучитьЭлементы().Добавить();
		СтрокаДереваВетка.Наименование = ТекущаяУслуга.Наименование;
		СтрокаДереваВетка.Использовать = ТекущаяУслуга.Использовать;
		СтрокаДереваВетка.Идентификатор = ТекущаяУслуга.Идентификатор;
		СтрокаДереваВетка.ТипСтроки = 1;
		СтрокаДереваВетка.ИдентификаторУслугТарифов = ТекущаяУслуга.ПолучитьИдентификатор();
		СтрокаДереваВетка.Обязательная = ТекущаяУслуга.Обязательная;
		СтрокаДереваВетка.Использовать = ТекущаяУслуга.Использовать;
		
		Если СтрокаДереваВетка.Обязательная Тогда
			СтрокаДереваВетка.Использовать = Истина;
			МассивВыбранныхУслуг.Добавить(ТекущаяУслуга.Идентификатор);
		КонецЕсли;
		
		НайденныеСтроки = УслугиТарифа.НайтиСтроки(Новый Структура("Идентификатор", ТекущаяУслуга.Идентификатор));
		
		Свойства = Неопределено;
		Если НайденныеСтроки.Количество() Тогда
			СтрокаДереваВетка.Использовать = Истина;
			Свойства = НайденныеСтроки[0].Свойства;
		КонецЕсли;
		
		СвойстваУслуги = ТекущаяУслуга.Свойства;
		
		Если СвойстваУслуги.Количество() Тогда
			
			СтрокиСвойств = СтрокаДереваВетка.ПолучитьЭлементы();
			СтрокиСвойств.Очистить();
			
			Для Каждого ТекущееСвойство Из СвойстваУслуги Цикл
				
				Если Не Свойства = Неопределено Тогда
					НайденныеСвойства = Свойства.НайтиСтроки(Новый Структура("Идентификатор", ТекущееСвойство.Идентификатор));
				КонецЕсли;
				
				СтрокаДереваСвойство = СтрокиСвойств.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДереваСвойство, ТекущееСвойство);
				СтрокаДереваСвойство.ТребуетсяЗначение = Истина;
				СтрокаДереваСвойство.ТипСтроки = 2;
				Если Не Свойства = Неопределено И НайденныеСвойства.Количество() Тогда
					СтрокаДереваСвойство.Значение = НайденныеСвойства[0].Значение;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьДополнительныеУслуги(Команда)
	
	Если ПроверитьЗаполнениеЗначенийДополнительныхУслуг() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Есть незаполненные свойства для выбранных дополнительных услуг.'"));
	Иначе
		Модифицированность = Истина;
		Элементы.ГруппаДопУслуг.Скрыть();
		Элементы.ГруппаПредупрежденияПоДопУслугам.Видимость = Ложь;
		ОбновитьИнформациюПоВыбраннымДопУслугам();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПоВыбраннымДопУслугам()
	
	Для Каждого ТекущаяКатегория Из ТарифДопУслуг.ПолучитьЭлементы() Цикл
		Для Каждого ТекущаяДопУслуга Из ТекущаяКатегория.ПолучитьЭлементы() Цикл
			Если ТекущаяДопУслуга.Использовать Тогда
				ОтборПоИдентификатору = Новый Структура();
				ОтборПоИдентификатору.Вставить("Идентификатор", ТекущаяДопУслуга.Идентификатор);
				НайденныеСтрокиУслуг = УслугиТарифа.НайтиСтроки(ОтборПоИдентификатору);
				Если НайденныеСтрокиУслуг.Количество() Тогда
					НоваяУслуга = НайденныеСтрокиУслуг[0];
				Иначе
					НоваяУслуга = УслугиТарифа.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяУслуга, ТекущаяДопУслуга,"Идентификатор, Наименование, Использовать, Обязательная");
				КонецЕсли;
				
				НоваяУслуга.Свойства.Очистить();
				СтрокиСвойств = ТекущаяДопУслуга.ПолучитьЭлементы();
				
				Для Каждого ТекущееСвойство Из СтрокиСвойств Цикл
					Если ЗначениеЗаполнено(ТекущееСвойство.Значение) Тогда
						НовоеСвойство = НоваяУслуга.Свойства.Добавить();
						ЗаполнитьЗначенияСвойств(НовоеСвойство, ТекущееСвойство);
					КонецЕсли;
				КонецЦикла;
			Иначе
				ОтборПоИдентификатору = Новый Структура();
				ОтборПоИдентификатору.Вставить("Идентификатор", ТекущаяДопУслуга.Идентификатор);
				НайденныеСтрокиУслуг = УслугиТарифа.НайтиСтроки(ОтборПоИдентификатору);
				Если НайденныеСтрокиУслуг.Количество() Тогда
					УслугиТарифа.Удалить(НайденныеСтрокиУслуг[0]);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ЗаполнитьИнформациюПоТекущемуТарифу();
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеЗначенийДополнительныхУслуг()
	
	Отказ = Ложь;
	
	ДеревоДопУслуг = ТарифДопУслуг.ПолучитьЭлементы();
	
	Для Каждого СтрокаДопУслуги Из ДеревоДопУслуг Цикл
		
		СтрокиУслуг = СтрокаДопУслуги.ПолучитьЭлементы();
		
		Для Каждого СтрокаУслуги Из СтрокиУслуг Цикл
			
			Если СтрокаУслуги.Использовать
				ИЛИ СтрокаУслуги.Обязательная Тогда
				
				СвойстваУслуги = СтрокаУслуги.ПолучитьЭлементы();
				
				Для Каждого СвойствоУслуги Из СвойстваУслуги Цикл
					
					Если Не ЗначениеЗаполнено(СвойствоУслуги.Значение) Тогда
						Отказ = Истина;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если Отказ Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ОборотыДопУслугТребуетсяЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТарифДопУслуг.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Поле = Элемент.ТекущийЭлемент;
		Поле.ТолькоПросмотр = ТекущиеДанные.Обязательная;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьРодителейСпискаДопУслуг()
	
	ЭлементыДереваСписка = ТарифДопУслуг.ПолучитьЭлементы();
	Для Каждого ЭлементДереваСписка Из ЭлементыДереваСписка Цикл
		Элементы.ТарифДопУслуг.Развернуть(ЭлементДереваСписка.ПолучитьИдентификатор());
		ЭлементыУслуги = ЭлементДереваСписка.ПолучитьЭлементы();
		Для Каждого ЭлементДереваСпискаУслуги Из ЭлементыУслуги Цикл
			
			Если ЭлементДереваСпискаУслуги.Использовать Тогда
				Элементы.ТарифДопУслуг.Развернуть(ЭлементДереваСпискаУслуги.ПолучитьИдентификатор());
			КонецЕсли;
				
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТарифДопУслугПриАктивизацииСтроки(Элемент)
	РазвернутьРодителейСпискаДопУслуг();
КонецПроцедуры

#КонецОбласти
