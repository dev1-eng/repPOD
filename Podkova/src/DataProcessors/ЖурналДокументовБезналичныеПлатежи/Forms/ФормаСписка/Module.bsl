
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	Если Параметры.Свойство("КлючНазначенияФормы") И Не ПустаяСтрока(Параметры.КлючНазначенияФормы) Тогда
		КлючНазначенияИспользования = Параметры.КлючНазначенияФормы;
	Иначе
		КлючНазначенияИспользования = "БезналичныеПлатежи";
	КонецЕсли;
	
	Если КлючНазначенияИспользования = "БезналичныеПлатежи" Тогда
		КлючНастроек = "";
	Иначе
		КлючНастроек = КлючНазначенияИспользования;
	КонецЕсли;
	НавигационнаяСсылка = "e1cib/app/Обработка.ЖурналДокументовБезналичныеПлатежи";
	
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСведений.ГрафикПлатежей.РассчитатьГрафикПлатежейПоПоступлениямОтБанкаПоЭквайрингу();
	УстановитьПривилегированныйРежим(Ложь);
	
	ИнициализироватьРеквизиты();
	ЗаполнитьКомандыСозданияДокументов();
	
	СписокПлатежей.Параметры.УстановитьЗначениеПараметра("НачалоПериода", НачалоПериода);
	СписокПлатежей.Параметры.УстановитьЗначениеПараметра("КонецПериода", ?(ЗначениеЗаполнено(КонецПериода), КонецДня(КонецПериода), КонецПериода));
	
	Если Параметры.Свойство("СтруктураБыстрогоОтбора") Тогда
		
		СтруктураБыстрогоОтбора = Параметры.СтруктураБыстрогоОтбора;
		
		Если СтруктураБыстрогоОтбора.Свойство("ТекущиеДелаУведомлениеОЗачисленииВалюты")
			И СтруктураБыстрогоОтбора.ТекущиеДелаУведомлениеОЗачисленииВалюты Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗаявкиКОплате;
		КонецЕсли;
		
		Если СтруктураБыстрогоОтбора.Свойство("СписокОперацийОплаты") Тогда
			СписокОперацийОплаты = СтруктураБыстрогоОтбора.СписокОперацийОплаты;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимость();
	УстановитьОтборДинамическихСписков();
	
	ИспользуемыеТипыДокументов = Новый Массив;
	ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств"));
	ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств"));
	ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	ОбновлениеИнформационнойБазыУТ.ПроверитьВозможностьОткрытияЖурналаДокументов(ИспользуемыеТипыДокументов);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов(ИспользуемыеТипыДокументов);
	ПараметрыРазмещения.КоманднаяПанель = Элементы.СписокПлатежейКоманднаяПанель;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаГлобальныеКоманды);
	
	ПроверкаКонтрагентов.ПриСозданииНаСервереСписокДокументов(СписокПлатежей);
	Если Не ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно() Тогда
		Элементы.ЕстьОшибкиПроверкиКонтрагентов.Видимость = Ложь;
	КонецЕсли;
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	// ЭлектронноеВзаимодействие.ОбменСБанками
	ПараметрыСозданияФормыСпискаСП = ОбменСБанкамиКлиентСервер.ПараметрыСозданияФормыСписка();
	ПараметрыСозданияФормыСпискаСП.ДинамическийСписок.Изменить = Ложь;	
	ПараметрыСозданияФормыСпискаСП.ПерепискаСБанками.ДобавитьСсылку = Ложь;
	ПараметрыСозданияФормыСпискаСП.Реклама.Добавить = Ложь;
	ПараметрыСозданияФормыСпискаСП.СписокДокументов.МестоРасположения = Элементы.СписокПлатежейДата.Имя;
	ПараметрыСозданияФормыСпискаСП.СписокДокументов.ИмяЭлемента = "СписокПлатежей";
	ПараметрыСозданияФормыСпискаСП.СписокДокументов.ИмяРеквизита = "СписокПлатежей";
	ПараметрыСозданияФормыСпискаСП.ГруппаКоманд.Родитель = Элементы.СписокПлатежей.КоманднаяПанель;
	ПараметрыСозданияФормыСпискаСП.ГруппаКоманд.МестоРасположения = Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки.Имя;
	ОбменСБанками.ПриСозданииФормыСпискаНаСервере(ЭтотОбъект, ПараметрыСозданияФормыСпискаСП);
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "ЗаказыКОплате.Дата", Элементы.ЗаказыКОплатеДата.Имя);
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "ЗаказыКПоступлению.Дата", Элементы.ЗаказыКПоступлениюДата.Имя);
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "ДокументыВалютногоКонтроля.Дата", Элементы.ДокументыВалютногоКонтроляДата.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	НачалоПериода             = Настройки.Получить("НачалоПериода");
	КонецПериода              = Настройки.Получить("КонецПериода");
	
	БанковскийСчетОтбор       = Настройки.Получить("БанковскийСчетОтбор");
	Контрагент                = Настройки.Получить("Контрагент");
	ПроведеноБанкомОтбор      = Настройки.Получить("ПроведеноБанкомОтбор");
	ДатаКОплате               = Настройки.Получить("ДатаКОплате");
	
	СписокОпераций            = Настройки.Получить("СписокОперацийПоступления");
	Если СписокОпераций <> Неопределено Тогда
		Для каждого Операция Из СписокОпераций Цикл
			Если Операция.Пометка Тогда
				ОперацияСписка = СписокОперацийПоступления.НайтиПоЗначению(Операция.Значение);
				Если ОперацияСписка <> Неопределено Тогда
					ОперацияСписка.Пометка = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	СписокОперацийПоступленияПредставление = СписокОперацийПредставление(СписокОперацийПоступления);
	
	СписокОпераций            = Настройки.Получить("СписокОперацийОплаты");
	ИнициализироватьСписокОперацийОплаты();
	Если СписокОпераций <> Неопределено Тогда
		Для каждого Операция Из СписокОпераций Цикл
			Если Операция.Пометка Тогда
				ОперацияСписка = СписокОперацийОплаты.НайтиПоЗначению(Операция.Значение);
				Если ОперацияСписка <> Неопределено Тогда
					ОперацияСписка.Пометка = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	СписокОперацийОплатыПредставление = СписокОперацийПредставление(СписокОперацийОплаты);
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(Новый ОписаниеОповещения("ОбработкаОповещенияЗавершение", ЭтотОбъект, Новый Структура("ИмяСобытия", ИмяСобытия)), МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// ЭлектронноеВзаимодействие.ОбменСБанками
	ПараметрыСозданияФормыСпискаСП = ОбменСБанкамиКлиентСервер.ПараметрыСозданияФормыСписка();
	ПараметрыСозданияФормыСпискаСП.СписокДокументов.ИмяЭлемента = "СписокПлатежей";
	
	ОбменСБанкамиКлиент.ОбработатьОповещениеФормыСписка(ЭтотОбъект, ИмяСобытия, Параметр, Источник, ПараметрыСозданияФормыСпискаСП);
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками
	
	Если ИмяСобытия = "ОтправленоDirectBank" Тогда
		ОбработатьЗавершениеВыгрузкиПрямойОбмен(Параметр);
	КонецЕсли;
	
	ОбработкаОповещенияФрагмент(ИмяСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяСобытия = ДополнительныеПараметры.ИмяСобытия;
	
	ОбработкаОповещенияФрагмент(ИмяСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияФрагмент(Знач ИмяСобытия)
	
	ИменаСобытийОбновленияИтогов = Новый Массив;
	ИменаСобытийОбновленияИтогов.Добавить("Запись_СписаниеБезналичныхДенежныхСредств");
	ИменаСобытийОбновленияИтогов.Добавить("Запись_РасходныйКассовыйОрдер");
	ИменаСобытийОбновленияИтогов.Добавить("Запись_ПоступлениеБезналичныхДенежныхСредств");
	ИменаСобытийОбновленияИтогов.Добавить("Запись_ПриходныйКассовыйОрдер");
	ИменаСобытийОбновленияИтогов.Добавить("Запись_ОперацияПоПлатежнойКарте");
	ИменаСобытийОбновленияИтогов.Добавить("Запись_ЗаявкаНаРасходованиеДенежныхСредств");
	ИменаСобытийОбновленияИтогов.Добавить("Запись_РаспоряжениеНаПеремещениеДенежныхСредств");
	ИменаСобытийОбновленияИтогов.Добавить("Загрузка_ОбменСБанками");
	
	ИменаСобытийОбновленияСпискаКОплате = Новый Массив;
	ИменаСобытийОбновленияСпискаКОплате.Добавить("Запись_СписаниеБезналичныхДенежныхСредств");
	ИменаСобытийОбновленияСпискаКОплате.Добавить("Запись_РасходныйКассовыйОрдер");
	ИменаСобытийОбновленияСпискаКОплате.Добавить("Запись_ОперацияПоПлатежнойКарте");
	ИменаСобытийОбновленияСпискаКОплате.Добавить("Запись_ЗаявкаНаРасходованиеДенежныхСредств");
	ИменаСобытийОбновленияСпискаКОплате.Добавить("Запись_РаспоряжениеНаПеремещениеДенежныхСредств");
	
	ИменаСобытийОбновленияСпискаКПоступлению = Новый Массив;
	ИменаСобытийОбновленияСпискаКПоступлению.Добавить("Запись_ПоступлениеБезналичныхДенежныхСредств");
	ИменаСобытийОбновленияСпискаКПоступлению.Добавить("Запись_ПриходныйКассовыйОрдер");
	ИменаСобытийОбновленияСпискаКПоступлению.Добавить("Запись_ОперацияПоПлатежнойКарте");
	ИменаСобытийОбновленияСпискаКПоступлению.Добавить("Запись_РасходныйКассовыйОрдер");
	ИменаСобытийОбновленияСпискаКПоступлению.Добавить("Запись_СписаниеБезналичныхДенежныхСредств");
	
	ИменаСобытийОбновленияСпискаПлатежей = Новый Массив;
	ИменаСобытийОбновленияСпискаПлатежей.Добавить("Запись_СписаниеБезналичныхДенежныхСредств");
	ИменаСобытийОбновленияСпискаПлатежей.Добавить("Запись_РасходныйКассовыйОрдер");
	ИменаСобытийОбновленияСпискаПлатежей.Добавить("Запись_ПоступлениеБезналичныхДенежныхСредств");
	ИменаСобытийОбновленияСпискаПлатежей.Добавить("Запись_ПриходныйКассовыйОрдер");
	ИменаСобытийОбновленияСпискаПлатежей.Добавить("ОбновитьСостояниеОбменСБанками");
	
	Если ИменаСобытийОбновленияИтогов.Найти(ИмяСобытия) <> Неопределено Тогда
		ОбновитьИтоги();
	КонецЕсли;
	
	Если ИменаСобытийОбновленияСпискаКОплате.Найти(ИмяСобытия) <> Неопределено
		И (Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗаявкиКОплате
			Или Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗаказыКОплате) Тогда
		Элементы[СписокКОплате].Обновить();
	КонецЕсли;
	
	Если ИменаСобытийОбновленияСпискаКПоступлению.Найти(ИмяСобытия) <> Неопределено
		И Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКПоступлению Тогда
		Элементы.ЗаказыКПоступлению.Обновить();
	КонецЕсли;
	
	Если ИменаСобытийОбновленияСпискаПлатежей.Найти(ИмяСобытия) <> Неопределено
		И Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПлатежи Тогда
		Элементы.СписокПлатежей.Обновить();
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьСостояниеОбменСБанками" Тогда
		Элементы.СписокПлатежей.Обновить();
		Элементы.ДокументыВалютногоКонтроля.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура БанковскийСчетОтборПриИзменении(Элемент)
	
	БанковскийСчетОтборПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура БанковскийСчетОтборПриИзмененииСервер()
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОтборПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(,
		"Обработка.ЖурналДокументовБезналичныеПлатежи.Форма.ФормаСписка.ПриСменеСтраницы." + ТекущаяСтраница.Имя);
	
	СтраницыПриСменеСтраницыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СтраницыПриСменеСтраницыНаСервере()
	
	УстановитьОтборДинамическихСписков();
	
	ТекущаяСтраница = Элементы.Страницы.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.СтраницаПлатежи Тогда
		Элементы.СписокПлатежей.Обновить();
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаКПоступлению Тогда
		Элементы.ЗаказыКПоступлению.Обновить();
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЗаявкиКОплате Тогда
		Элементы.ЗаявкиКОплате.Обновить();
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЗаказыКОплате Тогда
		Элементы.ЗаказыКОплате.Обновить();
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаДокументыВалютногоКонтроля Тогда
		Элементы.ДокументыВалютногоКонтроля.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСписков

#Область ОбработчикиСобытийЭлементовСпискаПлатежей

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	Если НачалоПериода > КонецПериода И ЗначениеЗаполнено(КонецПериода) Тогда
		НачалоПериода = КонецПериода;
	КонецЕсли;
	
	ПериодПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	Если КонецПериода < НачалоПериода И ЗначениеЗаполнено(КонецПериода) Тогда
		КонецПериода = НачалоПериода;
	КонецЕсли;
	
	ПериодПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПериодПриИзмененииНаСервере()
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	Оповещение = Новый ОписаниеОповещения(
		"ВыбратьПериодЗавершение",
		ЭтотОбъект);
		
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(
		ЭтаФорма,
		Новый Структура("ДатаНачала, ДатаОкончания", "НачалоПериода", "КонецПериода"),
		Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Если Период <> Неопределено Тогда
		ПериодПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроведеноБанкомОтборПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПлатежейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	МассивСсылок = ПроверитьПолучитьВыделенныеВСпискеСсылки(ВыбраннаяСтрока);
	// ЭлектронноеВзаимодействие.ОбменСБанками
	ОбменСБанкамиКлиент.ПриВыбореСтрокиИзСпискаДокументов(Элемент, МассивСсылок[0], Поле, СтандартнаяОбработка);
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками

	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыВалютногоКонтроляВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	// ЭлектронноеВзаимодействие.ОбменСБанками
	ОбменСБанкамиКлиент.ПриВыбореСтрокиИзСпискаДокументов(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры


&НаКлиенте
Процедура СписокСкопировать(Команда)
	
	ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элементы.СписокПлатежей);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПлатежейПриАктивизацииСтроки(Элемент)
	
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПлатежейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Если Копирование Тогда
		ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элемент);
	Иначе
		СоздатьСписание(Команды.СоздатьСписаниеОплатаПоставщику);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПлатежейПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПлатежейПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элемент, Заголовок);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВспомогательныйСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Ссылка = Элемент.ТекущиеДанные.Ссылка;
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ПоказатьЗначение(, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовСпискаКПоступлению

&НаКлиенте
Процедура СписокОперацийКПоступлениюОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("Перечисление.ХозяйственныеОперации.Форма.ФормаВыбораОперации",
		Новый Структура("СписокОпераций, Заголовок", СписокОперацийПоступления, НСтр("ru = 'Основания платежа'")), Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийКПоступлениюОтборОчистка(Элемент, СтандартнаяОбработка)
	
	СписокОперацийПоступления.ЗаполнитьПометки(Ложь);
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийКПоступлениюОтборОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		
		СписокОперацийПоступления = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ПеречислениеСсылка.ОбластиПланированияПлатежей") Тогда
		
		Для Каждого ЭлементСписка Из СписокОперацийПоступления Цикл
			ЭлементСписка.Пометка = (ЭлементСписка.Значение = ВыбранноеЗначение);
		КонецЦикла;
	КонецЕсли;
	
	СписокОперацийПоступленияПредставление = СписокОперацийПредставление(СписокОперацийПоступления);
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСпискаКОплате

&НаКлиенте
Процедура ДатаПлатежаПриИзменении(Элемент)
	
	ДатаПлатежаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПлатежаПриИзмененииНаСервере()
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаКПоступлениюПриИзменении(Элемент)
	
	ДатаКПоступлениюПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДатаКПоступлениюПриИзмененииНаСервере()
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийКОплатеОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("Перечисление.ХозяйственныеОперации.Форма.ФормаВыбораОперации",
		Новый Структура("СписокОпераций", СписокОперацийОплаты), Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийКОплатеОтборОчистка(Элемент, СтандартнаяОбработка)
	
	СписокОперацийОплаты.ЗаполнитьПометки(Ложь);
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийКОплатеОтборОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		
		СписокОперацийОплаты = ВыбранноеЗначение;
	Иначе
		
		Для Каждого ЭлементСписка Из СписокОперацийОплаты Цикл
			ЭлементСписка.Пометка = (ЭлементСписка.Значение = ВыбранноеЗначение);
		КонецЦикла;
	КонецЕсли;
	
	СписокОперацийОплатыПредставление = СписокОперацийПредставление(СписокОперацийОплаты);
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСпискаДокументыВалютногоКонтроля

&НаКлиенте
Процедура ДокументыВалютногоКонтроляПриАктивизацииСтроки(Элемент)
	
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтаФорма, Элементы.СписокПлатежей);
	
КонецПроцедуры
// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

#Область СозданиеДокументов

&НаКлиенте
Процедура СоздатьПоступление(Команда)
	
	ИмяХозОперации = Прав(Команда.Имя, СтрДлина(Команда.Имя) - СтрДлина("СоздатьПоступление"));
	
	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("ХозяйственнаяОперация", НастройкиФормы.ХозОперацииПоступления[ИмяХозОперации]);
	СтруктураОтбор.Вставить("БанковскийСчет", БанковскийСчетОтбор);
	СтруктураОтбор.Вставить("Организация", Организация);
	СтруктураОтбор.Вставить("Валюта", ВалютаСчета);
	
	Если СтруктураОтбор.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СдачаДенежныхСредствВБанк") Тогда
		
		СтруктураПараметры = Новый Структура("Основание", СтруктураОтбор);
		ОткрытьФорму("Документ.РасходныйКассовыйОрдер.ФормаОбъекта", СтруктураПараметры, ЭтаФорма);
	Иначе
		ТипПлатежа = СоответствиеХозОперацийТипамПлатежей().Получить(НастройкиФормы.ХозОперацииПоступления[ИмяХозОперации]);
		Если ТипПлатежа <> Неопределено Тогда
			СтруктураОтбор.Вставить("ТипПлатежногоДокумента", ТипПлатежа);
			Если ТипПлатежа = ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ПлатежныйОрдер")
				Или ТипПлатежа = ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ИнкассовоеПоручение") Тогда
				СтруктураОтбор.Вставить("ПроведеноБанком", Истина);
			КонецЕсли;
		КонецЕсли;
		
		СтруктураПараметры = Новый Структура("Основание", СтруктураОтбор);
		ОткрытьФорму("Документ.ПоступлениеБезналичныхДенежныхСредств.ФормаОбъекта", СтруктураПараметры, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСписание(Команда)
	
	ИмяХозОперации = Прав(Команда.Имя, СтрДлина(Команда.Имя) - СтрДлина("СоздатьСписание"));
	
	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("ХозяйственнаяОперация", НастройкиФормы.ХозОперацииСписания[ИмяХозОперации]);
	СтруктураОтбор.Вставить("БанковскийСчет", БанковскийСчетОтбор);
	СтруктураОтбор.Вставить("Организация", Организация);
	СтруктураОтбор.Вставить("Валюта", ВалютаСчета);
	
	Если СтруктураОтбор.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка") Тогда
		
		СтруктураПараметры = Новый Структура("Основание", СтруктураОтбор);
		ОткрытьФорму("Документ.ПриходныйКассовыйОрдер.ФормаОбъекта", СтруктураПараметры, ЭтаФорма);
	Иначе
		ТипПлатежа = СоответствиеХозОперацийТипамПлатежей().Получить(НастройкиФормы.ХозОперацииСписания[ИмяХозОперации]);
		Если ТипПлатежа <> Неопределено Тогда
			СтруктураОтбор.Вставить("ТипПлатежногоДокумента", ТипПлатежа);
			Если ТипПлатежа = ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.БанковскийОрдер")
				Или ТипПлатежа = ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ПлатежныйОрдер")
				Или ТипПлатежа = ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ИнкассовоеПоручение") Тогда
				СтруктураОтбор.Вставить("ПроведеноБанком", Истина);
			КонецЕсли;
		КонецЕсли;
		
		СтруктураПараметры = Новый Структура("Основание", СтруктураОтбор);
		ОткрытьФорму("Документ.СписаниеБезналичныхДенежныхСредств.ФормаОбъекта", СтруктураПараметры, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСПД(Команда)
	
	ОткрытьФорму("Документ.СправкаОПодтверждающихДокументах.ФормаОбъекта");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСПДПомощник(Команда)
	
	ОткрытьФорму("Документ.СправкаОПодтверждающихДокументах.Форма.ПомощникСоздания");
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СписокПровести(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиДокументы(Элементы.СписокПлатежей, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОтменаПроведения(Команда)
	
	ОбщегоНазначенияУТКлиент.ОтменаПроведения(Элементы.СписокПлатежей, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПроведениеБанком(Команда)
	
	Строки = Элементы.СписокПлатежей.ВыделенныеСтроки;
	Ссылки = ПроверитьПолучитьВыделенныеВСпискеСсылки(Строки);
	Если Ссылки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоДок = Ссылки.Количество();
	Для Инд = 1 По КоличествоДок Цикл
		Если ТипЗнч(Ссылки[КоличествоДок - Инд]) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
			Или ТипЗнч(Ссылки[КоличествоДок - Инд]) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			Ссылки.Удалить(КоличествоДок - Инд);
		КонецЕсли;
	КонецЦикла;
	
	ОчиститьСообщения();
	
	Если Ссылки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Команда не может быть выполнена для указанного объекта!'"));
		Возврат;
	КонецЕсли;
	
	ПриУстановкеПроведенияБанком = Новый ОписаниеОповещения("ПриУстановкеПроведенияБанком", ЭтаФорма, Ссылки);
	ПоказатьВводДаты(ПриУстановкеПроведенияБанком, ТекущаяДата(), НСтр("ru = 'Укажите дату проведения банком'"), ЧастиДаты.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриУстановкеПроведенияБанком(ДатаПроведенияБанком, МассивДокументов) Экспорт
	
	Если ДатаПроведенияБанком <> Неопределено Тогда
		
		КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(
			МассивДокументов,
			"ПроведеноБанком",
			Новый Структура("ДатаПроведенияБанком", ДатаПроведенияБанком));
		
		Элементы.СписокПлатежей.Обновить();
		ОбновитьИтоги();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаВБанк(Команда)
	
	ОткрытьФорму("Обработка.КлиентБанк.Форма.ВыгрузкаВБанк",
		Новый Структура("БанковскийСчет", БанковскийСчетОтбор),
		Элементы.СписокПлатежей);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаВыписки(Команда)
	
	ОткрытьФорму("Обработка.КлиентБанк.Форма.ЗагрузкаВыписки",
		Новый Структура("БанковскийСчет", БанковскийСчетОтбор),
		Элементы.СписокПлатежей);
	
КонецПроцедуры

// ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой
&НаКлиенте
Процедура ЗагрузитьОплатыИзЯндексКассы(Команда)
	
	ОповещениеПолученияОперацийПоЯндексКассе = Новый ОписаниеОповещения("ОбработкаПолученияОперацийПоЯндексКассеЗавершение",
		ЭтотОбъект);
		
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("Период", Неопределено);
	ПараметрыЗагрузки.Вставить("Организация", Неопределено);
	ПараметрыЗагрузки.Вставить("СДоговором", Ложь);
		
	ИнтеграцияСЯндексКассойУТКлиент.НачатьЗагрузкуОперацийПоЯндексКассе(ПараметрыЗагрузки, ОповещениеПолученияОперацийПоЯндексКассе);
	
КонецПроцедуры
// Конец ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой

&НаКлиенте
Процедура ВедомостьПоДням(Команда)
	
	ПараметрыФормы = Новый Структура("Отбор, КлючНазначенияИспользования, КлючВарианта, СформироватьПриОткрытии, ВидимостьКомандВариантовОтчетов");
	ПараметрыФормы.СформироватьПриОткрытии = Истина;
	ПараметрыФормы.ВидимостьКомандВариантовОтчетов = Истина;
	
	ПараметрыФормы.КлючНазначенияИспользования = "ВедомостьПоДням";
	
	Отбор = Новый Структура;
	Если ЗначениеЗаполнено(НачалоПериода) Тогда
		Отбор.Вставить("ПериодОтчета", Новый СтандартныйПериод(НачалоПериода, КонецПериода));
	КонецЕсли;
	Если ЗначениеЗаполнено(БанковскийСчетОтбор) Тогда
		Отбор.Вставить("БанковскийСчет", БанковскийСчетОтбор);
		Отбор.Вставить("Валюта", ВалютаСчета);
		ПараметрыФормы.КлючВарианта = "ВедомостьПоДнямОдинСчет";
	Иначе
		ПараметрыФормы.КлючВарианта = "ВедомостьПоДням";
	КонецЕсли;
	ПараметрыФормы.Отбор = Отбор;
	
	ОткрытьФорму("Отчет.ВедомостьБезналичныхДенежныхСредств.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеПоРаспоряжению(Команда)
	
	ДенежныеСредстваКлиент.ОплатитьСтрокиГрафика(Элементы.ЗаказыКПоступлению, "ПоступлениеБезналичныхДенежныхСредств");
	
КонецПроцедуры

&НаКлиенте
Процедура Оплатить(Команда)
	
	ДенежныеСредстваКлиент.ОплатитьСтрокиГрафика(Элементы.ЗаказыКОплате, "СписаниеБезналичныхДенежныхСредств");
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьЗаявку(Команда)
	
	ДенежныеСредстваКлиент.ОплатитьСтрокиГрафика(Элементы.ЗаявкиКОплате, "СписаниеБезналичныхДенежныхСредств");
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.СписокПлатежей);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.СписокПлатежей, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.СписокПлатежей);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.СписокПлатежей);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокУстановитьСнятьПометкуУдаления(Команда)
	
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элементы.СписокПлатежей, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДиректБанкНажатие(Элемент)
	
	ОтборДиректБанкНажатиеНаСервере(Элемент.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ОтборДиректБанкНажатиеНаСервере(ИмяЭлемента)
	
	ОтборСостоянияДиректБанк.Очистить();
	
	Если ИмяЭлемента = "НадписьДиректБанкНеОтправлен" Тогда
		ОтборСостоянияДиректБанк.Добавить(Перечисления.СостоянияОбменСБанками.НеСформирован);
		ОтборСостоянияДиректБанк.Добавить(Перечисления.СостоянияОбменСБанками.НаПодписи);
		ОтборСостоянияДиректБанк.Добавить(Перечисления.СостоянияОбменСБанками.ТребуетсяОтправка);
		ОтборСостоянияДиректБанк.Добавить(Неопределено);
	ИначеЕсли ИмяЭлемента = "НадписьДиректБанкСОшибкой" Тогда
		ОтборСостоянияДиректБанк.Добавить(Перечисления.СостоянияОбменСБанками.Отклонен);
	ИначеЕсли ИмяЭлемента = "НадписьДиректБанкОбрабатываетсяБанком" Тогда
		ОтборСостоянияДиректБанк.Добавить(Перечисления.СостоянияОбменСБанками.ОжидаетсяИзвещениеОПолучении);
		ОтборСостоянияДиректБанк.Добавить(Перечисления.СостоянияОбменСБанками.ОжидаетсяИсполнение);
	ИначеЕсли ИмяЭлемента = "НадписьДиректБанкПодтвержден" Тогда
		ОтборСостоянияДиректБанк.Добавить(Перечисления.СостоянияОбменСБанками.ПлатежИсполнен);
	КонецЕсли;
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ПисьмаВБанк(Команда)
	
	ОткрытьФорму("Документ.ПисьмоОбменСБанками.ФормаСписка",, ЭтотОбъект);
	
КонецПроцедуры

// ЭлектронноеВзаимодействие.ОбменСБанками

&НаКлиенте
Процедура Подключаемый_ВыполнитьСинхронизациюДиректБанк(Команда)
	
	Если ЗначениеЗаполнено(БанковскийСчетОтбор) Тогда
		ПараметрыБанковскогоСчета = ПараметрыБанковскогоСчета(БанковскийСчетОтбор);
		ОбменСБанкамиКлиент.СинхронизироватьСБанком(ПараметрыБанковскогоСчета.Владелец, ПараметрыБанковскогоСчета.Банк);
	Иначе
		ОбменСБанкамиКлиент.СинхронизироватьСБанком();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьСобытиеДиректБанк(
	Параметр1 = Неопределено,
	Параметр2 = Неопределено,
	Параметр3 = Неопределено)
	
	ОбменСБанкамиКлиент.ОбработатьСобытиеНаФормеСписка(Параметр1, Параметр2, Параметр3)
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСБанками

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказыКПоступлениюДатаПлатежа.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаказыКПоступлению.ДатаПлатежа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = НачалоДня(ТекущаяДатаСеанса());
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаявкиКОплатеДатаПлатежа.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаявкиКОплате.ДатаПлатежа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = НачалоДня(ТекущаяДатаСеанса());
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказыКОплатеДатаПлатежа.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаказыКОплате.ДатаПлатежа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = НачалоДня(ТекущаяДатаСеанса());
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРеквизиты()
	
	ИспользоватьНачислениеЗарплаты                   = Константы.ИспользоватьНачислениеЗарплаты.Получить();
	ИспользоватьЗаявкиНаРасходованиеДенежныхСредств  = ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств");
	ИспользоватьПрямойОбменСБанком                   = ПолучитьФункциональнуюОпцию("ИспользоватьОбменСБанками");
	НесколькоРасчетныхСчетов                         = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов");
	ИспользоватьСчетаНаОплату                        = ПолучитьФункциональнуюОпцию("ИспользоватьСчетаНаОплатуКлиентам");
	ИспользоватьВалютныеПлатежи                      = ПолучитьФункциональнуюОпцию("ИспользоватьВалютныеПлатежи");
	
	Если ИспользоватьЗаявкиНаРасходованиеДенежныхСредств Тогда
		СписокКОплате = "ЗаявкиКОплате";
	Иначе
		СписокКОплате = "ЗаказыКОплате";
	КонецЕсли;
	
	Если Не НесколькоРасчетныхСчетов Тогда
		БанковскийСчетОтбор = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Неопределено);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НачалоПериода)
		Или Не ЗначениеЗаполнено(КонецПериода) Тогда
		НачалоПериода = НачалоДня(ТекущаяДатаСеанса());
		КонецПериода = КонецДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	СтандартнаяДата = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоСледующегоМесяца);
	ДатаКОплате = СтандартнаяДата.Дата;
	
	Если Не ЗначениеЗаполнено(ПроведеноБанкомОтбор) Тогда
		ПроведеноБанкомОтбор = "ВсеПлатежи";
	КонецЕсли;
	
	ОписаниеОтборов = Новый Соответствие;
	ОписаниеОтборов.Вставить("Организация", Тип("СправочникСсылка.Организации"));
	УправлениеДоступом.НастроитьОтборыДинамическогоСписка(СписокПлатежей, ОписаниеОтборов);
	УправлениеДоступом.НастроитьОтборыДинамическогоСписка(ЗаказыКПоступлению, ОписаниеОтборов);
	
	СписокПлатежей.Параметры.УстановитьЗначениеПараметра("ИдОбъектаПоступлениеБезналичныхДС",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПоступлениеБезналичныхДенежныхСредств"));
	СписокПлатежей.Параметры.УстановитьЗначениеПараметра("ИдОбъектаСписаниеБезналичныхДС",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.СписаниеБезналичныхДенежныхСредств"));
	СписокПлатежей.Параметры.УстановитьЗначениеПараметра("ИдОбъектаПКО",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПриходныйКассовыйОрдер"));
	СписокПлатежей.Параметры.УстановитьЗначениеПараметра("ИдОбъектаРКО",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.РасходныйКассовыйОрдер"));
		
	ИнициализироватьСписокОперацийПоступления();
	ИнициализироватьСписокОперацийОплаты();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	ВидимостьЭлементов = Новый Соответствие;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("СписокПлатежейВалюта");
	МассивЭлементов.Добавить("ЗаказыКПоступлениюВалюта");
	МассивЭлементов.Добавить("ЗаявкиКОплатеВалюта");
	МассивЭлементов.Добавить("ЗаказыКОплатеВалюта");
	ВидимостьЭлементов.Вставить(МассивЭлементов, ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют"));
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("СтраницаЗаявкиКОплате");
	ВидимостьЭлементов.Вставить(МассивЭлементов, ИспользоватьЗаявкиНаРасходованиеДенежныхСредств);
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("СтраницаЗаказыКОплате");
	ВидимостьЭлементов.Вставить(МассивЭлементов, Не ИспользоватьЗаявкиНаРасходованиеДенежныхСредств);
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("БанковскийСчетОтбор");
	МассивЭлементов.Добавить("БанковскийСчет");
	МассивЭлементов.Добавить("ЗаказыКПоступлениюБанковскийСчет");
	МассивЭлементов.Добавить("ЗаявкиКОплатеБанковскийСчет");
	МассивЭлементов.Добавить("ЗаказыКОплатеБанковскийСчет");
	ВидимостьЭлементов.Вставить(МассивЭлементов, НесколькоРасчетныхСчетов);
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("СтраницаДокументыВалютногоКонтроля");
	ВидимостьЭлементов.Вставить(МассивЭлементов, ИспользоватьВалютныеПлатежи);
	
	// ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой
	ЕстьПравоЗагрузкиОплатИзЯндексКассы = (Пользователи.РолиДоступны("ВыполнениеОбменовСЯндексКассой") ИЛИ Пользователи.ЭтоПолноправныйПользователь())
		И ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСЯндексКассой");
	ВидимостьЭлементов.Вставить("ЗагрузитьОплатыИзЯндексКассы", ЕстьПравоЗагрузкиОплатИзЯндексКассы);
	// Конец ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой
	
	Для Каждого ЭлементСоответствия Из ВидимостьЭлементов Цикл
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
			Элементы,
			ЭлементСоответствия.Ключ,
			"Видимость",
			ЭлементСоответствия.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКомандыСозданияДокументов()
	
	ИспользоватьОплатуПлатежнымиКартами                 = ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами");
	ИспользоватьПередачиТоваровМеждуОрганизациями       = ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями");
	ИспользоватьНесколькоСчетов                         = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов");
	ИспользоватьКредитыДепозиты                         = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов");
	ИспользоватьНесколькоВалют                          = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	ИспользоватьОбособленныеПодразделения               = ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс");
	ИспользоватьИмпортныеЗакупки                        = ПолучитьФункциональнуюОпцию("ИспользоватьИмпортныеЗакупки");
	ИспользоватьЗаймыСотрудникам                        = Не ПолучитьФункциональнуюОпцию("УправлениеТорговлей");
	
	ХозОперацииПоФО = Новый Соответствие;
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте,              ИспользоватьОплатуПлатежнымиКартами);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации,  ИспользоватьПередачиТоваровМеждуОрганизациями);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств,              ИспользоватьОбособленныеПодразделения);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета,        ИспользоватьНесколькоСчетов);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам,           ИспользоватьКредитыДепозиты);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам,          ИспользоватьКредитыДепозиты);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным,     ИспользоватьКредитыДепозиты);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.КонвертацияВалюты,                              ИспользоватьНесколькоВалют);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации,      ИспользоватьПередачиТоваровМеждуОрганизациями);
	
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ПеречислениеТаможне,                            ИспользоватьИмпортныеЗакупки);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию,        ИспользоватьПередачиТоваровМеждуОрганизациями);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств,              ИспользоватьОбособленныеПодразделения);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет,        ИспользоватьНесколькоСчетов);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ОплатаПоКредитам,                               ИспользоватьКредитыДепозиты);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты,                         ИспользоватьКредитыДепозиты);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ВыдачаЗаймов,                                   ИспользоватьКредитыДепозиты);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику,                          ИспользоватьЗаймыСотрудникам);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ПогашениеЗаймаСотрудником,                      ИспользоватьЗаймыСотрудникам);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию,       ИспользоватьПередачиТоваровМеждуОрганизациями);
	
	
	НастройкиФормы = Новый Структура;
	
	// Поступление
	ХозОперацииПоступления = Новый Соответствие;
	
	ГруппыОпераций = Новый Массив;
	
	Операции = Новый СписокЗначений;
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте, НСтр("ru= 'Поступление оплаты по эквайрингу'") );
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации, НСтр("ru= 'Поступление от другой организации'"));
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств, НСтр("ru= 'Передача между организацией и филиалом'") );
	ГруппыОпераций.Добавить(Операции); // Оплата
	
	Операции = Новый СписокЗначений;
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета, НСтр("ru= 'Поступление с другого счета'"));
	Если ПравоДоступа("Изменение", Метаданные.Документы.РасходныйКассовыйОрдер) Тогда
		Операции.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк, НСтр("ru= 'Сдача наличных в банк'"));
	КонецЕсли;
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет, НСтр("ru= 'Инкассация в банк'"));
	ГруппыОпераций.Добавить(Операции); // Перемещения
	
	Операции = Новый СписокЗначений;
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам, НСтр("ru= 'Поступление по кредитам и займам полученным'"));
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам, НСтр("ru= 'Поступление по депозитам'"));
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным, НСтр("ru= 'Погашение займа контрагентом'"));
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПогашениеЗаймаСотрудником, НСтр("ru= 'Погашение займа сотрудником'"));
	ГруппыОпераций.Добавить(Операции); // Кредиты, депозиты
	
	Операции = Новый СписокЗначений;
	Операции.Добавить(Перечисления.ХозяйственныеОперации.КонвертацияВалюты);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств, НСтр("ru= 'Прочее поступление'"));
	ГруппыОпераций.Добавить(Операции); // Прочее
	
	Операции = Новый СписокЗначений;
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика, НСтр("ru= 'Возврат от поставщика'"));
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника, НСтр("ru= 'Возврат от подотчетника'"));
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации, НСтр("ru= 'Возврат от другой организации'"));
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ВозвратНеперечисленнойЗарплатыПоЗарплатномуПроекту);
	ГруппыОпераций.Добавить(Операции); // Возвраты
	
	инд = 1;
	Для каждого ГруппаОпераций Из ГруппыОпераций Цикл
		
		ГруппаКоманд = Элементы.Вставить("ГруппаСоздатьПоступление" + Строка(инд), Тип("ГруппаФормы"), Элементы.СписокСоздатьПоступление);
		ГруппаКоманд.Вид = ВидГруппыФормы.ГруппаКнопок;
		инд = инд + 1;
		
		Для каждого Операция Из ГруппаОпераций Цикл
			
			ОперацияВключена = Истина;
			ИспользованиеХО = ХозОперацииПоФО.Получить(Операция.Значение);
			Если ИспользованиеХО <> Неопределено Тогда
				ОперацияВключена = ИспользованиеХО;
			КонецЕсли;
			
			Если ОперацияВключена Тогда
				ИмяХозОперации = ОбщегоНазначения.ИмяЗначенияПеречисления(Операция.Значение);
				ХозОперацииПоступления.Вставить(ИмяХозОперации, Операция.Значение);
				
				КомандаСоздатьДокумент = Команды.Добавить("СоздатьПоступление" + ИмяХозОперации);
				КомандаСоздатьДокумент.Действие = "СоздатьПоступление";
				КомандаСоздатьДокумент.Заголовок = ?(ЗначениеЗаполнено(Операция.Представление), Операция.Представление, Строка(Операция.Значение));
				
				ЭлементСоздатьДокумент = Элементы.Вставить("СоздатьПоступление" + ИмяХозОперации, Тип("КнопкаФормы"), ГруппаКоманд);
				ЭлементСоздатьДокумент.ИмяКоманды = КомандаСоздатьДокумент.Имя;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	НастройкиФормы.Вставить("ХозОперацииПоступления", ХозОперацииПоступления);
	
	// Списание
	ХозОперацииСписания = Новый Соответствие;
	
	ГруппыОпераций = Новый Массив;
	
	Операции = Новый СписокЗначений;
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику, НСтр("ru= 'Выдача подотчетнику'"));
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию, НСтр("ru= 'Оплата другой организации'"));
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств, НСтр("ru= 'Передача между организацией и филиалом'"));
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
	ГруппыОпераций.Добавить(Операции); // Оплата
	
	Операции = Новый СписокЗначений;
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет, НСтр("ru= 'Перечисление на другой счет'"));
	Если ПравоДоступа("Изменение", Метаданные.Документы.ПриходныйКассовыйОрдер) Тогда
		Операции.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка, НСтр("ru= 'Поступление наличных из банка'"));
	КонецЕсли;
	Операции.Добавить(Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств, НСтр("ru= 'Инкассация из банка'"));
	ГруппыОпераций.Добавить(Операции); // Перемещения
	
	Операции = Новый СписокЗначений;
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоКредитам);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаЗаймов, НСтр("ru = 'Выдача займа контрагенту'"));
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику, НСтр("ru = 'Выдача займа сотруднику'"));
	ГруппыОпераций.Добавить(Операции); // Кредиты, депозиты
	
	Операции = Новый СписокЗначений;
	Операции.Добавить(Перечисления.ХозяйственныеОперации.КонвертацияВалюты);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств, НСтр("ru= 'Прочий расход'"));
	ГруппыОпераций.Добавить(Операции); // Прочее
	
	Операции = Новый СписокЗначений;
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию, НСтр("ru= 'Возврат другой организации'"));
	ГруппыОпераций.Добавить(Операции); // Возвраты
	
	инд = 1;
	Для каждого ГруппаОпераций Из ГруппыОпераций Цикл
		
		ГруппаКоманд = Элементы.Вставить("ГруппаСоздатьСписание" + Строка(инд), Тип("ГруппаФормы"), Элементы.СписокСоздатьСписание);
		ГруппаКоманд.Вид = ВидГруппыФормы.ГруппаКнопок;
		инд = инд + 1;
		
		Для каждого Операция Из ГруппаОпераций Цикл
			
			ОперацияВключена = Истина;
			ИспользованиеХО = ХозОперацииПоФО.Получить(Операция.Значение);
			Если ИспользованиеХО <> Неопределено Тогда
				ОперацияВключена = ИспользованиеХО;
			КонецЕсли;
			
			Если ОперацияВключена Тогда
				ИмяХозОперации = ОбщегоНазначения.ИмяЗначенияПеречисления(Операция.Значение);
				ХозОперацииСписания.Вставить(ИмяХозОперации, Операция.Значение);
				
				КомандаСоздатьДокумент = Команды.Добавить("СоздатьСписание" + ИмяХозОперации);
				КомандаСоздатьДокумент.Действие = "СоздатьСписание";
				КомандаСоздатьДокумент.Заголовок = ?(ЗначениеЗаполнено(Операция.Представление), Операция.Представление, Строка(Операция.Значение));
				
				ЭлементСоздатьДокумент = Элементы.Вставить("СоздатьСписание" + ИмяХозОперации, Тип("КнопкаФормы"), ГруппаКоманд);
				ЭлементСоздатьДокумент.ИмяКоманды = КомандаСоздатьДокумент.Имя;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	НастройкиФормы.Вставить("ХозОперацииСписания", ХозОперацииСписания);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСписокОперацийОплаты()
	
	СписокОпераций = Новый СписокЗначений;
	
	Если ИспользоватьЗаявкиНаРасходованиеДенежныхСредств Тогда
		
		Операции = Перечисления.ХозяйственныеОперации;
		
		СписокОпераций.Добавить(Операции.ОплатаПоставщику);
		СписокОпераций.Добавить(Операции.ВозвратОплатыКлиенту);
		СписокОпераций.Добавить(Операции.ВыдачаДенежныхСредствПодотчетнику, НСтр("ru = 'Выдача подотчетнику'"));
		СписокОпераций.Добавить(Операции.ПеречислениеВБюджет, НСтр("ru = 'Перечисление налога'"));
		СписокОпераций.Добавить(Операции.ПеречислениеТаможне, НСтр("ru = 'Таможенный платеж'"));
		СписокОпераций.Добавить(Операции.КонвертацияВалюты);
		СписокОпераций.Добавить(Операции.ОплатаДенежныхСредствВДругуюОрганизацию, НСтр("ru = 'Оплата в другую организацию'"));
		СписокОпераций.Добавить(Операции.ВозвратДенежныхСредствВДругуюОрганизацию, НСтр("ru = 'Возврат в другую организацию'"));
		СписокОпераций.Добавить(Операции.ВнутренняяПередачаДенежныхСредств, НСтр("ru= 'Передача между организацией и филиалом'"));
		СписокОпераций.Добавить(Операции.ВыплатаЗарплаты);
		СписокОпераций.Добавить(Операции.ПрочиеРасходы);
		СписокОпераций.Добавить(Операции.ПрочаяВыдачаДенежныхСредств, НСтр("ru = 'Прочая выдача'"));
		СписокОпераций.Добавить(Операции.ОплатаПоКредитам);
		СписокОпераций.Добавить(Операции.ПеречислениеНаДепозиты);
		СписокОпераций.Добавить(Операции.ПеречислениеДенежныхСредствНаДругойСчет);
		СписокОпераций.Добавить(Операции.ПоступлениеДенежныхСредствИзБанка);
		СписокОпераций.Добавить(Операции.СнятиеНаличныхДенежныхСредств);
		
	Иначе
		
		СписокОпераций.Добавить(Перечисления.ОбластиПланированияПлатежей.РасчетыСПоставщиками);
		СписокОпераций.Добавить(Перечисления.ОбластиПланированияПлатежей.ВозвратыКлиентам);
		СписокОпераций.Добавить(Перечисления.ОбластиПланированияПлатежей.КредитыИлиЗаймыПолученные);
		СписокОпераций.Добавить(Перечисления.ОбластиПланированияПлатежей.Депозиты);
		СписокОпераций.Добавить(Перечисления.ОбластиПланированияПлатежей.ЗаймыВыданные);
		СписокОпераций.Добавить(Перечисления.ОбластиПланированияПлатежей.Лизинг);
	КонецЕсли;
	
	Для каждого Операция Из СписокОперацийОплаты Цикл
		Если Операция.Пометка Тогда
			ОперацияСписка = СписокОпераций.НайтиПоЗначению(Операция.Значение);
			Если ОперацияСписка <> Неопределено Тогда
				ОперацияСписка.Пометка = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СписокОперацийОплаты = СписокОпераций;
	
	Элементы.СписокОперацийКОплатеОтбор.СписокВыбора.Очистить();
	Для каждого Операция Из СписокОперацийОплаты Цикл
		Элементы.СписокОперацийКОплатеОтбор.СписокВыбора.Добавить(Операция.Значение, Операция.Представление);
	КонецЦикла;
	Элементы.ЗаказыСписокОперацийКОплатеОтбор.СписокВыбора.Очистить();
	Для каждого Операция Из СписокОперацийОплаты Цикл
		Элементы.ЗаказыСписокОперацийКОплатеОтбор.СписокВыбора.Добавить(Операция.Значение, Операция.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСписокОперацийПоступления()
	
	СписокОперацийПоступления.Очистить();
	СписокОперацийПоступления.Добавить(Перечисления.ОбластиПланированияПлатежей.РасчетыСКлиентами);
	СписокОперацийПоступления.Добавить(Перечисления.ОбластиПланированияПлатежей.ВозвратыОтПоставщиков);
	СписокОперацийПоступления.Добавить(Перечисления.ОбластиПланированияПлатежей.ДенежныеСредстваВПути);
	СписокОперацийПоступления.Добавить(Перечисления.ОбластиПланированияПлатежей.КредитыИлиЗаймыПолученные);
	СписокОперацийПоступления.Добавить(Перечисления.ОбластиПланированияПлатежей.Депозиты);
	СписокОперацийПоступления.Добавить(Перечисления.ОбластиПланированияПлатежей.ЗаймыВыданные);
	
	Элементы.СписокОперацийКПоступлениюОтбор.СписокВыбора.Очистить();
	Для каждого Операция Из СписокОперацийПоступления Цикл
		Элементы.СписокОперацийКПоступлениюОтбор.СписокВыбора.Добавить(Операция.Значение, Операция.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СоответствиеХозОперацийТипамПлатежей()
	
	СоответствиеХОТипамПлатежей = Новый Соответствие;
	СоответствиеХОТипамПлатежей.Вставить(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств"),
		ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ПлатежныйОрдер"));
	СоответствиеХОТипамПлатежей.Вставить(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте"),
		ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ПлатежныйОрдер"));
	СоответствиеХОТипамПлатежей.Вставить(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет"),
		ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ПлатежныйОрдер"));
	
	Возврат СоответствиеХОТипамПлатежей;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборДинамическихСписков()
	
	Если ЗначениеЗаполнено(БанковскийСчетОтбор) Тогда
		РеквизитыСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчетОтбор);
		Организация = РеквизитыСчета.Организация;
		ВалютаСчета = РеквизитыСчета.Валюта;
		Элементы.НадписьБанковскийСчет.Заголовок =
			СтрШаблон(НСтр("ru = 'Банковский счет %1, %2'"), Строка(ВалютаСчета), СокрЛП(БанковскийСчетОтбор));
	Иначе
		Организация = Неопределено;
		ВалютаСчета = Неопределено;
		Элементы.НадписьБанковскийСчет.Заголовок = НСтр("ru = '<Банковский счет не задан>'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НачалоПериода) И Не ЗначениеЗаполнено(КонецПериода) Тогда
		Элементы.НадписьПериодВыписки.Заголовок = НСтр("ru = 'За период <без ограничения>'")
	Иначе
		Элементы.НадписьПериодВыписки.Заголовок =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'За период с %1 по %2'"),
				?(ЗначениеЗаполнено(НачалоПериода), Формат(НачалоПериода, "ДЛФ=Д"), НСтр("ru = '<без ограничения>'")),
				?(ЗначениеЗаполнено(КонецПериода), Формат(КонецПериода, "ДЛФ=Д"), НСтр("ru = '<без ограничения>'")));
	КонецЕсли;
	
	// Общие отборы
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Организация);
	
	Если ЗначениеЗаполнено(Организация)
		И ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ОбособленноеПодразделение
		|	И Организации.ГоловнаяОрганизация = &Организация
		|	И Организации.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию
		|");
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокОрганизаций.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	СписокСчетов = Новый СписокЗначений;
	СписокСчетов.Добавить(БанковскийСчетОтбор);
	СписокСчетов.Добавить(Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка());
	СписокСчетов.Добавить(Неопределено);
	
	МассивСписков = Новый Массив;
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПлатежи Тогда
		МассивСписков.Добавить("СписокПлатежей");
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКПоступлению Тогда
		МассивСписков.Добавить("ЗаказыКПоступлению");
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗаказыКОплате
		Или Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗаявкиКОплате Тогда
		МассивСписков.Добавить(СписокКОплате);
	КонецЕсли;
	
	Для каждого ИмяСписка Из МассивСписков Цикл
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ЭтаФорма[ИмяСписка],
			"Организация",
			СписокОрганизаций,
			ВидСравненияКомпоновкиДанных.ВСписке,,
			ЗначениеЗаполнено(Организация));
			
		Если ИмяСписка = "СписокПлатежей" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокПлатежей, "БанковскийСчет", БанковскийСчетОтбор, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(БанковскийСчетОтбор));
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				ЭтаФорма[ИмяСписка],
				"БанковскийСчет",
				СписокСчетов,
				ВидСравненияКомпоновкиДанных.ВСписке,,
				ЗначениеЗаполнено(БанковскийСчетОтбор));
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ЭтаФорма[ИмяСписка],
			"КонтрагентПредставление",
			КонтрагентПредставление,
			ВидСравненияКомпоновкиДанных.Содержит,,
			ЗначениеЗаполнено(КонтрагентПредставление));
	КонецЦикла;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПлатежи Тогда
		// Список платежей
		СписокПлатежей.Параметры.УстановитьЗначениеПараметра("НачалоПериода", НачалоПериода);
		СписокПлатежей.Параметры.УстановитьЗначениеПараметра("КонецПериода", ?(ЗначениеЗаполнено(КонецПериода), КонецДня(КонецПериода), КонецПериода));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокПлатежей,
			"ПроведеноБанком",
			?(ПроведеноБанкомОтбор = "Проведенные", Истина, Ложь),
			ВидСравненияКомпоновкиДанных.Равно,
			,
			ПроведеноБанкомОтбор <> "ВсеПлатежи");
	
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗаказыКОплате
		Или Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗаявкиКОплате Тогда
		
		Если ИспользоватьЗаявкиНаРасходованиеДенежныхСредств Тогда
			
			ВыбранныеОперации = Новый Массив;
			Для Каждого ЭлементСписка Из СписокОперацийОплаты Цикл
				Если ЭлементСписка.Пометка Тогда
					ВыбранныеОперации.Добавить(ЭлементСписка.Значение);
				КонецЕсли;
			КонецЦикла;
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				ЭтаФорма[СписокКОплате],
				"ХозяйственнаяОперация",
				ВыбранныеОперации,
				ВидСравненияКомпоновкиДанных.ВСписке,,
				ВыбранныеОперации.Количество());
		Иначе
			ОбластиПланирования = Новый Массив;
			Для каждого ЭлементСписка Из СписокОперацийОплаты Цикл
				Если ЭлементСписка.Пометка Тогда
					ОбластиПланирования.Добавить(ЭлементСписка.Значение);
				КонецЕсли;
			КонецЦикла;
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				ЗаказыКОплате,
				"ОбластьПланирования",
				ОбластиПланирования,
				ВидСравненияКомпоновкиДанных.ВСписке,,
				ОбластиПланирования.Количество());
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКПоступлению Тогда
	
		ОбластиПланирования = Новый Массив;
		Для каждого ЭлементСписка Из СписокОперацийПоступления Цикл
			Если ЭлементСписка.Пометка Тогда
				ОбластиПланирования.Добавить(ЭлементСписка.Значение);
			КонецЕсли;
		КонецЦикла;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ЗаказыКПоступлению,
			"ОбластьПланирования",
			ОбластиПланирования,
			ВидСравненияКомпоновкиДанных.ВСписке,,
			ОбластиПланирования.Количество());
			
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДокументыВалютногоКонтроля Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ДокументыВалютногоКонтроля,
			"Организация",
			СписокОрганизаций,
			ВидСравненияКомпоновкиДанных.ВСписке,,
			ЗначениеЗаполнено(Организация));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ДокументыВалютногоКонтроля,
			"Состояние",
			ОтборСостоянияДиректБанк,
			ВидСравненияКомпоновкиДанных.ВСписке,,
			ОтборСостоянияДиректБанк.Количество());
		
		ОбновитьНадписиОтборовВалюногоКонтроля();
	КонецЕсли;
	
	Граница = ?(ЗначениеЗаполнено(ДатаКПоступлению), КонецДня(ДатаКПоступлению), Дата('39990101'));
	ЗаказыКПоступлению.Параметры.УстановитьЗначениеПараметра("ДатаПлатежа", Граница);
	
	Граница = ?(ЗначениеЗаполнено(ДатаКОплате), КонецДня(ДатаКОплате), Дата('39990101'));
	Если ИспользоватьЗаявкиНаРасходованиеДенежныхСредств Тогда
		ЗаявкиКОплате.Параметры.УстановитьЗначениеПараметра("ДатаПлатежа", Граница);
	Иначе
		ЗаказыКОплате.Параметры.УстановитьЗначениеПараметра("ДатаПлатежа", Граница);
	КонецЕсли;
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтоги()
	
	ОбновитьОстаткиДенежныхСредств();
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПлатежи Тогда
		ОбновитьОстаткиИОбороты();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКПоступлению Тогда
		ОбновитьКПоступлению();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗаказыКОплате
		Или Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗаявкиКОплате Тогда
		ОбновитьКОплате();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОстаткиДенежныхСредств()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДенежныеСредстваБезналичные.СуммаОстаток        КАК ТекущийОстаток,
	|	ДенежныеСредстваБезналичные.КСписаниюОстаток    КАК КСписаниюВсего
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные.Остатки(, БанковскийСчет = &БанковскийСчет) КАК ДенежныеСредстваБезналичные
	|";
	
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчетОтбор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТекущийОстаток = Выборка.ТекущийОстаток;
		КСписаниюВсего = Выборка.КСписаниюВсего;
	Иначе
		ТекущийОстаток = 0;
		КСписаниюВсего = 0;
	КонецЕсли;
	
	ДоступноВсего = ТекущийОстаток - КСписаниюВсего;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОстаткиИОбороты()
	
	НачальныйОстаток = 0;
	Поступление = 0;
	Списание = 0;
	КонечныйОстаток = 0;
	
	Если ЗначениеЗаполнено(КонецПериода) И НачалоПериода > КонецПериода Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДенежныеСредстваБезналичные.СуммаНачальныйОстаток КАК НачальныйОстаток,
	|	ДенежныеСредстваБезналичные.СуммаПриход КАК Поступление,
	|	ДенежныеСредстваБезналичные.СуммаРасход КАК Списание,
	|	ДенежныеСредстваБезналичные.СуммаКонечныйОстаток КАК КонечныйОстаток
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные.ОстаткиИОбороты(&НачалоПериода, &КонецПериода,,, БанковскийСчет = &БанковскийСчет) КАК ДенежныеСредстваБезналичные
	|";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",
		?(ЗначениеЗаполнено(КонецПериода), Новый Граница(КонецДня(КонецПериода), ВидГраницы.Включая), КонецПериода));
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчетОтбор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НачальныйОстаток = Выборка.НачальныйОстаток;
		Поступление = Выборка.Поступление;
		Списание = Выборка.Списание;
		КонечныйОстаток = Выборка.КонечныйОстаток;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКОплате()
	
	Если Не ЗначениеЗаполнено(БанковскийСчетОтбор) Тогда
		КОплатеВсего = 0;
		ДоступноМинусКОплате = 0;
		Возврат;
	КонецЕсли;
	
	СКД = Элементы[СписокКОплате].ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы[СписокКОплате].ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	Настройки.Структура.Очистить();
	
	ДетальныеЗаписи = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных")).Поле = Новый ПолеКомпоновкиДанных("СуммаКОплате");
	ПолеИтога = ФинансоваяОтчетностьСервер.НовыйРесурс(СКД, "СуммаКОплате");
	
	РезультатСКД = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СКД, Настройки);
	КОплатеВсего = РезультатСКД[0].СуммаКОплате;
	
	ДоступноМинусКОплате = ДоступноВсего - КОплатеВсего;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКПоступлению()
	
	Если Не ЗначениеЗаполнено(БанковскийСчетОтбор) Тогда
		КПоступлениюВсего = 0;
		Возврат;
	КонецЕсли;
	
	СКД = Элементы.ЗаказыКПоступлению.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы.ЗаказыКПоступлению.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	Настройки.Структура.Очистить();
	
	ДетальныеЗаписи = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных")).Поле = Новый ПолеКомпоновкиДанных("СуммаКОплате");
	ПолеИтога = ФинансоваяОтчетностьСервер.НовыйРесурс(СКД, "СуммаКОплате");
	
	РезультатСКД = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СКД, Настройки);
	КПоступлениюВсего = РезультатСКД[0].СуммаКОплате;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокОперацийПредставление(СписокОпераций)
	
	СписокОперацийПредставление = "";
	Для Каждого ЭлементСписка Из СписокОпераций Цикл
		Если ЭлементСписка.Пометка Тогда
			СписокОперацийПредставление = СписокОперацийПредставление
				+ ?(ЗначениеЗаполнено(СписокОперацийПредставление), ", ", "")
				+ ?(ЗначениеЗаполнено(ЭлементСписка.Представление), ЭлементСписка.Представление, ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокОперацийПредставление;
	
КонецФункции

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ПоступлениеБезналичныхДенежныхСредств.ПустаяСсылка"));
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.СписаниеБезналичныхДенежныхСредств.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Знач Оповещение, Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		Ссылка = МассивСсылок[0];
		Элементы.СписокПлатежей.ТекущаяСтрока = Ссылка;
		ПоказатьЗначение(Новый ОписаниеОповещения("ОбработатьШтрихкодыЗавершение", ЭтотОбъект, Новый Структура("Данные, Оповещение", Данные, Оповещение)), Ссылка);
		Возврат;
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
	ОбработатьШтрихкодыФрагмент(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодыЗавершение(ДополнительныеПараметры) Экспорт
	
	Данные = ДополнительныеПараметры.Данные;
	Оповещение = ДополнительныеПараметры.Оповещение;
	
	ОбработатьШтрихкодыФрагмент(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодыФрагмент(Знач Оповещение)
	
	ВыполнитьОбработкуОповещения(Оповещение);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыБанковскогоСчета(БанковскийСчет)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БанковскийСчет, "Владелец, Банк");
	
КонецФункции

&НаСервере
Процедура ОбработатьЗавершениеВыгрузкиПрямойОбмен(Платежи)
	
	ДенежныеСредстваСервер.ЗаписатьДатуВыгрузкиПлатежей(Платежи);
	
КонецПроцедуры

#КонецОбласти

// ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой
#Область ОбработкаПолученияОперацийПоЯндексКассе

&НаКлиенте
Процедура ОбработкаПолученияОперацийПоЯндексКассеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда  // отменено пользователем
		Возврат;
	КонецЕсли;
	
	Если Результат.Свойство("Сообщения") Тогда 
		Для Каждого Сообщение из Результат.Сообщения Цикл 
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда 
		Возврат;
	КонецЕсли;	
		
	ЗагруженныеОперации = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	СчетчикДокументов = 0;
	
	Если ЗагруженныеОперации <> Неопределено Тогда
		Для каждого ЭлементКоллекции Из ЗагруженныеОперации Цикл
			СчетчикДокументов = СчетчикДокументов + ЗагруженныеОперации[ЭлементКоллекции.Ключ];
		КонецЦикла;	
	КонецЕсли;
			
	ТекстСообщения = ?(СчетчикДокументов > 0, НСтр("ru = 'Операций по Яндекс.Кассе загружено: %1'")
		, НСтр("ru = 'Новых операций по Яндекс.Кассе не было'"));
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстСообщения, СчетчикДокументов);
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Загрузка завершена'"),
		"e1cib/list/Документ.ПоступлениеБезналичныхДенежныхСредств",
		ТекстСообщения);
	
	Оповестить("ЗавершенаЗагрузкаОперацииПоЯндексКассе");
	
	Если СчетчикДокументов > 0 Тогда 
		ОповеститьОбИзменении(Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств"));
	КонецЕсли;
		
КонецПроцедуры 

#КонецОбласти
// Конец ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой

&НаСервере
Процедура ОбновитьНадписиОтборовВалюногоКонтроля()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Элементы.НадписьДиректБанкНеОтправлен.Гиперссылка                  = (ОтборСостоянияДиректБанк.НайтиПоЗначению(Перечисления.СостоянияОбменСБанками.НеСформирован) = Неопределено);
	Элементы.НадписьДиректБанкСОшибкой.Гиперссылка                     = (ОтборСостоянияДиректБанк.НайтиПоЗначению(Перечисления.СостоянияОбменСБанками.Отклонен) = Неопределено);
	Элементы.НадписьДиректБанкОбрабатываетсяБанком.Гиперссылка         = (ОтборСостоянияДиректБанк.НайтиПоЗначению(Перечисления.СостоянияОбменСБанками.ОжидаетсяИсполнение) = Неопределено);
	Элементы.НадписьДиректБанкПодтвержден.Гиперссылка                  = (ОтборСостоянияДиректБанк.НайтиПоЗначению(Перечисления.СостоянияОбменСБанками.ПлатежИсполнен) = Неопределено);
	
	Элементы.НадписьДиректБанкПоказатьВсе.Гиперссылка = ОтборСостоянияДиректБанк.Количество();
	Если ОтборСостоянияДиректБанк.Количество() Тогда
		Элементы.НадписьДиректБанкПоказатьВсе.ЦветТекста = ЦветаСтиля.ЦветГиперссылки;
	Иначе
		Элементы.НадписьДиректБанкПоказатьВсе.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
	КонецЕсли;
	
	СКД = Элементы.ДокументыВалютногоКонтроля.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы.ДокументыВалютногоКонтроля.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(Настройки.Отбор, "Состояние",,, ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, Настройки);
	
	ЗапросСписка = Новый СхемаЗапроса;
	ЗапросСписка.УстановитьТекстЗапроса(МакетКомпоновки.НаборыДанных.НаборДанныхДинамическогоСписка.Запрос);
	
	Пакет = ЗапросСписка.ПакетЗапросов[0];
	
	ВыбираемыеПоля = Пакет.Операторы[0].ВыбираемыеПоля;
	ВыбираемыеПоля.Очистить();
	
	ШаблонПоляСостояние = "
	|ЕСТЬNULL(СУММА(ВЫБОР
	|		КОГДА ЕСТЬNULL(СостоянияОбменСБанками.Состояние, НЕОПРЕДЕЛЕНО) В %1
	|		ТОГДА 1
	|		ИНАЧЕ 0
	|		КОНЕЦ), 0)
	|";
	
	ВыбираемыеПоля.Добавить(СтрШаблон(ШаблонПоляСостояние,
		"(ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.НеСформирован),
		|ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.НаПодписи),
		|ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ТребуетсяОтправка),
		|НЕОПРЕДЕЛЕНО)"));
	ВыбираемыеПоля.Добавить(СтрШаблон(ШаблонПоляСостояние,
		"(ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.Отклонен))"));
	ВыбираемыеПоля.Добавить(СтрШаблон(ШаблонПоляСостояние,
		"(ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ОжидаетсяИзвещениеОПолучении),
		|ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ОжидаетсяИсполнение))"));
	ВыбираемыеПоля.Добавить(СтрШаблон(ШаблонПоляСостояние,
		"(ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ПлатежИсполнен))"));
	
	Пакет.Колонки[0].Псевдоним = "КоличествоНеОтправлен";
	Пакет.Колонки[1].Псевдоним = "КоличествоСОшибкой";
	Пакет.Колонки[2].Псевдоним = "КоличествоОбрабатываетсяБанком";
	Пакет.Колонки[3].Псевдоним = "КоличествоПодтвержден";
	
	Запрос = Новый Запрос(ЗапросСписка.ПолучитьТекстЗапроса());
	Для каждого ПараметрМакета Из МакетКомпоновки.ЗначенияПараметров Цикл
		Запрос.УстановитьПараметр(ПараметрМакета.Имя, ПараметрМакета.Значение);
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Элементы.НадписьДиректБанкНеОтправлен.Заголовок    = СтрШаблон(НСтр("ru = 'Не отправлен (%1)'"), Выборка.КоличествоНеОтправлен);
	Элементы.НадписьДиректБанкСОшибкой.Заголовок       = СтрШаблон(НСтр("ru = 'С ошибкой отправки (%1)'"), Выборка.КоличествоСОшибкой);
	Элементы.НадписьДиректБанкОбрабатываетсяБанком.Заголовок =
		СтрШаблон(НСтр("ru = 'Обрабатывается банком (%1)'"), Выборка.КоличествоОбрабатываетсяБанком);
	Элементы.НадписьДиректБанкПодтвержден.Заголовок    = СтрШаблон(НСтр("ru = 'Подтвержден банком (%1)'"), Выборка.КоличествоПодтвержден);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПолучитьВыделенныеВСпискеСсылки(Строки)
	
	Если ТипЗнч(Строки) = Тип("Массив") Тогда
		ВыбранныеСтроки = Строки;
	Иначе
		ВыбранныеСтроки = Новый Массив;
		ВыбранныеСтроки.Добавить(Строки);
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	
	Для Итератор = 0 По ВыбранныеСтроки.Количество() - 1 Цикл
		Если ТипЗнч(ВыбранныеСтроки[Итератор]) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			МассивСсылок.Добавить(ВыбранныеСтроки[Итератор].Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСсылок;
	
КонецФункции

#КонецОбласти