
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//ВыбОтложенных=РегистрыСведений.ШМ_ОтложенныеЧеки.Выбрать();
	//СписокДобавленных=Новый СписокЗначений;
	//Пока ВыбОтложенных.Следующий() Цикл
	//	Если СписокДобавленных.НайтиПоЗначению(ВыбОтложенных.ИдентификаторЧека)=Неопределено Тогда
	//		СтрокаСписокОтложенных=СписокОтложенных.Добавить();
	//		СтрокаСписокОтложенных.ИдентификаторЧека=ВыбОтложенных.ИдентификаторЧека;
	//		СтрокаСписокОтложенных.Выполнен=Истина;
	//		СписокДобавленных.Добавить(ВыбОтложенных.ИдентификаторЧека);
	//	КонецЕсли;
	//	Если СписокДобавленных.Количество()=1 Тогда
	//		СтрокаТаблицаОтложенных=ТаблицаОтложенных.Добавить();
	//		СтрокаТаблицаОтложенных.ДатаВыполнения=ВыбОтложенных.ДатаВыполнения;
	//		СтрокаТаблицаОтложенных.Выполнен=ВыбОтложенных.Выполнен;
	//		СтрокаТаблицаОтложенных.ДатаЧека=ВыбОтложенных.ДатаЧека;
	//		СтрокаТаблицаОтложенных.Отбит=ВыбОтложенных.Отбит;
	//		СтрокаТаблицаОтложенных.Номенклатура=ВыбОтложенных.Номенклатура;
	//		СтрокаТаблицаОтложенных.Количество=ВыбОтложенных.Количество;
	//		СтрокаТаблицаОтложенных.Цена=ВыбОтложенных.Цена;
	//		СтрокаТаблицаОтложенных.Сумма=ВыбОтложенных.Сумма;
	//		СтрокаТаблицаОтложенных.Сотрудник=ВыбОтложенных.Сотрудник;
	//		СтрокаТаблицаОтложенных.НомерМашины=ВыбОтложенных.НомерМашины;
	//		СтрокаТаблицаОтложенных.СуммаБезСкидки=ВыбОтложенных.СуммаБезСкидки;
	//		СтрокаТаблицаОтложенных.СуммаСкидки=ВыбОтложенных.СуммаСкидки;
	//		СтрокаТаблицаОтложенных.Купон=ВыбОтложенных.Купон;
	//		СтрокаТаблицаОтложенных.Скидка=ВыбОтложенных.Скидка;
	//		СтрокаТаблицаОтложенных.Телефон=ВыбОтложенных.Телефон;
	//		СтрокаТаблицаОтложенных.Бирка=ВыбОтложенных.Бирка;
	//	КонецЕсли;
	//	Если ВыбОтложенных.Выполнен=Ложь Тогда
	//		СтрокаСписокОтложенных.Выполнен=Ложь;
	//	КонецЕсли;
	//КонецЦикла;
	//РежимВыборки="Все";
	
	НевыполненныеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОКНаСервере(ДатаОтложеногоЧека,НомерМашиныОтложенногоЧека)
	
		
	ВыбОтложенных=РегистрыСведений.ШМ_ОтложенныеЧеки.Выбрать();
	Пока ВыбОтложенных.Следующий() Цикл
		
		Если ДатаОтложеногоЧека=ВыбОтложенных.ДатаЧека Тогда
			Если СокрЛП(НомерМашиныОтложенногоЧека)=СокрЛП(ВыбОтложенных.НомерМашины) Тогда
				
				Если ВыбОтложенных.Отбит=Ложь Тогда
				
				МенЗаписиОтл=ВыбОтложенных.ПолучитьМенеджерЗаписи();
				МенЗаписиОтл.Восстановить=Истина;
				МенЗаписиОтл.Записать();
				
				КонецЕсли;
	
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуОтложенныхНаСервере(ИдентЧека)
	
	ТаблицаОтложенных.Очистить();
	
	//++Безроднов отбор по рабочему месту
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	//ТекущееРабочееМесто =  МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование;
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ШМ_ОтложенныеЧеки.ИдентификаторЧека КАК ИдентификаторЧека,
	//	|	ШМ_ОтложенныеЧеки.Выполнен КАК Выполнен,
	//	|	ШМ_ОтложенныеЧеки.ДатаЧека КАК ДатаЧека,
	//	|	ШМ_ОтложенныеЧеки.Отбит КАК Отбит,
	//	|	ШМ_ОтложенныеЧеки.Номенклатура КАК Номенклатура,
	//	|	ШМ_ОтложенныеЧеки.НомерМашины КАК НомерМашины,
	//	|	ШМ_ОтложенныеЧеки.Телефон КАК Телефон,
	//	|	ШМ_ОтложенныеЧеки.Количество КАК Количество,
	//	|	ШМ_ОтложенныеЧеки.Цена КАК Цена,
	//	|	ШМ_ОтложенныеЧеки.Сумма КАК Сумма,
	//	|	ШМ_ОтложенныеЧеки.Сотрудник КАК Сотрудник,
	//	|	ШМ_ОтложенныеЧеки.СуммаБезСкидки КАК СуммаБезСкидки,
	//	|	ШМ_ОтложенныеЧеки.СуммаСкидки КАК СуммаСкидки,
	//	|	ШМ_ОтложенныеЧеки.Купон КАК Купон,
	//	|	ШМ_ОтложенныеЧеки.Скидка КАК Скидка,
	//	|	ШМ_ОтложенныеЧеки.Бирка КАК Бирка,
	//	|	ШМ_ОтложенныеЧеки.КолГруз1 КАК КолГруз1,
	//	|	ШМ_ОтложенныеЧеки.КолГруз2 КАК КолГруз2,
	//	|	ШМ_ОтложенныеЧеки.ДатаВыполнения КАК ДатаВыполнения,
	//	|	ШМ_ОтложенныеЧеки.СкидкаРазовая КАК СкидкаРазовая,
	//	|	ШМ_ОтложенныеЧеки.РабочееМесто КАК РабочееМесто,
	//	|	ШМ_ОтложенныеЧеки.Восстановить КАК Восстановить
	//	|ИЗ
	//	|	РегистрСведений.ШМ_ОтложенныеЧеки КАК ШМ_ОтложенныеЧеки
	//	|ГДЕ
	//	|	ШМ_ОтложенныеЧеки.РабочееМесто = &РабочееМесто";
	//
	//Запрос.УстановитьПараметр("РабочееМесто", ТекущееРабочееМесто);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыбОтложенных = РезультатЗапроса.Выбрать();
		
	//--Безроднов  
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ШМ_ОтложенныеЧеки.ИдентификаторЧека КАК ИдентификаторЧека,
	               |	ШМ_ОтложенныеЧеки.Выполнен КАК Выполнен,
	               |	ШМ_ОтложенныеЧеки.ДатаЧека КАК ДатаЧека,
	               |	ШМ_ОтложенныеЧеки.Отбит КАК Отбит,
	               |	ШМ_ОтложенныеЧеки.Номенклатура КАК Номенклатура,
	               |	ШМ_ОтложенныеЧеки.НомерМашины КАК НомерМашины,
	               |	ШМ_ОтложенныеЧеки.Телефон КАК Телефон,
	               |	ШМ_ОтложенныеЧеки.Количество КАК Количество,
	               |	ШМ_ОтложенныеЧеки.Цена КАК Цена,
	               |	ШМ_ОтложенныеЧеки.Сумма КАК Сумма,
	               |	ШМ_ОтложенныеЧеки.Сотрудник КАК Сотрудник,
	               |	ШМ_ОтложенныеЧеки.СуммаБезСкидки КАК СуммаБезСкидки,
	               |	ШМ_ОтложенныеЧеки.СуммаСкидки КАК СуммаСкидки,
	               |	ШМ_ОтложенныеЧеки.Купон КАК Купон,
	               |	ШМ_ОтложенныеЧеки.Скидка КАК Скидка,
	               |	ШМ_ОтложенныеЧеки.Бирка КАК Бирка,
	               |	ШМ_ОтложенныеЧеки.КолГруз1 КАК КолГруз1,
	               |	ШМ_ОтложенныеЧеки.КолГруз2 КАК КолГруз2,
	               |	ШМ_ОтложенныеЧеки.ДатаВыполнения КАК ДатаВыполнения,
	               |	ШМ_ОтложенныеЧеки.СкидкаРазовая КАК СкидкаРазовая,
	               |	ШМ_ОтложенныеЧеки.РабочееМесто КАК РабочееМесто,
	               |	ШМ_ОтложенныеЧеки.Восстановить КАК Восстановить
	               |ИЗ
	               |	РегистрСведений.ШМ_ОтложенныеЧеки КАК ШМ_ОтложенныеЧеки
	               |ГДЕ
	               |	ШМ_ОтложенныеЧеки.РабочееМесто = &РабочееМесто";
	
	ТекущееРабочееМесто =  МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование; 
	Запрос.УстановитьПараметр("РабочееМесто", ТекущееРабочееМесто);
	
	ВыбОтложенных = Запрос.Выполнить().Выбрать();
	
	//Для детализации отложенных чеков по раьочемцу месту использую запрос. Прошлую выборку комментинрую +++
	//ВыбОтложенных=РегистрыСведений.ШМ_ОтложенныеЧеки.Выбрать();  
	//---   
	
	//---

	Пока ВыбОтложенных.Следующий() Цикл
		Если ВыбОтложенных.ИдентификаторЧека=ИдентЧека Тогда
		СтрокаТаблицаОтложенных=ТаблицаОтложенных.Добавить();
		СтрокаТаблицаОтложенных.ДатаВыполнения=ВыбОтложенных.ДатаВыполнения;
		СтрокаТаблицаОтложенных.Выполнен=ВыбОтложенных.Выполнен;
		СтрокаТаблицаОтложенных.ДатаЧека=ВыбОтложенных.ДатаЧека;
		СтрокаТаблицаОтложенных.Отбит=ВыбОтложенных.Отбит;
		СтрокаТаблицаОтложенных.Номенклатура=ВыбОтложенных.Номенклатура;
		СтрокаТаблицаОтложенных.Количество=ВыбОтложенных.Количество;
		СтрокаТаблицаОтложенных.Цена=ВыбОтложенных.Цена;
		СтрокаТаблицаОтложенных.Сумма=ВыбОтложенных.Сумма;
		СтрокаТаблицаОтложенных.Сотрудник=ВыбОтложенных.Сотрудник;
		СтрокаТаблицаОтложенных.НомерМашины=ВыбОтложенных.НомерМашины;
		СтрокаТаблицаОтложенных.СуммаБезСкидки=ВыбОтложенных.СуммаБезСкидки;
		СтрокаТаблицаОтложенных.СуммаСкидки=ВыбОтложенных.СуммаСкидки;
		СтрокаТаблицаОтложенных.Купон=ВыбОтложенных.Купон;
		СтрокаТаблицаОтложенных.Скидка=ВыбОтложенных.Скидка;
		СтрокаТаблицаОтложенных.Телефон=ВыбОтложенных.Телефон;
		СтрокаТаблицаОтложенных.Бирка=ВыбОтложенных.Бирка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОК(Команда)
	ТО = Элементы.ТаблицаОтложенных.ТекущиеДанные;
	Попытка
	ДатаОтложеногоЧека= ТО.ДатаЧека;
	НомерМашиныОтложенногоЧека=ТО.НомерМашины;
	Исключение
	КонецПопытки;
	ОКНаСервере(ДатаОтложеногоЧека,НомерМашиныОтложенногоЧека);
	ОткрытьФорму("Обработка.Шиномонтаж.Форма.Форма");
	ЭтаФорма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура СписокОтложенныхПриАктивизацииСтроки(Элемент)
	Попытка
	ТС = Элементы.СписокОтложенных.ТекущиеДанные;
	ОбновитьТаблицуОтложенныхНаСервере(ТС.ИдентификаторЧека);
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ТолькоВыполненныеНаСервере()
	//СписокОтложенных.Очистить();
	//ТаблицаОтложенных.Очистить();
	//БуферОтложенных=Новый ТаблицаЗначений;
	//БуферОтложенных.Колонки.Добавить("ИдентификаторЧека");
	//БуферОтложенных.Колонки.Добавить("Выполнен");
	//ВыбОтложенных=РегистрыСведений.ШМ_ОтложенныеЧеки.Выбрать();
	//СписокДобавленных=Новый СписокЗначений;
	//Пока ВыбОтложенных.Следующий() Цикл
	//	Если ВыбОтложенных.Выполнен=Ложь Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	Если СтрДлина(НомБиркиПоиска)>0 Тогда
	//		Если Найти(ВыбОтложенных.ИдентификаторЧека,"бирка: "+СокрЛП(НомБиркиПоиска)+" ")=0 Тогда
	//			Продолжить;
	//		КонецЕсли;
	//	КонецЕсли;
	//	Если СтрДлина(НомМашиныПоиска)>0 Тогда
	//		Если Найти(ВыбОтложенных.ИдентификаторЧека,"Номер машины: "+СокрЛП(НомМашиныПоиска)+" ")=0 Тогда
	//			Продолжить;
	//		КонецЕсли;
	//	КонецЕсли;
	//	Если СтрДлина(НомерТелефонаПоиска)>0 Тогда
	//		Если Найти(ВыбОтложенных.ИдентификаторЧека,"Телефон: "+СокрЛП(НомерТелефонаПоиска))=0 Тогда
	//			Продолжить;
	//		КонецЕсли;
	//	КонецЕсли;
	//	Если СписокДобавленных.НайтиПоЗначению(ВыбОтложенных.ИдентификаторЧека)=Неопределено Тогда
	//		СтрокаСБуфОтложенных=БуферОтложенных.Добавить();
	//		СтрокаСБуфОтложенных.ИдентификаторЧека=ВыбОтложенных.ИдентификаторЧека;
	//		СтрокаСБуфОтложенных.Выполнен=Истина;
	//		СписокДобавленных.Добавить(ВыбОтложенных.ИдентификаторЧека);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//СписокДобавленных=Новый СписокЗначений;
	////Для Каждого СтрокаСБуфОтложенных Из БуферОтложенных Цикл
	//	//Если СтрокаСБуфОтложенных.Выполнен=Ложь Тогда
	//	//	Продолжить;
	//	//КонецЕсли;
	//	ВыбОтложенных=РегистрыСведений.ШМ_ОтложенныеЧеки.Выбрать();
	//	Пока ВыбОтложенных.Следующий() Цикл
	//		//Если ВыбОтложенных.ИдентификаторЧека=СтрокаСБуфОтложенных.ИдентификаторЧека Тогда
	//		Если БуферОтложенных.Найти(ВыбОтложенных.ИдентификаторЧека,"ИдентификаторЧека")<>Неопределено Тогда
	//			Если СписокДобавленных.НайтиПоЗначению(ВыбОтложенных.ИдентификаторЧека)=Неопределено Тогда
	//				СтрокаСписокОтложенных=СписокОтложенных.Добавить();
	//				СтрокаСписокОтложенных.ИдентификаторЧека=ВыбОтложенных.ИдентификаторЧека;
	//				СтрокаСписокОтложенных.Выполнен=Истина;
	//				СписокДобавленных.Добавить(ВыбОтложенных.ИдентификаторЧека);
	//			КонецЕсли;
	//			Если СписокДобавленных.Количество()=1 Тогда
	//				СтрокаТаблицаОтложенных=ТаблицаОтложенных.Добавить();
	//				СтрокаТаблицаОтложенных.ДатаВыполнения=ВыбОтложенных.ДатаВыполнения;
	//				СтрокаТаблицаОтложенных.Выполнен=ВыбОтложенных.Выполнен;
	//				СтрокаТаблицаОтложенных.ДатаЧека=ВыбОтложенных.ДатаЧека;
	//				СтрокаТаблицаОтложенных.Отбит=ВыбОтложенных.Отбит;
	//				СтрокаТаблицаОтложенных.Номенклатура=ВыбОтложенных.Номенклатура;
	//				СтрокаТаблицаОтложенных.Количество=ВыбОтложенных.Количество;
	//				СтрокаТаблицаОтложенных.Цена=ВыбОтложенных.Цена;
	//				СтрокаТаблицаОтложенных.Сумма=ВыбОтложенных.Сумма;
	//				СтрокаТаблицаОтложенных.Сотрудник=ВыбОтложенных.Сотрудник;
	//				СтрокаТаблицаОтложенных.НомерМашины=ВыбОтложенных.НомерМашины;
	//				СтрокаТаблицаОтложенных.СуммаБезСкидки=ВыбОтложенных.СуммаБезСкидки;
	//				СтрокаТаблицаОтложенных.СуммаСкидки=ВыбОтложенных.СуммаСкидки;
	//				СтрокаТаблицаОтложенных.Купон=ВыбОтложенных.Купон;
	//				СтрокаТаблицаОтложенных.Скидка=ВыбОтложенных.Скидка;
	//				СтрокаТаблицаОтложенных.Телефон=ВыбОтложенных.Телефон;
	//				СтрокаТаблицаОтложенных.Бирка=ВыбОтложенных.Бирка;
	//			КонецЕсли;
	//			Если ВыбОтложенных.Выполнен=Ложь Тогда
	//				СтрокаСписокОтложенных.Выполнен=Ложь;
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЦикла;
	////КонецЦикла;
	
	СписокОтложенных.Очистить();
	ТаблицаОтложенных.Очистить();
	
	БуферОтложенных=Новый ТаблицаЗначений;
	БуферОтложенных.Колонки.Добавить("ИдентификаторЧека");
	БуферОтложенных.Колонки.Добавить("КоличествоВыполненых");
	БуферОтложенных.Колонки.Добавить("КоличествоНеВыполненых");
	
	//1softpro dev1 18.02.2025 +++  детализация отложеннывй чекво по текущему рабочему месту
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ШМ_ОтложенныеЧеки.ИдентификаторЧека КАК ИдентификаторЧека,
	               |	ШМ_ОтложенныеЧеки.Выполнен КАК Выполнен,
	               |	ШМ_ОтложенныеЧеки.ДатаЧека КАК ДатаЧека,
	               |	ШМ_ОтложенныеЧеки.Отбит КАК Отбит,
	               |	ШМ_ОтложенныеЧеки.Номенклатура КАК Номенклатура,
	               |	ШМ_ОтложенныеЧеки.НомерМашины КАК НомерМашины,
	               |	ШМ_ОтложенныеЧеки.Телефон КАК Телефон,
	               |	ШМ_ОтложенныеЧеки.Количество КАК Количество,
	               |	ШМ_ОтложенныеЧеки.Цена КАК Цена,
	               |	ШМ_ОтложенныеЧеки.Сумма КАК Сумма,
	               |	ШМ_ОтложенныеЧеки.Сотрудник КАК Сотрудник,
	               |	ШМ_ОтложенныеЧеки.СуммаБезСкидки КАК СуммаБезСкидки,
	               |	ШМ_ОтложенныеЧеки.СуммаСкидки КАК СуммаСкидки,
	               |	ШМ_ОтложенныеЧеки.Купон КАК Купон,
	               |	ШМ_ОтложенныеЧеки.Скидка КАК Скидка,
	               |	ШМ_ОтложенныеЧеки.Бирка КАК Бирка,
	               |	ШМ_ОтложенныеЧеки.КолГруз1 КАК КолГруз1,
	               |	ШМ_ОтложенныеЧеки.КолГруз2 КАК КолГруз2,
	               |	ШМ_ОтложенныеЧеки.ДатаВыполнения КАК ДатаВыполнения,
	               |	ШМ_ОтложенныеЧеки.СкидкаРазовая КАК СкидкаРазовая,
	               |	ШМ_ОтложенныеЧеки.РабочееМесто КАК РабочееМесто,
	               |	ШМ_ОтложенныеЧеки.Восстановить КАК Восстановить
	               |ИЗ
	               |	РегистрСведений.ШМ_ОтложенныеЧеки КАК ШМ_ОтложенныеЧеки
	               |ГДЕ
	               |	ШМ_ОтложенныеЧеки.РабочееМесто = &РабочееМесто";
	
	ТекущееРабочееМесто =  МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование; 
	Запрос.УстановитьПараметр("РабочееМесто", ТекущееРабочееМесто);
	
	ВыбОтложенных = Запрос.Выполнить().Выбрать();
	
	//Для детализации отложенных чеков по раьочемцу месту использую запрос. Прошлую выборку комментинрую +++
	//ВыбОтложенных=РегистрыСведений.ШМ_ОтложенныеЧеки.Выбрать();  
	//--- 
	
	//---
	
	Пока ВыбОтложенных.Следующий() Цикл
		Если ВыбОтложенных.Отбит=Истина Тогда
			Продолжить;
		КонецЕсли;
		Если СтрДлина(НомБиркиПоиска)>0 Тогда
			Если Найти(ВыбОтложенных.ИдентификаторЧека,"бирка: "+СокрЛП(НомБиркиПоиска)+" ")=0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если СтрДлина(НомМашиныПоиска)>0 Тогда
			Если Найти(ВыбОтложенных.ИдентификаторЧека,"Номер машины: "+СокрЛП(НомМашиныПоиска)+" ")=0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если СтрДлина(НомерТелефонаПоиска)>0 Тогда
			Если Найти(ВыбОтложенных.ИдентификаторЧека,"Телефон: "+СокрЛП(НомерТелефонаПоиска))=0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если ВыбОтложенных.Выполнен=Истина Тогда
			СтрокаСБуфОтложенных=БуферОтложенных.Добавить();
			СтрокаСБуфОтложенных.ИдентификаторЧека=ВыбОтложенных.ИдентификаторЧека;
			СтрокаСБуфОтложенных.КоличествоВыполненых=1;
			СтрокаСБуфОтложенных.КоличествоНеВыполненых=0;
		ИначеЕсли ВыбОтложенных.Выполнен=Ложь Тогда
			СтрокаСБуфОтложенных=БуферОтложенных.Добавить();
			СтрокаСБуфОтложенных.ИдентификаторЧека=ВыбОтложенных.ИдентификаторЧека;
			СтрокаСБуфОтложенных.КоличествоВыполненых=0;
			СтрокаСБуфОтложенных.КоличествоНеВыполненых=1;
		КонецЕсли;
	КонецЦикла;
	
	БуферОтложенных.Свернуть("ИдентификаторЧека","КоличествоВыполненых,КоличествоНеВыполненых");
	Для Каждого СтрокаБуферОтложенных Из БуферОтложенных Цикл
		Если (СтрокаБуферОтложенных.КоличествоВыполненых>0) И (СтрокаБуферОтложенных.КоличествоНеВыполненых=0) Тогда
			СтрокаСписокОтложенных=СписокОтложенных.Добавить();
			СтрокаСписокОтложенных.ИдентификаторЧека=СтрокаБуферОтложенных.ИдентификаторЧека;
			СтрокаСписокОтложенных.Выполнен=Ложь;
		КонецЕсли;
	КонецЦикла;
	РежимВыборки="Готовые";

КонецПроцедуры

&НаКлиенте
Процедура ТолькоВыполненные(Команда)
	ТолькоВыполненныеНаСервере();	
КонецПроцедуры

&НаСервере
Процедура НевыполненныеНаСервере()
	//СписокОтложенных.Очистить();
	//ТаблицаОтложенных.Очистить();
	//БуферОтложенных=Новый ТаблицаЗначений;
	//БуферОтложенных.Колонки.Добавить("ИдентификаторЧека");
	//БуферОтложенных.Колонки.Добавить("Выполнен");
	//ВыбОтложенных=РегистрыСведений.ШМ_ОтложенныеЧеки.Выбрать();
	//СписокДобавленных=Новый СписокЗначений;
	//Пока ВыбОтложенных.Следующий() Цикл
	//	Если ВыбОтложенных.Выполнен=Истина Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	Если СтрДлина(НомБиркиПоиска)>0 Тогда
	//		Если Найти(ВыбОтложенных.ИдентификаторЧека,"бирка: "+СокрЛП(НомБиркиПоиска)+" ")=0 Тогда
	//			Продолжить;
	//		КонецЕсли;
	//	КонецЕсли;
	//	Если СтрДлина(НомМашиныПоиска)>0 Тогда
	//		Если Найти(ВыбОтложенных.ИдентификаторЧека,"Номер машины: "+СокрЛП(НомМашиныПоиска)+" ")=0 Тогда
	//			Продолжить;
	//		КонецЕсли;
	//	КонецЕсли;
	//	Если СтрДлина(НомерТелефонаПоиска)>0 Тогда
	//		Если Найти(ВыбОтложенных.ИдентификаторЧека,"Телефон: "+СокрЛП(НомерТелефонаПоиска))=0 Тогда
	//			Продолжить;
	//		КонецЕсли;
	//	КонецЕсли;
	//	Если СписокДобавленных.НайтиПоЗначению(ВыбОтложенных.ИдентификаторЧека)=Неопределено Тогда
	//		СтрокаСБуфОтложенных=БуферОтложенных.Добавить();
	//		СтрокаСБуфОтложенных.ИдентификаторЧека=ВыбОтложенных.ИдентификаторЧека;
	//		СтрокаСБуфОтложенных.Выполнен=Ложь;
	//		СписокДобавленных.Добавить(ВыбОтложенных.ИдентификаторЧека);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//СписокДобавленных=Новый СписокЗначений;
	////Для Каждого СтрокаСБуфОтложенных Из БуферОтложенных Цикл
	//	//Если СтрокаСБуфОтложенных.Выполнен=Истина Тогда
	//	//	Продолжить;
	//	//КонецЕсли;
	//	ВыбОтложенных=РегистрыСведений.ШМ_ОтложенныеЧеки.Выбрать();
	//	Пока ВыбОтложенных.Следующий() Цикл
	//		//Если ВыбОтложенных.ИдентификаторЧека=СтрокаСБуфОтложенных.ИдентификаторЧека Тогда
	//		Если БуферОтложенных.Найти(ВыбОтложенных.ИдентификаторЧека,"ИдентификаторЧека")<>Неопределено Тогда
	//			Если СписокДобавленных.НайтиПоЗначению(ВыбОтложенных.ИдентификаторЧека)=Неопределено Тогда
	//				СтрокаСписокОтложенных=СписокОтложенных.Добавить();
	//				СтрокаСписокОтложенных.ИдентификаторЧека=ВыбОтложенных.ИдентификаторЧека;
	//				СтрокаСписокОтложенных.Выполнен=Истина;
	//				СписокДобавленных.Добавить(ВыбОтложенных.ИдентификаторЧека);
	//			КонецЕсли;
	//			Если СписокДобавленных.Количество()=1 Тогда
	//				СтрокаТаблицаОтложенных=ТаблицаОтложенных.Добавить();
	//				СтрокаТаблицаОтложенных.ДатаВыполнения=ВыбОтложенных.ДатаВыполнения;
	//				СтрокаТаблицаОтложенных.Выполнен=ВыбОтложенных.Выполнен;
	//				СтрокаТаблицаОтложенных.ДатаЧека=ВыбОтложенных.ДатаЧека;
	//				СтрокаТаблицаОтложенных.Отбит=ВыбОтложенных.Отбит;
	//				СтрокаТаблицаОтложенных.Номенклатура=ВыбОтложенных.Номенклатура;
	//				СтрокаТаблицаОтложенных.Количество=ВыбОтложенных.Количество;
	//				СтрокаТаблицаОтложенных.Цена=ВыбОтложенных.Цена;
	//				СтрокаТаблицаОтложенных.Сумма=ВыбОтложенных.Сумма;
	//				СтрокаТаблицаОтложенных.Сотрудник=ВыбОтложенных.Сотрудник;
	//				СтрокаТаблицаОтложенных.НомерМашины=ВыбОтложенных.НомерМашины;
	//				СтрокаТаблицаОтложенных.СуммаБезСкидки=ВыбОтложенных.СуммаБезСкидки;
	//				СтрокаТаблицаОтложенных.СуммаСкидки=ВыбОтложенных.СуммаСкидки;
	//				СтрокаТаблицаОтложенных.Купон=ВыбОтложенных.Купон;
	//				СтрокаТаблицаОтложенных.Скидка=ВыбОтложенных.Скидка;
	//				СтрокаТаблицаОтложенных.Телефон=ВыбОтложенных.Телефон;
	//				СтрокаТаблицаОтложенных.Бирка=ВыбОтложенных.Бирка;
	//			КонецЕсли;
	//			Если ВыбОтложенных.Выполнен=Ложь Тогда
	//				СтрокаСписокОтложенных.Выполнен=Ложь;
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЦикла;
	////КонецЦикла;
	
	СписокОтложенных.Очистить();
	ТаблицаОтложенных.Очистить();
	
	БуферОтложенных=Новый ТаблицаЗначений;
	БуферОтложенных.Колонки.Добавить("ИдентификаторЧека");
	БуферОтложенных.Колонки.Добавить("КоличествоВыполненых");
	БуферОтложенных.Колонки.Добавить("КоличествоНеВыполненых");
	
	//1softpro dev1 18.02.2025 +++  детализация отложеннывй чекво по текущему рабочему месту   
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ШМ_ОтложенныеЧеки.ИдентификаторЧека КАК ИдентификаторЧека,
	               |	ШМ_ОтложенныеЧеки.Выполнен КАК Выполнен,
	               |	ШМ_ОтложенныеЧеки.ДатаЧека КАК ДатаЧека,
	               |	ШМ_ОтложенныеЧеки.Отбит КАК Отбит,
	               |	ШМ_ОтложенныеЧеки.Номенклатура КАК Номенклатура,
	               |	ШМ_ОтложенныеЧеки.НомерМашины КАК НомерМашины,
	               |	ШМ_ОтложенныеЧеки.Телефон КАК Телефон,
	               |	ШМ_ОтложенныеЧеки.Количество КАК Количество,
	               |	ШМ_ОтложенныеЧеки.Цена КАК Цена,
	               |	ШМ_ОтложенныеЧеки.Сумма КАК Сумма,
	               |	ШМ_ОтложенныеЧеки.Сотрудник КАК Сотрудник,
	               |	ШМ_ОтложенныеЧеки.СуммаБезСкидки КАК СуммаБезСкидки,
	               |	ШМ_ОтложенныеЧеки.СуммаСкидки КАК СуммаСкидки,
	               |	ШМ_ОтложенныеЧеки.Купон КАК Купон,
	               |	ШМ_ОтложенныеЧеки.Скидка КАК Скидка,
	               |	ШМ_ОтложенныеЧеки.Бирка КАК Бирка,
	               |	ШМ_ОтложенныеЧеки.КолГруз1 КАК КолГруз1,
	               |	ШМ_ОтложенныеЧеки.КолГруз2 КАК КолГруз2,
	               |	ШМ_ОтложенныеЧеки.ДатаВыполнения КАК ДатаВыполнения,
	               |	ШМ_ОтложенныеЧеки.СкидкаРазовая КАК СкидкаРазовая,
	               |	ШМ_ОтложенныеЧеки.РабочееМесто КАК РабочееМесто,
	               |	ШМ_ОтложенныеЧеки.Восстановить КАК Восстановить
	               |ИЗ
	               |	РегистрСведений.ШМ_ОтложенныеЧеки КАК ШМ_ОтложенныеЧеки
	               |ГДЕ
	               |	ШМ_ОтложенныеЧеки.РабочееМесто = &РабочееМесто";
	
	ТекущееРабочееМесто =  МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование; 
	Запрос.УстановитьПараметр("РабочееМесто", ТекущееРабочееМесто);
	
	ВыбОтложенных = Запрос.Выполнить().Выбрать();
	
	//Для детализации отложенных чеков по раьочемцу месту использую запрос. Прошлую выборку комментинрую +++
	//ВыбОтложенных=РегистрыСведений.ШМ_ОтложенныеЧеки.Выбрать();  
	//---   
	
	//---
	
	Пока ВыбОтложенных.Следующий() Цикл
		Если ВыбОтложенных.Отбит=Истина Тогда
			Продолжить;
		КонецЕсли;
		Если СтрДлина(НомБиркиПоиска)>0 Тогда
			Если Найти(ВыбОтложенных.ИдентификаторЧека,"бирка: "+СокрЛП(НомБиркиПоиска)+" ")=0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если СтрДлина(НомМашиныПоиска)>0 Тогда
			Если Найти(ВыбОтложенных.ИдентификаторЧека,"Номер машины: "+СокрЛП(НомМашиныПоиска)+" ")=0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если СтрДлина(НомерТелефонаПоиска)>0 Тогда
			Если Найти(ВыбОтложенных.ИдентификаторЧека,"Телефон: "+СокрЛП(НомерТелефонаПоиска))=0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если ВыбОтложенных.Выполнен=Истина Тогда
			СтрокаСБуфОтложенных=БуферОтложенных.Добавить();
			СтрокаСБуфОтложенных.ИдентификаторЧека=ВыбОтложенных.ИдентификаторЧека;
			СтрокаСБуфОтложенных.КоличествоВыполненых=1;
			СтрокаСБуфОтложенных.КоличествоНеВыполненых=0;
		ИначеЕсли ВыбОтложенных.Выполнен=Ложь Тогда
			СтрокаСБуфОтложенных=БуферОтложенных.Добавить();
			СтрокаСБуфОтложенных.ИдентификаторЧека=ВыбОтложенных.ИдентификаторЧека;
			СтрокаСБуфОтложенных.КоличествоВыполненых=0;
			СтрокаСБуфОтложенных.КоличествоНеВыполненых=1;
		КонецЕсли;
	КонецЦикла;
	
	БуферОтложенных.Свернуть("ИдентификаторЧека","КоличествоВыполненых,КоличествоНеВыполненых");
	Для Каждого СтрокаБуферОтложенных Из БуферОтложенных Цикл
		Если (СтрокаБуферОтложенных.КоличествоВыполненых=0) И (СтрокаБуферОтложенных.КоличествоНеВыполненых>0) Тогда
			СтрокаСписокОтложенных=СписокОтложенных.Добавить();
			СтрокаСписокОтложенных.ИдентификаторЧека=СтрокаБуферОтложенных.ИдентификаторЧека;
			СтрокаСписокОтложенных.Выполнен=Ложь;
		КонецЕсли;
	КонецЦикла;
	РежимВыборки="Сделать";
	
КонецПроцедуры

&НаКлиенте
Процедура Невыполненные(Команда)
	НевыполненныеНаСервере();
	//РежимВыборки="Невыполненные";
КонецПроцедуры

&НаСервере
Процедура ДоделатьНаСервере()
	//СписокОтложенных.Очистить();
	//ТаблицаОтложенных.Очистить();
	//ВыбОтложенных=РегистрыСведений.ШМ_ОтложенныеЧеки.Выбрать();
	//СписокДобавленных=Новый СписокЗначений;
	//Пока ВыбОтложенных.Следующий() Цикл
	//	Если СтрДлина(НомБиркиПоиска)>0 Тогда
	//		Если Найти(ВыбОтложенных.ИдентификаторЧека,"бирка: "+СокрЛП(НомБиркиПоиска)+" ")=0 Тогда
	//			Продолжить;
	//		КонецЕсли;
	//	КонецЕсли;
	//	Если СтрДлина(НомМашиныПоиска)>0 Тогда
	//		Если Найти(ВыбОтложенных.ИдентификаторЧека,"Номер машины: "+СокрЛП(НомМашиныПоиска)+" ")=0 Тогда
	//			Продолжить;
	//		КонецЕсли;
	//	КонецЕсли;
	//	Если СтрДлина(НомерТелефонаПоиска)>0 Тогда
	//		Если Найти(ВыбОтложенных.ИдентификаторЧека,"Телефон: "+СокрЛП(НомерТелефонаПоиска))=0 Тогда
	//			Продолжить;
	//		КонецЕсли;
	//	КонецЕсли;
	//	Если СписокДобавленных.НайтиПоЗначению(ВыбОтложенных.ИдентификаторЧека)=Неопределено Тогда
	//		СтрокаСписокОтложенных=СписокОтложенных.Добавить();
	//		СтрокаСписокОтложенных.ИдентификаторЧека=ВыбОтложенных.ИдентификаторЧека;
	//		СтрокаСписокОтложенных.Выполнен=Истина;
	//		СписокДобавленных.Добавить(ВыбОтложенных.ИдентификаторЧека);
	//	КонецЕсли;
	//	Если СписокДобавленных.Количество()=1 Тогда
	//		СтрокаТаблицаОтложенных=ТаблицаОтложенных.Добавить();
	//		СтрокаТаблицаОтложенных.ДатаВыполнения=ВыбОтложенных.ДатаВыполнения;
	//		СтрокаТаблицаОтложенных.Выполнен=ВыбОтложенных.Выполнен;
	//		СтрокаТаблицаОтложенных.ДатаЧека=ВыбОтложенных.ДатаЧека;
	//		СтрокаТаблицаОтложенных.Отбит=ВыбОтложенных.Отбит;
	//		СтрокаТаблицаОтложенных.Номенклатура=ВыбОтложенных.Номенклатура;
	//		СтрокаТаблицаОтложенных.Количество=ВыбОтложенных.Количество;
	//		СтрокаТаблицаОтложенных.Цена=ВыбОтложенных.Цена;
	//		СтрокаТаблицаОтложенных.Сумма=ВыбОтложенных.Сумма;
	//		СтрокаТаблицаОтложенных.Сотрудник=ВыбОтложенных.Сотрудник;
	//		СтрокаТаблицаОтложенных.НомерМашины=ВыбОтложенных.НомерМашины;
	//		СтрокаТаблицаОтложенных.СуммаБезСкидки=ВыбОтложенных.СуммаБезСкидки;
	//		СтрокаТаблицаОтложенных.СуммаСкидки=ВыбОтложенных.СуммаСкидки;
	//		СтрокаТаблицаОтложенных.Купон=ВыбОтложенных.Купон;
	//		СтрокаТаблицаОтложенных.Скидка=ВыбОтложенных.Скидка;
	//		СтрокаТаблицаОтложенных.Телефон=ВыбОтложенных.Телефон;
	//		СтрокаТаблицаОтложенных.Бирка=ВыбОтложенных.Бирка;
	//	КонецЕсли;
	//	Если ВыбОтложенных.Выполнен=Ложь Тогда
	//		СтрокаСписокОтложенных.Выполнен=Ложь;
	//	КонецЕсли;
	//КонецЦикла;
	
	СписокОтложенных.Очистить();
	ТаблицаОтложенных.Очистить();
	
	БуферОтложенных=Новый ТаблицаЗначений;
	БуферОтложенных.Колонки.Добавить("ИдентификаторЧека");
	БуферОтложенных.Колонки.Добавить("КоличествоВыполненых");
	БуферОтложенных.Колонки.Добавить("КоличествоНеВыполненых");
	
	//1softpro dev1 18.02.2025 +++  детализация отложеннывй чекво по текущему рабочему месту
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ШМ_ОтложенныеЧеки.ИдентификаторЧека КАК ИдентификаторЧека,
	               |	ШМ_ОтложенныеЧеки.Выполнен КАК Выполнен,
	               |	ШМ_ОтложенныеЧеки.ДатаЧека КАК ДатаЧека,
	               |	ШМ_ОтложенныеЧеки.Отбит КАК Отбит,
	               |	ШМ_ОтложенныеЧеки.Номенклатура КАК Номенклатура,
	               |	ШМ_ОтложенныеЧеки.НомерМашины КАК НомерМашины,
	               |	ШМ_ОтложенныеЧеки.Телефон КАК Телефон,
	               |	ШМ_ОтложенныеЧеки.Количество КАК Количество,
	               |	ШМ_ОтложенныеЧеки.Цена КАК Цена,
	               |	ШМ_ОтложенныеЧеки.Сумма КАК Сумма,
	               |	ШМ_ОтложенныеЧеки.Сотрудник КАК Сотрудник,
	               |	ШМ_ОтложенныеЧеки.СуммаБезСкидки КАК СуммаБезСкидки,
	               |	ШМ_ОтложенныеЧеки.СуммаСкидки КАК СуммаСкидки,
	               |	ШМ_ОтложенныеЧеки.Купон КАК Купон,
	               |	ШМ_ОтложенныеЧеки.Скидка КАК Скидка,
	               |	ШМ_ОтложенныеЧеки.Бирка КАК Бирка,
	               |	ШМ_ОтложенныеЧеки.КолГруз1 КАК КолГруз1,
	               |	ШМ_ОтложенныеЧеки.КолГруз2 КАК КолГруз2,
	               |	ШМ_ОтложенныеЧеки.ДатаВыполнения КАК ДатаВыполнения,
	               |	ШМ_ОтложенныеЧеки.СкидкаРазовая КАК СкидкаРазовая,
	               |	ШМ_ОтложенныеЧеки.РабочееМесто КАК РабочееМесто,
	               |	ШМ_ОтложенныеЧеки.Восстановить КАК Восстановить
	               |ИЗ
	               |	РегистрСведений.ШМ_ОтложенныеЧеки КАК ШМ_ОтложенныеЧеки
	               |ГДЕ
	               |	ШМ_ОтложенныеЧеки.РабочееМесто = &РабочееМесто";
	
	ТекущееРабочееМесто =  МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование; 
	Запрос.УстановитьПараметр("РабочееМесто", ТекущееРабочееМесто);
	
	ВыбОтложенных = Запрос.Выполнить().Выбрать();
	
	//Для детализации отложенных чеков по раьочемцу месту использую запрос. Прошлую выборку комментинрую +++
	//ВыбОтложенных=РегистрыСведений.ШМ_ОтложенныеЧеки.Выбрать();  
	//---
	
	//--- 
	
	Пока ВыбОтложенных.Следующий() Цикл
		Если ВыбОтложенных.Отбит=Истина Тогда
			Продолжить;
		КонецЕсли;
		Если СтрДлина(НомБиркиПоиска)>0 Тогда
			Если Найти(ВыбОтложенных.ИдентификаторЧека,"бирка: "+СокрЛП(НомБиркиПоиска)+" ")=0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если СтрДлина(НомМашиныПоиска)>0 Тогда
			Если Найти(ВыбОтложенных.ИдентификаторЧека,"Номер машины: "+СокрЛП(НомМашиныПоиска)+" ")=0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если СтрДлина(НомерТелефонаПоиска)>0 Тогда
			Если Найти(ВыбОтложенных.ИдентификаторЧека,"Телефон: "+СокрЛП(НомерТелефонаПоиска))=0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если ВыбОтложенных.Выполнен=Истина Тогда
			СтрокаСБуфОтложенных=БуферОтложенных.Добавить();
			СтрокаСБуфОтложенных.ИдентификаторЧека=ВыбОтложенных.ИдентификаторЧека;
			СтрокаСБуфОтложенных.КоличествоВыполненых=1;
			СтрокаСБуфОтложенных.КоличествоНеВыполненых=0;
		ИначеЕсли ВыбОтложенных.Выполнен=Ложь Тогда
			СтрокаСБуфОтложенных=БуферОтложенных.Добавить();
			СтрокаСБуфОтложенных.ИдентификаторЧека=ВыбОтложенных.ИдентификаторЧека;
			СтрокаСБуфОтложенных.КоличествоВыполненых=0;
			СтрокаСБуфОтложенных.КоличествоНеВыполненых=1;
		КонецЕсли;
	КонецЦикла;
	
	БуферОтложенных.Свернуть("ИдентификаторЧека","КоличествоВыполненых,КоличествоНеВыполненых");
	Для Каждого СтрокаБуферОтложенных Из БуферОтложенных Цикл
		Если (СтрокаБуферОтложенных.КоличествоВыполненых>0) И (СтрокаБуферОтложенных.КоличествоНеВыполненых>0) Тогда
			СтрокаСписокОтложенных=СписокОтложенных.Добавить();
			СтрокаСписокОтложенных.ИдентификаторЧека=СтрокаБуферОтложенных.ИдентификаторЧека;
			СтрокаСписокОтложенных.Выполнен=Ложь;
		КонецЕсли;
	КонецЦикла;
	РежимВыборки="Доделать";

КонецПроцедуры

&НаКлиенте
Процедура Доделать(Команда)
	ДоделатьНаСервере();
КонецПроцедуры

&НаСервере
Функция ПрофессияНоменклатура(Ном)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_НоменклатураПрофессии.Номенклатура,
		|	ШМ_НоменклатураПрофессии.Профессия,
		|	ШМ_НоменклатураПрофессии.ВидОплаты,
		|	ШМ_НоменклатураПрофессии.МатериальныйВычет,
		|	ШМ_НоменклатураПрофессии.ИспГрузики,
		|	ШМ_НоменклатураПрофессии.РазмерОплаты
		|ИЗ
		|	РегистрСведений.ШМ_НоменклатураПрофессии КАК ШМ_НоменклатураПрофессии
		|ГДЕ
		|	ШМ_НоменклатураПрофессии.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура",Ном.ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Профессия = "";
	РазмерОплаты = 0;
	ВидОплаты = "";
	МатериальныйВычет=0;
	ИспГрузики=Ложь;
	Пока Выборка.Следующий() Цикл
		Профессия = Выборка.Профессия;
		РазмерОплаты = Выборка.РазмерОплаты;
		ВидОплаты = Выборка.ВидОплаты;
		МатериальныйВычет=Выборка.МатериальныйВычет;
		ИспГрузики=Выборка.ИспГрузики;
	КонецЦикла;
	
	Запрос2 = Новый Запрос;
	Запрос2.Текст = 
		"ВЫБРАТЬ
		|	ШМ_БригадыСрезПоследних.Должность КАК Должность,
		|	ШМ_БригадыСрезПоследних.Сотрудник КАК Сотрудник,
		|	ШМ_БригадыСрезПоследних.ИмяКомпьютера КАК ИмяКомпьютера,
		|	ШМ_БригадыСрезПоследних.Помощник КАК Помощник
		|ИЗ
		|	РегистрСведений.ШМ_Бригады.СрезПоследних(, ) КАК ШМ_БригадыСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МАКСИМУМ(ШМ_БригадыСрезПоследних.Период) КАК Период
		|		ИЗ
		|			РегистрСведений.ШМ_Бригады.СрезПоследних(, ) КАК ШМ_БригадыСрезПоследних) КАК ВложенныйЗапрос
		|		ПО ШМ_БригадыСрезПоследних.Период = ВложенныйЗапрос.Период
		|ГДЕ
		|	ШМ_БригадыСрезПоследних.ИмяКомпьютера = &ИмяКомпьютера";
	
	//Запрос2.УстановитьПараметр("Дата", Док.Дата);
	Запрос2.УстановитьПараметр("ИмяКомпьютера", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование);
	Выборка2 = Запрос2.Выполнить().Выгрузить();
	Сотр = "";
	Сотр2 = "";
	КолПом = 0;
	Для Каждого СтрТЗ ИЗ Выборка2 Цикл
		Если СтрТЗ.Помощник Тогда
			КолПом = КолПом + 1;
		КонецЕсли;
	КонецЦикла;
	Размер2 = 0;
	Если КолПом = 0 Тогда
		Для Каждого СтрТЗ ИЗ Выборка2 Цикл
			Если СтрТЗ.Должность = Профессия Тогда
				Сотр = СтрТЗ.Сотрудник;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли КолПом = 1 Тогда
		ПомощникЕсть=ложь;
		Для Каждого СтрТЗ ИЗ Выборка2 Цикл
			Если СтрТЗ.Должность = Профессия И НЕ СтрТЗ.Помощник Тогда
				Сотр = СтрТЗ.Сотрудник;
			ИначеЕсли СтрТЗ.Должность = Профессия И СтрТЗ.Помощник Тогда
				Сотр2 = СтрТЗ.Сотрудник;
				ПомощникЕсть=Истина;
			КонецЕсли;
		КонецЦикла;
		Если ПомощникЕсть=Истина Тогда
			РазмерОплаты = РазмерОплаты / 2;
		КонецЕсли;
		Размер2 = РазмерОплаты;
	ИначеЕсли КолПом = 2 Тогда
		Для Каждого СтрТЗ ИЗ Выборка2 Цикл

			Если СтрТЗ.Должность = Профессия И НЕ СтрТЗ.Помощник Тогда
				Сотр = СтрТЗ.Сотрудник;
			ИначеЕсли СтрТЗ.Должность = Профессия И СтрТЗ.Помощник Тогда
				Сотр2 = СтрТЗ.Сотрудник;
			КонецЕсли;
		КонецЦикла;
		КоличПомСотр2=0;
		Для Каждого СтрТЗ ИЗ Выборка2 Цикл
			Если СтрТЗ.Помощник И Сотр2 = СтрТЗ.Сотрудник Тогда
				КоличПомСотр2=КоличПомСотр2+1;
			КонецЕсли;
		КонецЦикла;
		Если КоличПомСотр2=1 Тогда
			РазмерОплаты = РазмерОплаты / 2;
			Размер2 = РазмерОплаты;
		ИначеЕсли КоличПомСотр2=2 Тогда
			Размер2 = РазмерОплаты*0.33;
			РазмерОплаты = РазмерОплаты*0.67;
		КонецЕсли;
	КонецЕсли;
	
	Струк = Новый Структура("Сотрудник,Сотрудник2,Размер,Размер2,ВидОплаты,МатериальныйВычет");
	Струк.Вставить("Сотрудник",Сотр);
	Струк.Вставить("Сотрудник2",Сотр2);
	Струк.Вставить("Размер",РазмерОплаты);
	Струк.Вставить("Размер2",Размер2);
	Струк.Вставить("ВидОплаты",ВидОплаты);
	Струк.Вставить("МатериальныйВычет",МатериальныйВычет);
	Струк.Вставить("Профессия",Профессия);
	Струк.Вставить("ИспГрузики",ИспГрузики);
	
	Возврат Струк;
КонецФункции

&НаСервере
Процедура ЧекВыполненНаСервере(ИдентЧека,Номен)
	
	НомерМаш="";
	СуммаПозиции=0;
	КоличествоПозиции=0;
	МенЗаписиОтл_СкидкаРазовая=Ложь;
	
	ВыбОтложенных=РегистрыСведений.ШМ_ОтложенныеЧеки.Выбрать();
	Пока ВыбОтложенных.Следующий() Цикл
		Если ВыбОтложенных.ИдентификаторЧека=ИдентЧека И ВыбОтложенных.Номенклатура=Номен Тогда
			МенЗаписиОтл=ВыбОтложенных.ПолучитьМенеджерЗаписи();
			МенЗаписиОтл.Прочитать();
			НомерМаш=МенЗаписиОтл.НомерМашины;
			СуммаПозиции=МенЗаписиОтл.Сумма;
			КоличествоПозиции=МенЗаписиОтл.Количество;
			Если Константы.ШМЗарплатаСУчетомСкидки.Получить()=Ложь Тогда
				Если МенЗаписиОтл.СкидкаРазовая Тогда
					СуммаПозиции = ПолучитьЦену(МенЗаписиОтл.Номенклатура)*МенЗаписиОтл.Количество;
				КонецЕсли;
			КонецЕсли;
			МенЗаписиОтл_СкидкаРазовая=МенЗаписиОтл.СкидкаРазовая;
			Бирка=МенЗаписиОтл.Бирка;
			Если МенЗаписиОтл.Сотрудник.Пустая() Тогда
				СтруктураПроф = ПрофессияНоменклатура(Номен); //Сотрудник,Сотрудник2,Размер,Размер2,ВидОплаты
				МенЗаписиОтл.Сотрудник=СтруктураПроф.Сотрудник;
				Сотр=СтруктураПроф.Сотрудник;
			Иначе
				Сотр=МенЗаписиОтл.Сотрудник;
			КонецЕсли;
			МенЗаписиОтл.ДатаВыполнения=ТекущаяДата();
			МенЗаписиОтл.Выполнен=Истина;
			МенЗаписиОтл.Записать();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СоздатьРеализациюОтложенногоЧека(НомерМаш,Ложь,	СуммаПозиции,КоличествоПозиции,Номен,Бирка,Сотр,МенЗаписиОтл_СкидкаРазовая);
	
КонецПроцедуры

Процедура СоздатьРеализациюОтложенногоЧека(Наим,ЮЛ,СуммаПозиции,КоличествоПозиции,Номен,Бирка,Сотр,МенЗаписиОтл_СкидкаРазовая)
	Док = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	Док.ИмяКомпьютера=МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование;
	Док.Контрагент = СоздатьКонтра(Наим);
	Док.Партнер = Док.Контрагент.Партнер;
	Док.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
	НаименОрг = "тест";
	Док.Организация = Справочники.Организации.НайтиПоНаименованию(НаименОрг);
	Док.Склад = Справочники.Склады.НайтиПоНаименованию("Основной").Ссылка;
	Док.Дата = ТекущаяДата();
	Док.Валюта = Справочники.Валюты.НайтиПоКоду("643").Ссылка;
	Док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	Док.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаПоПатенту;
	Док.СуммаДокумента = СуммаПозиции;
	Док.СуммаВзаиморасчетов = СуммаПозиции;
	Док.Курс = 1;
	Док.ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоКоду("643").Ссылка;
	Док.ФормаОплаты = Перечисления.ФормыОплаты.Наличная;
	//Док.ДатаПлатежа = ТекущаяДата();
	Док.ЦенаВключаетНДС=Истина;
	Док.Комментарий=Наим;
	
	СуммаМатВычет=0;
	СуммаМатВычетПроточка=0;
	ТипДиска="";
	КолГрузБезСкидок=0;
	СуммаБалЧерновик=0;
	СуммаГрузБезСкидок=0;
	СтруктураПроф = ПрофессияНоменклатура(Номен);
	
	Если Константы.ШМЗарплатаСУчетомСкидки.Получить()=Ложь Тогда
		Если МенЗаписиОтл_СкидкаРазовая Тогда
			СуммаМатВычет=СуммаМатВычет+СтруктураПроф.МатериальныйВычет*КоличествоПозиции;
		КонецЕсли;
	Иначе
		СуммаМатВычет=СуммаМатВычет+Окр((СтруктураПроф.МатериальныйВычет*(1-ВернутьПроцентКупона(Номен)/100)),0)*КоличествоПозиции;
	КонецЕсли;
	
	Если СокрЛП(СтруктураПроф.Профессия.Наименование)="Проточник" Тогда
		СуммаМатВычетПроточка=СуммаМатВычетПроточка+Окр((СтруктураПроф.МатериальныйВычет),0)*КоличествоПозиции;
	КонецЕсли;
	//Если СтруктураПроф.ИспГрузики Тогда
	//	СуммаГрузики=СуммаГрузики+СтруктураПроф.МатериальныйВычет;
	//КонецЕсли;
	Если СтруктураПроф.ИспГрузики Тогда
		КолГрузБезСкидок=КолГрузБезСкидок+1;
		
		Если Константы.ШМЗарплатаСУчетомСкидки.Получить()=Ложь Тогда
			Если МенЗаписиОтл_СкидкаРазовая Тогда
				СуммаГрузБезСкидок=СуммаГрузБезСкидок+СтруктураПроф.МатериальныйВычет*КоличествоПозиции;
			КонецЕсли;
		Иначе
			//СуммаМатВычет=СуммаМатВычет+Окр((СтруктураПроф.МатериальныйВычет*(1-ВернутьПроцентКупона(Номен)/100)),0)*КоличествоПозиции;
			СуммаГрузБезСкидок=СуммаГрузБезСкидок+Окр((СтруктураПроф.МатериальныйВычет*(1-ВернутьПроцентКупона(Номен)/100)),0)*КоличествоПозиции;
		КонецЕсли;
		
		
		СуммаБалЧерновик=СуммаБалЧерновик+СуммаПозиции;
	КонецЕсли;
	Если СокрЛП(СтруктураПроф.Профессия.Наименование)="Правщик дисков" Тогда
		НаборНомПроф=РегистрыСведений.ШМ_НоменклатураПрофессии.СоздатьНаборЗаписей();
		НаборНомПроф.Отбор.Номенклатура.Установить(Номен,Истина);
		НаборНомПроф.Прочитать();
		Для Каждого СтрНаборНомПроф Из НаборНомПроф Цикл
			Если СтрНаборНомПроф.Дископравка=Перечисления.ШМ_Дископравка.Стальной Тогда
				ТипДиска = "Ст.";
				Прервать;
			КонецЕсли;
			Если СтрНаборНомПроф.Дископравка=Перечисления.ШМ_Дископравка.Лекгосплавный Тогда
				ТипДиска = "Ал.";
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	Док.СуммаМатВычет = СуммаМатВычет;
	Док.СуммаМатВычетПроточка = СуммаМатВычетПроточка;
	Док.ТипДиска=ТипДиска;
	Док.КолГрузБезСкидок = КолГрузБезСкидок;
	Док.КолГрузСкидка20 = 0;
	Док.КолГрузСкидка50 = 0;
	Док.СуммаГрузБезСкидок = СуммаГрузБезСкидок;
	Док.СуммаГрузСкидка20 = 0;
	Док.СуммаГрузСкидка50 = 0;
	Если МенЗаписиОтл_СкидкаРазовая Тогда
		Док.ПроцентСкидкиЧерновик = 10;
	Иначе
		Док.ПроцентСкидкиЧерновик = 0;
	КонецЕсли;
	ТаблВизВывода = Новый ТаблицаЗначений;
	ТаблВизВывода.Колонки.Добавить("Должность");
	ТаблВизВывода.Колонки.Добавить("Сумма");
	СтрокаТаблВизВывода=ТаблВизВывода.Добавить();
	СтрокаТаблВизВывода.Должность=СтруктураПроф.Профессия;
	//СтрокаТаблВизВывода.Сумма=СуммаПозиции - СтруктураПроф.МатериальныйВычет;
	СтрокаТаблВизВывода.Сумма=СуммаПозиции - СуммаМатВычет;
	ТаблВизВывода.Свернуть("Должность","Сумма");
	Для Каждого СтрТаблВизВывода Из ТаблВизВывода Цикл
		Если СтрТаблВизВывода.Должность=Справочники.ШМ_Должности.НайтиПоНаименованию("Шиномонтажник") Тогда
			СуммаШиномонтаж=СтрТаблВизВывода.Сумма;
			СуммаШиномонтажЧерновик=СтрТаблВизВывода.Сумма;
		КонецЕсли;
		Если СтрТаблВизВывода.Должность=Справочники.ШМ_Должности.НайтиПоНаименованию("Съемщик") Тогда
			СуммаСъем=СтрТаблВизВывода.Сумма;
			СуммаСъемЧерновик=СтрТаблВизВывода.Сумма;
		КонецЕсли;
		Если СтрТаблВизВывода.Должность=Справочники.ШМ_Должности.НайтиПоНаименованию("Правщик дисков") Тогда
			СуммаДископравка=СтрТаблВизВывода.Сумма;
			СуммаДископравкаЧерновик=СтрТаблВизВывода.Сумма;
		КонецЕсли;
		Если СтрТаблВизВывода.Должность=Справочники.ШМ_Должности.НайтиПоНаименованию("Проточник") Тогда
			СуммаПроточкаЧерновик=СтрТаблВизВывода.Сумма;
		КонецЕсли;
	КонецЦикла;
	Док.СуммаШиномонтажЧерновик = СуммаШиномонтажЧерновик;
	Док.СуммаСъемЧерновик = СуммаСъемЧерновик;	
	Док.СуммаБалЧерновик = СуммаБалЧерновик;
	Док.СуммаДископравкаЧерновик = СуммаДископравкаЧерновик;
	Док.СуммаПроточкаЧерновик = СуммаПроточкаЧерновик;
	
	Док.Бирка = Бирка;
	Док.ЮЛ=ЮЛ;
	//Док.ВыбраноАвтоЮЛ=ВыбраноАвтоЮЛ;
	Док.Записать();
	//Для Каждого СтрТЧ ИЗ Таб Цикл
	НовСтр = Док.Товары.Добавить();
	НовСтр.Номенклатура = Номен;
	//НовСтр.Характеристика = СтрТЧ.Характеристика;
	НовСтр.Количество = КоличествоПозиции;
	НовСтр.КоличествоУпаковок = КоличествоПозиции;
	НовСтр.ВидЦены = Справочники.ВидыЦен.НайтиПоНаименованию("Прайс-лист");
	НовСтр.Цена = СуммаПозиции;
	//НовСтр.СтавкаНДС = НовСтр.Номенклатура.СтавкаНДС;
	НовСтр.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	НовСтр.Сумма = СуммаПозиции;
	НовСтр.СуммаНДС = 0;
	НовСтр.СуммаСНДС = СуммаПозиции;
	//Если СтрТЧ.СуммаСкидки<>0 Тогда
	//	НовСтр.СуммаРучнойСкидки=СтрТЧ.СуммаСкидки;
	//	НовСтр.ПроцентРучнойСкидки=(СтрТЧ.СуммаСкидки/(СтрТЧ.СуммаСкидки+СтрТЧ.Сумма))*100;
	//КонецЕсли;	
	НовСтр.Склад = Справочники.Склады.НайтиПоНаименованию("Основной").Ссылка;
		
		//ТоварыСтавкаНДСПриИзменении(НовСтр,Док);	
		
	//КонецЦикла;
	//Док.Записать(РежимЗаписиДокумента.Запись,РежимПроведенияДокумента.Неоперативный);
	Док.Записать();
	ЗаполнитьИсполнителяОтл(Док,Сотр);
	ДокРеал = Док.Ссылка;
	Док.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
	//Если СтрДлина(СокрЛП(ИдентификаторОтложенногоЧека))=0 Тогда
	//	ЗаполнитьИсполнителя(Док);
	//КонецЕсли;
	//Док.Записать();
	//ДокРеал = Док.Ссылка.ПолучитьОбъект();
	//Док.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
	//Док.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Функция ВернутьПроцентКупона(СтрТаб_Номенклатура)
	
		ПроцСк=0;
		НаборСкидки=РегистрыСведений.ШМ_Купоны.СоздатьНаборЗаписей();
		НаборСкидки.Отбор.Номенклатура.Установить(СтрТаб_Номенклатура,Истина);
		НаборСкидки.Прочитать();
		Для Каждого СтрНаборСкидки Из НаборСкидки Цикл
			ПроцСк=СтрНаборСкидки.ПроцентСкидки;
		КонецЦикла;
		Возврат ПроцСк;
		
КонецФункции


Функция ЗаполнитьИсполнителяОтл(Док,Сотр)
	
	Для каждого стр из Док.Товары Цикл
		
		ГруппаСтойка=Константы.ШМ_Стойка.Получить();
		Если Стр.Номенклатура.ПринадлежитЭлементу(ГруппаСтойка)=Ложь Тогда
		
		
		СтруктураПроф = ПрофессияНоменклатура(Стр.Номенклатура); //Сотрудник,Сотрудник2,Размер,Размер2,ВидОплаты
		
		НовыйНаборЗаписей = РегистрыСведений.ШМ_ИсполнителиРабот.СоздатьНаборЗаписей();
		НовыйНаборЗаписей.Отбор.Реализация.Установить(Док.ссылка, Истина);
		НовыйНаборЗаписей.Отбор.Номенклатура.Установить(Стр.Номенклатура, Истина);
		СотрудникТабЧасти 	 = Сотр; 
		НоменклатураТабЧасть = стр.Номенклатура.Ссылка; 
		ЭтоСотрудникВТаблице = Истина;
		
		Если СотрудникТабЧасти = Неопределено Тогда
			НовыйНаборЗаписей.Отбор.Исполнитель.Установить(СтруктураПроф.Сотрудник, Истина);
		Иначе
			НовыйНаборЗаписей.Отбор.Исполнитель.Установить(СотрудникТабЧасти, Истина);
		КонецЕсли;
		
		НоваяЗаписьНабора = НовыйНаборЗаписей.Добавить();
		НоваяЗаписьНабора.Реализация = Док.Ссылка;
		НоваяЗаписьНабора.Номенклатура = Стр.Номенклатура;
		Если СотрудникТабЧасти=Неопределено Тогда
			НоваяЗаписьНабора.Исполнитель = СтруктураПроф.Сотрудник;
			НоваяЗаписьНабора.Должность = СтруктураПроф.Профессия;
			стр.Исполнитель = НоваяЗаписьНабора.Исполнитель;
		Иначе
			 НоваяЗаписьНабора.Исполнитель = СотрудникТабЧасти;  
			 НоваяЗаписьНабора.Должность = ПолучитьДолжность(СотрудникТабЧасти, НоменклатураТабЧасть);
			 стр.Исполнитель = НоваяЗаписьНабора.Исполнитель;
		КонецЕсли;
		Если СтруктураПроф.ВидОплаты = Перечисления.ШМ_ВидОплатыЗаРаботу.ФиксированнаяСумма Тогда
			НоваяЗаписьНабора.Сумма = СтруктураПроф.Размер*стр.Количество;  
			стр.ЗарплатаРаботника = НоваяЗаписьНабора.Сумма;
		Иначе
			Если ЭтоСотрудникВТаблице=Ложь Тогда
				НоваяЗаписьНабора.Сумма = (Стр.Сумма - СтруктураПроф.МатериальныйВычет*стр.Количество)/ 100 * СтруктураПроф.Размер;     
				стр.ЗарплатаРаботника = НоваяЗаписьНабора.Сумма;
			Иначе
				НоваяЗаписьНабора.Сумма = (Стр.Сумма - СтруктураПроф.МатериальныйВычет*стр.Количество)/ 100 * (СтруктураПроф.Размер);
				стр.ЗарплатаРаботника = НоваяЗаписьНабора.Сумма;
			КонецЕсли;
		КонецЕсли;
		
		НовыйНаборЗаписей.Записать();
		
		//Для Каждого СтрТЧ ИЗ Таб Цикл
		//	Если СтрТЧ.Номенклатура=Стр.Номенклатура Тогда
		//		Если (СтрТЧ.КолГруз1>0) ИЛИ (СтрТЧ.КолГруз2>0) Тогда
		//			МенеджерГрузиков=РегистрыСведений.ШМ_Грузики.СоздатьМенеджерЗаписи();
		//			МенеджерГрузиков.Реализация=Док.Ссылка;
		//			МенеджерГрузиков.Номенклатура=Стр.Номенклатура;
		//			МенеджерГрузиков.КолГруз1=СтрТЧ.КолГруз1;
		//			МенеджерГрузиков.КолГруз2=СтрТЧ.КолГруз2;
		//			МенеджерГрузиков.Количество=СтрТЧ.Количество;
		//			МенеджерГрузиков.ГраммыГруз1=МенеджерГрузиков.КолГруз1*Константы.ШМ_Грузик1УдВес.Получить();
		//			МенеджерГрузиков.ГраммыГруз2=МенеджерГрузиков.КолГруз2*Константы.ШМ_Грузик2УдВес.Получить();
		//			МенеджерГрузиков.СтоимостьГруз1=МенеджерГрузиков.КолГруз1*Константы.ШМ_Грузик1УдСтоимость.Получить();
		//			МенеджерГрузиков.СтоимостьГруз2=МенеджерГрузиков.КолГруз2*Константы.ШМ_Грузик2УдСтоимость.Получить();
		//			МенеджерГрузиков.Записать();
		//		КонецЕсли;
		//	КонецЕсли;
		//КонецЦикла;
		
		Если (ЗначениеЗаполнено(СтруктураПроф.Сотрудник2)) И (ЭтоСотрудникВТаблице=Ложь) Тогда
			НовыйНаборЗаписей = РегистрыСведений.ШМ_ИсполнителиРабот.СоздатьНаборЗаписей();
			НовыйНаборЗаписей.Отбор.Реализация.Установить(Док.ссылка, Истина);
			НовыйНаборЗаписей.Отбор.Номенклатура.Установить(Стр.Номенклатура, Истина);
			Если СотрудникТабЧасти=Неопределено Тогда
				НовыйНаборЗаписей.Отбор.Исполнитель.Установить(СтруктураПроф.Сотрудник2, Истина);
			Иначе
				НовыйНаборЗаписей.Отбор.Исполнитель.Установить(СотрудникТабЧасти, Истина);
			КонецЕсли;
			
			НоваяЗаписьНабора = НовыйНаборЗаписей.Добавить();
			НоваяЗаписьНабора.Реализация = Док.Ссылка;
			НоваяЗаписьНабора.Номенклатура = Стр.Номенклатура;
			Если СотрудникТабЧасти=Неопределено Тогда
				НоваяЗаписьНабора.Исполнитель = СтруктураПроф.Сотрудник2;
				НоваяЗаписьНабора.Должность = СтруктураПроф.Профессия;
			Иначе
				НоваяЗаписьНабора.Исполнитель = СотрудникТабЧасти;    
				НоваяЗаписьНабора.Должность = ПолучитьДолжность(СотрудникТабЧасти, НоменклатураТабЧасть);
			КонецЕсли;
			НоваяЗаписьНабора.Помощник = Истина;
			Если СтруктураПроф.ВидОплаты = Перечисления.ШМ_ВидОплатыЗаРаботу.ФиксированнаяСумма Тогда
				НоваяЗаписьНабора.Сумма = СтруктураПроф.Размер2*стр.Количество;
			Иначе
				НоваяЗаписьНабора.Сумма = (Стр.Сумма - СтруктураПроф.МатериальныйВычет*стр.Количество) / 100 * СтруктураПроф.Размер2;
			КонецЕсли;
			
			НовыйНаборЗаписей.Записать();
		КонецЕсли;
		
		
		Иначе
			//СуммаСтойкиДляРаздела=Стр.Сумма/2;
			//
			//СписУчастников=Новый СписокЗначений;
			//КоличествоУчастников=0;
			//НаборСтойки=РегистрыСведений.ШМ_Стойка.СоздатьНаборЗаписей();
			//НаборСтойки.Отбор.Номенклатура.Установить(Стр.Номенклатура,Истина);
			//НаборСтойки.Прочитать();
			//Для Каждого СтрНаборСтойки Из НаборСтойки Цикл
			//	//Если СтрНаборСтойки.Продано>0 Тогда
			//	//	Если СтрНаборСтойки.Сотрудник1.Пустая()=Ложь Тогда
			//	//		КоличествоУчастников=КоличествоУчастников+1;
			//	//		СписУчастников.Добавить(СтрНаборСтойки.Сотрудник1.Ссылка);
			//	//	КонецЕсли;
			//	//	Если СтрНаборСтойки.Сотрудник2.Пустая()=Ложь Тогда
			//	//		КоличествоУчастников=КоличествоУчастников+1;
			//	//		СписУчастников.Добавить(СтрНаборСтойки.Сотрудник2.Ссылка);
			//	//	КонецЕсли;
			//	//	Если СтрНаборСтойки.Сотрудник3.Пустая()=Ложь Тогда
			//	//		КоличествоУчастников=КоличествоУчастников+1;
			//	//		СписУчастников.Добавить(СтрНаборСтойки.Сотрудник3.Ссылка);
			//	//	КонецЕсли;
			//	//КонецЕсли;
			//	Если СтрНаборСтойки.Идентификатор = Стр.
			//КонецЦикла;
			//
			//Для Сч=0 По СписУчастников.Количество()-1 Цикл
			//	НовыйНаборЗаписей = РегистрыСведений.ШМ_ИсполнителиРабот.СоздатьНаборЗаписей();
			//	НовыйНаборЗаписей.Прочитать();
			//	НоваяЗаписьНабора = НовыйНаборЗаписей.Добавить();
			//	НоваяЗаписьНабора.Реализация = Док.Ссылка;
			//	НоваяЗаписьНабора.Номенклатура = Стр.Номенклатура;
			//	НоваяЗаписьНабора.Исполнитель=СписУчастников.Получить(Сч).Значение;
			//	НоваяЗаписьНабора.Сумма=Окр(СуммаСтойкиДляРаздела/КоличествоУчастников,0);
			//	НовыйНаборЗаписей.Записать();
			//КонецЦикла;
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецФункции  

&НаСервере
Функция ПолучитьДолжность(Сотрудник, Номенклатура)     
	
	ЗапросБригады = Новый Запрос;
	ЗапросБригады.Текст = "ВЫБРАТЬ
	                      |	ШМ_БригадыСрезПоследних.Период КАК Период,
	                      |	ШМ_БригадыСрезПоследних.Должность КАК Должность,
	                      |	ШМ_БригадыСрезПоследних.Помощник КАК Помощник,
	                      |	ШМ_БригадыСрезПоследних.ИмяКомпьютера КАК ИмяКомпьютера,
	                      |	ШМ_БригадыСрезПоследних.Сотрудник КАК Сотрудник
	                      |ИЗ
	                      |	РегистрСведений.ШМ_Бригады.СрезПоследних(
	                      |			,
	                      |			ИмяКомпьютера = &ИмяКомпьютера
	                      |				И Сотрудник = &Сотрудник) КАК ШМ_БригадыСрезПоследних
	                      |ГДЕ
	                      |	ШМ_БригадыСрезПоследних.Период > &Период"; 
	
	ЗапросБригады.УстановитьПараметр("ИмяКомпьютера", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование);
	ЗапросБригады.УстановитьПараметр("Сотрудник", Сотрудник);
	ЗапросБригады.УстановитьПараметр("Период", ТекущаяДата() - 24*60*60);
	
	ВыборкаБригады = ЗапросБригады.Выполнить().Выгрузить(); 
	
	Если ВыборкаБригады.Количество() = 1 Тогда
		Возврат ВыборкаБригады[0].Должность;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ШМ_БригадыСрезПоследних.Период КАК Период,
		               |	ШМ_БригадыСрезПоследних.Должность КАК Должность,
		               |	ШМ_БригадыСрезПоследних.Помощник КАК Помощник,
		               |	ШМ_БригадыСрезПоследних.ИмяКомпьютера КАК ИмяКомпьютера,
		               |	ШМ_БригадыСрезПоследних.Сотрудник КАК Сотрудник
		               |ИЗ
		               |	РегистрСведений.ШМ_Бригады.СрезПоследних(
		               |			,
		               |			ИмяКомпьютера = &ИмяКомпьютера
		               |				И Сотрудник = &Сотрудник) КАК ШМ_БригадыСрезПоследних
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШМ_НоменклатураПрофессии КАК ШМ_НоменклатураПрофессии
		               |		ПО ШМ_БригадыСрезПоследних.Должность = ШМ_НоменклатураПрофессии.Профессия
		               |ГДЕ
		               |	ШМ_НоменклатураПрофессии.Номенклатура = &Номенклатура
		               |	И ШМ_БригадыСрезПоследних.Период > &Период"; 
		
		Запрос.УстановитьПараметр("ИмяКомпьютера", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование);
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("Период", ТекущаяДата() - 24*60*60);
		
		Выборка = Запрос.Выполнить().Выгрузить(); 
		
		Если НЕ Выборка.Количество() = 0 Тогда   
			Возврат Выборка[0].Должность;
		КонецЕсли;         
		
	КонецЕсли;
	
	Если НЕ Выборка.Количество() = 0 Тогда   
		Возврат Выборка[0].Должность;
	КонецЕсли; 
	
	Возврат Справочники.ШМ_Должности.ПустаяСсылка();
	
КонецФункции


Функция ПолучитьЦену(Ном)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ) КАК ЦеныНоменклатурыСрезПоследних
	|ГДЕ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура = &Ном";
	
	Запрос.УстановитьПараметр("Ном", Ном);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Цена;
	КонецЕсли;
	
	Возврат 0;
КонецФункции

Функция СоздатьКонтра(Наим)
	
	Контр = Справочники.Контрагенты.НайтиПоНаименованию(СокрЛП(Наим),Истина);
	Если Контр = Справочники.Контрагенты.ПустаяСсылка() Тогда
		КонтрП = Справочники.Партнеры.СоздатьЭлемент();
		КонтрП.Наименование = Наим;
		КонтрП.НаименованиеПолное = Наим;
		КонтрП.Клиент = Истина;
		КонтрП.Записать();
		
		Контр = Справочники.Контрагенты.СоздатьЭлемент();
		Контр.Наименование = Наим;
		Контр.НаименованиеПолное = Наим;
		Контр.Партнер = КонтрП.Ссылка;
		Контр.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
		
		Контр.Записать();
		Возврат Контр;
	Иначе
		Возврат Контр;
	КонецЕсли;
КонецФункции

Процедура ВыполнениеНаСервере(ИдентЧека)
	
	ВыполненоПолностью=Истина;
	Для Каждого СтрокаТаблицаОтложенных Из ТаблицаОтложенных Цикл
		Если СтрокаТаблицаОтложенных.Выполнен=Ложь Тогда
			ВыполненоПолностью=Ложь;
		КонецЕсли;
	КонецЦикла;
	Если ВыполненоПолностью Тогда
		Для Каждого СтрокаСписокОтложенных Из СписокОтложенных Цикл
			Если СтрокаСписокОтложенных.ИдентификаторЧека=ИдентЧека Тогда
				СтрокаСписокОтложенных.Выполнен=Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекВыполнен(Команда)

	Попытка
	ТС = Элементы.СписокОтложенных.ТекущиеДанные;
	ТСНом=Элементы.ТаблицаОтложенных.ТекущиеДанные;
	Если  ТСном.Выполнен = Истина тогда
		Предупреждение("Эта услуга уже была оказана!", 10);
	Иначе
	ЧекВыполненНаСервере(ТС.ИдентификаторЧека,ТСНом.Номенклатура);
	СписокОтложенныхПриАктивизацииСтроки(Элементы.СписокОтложенных);
	ВыполнениеНаСервере(ТС.ИдентификаторЧека);
	КонецЕсли
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Попытка
	ОткрытьФорму("Обработка.Шиномонтаж.Форма.Форма");
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоБирке(Команда)
	НомБиркиПоиска="";
	Если ВвестиСтроку(НомБиркиПоиска,"Введите номер бирки:",10,Ложь) Тогда
		Если РежимВыборки="Сделать" Тогда
			НевыполненныеНаСервере();
		ИначеЕсли РежимВыборки="Готовые" Тогда
			ТолькоВыполненныеНаСервере();
		ИначеЕсли РежимВыборки="Доделать" Тогда	
			ДоделатьНаСервере();
		ИначеЕсли РежимВыборки="Выданные" Тогда
			ТолькоВыданныеНаСервере();
		КонецЕсли;
	КонецЕсли;
	НомБиркиПоиска="";
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоНомеруМашины(Команда)
	НомМашиныПоиска="";
	Если ВвестиСтроку(НомМашиныПоиска,"Введите номер машины:",6,Ложь) Тогда
		Если РежимВыборки="Сделать" Тогда
			НевыполненныеНаСервере();
		ИначеЕсли РежимВыборки="Готовые" Тогда
			ТолькоВыполненныеНаСервере();
		ИначеЕсли РежимВыборки="Доделать" Тогда	
			ДоделатьНаСервере();
		ИначеЕсли РежимВыборки="Выданные" Тогда
			ТолькоВыданныеНаСервере();
		КонецЕсли;
	КонецЕсли;
	НомМашиныПоиска="";
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоТелефону(Команда)
	НомерТелефонаПоиска="";
	Если ВвестиСтроку(НомерТелефонаПоиска,"Введите номер телефона в формате 8(ХХХ)ХХХ-ХХ-ХХ:",15,Ложь) Тогда
		Если РежимВыборки="Сделать" Тогда
			НевыполненныеНаСервере();
		ИначеЕсли РежимВыборки="Готовые" Тогда
			ТолькоВыполненныеНаСервере();
		ИначеЕсли РежимВыборки="Доделать" Тогда	
			ДоделатьНаСервере();
		ИначеЕсли РежимВыборки="Выданные" Тогда
			ТолькоВыданныеНаСервере();
		КонецЕсли;
	КонецЕсли;
	НомерТелефонаПоиска="";
КонецПроцедуры

&НаКлиенте
Процедура СброситьПоиск(Команда)
	НомерТелефонаПоиска="";
	НомМашиныПоиска="";
	НомБиркиПоиска="";
	Если РежимВыборки="Сделать" Тогда
		НевыполненныеНаСервере();
	ИначеЕсли РежимВыборки="Готовые" Тогда
		ТолькоВыполненныеНаСервере();
	ИначеЕсли РежимВыборки="Доделать" Тогда	
		ДоделатьНаСервере();
	ИначеЕсли РежимВыборки="Выданные" Тогда
		ТолькоВыданныеНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ТолькоВыданныеНаСервере()
	СписокОтложенных.Очистить();
	ТаблицаОтложенных.Очистить();
	
	БуферОтложенных=Новый ТаблицаЗначений;
	БуферОтложенных.Колонки.Добавить("ИдентификаторЧека");
	БуферОтложенных.Колонки.Добавить("КоличествоВыполненых");
	БуферОтложенных.Колонки.Добавить("КоличествоНеВыполненых");
	
	//1softpro dev1 18.02.2025 +++  детализация отложеннывй чекво по текущему рабочему месту
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ШМ_ОтложенныеЧеки.ИдентификаторЧека КАК ИдентификаторЧека,
	               |	ШМ_ОтложенныеЧеки.Выполнен КАК Выполнен,
	               |	ШМ_ОтложенныеЧеки.ДатаЧека КАК ДатаЧека,
	               |	ШМ_ОтложенныеЧеки.Отбит КАК Отбит,
	               |	ШМ_ОтложенныеЧеки.Номенклатура КАК Номенклатура,
	               |	ШМ_ОтложенныеЧеки.НомерМашины КАК НомерМашины,
	               |	ШМ_ОтложенныеЧеки.Телефон КАК Телефон,
	               |	ШМ_ОтложенныеЧеки.Количество КАК Количество,
	               |	ШМ_ОтложенныеЧеки.Цена КАК Цена,
	               |	ШМ_ОтложенныеЧеки.Сумма КАК Сумма,
	               |	ШМ_ОтложенныеЧеки.Сотрудник КАК Сотрудник,
	               |	ШМ_ОтложенныеЧеки.СуммаБезСкидки КАК СуммаБезСкидки,
	               |	ШМ_ОтложенныеЧеки.СуммаСкидки КАК СуммаСкидки,
	               |	ШМ_ОтложенныеЧеки.Купон КАК Купон,
	               |	ШМ_ОтложенныеЧеки.Скидка КАК Скидка,
	               |	ШМ_ОтложенныеЧеки.Бирка КАК Бирка,
	               |	ШМ_ОтложенныеЧеки.КолГруз1 КАК КолГруз1,
	               |	ШМ_ОтложенныеЧеки.КолГруз2 КАК КолГруз2,
	               |	ШМ_ОтложенныеЧеки.ДатаВыполнения КАК ДатаВыполнения,
	               |	ШМ_ОтложенныеЧеки.СкидкаРазовая КАК СкидкаРазовая,
	               |	ШМ_ОтложенныеЧеки.РабочееМесто КАК РабочееМесто,
	               |	ШМ_ОтложенныеЧеки.Восстановить КАК Восстановить
	               |ИЗ
	               |	РегистрСведений.ШМ_ОтложенныеЧеки КАК ШМ_ОтложенныеЧеки
	               |ГДЕ
	               |	ШМ_ОтложенныеЧеки.РабочееМесто = &РабочееМесто";
	
	ТекущееРабочееМесто =  МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование; 
	Запрос.УстановитьПараметр("РабочееМесто", ТекущееРабочееМесто);
	
	ВыбОтложенных = Запрос.Выполнить().Выбрать();
	
	//Для детализации отложенных чеков по раьочемцу месту использую запрос. Прошлую выборку комментинрую +++
	//ВыбОтложенных=РегистрыСведений.ШМ_ОтложенныеЧеки.Выбрать();  
	//---
	
	//---
	
	Пока ВыбОтложенных.Следующий() Цикл
		Если ВыбОтложенных.Отбит=Ложь Тогда
			Продолжить;
		КонецЕсли;
		Если СтрДлина(НомБиркиПоиска)>0 Тогда
			Если Найти(ВыбОтложенных.ИдентификаторЧека,"бирка: "+СокрЛП(НомБиркиПоиска)+" ")=0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если СтрДлина(НомМашиныПоиска)>0 Тогда
			Если Найти(ВыбОтложенных.ИдентификаторЧека,"Номер машины: "+СокрЛП(НомМашиныПоиска)+" ")=0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если СтрДлина(НомерТелефонаПоиска)>0 Тогда
			Если Найти(ВыбОтложенных.ИдентификаторЧека,"Телефон: "+СокрЛП(НомерТелефонаПоиска))=0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если ВыбОтложенных.Выполнен=Истина Тогда
			СтрокаСБуфОтложенных=БуферОтложенных.Добавить();
			СтрокаСБуфОтложенных.ИдентификаторЧека=ВыбОтложенных.ИдентификаторЧека;
			СтрокаСБуфОтложенных.КоличествоВыполненых=1;
			СтрокаСБуфОтложенных.КоличествоНеВыполненых=0;
		ИначеЕсли ВыбОтложенных.Выполнен=Ложь Тогда
			СтрокаСБуфОтложенных=БуферОтложенных.Добавить();
			СтрокаСБуфОтложенных.ИдентификаторЧека=ВыбОтложенных.ИдентификаторЧека;
			СтрокаСБуфОтложенных.КоличествоВыполненых=0;
			СтрокаСБуфОтложенных.КоличествоНеВыполненых=1;
		КонецЕсли;
	КонецЦикла;
	
	БуферОтложенных.Свернуть("ИдентификаторЧека","КоличествоВыполненых,КоличествоНеВыполненых");
	Для Каждого СтрокаБуферОтложенных Из БуферОтложенных Цикл
		Если (СтрокаБуферОтложенных.КоличествоВыполненых>0) И (СтрокаБуферОтложенных.КоличествоНеВыполненых=0) Тогда
			СтрокаСписокОтложенных=СписокОтложенных.Добавить();
			СтрокаСписокОтложенных.ИдентификаторЧека=СтрокаБуферОтложенных.ИдентификаторЧека;
			СтрокаСписокОтложенных.Выполнен=Ложь;
		КонецЕсли;
	КонецЦикла;
	РежимВыборки="Выданные";
КонецПроцедуры

&НаКлиенте
Процедура ТолькоВыданные(Команда)
	ТолькоВыданныеНаСервере();
КонецПроцедуры
