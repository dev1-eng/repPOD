&НаСервереБезКонтекста
Функция ПолучитьСписокЭлементов(Родитель)
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Наименование");
	ТЗ.Колонки.Добавить("ЭтоГруппа");
	ТЗ.Колонки.Добавить("Код");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка.Наименование КАК Наименование,
	|	Номенклатура.ЭтоГруппа,
	|	Номенклатура.Ссылка,
	|	Номенклатура.Код
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Родитель = &Родитель";
	
	Запрос.УстановитьПараметр("Родитель",Родитель);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	ГруппаИсключения=Справочники.Номенклатура.НайтиПоНаименованию("16. Только Материалы (без Работ)");
	ИсключаемГруппуСтойки=Справочники.Номенклатура.НайтиПоНаименованию("15. Стойка");
	
	Пока Выборка.Следующий() Цикл
		Если (ГруппаИсключения.Ссылка=Выборка.Ссылка) ИЛИ (Выборка.Ссылка.ПринадлежитЭлементу(ГруппаИсключения)) Тогда
			Продолжить;
		КонецЕсли;
		Если (ИсключаемГруппуСтойки.Ссылка=Выборка.Ссылка) ИЛИ (Выборка.Ссылка.ПринадлежитЭлементу(ИсключаемГруппуСтойки)) Тогда
			Продолжить;
		КонецЕсли;
		НС = ТЗ.Добавить();
		НС.Наименование = Выборка.Наименование;	
		НС.ЭтоГруппа = Выборка.ЭтоГруппа;
		НС.Код = Выборка.Код;
	КонецЦикла;
	
	ТЗ.Сортировать("Наименование");
	
	Возврат ТЗ;
	
КонецФункции


&НаСервере
Процедура ПриСозданииНаСервере()
	Род = Справочники.Номенклатура.ПустаяСсылка();
	СоздатьЭлемент(Род);
КонецПроцедуры

&НаСервере
Функция СоздатьСтроку(НомерСтроки,Родит)
	
	НомерСтроки	= НомерСтроки + 1;
	ИмяСтроки = "Строка" + НомерСтроки;
	ТекущаяСтрока = Элементы.Добавить(ИмяСтроки, Тип("ГруппаФормы"), ЭтаФорма.Элементы.Группа);
	
	ТекущаяСтрока.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ТекущаяСтрока.Отображение = ОтображениеОбычнойГруппы.Нет;
	ТекущаяСтрока.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ТекущаяСтрока.ОтображатьЗаголовок = Истина;
	
	ТекущаяСтрока.Заголовок = Родит.Наименование;
	РодВверх = Родит;
	Возврат ТекущаяСтрока;
	
КонецФункции

&НаСервере
Процедура СоздатьЭлемент(Родит)
	
	ВысотаКнопки = 10;
	ШиринаКнопки = 15;
	КоличествоКолонок = 5;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШМ_Кнопки.ШиринаКнопки,
	|	ШМ_Кнопки.ВысотаКнопки,
	|	ШМ_Кнопки.КоличествоКолонок
	|ИЗ
	|	РегистрСведений.ШМ_Кнопки КАК ШМ_Кнопки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ВысотаКнопки = Выборка.ВысотаКнопки;
		ШиринаКнопки = Выборка.ШиринаКнопки;
		КоличествоКолонок = Выборка.КоличествоКолонок;
	КонецЦикла;	
	
	МассивЭлементовДляУдаления = Новый Массив();
	Для каждого Элемент Из ЭтаФорма.Элементы.Группа.ПодчиненныеЭлементы Цикл
		МассивЭлементовДляУдаления.Добавить(Элемент);
	КонецЦикла; 
	
	Для каждого Элемент Из МассивЭлементовДляУдаления Цикл
		Попытка
			ЭтаФорма.Элементы.Удалить(Элемент);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	
	ТЗ = ПолучитьСписокЭлементов(Родит);
	НомерСтроки = 0;
	ТекущаяСтрока = СоздатьСтроку(НомерСтроки,Родит);    	
	Для Каждого Стр ИЗ ТЗ Цикл
		//КнопкаНовая = Элементы.Добавить("К_" + Строка(Стр.Код), Тип("КнопкаФормы"),	ТекущаяСтрока);
		КнопкаНовая = Элементы.Добавить("К"+Прав(Стр.Код,6), Тип("КнопкаФормы"),	ТекущаяСтрока);
		КнопкаНовая.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		КнопкаНовая.ИмяКоманды = "СобытиеНажатиеКнопки";
		ДлинаНаим = СтрДлина(Стр.Наименование);
		СтрокЗаг = ДлинаНаим / ШиринаКнопки;
		СтрокЗаг = Цел(СтрокЗаг) + pow(0, pow(0, СтрокЗаг % 1));
		НС = СтрокЗаг;
		Заг = "";
		сч = 0;
		Пока сч <> НС Цикл
			сч = сч + 1;
			Заг = Заг + сред(Стр.Наименование,?(сч = 1,1,(ШиринаКнопки * (сч-1)) + 1),ШиринаКнопки) + Символы.ПС;
		КонецЦикла;
		КнопкаНовая.Заголовок = Заг;//Стр.Наименование;
		КнопкаНовая.Ширина = ШиринаКнопки;
		КнопкаНовая.Высота = ВысотаКнопки;
		КнопкаНовая.Шрифт=Новый Шрифт(КнопкаНовая.Шрифт,,,Истина,,,,);
		Если Стр.ЭтоГруппа Тогда
			КнопкаНовая.ЦветФона = WebЦвета.Желтый;
		КонецЕсли;
		Если ПолучитьКоличествоКнопокВГруппе(ТекущаяСтрока.Имя) > КоличествоКолонок Тогда	
			ТекущаяСтрока = СоздатьСтроку(НомерСтроки,Родит);	
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры

Процедура ОчиститьКнопки()
	
	МассивЭлементовДляУдаления = Новый Массив();
	Для каждого Элемент Из ЭтаФорма.Элементы.Группа.ПодчиненныеЭлементы Цикл
		МассивЭлементовДляУдаления.Добавить(Элемент);
	КонецЦикла; 
	
	Для каждого Элемент Из МассивЭлементовДляУдаления Цикл
		Попытка
			ЭтаФорма.Элементы.Удалить(Элемент);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Функция СчитаемГрузикиВГраммах()
	
	Возврат Константы.ШМ_Считаем_Грузики_В_граммах.Получить();
	
КонецФункции

Функция ГрузикЕдинственный()
	
	Если Константы.ШМ_Грузик1.Получить()=Константы.ШМ_Грузик2.Получить() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СобытиеНажатиеКнопки(Команда)
	
	Перем КолГруз1,КолГруз2,Кол;
	
	КолГруз1=0;
	КолГруз2=0;
	Кол=1;
	
	Ном = ПолучитьЭлементПоНаименованию(СтрЗаменить(ТекущийЭлемент.Заголовок,Символы.пс,""));
	Если ПроверитьГруппу(Ном) Тогда
		СоздатьЭлемент(Ном);
	Иначе
		Если ИспользуютсяГрузики(Ном) Тогда
			Если СчитаемГрузикиВГраммах() Тогда
				ВвестиЧисло(Кол,"Количество Колес",15,0);
				Если Не ГрузикЕдинственный() Тогда
					ВвестиЧисло(КолГруз1,"Количество грамм: Груз набивной со скобкой",15,0);
					ВвестиЧисло(КолГруз2,"Количество грамм: Груз самоклеящийся",15,0);
				Иначе
					ВвестиЧисло(КолГруз1,"Количество грамм: Груз балансировочный",15,0);
				КонецЕсли;
			Иначе
				//ВвестиЧисло(Кол,"Количество Колес",15,0);
				//Если Не ГрузикЕдинственный() Тогда
				//	ВвестиЧисло(КолГруз1,"Количество Груз набивной со скобкой",15,0);
				//	ВвестиЧисло(КолГруз2,"Количество Груз самоклеящийся",15,0);
				//Иначе
				//	ВвестиЧисло(КолГруз1,"Количество Груз балансировочный",15,0);
				//КонецЕсли;
				КолГруз1=0;
				КолГруз2=0;
			КонецЕсли;
		Иначе
			КолГруз1=0;
			КолГруз2=0;
		КонецЕсли;
		Если Строка(Ном)="09. Установка проставочного кольца (1шт.)" Тогда
			Кол=4;
			ВвестиЧисло(Кол,"Количество Колец",15,0);
		КонецЕсли;
				
		Если ЭтоКомплект(Ном)=Ложь Тогда
			ДобавитьСтрокуВТаблицу(Ном,КолГруз1,КолГруз2,Кол);
		КонецЕсли;
	КонецЕсли;
	
	Если СейчасСкидка Тогда
		СкидкаНаСервере();
	КонецЕсли;
	Если СейчасСкидкаРазовая Тогда
		СкидкаНаСервереРазовая();
	КонецЕсли;
	Если СейчасКупон Тогда
		КупонНаСервере();
	КонецЕсли;
	Если СкидкаИнетМаг Тогда
		СкидкаНаСервереИнетМаг();
	КонецЕсли;
	
	Если Не ЭтоТовар(Ном) Тогда 
		ТаблицаПриОкончанииРедактированияНаСервере();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ЭтоТовар(Номенклатура)
	
	Возврат Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
	
КонецФункции	

Функция ЭтоКомплект(Ном)
	
	ЭтоКомплект=Ложь;
	НаборКомплекта=РегистрыСведений.ШМ_Комплекты.СоздатьНаборЗаписей();
	НаборКомплекта.Отбор.НоменклатураКомплект.Установить(Ном,Истина);
	НаборКомплекта.Прочитать();
	Для Каждого СтрНаборКомплекта Из НаборКомплекта Цикл
		ЭтоКомплект=Истина;
		Если Найти(Ном.Наименование,"6 колес")>0 Тогда
			ДобавитьСтрокуВТаблицу(СтрНаборКомплекта.НоменклатураСостав,0,0,6);
		Иначе
			ДобавитьСтрокуВТаблицу(СтрНаборКомплекта.НоменклатураСостав,0,0,4);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЭтоКомплект;
	
КонецФункции

&НаСервере
Процедура ДобавитьСтрокуВТаблицу(Ном,КолГруз1,КолГруз2,Кол)
	
	Отбор = Новый Структура();
	Отбор.Вставить("Номенклатура",Ном);
	Строки = Таб.НайтиСтроки(Отбор);
	Если Строки.Количество() = 0 Тогда
		НС = Таб.Добавить();
		НС.Номенклатура = Ном;
		НС.Количество = Кол;
		НС.Цена = ПолучитьЦену(Ном);
		НС.Сумма = НС.Цена * НС.Количество;
		НС.СуммаБезСкидки = НС.Цена * НС.Количество;
		НС.КолГруз1=КолГруз1;
		НС.КолГруз2=КолГруз2;
		//Добавляем Грузики
		Если КолГруз1>0 Тогда
			НС = Таб.Добавить();
			НС.Номенклатура = Константы.ШМ_Грузик1.Получить();
			НС.Количество = КолГруз1;
			НС.Цена = Константы.ШМ_Грузик1УдСтоимость.Получить();
			НС.Сумма = НС.Цена * НС.Количество;
			НС.СуммаБезСкидки = НС.Цена * НС.Количество;
			НС.КолГруз1=0;
			НС.КолГруз2=0;
		КонецЕсли;
		Если КолГруз2>0 Тогда
			НС = Таб.Добавить();
			НС.Номенклатура = Константы.ШМ_Грузик2.Получить();
			НС.Количество = КолГруз2;
			НС.Цена = Константы.ШМ_Грузик2УдСтоимость.Получить();
			НС.Сумма = НС.Цена * НС.Количество;
			НС.СуммаБезСкидки = НС.Цена * НС.Количество;
			НС.КолГруз1=0;
			НС.КолГруз2=0;
		КонецЕсли;
		ПересчитатьИтог();
	Иначе
		НС = Строки[0];
		НС.Количество = НС.Количество + 1;
		НС.Сумма = НС.Цена * НС.Количество;
		НС.СуммаБезСкидки = НС.Цена * НС.Количество;
		НС.КолГруз1=НС.КолГруз1+КолГруз1;
		НС.КолГруз2=НС.КолГруз2+КолГруз2;
		//Добавляем Грузики
		Если КолГруз1>0 Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Номенклатура",Константы.ШМ_Грузик1.Получить());
			Строки = Таб.НайтиСтроки(Отбор);
			Попытка
			НС = Строки[0];
			//НС.Номенклатура = Константы.ШМ_Грузик1.Получить();
			НС.Количество = НС.Количество + КолГруз1;
			НС.Цена = Константы.ШМ_Грузик1УдСтоимость.Получить();
			НС.Сумма = НС.Цена * НС.Количество;
			НС.СуммаБезСкидки = НС.Цена * НС.Количество;
			НС.КолГруз1=0;
			НС.КолГруз2=0;
			Исключение
				НС = Таб.Добавить();
				НС.Номенклатура = Константы.ШМ_Грузик1.Получить();
				НС.Количество = КолГруз1;
				НС.Цена = Константы.ШМ_Грузик1УдСтоимость.Получить();
				НС.Сумма = НС.Цена * НС.Количество;
				НС.СуммаБезСкидки = НС.Цена * НС.Количество;
				НС.КолГруз1=0;
				НС.КолГруз2=0;
			КонецПопытки;
		КонецЕсли;
		Если КолГруз2>0 Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Номенклатура",Константы.ШМ_Грузик2.Получить());
			Строки = Таб.НайтиСтроки(Отбор);
			Попытка
			НС = Строки[0];
			//НС.Номенклатура = Константы.ШМ_Грузик2.Получить();
			НС.Количество = НС.Количество + КолГруз2;
			НС.Цена = Константы.ШМ_Грузик2УдСтоимость.Получить();
			НС.Сумма = НС.Цена * НС.Количество;
			НС.СуммаБезСкидки = НС.Цена * НС.Количество;
			НС.КолГруз1=0;
			НС.КолГруз2=0;
			Исключение
				НС = Таб.Добавить();
				НС.Номенклатура = Константы.ШМ_Грузик2.Получить();
				НС.Количество = КолГруз2;
				НС.Цена = Константы.ШМ_Грузик2УдСтоимость.Получить();
				НС.Сумма = НС.Цена * НС.Количество;
				НС.СуммаБезСкидки = НС.Цена * НС.Количество;
				НС.КолГруз1=0;
				НС.КолГруз2=0;
			КонецПопытки;
		КонецЕсли;
		//ПересчитатьИтог();
		ПересчитатьИтог();
	КонецЕсли;
	Элементы.Таблица.ТекущаяСтрока = НС.ПолучитьИдентификатор();
		
КонецПроцедуры	

&НаСервере
Функция ПолучитьЦену(Ном)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ) КАК ЦеныНоменклатурыСрезПоследних
	|ГДЕ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура = &Ном";
	
	Запрос.УстановитьПараметр("Ном", Ном);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Цена;
	КонецЕсли;
	
	Возврат 0;
КонецФункции

&НаСервере
Функция ПроверитьГруппу(Ном)
	Возврат Ном.ЭтоГруппа;
КонецФункции

&НаСервере
Функция ПолучитьЭлементПоНаименованию(Наим)
	Возврат Справочники.Номенклатура.НайтиПоНаименованию(Наим,Истина,РодВверх.Ссылка).Ссылка;
КонецФункции

&НаСервере
Функция ИспользуютсяГрузики(Ном)
	
	НаборНомПроф=РегистрыСведений.ШМ_НоменклатураПрофессии.СоздатьНаборЗаписей();
	НаборНомПроф.Отбор.Номенклатура.Установить(Ном,Истина);
	НаборНомПроф.Прочитать();
	Для Каждого СтрНаборНомПроф Из НаборНомПроф Цикл
		Если СтрНаборНомПроф.ИспГрузики=Истина Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ПолучитьКоличествоКнопокВГруппе(ИмяСтроки)
	
	ЧислоКнопок = 0;
	
	Для Каждого Элемент Из Элементы[ИмяСтроки].ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("КнопкаФормы") Тогда
			ЧислоКнопок = ЧислоКнопок + 1;	
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЧислоКнопок;
	
КонецФункции

&НаКлиенте
Процедура ПлюсКоличество(Команда)
	ТС = Элементы.Таблица.ТекущиеДанные;
	ТС.Количество = ТС.Количество + 1;
	ТС.Сумма = ТС.Количество * ТС.Цена;
	ТС.СуммаБезСкидки = ТС.Цена * ТС.Количество;
	ПересчитатьИтог();
	
	Если СейчасСкидка Тогда
		СкидкаНаСервере();
	КонецЕсли;
	Если СейчасСкидкаРазовая Тогда
		СкидкаНаСервереРазовая();
	КонецЕсли;
	Если СейчасКупон Тогда
		КупонНаСервере();
	КонецЕсли;
	Если СкидкаИнетМаг Тогда
		СкидкаНаСервереИнетМаг();
	КонецЕсли;

	ТаблицаПриОкончанииРедактированияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура МинусКоличество(Команда)
	Попытка
	ТС = Элементы.Таблица.ТекущиеДанные;
	Если ТС.Количество > 1 Тогда
		ТС.Количество = ТС.Количество - 1;
		ТС.Сумма = ТС.Количество * ТС.Цена;
		ТС.СуммаБезСкидки = ТС.Цена * ТС.Количество;
		ПересчитатьИтог();
	ИначеЕсли ТС.Количество = 1 Тогда
		ЭтаФорма.Таб.Удалить(ЭтаФорма.Таб.НайтиПоИдентификатору(Элементы.Таблица.ТекущаяСтрока));
		//ЭтаФорма.Таб.Удалить(ЭтаФорма.Таб[Элементы.Таблица.ТекущаяСтрока-1]);
	КонецЕсли;
	Если СейчасСкидка Тогда
		СкидкаНаСервере();
	КонецЕсли;
	Если СейчасСкидкаРазовая Тогда
		СкидкаНаСервереРазовая();
	КонецЕсли;
	Если СейчасКупон Тогда
		КупонНаСервере();
	КонецЕсли;
	Если СкидкаИнетМаг Тогда
		СкидкаНаСервереИнетМаг();
	КонецЕсли;

	ТаблицаПриОкончанииРедактированияНаСервере();
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ПересчитатьИтог()
	Элементы.ИтогСумма.Заголовок = "Ʃ Итог: " + Таб.Итог("Сумма");
	Элементы.СуммаИтогБезДископравки.Заголовок = "Ʃ Ш+С+М: " + (СуммаШиномонтаж+СуммаСъем+СуммаМатВычет);
КонецПроцедуры

&НаСервере
Процедура ТаблицаПриОкончанииРедактированияНаСервере()
	ЗаполнитьВизуальныйРасчет(СейчасСкидка,СкидкаИнетМаг,СейчасКупон);
	ПересчитатьИтог();
КонецПроцедуры

&НаСервере
Процедура ДомойНаСервере()
	Род = Справочники.Номенклатура.ПустаяСсылка();
	СоздатьЭлемент(Род);
КонецПроцедуры

&НаКлиенте
Процедура Домой(Команда)
	ДомойНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВверхНаСервере()
	СоздатьЭлемент(РодВверх.Родитель);
КонецПроцедуры

&НаКлиенте
Процедура Вверх(Команда)
	ВверхНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)
	ОткрытьФорму("Обработка.Шиномонтаж.Форма.Настройка");
	ЭтаФорма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура СоставСмены()
	ОткрытьФорму("Обработка.Шиномонтаж.Форма.Бригада");
	ЭтаФорма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Клавиатура(Команда)
	ЗапуститьПриложение("C:\Work\M\freevk.exe");
	ЭтаФорма.ТекущийЭлемент = ЭтаФорма.Элементы.НомерМашины;
КонецПроцедуры

&НаСервере
Функция СоздатьКонтра(Наим)
	
	Контр = Справочники.Контрагенты.НайтиПоНаименованию(СокрЛП(НомерМашины),Истина);
	Если Контр = Справочники.Контрагенты.ПустаяСсылка() Тогда
		КонтрП = Справочники.Партнеры.СоздатьЭлемент();
		КонтрП.Наименование = Наим;
		КонтрП.НаименованиеПолное = Наим;
		КонтрП.Клиент = Истина;
		КонтрП.Записать();
		
		Контр = Справочники.Контрагенты.СоздатьЭлемент();
		Контр.Наименование = Наим;
		Контр.НаименованиеПолное = Наим;
		Контр.Партнер = КонтрП.Ссылка;
		Контр.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
		
		Контр.Записать();
		Возврат Контр;
	Иначе
		Возврат Контр;
	КонецЕсли;
КонецФункции

&НаСервере
Функция РассчитыватьСдачу()
	
	Возврат Константы.ШМ_РассчитыватьСдачу.Получить();
	
КонецФункции

&НаСервере
Функция СуммаДокПриОформлении()
	
	Возврат Таб.Итог("Сумма");
	
КонецФункции

&НаСервере
Функция Наличные()
	
	Если ФормаОплаты=Перечисления.ФормыОплаты.Наличная Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗапрашиватьТипОплаты()
	
	Возврат Константы.ШМ_ЗапрашиватьТипОплаты.Получить();
	
КонецФункции

&НаСервере
Функция ТекущийТипОплаты()
	
	Возврат Строка(ФормаОплаты);
	
КонецФункции

&НаСервере
Функция ТипОплатыНаличные()
	Возврат Перечисления.ФормыОплаты.Наличная;
КонецФункции

&НаСервере
Функция ПолучитьКассуККМ(ТекущееРабочееМесто) 

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиРМККассыККМ.КассаККМ КАК КассаККМ
	               |ИЗ
	               |	Справочник.НастройкиРМК.КассыККМ КАК НастройкиРМККассыККМ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиРМК КАК НастройкиРМК
	               |		ПО НастройкиРМККассыККМ.Ссылка = НастройкиРМК.Ссылка
	               |ГДЕ
	               |	НастройкиРМК.РабочееМесто = &РабочееМесто"; 
	
	Запрос.УстановитьПараметр("РабочееМесто", ТекущееРабочееМесто);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		Возврат Выборка.КассаККМ
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ПроверкаСмены()
	лТекст = "ВЫБРАТЬ
	         |	КассоваяСмена.НачалоКассовойСмены КАК НачалоКассовойСмены,
	         |	ШМ_СменыСрезПоследних.Период КАК Период
	         |ИЗ
	         |	Документ.КассоваяСмена КАК КассоваяСмена,
	         |	РегистрСведений.ШМ_Смены.СрезПоследних КАК ШМ_СменыСрезПоследних
	         |ГДЕ
	         |	ШМ_СменыСрезПоследних.ИмяКомпьютера = &ИмяКомпьютера
	         |	И ШМ_СменыСрезПоследних.СменаЗакрыта = &СменаЗакрыта
	         |	И КассоваяСмена.Статус = &Статус
	         |	И КассоваяСмена.КассаККМ = &КассаККМ
	         |	И КассоваяСмена.Проведен = ИСТИНА";

	лЗапрос = Новый Запрос(лТекст);

    ТекущееРабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	
	ИмяКомпьютера = ТекущееРабочееМесто.Наименование;
	КассаККМ = ПолучитьКассуККМ(ТекущееРабочееМесто);
	СменаЗакрыта = Ложь;
	Статус = Перечисления.СтатусыКассовойСмены.Открыта; 
	
	лЗапрос.УстановитьПараметр("ИмяКомпьютера", ИмяКомпьютера);
	лЗапрос.УстановитьПараметр("КассаККМ", КассаККМ);
	лЗапрос.УстановитьПараметр("СменаЗакрыта", СменаЗакрыта);
	лЗапрос.УстановитьПараметр("Статус", Статус);

	лВыборка = лЗапрос.Выполнить().Выгрузить();

	Для каждого стр из лВыборка Цикл  
		Если ЗначениеЗаполнено(стр.НачалоКассовойСмены) И ТекущаяДата() - стр.НачалоКассовойСмены >= 60*60*24 Тогда 
			Возврат Ложь  
		ИначеЕсли ЗначениеЗаполнено(стр.Период) И ТекущаяДата() - стр.Период >= 60*60*24 Тогда
			Возврат Ложь
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Истина

КонецФункции

&НаКлиенте
Процедура Оформить(Команда) 
	
	//1softpro pok +++
    НоваяСмена = ПроверкаСмены();
	Если НЕ НоваяСмена Тогда  
		Сообщить("Кассовая смена открыта более 24 часов. Закройте смену и откройте новую");
		Возврат;
	КонецЕсли;
	//---
		
	//1softpro bez +++ 22/01/25  
	//Если (СейчасСкидкаРазовая=Истина) ИЛИ (СейчасСкидка=Истина) ИЛИ (СейчасКупон=Истина) Тогда
	//	Предупреждение("Разрешена скидка только на 7 позиций!");
	//	Возврат;
	//КонецЕсли;
	Если (СейчасСкидка=Истина) ИЛИ (СейчасКупон=Истина) Тогда
		Предупреждение("Разрешена скидка только на 7 позиций!");
		Возврат;
	КонецЕсли;
	//---
	
	Если (СейчасСкидкаРазовая=Ложь) И (СейчасСкидка=Ложь) И (СейчасКупон=Ложь) И (СкидкаИнетМаг=Ложь) Тогда
		
		ЕстьСкидка=Ложь;
		Для Каждого СтрТаб Из Таб Цикл
			Если СтрТаб.СуммаСкидки>0 Тогда
				ЕстьСкидка=Истина;
			КонецЕсли;
		КонецЦикла;	
		//Если ЕстьСкидка=Ложь Тогда 
			//Предупреждение("Отбитие без скидки запрещено!");
			//Возврат;
		//КонецЕсли;
	КонецЕсли;
	
	Если (СейчасСкидка=Истина) ИЛИ (СейчасСкидкаРазовая=Истина) ИЛИ (СкидкаИнетМаг=Истина) Тогда
		Если Вопрос("У клиента есть карточка?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да Тогда
			Если Не ЗначениеЗаполнено(Телефон) Тогда
				Если Вопрос("Необходимо указать номер телефона для указания скидочной карты! Продолжить без указания телефона (данные о карте не будут записаны)?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Нет Тогда
					Сообщить("Укажите номер телефона!");
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	СтойкаНайдена=Ложь;
	Для Каждого СтрокаТаб Из Таб Цикл
		Если СтрДлина(СокрЛП(СтрокаТаб.ИдентификаторСтойки))>0 Тогда
			СтойкаНайдена=Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если СтойкаНайдена=Истина Тогда
		Если Не ЗначениеЗаполнено(Телефон) Тогда
			Сообщить("Укажите номер телефона!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерМашины) Тогда
		//Если ЗапрашиватьТипОплаты() Тогда
		//	
		//	Если ВвестиЗначение(ФормаОплаты, "Введите Тип Оплаты", ТипЗнч(ФормаОплаты)) Тогда
		//	Иначе
		//		Возврат;
		//	КонецЕсли;
		//	
		//	//Если Вопрос("Текущий тип оплаты:"+ТекущийТипОплаты()+"?",РежимДиалогаВопрос.ДаНет,,,"Запрос типа оплаты",)=КодВозвратаДиалога.Нет Тогда
		//	//	Возврат;
		//	//КонецЕсли;
		//	
		//КонецЕсли;
		//Если РассчитыватьСдачу() И Наличные() Тогда
		//	СуммаНаличных=0;
		//	ВвестиЧисло(СуммаНаличных,"Сумма наличных",15,0);
		//	СуммаДокПриОформлении=СуммаДокПриОформлении();
		//	Сдача=0;
		//	Сдача=СуммаНаличных-СуммаДокПриОформлении;
		//	Если Сдача>=0 Тогда
		//		Предупреждение(Сдача,20,"Сдача:");
		//	Иначе
		//		Предупреждение("Сумма к оплате превышает сумму наличных!");
		//		Возврат;
		//	КонецЕсли;
		//КонецЕсли;    
		
		//1softpro pok 01042025 +++ добавил описание ошибки не заведенной номенклатуры в РС номенклатура профессии в комментарий реализации
		Комментарий = ТекстОшибкиРС;   
				//СоздатьРеализацию(СокрЛП(НомерМашины), Ложь);
		СоздатьРеализацию(СокрЛП(НомерМашины), Комментарий, Ложь);  
		Комментарий = "";
		//---
		ПроведениеРеализаций();
		ЗаписьVisa();
		Если ВыводитьТовЧек() Тогда
			Если ВыводитьТовЧекНаПринтер()=Ложь Тогда
				ТоварныйЧек();
			Иначе
				ТоварныйЧекНаПринтер();
			конецЕсли;
		КонецЕсли;
		Если ((СейчасСкидка=Истина) ИЛИ (СейчасСкидкаРазовая=Истина)) И (ЗначениеЗаполнено(Телефон)) Тогда
			ЗаписатьКартуСкидки(Телефон);
		КонецЕсли;
		ФормаЧек = ПолучитьФорму("Документ.ЧекККМ.Форма.ФормаДокументаРМК");
		ДанныеФормы = ФормаЧек.Объект;
		ЗаполнитьЧекНаСервере(ДанныеФормы);
		КопироватьДанныеФормы(ДанныеФормы, ФормаЧек.Объект);
		ФормаЧек.МК_Текст = МК_СформироватьТекстКопииЧека();
		ФормаЧек.Открыть();
		ИдентификаторОтложенногоЧека="";
		Таб.Очистить();
		НомерМашины = "";
		Телефон = "";
		Бирка = "";
		ФормаОплаты=ТипОплатыНаличные();
		ДомойНаСервере();
		ОтменаСкидок(Команда);
        //ЗаписьVisaПустая();
	Иначе
		Сообщить("Не заполнен номер машины!!!");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьКартуСкидки(ТелефонДляЗаписи)
	СпрКартыСкидок = Справочники.ШМ_КартыСкидок.СоздатьЭлемент();
	СпрКартыСкидок.Наименование = ТелефонДляЗаписи;
	СпрКартыСкидок.Записать();
КонецПроцедуры

Процедура ЗаписьVisa()
	Константы.ШМРеализацияVISA.Установить(ДокРеал.Ссылка);
КонецПроцедуры

//Процедура ЗаписьVisaПустая()
//	Константы.ШМРеализацияVISA.Установить(Документы.РеализацияТоваровУслуг.ПустаяСсылка());
//КонецПроцедуры



&НаСервере
Процедура ЗаполнитьЧекНаСервере(ДанныеФормы)
	
	Док = ДанныеФормыВЗначение(ДанныеФормы, Тип("ДокументОбъект.ЧекККМ"));
	Док = Документы.ЧекККМ.СоздатьДокумент();
	Док.Кассир = Объект.Бригадир;
	Док.ВидЦены = Справочники.ВидыЦен.НайтиПоНаименованию("Прайс-лист");
			
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассыККМ.КассаККМ КАК КассаККМ
	|ИЗ
	|	Справочник.НастройкиРМК.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.Ссылка.РабочееМесто = &РабочееМесто
	|");
	Запрос.УстановитьПараметр("РабочееМесто",МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	КассаККМ = Выборка.КассаККМ;
	//Док.КассаККМ = Справочники.КассыККМ.НайтиПоНаименованию("Фискальный регистратор (Основной)");
	Док.КассаККМ = КассаККМ;
	Док.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД;
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	|	Номенклатура,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	СуммаБезСкидки,
	|	СуммаСкидки
	|ПОМЕСТИТЬ вТаб
	|ИЗ
	|	&Таб КАК Таб;
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Рег.Профессия, &Шиномонтаж) = &Правщик ТОГДА &Правка
	|		КОГДА ЕСТЬNULL(Рег.Профессия, &Шиномонтаж) = &Съемщик ТОГДА &Съем
	|		КОГДА ЕСТЬNULL(Рег.Профессия, &Шиномонтаж) = &Проточник ТОГДА &Проточка
	|		КОГДА ЕСТЬNULL(Рег.Профессия, &Шиномонтаж) = &Шиномонтажник ТОГДА &Шиномонтаж
	|		КОГДА Таб.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар) ТОГДА Таб.Номенклатура
	|		ИНАЧЕ &Шиномонтаж
	|	КОНЕЦ КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС) КАК СтавкаНДС,
	|	СУММА(Таб.Сумма) КАК Цена,
	|	1 КАК КоличествоУпаковок,
	|	1 КАК Количество,
	|	СУММА(Таб.Сумма) КАК Сумма,
	//|	СУММА(Таб.СуммаБезСкидки) КАК СуммаБезСкидки,
	//|	СУММА(Таб.СуммаСкидки) КАК СуммаРучнойСкидки,
	|	&Сотрудник КАК Продавец
	|ИЗ
	|	вТаб КАК Таб
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШМ_НоменклатураПрофессии КАК Рег
	|ПО
	|	Рег.Номенклатура = Таб.Номенклатура
	|СГРУППИРОВАТЬ ПО
	|	Рег.Профессия, Таб.Номенклатура";
	Если Константы.ИспользоватьКороткийЧекШиномонтаж.Получить()=Ложь Тогда
	
	Запрос.УстановитьПараметр("Правка", Справочники.Номенклатура.НайтиПоНаименованию("Правка", Истина));
	Запрос.УстановитьПараметр("Правщик", Справочники.ШМ_Должности.НайтиПоНаименованию("Правщик дисков", Истина));
	Запрос.УстановитьПараметр("Съем", Справочники.Номенклатура.НайтиПоНаименованию("Съем", Истина));
	Запрос.УстановитьПараметр("Съемщик", Справочники.ШМ_Должности.Съемщик);
	Запрос.УстановитьПараметр("Проточка", Справочники.Номенклатура.НайтиПоНаименованию("Проточка", Истина));
	Запрос.УстановитьПараметр("Проточник", Справочники.ШМ_Должности.НайтиПоНаименованию("Проточник", Истина));
	Запрос.УстановитьПараметр("Шиномонтаж", Справочники.Номенклатура.НайтиПоНаименованию("Шиномонтаж", Истина));
	Запрос.УстановитьПараметр("Шиномонтажник", Справочники.ШМ_Должности.Шиномонтажник);
	Запрос.УстановитьПараметр("Сотрудник", Справочники.Пользователи.НайтиПоНаименованию("Сотрудник", Истина));
	Запрос.УстановитьПараметр("Таб", Таб.Выгрузить());
	
	Иначе
	
	Запрос.УстановитьПараметр("Правка", Справочники.Номенклатура.НайтиПоНаименованию("Автоуслуги", Истина));
	Запрос.УстановитьПараметр("Правщик", Справочники.ШМ_Должности.НайтиПоНаименованию("Правщик дисков", Истина));
	Запрос.УстановитьПараметр("Съем", Справочники.Номенклатура.НайтиПоНаименованию("Автоуслуги", Истина));
	Запрос.УстановитьПараметр("Съемщик", Справочники.ШМ_Должности.Съемщик);
	Запрос.УстановитьПараметр("Проточка", Справочники.Номенклатура.НайтиПоНаименованию("Автоуслуги", Истина));
	Запрос.УстановитьПараметр("Проточник", Справочники.ШМ_Должности.НайтиПоНаименованию("Проточник", Истина));
	Запрос.УстановитьПараметр("Шиномонтаж", Справочники.Номенклатура.НайтиПоНаименованию("Автоуслуги", Истина));
	Запрос.УстановитьПараметр("Шиномонтажник", Справочники.ШМ_Должности.Шиномонтажник);
	Запрос.УстановитьПараметр("Сотрудник", Справочники.Пользователи.НайтиПоНаименованию("Сотрудник", Истина));
	Запрос.УстановитьПараметр("Таб", Таб.Выгрузить());
	
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	ТабТовары = Запрос.Выполнить().Выгрузить();
	
	Если Константы.ИспользоватьКороткийЧекШиномонтаж.Получить()=Ложь Тогда
		ТабТовары.Свернуть("Номенклатура,СтавкаНДС,Продавец", "Цена, КоличествоУпаковок, Количество, Сумма");
	Иначе
		ТабТовары.Свернуть("Номенклатура,СтавкаНДС,Продавец", "Цена, КоличествоУпаковок, Количество, Сумма");
		Для Каждого СтрокаТабТовары Из ТабТовары Цикл
			СтрокаТабТовары.Количество=1;
			СтрокаТабТовары.КоличествоУпаковок=1;
		КонецЦикла;
	КонецЕсли;
	Док.Товары.Загрузить(ТабТовары);
	
	ЗначениеВДанныеФормы(Док,ДанныеФормы);

КонецПроцедуры

&НаСервере
Процедура ПроведениеРеализаций()
	ВыбРеал=Документы.РеализацияТоваровУслуг.Выбрать(ТекущаяДата()-10,ТекущаяДата()+10);
	Пока ВыбРеал.Следующий() Цикл
		Если (ВыбРеал.Проведен=Ложь) И (ВыбРеал.ПометкаУдаления=Ложь) Тогда
			ОбжДок=ВыбРеал.ПолучитьОбъект();
			//ОбжДок.ДатаПлатежа=ОбжДок.Дата;
			
			ОбжДок.Записать(РежимЗаписиДокумента.Проведение);
			ДокРеал=ОбжДок.Ссылка;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ВыводитьТовЧек()
	Возврат Константы.ШМ_ВыводитьТоварныйЧек.Получить();	
КонецФункции

&НаСервере
Функция ВыводитьТовЧекНаПринтер()
	Возврат Константы.ШМ_ВыводитьТоварныйЧекНаПринтер.Получить();	
КонецФункции

&НаКлиенте
Процедура ТоварныйЧекНаПринтер()
	ТабДок = ПолучитьЗапросТоварныйЧек();
	ТабДок.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
КонецПроцедуры

&НаСервере
Процедура СоздатьРеализацию(Наим, Ошибка, ЮЛ)
	
	Если СтрДлина(СокрЛП(ИдентификаторОтложенногоЧека))>0 Тогда

		ВыбОтложенных=РегистрыСведений.ШМ_ОтложенныеЧеки.Выбрать();
		Пока ВыбОтложенных.Следующий() Цикл
			Если СокрЛП(ВыбОтложенных.ИдентификаторЧека)=СокрЛП(ИдентификаторОтложенногоЧека) Тогда
				МенЗаписиОтл=ВыбОтложенных.ПолучитьМенеджерЗаписи();
				МенЗаписиОтл.Прочитать();
				МенЗаписиОтл.Отбит=Истина;
				МенЗаписиОтл.Записать();
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	
	Док = Документы.РеализацияТоваровУслуг.СоздатьДокумент(); 
	ТекущееРабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента(); 
	Док.ИмяКомпьютера= ТекущееРабочееМесто.Наименование;
	Док.Контрагент = СоздатьКонтра(Наим);
	Док.Партнер = Док.Контрагент.Партнер;
	Док.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
	НаименОрг = "тест";
	Док.Организация = Справочники.Организации.НайтиПоНаименованию(НаименОрг); 	
	Док.Склад = ПолучитьСклад(ПользователиКлиентСервер.ТекущийПользователь());
	Док.Дата = ТекущаяДата();
	Док.Валюта = Справочники.Валюты.НайтиПоКоду("643").Ссылка;
	Док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	Док.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаПоПатенту;
	Док.СуммаДокумента = Таб.Итог("Сумма");
	Док.СуммаВзаиморасчетов = Таб.Итог("Сумма");
	Док.Курс = 1;
	Док.ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоКоду("643").Ссылка;
	Док.ФормаОплаты = ФормаОплаты;
	Док.ЦенаВключаетНДС=Истина;
	Док.Комментарий=Наим ;//Ошибка
	Док.СуммаМатВычет = СуммаМатВычет;
	Док.СуммаМатВычетПроточка = СуммаМатВычетПроточка;
	Док.ТипДиска=ТипДиска;
	Док.КолГрузБезСкидок = КолГрузБезСкидок;
	Док.КолГрузСкидка20 = КолГрузСкидка20;
	Док.КолГрузСкидка50 = КолГрузСкидка50;
	Док.СуммаГрузБезСкидок = СуммаГрузБезСкидок;
	Док.СуммаГрузСкидка20 = СуммаГрузСкидка20;
	Док.СуммаГрузСкидка50 = СуммаГрузСкидка50;
	Док.ПроцентСкидкиЧерновик = ПроцентСкидкиЧерновик;
	Док.СуммаШиномонтажЧерновик = СуммаШиномонтажЧерновик;
	Док.СуммаСъемЧерновик = СуммаСъемЧерновик;
	Док.СуммаБалЧерновик = СуммаБалЧерновик;
	Док.СуммаДископравкаЧерновик = СуммаДископравкаЧерновик;
	Док.СуммаСПЦЧерновик = СуммаСПЦЧерновик;//СПЦ
	Док.СуммаПроточкаЧерновик = СуммаПроточкаЧерновик;
	Док.Бирка = Бирка;
	Док.ЮЛ=ЮЛ;
	Док.ВыбраноАвтоЮЛ=ВыбраноАвтоЮЛ;
	Док.Ошибка = Ошибка;
	
	Док.Записать();
	Для Каждого СтрТЧ ИЗ Таб Цикл 
		Если стрТЧ.Выполнен = Ложь Тогда
			НовСтр = Док.Товары.Добавить();
			НовСтр.Номенклатура = СтрТЧ.Номенклатура;
			НовСтр.Характеристика = СтрТЧ.Характеристика;
			НовСтр.Количество = СтрТЧ.Количество;
			НовСтр.КоличествоУпаковок = СтрТЧ.Количество;
			НовСтр.ВидЦены = Справочники.ВидыЦен.НайтиПоНаименованию("Прайс-лист");
			НовСтр.Цена = СтрТЧ.Цена;
			НовСтр.РаботаВыполнена = СтрТЧ.Выполнен; 
			НовСтр.Исполнитель = СтрТЧ.Сотрудник;
			//НовСтр.СтавкаНДС = НовСтр.Номенклатура.СтавкаНДС;
			НовСтр.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			НовСтр.Сумма = СтрТЧ.Сумма;
			НовСтр.СуммаНДС = 0;
			НовСтр.СуммаСНДС = СтрТЧ.Сумма;
			Если СтрТЧ.СуммаСкидки<>0 Тогда
				НовСтр.СуммаРучнойСкидки=СтрТЧ.СуммаСкидки;
				НовСтр.ПроцентРучнойСкидки=(СтрТЧ.СуммаСкидки/(СтрТЧ.СуммаСкидки+СтрТЧ.Сумма))*100;
			КонецЕсли;	
			НовСтр.Склад = Справочники.Склады.НайтиПоНаименованию("Основной").Ссылка;
			
			//ТоварыСтавкаНДСПриИзменении(НовСтр,Док);
			
			ГруппаСтойка=Константы.ШМ_Стойка.Получить();
			Если СтрТЧ.Номенклатура.ПринадлежитЭлементу(ГруппаСтойка)=Истина Тогда
				ВыбОтложенных=РегистрыСведений.ШМ_Стойка.Выбрать();
				Пока ВыбОтложенных.Следующий() Цикл
					Если ВыбОтложенных.Идентификатор=СтрТЧ.ИдентификаторСтойки Тогда
						МенЗаписиОтл=ВыбОтложенных.ПолучитьМенеджерЗаписи();
						МенЗаписиОтл.Прочитать();
						МенЗаписиОтл.ДатаПродажи=ТекущаяДата();
						МенЗаписиОтл.ЦенаПродажи=СтрТЧ.Сумма;
						МенЗаписиОтл.Продано=Истина;
						МенЗаписиОтл.ПродалСотрудник=СтрТЧ.Сотрудник;
						
						
						СуммаСтойкиДляРаздела=СтрТЧ.Сумма/2;
						СписУчастников=Новый СписокЗначений;
						КоличествоУчастников=0;
						Если СтрДлина(СокрЛП(МенЗаписиОтл.Сотрудник1.Наименование))<>0 Тогда
							КоличествоУчастников=КоличествоУчастников+1;
							СписУчастников.Добавить(МенЗаписиОтл.Сотрудник1.Ссылка);
						КонецЕсли;
						Если СтрДлина(СокрЛП(МенЗаписиОтл.Сотрудник2.Наименование))<>0 Тогда
							КоличествоУчастников=КоличествоУчастников+1;
							СписУчастников.Добавить(МенЗаписиОтл.Сотрудник2.Ссылка);
						КонецЕсли;
						Если СтрДлина(СокрЛП(МенЗаписиОтл.Сотрудник3.Наименование))<>0 Тогда
							КоличествоУчастников=КоличествоУчастников+1;
							СписУчастников.Добавить(МенЗаписиОтл.Сотрудник3.Ссылка);
						КонецЕсли;
						Если СписУчастников.Количество()=1 Тогда
							НовыйНаборЗаписей = РегистрыСведений.ШМ_ИсполнителиРабот.СоздатьНаборЗаписей();
							//НовыйНаборЗаписей.Прочитать();
							НоваяЗаписьНабора = НовыйНаборЗаписей.Добавить();
							НоваяЗаписьНабора.Реализация = Док.Ссылка;
							НоваяЗаписьНабора.Номенклатура = СтрТЧ.Номенклатура;
							НоваяЗаписьНабора.Исполнитель=СписУчастников.Получить(0).Значение;
							НоваяЗаписьНабора.Сумма=Окр(СуммаСтойкиДляРаздела/КоличествоУчастников,0);
							НоваяЗаписьНабора.ИдентификаторСтойки=СтрТЧ.ИдентификаторСтойки;  
							НовСтр.Исполнитель = НоваяЗаписьНабора.Исполнитель;  
							НовСтр.ЗарплатаРаботника = НоваяЗаписьНабора.Сумма; 
							НовыйНаборЗаписей.Записать();
							Если МенЗаписиОтл.Сотрудник1 = СписУчастников.Получить(0).Значение Тогда
								МенЗаписиОтл.ДолженЗабратьДеньгиСотрудник1 = Окр(СуммаСтойкиДляРаздела/КоличествоУчастников,0);
							ИначеЕсли МенЗаписиОтл.Сотрудник2 = СписУчастников.Получить(0).Значение Тогда
								МенЗаписиОтл.ДолженЗабратьДеньгиСотрудник2 = Окр(СуммаСтойкиДляРаздела/КоличествоУчастников,0);
							ИначеЕсли МенЗаписиОтл.Сотрудник3 = СписУчастников.Получить(0).Значение Тогда
								МенЗаписиОтл.ДолженЗабратьДеньгиСотрудник3 = Окр(СуммаСтойкиДляРаздела/КоличествоУчастников,0);
							КонецЕсли;
						ИначеЕсли СписУчастников.Количество()>1 Тогда
							Для Сч=0 По СписУчастников.Количество()-1 Цикл
								НовыйНаборЗаписей = РегистрыСведений.ШМ_ИсполнителиРабот.СоздатьНаборЗаписей();
								//НовыйНаборЗаписей.Прочитать();
								НоваяЗаписьНабора = НовыйНаборЗаписей.Добавить();
								НоваяЗаписьНабора.Реализация = Док.Ссылка;
								НоваяЗаписьНабора.Номенклатура = СтрТЧ.Номенклатура;
								НоваяЗаписьНабора.Исполнитель=СписУчастников.Получить(Сч).Значение;
								НоваяЗаписьНабора.Сумма=Окр(СуммаСтойкиДляРаздела/КоличествоУчастников,0);
								НоваяЗаписьНабора.ИдентификаторСтойки=СтрТЧ.ИдентификаторСтойки;   
								НовСтр.Исполнитель = НоваяЗаписьНабора.Исполнитель;
								НовСтр.ЗарплатаРаботника = НоваяЗаписьНабора.Сумма;
								НовыйНаборЗаписей.Записать();
								Если МенЗаписиОтл.Сотрудник1 = СписУчастников.Получить(Сч).Значение Тогда
									МенЗаписиОтл.ДолженЗабратьДеньгиСотрудник1 = Окр(СуммаСтойкиДляРаздела/КоличествоУчастников,0);
								ИначеЕсли МенЗаписиОтл.Сотрудник2 = СписУчастников.Получить(Сч).Значение Тогда
									МенЗаписиОтл.ДолженЗабратьДеньгиСотрудник2 = Окр(СуммаСтойкиДляРаздела/КоличествоУчастников,0);
								ИначеЕсли МенЗаписиОтл.Сотрудник3 = СписУчастников.Получить(Сч).Значение Тогда
									МенЗаписиОтл.ДолженЗабратьДеньгиСотрудник3 = Окр(СуммаСтойкиДляРаздела/КоличествоУчастников,0);
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						МенЗаписиОтл.Записать();
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//Док.Записать(РежимЗаписиДокумента.Запись,РежимПроведенияДокумента.Неоперативный);
	
	//++Безроднов Заполнения доп.Сведения
	//Попытка
	//	ДопСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "МатериалыДископравка_b4cd4999151045618790f0239ed4a109");
	//	Если ЗначениеЗаполнено(ДопСвойство) Тогда
	//		Набор = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	//	    Набор.Отбор.Объект.Установить(Док.Ссылка);
	//	    Набор.Отбор.Свойство.Установить(ДопСвойство);

	//	    НоваяСтрокаНабора = Набор.Добавить();
	//	    НоваяСтрокаНабора.Объект = Док.Ссылка;
	//	    НоваяСтрокаНабора.Свойство = ДопСвойство;
	//	    НоваяСтрокаНабора.Значение = СуммаМатВычет;

	//    	Набор.Записать();                              
	//	КонецЕсли;
	//Исключение
	//КонецПопытки;
	//--
	
	Док.Записать();     
	
	
	//ЗаполнитьИсполнителя(Док);
	
	Если СтрДлина(СокрЛП(ИдентификаторОтложенногоЧека))=0 Тогда
		ЗаполнитьИсполнителя(Док);
	Иначе
		Док.ПометкаУдаления=Истина;
	КонецЕсли;  
	
	Док.Записать();
	ДокРеал = Док.Ссылка; 
	
	
	
	//Док.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
	//Док.Записать(РежимЗаписиДокумента.Проведение);
	
	//Если СтрДлина(СокрЛП(ИдентификаторОтложенногоЧека))<>0 Тогда

	//ВыбОтложенных=РегистрыСведений.ШМ_ОтложенныеЧеки.Выбрать();
	//Пока ВыбОтложенных.Следующий() Цикл
	//	Если СокрЛП(ВыбОтложенных.ИдентификаторЧека)=СокрЛП(ИдентификаторОтложенногоЧека) Тогда
	//		МенЗаписиОтл=ВыбОтложенных.ПолучитьМенеджерЗаписи();
	//		МенЗаписиОтл.Прочитать();
	//		МенЗаписиОтл.Отбит=Истина;
	//		МенЗаписиОтл.Записать();
	//	КонецЕсли;
	//КонецЦикла;
	
	//КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьРеализациюПоМатериалам(Наим)
	
	НачалоСмены=НачалоСмены();
	
	Док = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	Док.ИмяКомпьютера = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование;
	Док.Контрагент = СоздатьКонтра(Наим);
	Док.Партнер = Док.Контрагент.Партнер;
	Док.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
	НаименОрг = "тест";
	Док.Организация = Справочники.Организации.НайтиПоНаименованию(НаименОрг);
	//Док.Склад = Справочники.Склады.НайтиПоНаименованию("Основной").Ссылка;
	Док.Склад = ПолучитьСклад(ПользователиКлиентСервер.ТекущийПользователь());
	Док.Дата = ТекущаяДата();
	Док.Валюта = Справочники.Валюты.НайтиПоКоду("643").Ссылка;
	Док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	Док.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	//Док.СуммаДокумента = Таб.Итог("Сумма");
	Док.Курс = 1;
	Док.ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоКоду("643").Ссылка;
	Док.ФормаОплаты = ФормаОплаты;
	//Док.ДатаПлатежа = ТекущаяДата();
	Док.ЮЛ=Ложь;
	Док.Комментарий="Материалы";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровУслуг.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |ГДЕ
	               |	РеализацияТоваровУслуг.Проведен = &Проведен
	               |	И РеализацияТоваровУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	               |	И РеализацияТоваровУслуг.ИмяКомпьютера = &ИмяКомпьютера";
	
	Запрос.УстановитьПараметр("Проведен", Истина); 
	Запрос.УстановитьПараметр("НачалоПериода", НачалоСмены);
	Запрос.УстановитьПараметр("КонецПериода", ТекущаяДата());   
	Запрос.УстановитьПараметр("ИмяКомпьютера", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование); 
	
	ВыбРеализ = Запрос.Выполнить().Выбрать(); 

	Пока ВыбРеализ.Следующий() Цикл

		Для Каждого СтрокаВыбРеализ Из ВыбРеализ.Ссылка.Товары Цикл
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ШМ_НоменклатураПрофессии.Номенклатура,
			|	ШМ_НоменклатураПрофессии.Профессия,
			|	ШМ_НоменклатураПрофессии.ВидОплаты,
			|	ШМ_НоменклатураПрофессии.МатериальныйВычет,
			|	ШМ_НоменклатураПрофессии.Материал,
			|	ШМ_НоменклатураПрофессии.ИспГрузики,
			|	ШМ_НоменклатураПрофессии.РазмерОплаты
			|ИЗ
			|	РегистрСведений.ШМ_НоменклатураПрофессии КАК ШМ_НоменклатураПрофессии
			|ГДЕ
			|	ШМ_НоменклатураПрофессии.Номенклатура = &Номенклатура";
	
			Запрос.УстановитьПараметр("Номенклатура",СтрокаВыбРеализ.Номенклатура);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Не Выборка.Материал.Пустая() Тогда
					НовСтр = Док.Товары.Добавить();
					НовСтр.Номенклатура = Выборка.Материал;
					//НовСтр.Характеристика = СтрТЧ.Характеристика;
					Если Выборка.ИспГрузики Тогда
						НовСтр.Количество = Выборка.МатериальныйВычет/ПолучитьЦену(Выборка.Материал)*СтрокаВыбРеализ.Количество;
						НовСтр.КоличествоУпаковок = НовСтр.Количество;
					Иначе
						НовСтр.Количество = СтрокаВыбРеализ.Количество;
						НовСтр.КоличествоУпаковок = СтрокаВыбРеализ.Количество;
					КонецЕсли;
					НовСтр.ВидЦены = Справочники.ВидыЦен.НайтиПоНаименованию("Прайс-лист");
					НовСтр.Цена = ПолучитьЦену(Выборка.Материал);
					НовСтр.СтавкаНДС = НовСтр.Номенклатура.СтавкаНДС;
					НовСтр.Сумма = НовСтр.Цена*НовСтр.Количество;
					//НовСтр.Склад = Справочники.Склады.НайтиПоНаименованию("Основной").Ссылка;
					НовСтр.Склад = ПолучитьСклад(ПользователиКлиентСервер.ТекущийПользователь());
					//ТоварыСтавкаНДСПриИзменении(НовСтр,Док);
					Док.СуммаДокумента=Док.СуммаДокумента+НовСтр.Сумма;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	Док.Записать();
	//ЗаполнитьИсполнителя(Док);
	ДокРеал = Док.Ссылка;
	Док.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
КонецПроцедуры

&НаСервере
Функция ЗаполнитьИсполнителя(Док)
	Для каждого стр из Док.Товары Цикл 
		Если стр.РаботаВыполнена = Ложь Тогда
		
			ГруппаСтойка=Константы.ШМ_Стойка.Получить();
			Если Стр.Номенклатура.ПринадлежитЭлементу(ГруппаСтойка)=Ложь Тогда
			
			
			СтруктураПроф = ПрофессияНоменклатура(Стр.Номенклатура); //Сотрудник,Сотрудник2,Размер,Размер2,ВидОплаты
			
			НовыйНаборЗаписей = РегистрыСведений.ШМ_ИсполнителиРабот.СоздатьНаборЗаписей();
			НовыйНаборЗаписей.Отбор.Реализация.Установить(Док.ссылка, Истина);
			НовыйНаборЗаписей.Отбор.Номенклатура.Установить(Стр.Номенклатура, Истина);
			СотрудникТабЧасти=Неопределено;
			ЭтоСотрудникВТаблице=Ложь;
			Для Каждого СтрТЧ ИЗ Таб Цикл
				Если СтрТЧ.Номенклатура=Стр.Номенклатура Тогда
					Если СтрТЧ.Сотрудник.Пустая()=Ложь Тогда
						СотрудникТабЧасти=СтрТЧ.Сотрудник.Ссылка;
						НоменклатураТабЧасть = СтрТЧ.Номенклатура.Ссылка;
						ЭтоСотрудникВТаблице=Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если СотрудникТабЧасти=Неопределено Тогда
				НовыйНаборЗаписей.Отбор.Исполнитель.Установить(СтруктураПроф.Сотрудник, Истина);
			Иначе
				НовыйНаборЗаписей.Отбор.Исполнитель.Установить(СотрудникТабЧасти, Истина);
			КонецЕсли;
			
			НоваяЗаписьНабора = НовыйНаборЗаписей.Добавить();
			НоваяЗаписьНабора.Реализация = Док.Ссылка;
			НоваяЗаписьНабора.Номенклатура = Стр.Номенклатура;
			Если СотрудникТабЧасти=Неопределено Тогда   
				
				НоваяЗаписьНабора.Исполнитель = СтруктураПроф.Сотрудник;
				НоваяЗаписьНабора.Должность = СтруктураПроф.Профессия; 
				
				Если ЗначениеЗаполнено(стр.Исполнитель) = Ложь Тогда
					стр.Исполнитель = НоваяЗаписьНабора.Исполнитель;
				КонецЕсли;
			Иначе     
				
				 НоваяЗаписьНабора.Исполнитель = СотрудникТабЧасти;    
				 НоваяЗаписьНабора.Должность = ПолучитьДолжность(СотрудникТабЧасти, НоменклатураТабЧасть);  
				 
				 Если ЗначениеЗаполнено(стр.Исполнитель) = Ложь Тогда
					стр.Исполнитель = НоваяЗаписьНабора.Исполнитель;
				 КонецЕсли;
			КонецЕсли;
			Если СтруктураПроф.ВидОплаты = Перечисления.ШМ_ВидОплатыЗаРаботу.ФиксированнаяСумма Тогда
				НоваяЗаписьНабора.Сумма = СтруктураПроф.Размер*стр.Количество;
				стр.ЗарплатаРаботника = НоваяЗаписьНабора.Сумма;
			Иначе
				СтрСумма = Стр.Сумма;
				Если Константы.ШМЗарплатаСУчетомСкидки.Получить()=Ложь Тогда
					Если (СейчасСкидкаРазовая=Истина) ИЛИ (СейчасСкидка=Истина) ИЛИ (СкидкаИнетМаг=Истина) Тогда
						СтрСумма = ПолучитьЦену(Стр.Номенклатура)*стр.Количество;
					КонецЕсли;
				КонецЕсли;
				Если ЭтоСотрудникВТаблице=Ложь Тогда
					НоваяЗаписьНабора.Сумма = (СтрСумма - СтруктураПроф.МатериальныйВычет*стр.Количество)/ 100 * СтруктураПроф.Размер;
					стр.ЗарплатаРаботника = НоваяЗаписьНабора.Сумма; 
				Иначе
					НоваяЗаписьНабора.Сумма = (СтрСумма - СтруктураПроф.МатериальныйВычет*стр.Количество)/ 100 * (СтруктураПроф.Размер*2);  
					стр.ЗарплатаРаботника = НоваяЗаписьНабора.Сумма; 
				КонецЕсли;
			КонецЕсли;
			
			НовыйНаборЗаписей.Записать();
			
			Для Каждого СтрТЧ ИЗ Таб Цикл
				Если СтрТЧ.Номенклатура=Стр.Номенклатура Тогда
					Если (СтрТЧ.КолГруз1>0) ИЛИ (СтрТЧ.КолГруз2>0) Тогда
						МенеджерГрузиков=РегистрыСведений.ШМ_Грузики.СоздатьМенеджерЗаписи();
						МенеджерГрузиков.Реализация=Док.Ссылка;
						МенеджерГрузиков.Номенклатура=Стр.Номенклатура;
						МенеджерГрузиков.КолГруз1=СтрТЧ.КолГруз1;
						МенеджерГрузиков.КолГруз2=СтрТЧ.КолГруз2;
						МенеджерГрузиков.Количество=СтрТЧ.Количество;
						МенеджерГрузиков.ГраммыГруз1=МенеджерГрузиков.КолГруз1*Константы.ШМ_Грузик1УдВес.Получить();
						МенеджерГрузиков.ГраммыГруз2=МенеджерГрузиков.КолГруз2*Константы.ШМ_Грузик2УдВес.Получить();
						МенеджерГрузиков.СтоимостьГруз1=МенеджерГрузиков.КолГруз1*Константы.ШМ_Грузик1УдСтоимость.Получить();
						МенеджерГрузиков.СтоимостьГруз2=МенеджерГрузиков.КолГруз2*Константы.ШМ_Грузик2УдСтоимость.Получить();
						МенеджерГрузиков.Записать();
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если (ЗначениеЗаполнено(СтруктураПроф.Сотрудник2)) И (ЭтоСотрудникВТаблице=Ложь) Тогда
				НовыйНаборЗаписей = РегистрыСведений.ШМ_ИсполнителиРабот.СоздатьНаборЗаписей();
				НовыйНаборЗаписей.Отбор.Реализация.Установить(Док.ссылка, Истина);
				НовыйНаборЗаписей.Отбор.Номенклатура.Установить(Стр.Номенклатура, Истина);
				Если СотрудникТабЧасти=Неопределено Тогда
					НовыйНаборЗаписей.Отбор.Исполнитель.Установить(СтруктураПроф.Сотрудник2, Истина);
				Иначе
					НовыйНаборЗаписей.Отбор.Исполнитель.Установить(СотрудникТабЧасти, Истина);
				КонецЕсли;
				
				НоваяЗаписьНабора = НовыйНаборЗаписей.Добавить();
				НоваяЗаписьНабора.Реализация = Док.Ссылка;
				НоваяЗаписьНабора.Номенклатура = Стр.Номенклатура;
				Если СотрудникТабЧасти=Неопределено Тогда
					НоваяЗаписьНабора.Исполнитель = СтруктураПроф.Сотрудник2;
					НоваяЗаписьНабора.Должность   = СтруктураПроф.Профессия;
					Если ЗначениеЗаполнено(стр.Исполнитель) = Ложь Тогда
						стр.Исполнитель = НоваяЗаписьНабора.Исполнитель;
					КонецЕсли;
				Иначе
					НоваяЗаписьНабора.Исполнитель = СотрудникТабЧасти;
					НоваяЗаписьНабора.Должность   = ПолучитьДолжность(СотрудникТабЧасти, НоменклатураТабЧасть);
					Если ЗначениеЗаполнено(стр.Исполнитель) = Ложь Тогда
						стр.Исполнитель = НоваяЗаписьНабора.Исполнитель;
					КонецЕсли;
				КонецЕсли;
				НоваяЗаписьНабора.Помощник = Истина;
				Если СтруктураПроф.ВидОплаты = Перечисления.ШМ_ВидОплатыЗаРаботу.ФиксированнаяСумма Тогда
					НоваяЗаписьНабора.Сумма = СтруктураПроф.Размер2*стр.Количество; 
					стр.ЗарплатаРаботника = НоваяЗаписьНабора.Сумма;
				Иначе
					СтрСумма = Стр.Сумма;
					Если Константы.ШМЗарплатаСУчетомСкидки.Получить()=Ложь Тогда
						//Если СейчасСкидкаРазовая=Истина Тогда
						Если (СейчасСкидкаРазовая=Истина) ИЛИ (СейчасСкидка=Истина) ИЛИ (СкидкаИнетМаг=Истина) Тогда
							СтрСумма = ПолучитьЦену(Стр.Номенклатура)*стр.Количество;
						КонецЕсли;
					КонецЕсли;
					НоваяЗаписьНабора.Сумма = (СтрСумма - СтруктураПроф.МатериальныйВычет*стр.Количество) / 100 * СтруктураПроф.Размер2;
					стр.ЗарплатаРаботника = НоваяЗаписьНабора.Сумма;
				КонецЕсли;
				
				НовыйНаборЗаписей.Записать();
			КонецЕсли;
			
			
			Иначе
				//СуммаСтойкиДляРаздела=Стр.Сумма/2;
				//
				//СписУчастников=Новый СписокЗначений;
				//КоличествоУчастников=0;
				//НаборСтойки=РегистрыСведений.ШМ_Стойка.СоздатьНаборЗаписей();
				//НаборСтойки.Отбор.Номенклатура.Установить(Стр.Номенклатура,Истина);
				//НаборСтойки.Прочитать();
				//Для Каждого СтрНаборСтойки Из НаборСтойки Цикл
				//	//Если СтрНаборСтойки.Продано>0 Тогда
				//	//	Если СтрНаборСтойки.Сотрудник1.Пустая()=Ложь Тогда
				//	//		КоличествоУчастников=КоличествоУчастников+1;
				//	//		СписУчастников.Добавить(СтрНаборСтойки.Сотрудник1.Ссылка);
				//	//	КонецЕсли;
				//	//	Если СтрНаборСтойки.Сотрудник2.Пустая()=Ложь Тогда
				//	//		КоличествоУчастников=КоличествоУчастников+1;
				//	//		СписУчастников.Добавить(СтрНаборСтойки.Сотрудник2.Ссылка);
				//	//	КонецЕсли;
				//	//	Если СтрНаборСтойки.Сотрудник3.Пустая()=Ложь Тогда
				//	//		КоличествоУчастников=КоличествоУчастников+1;
				//	//		СписУчастников.Добавить(СтрНаборСтойки.Сотрудник3.Ссылка);
				//	//	КонецЕсли;
				//	//КонецЕсли;
				//	Если СтрНаборСтойки.Идентификатор = Стр.
				//КонецЦикла;
				//
				//Для Сч=0 По СписУчастников.Количество()-1 Цикл
				//	НовыйНаборЗаписей = РегистрыСведений.ШМ_ИсполнителиРабот.СоздатьНаборЗаписей();
				//	НовыйНаборЗаписей.Прочитать();
				//	НоваяЗаписьНабора = НовыйНаборЗаписей.Добавить();
				//	НоваяЗаписьНабора.Реализация = Док.Ссылка;
				//	НоваяЗаписьНабора.Номенклатура = Стр.Номенклатура;
				//	НоваяЗаписьНабора.Исполнитель=СписУчастников.Получить(Сч).Значение;
				//	НоваяЗаписьНабора.Сумма=Окр(СуммаСтойкиДляРаздела/КоличествоУчастников,0);
				//	НовыйНаборЗаписей.Записать();
				//КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецФункции   


&НаСервере
Функция ПолучитьДолжность(Сотрудник, Номенклатура)     
	
	ЗапросБригады = Новый Запрос;
	ЗапросБригады.Текст = "ВЫБРАТЬ
	                      |	ШМ_БригадыСрезПоследних.Период КАК Период,
	                      |	ШМ_БригадыСрезПоследних.Должность КАК Должность,
	                      |	ШМ_БригадыСрезПоследних.Помощник КАК Помощник,
	                      |	ШМ_БригадыСрезПоследних.ИмяКомпьютера КАК ИмяКомпьютера,
	                      |	ШМ_БригадыСрезПоследних.Сотрудник КАК Сотрудник
	                      |ИЗ
	                      |	РегистрСведений.ШМ_Бригады.СрезПоследних(
	                      |			,
	                      |			ИмяКомпьютера = &ИмяКомпьютера
	                      |				И Сотрудник = &Сотрудник) КАК ШМ_БригадыСрезПоследних
	                      |ГДЕ
	                      |	ШМ_БригадыСрезПоследних.Период > &Период"; 
	
	ЗапросБригады.УстановитьПараметр("ИмяКомпьютера", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование);
	ЗапросБригады.УстановитьПараметр("Сотрудник", Сотрудник);
	ЗапросБригады.УстановитьПараметр("Период", ТекущаяДата() - 24*60*60);
	
	ВыборкаБригады = ЗапросБригады.Выполнить().Выгрузить(); 
	
	Если ВыборкаБригады.Количество() = 1 Тогда
		Возврат ВыборкаБригады[0].Должность;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ШМ_БригадыСрезПоследних.Период КАК Период,
		               |	ШМ_БригадыСрезПоследних.Должность КАК Должность,
		               |	ШМ_БригадыСрезПоследних.Помощник КАК Помощник,
		               |	ШМ_БригадыСрезПоследних.ИмяКомпьютера КАК ИмяКомпьютера,
		               |	ШМ_БригадыСрезПоследних.Сотрудник КАК Сотрудник
		               |ИЗ
		               |	РегистрСведений.ШМ_Бригады.СрезПоследних(
		               |			,
		               |			ИмяКомпьютера = &ИмяКомпьютера
		               |				И Сотрудник = &Сотрудник) КАК ШМ_БригадыСрезПоследних
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШМ_НоменклатураПрофессии КАК ШМ_НоменклатураПрофессии
		               |		ПО ШМ_БригадыСрезПоследних.Должность = ШМ_НоменклатураПрофессии.Профессия
		               |ГДЕ
		               |	ШМ_НоменклатураПрофессии.Номенклатура = &Номенклатура
		               |	И ШМ_БригадыСрезПоследних.Период > &Период"; 
		
		Запрос.УстановитьПараметр("ИмяКомпьютера", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование);
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("Период", ТекущаяДата() - 24*60*60);
		
		Выборка = Запрос.Выполнить().Выгрузить(); 
		
		Если НЕ Выборка.Количество() = 0 Тогда   
			Возврат Выборка[0].Должность;
		КонецЕсли;         
		
	КонецЕсли;
	
	Если НЕ Выборка.Количество() = 0 Тогда   
		Возврат Выборка[0].Должность;
	КонецЕсли; 
	
	Возврат Справочники.ШМ_Должности.ПустаяСсылка();
	
КонецФункции

&НаСервере
Функция ПолучитьСклад(Пользователь)  
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПользователиДополнительныеРеквизиты.Значение КАК Значение
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.ДополнительныеРеквизиты КАК ПользователиДополнительныеРеквизиты
	               |		ПО (ПользователиДополнительныеРеквизиты.Ссылка = Пользователи.Ссылка)
	               |ГДЕ
	               |	ПользователиДополнительныеРеквизиты.Свойство = &Свойство
	               |	И Пользователи.Ссылка = &Ссылка"; 
	
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Склад_e474d8e8f597436aa339de5246c89c45");;
	
	Запрос.УстановитьПараметр("Свойство", Свойство);    
	Запрос.УстановитьПараметр("Ссылка", Пользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();     
	
	Пока Выборка.Следующий() Цикл  
		Возврат Выборка.Значение;
	КонецЦикла; 
	
	Возврат Справочники.Склады.ПустаяСсылка();
	
КонецФункции

&НаСервере
Функция ВернутьПроцентСкидки(СтрТаб_Номенклатура)
	
		ПроцСк=0;
		НаборСкидки=РегистрыСведений.ШМ_Скидки.СоздатьНаборЗаписей();
		НаборСкидки.Отбор.Номенклатура.Установить(СтрТаб_Номенклатура,Истина);
		НаборСкидки.Прочитать();
		Для Каждого СтрНаборСкидки Из НаборСкидки Цикл 
			Возврат ПроцСк;
			//ПроцСк=СтрНаборСкидки.ПроцентСкидки;
		КонецЦикла;
		Возврат 0
		
		
КонецФункции

Функция ВернутьПроцентСкидкиИнетМаг(СтрТаб_Номенклатура)
	
		ПроцСк=0;
		НаборСкидки=РегистрыСведений.ШМ_Скидки.СоздатьНаборЗаписей();
		НаборСкидки.Отбор.Номенклатура.Установить(СтрТаб_Номенклатура,Истина);
		НаборСкидки.Прочитать();
		Для Каждого СтрНаборСкидки Из НаборСкидки Цикл
			ПроцСк=СтрНаборСкидки.ПроцентСкидкиИнетМаг;
		КонецЦикла;
		Возврат ПроцСк;
		
КонецФункции

Функция ВернутьПроцентКупона(СтрТаб_Номенклатура)
	
		ПроцСк=0;
		НаборСкидки=РегистрыСведений.ШМ_Купоны.СоздатьНаборЗаписей();
		НаборСкидки.Отбор.Номенклатура.Установить(СтрТаб_Номенклатура,Истина);
		НаборСкидки.Прочитать();
		Для Каждого СтрНаборСкидки Из НаборСкидки Цикл
			ПроцСк=СтрНаборСкидки.ПроцентСкидки;
		КонецЦикла;
		Возврат ПроцСк;
		
КонецФункции
		
		
&НаСервере
Функция ЗаполнитьВизуальныйРасчет(СейчасСкидка,СкидкаИнетМаг,СейчасКупон)
	
	ТаблВизВывода = Новый ТаблицаЗначений;
	ТаблВизВывода.Колонки.Добавить("Должность");
	ТаблВизВывода.Колонки.Добавить("Сумма");
	СуммаМатВычет=0;
	СуммаМатВычетПроточка=0;
	СуммаШиномонтаж=0;
	СуммаСъем=0;
	СуммаДископравка=0;
	СуммаГрузики=0;
	СуммаПроточка=0; //++
	КолГрузБезСкидок=0;
	КолГрузСкидка20=0;
	КолГрузСкидка50=0;
	СуммаГрузБезСкидок=0;
	СуммаГрузСкидка20=0;
	СуммаГрузСкидка50=0;
	ПроцентСкидкиЧерновик=0;
	СуммаШиномонтажЧерновик=0;
	СуммаСъемЧерновик=0;
	СуммаБалЧерновик=0;
	СуммаДископравкаЧерновик=0;
	СуммаПроточкаЧерновик=0;
	СуммаСПЦЧерновик = 0;
	ТипДиска="";
	////??? проценты прямопропорциональны
	//  Если СейчасСкидка Тогда
	//	ПроцентСкидкиЧерновик=10;
	//КонецЕсли;
	//Если СейчасСкидкаРазовая Тогда
	//	ПроцентСкидкиЧерновик=20;
	//КонецЕсли;
	////???
	
 	Для каждого СтрТЧ из Таб Цикл
		
		Если СтрТЧ.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар и Найти(Врег(СтрТЧ.Номенклатура.Наименование),"ФИЛЬТР")=0 Тогда
			Продолжить;
		КонецЕсли;
		
		ГруппаСтойка=Константы.ШМ_Стойка.Получить();
		Если СтрТЧ.Номенклатура.ПринадлежитЭлементу(ГруппаСтойка)=Ложь Тогда
			
		СтруктураПроф = ПрофессияНоменклатура(СтрТЧ.Номенклатура); //Сотрудник,Сотрудник2,Размер,Размер2,ВидОплаты
		
		
		//НужноПропуститьДискоаправку=Ложь;
		//НаборНомПроф=РегистрыСведений.ШМ_НоменклатураПрофессии.СоздатьНаборЗаписей();
		//НаборНомПроф.Отбор.Номенклатура.Установить(СтрТЧ.Номенклатура,Истина);
		//НаборНомПроф.Прочитать();
		//Для Каждого СтрНаборНомПроф Из НаборНомПроф Цикл
		//	//Если СтрНаборНомПроф.Профессия=Справочники.ШМ_Должности.НайтиПоНаименованию("Правщик дисков") Тогда
		//	//	НужноПропуститьДискоаправку=Истина;
		//	//КонецЕсли;
		//КонецЦикла;
		//Если НужноПропуститьДискоаправку=Истина Тогда
		//	Продолжить;
		//КонецЕсли;
		
		
		//НовыйНаборЗаписей = РегистрыСведений.ШМ_ИсполнителиРабот.СоздатьНаборЗаписей();
		//НовыйНаборЗаписей.Отбор.Реализация.Установить(Док.ссылка, Истина);
		//НовыйНаборЗаписей.Отбор.Номенклатура.Установить(Стр.Номенклатура, Истина);
		СотрудникТабЧасти=Неопределено;
		//Для Каждого СтрТЧ ИЗ Таб Цикл
		//	Если СтрТЧ.Номенклатура=Стр.Номенклатура Тогда
				Если СтрТЧ.Сотрудник.Пустая()=Ложь Тогда
					СотрудникТабЧасти=СтрТЧ.Сотрудник.Ссылка;
					//Прервать;
				КонецЕсли;
		//	КонецЕсли;
		//КонецЦикла;
		//Если СотрудникТабЧасти=Неопределено Тогда
		//	НовыйНаборЗаписей.Отбор.Исполнитель.Установить(СтруктураПроф.Сотрудник, Истина);
		//Иначе
		//	НовыйНаборЗаписей.Отбор.Исполнитель.Установить(СотрудникТабЧасти, Истина);
		//КонецЕсли;
		
		//НоваяЗаписьНабора = НовыйНаборЗаписей.Добавить();
		//НоваяЗаписьНабора.Реализация = Док.Ссылка;
		//НоваяЗаписьНабора.Номенклатура = Стр.Номенклатура;
		СтрокаТаблВизВывода=ТаблВизВывода.Добавить();
		Если СотрудникТабЧасти=Неопределено Тогда
			//НоваяЗаписьНабора.Исполнитель = СтруктураПроф.Сотрудник;
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ВложенныйЗапрос.Период КАК Период,
				|	ШМ_БригадыСрезПоследних.Должность КАК Должность,
				|	ШМ_БригадыСрезПоследних.Помощник КАК Помощник,
				|	ШМ_БригадыСрезПоследних.ИмяКомпьютера КАК ИмяКомпьютера,
				|	ШМ_БригадыСрезПоследних.Сотрудник КАК Сотрудник
				|ИЗ
				|	РегистрСведений.ШМ_Бригады.СрезПоследних КАК ШМ_БригадыСрезПоследних
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|			МАКСИМУМ(ШМ_БригадыСрезПоследних.Период) КАК Период
				|		ИЗ
				|			РегистрСведений.ШМ_Бригады.СрезПоследних(, ) КАК ШМ_БригадыСрезПоследних) КАК ВложенныйЗапрос
				|		ПО ШМ_БригадыСрезПоследних.Период = ВложенныйЗапрос.Период
				|ГДЕ
				|	ШМ_БригадыСрезПоследних.ИмяКомпьютера = &ИмяКомпьютера
				|	И ШМ_БригадыСрезПоследних.Помощник = ЛОЖЬ";
			
			Запрос.УстановитьПараметр("ИмяКомпьютера", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование);
			Выборка = Запрос.Выполнить().Выгрузить();
			
			Для Каждого СтрВыборка Из Выборка Цикл
	
				Если СтрВыборка.Сотрудник=СтруктураПроф.Сотрудник Тогда
					СтрокаТаблВизВывода.Должность=СтрВыборка.Должность;
				КонецЕсли;  
				
			КонецЦикла;
			
		Иначе
						 
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ВложенныйЗапрос.Период КАК Период,
				|	ШМ_БригадыСрезПоследних.Должность КАК Должность,
				|	ШМ_БригадыСрезПоследних.Помощник КАК Помощник,
				|	ШМ_БригадыСрезПоследних.ИмяКомпьютера КАК ИмяКомпьютера,
				|	ШМ_БригадыСрезПоследних.Сотрудник КАК Сотрудник
				|ИЗ
				|	РегистрСведений.ШМ_Бригады.СрезПоследних КАК ШМ_БригадыСрезПоследних
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|			МАКСИМУМ(ШМ_БригадыСрезПоследних.Период) КАК Период
				|		ИЗ
				|			РегистрСведений.ШМ_Бригады.СрезПоследних(, ) КАК ШМ_БригадыСрезПоследних
				|		ГДЕ
				|			ШМ_БригадыСрезПоследних.ИмяКомпьютера = &ИмяКомпьютера) КАК ВложенныйЗапрос
				|		ПО ШМ_БригадыСрезПоследних.Период = ВложенныйЗапрос.Период
				|ГДЕ
				|	ШМ_БригадыСрезПоследних.ИмяКомпьютера = &ИмяКомпьютера"; 
			
	        Запрос.УстановитьПараметр("ИмяКомпьютера", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование);
			Выборка = Запрос.Выполнить().Выгрузить();
			
			Для Каждого СтрВыборка Из Выборка Цикл
				Если СтрВыборка.Сотрудник=СотрудникТабЧасти Тогда
					СтрокаТаблВизВывода.Должность=СтрВыборка.Должность;
				КонецЕсли;
			КонецЦикла;
			 
		КонецЕсли;
		СтрокаТаблВизВывода.Должность=СтруктураПроф.Профессия;///// тут ловим профессию СПЦ
		
		СтрТЧСумма = СтрТЧ.Сумма;
		Если Константы.ШМЗарплатаСУчетомСкидки.Получить()=Ложь Тогда
			Если (СейчасСкидкаРазовая=Истина) ИЛИ (СейчасСкидка=Истина) ИЛИ (СкидкаИнетМаг=Истина) Тогда
				СтрТЧСумма = ПолучитьЦену(СтрТЧ.Номенклатура)*СтрТЧ.Количество;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураПроф.ИспГрузики И СейчасСкидка Тогда //не используется
			
			Если Найти(Врег(СтрТЧ.Номенклатура.Наименование),"БАЛАНСИРОВКА")>0 Тогда
				СтрокаТаблВизВывода.Сумма=СтрТЧСумма - (СтруктураПроф.МатериальныйВычет*СтрТЧ.Количество);
				СуммаМатВычет=СуммаМатВычет+(СтруктураПроф.МатериальныйВычет*СтрТЧ.Количество);
			Иначе
				СтрокаТаблВизВывода.Сумма=СтрТЧСумма - Окр((СтруктураПроф.МатериальныйВычет*(1-ВернутьПроцентСкидки(СтрТЧ.Номенклатура)/100)),0)*СтрТЧ.Количество;
				СуммаМатВычет=СуммаМатВычет+Окр((СтруктураПроф.МатериальныйВычет*(1-ВернутьПроцентСкидки(СтрТЧ.Номенклатура)/100)),0)*СтрТЧ.Количество;
			КонецЕсли;
			
			Если СокрЛП(СтруктураПроф.Профессия.Наименование)="Проточник" Тогда
				СуммаМатВычетПроточка=СуммаМатВычетПроточка+Окр((СтруктураПроф.МатериальныйВычет*(1-ВернутьПроцентСкидки(СтрТЧ.Номенклатура)/100)),0)*СтрТЧ.Количество;
			КонецЕсли;
			Если СокрЛП(СтруктураПроф.Профессия.Наименование)="Правщик дисков" Тогда
				НаборНомПроф=РегистрыСведений.ШМ_НоменклатураПрофессии.СоздатьНаборЗаписей();
				НаборНомПроф.Отбор.Номенклатура.Установить(СтрТЧ.Номенклатура,Истина);
				НаборНомПроф.Прочитать();
				Для Каждого СтрНаборНомПроф Из НаборНомПроф Цикл
					Если СтрНаборНомПроф.Дископравка=Перечисления.ШМ_Дископравка.Стальной Тогда
						ТипДиска = "Ст.";
						Прервать;
					КонецЕсли;
					Если СтрНаборНомПроф.Дископравка=Перечисления.ШМ_Дископравка.Лекгосплавный Тогда
						ТипДиска = "Ал.";
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если Найти(Врег(СтрТЧ.Номенклатура.Наименование),"БАЛАНСИРОВКА")>0 Тогда
				СуммаГрузики=СуммаГрузики+СтруктураПроф.МатериальныйВычет*СтрТЧ.Количество;
			Иначе
				СуммаГрузики=СуммаГрузики+Окр((СтруктураПроф.МатериальныйВычет*(1-ВернутьПроцентСкидки(СтрТЧ.Номенклатура)/100)),0)*СтрТЧ.Количество;
			КонецЕсли;
			
			КолГрузСкидка20=КолГрузСкидка20+СтрТЧ.Количество;
			СуммаГрузСкидка20=СуммаГрузСкидка20+Окр((СтруктураПроф.МатериальныйВычет*(1-ВернутьПроцентСкидки(СтрТЧ.Номенклатура)/100)),0)*СтрТЧ.Количество;
			
			//Если СейчасСкидка Тогда
			ПроцентСкидкиЧерновик=10;
			//КонецЕсли;
			//Если СейчасСкидкаРазовая Тогда
			//	ПроцентСкидкиЧерновик=10;
			//КонецЕсли;
			СуммаБалЧерновик=СуммаБалЧерновик+СтрокаТаблВизВывода.Сумма;
			
			
		//++03.02.25 Безроднов закоментил скидка 10 процентов не распространяется на груза только на услугу
		ИначеЕсли СтруктураПроф.ИспГрузики И СкидкаИнетМаг Тогда //используется 
			
			Если Найти(Врег(СтрТЧ.Номенклатура.Наименование),"БАЛАНСИРОВКА")>0 Тогда
				СтрокаТаблВизВывода.Сумма=СтрТЧСумма - (СтруктураПроф.МатериальныйВычет*СтрТЧ.Количество);
				СуммаМатВычет=СуммаМатВычет+(СтруктураПроф.МатериальныйВычет*СтрТЧ.Количество);
			Иначе
				СтрокаТаблВизВывода.Сумма=СтрТЧСумма - Окр((СтруктураПроф.МатериальныйВычет*(1-ВернутьПроцентСкидкиИнетМаг(СтрТЧ.Номенклатура)/100)),0)*СтрТЧ.Количество;
				СуммаМатВычет=СуммаМатВычет+Окр((СтруктураПроф.МатериальныйВычет*(1-ВернутьПроцентСкидкиИнетМаг(СтрТЧ.Номенклатура)/100)),0)*СтрТЧ.Количество;
			КонецЕсли;
			
			Если СокрЛП(СтруктураПроф.Профессия.Наименование)="Проточник" Тогда
				СуммаМатВычетПроточка=СуммаМатВычетПроточка+Окр((СтруктураПроф.МатериальныйВычет*(1-ВернутьПроцентСкидки(СтрТЧ.Номенклатура)/100)),0)*СтрТЧ.Количество;
			КонецЕсли;
			
			//Если Найти(Врег(СтрТЧ.Номенклатура.Наименование),"БАЛАНСИРОВКА")>0 Тогда
			//	СуммаГрузики=СуммаГрузики+СтруктураПроф.МатериальныйВычет*СтрТЧ.Количество;
			//Иначе
			//	СуммаГрузики=СуммаГрузики+Окр((СтруктураПроф.МатериальныйВычет*(1-ВернутьПроцентСкидкиИнетМаг(СтрТЧ.Номенклатура)/100)),0)*СтрТЧ.Количество;
			//КонецЕсли;
			
			КолГрузСкидка50=КолГрузСкидка50+СтрТЧ.Количество;
			СуммаГрузСкидка50=СуммаГрузСкидка50+Окр((СтруктураПроф.МатериальныйВычет*(1-ВернутьПроцентСкидкиИнетМаг(СтрТЧ.Номенклатура)/100)),0)*СтрТЧ.Количество;
			
			//ПроцентСкидкиЧерновик=10;
			СуммаБалЧерновик=СуммаБалЧерновик+СтрокаТаблВизВывода.Сумма;
		//----03.02.25 Безроднов
		
		
		ИначеЕсли СтруктураПроф.ИспГрузики И СейчасКупон Тогда //не используется
			
			Если Найти(Врег(СтрТЧ.Номенклатура.Наименование),"БАЛАНСИРОВКА")>0 Тогда
				СтрокаТаблВизВывода.Сумма=СтрТЧСумма - (СтруктураПроф.МатериальныйВычет*СтрТЧ.Количество);
				СуммаМатВычет=СуммаМатВычет+(СтруктураПроф.МатериальныйВычет*СтрТЧ.Количество);
			Иначе
				СтрокаТаблВизВывода.Сумма=СтрТЧСумма - Окр((СтруктураПроф.МатериальныйВычет*(1-ВернутьПроцентКупона(СтрТЧ.Номенклатура)/100)),0)*СтрТЧ.Количество;
				СуммаМатВычет=СуммаМатВычет+Окр((СтруктураПроф.МатериальныйВычет*(1-ВернутьПроцентКупона(СтрТЧ.Номенклатура)/100)),0)*СтрТЧ.Количество;
			КонецЕсли;
			
			Если СокрЛП(СтруктураПроф.Профессия.Наименование)="Проточник" Тогда
				СуммаМатВычетПроточка=СуммаМатВычетПроточка+Окр((СтруктураПроф.МатериальныйВычет*(1-ВернутьПроцентСкидки(СтрТЧ.Номенклатура)/100)),0)*СтрТЧ.Количество;
			КонецЕсли;
			
			//Если Найти(Врег(СтрТЧ.Номенклатура.Наименование),"БАЛАНСИРОВКА")>0 Тогда
			//	СуммаГрузики=СуммаГрузики+СтруктураПроф.МатериальныйВычет*СтрТЧ.Количество;
			//Иначе
			//	СуммаГрузики=СуммаГрузики+Окр((СтруктураПроф.МатериальныйВычет*(1-ВернутьПроцентКупона(СтрТЧ.Номенклатура)/100)),0)*СтрТЧ.Количество;
			//КонецЕсли;
			
			КолГрузСкидка20=КолГрузСкидка20+СтрТЧ.Количество;
			СуммаГрузСкидка20=СуммаГрузСкидка20+Окр((СтруктураПроф.МатериальныйВычет*(1-ВернутьПроцентКупона(СтрТЧ.Номенклатура)/100)),0)*СтрТЧ.Количество;
			
			//ПроцентСкидкиЧерновик=10;
			СуммаБалЧерновик=СуммаБалЧерновик+СтрокаТаблВизВывода.Сумма;
			
			//Безроднов закоментил
		ИначеЕсли СтруктураПроф.ИспГрузики И СейчасСкидкаРазовая Тогда // используется 
			
			Если Найти(Врег(СтрТЧ.Номенклатура.Наименование),"БАЛАНСИРОВКА")>0 Тогда
				СтрокаТаблВизВывода.Сумма=СтрТЧСумма - (СтруктураПроф.МатериальныйВычет*СтрТЧ.Количество);
				СуммаМатВычет=СуммаМатВычет+(СтруктураПроф.МатериальныйВычет*СтрТЧ.Количество);
			Иначе
				СтрокаТаблВизВывода.Сумма=СтрТЧСумма - Окр((СтруктураПроф.МатериальныйВычет*(1-ВернутьПроцентКупона(СтрТЧ.Номенклатура)/100)),0)*СтрТЧ.Количество;
				СуммаМатВычет=СуммаМатВычет+Окр((СтруктураПроф.МатериальныйВычет*(1-ВернутьПроцентКупона(СтрТЧ.Номенклатура)/100)),0)*СтрТЧ.Количество;
			КонецЕсли;
			
			Если Константы.ШМЗарплатаСУчетомСкидки.Получить()=Ложь Тогда
				СтрокаТаблВизВывода.Сумма=СтрТЧСумма - Окр((СтруктураПроф.МатериальныйВычет),0)*СтрТЧ.Количество;
				СуммаМатВычет=СуммаМатВычет+Окр((СтруктураПроф.МатериальныйВычет),0)*СтрТЧ.Количество;
			Иначе
				СтрокаТаблВизВывода.Сумма=СтрТЧСумма - Окр((СтруктураПроф.МатериальныйВычет*(1-ВернутьПроцентКупона(СтрТЧ.Номенклатура)/100)),0)*СтрТЧ.Количество;
				СуммаМатВычет=СуммаМатВычет+Окр((СтруктураПроф.МатериальныйВычет*(1-ВернутьПроцентКупона(СтрТЧ.Номенклатура)/100)),0)*СтрТЧ.Количество;
			КонецЕсли;
			
			Если СокрЛП(СтруктураПроф.Профессия.Наименование)="Проточник" Тогда
				СуммаМатВычетПроточка=СуммаМатВычетПроточка+Окр((СтруктураПроф.МатериальныйВычет*(1-ВернутьПроцентСкидки(СтрТЧ.Номенклатура)/100)),0)*СтрТЧ.Количество;
			КонецЕсли;
			
			//Если Найти(Врег(СтрТЧ.Номенклатура.Наименование),"БАЛАНСИРОВКА")>0 Тогда
			//	СуммаГрузики=СуммаГрузики+СтруктураПроф.МатериальныйВычет*СтрТЧ.Количество;
			//Иначе
			//	СуммаГрузики=СуммаГрузики+Окр((СтруктураПроф.МатериальныйВычет*(1-ВернутьПроцентКупона(СтрТЧ.Номенклатура)/100)),0)*СтрТЧ.Количество;
			//КонецЕсли;
			
			КолГрузСкидка20=КолГрузСкидка20+СтрТЧ.Количество;
			СуммаГрузСкидка20=СуммаГрузСкидка20+Окр((СтруктураПроф.МатериальныйВычет*(1-ВернутьПроцентКупона(СтрТЧ.Номенклатура)/100)),0)*СтрТЧ.Количество;
			
			//ПроцентСкидкиЧерновик=20;
			СуммаБалЧерновик=СуммаБалЧерновик+СтрокаТаблВизВывода.Сумма;
			
		Иначе //используется  
			СтрокаТаблВизВывода.Сумма=СтрТЧСумма - СтруктураПроф.МатериальныйВычет*СтрТЧ.Количество; ////здесь мы ловим сумму услуги СПЦ
			Если Найти(Врег(СтрТЧ.Номенклатура.Наименование),"ФИЛЬТР")>0 Тогда
            	СуммаМатВычет=СуммаМатВычет+СтрТЧ.Сумма;
			КонецЕсли;   
				 
			СуммаМатВычет=СуммаМатВычет+СтруктураПроф.МатериальныйВычет*СтрТЧ.Количество;  
			
			//++dev1
			ЕСли СтруктураПроф.Профессия <> "" Тогда
				Если СокрЛП(СтруктураПроф.Профессия.Наименование)="Проточник" Тогда
					СуммаМатВычетПроточка=СуммаМатВычетПроточка+Окр((СтруктураПроф.МатериальныйВычет*(1-ВернутьПроцентСкидки(СтрТЧ.Номенклатура)/100)),0)*СтрТЧ.Количество;
				КонецЕсли;
			//--dev1
			
				Если СтруктураПроф.ИспГрузики Тогда
					СуммаГрузики=СуммаГрузики+СтруктураПроф.МатериальныйВычет*СтрТЧ.Количество;
					КолГрузБезСкидок=КолГрузБезСкидок+СтрТЧ.Количество;
					СуммаГрузБезСкидок=СуммаГрузБезСкидок+СтруктураПроф.МатериальныйВычет*СтрТЧ.Количество;
					СуммаБалЧерновик=СуммаБалЧерновик+СтрокаТаблВизВывода.Сумма;
				КонецЕсли;  
				//++Безроднов 25.02 заполнение колонки тип диска и колонки процент скидки
				Если СкидкаИнетМаг Тогда
					ПроцентСкидкиЧерновик=10;
				КонецЕсли;
				Если СейчасСкидкаРазовая Тогда
					ПроцентСкидкиЧерновик=20;
				КонецЕсли;

				Если СокрЛП(СтруктураПроф.Профессия.Наименование)="Правщик дисков" Тогда
					НаборНомПроф=РегистрыСведений.ШМ_НоменклатураПрофессии.СоздатьНаборЗаписей();
					НаборНомПроф.Отбор.Номенклатура.Установить(СтрТЧ.Номенклатура,Истина);
					НаборНомПроф.Прочитать();
					Для Каждого СтрНаборНомПроф Из НаборНомПроф Цикл
						Если СтрНаборНомПроф.Дископравка=Перечисления.ШМ_Дископравка.Стальной Тогда
							ТипДиска = "Ст.";
							Прервать;
						КонецЕсли;
						Если СтрНаборНомПроф.Дископравка=Перечисления.ШМ_Дископравка.Лекгосплавный Тогда
							ТипДиска = "Ал.";
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
	   	    //--Безроднов 25.02 заполнение колонки тип диска и колонки процент скидки	
			//++dev1 28.03	
			Иначе
				Флаг = Истина;
				Сообщить(СтрШаблон("Данный товар %1 не добавлен в РС, необходимо добавить его в РС Номенклатура профессии(См. ""инструкция по созданию Номенклатуры"")", СтрТЧ.Номенклатура));
				ТекстОшибкиРС =  Символы.ПС + СтрШаблон("Данный товар %1 не добавлен в РС Номенклатура Профессии. Возможны ошибки учета(не корректность данных в чистовике и черновике)", СтрТЧ.Номенклатура);
			КонецЕсли;
			//--dev1
        КонецЕсли;
		//НовыйНаборЗаписей.Записать();
		
		//Для Каждого СтрТЧ ИЗ Таб Цикл
		//	Если СтрТЧ.Номенклатура=Стр.Номенклатура Тогда
		//		Если (СтрТЧ.КолГруз1>0) ИЛИ (СтрТЧ.КолГруз2>0) Тогда
		//			МенеджерГрузиков=РегистрыСведений.ШМ_Грузики.СоздатьМенеджерЗаписи();
		//			МенеджерГрузиков.Реализация=Док.Ссылка;
		//			МенеджерГрузиков.Номенклатура=Стр.Номенклатура;
		//			МенеджерГрузиков.КолГруз1=СтрТЧ.КолГруз1;
		//			МенеджерГрузиков.КолГруз2=СтрТЧ.КолГруз2;
		//			МенеджерГрузиков.Количество=СтрТЧ.Количество;
		//			МенеджерГрузиков.ГраммыГруз1=МенеджерГрузиков.КолГруз1*Константы.ШМ_Грузик1УдВес.Получить();
		//			МенеджерГрузиков.ГраммыГруз2=МенеджерГрузиков.КолГруз2*Константы.ШМ_Грузик2УдВес.Получить();
		//			МенеджерГрузиков.СтоимостьГруз1=МенеджерГрузиков.КолГруз1*Константы.ШМ_Грузик1УдСтоимость.Получить();
		//			МенеджерГрузиков.СтоимостьГруз2=МенеджерГрузиков.КолГруз2*Константы.ШМ_Грузик2УдСтоимость.Получить();
		//			МенеджерГрузиков.Записать();
		//		КонецЕсли;
		//	КонецЕсли;
		//КонецЦикла;
		
	//	Если ЗначениеЗаполнено(СтруктураПроф.Сотрудник2) Тогда
	//		СтрокаТаблВизВывода=ТаблВизВывода.Добавить();
	//		//НовыйНаборЗаписей = РегистрыСведений.ШМ_ИсполнителиРабот.СоздатьНаборЗаписей();
	//		//НовыйНаборЗаписей.Отбор.Реализация.Установить(Док.ссылка, Истина);
	//		//НовыйНаборЗаписей.Отбор.Номенклатура.Установить(Стр.Номенклатура, Истина);
	//		//Если СотрудникТабЧасти=Неопределено Тогда
	//		//	НовыйНаборЗаписей.Отбор.Исполнитель.Установить(СтруктураПроф.Сотрудник2, Истина);
	//		//Иначе
	//		//	НовыйНаборЗаписей.Отбор.Исполнитель.Установить(СотрудникТабЧасти, Истина);
	//		//КонецЕсли;
	//		//
	//		//НоваяЗаписьНабора = НовыйНаборЗаписей.Добавить();
	//		//НоваяЗаписьНабора.Реализация = Док.Ссылка;
	//		//НоваяЗаписьНабора.Номенклатура = Стр.Номенклатура;
	//		Если СотрудникТабЧасти=Неопределено Тогда
	//		//	НоваяЗаписьНабора.Исполнитель = СтруктураПроф.Сотрудник2;
	//		
	//			Запрос = Новый Запрос;
	//			Запрос.Текст = 
	//				"ВЫБРАТЬ
	//				|	ВложенныйЗапрос.Период,
	//				|	ШМ_БригадыСрезПоследних.Должность,
	//				|	ШМ_БригадыСрезПоследних.Помощник,
	//				|	ШМ_БригадыСрезПоследних.Сотрудник
	//				|ИЗ
	//				|	РегистрСведений.ШМ_Бригады.СрезПоследних КАК ШМ_БригадыСрезПоследних
	//				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//				|			МАКСИМУМ(ШМ_БригадыСрезПоследних.Период) КАК Период
	//				|		ИЗ
	//				|			РегистрСведений.ШМ_Бригады.СрезПоследних(, ) КАК ШМ_БригадыСрезПоследних) КАК ВложенныйЗапрос
	//				|		ПО ШМ_БригадыСрезПоследних.Период = ВложенныйЗапрос.Период";
	//
	//			Выборка = Запрос.Выполнить().Выгрузить();
	//		
	//			Для Каждого СтрВыборка Из Выборка Цикл
	//				Если СтрВыборка.Должность=Справочники.ШМ_Должности.НайтиПоНаименованию("Правщик дисков") Тогда
	//					Продолжить;
	//				КонецЕсли;
	//				Если СтрВыборка.Сотрудник=СтруктураПроф.Сотрудник2 Тогда
	//					СтрокаТаблВизВывода.Должность=СтрВыборка.Должность;
	//				КонецЕсли;
	//			КонецЦикла;
	//		
	//		Иначе
	//		//	НоваяЗаписьНабора.Исполнитель = СотрудникТабЧасти;
	//			Запрос = Новый Запрос;
	//		Запрос.Текст = 
	//			"ВЫБРАТЬ
	//			|	ВложенныйЗапрос.Период,
	//			|	ШМ_БригадыСрезПоследних.Должность,
	//			|	ШМ_БригадыСрезПоследних.Помощник,
	//			|	ШМ_БригадыСрезПоследних.Сотрудник
	//			|ИЗ
	//			|	РегистрСведений.ШМ_Бригады.СрезПоследних КАК ШМ_БригадыСрезПоследних
	//			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//			|			МАКСИМУМ(ШМ_БригадыСрезПоследних.Период) КАК Период
	//			|		ИЗ
	//			|			РегистрСведений.ШМ_Бригады.СрезПоследних(, ) КАК ШМ_БригадыСрезПоследних) КАК ВложенныйЗапрос
	//			|		ПО ШМ_БригадыСрезПоследних.Период = ВложенныйЗапрос.Период";
	//
	//		Выборка = Запрос.Выполнить().Выгрузить();
	//		
	//		Для Каждого СтрВыборка Из Выборка Цикл
	//			Если СтрВыборка.Должность=Справочники.ШМ_Должности.НайтиПоНаименованию("Правщик дисков") Тогда
	//				Продолжить;
	//			КонецЕсли;
	//			Если СтрВыборка.Сотрудник=СотрудникТабЧасти Тогда
	//				СтрокаТаблВизВывода.Должность=СтрВыборка.Должность;
	//			КонецЕсли;
	//		КонецЦикла;
	//		
	//		КонецЕсли;
	//		//НоваяЗаписьНабора.Помощник = Истина;
	//		//Если СтруктураПроф.ВидОплаты = Перечисления.ШМ_ВидОплатыЗаРаботу.ФиксированнаяСумма Тогда
	//		//	СтрокаТаблВизВывода.Сумма = СтруктураПроф.Размер2;
	//		//Иначе
	//		//	СтрокаТаблВизВывода.Сумма = (СтрТЧ.Сумма - СтруктураПроф.МатериальныйВычет) / 100 * СтруктураПроф.Размер2;
	//		//КонецЕсли;
	//		СтрокаТаблВизВывода.Сумма=СтрТЧ.Сумма - СтруктураПроф.МатериальныйВычет*СтрТЧ.Количество;
	//		СуммаМатВычет=СуммаМатВычет+СтруктураПроф.МатериальныйВычет*СтрТЧ.Количество;
	//		//НовыйНаборЗаписей.Записать();
	//	КонецЕсли;
		
		
		Иначе
			//СуммаСтойкиДляРаздела=Стр.Сумма/2;
			//
			//СписУчастников=Новый СписокЗначений;
			//КоличествоУчастников=0;
			//НаборСтойки=РегистрыСведений.ШМ_Стойка.СоздатьНаборЗаписей();
			//НаборСтойки.Отбор.Номенклатура.Установить(Стр.Номенклатура,Истина);
			//НаборСтойки.Прочитать();
			//Для Каждого СтрНаборСтойки Из НаборСтойки Цикл
			//	Если СтрНаборСтойки.Количество>0 Тогда
			//		Если СтрНаборСтойки.Сотрудник1.Пустая()=Ложь Тогда
			//			КоличествоУчастников=КоличествоУчастников+1;
			//			СписУчастников.Добавить(СтрНаборСтойки.Сотрудник1.Ссылка);
			//		КонецЕсли;
			//		Если СтрНаборСтойки.Сотрудник2.Пустая()=Ложь Тогда
			//			КоличествоУчастников=КоличествоУчастников+1;
			//			СписУчастников.Добавить(СтрНаборСтойки.Сотрудник2.Ссылка);
			//		КонецЕсли;
			//		Если СтрНаборСтойки.Сотрудник3.Пустая()=Ложь Тогда
			//			КоличествоУчастников=КоличествоУчастников+1;
			//			СписУчастников.Добавить(СтрНаборСтойки.Сотрудник3.Ссылка);
			//		КонецЕсли;
			//	КонецЕсли;
			//КонецЦикла;
			//
			//Для Сч=0 По СписУчастников.Количество()-1 Цикл
			//	НовыйНаборЗаписей = РегистрыСведений.ШМ_ИсполнителиРабот.СоздатьНаборЗаписей();
			//	НовыйНаборЗаписей.Прочитать();
			//	НоваяЗаписьНабора = НовыйНаборЗаписей.Добавить();
			//	НоваяЗаписьНабора.Реализация = Док.Ссылка;
			//	НоваяЗаписьНабора.Номенклатура = Стр.Номенклатура;
			//	НоваяЗаписьНабора.Исполнитель=СписУчастников.Получить(Сч).Значение;
			//	НоваяЗаписьНабора.Сумма=Окр(СуммаСтойкиДляРаздела/КоличествоУчастников,0);
			//	НовыйНаборЗаписей.Записать();
			//КонецЦикла;
			
		КонецЕсли;
			
	КонецЦикла;    
	
	
	ТаблВизВывода.Свернуть("Должность","Сумма");
	Для Каждого СтрТаблВизВывода Из ТаблВизВывода Цикл
		Если СтрТаблВизВывода.Должность=Справочники.ШМ_Должности.НайтиПоНаименованию("Шиномонтажник") Тогда
			СуммаШиномонтаж=СтрТаблВизВывода.Сумма;
			СуммаШиномонтажЧерновик=СтрТаблВизВывода.Сумма;
		КонецЕсли;
		Если СтрТаблВизВывода.Должность=Справочники.ШМ_Должности.НайтиПоНаименованию("Съемщик") Тогда
			СуммаСъем=СтрТаблВизВывода.Сумма;
			СуммаСъемЧерновик=СтрТаблВизВывода.Сумма;
		КонецЕсли;
		Если СтрТаблВизВывода.Должность=Справочники.ШМ_Должности.НайтиПоНаименованию("Правщик дисков") Тогда
			СуммаДископравка=СтрТаблВизВывода.Сумма;
			СуммаДископравкаЧерновик=СтрТаблВизВывода.Сумма;
		КонецЕсли;
		Если СтрТаблВизВывода.Должность=Справочники.ШМ_Должности.НайтиПоНаименованию("Проточник") Тогда
			СуммаПроточка=СтрТаблВизВывода.Сумма;
			СуммаПроточкаЧерновик=СтрТаблВизВывода.Сумма;
		КонецЕсли;
		Если СтрТаблВизВывода.Должность = Справочники.ШМ_Должности.НайтиПоНаименованию("СПЦ") Тогда
			СуммаСПЦ = СтрТаблВизВывода.Сумма;
			СуммаСПЦЧерновик = СтрТаблВизВывода.Сумма;
		КонецЕсли;
	КонецЦикла;

	
КонецФункции


&НаСервере
Функция ПрофессияНоменклатура(Ном)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_НоменклатураПрофессии.Номенклатура,
		|	ШМ_НоменклатураПрофессии.Профессия,
		|	ШМ_НоменклатураПрофессии.ВидОплаты,
		|	ШМ_НоменклатураПрофессии.МатериальныйВычет,
		|	ШМ_НоменклатураПрофессии.ИспГрузики,
		|	ШМ_НоменклатураПрофессии.РазмерОплаты
		|ИЗ
		|	РегистрСведений.ШМ_НоменклатураПрофессии КАК ШМ_НоменклатураПрофессии
		|ГДЕ
		|	ШМ_НоменклатураПрофессии.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура",Ном.ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Профессия = "";
	РазмерОплаты = 0;
	ВидОплаты = "";
	МатериальныйВычет=0;
	ИспГрузики=Ложь;
	Пока Выборка.Следующий() Цикл
		Профессия = Выборка.Профессия;
		РазмерОплаты = Выборка.РазмерОплаты;
		ВидОплаты = Выборка.ВидОплаты;
		МатериальныйВычет=Выборка.МатериальныйВычет;
		ИспГрузики=Выборка.ИспГрузики;
	КонецЦикла;
	
	Запрос2 = Новый Запрос;
	Запрос2.Текст = "ВЫБРАТЬ
	                |	ШМ_БригадыСрезПоследних.Период КАК Период,
	                |	ШМ_БригадыСрезПоследних.Должность КАК Должность,
	                |	ШМ_БригадыСрезПоследних.Помощник КАК Помощник,
	                |	ШМ_БригадыСрезПоследних.Сотрудник КАК Сотрудник
	                |ИЗ
	                |	РегистрСведений.ШМ_Смены КАК ШМ_Смены
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШМ_Бригады.СрезПоследних КАК ШМ_БригадыСрезПоследних
	                |		ПО (ШМ_БригадыСрезПоследних.Период >= ШМ_Смены.Период)
	                |			И (ШМ_БригадыСрезПоследних.ИмяКомпьютера = ШМ_Смены.ИмяКомпьютера)
	                |			И (НАЧАЛОПЕРИОДА(ШМ_БригадыСрезПоследних.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(ШМ_Смены.Период, ДЕНЬ))
	                |ГДЕ
	                |	ШМ_БригадыСрезПоследних.ИмяКомпьютера = &ИмяКомпьютера
	                |	И НАЧАЛОПЕРИОДА(ШМ_БригадыСрезПоследних.Период, ДЕНЬ) = &Период
	                |	И ШМ_Смены.СменаЗакрыта = &СменаЗакрыта";
	
	
	ТекущееРабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	Запрос2.УстановитьПараметр("ИмяКомпьютера", ТекущееРабочееМесто.Наименование);  
	Запрос2.УстановитьПараметр("Период", НачалоДня(ТекущаяДата()));   
	Запрос2.УстановитьПараметр("СменаЗакрыта", Ложь);
	
	//Запрос2.("Дата", Док.Дата);
	//ТекущееРабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	//Запрос2.УстановитьПараметр("ИмяКомпьютера", ТекущееРабочееМесто.Наименование);     
	
	Выборка2 = Запрос2.Выполнить().Выгрузить();
	Сотр = "";
	Сотр2 = "";
	КолПом = 0;
	Для Каждого СтрТЗ ИЗ Выборка2 Цикл
		Если СтрТЗ.Помощник Тогда
			КолПом = КолПом + 1;
		КонецЕсли;
	КонецЦикла;
	Размер2 = 0;
	Если КолПом = 0 Тогда
		Для Каждого СтрТЗ ИЗ Выборка2 Цикл
			Если СтрТЗ.Должность = Профессия Тогда
				Сотр = СтрТЗ.Сотрудник;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли КолПом = 1 Тогда
		ПомощникЕсть=ложь;
		Для Каждого СтрТЗ ИЗ Выборка2 Цикл
			Если СтрТЗ.Должность = Профессия И НЕ СтрТЗ.Помощник Тогда
				Сотр = СтрТЗ.Сотрудник;
			ИначеЕсли СтрТЗ.Должность = Профессия И СтрТЗ.Помощник Тогда
				Сотр2 = СтрТЗ.Сотрудник;
				ПомощникЕсть=Истина;
			КонецЕсли;
		КонецЦикла;
		Если ПомощникЕсть=Истина Тогда
			РазмерОплаты = РазмерОплаты / 2;
		КонецЕсли;
		Размер2 = РазмерОплаты;
	ИначеЕсли КолПом = 2 Тогда
		Для Каждого СтрТЗ ИЗ Выборка2 Цикл
			Если СтрТЗ.Должность = Профессия И НЕ СтрТЗ.Помощник Тогда
				Сотр = СтрТЗ.Сотрудник;
			ИначеЕсли СтрТЗ.Должность = Профессия И СтрТЗ.Помощник Тогда
				Сотр2 = СтрТЗ.Сотрудник;
			КонецЕсли;
		КонецЦикла;
		КоличПомСотр2=0;
		Для Каждого СтрТЗ ИЗ Выборка2 Цикл
			Если СтрТЗ.Помощник И Сотр2 = СтрТЗ.Сотрудник Тогда
				КоличПомСотр2=КоличПомСотр2+1;
			КонецЕсли;
		КонецЦикла;
		Если КоличПомСотр2=1 Тогда
			РазмерОплаты = РазмерОплаты / 2;
			Размер2 = РазмерОплаты;
		ИначеЕсли КоличПомСотр2=2 Тогда
			Размер2 = РазмерОплаты*0.33;
			РазмерОплаты = РазмерОплаты*0.67;
		КонецЕсли;
	КонецЕсли;
	
	Струк = Новый Структура("Сотрудник,Сотрудник2,Размер,Размер2,ВидОплаты,МатериальныйВычет,Профессия");
	Струк.Вставить("Сотрудник",Сотр);
	Струк.Вставить("Сотрудник2",Сотр2);
	Струк.Вставить("Размер",РазмерОплаты);
	Струк.Вставить("Размер2",Размер2);
	Струк.Вставить("ВидОплаты",ВидОплаты);
	Струк.Вставить("МатериальныйВычет",МатериальныйВычет);
	Струк.Вставить("Профессия",Профессия);
	Струк.Вставить("ИспГрузики",ИспГрузики);
	
	Возврат Струк;
КонецФункции

&НаСервере
Процедура ТоварыСтавкаНДСПриИзменении(ТекущаяСтрока,Док)
	
	//ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий,Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура УстанавливаемРежимЗакрытияСмены()
	
	Константы.ШМ_РежимЗакрытияСмены.Установить(Истина);

	//лТекст = "
	//	|ВЫБРАТЬ
	//	|	ШМ_Смены.Период КАК Период,
	//	|	ШМ_Смены.ИмяКомпьютера КАК ИмяКомпьютера,
	//	|	ШМ_Смены.СменаЗакрыта КАК СменаЗакрыта
	//	|ИЗ
	//	|	РегистрСведений.ШМ_Смены КАК ШМ_Смены
	//	|ГДЕ
	//	|	ШМ_Смены.Период МЕЖДУ &НачалоДня И &КонецДня
	//	|	И ШМ_Смены.ИмяКомпьютера = &ИмяКомпьютера
	//	|	И ШМ_Смены.СменаЗакрыта = &СменаЗакрыта
	//	|";

	//лЗапрос = Новый Запрос(лТекст);
	//
	//НачалоДня = НачалоДня(ТекущаяДата() - 60*60*24);
	//КонецДня = КонецДня(ТекущаяДата());
	//ИмяКомпьютера = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	//СменаЗакрыта = Ложь;

	//лЗапрос.УстановитьПараметр("ИмяКомпьютера", ИмяКомпьютера.Наименование);
	//лЗапрос.УстановитьПараметр("КонецДня", КонецДня);
	//лЗапрос.УстановитьПараметр("НачалоДня", НачалоДня);
	//лЗапрос.УстановитьПараметр("СменаЗакрыта", СменаЗакрыта);


	//лВыборка = лЗапрос.Выполнить().Выгрузить(); 

	//Если лВыборка.Количество() > 0 Тогда
	//	Для каждого стр из лВыборка Цикл   
	//		
	//		НаборЗаписей = РегистрыСведений.ШМ_Смены.СоздатьНаборЗаписей();
	//	    НаборЗаписей.Отбор.Период.Установить(стр.Период); 
	//		НаборЗаписей.Отбор.ИмяКомпьютера.Установить(стр.ИмяКомпьютера);     
	//	    НаборЗаписей.Прочитать();  
	//		
	//		Для каждого стр2 из НаборЗаписей Цикл      
	//			стр2.СменаЗакрыта = Истина;
	//		КонецЦикла;                    
	//		
	//	КонецЦикла;    
	//	НаборЗаписей.Записать();
	//КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ОтменяемРежимЗакрытияСмены()
	
	Константы.ШМ_РежимЗакрытияСмены.Установить(Ложь);
	
КонецПроцедуры

&НаСервере
Функция РежимЗакрытияСмены()
	
	Возврат Константы.ШМ_РежимЗакрытияСмены.Получить();
	
КонецФункции

&НаКлиенте
Процедура ЗакрытьСмену(Команда)
	
	УстанавливаемРежимЗакрытияСмены();
	ОткрытьФорму("Обработка.Шиномонтаж.Форма.Затраты");
	
	//Если Вопрос("Затраты внесены?",РежимДиалогаВопрос.ДаНет,,,"Закрытие смены",)=КодВозвратаДиалога.Нет Тогда
	//	Возврат;
	//КонецЕсли;
	
	//Если Вопрос("Закрыть смену?",РежимДиалогаВопрос.ДаНет,,,"Закрытие смены",)=КодВозвратаДиалога.Да Тогда
	//	Если ТекущаяСменаЗакрыта()=Ложь Тогда
	//		
	//		СоздатьРеализациюПоМатериалам("Материалы");
	//		ЗакрытьСменуНаСервере();
	//		СоставСмены();
	//	Иначе
	//		Сообщить("Текущая смена уже закрыта!");
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМакет()
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
КонецФункции

&НаСервере
Функция ПолучитьМакетЧерновика()
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет("МакетЧерновика");
КонецФункции

Функция ПолучитьМакетЧерновика2020()
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет("МакетЧерновика2020");
КонецФункции


Функция ПолучитьМакетОтчетаБухгалтера()
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет("МакетОтчетаБухгалтера");
КонецФункции

Функция ПолучитьМакетОтчетаБухгалтераПомощники()
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет("МакетОтчетаБухгалтераПомощники");
КонецФункции

Функция ПолучитьМакетОтчетаБухгалтераДопИсполнителиДолговая()
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет("МакетОтчетаДопИсполнителиДолговая");
КонецФункции

Функция ПолучитьМакетДископравка()
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет("МакетДископравка");
КонецФункции

Функция ПолучитьМакетОтчетСтойка()
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет("МакетОтчетПоСтойке");
КонецФункции

Функция ПолучитьМакетОтчетСтойкаПоДеньгам()
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет("МакетОтчетПоСтойкеПоДеньгам");
КонецФункции


&НаСервере
Функция ПолучитьМакетТЧ()
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет("ТоварныйЧек");
КонецФункции

Функция ПолучитьМакетДетализации()
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет("Детализация");
КонецФункции

&НаСервере
Функция НачалоСмены()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ШМ_Смены.Период КАК Период,
		|	ШМ_Смены.ИмяКомпьютера КАК ИмяКомпьютера,
		|	ШМ_Смены.НомерСмены КАК НомерСмены
		|ИЗ
		|	РегистрСведений.ШМ_Смены КАК ШМ_Смены
		|ГДЕ
		|	ШМ_Смены.ИмяКомпьютера = &ИмяКомпьютера
		|	И ШМ_Смены.Период <= &Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";

	//Запрос.УстановитьПараметр("Вчера",НачалоДня(ТекущаяДата())-1); 
	ТекущееРабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента(); 
	Запрос.УстановитьПараметр("Период",ТекущаяДата());
	Запрос.УстановитьПараметр("ИмяКомпьютера",ТекущееРабочееМесто.Наименование);
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Период;
	КонецЦикла;
	
	Возврат Ложь
	
КонецФункции

Функция НачалоСменыНаДату(ДатаСмены)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ШМ_Смены.Период КАК Период,
		|	ШМ_Смены.ИмяКомпьютера КАК ИмяКомпьютера,
		|	ШМ_Смены.НомерСмены КАК НомерСмены
		|ИЗ
		|	РегистрСведений.ШМ_Смены КАК ШМ_Смены
		|ГДЕ
		|	ШМ_Смены.ИмяКомпьютера = &ИмяКомпьютера
		|	И ШМ_Смены.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";

 
	ТекущееРабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ДатаСмены)); 
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ДатаСмены));
	Запрос.УстановитьПараметр("ИмяКомпьютера", ТекущееРабочееМесто.Наименование);   
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл 
		Возврат Выборка.Период
	КонецЦикла;  
	
	Возврат Ложь
	
КонецФункции

Функция КонецСменыНаДату(ДатаСмены)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ШМ_Смены.Период КАК Период,
		|	ШМ_Смены.ИмяКомпьютера КАК ИмяКомпьютера,
		|	ШМ_Смены.НомерСмены КАК НомерСмены
		|ИЗ
		|	РегистрСведений.ШМ_Смены КАК ШМ_Смены
		|ГДЕ
		|	ШМ_Смены.Период > &НачалоПериода
		|	И ШМ_Смены.ИмяКомпьютера = &ИмяКомпьютера
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";

	ТекущееРабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();         
	Запрос.УстановитьПараметр("ИмяКомпьютера", ТекущееРабочееМесто.Наименование);   
	Запрос.УстановитьПараметр("НачалоПериода", ДатаСмены); 

	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл 
		Возврат Выборка.Период
	КонецЦикла;  
	
	Возврат ТекущаяДата();
	
КонецФункции

Функция ТекущаяСменаЗакрыта()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ШМ_СменыСрезПоследних.Период КАК Период,
		|	ШМ_СменыСрезПоследних.ИмяКомпьютера КАК ИмяКомпьютера,
		|	ШМ_СменыСрезПоследних.СменаЗакрыта КАК СменаЗакрыта,
		|	ШМ_СменыСрезПоследних.НомерСмены КАК НС
		|ИЗ
		|	РегистрСведений.ШМ_Смены.СрезПоследних(, ) КАК ШМ_СменыСрезПоследних
		|ГДЕ
		|	ШМ_СменыСрезПоследних.ИмяКомпьютера = &ИмяКомпьютера
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";

	
	ТекущееРабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	Запрос.УстановитьПараметр("ИмяКомпьютера", ТекущееРабочееМесто.Наименование);
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл   
		Возврат Выборка.СменаЗакрыта;
	КонецЦикла;

	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПолучитьЗапрос(Результат)
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Закр_Смены";
	Макет = ПолучитьМакет();
	
	НачалоСмены = НачалоСмены();
	КонецСмены  = НачалоСмены + (60*60*24);
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Шапка");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьСтрокаМатериалы = Макет.ПолучитьОбласть("Строка");
	//ОбластьСтрокаСПодчеркиванием = Макет.ПолучитьОбласть("СтрокаСПодчеркиванием");
	
	//1softpro pok +++ 24.03.2025 Результат = Ложь, если функция "польучить запрос" вызывается не из обработки команды "остатки". 
	//Если вызывается из остатков - заполняем данные выбранным рабочим местом      
	
	Если Результат = Ложь ИЛИ Результат = Неопределено Тогда
		ТекущееРабочееМесто =  МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование;
		Склад 				=  ПолучитьСклад(ПользователиКлиентСервер.ТекущийПользователь());   
	Иначе    
		ТекущееРабочееМесто	= Результат.Наименование;
		Склад			 	= Результат.Склад;
	КонецЕсли; 
	
	//1softpro pok --- 24.03.2025  	
	
	ПомощникШиномонтажникаСегодня=Неопределено;
	ПомощникСъемщикаСегодня=Неопределено;
	ОбластьЗаголовок.Параметры.ДатаОтчета=Формат(НачалоСмены,"ДЛФ=Д");
	ОбластьЗаголовок.Параметры.Шиномонтажник="";
	ОбластьЗаголовок.Параметры.Съемщик="";
	ОбластьЗаголовок.Параметры.Дископравщик="";
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_БригадыСрезПоследних.Должность КАК Должность,
		|	ШМ_БригадыСрезПоследних.Помощник КАК Помощник,
		|	ШМ_БригадыСрезПоследних.ИмяКомпьютера КАК ИмяКомпьютера,
		|	ШМ_БригадыСрезПоследних.Сотрудник КАК Сотрудник,
		|	ШМ_БригадыСрезПоследних.Период КАК Период
		|ИЗ
		|	РегистрСведений.ШМ_Бригады.СрезПоследних КАК ШМ_БригадыСрезПоследних
		|ГДЕ
		|	ШМ_БригадыСрезПоследних.ИмяКомпьютера = &ИмяКомпьютера";
	
	
	Запрос.УстановитьПараметр("ИмяКомпьютера", ТекущееРабочееМесто);
	
	Выборка = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаВыборка из Выборка Цикл
		Если (СтрокаВыборка.Должность.Наименование="Шиномонтажник") И (СтрокаВыборка.Помощник=Ложь) Тогда
			ОбластьЗаголовок.Параметры.Шиномонтажник=СтрокаВыборка.Сотрудник;
			ШиномонтажникСегодня=СтрокаВыборка.Сотрудник;
		ИначеЕсли (СтрокаВыборка.Должность.Наименование="Съемщик") И (СтрокаВыборка.Помощник=Ложь) Тогда
			ОбластьЗаголовок.Параметры.Съемщик=СтрокаВыборка.Сотрудник;
			СъемщикСегодня=СтрокаВыборка.Сотрудник;
		ИначеЕсли (СтрокаВыборка.Должность.Наименование="Правщик дисков") И (СтрокаВыборка.Помощник=Ложь) Тогда
			ОбластьЗаголовок.Параметры.Дископравщик=СтрокаВыборка.Сотрудник;
		КонецЕсли;
		Если (СтрокаВыборка.Должность.Наименование="Шиномонтажник") И (СтрокаВыборка.Помощник=Истина) Тогда	
			ПомощникШиномонтажникаСегодня=СтрокаВыборка.Сотрудник;
		ИначеЕсли (СтрокаВыборка.Должность.Наименование="Съемщик") И (СтрокаВыборка.Помощник=Истина) Тогда
			ПомощникСъемщикаСегодня=СтрокаВыборка.Сотрудник;
		ИначеЕсли (СтрокаВыборка.Должность.Наименование="Правщик дисков") И (СтрокаВыборка.Помощник=Истина) Тогда
			
		КонецЕсли;
	КонецЦикла;
	
	ТабДок.Вывести(ОбластьЗаголовок);

	
	
	//++Безроднов 20.02 формирование таблицы материалов расход по рабочему месту начальный и конечный остаток по складу

	МассивПрофессий = Новый Массив;
	МассивПрофессий.Добавить(Справочники.ШМ_Должности.НайтиПоНаименованию("Шиномонтажник"));
	МассивПрофессий.Добавить(Справочники.ШМ_Должности.НайтиПоНаименованию("Съемщик"));
	
	
	ЗапросНоменклатураШиномонтажСъем = Новый Запрос;
	ЗапросНоменклатураШиномонтажСъем.Текст = "ВЫБРАТЬ
	                                      |	ШМ_НоменклатураПрофессии.Материал КАК Материал
	                                      |ИЗ
	                                      |	РегистрСведений.ШМ_НоменклатураПрофессии КАК ШМ_НоменклатураПрофессии
	                                      |ГДЕ
	                                      |	ШМ_НоменклатураПрофессии.Профессия В (&Профессия)
	                                      |	И ШМ_НоменклатураПрофессии.Материал <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)"; 
	
	ЗапросНоменклатураШиномонтажСъем.УстановитьПараметр("Профессия", МассивПрофессий);       
	
	ВыборкаНоменклатурыШиномонтажСъем = ЗапросНоменклатураШиномонтажСъем.Выполнить().Выгрузить();      
			
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииНачальныйОстаток КАК ОстатокНачало,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииПриход КАК Приход,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииРасход КАК Расход,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииКонечныйОстаток КАК ОстатокКонец,
	               |	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
	               |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	               |	ЦеныНоменклатурыСрезПоследних.Цена * ТоварыНаСкладахОстаткиИОбороты.ВНаличииРасход КАК Сумма,
	               |	ТоварыНаСкладахОстаткиИОбороты.Склад КАК Склад
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , Номенклатура.ТипНоменклатуры = &ТипНоменклатуры) КАК ТоварыНаСкладахОстаткиИОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
	               |		ПО ТоварыНаСкладахОстаткиИОбороты.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	               |ГДЕ
	               |	ТоварыНаСкладахОстаткиИОбороты.Номенклатура В(&Номенклатура)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииНачальныйОстаток,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииПриход,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииРасход,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииКонечныйОстаток,
	               |	ЦеныНоменклатурыСрезПоследних.Цена,
	               |	ТоварыНаСкладахОстаткиИОбороты.Склад
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Склад";
		
	Запрос.УстановитьПараметр("НачалоПериода", НачалоСмены);
	Запрос.УстановитьПараметр("КонецПериода", КонецСмены);
	Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар);  
	Запрос.УстановитьПараметр("Номенклатура", ВыборкаНоменклатурыШиномонтажСъем);   
	
	Выборка = Запрос.Выполнить().Выгрузить();     
	
	//Склад = ПолучитьСклад(ПользователиКлиентСервер.ТекущийПользователь());
	СтруктураПоиска = Новый Структура("Склад", Склад); 
	НайденныеСтроки = Выборка.НайтиСтроки(СтруктураПоиска); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииНачальныйОстаток КАК ОстатокНачало,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииПриход КАК Приход,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииРасход КАК Расход,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииКонечныйОстаток КАК ОстатокКонец,
	               |	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
	               |	ТоварыНаСкладахОстаткиИОбороты.Склад КАК Склад,
	               |	ТоварыНаСкладахОстаткиИОбороты.Период КАК Период
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Регистратор, , Номенклатура.ТипНоменклатуры = &ТипНоменклатуры) КАК ТоварыНаСкладахОстаткиИОбороты
	               |ГДЕ
	               |	ТоварыНаСкладахОстаткиИОбороты.Регистратор.ИмяКомпьютера = &ИмяКомпьютера
	               |	И ТоварыНаСкладахОстаткиИОбороты.Номенклатура В (&Номенклатура)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииНачальныйОстаток,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииПриход,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииРасход,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииКонечныйОстаток,
	               |	ТоварыНаСкладахОстаткиИОбороты.Склад,
	               |	ТоварыНаСкладахОстаткиИОбороты.Период
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период,
	               |	Номенклатура";   
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоСмены);
	Запрос.УстановитьПараметр("КонецПериода", КонецСмены);
	Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар);  
	Запрос.УстановитьПараметр("Номенклатура", ВыборкаНоменклатурыШиномонтажСъем);  
	Запрос.УстановитьПараметр("ИмяКомпьютера", ТекущееРабочееМесто);
	
	Выборка2 = Запрос.Выполнить().Выгрузить();
	
	МассивМатериалов = Новый Массив;
	Если Выборка2.Количество() > 0 Тогда
		Материал = Выборка2[0];
		инд = 1;
		
		Если инд = Выборка2.Количество() Тогда   
			МассивМатериалов.Добавить(Материал);
		КонецЕсли;
		
		Пока НЕ инд = Выборка2.Количество() Цикл
			Пока Материал.Номенклатура = Выборка2[инд].Номенклатура Цикл  
				Материал.Приход = Материал.Приход + Выборка2[инд].Приход;
				Материал.Расход = Материал.Расход + Выборка2[инд].Расход; 
				Материал.ОстатокКонец = Материал.ОстатокНачало + Материал.Приход - Материал.Расход;      
				инд = инд + 1; 
				Если инд = Выборка2.Количество() Тогда  
					Прервать;
				КонецЕсли;
			КонецЦикла;   
			МассивМатериалов.Добавить(Материал);
			Если инд = Выборка2.Количество() Тогда  
				Прервать;
			КонецЕсли;
			Материал = Выборка2[инд]; 
			инд = инд + 1;
			Если инд = Выборка2.Количество() Тогда 
				МассивМатериалов.Добавить(Материал);		
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
		//Структурируем ТЧ материалов dev1 +++ 
		ЗапросПорядка = Новый Запрос;
    	ЗапросПорядка.Текст = "ВЫБРАТЬ
    	                      |	ШМ_СоставОтчетаШиномонтажника.Номеклатура КАК Номенклатура,
    	                      |	ШМ_СоставОтчетаШиномонтажника.НомерСтрокиОтчета КАК НомерСтрокиОтчета
    	                      |ИЗ
    	                      |	РегистрСведений.ШМ_СоставОтчетаШиномонтажника КАК ШМ_СоставОтчетаШиномонтажника
    	                      |
    	                      |УПОРЯДОЧИТЬ ПО
    	                      |	НомерСтрокиОтчета";
 
     	РезультатЗапросаПорядка = ЗапросПорядка.Выполнить().Выгрузить();  
		//dev1 ---  
		
	ТаблицаТоварыНаСкладах = Новый ТаблицаЗначений;
	ТаблицаТоварыНаСкладах.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоварыНаСкладах.Колонки.Добавить("ОстатокНачало", Новый ОписаниеТипов("Число")); 
	ТаблицаТоварыНаСкладах.Колонки.Добавить("Приход", Новый ОписаниеТипов("Число"));
	ТаблицаТоварыНаСкладах.Колонки.Добавить("Расход", Новый ОписаниеТипов("Число"));
	ТаблицаТоварыНаСкладах.Колонки.Добавить("ОстатокКонец", Новый ОписаниеТипов("Число")); 
	ТаблицаТоварыНаСкладах.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	ТаблицаТоварыНаСкладах.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	
	МатериалИтог = 0;
	Для каждого стр из НайденныеСтроки Цикл    
		
		НовыйСтр = ТаблицаТоварыНаСкладах.Добавить();
		НовыйСтр.Номенклатура  = стр.Номенклатура;
		НовыйСтр.ОстатокНачало = Строка(стр.ОстатокНачало);
		НовыйСтр.Приход        = Строка(стр.Приход); 
		НовыйСтр.ОстатокКонец  = Строка(стр.ОстатокКонец);
		НовыйСтр.Цена          = Строка(стр.Цена); 
		
		Для каждого стр1 из МассивМатериалов Цикл  
			Если стр.Номенклатура = стр1.Номенклатура Тогда
				
				НовыйСтр.Расход        = Строка(стр1.Расход);
				НовыйСтр.Сумма  	   = Строка(стр1.Расход*стр.Цена);   
				МатериалИтог 		   = МатериалИтог + стр1.Расход*стр.Цена;
				Прервать;
				
			Иначе
				
				НовыйСтр.Расход        = "0";
				НовыйСтр.Сумма		   = "0";
				
			КонецЕсли; 
		КонецЦикла;	  
		
	КонецЦикла; 
	
	Для каждого стр из РезультатЗапросаПорядка Цикл  
		СтруктураПоиска = Новый Структура("Номенклатура", стр.Номенклатура);
		НайденныеСтроки = ТаблицаТоварыНаСкладах.НайтиСтроки(СтруктураПоиска); 
		Если НайденныеСтроки.Количество() > 0 Тогда  
			
			стр1 = НайденныеСтроки[0];
			
			ОбластьСтрокаМатериалы.Параметры.Номенклатура  = стр1.Номенклатура;
			ОбластьСтрокаМатериалы.Параметры.ОстатокНачало = Строка(стр1.ОстатокНачало);
			ОбластьСтрокаМатериалы.Параметры.Приход        = стр1.Приход; 
			ОбластьСтрокаМатериалы.Параметры.Расход  	   = стр1.Расход;
			ОбластьСтрокаМатериалы.Параметры.ОстатокКонец  = стр1.ОстатокКонец;
			ОбластьСтрокаМатериалы.Параметры.Цена  		   = стр1.Цена;
			ОбластьСтрокаМатериалы.Параметры.Сумма         = стр1.Сумма; 
			
			ТабДок.Вывести(ОбластьСтрокаМатериалы);	 
			
		КонецЕсли;
	КонецЦикла;
		
//---	

//ПОДВАЛ ЧИСТОВИКА ШИН + СЪЕМ

	Игла = Константы.ШМ_Игла.Получить();
	Домкрат = Константы.ШМ_Домкрат.Получить();
	Бирок = Константы.ШМ_КоличествоБирок.Получить();
	ВС = Константы.ШМ_ВизиткиСкидки.Получить();
	
	
	Стойка = 0;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_Стойка.Продано КАК Продано,
		|	ШМ_Стойка.ДатаПродажи КАК ДатаПродажи,
		|	ШМ_Стойка.ЦенаПродажи КАК ЦенаПродажи
		|ИЗ
		|	РегистрСведений.ШМ_Стойка КАК ШМ_Стойка
		|ГДЕ
		|	ШМ_Стойка.Продано = ИСТИНА
		|	И ШМ_Стойка.ДатаПродажи МЕЖДУ &ДатаНач И &ДатаКон
		|	И ШМ_Стойка.ТочкаПродажи = &ТочкаПродажи";
	
	Запрос.УстановитьПараметр("ДатаНач", НачалоСмены);
	Запрос.УстановитьПараметр("ДатаКон", КонецСмены);   
	Запрос.УстановитьПараметр("ТочкаПродажи", ТекущееРабочееМесто);
	
	Выборка = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаВыборка Из Выборка Цикл
		Стойка=Стойка+СтрокаВыборка.ЦенаПродажи;
	КонецЦикла;
//++dev1	
	ШМПолучил = СуммаШМНаДату(НачалоСмены,КонецСмены,ТекущееРабочееМесто);
	СъемПолучил = СуммаСъемНаДату(НачалоСмены,КонецСмены,ТекущееРабочееМесто);
	
	ШМВсего   = 0;
	СъемВсего = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровУслуг.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |ГДЕ
	               |	РеализацияТоваровУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	               |	И РеализацияТоваровУслуг.Проведен = &Проведен
	               |	И РеализацияТоваровУслуг.Комментарий НЕ ПОДОБНО &Комментарий
	               |	И РеализацияТоваровУслуг.ИмяКомпьютера = &ИмяКомпьютера";
	
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоСмены);
	Запрос.УстановитьПараметр("КонецПериода", КонецСмены);
	Запрос.УстановитьПараметр("Проведен", Истина);
	Запрос.УстановитьПараметр("Комментарий", "Материалы");
	Запрос.УстановитьПараметр("ИмяКомпьютера", ТекущееРабочееМесто);         
	
	ВыбРеалЧерновик = Запрос.Выполнить().Выбрать();
	
	Пока ВыбРеалЧерновик.Следующий() Цикл
		ШМВсего   = ШМВсего + ВыбРеалЧерновик.Ссылка.СуммаШиномонтажЧерновик;
		СъемВсего = СъемВсего + ВыбРеалЧерновик.Ссылка.СуммаСъемЧерновик; 
	КонецЦикла;
	
	Попытка	
		ШМСдал           = ШМВсего - ШМПолучил;
		СъемСдал		 = СъемВсего - СъемПолучил;
		ШМВсегоСъемВсего = СъемСдал + ШМСдал + МатериалИтог;
	Исключение  
	КонецПопытки;
	
	ОбластьПодвал.Параметры.ШМВсегоСъемВсего = Строка(ШМВсегоСъемВсего);
	ОбластьПодвал.Параметры.Стойка 			 = Строка(Стойка);
	ОбластьПодвал.Параметры.Всего 			 = Строка(МатериалИтог);
	ОбластьПодвал.Параметры.МатСдал 		 = Строка(МатериалИтог);
	ОбластьПодвал.Параметры.ШМВсего 		 = Строка(ШМВсего);
	ОбластьПодвал.Параметры.СъемВсего 		 = Строка(СъемВсего);              
	ОбластьПодвал.Параметры.ШМПолучил 		 = Строка(ШМПолучил);
	ОбластьПодвал.Параметры.СъемПолучил 	 = Строка(СъемПолучил);
	ОбластьПодвал.Параметры.ШМСдал 			 = Строка(ШМСдал);       
	ОбластьПодвал.Параметры.СъемСдал 		 = Строка(СъемСдал);   

	//--Безроднов 	
	
	// подвал вспомогательная касса и бирки	
	
	//+++Безроднов 18.02 неправильно выводилась информация по вспомогательной кассе, и биркам добавил условие по текущему рабочему месту
	
	ВспомКассаДолг=0;
	СписокКоличестваБирок = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_ОтложенныеЧеки.ИдентификаторЧека КАК ИдентификаторЧека,
		|	ШМ_ОтложенныеЧеки.Выполнен КАК Выполнен,
		|	ШМ_ОтложенныеЧеки.ДатаЧека КАК ДатаЧека,
		|	ШМ_ОтложенныеЧеки.Отбит КАК Отбит,
		|	ШМ_ОтложенныеЧеки.Номенклатура КАК Номенклатура,
		|	ШМ_ОтложенныеЧеки.НомерМашины КАК НомерМашины,
		|	ШМ_ОтложенныеЧеки.Телефон КАК Телефон,
		|	ШМ_ОтложенныеЧеки.Количество КАК Количество,
		|	ШМ_ОтложенныеЧеки.Цена КАК Цена,
		|	ШМ_ОтложенныеЧеки.Сумма КАК Сумма,
		|	ШМ_ОтложенныеЧеки.Сотрудник КАК Сотрудник,
		|	ШМ_ОтложенныеЧеки.СуммаБезСкидки КАК СуммаБезСкидки,
		|	ШМ_ОтложенныеЧеки.СуммаСкидки КАК СуммаСкидки,
		|	ШМ_ОтложенныеЧеки.Купон КАК Купон,
		|	ШМ_ОтложенныеЧеки.Скидка КАК Скидка,
		|	ШМ_ОтложенныеЧеки.Бирка КАК Бирка,
		|	ШМ_ОтложенныеЧеки.КолГруз1 КАК КолГруз1,
		|	ШМ_ОтложенныеЧеки.КолГруз2 КАК КолГруз2,
		|	ШМ_ОтложенныеЧеки.ДатаВыполнения КАК ДатаВыполнения,
		|	ШМ_ОтложенныеЧеки.СкидкаРазовая КАК СкидкаРазовая,
		|	ШМ_ОтложенныеЧеки.РабочееМесто КАК РабочееМесто,
		|	ШМ_ОтложенныеЧеки.Восстановить КАК Восстановить
		|ИЗ
		|	РегистрСведений.ШМ_ОтложенныеЧеки КАК ШМ_ОтложенныеЧеки
		|ГДЕ
		|	ШМ_ОтложенныеЧеки.РабочееМесто = &РабочееМесто";
	
	Запрос.УстановитьПараметр("РабочееМесто", ТекущееРабочееМесто);
		
	ВыбОтложенных = Запрос.Выполнить().Выбрать();
	
	Пока ВыбОтложенных.Следующий() Цикл
		Если ВыбОтложенных.Отбит=Истина Тогда
			Продолжить;
		КонецЕсли;
		//Если ВыбОтложенных.ДатаЧека>КонецСмены Тогда
		//	Продолжить;
		//КонецЕсли;
		ВспомКассаДолг=ВспомКассаДолг+ВыбОтложенных.Сумма;
		Если СписокКоличестваБирок.НайтиПоЗначению(ВыбОтложенных.ИдентификаторЧека)=Неопределено Тогда
			СписокКоличестваБирок.Добавить(ВыбОтложенных.ИдентификаторЧека);
		КонецЕсли;
	КонецЦикла;
	
	//---- Безроднов 18.02
	
	
	//СписокКоличестваБирок = Новый СписокЗначений;
	//ВыбОтложенных=РегистрыСведений.ШМ_ОтложенныеЧеки.Выбрать();
	
	//Пока ВыбОтложенных.Следующий() Цикл
	//	Если ВыбОтложенных.Отбит=Истина Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	ВспомКассаДолг=ВспомКассаДолг+ВыбОтложенных.Сумма;
	//	Если СписокКоличестваБирок.НайтиПоЗначению(ВыбОтложенных.ИдентификаторЧека)=Неопределено Тогда
	//		СписокКоличестваБирок.Добавить(ВыбОтложенных.ИдентификаторЧека);
	//	КонецЕсли;
	//КонецЦикла; 
	
	ОбластьПодвал.Параметры.ВспомКассаДолг=ВспомКассаДолг;
	ОбластьПодвал.Параметры.ВспомКассаОстаток=Константы.ШМСуммаВспомогательнойКассы.Получить()-ВспомКассаДолг;
	ОбластьПодвал.Параметры.ВспомКолБирок=СписокКоличестваБирок.Количество();
	ОбластьПодвал.Параметры.ВспомКассаВсего = Константы.ШМСуммаВспомогательнойКассы.Получить();
	
	ТабДок.Вывести(ОбластьПодвал);
	ТабДок.ТолькоПросмотр = Истина;
	Возврат ТабДок;
КонецФункции

&НаСервере
Функция ПолучитьЗапросНаДату(ДатаСмены, ФормаВыбРабочиеМеста)
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Закр_Смены";
	Макет = ПолучитьМакет();
	
	НачалоСмены = НачалоСменыНаДату(ДатаСмены);      

	Если ТипЗнч(НачалоСмены) = Тип("Булево") Тогда 
		Сообщить(СтрШаблон("За указанный период(%1) не зарегестрировано смен. Сообщите в IT о данной проблеме", НачалоДня(ДатаСмены)));
		Возврат Ложь;
	КонецЕсли; 
	
	КонецСмены = КонецСменыНаДатуЧерновик(КонецДня(НачалоСмены));
	Если КонецСмены = ложь Тогда 
		КонецСмены = ТекущаяДата();
	КонецЕсли;
	
	//НачалоСмены = НачалоДня(ДатаСмены)+ 60*60*9;
	//КонецСмены = НачалоСмены + 60*60*24;
		
	//ПОЛУЧАЕТ ОБЛАСТИ МАКЕТА	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Шапка");
	ОбластьПодвал = Макет.ПолучитьОбласть("ПодвалНаДату");
	ОбластьСтрокаМатериалы = Макет.ПолучитьОбласть("Строка");
	//ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьСтрокаСПодчеркиванием = Макет.ПолучитьОбласть("СтрокаСПодчеркиванием");
	
	//ПомощникШиномонтажникаСегодня=Неопределено;
	//ПомощникСъемщикаСегодня=Неопределено;  

//++dev1 
	Если ФормаВыбРабочиеМеста <> Неопределено тогда 
		ТекущееРабочееМесто = ФормаВыбРабочиеМеста.Наименование;
		Склад = ФормаВыбРабочиеМеста.Склад;
	Иначе
		ТекущееРабочееМесто =  МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование;
		Склад =  ПолучитьСклад(ПользователиКлиентСервер.ТекущийПользователь()); 
	КонецЕсли;
//--	
	
	//ФОРМИРУЕТ ШАПКУ МАКЕТА 
	
	ОбластьЗаголовок.Параметры.ДатаОтчета=Формат(НачалоСмены,"ДЛФ=Д");
	ОбластьЗаголовок.Параметры.Шиномонтажник="";
	ОбластьЗаголовок.Параметры.Съемщик="";
	ОбластьЗаголовок.Параметры.Дископравщик="";
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_БригадыСрезПоследних.Период КАК Период,
		|	ШМ_БригадыСрезПоследних.Должность КАК Должность,
		|	ШМ_БригадыСрезПоследних.Помощник КАК Помощник,
		|	ШМ_БригадыСрезПоследних.ИмяКомпьютера КАК ИмяКомпьютера,
		|	ШМ_БригадыСрезПоследних.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ШМ_Бригады КАК ШМ_БригадыСрезПоследних
		|ГДЕ
		|	ШМ_БригадыСрезПоследних.ИмяКомпьютера = &ИмяКомпьютера
		|	И ШМ_БригадыСрезПоследних.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	ШМ_БригадыСрезПоследних.Период,
		|	ШМ_БригадыСрезПоследних.Сотрудник,
		|	ШМ_БригадыСрезПоследних.Помощник,
		|	ШМ_БригадыСрезПоследних.Должность,
		|	ШМ_БригадыСрезПоследних.ИмяКомпьютера
		|
		|УПОРЯДОЧИТЬ ПО
		|	ШМ_БригадыСрезПоследних.Период";    
	
	Запрос.УстановитьПараметр("ИмяКомпьютера", ТекущееРабочееМесто); 
	Запрос.УстановитьПараметр("НачалоПериода", НачалоСмены);
	Запрос.УстановитьПараметр("КонецПериода", КонецСмены);
	Выборка = Запрос.Выполнить().Выгрузить();
	Выборка.Сортировать("Период");
	
	
	Для Каждого СтрокаВыборка из Выборка Цикл
		Если СтрокаВыборка.Должность.Наименование="Шиномонтажник" Тогда
			ОбластьЗаголовок.Параметры.Шиномонтажник=СтрокаВыборка.Сотрудник;
			ШиномонтажникСегодня=СтрокаВыборка.Сотрудник;
		ИначеЕсли СтрокаВыборка.Должность.Наименование="Съемщик" Тогда
			ОбластьЗаголовок.Параметры.Съемщик=СтрокаВыборка.Сотрудник;
			СъемщикСегодня=СтрокаВыборка.Сотрудник;
		ИначеЕсли СтрокаВыборка.Должность.Наименование="Правщик дисков" Тогда
			ОбластьЗаголовок.Параметры.Дископравщик=СтрокаВыборка.Сотрудник;
		КонецЕсли;
	КонецЦикла;
	
	ТабДок.Вывести(ОбластьЗаголовок);	
	
////++Безроднов 20.02 формирование таблицы материалов расход по рабочему месту начальный и конечный остаток по складу

	МассивПрофессий = Новый Массив;
	МассивПрофессий.Добавить(Справочники.ШМ_Должности.НайтиПоНаименованию("Шиномонтажник"));
	МассивПрофессий.Добавить(Справочники.ШМ_Должности.НайтиПоНаименованию("Съемщик"));   
	
	
	
	ЗапросНоменклатураШиномонтажСъем = Новый Запрос;
	ЗапросНоменклатураШиномонтажСъем.Текст = "ВЫБРАТЬ
	                                      |	ШМ_НоменклатураПрофессии.Материал КАК Материал
	                                      |ИЗ
	                                      |	РегистрСведений.ШМ_НоменклатураПрофессии КАК ШМ_НоменклатураПрофессии
	                                      |ГДЕ
	                                      |	ШМ_НоменклатураПрофессии.Профессия В (&Профессия)
	                                      |	И ШМ_НоменклатураПрофессии.Материал <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)"; 
	
	ЗапросНоменклатураШиномонтажСъем.УстановитьПараметр("Профессия", МассивПрофессий);       
	
	ВыборкаНоменклатурыШиномонтажСъем = ЗапросНоменклатураШиномонтажСъем.Выполнить().Выгрузить();      
			
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииНачальныйОстаток КАК ОстатокНачало,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииПриход КАК Приход,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииРасход КАК Расход,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииКонечныйОстаток КАК ОстатокКонец,
	               |	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
	               |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	               |	ЦеныНоменклатурыСрезПоследних.Цена * ТоварыНаСкладахОстаткиИОбороты.ВНаличииРасход КАК Сумма,
	               |	ТоварыНаСкладахОстаткиИОбороты.Склад КАК Склад
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , Номенклатура.ТипНоменклатуры = &ТипНоменклатуры) КАК ТоварыНаСкладахОстаткиИОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
	               |		ПО ТоварыНаСкладахОстаткиИОбороты.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	               |ГДЕ
	               |	ТоварыНаСкладахОстаткиИОбороты.Номенклатура В(&Номенклатура)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииНачальныйОстаток,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииПриход,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииРасход,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииКонечныйОстаток,
	               |	ЦеныНоменклатурыСрезПоследних.Цена,
	               |	ТоварыНаСкладахОстаткиИОбороты.Склад
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Склад";
		
	Запрос.УстановитьПараметр("НачалоПериода", НачалоСмены);
	Запрос.УстановитьПараметр("КонецПериода", КонецСмены);
	Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар);  
	Запрос.УстановитьПараметр("Номенклатура", ВыборкаНоменклатурыШиномонтажСъем);   
	
	Выборка = Запрос.Выполнить().Выгрузить();     
	
	СтруктураПоиска = Новый Структура("Склад", Склад); 
	НайденныеСтроки = Выборка.НайтиСтроки(СтруктураПоиска); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииНачальныйОстаток КАК ОстатокНачало,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииПриход КАК Приход,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииРасход КАК Расход,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииКонечныйОстаток КАК ОстатокКонец,
	               |	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
	               |	ТоварыНаСкладахОстаткиИОбороты.Склад КАК Склад,
	               |	ТоварыНаСкладахОстаткиИОбороты.Период КАК Период
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Регистратор, , Номенклатура.ТипНоменклатуры = &ТипНоменклатуры) КАК ТоварыНаСкладахОстаткиИОбороты
	               |ГДЕ
	               |	ТоварыНаСкладахОстаткиИОбороты.Регистратор.ИмяКомпьютера = &ИмяКомпьютера
	               |	И ТоварыНаСкладахОстаткиИОбороты.Номенклатура В (&Номенклатура)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииНачальныйОстаток,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииПриход,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииРасход,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииКонечныйОстаток,
	               |	ТоварыНаСкладахОстаткиИОбороты.Склад,
	               |	ТоварыНаСкладахОстаткиИОбороты.Период
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период,
	               |	Номенклатура";   
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоСмены);
	Запрос.УстановитьПараметр("КонецПериода", КонецСмены);
	Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар);  
	Запрос.УстановитьПараметр("Номенклатура", ВыборкаНоменклатурыШиномонтажСъем);  
	Запрос.УстановитьПараметр("ИмяКомпьютера", ТекущееРабочееМесто);
	
	Выборка2 = Запрос.Выполнить().Выгрузить();
	
	МассивМатериалов = Новый Массив;
	
        	Если Выборка2.Количество() > 0 Тогда
		Материал = Выборка2[0];
		инд = 1;  
		
		Если инд = Выборка2.Количество() Тогда   
			МассивМатериалов.Добавить(Материал);
		КонецЕсли;
		
		Пока НЕ инд = Выборка2.Количество() Цикл
			Пока Материал.Номенклатура = Выборка2[инд].Номенклатура Цикл  
				Материал.Приход = Материал.Приход + Выборка2[инд].Приход;
				Материал.Расход = Материал.Расход + Выборка2[инд].Расход; 
				Материал.ОстатокКонец = Материал.ОстатокНачало + Материал.Приход - Материал.Расход;      
				инд = инд + 1; 
				Если инд = Выборка2.Количество() Тогда  
					Прервать;
				КонецЕсли;
			КонецЦикла;   
			МассивМатериалов.Добавить(Материал);
			Если инд = Выборка2.Количество() Тогда  
				Прервать;
			КонецЕсли;
			Материал = Выборка2[инд]; 
			инд = инд + 1;
			Если инд = Выборка2.Количество() Тогда 
				МассивМатериалов.Добавить(Материал);		
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
		//Структурируем ТЧ материалов dev1 +++ 
		ЗапросПорядка = Новый Запрос;
    	ЗапросПорядка.Текст = "ВЫБРАТЬ
    	                      |	ШМ_СоставОтчетаШиномонтажника.Номеклатура КАК Номенклатура,
    	                      |	ШМ_СоставОтчетаШиномонтажника.НомерСтрокиОтчета КАК НомерСтрокиОтчета
    	                      |ИЗ
    	                      |	РегистрСведений.ШМ_СоставОтчетаШиномонтажника КАК ШМ_СоставОтчетаШиномонтажника
    	                      |
    	                      |УПОРЯДОЧИТЬ ПО
    	                      |	НомерСтрокиОтчета";
 
     	РезультатЗапросаПорядка = ЗапросПорядка.Выполнить().Выгрузить();  
		//dev1 ---  
		
	ТаблицаТоварыНаСкладах = Новый ТаблицаЗначений;
	ТаблицаТоварыНаСкладах.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоварыНаСкладах.Колонки.Добавить("ОстатокНачало", Новый ОписаниеТипов("Число")); 
	ТаблицаТоварыНаСкладах.Колонки.Добавить("Приход", Новый ОписаниеТипов("Число"));
	ТаблицаТоварыНаСкладах.Колонки.Добавить("Расход", Новый ОписаниеТипов("Число"));
	ТаблицаТоварыНаСкладах.Колонки.Добавить("ОстатокКонец", Новый ОписаниеТипов("Число")); 
	ТаблицаТоварыНаСкладах.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	ТаблицаТоварыНаСкладах.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	
	МатериалИтог = 0;
	Для каждого стр из НайденныеСтроки Цикл    
		
		НовыйСтр = ТаблицаТоварыНаСкладах.Добавить();
		НовыйСтр.Номенклатура  = стр.Номенклатура;
		НовыйСтр.ОстатокНачало = Строка(стр.ОстатокНачало);
		НовыйСтр.Приход        = Строка(стр.Приход); 
		НовыйСтр.ОстатокКонец  = Строка(стр.ОстатокКонец);
		НовыйСтр.Цена          = Строка(стр.Цена); 
		
		Для каждого стр1 из МассивМатериалов Цикл  
			Если стр.Номенклатура = стр1.Номенклатура Тогда
				
				НовыйСтр.Расход        = Строка(стр1.Расход);
				НовыйСтр.Сумма  	   = Строка(стр1.Расход*стр.Цена);   
				МатериалИтог 		   = МатериалИтог + стр1.Расход*стр.Цена;
				Прервать;
				
			Иначе
				
				НовыйСтр.Расход        = "0";
				НовыйСтр.Сумма		   = "0";
				
			КонецЕсли; 
		КонецЦикла;	    
		
	КонецЦикла; 
	
	Для каждого стр из РезультатЗапросаПорядка Цикл  
		СтруктураПоиска = Новый Структура("Номенклатура", стр.Номенклатура);
		НайденныеСтроки = ТаблицаТоварыНаСкладах.НайтиСтроки(СтруктураПоиска); 
		Если НайденныеСтроки.Количество() > 0 Тогда  
			
 			стр1 = НайденныеСтроки[0];
			
			ОбластьСтрокаМатериалы.Параметры.Номенклатура  = стр1.Номенклатура;
			ОбластьСтрокаМатериалы.Параметры.ОстатокНачало = Строка(стр1.ОстатокНачало);
			ОбластьСтрокаМатериалы.Параметры.Приход        = стр1.Приход; 
			ОбластьСтрокаМатериалы.Параметры.Расход  	   = стр1.Расход;
			ОбластьСтрокаМатериалы.Параметры.ОстатокКонец  = стр1.ОстатокКонец;
			ОбластьСтрокаМатериалы.Параметры.Цена  		   = стр1.Цена;
			ОбластьСтрокаМатериалы.Параметры.Сумма         = стр1.Сумма; 
			
			ТабДок.Вывести(ОбластьСтрокаМатериалы);	 
			
		КонецЕсли;
	КонецЦикла;
 
////---	

//ПОДВАЛ ЧИСТОВИКА 

	Игла = Константы.ШМ_Игла.Получить();
	Домкрат = Константы.ШМ_Домкрат.Получить();
	Бирок = Константы.ШМ_КоличествоБирок.Получить();
	ВС = Константы.ШМ_ВизиткиСкидки.Получить();
	
	
	Стойка = 0;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_Стойка.Продано КАК Продано,
		|	ШМ_Стойка.ДатаПродажи КАК ДатаПродажи,
		|	ШМ_Стойка.ЦенаПродажи КАК ЦенаПродажи
		|ИЗ
		|	РегистрСведений.ШМ_Стойка КАК ШМ_Стойка
		|ГДЕ
		|	ШМ_Стойка.Продано = ИСТИНА
		|	И ШМ_Стойка.ДатаПродажи МЕЖДУ &ДатаНач И &ДатаКон
		|	И ШМ_Стойка.ТочкаПродажи = &ТочкаПродажи";
	
	Запрос.УстановитьПараметр("ДатаНач", НачалоСмены);
	Запрос.УстановитьПараметр("ДатаКон", КонецСмены);   
	Запрос.УстановитьПараметр("ТочкаПродажи", ТекущееРабочееМесто);
	
	Выборка = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаВыборка Из Выборка Цикл
		Стойка=Стойка+СтрокаВыборка.ЦенаПродажи;
	КонецЦикла;
//++dev1 тут имя компа изменил добавил параметры	
	ШМПолучил = СуммаШМНаДату(НачалоСмены,КонецСмены,ТекущееРабочееМесто);
	СъемПолучил = СуммаСъемНаДату(НачалоСмены,КонецСмены,ТекущееРабочееМесто);
//--dev1	
	ШМВсего   = 0;
	СъемВсего = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровУслуг.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |ГДЕ
	               |	РеализацияТоваровУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	               |	И РеализацияТоваровУслуг.Проведен = &Проведен
	               |	И РеализацияТоваровУслуг.Комментарий НЕ ПОДОБНО &Комментарий
	               |	И РеализацияТоваровУслуг.ИмяКомпьютера = &ИмяКомпьютера";
	
	       
	Запрос.УстановитьПараметр("НачалоПериода", НачалоСмены);
	Запрос.УстановитьПараметр("КонецПериода", КонецСмены);
	Запрос.УстановитьПараметр("Проведен", Истина);
	Запрос.УстановитьПараметр("Комментарий", "Материалы");
	Запрос.УстановитьПараметр("ИмяКомпьютера", ТекущееРабочееМесто);        
	
	ВыбРеалЧерновик = Запрос.Выполнить().Выбрать();
	
	Пока ВыбРеалЧерновик.Следующий() Цикл
		ШМВсего   = ШМВсего + ВыбРеалЧерновик.Ссылка.СуммаШиномонтажЧерновик;
		СъемВсего = СъемВсего + ВыбРеалЧерновик.Ссылка.СуммаСъемЧерновик; 
	КонецЦикла;

	//СъемВсего = СъемВсегоНаДату(НачалоСмены,КонецСмены);
	
	Попытка	
		ШМСдал           = ШМВсего - ШМПолучил;
		СъемСдал		 = СъемВсего - СъемПолучил;
		ШМВсегоСъемВсего = СъемСдал + ШМСдал + МатериалИтог;//МатериалИтог;
	Исключение  
	КонецПопытки;
	
	ОбластьПодвал.Параметры.ШМВсегоСъемВсего = Строка(ШМВсегоСъемВсего);
	ОбластьПодвал.Параметры.Стойка 			 = Строка(Стойка);
	ОбластьПодвал.Параметры.Всего 			 = Строка(МатериалИтог);
	ОбластьПодвал.Параметры.МатСдал 		 = Строка(МатериалИтог);
	ОбластьПодвал.Параметры.ШМВсего 		 = Строка(ШМВсего);
	ОбластьПодвал.Параметры.СъемВсего 		 = Строка(СъемВсего);              
	ОбластьПодвал.Параметры.ШМПолучил 		 = Строка(ШМПолучил);
	ОбластьПодвал.Параметры.СъемПолучил 	 = Строка(СъемПолучил);
	ОбластьПодвал.Параметры.ШМСдал 			 = Строка(ШМСдал);       
	ОбластьПодвал.Параметры.СъемСдал 		 = Строка(СъемСдал);  
	
	
	
// подвал вспомогательная касса и бирки	
//+++ dev1 18.02 неправильно выводилась информация по вспомогательной кассе, и биркам
	
	ВспомКассаДолг=0;
	СписокКоличестваБирок = Новый СписокЗначений;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_ОтложенныеЧеки.ИдентификаторЧека КАК ИдентификаторЧека,
		|	ШМ_ОтложенныеЧеки.Выполнен КАК Выполнен,
		|	ШМ_ОтложенныеЧеки.ДатаЧека КАК ДатаЧека,
		|	ШМ_ОтложенныеЧеки.Отбит КАК Отбит,
		|	ШМ_ОтложенныеЧеки.Номенклатура КАК Номенклатура,
		|	ШМ_ОтложенныеЧеки.НомерМашины КАК НомерМашины,
		|	ШМ_ОтложенныеЧеки.Телефон КАК Телефон,
		|	ШМ_ОтложенныеЧеки.Количество КАК Количество,
		|	ШМ_ОтложенныеЧеки.Цена КАК Цена,
		|	ШМ_ОтложенныеЧеки.Сумма КАК Сумма,
		|	ШМ_ОтложенныеЧеки.Сотрудник КАК Сотрудник,
		|	ШМ_ОтложенныеЧеки.СуммаБезСкидки КАК СуммаБезСкидки,
		|	ШМ_ОтложенныеЧеки.СуммаСкидки КАК СуммаСкидки,
		|	ШМ_ОтложенныеЧеки.Купон КАК Купон,
		|	ШМ_ОтложенныеЧеки.Скидка КАК Скидка,
		|	ШМ_ОтложенныеЧеки.Бирка КАК Бирка,
		|	ШМ_ОтложенныеЧеки.КолГруз1 КАК КолГруз1,
		|	ШМ_ОтложенныеЧеки.КолГруз2 КАК КолГруз2,
		|	ШМ_ОтложенныеЧеки.ДатаВыполнения КАК ДатаВыполнения,
		|	ШМ_ОтложенныеЧеки.СкидкаРазовая КАК СкидкаРазовая,
		|	ШМ_ОтложенныеЧеки.РабочееМесто КАК РабочееМесто,
		|	ШМ_ОтложенныеЧеки.Восстановить КАК Восстановить
		|ИЗ
		|	РегистрСведений.ШМ_ОтложенныеЧеки КАК ШМ_ОтложенныеЧеки
		|ГДЕ
		|	ШМ_ОтложенныеЧеки.РабочееМесто = &РабочееМесто";
	
	Запрос.УстановитьПараметр("РабочееМесто", ТекущееРабочееМесто);
		
	ВыбОтложенных = Запрос.Выполнить().Выбрать();
	
	Пока ВыбОтложенных.Следующий() Цикл
		Если ВыбОтложенных.Отбит=Истина Тогда
			Продолжить;
		КонецЕсли;
		Если ВыбОтложенных.ДатаЧека>КонецСмены Тогда
			Продолжить;
		КонецЕсли;
		ВспомКассаДолг=ВспомКассаДолг+ВыбОтложенных.Сумма;
		Если СписокКоличестваБирок.НайтиПоЗначению(ВыбОтложенных.ИдентификаторЧека)=Неопределено Тогда
			СписокКоличестваБирок.Добавить(ВыбОтложенных.ИдентификаторЧека);
		КонецЕсли;
	КонецЦикла;
		
	ОбластьПодвал.Параметры.ВспомКассаВсего = Константы.ШМСуммаВспомогательнойКассы.Получить();
	ОбластьПодвал.Параметры.ВспомКассаДолг=ВспомКассаДолг;
	ОбластьПодвал.Параметры.ВспомКассаОстаток=Константы.ШМСуммаВспомогательнойКассы.Получить()-ВспомКассаДолг;
	ОбластьПодвал.Параметры.ВспомКолБирок=СписокКоличестваБирок.Количество();
	
	
	
	ТабДок.Вывести(ОбластьПодвал);
	ТабДок.ТолькоПросмотр = Истина;
	Возврат ТабДок;
	
КонецФункции

Функция ПолучитьТабДокЧерновика()
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Черновик";
	Макет = ПолучитьМакетЧерновика();
	
	НачалоСмены=НачалоСмены();
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Шапка");
	//ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьСтрокаИтог = Макет.ПолучитьОбласть("СтрокаИтог");
	
	ОбластьЗаголовок.Параметры.ДатаОтчета=Формат(НачалоСмены,"ДЛФ=Д");
	ОбластьЗаголовок.Параметры.Шиномонтажник="";
	ОбластьЗаголовок.Параметры.Съемщик="";
	ОбластьЗаголовок.Параметры.Дископравщик="";
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Период КАК Период,
		|	ШМ_БригадыСрезПоследних.Должность КАК Должность,
		|	ШМ_БригадыСрезПоследних.Помощник КАК Помощник,
		|	ШМ_БригадыСрезПоследних.ИмяКомпьютера КАК ИмяКомпьютера,
		|	ШМ_БригадыСрезПоследних.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ШМ_Бригады.СрезПоследних КАК ШМ_БригадыСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МАКСИМУМ(ШМ_БригадыСрезПоследних.Период) КАК Период
		|		ИЗ
		|			РегистрСведений.ШМ_Бригады.СрезПоследних(, ) КАК ШМ_БригадыСрезПоследних) КАК ВложенныйЗапрос
		|		ПО ШМ_БригадыСрезПоследних.Период = ВложенныйЗапрос.Период
		|ГДЕ
		|	ШМ_БригадыСрезПоследних.ИмяКомпьютера = &ИмяКомпьютера";
	
	Запрос.УстановитьПараметр("ИмяКомпьютера", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование);
	Выборка = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаВыборка из Выборка Цикл
		Если (СтрокаВыборка.Должность.Наименование="Шиномонтажник") И (СтрокаВыборка.Помощник=Ложь) Тогда
			ОбластьЗаголовок.Параметры.Шиномонтажник=СтрокаВыборка.Сотрудник;
			ШиномонтажникСегодня=СтрокаВыборка.Сотрудник;
		ИначеЕсли (СтрокаВыборка.Должность.Наименование="Съемщик") И (СтрокаВыборка.Помощник=Ложь) Тогда
			ОбластьЗаголовок.Параметры.Съемщик=СтрокаВыборка.Сотрудник;
			СъемщикСегодня=СтрокаВыборка.Сотрудник;
		ИначеЕсли (СтрокаВыборка.Должность.Наименование="Правщик дисков") И (СтрокаВыборка.Помощник=Ложь) Тогда
			ОбластьЗаголовок.Параметры.Дископравщик=СтрокаВыборка.Сотрудник;
		КонецЕсли;
	КонецЦикла;
	
	ТабДок.Вывести(ОбластьЗаголовок);
	ИтогСумма=0;
	ИтогШиномонт=0;
	ИтогСъем=0;
	ИтогКолБал=0;
	ИтогСумБал=0;
	ИтогМат=0;
	//ВыбРеалЧерновик=Документы.РеализацияТоваровУслуг.Выбрать(НачалоСмены,ТекущаяДата());  
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровУслуг.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |ГДЕ
	               |	РеализацияТоваровУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	               |	И РеализацияТоваровУслуг.Проведен = &Проведен
	               |	И РеализацияТоваровУслуг.Комментарий ПОДОБНО &Комментарий
	               |	И РеализацияТоваровУслуг.ИмяКомпьютера = &ИмяКомпьютера";     
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоСмены);
	Запрос.УстановитьПараметр("КонецПериода", ТекущаяДата());
	Запрос.УстановитьПараметр("Проведен", Истина);
	Запрос.УстановитьПараметр("Комментарий", "Материалы");
	Запрос.УстановитьПараметр("ИмяКомпьютера", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование);  
	
	ВыбРеалЧерновикРез = Запрос.Выполнить().Выбрать();
	
	Пока ВыбРеалЧерновикРез.Следующий() Цикл  
		ВыбРеалЧерновик = ВыбРеалЧерновикРез.Ссылка;
		ОбластьСтрока.Параметры.НомерБирки=ВыбРеалЧерновик.Бирка;
		ОбластьСтрока.Параметры.Время=Формат(ВыбРеалЧерновик.Дата,"ДЛФ=В");;
		ОбластьСтрока.Параметры.ПроцентСкидкиЧерновик=ВыбРеалЧерновик.ПроцентСкидкиЧерновик;
		ОбластьСтрока.Параметры.ГосНомер=ВыбРеалЧерновик.Комментарий;
		СуммаДок=0;
		Для Каждого СтрокаТоварн Из ВыбРеалЧерновик.Товары Цикл
			СуммаДок=СуммаДок+СтрокаТоварн.Сумма;
		КонецЦикла;
		ИтогСумма=ИтогСумма+СуммаДок;
		ОбластьСтрока.Параметры.Сумма=СуммаДок;
		ОбластьСтрока.Параметры.Шиномонт=ВыбРеалЧерновик.СуммаШиномонтажЧерновик;
		ИтогШиномонт=ИтогШиномонт+ВыбРеалЧерновик.СуммаШиномонтажЧерновик;
		ОбластьСтрока.Параметры.Съем=ВыбРеалЧерновик.СуммаСъемЧерновик;
		ИтогСъем=ИтогСъем+ВыбРеалЧерновик.СуммаСъемЧерновик;
		ОбластьСтрока.Параметры.НаимМат="";
		ОбластьСтрока.Параметры.КолБал=ВыбРеалЧерновик.КолГрузБезСкидок+ВыбРеалЧерновик.КолГрузСкидка20+ВыбРеалЧерновик.КолГрузСкидка50;
		ИтогКолБал=ИтогКолБал+ВыбРеалЧерновик.КолГрузБезСкидок+ВыбРеалЧерновик.КолГрузСкидка20+ВыбРеалЧерновик.КолГрузСкидка50;
		ОбластьСтрока.Параметры.СумБал=ВыбРеалЧерновик.СуммаБалЧерновик;
		ИтогСумБал=ИтогСумБал+ВыбРеалЧерновик.СуммаБалЧерновик;
		ОбластьСтрока.Параметры.СумМат=ВыбРеалЧерновик.СуммаМатВычет;
		ИтогМат=ИтогМат+ВыбРеалЧерновик.СуммаМатВычет;
		ТабДок.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	ОбластьСтрокаИтог.Параметры.ИтогСумма = ИтогСумма;
	ОбластьСтрокаИтог.Параметры.ИтогШиномонт = ИтогШиномонт;
	ОбластьСтрокаИтог.Параметры.ИтогСъем = ИтогСъем;
	ОбластьСтрокаИтог.Параметры.ИтогКолБал = ИтогКолБал;
	ОбластьСтрокаИтог.Параметры.ИтогСумБал = ИтогСумБал;
	ОбластьСтрокаИтог.Параметры.ИтогМат = ИтогМат;
	ТабДок.Вывести(ОбластьСтрокаИтог);
	
	ТабДок.ТолькоПросмотр = Истина;
	Возврат ТабДок;
	
КонецФункции

Функция ПолучитьТабДокЧерновика2020()
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Черновик";
	Макет = ПолучитьМакетЧерновика2020();
	
	НачалоСмены=НачалоСмены(); 
	
	Если ТипЗнч(НачалоСмены) = Тип("Булево") Тогда
		Сообщить(СтрШаблон("Не найдена текущая смена, обратитесь в IT",));   
		Возврат Ложь;
	КонецЕсли;
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Шапка");
	//ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьСтрокаЖирн = Макет.ПолучитьОбласть("СтрокаЖирн");
	ОбластьСтрокаИтог = Макет.ПолучитьОбласть("СтрокаИтог");
	
	ОбластьЗаголовок.Параметры.ДатаОтчета=Формат(НачалоСмены,"ДЛФ=Д");
	ОбластьЗаголовок.Параметры.Шиномонтажник="";
	ОбластьЗаголовок.Параметры.Съемщик="";
	ОбластьЗаголовок.Параметры.Дископравщик="";
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Период КАК Период,
		|	ШМ_БригадыСрезПоследних.Должность КАК Должность,
		|	ШМ_БригадыСрезПоследних.Помощник КАК Помощник,
		|	ШМ_БригадыСрезПоследних.ИмяКомпьютера КАК ИмяКомпьютера,
		|	ШМ_БригадыСрезПоследних.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ШМ_Бригады.СрезПоследних КАК ШМ_БригадыСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МАКСИМУМ(ШМ_БригадыСрезПоследних.Период) КАК Период
		|		ИЗ
		|			РегистрСведений.ШМ_Бригады.СрезПоследних(, ) КАК ШМ_БригадыСрезПоследних
		|		ГДЕ
		|			ШМ_БригадыСрезПоследних.ИмяКомпьютера = &ИмяКомпьютера) КАК ВложенныйЗапрос
		|		ПО ШМ_БригадыСрезПоследних.Период = ВложенныйЗапрос.Период
		|ГДЕ
		|	ШМ_БригадыСрезПоследних.ИмяКомпьютера = &ИмяКомпьютера";
	ТекущееРабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	Запрос.УстановитьПараметр("ИмяКомпьютера", ТекущееРабочееМесто.Наименование); 
	Выборка = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаВыборка из Выборка Цикл
		Если (СтрокаВыборка.Должность.Наименование="Шиномонтажник") И (СтрокаВыборка.Помощник=Ложь) Тогда
			ОбластьЗаголовок.Параметры.Шиномонтажник=СтрокаВыборка.Сотрудник;
			ШиномонтажникСегодня=СтрокаВыборка.Сотрудник;
		ИначеЕсли (СтрокаВыборка.Должность.Наименование="Съемщик") И (СтрокаВыборка.Помощник=Ложь) Тогда
			ОбластьЗаголовок.Параметры.Съемщик=СтрокаВыборка.Сотрудник;
			СъемщикСегодня=СтрокаВыборка.Сотрудник;
		ИначеЕсли (СтрокаВыборка.Должность.Наименование="Правщик дисков") И (СтрокаВыборка.Помощник=Ложь) Тогда
			ОбластьЗаголовок.Параметры.Дископравщик=СтрокаВыборка.Сотрудник;
		ИначеЕсли (СтрокаВыборка.Должность.Наименование="Проточник") И (СтрокаВыборка.Помощник=Ложь) Тогда
			ОбластьЗаголовок.Параметры.Проточник=СтрокаВыборка.Сотрудник;
		КонецЕсли;
	КонецЦикла;
	
	ТабДок.Вывести(ОбластьЗаголовок);
	ИтогСумма=0;
	ИтогШиномонт=0;
	ИтогСъем=0;
	ИтогКолБал=0;
	ИтогСумЗаГруза=0;
	ИтогМат=0;
	ИтогПравка=0;
	ИтогПрот=0;
	//
	ИтогМатДиск=0;
	ИтогСПЦ = 0 ;
	//
	
	лТекст = "ВЫБРАТЬ
	         |	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	         |	РеализацияТоваровУслуг.ВерсияДанных КАК ВерсияДанных,
	         |	РеализацияТоваровУслуг.ПометкаУдаления КАК ПометкаУдаления,
	         |	РеализацияТоваровУслуг.Номер КАК Номер,
	         |	РеализацияТоваровУслуг.Дата КАК Дата,
	         |	РеализацияТоваровУслуг.Проведен КАК Проведен,
	         |	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
	         |	РеализацияТоваровУслуг.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
	         |	РеализацияТоваровУслуг.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	         |	РеализацияТоваровУслуг.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
	         |	РеализацияТоваровУслуг.БанковскийСчетГрузополучателя КАК БанковскийСчетГрузополучателя,
	         |	РеализацияТоваровУслуг.Валюта КАК Валюта,
	         |	РеализацияТоваровУслуг.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	         |	РеализацияТоваровУслуг.Грузоотправитель КАК Грузоотправитель,
	         |	РеализацияТоваровУслуг.Грузополучатель КАК Грузополучатель,
	         |	РеализацияТоваровУслуг.УдалитьДатаПлатежа КАК УдалитьДатаПлатежа,
	         |	РеализацияТоваровУслуг.ДатаРаспоряжения КАК ДатаРаспоряжения,
	         |	РеализацияТоваровУслуг.ДоверенностьВыдана КАК ДоверенностьВыдана,
	         |	РеализацияТоваровУслуг.ДоверенностьДата КАК ДоверенностьДата,
	         |	РеализацияТоваровУслуг.ДоверенностьЛицо КАК ДоверенностьЛицо,
	         |	РеализацияТоваровУслуг.ДоверенностьНомер КАК ДоверенностьНомер,
	         |	РеализацияТоваровУслуг.ЗаказКлиента КАК ЗаказКлиента,
	         |	РеализацияТоваровУслуг.Организация КАК Организация,
	         |	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
	         |	РеализацияТоваровУслуг.Менеджер КАК Менеджер,
	         |	РеализацияТоваровУслуг.НалогообложениеНДС КАК НалогообложениеНДС,
	         |	РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
	         |	РеализацияТоваровУслуг.Партнер КАК Партнер,
	         |	РеализацияТоваровУслуг.Подразделение КАК Подразделение,
	         |	РеализацияТоваровУслуг.Сделка КАК Сделка,
	         |	РеализацияТоваровУслуг.СкидкиРассчитаны КАК СкидкиРассчитаны,
	         |	РеализацияТоваровУслуг.Склад КАК Склад,
	         |	РеализацияТоваровУслуг.Согласован КАК Согласован,
	         |	РеализацияТоваровУслуг.Соглашение КАК Соглашение,
	         |	РеализацияТоваровУслуг.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	         |	РеализацияТоваровУслуг.Комментарий КАК Комментарий,
	         |	РеализацияТоваровУслуг.ФормаОплаты КАК ФормаОплаты,
	         |	РеализацияТоваровУслуг.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	         |	РеализацияТоваровУслуг.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	         |	РеализацияТоваровУслуг.Касса КАК Касса,
	         |	РеализацияТоваровУслуг.Отпустил КАК Отпустил,
	         |	РеализацияТоваровУслуг.ОтпустилДолжность КАК ОтпустилДолжность,
	         |	РеализацияТоваровУслуг.РеализацияПоЗаказам КАК РеализацияПоЗаказам,
	         |	РеализацияТоваровУслуг.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	         |	РеализацияТоваровУслуг.КартаЛояльности КАК КартаЛояльности,
	         |	РеализацияТоваровУслуг.Договор КАК Договор,
	         |	РеализацияТоваровУслуг.Основание КАК Основание,
	         |	РеализацияТоваровУслуг.Статус КАК Статус,
	         |	РеализацияТоваровУслуг.Автор КАК Автор,
	         |	РеализацияТоваровУслуг.УдалитьСуммаПредоплаты КАК УдалитьСуммаПредоплаты,
	         |	РеализацияТоваровУслуг.УдалитьСуммаПредоплатыЗаТару КАК УдалитьСуммаПредоплатыЗаТару,
	         |	РеализацияТоваровУслуг.СпособДоставки КАК СпособДоставки,
	         |	РеализацияТоваровУслуг.ЗонаДоставки КАК ЗонаДоставки,
	         |	РеализацияТоваровУслуг.АдресДоставкиЗначенияПолей КАК АдресДоставкиЗначенияПолей,
	         |	РеализацияТоваровУслуг.ПеревозчикПартнер КАК ПеревозчикПартнер,
	         |	РеализацияТоваровУслуг.ВремяДоставкиС КАК ВремяДоставкиС,
	         |	РеализацияТоваровУслуг.ВремяДоставкиПо КАК ВремяДоставкиПо,
	         |	РеализацияТоваровУслуг.АдресДоставкиПеревозчика КАК АдресДоставкиПеревозчика,
	         |	РеализацияТоваровУслуг.АдресДоставкиПеревозчикаЗначенияПолей КАК АдресДоставкиПеревозчикаЗначенияПолей,
	         |	РеализацияТоваровУслуг.ДополнительнаяИнформацияПоДоставке КАК ДополнительнаяИнформацияПоДоставке,
	         |	РеализацияТоваровУслуг.КонтактноеЛицо КАК КонтактноеЛицо,
	         |	РеализацияТоваровУслуг.Руководитель КАК Руководитель,
	         |	РеализацияТоваровУслуг.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	         |	РеализацияТоваровУслуг.ПорядокРасчетов КАК ПорядокРасчетов,
	         |	РеализацияТоваровУслуг.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
	         |	РеализацияТоваровУслуг.ДатаВозвратаМногооборотнойТары КАК ДатаВозвратаМногооборотнойТары,
	         |	РеализацияТоваровУслуг.СостояниеЗаполненияМногооборотнойТары КАК СостояниеЗаполненияМногооборотнойТары,
	         |	РеализацияТоваровУслуг.ВидыЗапасовУказаныВручную КАК ВидыЗапасовУказаныВручную,
	         |	РеализацияТоваровУслуг.ТребуетсяЗалогЗаТару КАК ТребуетсяЗалогЗаТару,
	         |	РеализацияТоваровУслуг.ОснованиеДата КАК ОснованиеДата,
	         |	РеализацияТоваровУслуг.ОснованиеНомер КАК ОснованиеНомер,
	         |	РеализацияТоваровУслуг.ДопоставкаПоРеализации КАК ДопоставкаПоРеализации,
	         |	РеализацияТоваровУслуг.ДатаПереходаПраваСобственности КАК ДатаПереходаПраваСобственности,
	         |	РеализацияТоваровУслуг.ВариантОформленияПродажи КАК ВариантОформленияПродажи,
	         |	РеализацияТоваровУслуг.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
	         |	РеализацияТоваровУслуг.ОсобыеУсловияПеревозки КАК ОсобыеУсловияПеревозки,
	         |	РеализацияТоваровУслуг.ОсобыеУсловияПеревозкиОписание КАК ОсобыеУсловияПеревозкиОписание,
	         |	РеализацияТоваровУслуг.НаправлениеДеятельности КАК НаправлениеДеятельности,
	         |	РеализацияТоваровУслуг.Курс КАК Курс,
	         |	РеализацияТоваровУслуг.Кратность КАК Кратность,
	         |	РеализацияТоваровУслуг.ПорядокОплаты КАК ПорядокОплаты,
	         |	РеализацияТоваровУслуг.ЕстьМаркируемаяПродукцияГИСМ КАК ЕстьМаркируемаяПродукцияГИСМ,
	         |	РеализацияТоваровУслуг.УдалитьЕстьАлкогольнаяПродукцияДляРеализацииРозницаЕГАИС КАК УдалитьЕстьАлкогольнаяПродукцияДляРеализацииРозницаЕГАИС,
	         |	РеализацияТоваровУслуг.СуммаВзаиморасчетовПоТаре КАК СуммаВзаиморасчетовПоТаре,
	         |	РеализацияТоваровУслуг.СуммаМатВычет КАК СуммаМатВычет,
	         |	РеализацияТоваровУслуг.КолГрузБезСкидок КАК КолГрузБезСкидок,
	         |	РеализацияТоваровУслуг.КолГрузСкидка20 КАК КолГрузСкидка20,
	         |	РеализацияТоваровУслуг.КолГрузСкидка50 КАК КолГрузСкидка50,
	         |	РеализацияТоваровУслуг.СуммаГрузБезСкидок КАК СуммаГрузБезСкидок,
	         |	РеализацияТоваровУслуг.СуммаГрузСкидка20 КАК СуммаГрузСкидка20,
	         |	РеализацияТоваровУслуг.СуммаГрузСкидка50 КАК СуммаГрузСкидка50,
	         |	РеализацияТоваровУслуг.ПроцентСкидкиЧерновик КАК ПроцентСкидкиЧерновик,
	         |	РеализацияТоваровУслуг.СуммаШиномонтажЧерновик КАК СуммаШиномонтажЧерновик,
	         |	РеализацияТоваровУслуг.СуммаСъемЧерновик КАК СуммаСъемЧерновик,
	         |	РеализацияТоваровУслуг.СуммаБалЧерновик КАК СуммаБалЧерновик,
	         |	РеализацияТоваровУслуг.Бирка КАК Бирка,
	         |	РеализацияТоваровУслуг.СуммаДископравкаЧерновик КАК СуммаДископравкаЧерновик,
	         |	РеализацияТоваровУслуг.СуммаПроточкаЧерновик КАК СуммаПроточкаЧерновик,
	         |	РеализацияТоваровУслуг.АдресДоставкиЗначение КАК АдресДоставкиЗначение,
	         |	РеализацияТоваровУслуг.АдресДоставкиПеревозчикаЗначение КАК АдресДоставкиПеревозчикаЗначение,
	         |	РеализацияТоваровУслуг.ЮЛ КАК ЮЛ,
	         |	РеализацияТоваровУслуг.СуммаМатВычетПроточка КАК СуммаМатВычетПроточка,
	         |	РеализацияТоваровУслуг.ТипДиска КАК ТипДиска,
	         |	РеализацияТоваровУслуг.ВыбраноАвтоЮЛ КАК ВыбраноАвтоЮЛ,
	         |	РеализацияТоваровУслуг.VISA КАК VISA,
	         |	РеализацияТоваровУслуг.ИмяКомпьютера КАК ИмяКомпьютера,
	         |	РеализацияТоваровУслуг.Товары.(
	         |		Ссылка КАК Ссылка,
	         |		НомерСтроки КАК НомерСтроки,
	         |		Номенклатура КАК Номенклатура,
	         |		Характеристика КАК Характеристика,
	         |		Назначение КАК Назначение,
	         |		Упаковка КАК Упаковка,
	         |		КоличествоУпаковок КАК КоличествоУпаковок,
	         |		Количество КАК Количество,
	         |		ВидЦены КАК ВидЦены,
	         |		Цена КАК Цена,
	         |		Сумма КАК Сумма,
	         |		СтавкаНДС КАК СтавкаНДС,
	         |		СуммаНДС КАК СуммаНДС,
	         |		СуммаСНДС КАК СуммаСНДС,
	         |		КодСтроки КАК КодСтроки,
	         |		СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	         |		СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	         |		ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	         |		ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	         |		КлючСвязи КАК КлючСвязи,
	         |		Склад КАК Склад,
	         |		СтатусУказанияСерий КАК СтатусУказанияСерий,
	         |		СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	         |		ЗаказКлиента КАК ЗаказКлиента,
	         |		СрокПоставки КАК СрокПоставки,
	         |		ИдентификаторСтроки КАК ИдентификаторСтроки,
	         |		Серия КАК Серия,
	         |		АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	         |		НоменклатураНабора КАК НоменклатураНабора,
	         |		ХарактеристикаНабора КАК ХарактеристикаНабора,
	         |		АналитикаУчетаНаборов КАК АналитикаУчетаНаборов,
	         |		КодТНВЭД КАК КодТНВЭД,
	         |		Исполнитель КАК Исполнитель,
	         |		ЗарплатаРаботника КАК ЗарплатаРаботника,
	         |		РаботаВыполнена КАК РаботаВыполнена
	         |	) КАК Товары,
	         |	РеализацияТоваровУслуг.СкидкиНаценки.(
	         |		Ссылка КАК Ссылка,
	         |		НомерСтроки КАК НомерСтроки,
	         |		КлючСвязи КАК КлючСвязи,
	         |		СкидкаНаценка КАК СкидкаНаценка,
	         |		Сумма КАК Сумма,
	         |		НапомнитьПозже КАК НапомнитьПозже
	         |	) КАК СкидкиНаценки,
	         |	РеализацияТоваровУслуг.ВидыЗапасов.(
	         |		Ссылка КАК Ссылка,
	         |		НомерСтроки КАК НомерСтроки,
	         |		АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	         |		ВидЗапасов КАК ВидЗапасов,
	         |		НомерГТД КАК НомерГТД,
	         |		Упаковка КАК Упаковка,
	         |		КоличествоУпаковок КАК КоличествоУпаковок,
	         |		Количество КАК Количество,
	         |		КоличествоПоРНПТ КАК КоличествоПоРНПТ,
	         |		СуммаСНДС КАК СуммаСНДС,
	         |		СтавкаНДС КАК СтавкаНДС,
	         |		СуммаНДС КАК СуммаНДС,
	         |		ИдентификаторСтроки КАК ИдентификаторСтроки,
	         |		СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	         |		ЗаказКлиента КАК ЗаказКлиента,
	         |		СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	         |		СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	         |		АналитикаУчетаНаборов КАК АналитикаУчетаНаборов,
	         |		Цена КАК Цена,
	         |		ВидЗапасовПолучателя КАК ВидЗапасовПолучателя,
	         |		КодТНВЭД КАК КодТНВЭД
	         |	) КАК ВидыЗапасов,
	         |	РеализацияТоваровУслуг.ДополнительныеРеквизиты.(
	         |		Ссылка КАК Ссылка,
	         |		НомерСтроки КАК НомерСтроки,
	         |		Свойство КАК Свойство,
	         |		Значение КАК Значение,
	         |		ТекстоваяСтрока КАК ТекстоваяСтрока
	         |	) КАК ДополнительныеРеквизиты,
	         |	РеализацияТоваровУслуг.РасшифровкаПлатежа.(
	         |		Ссылка КАК Ссылка,
	         |		НомерСтроки КАК НомерСтроки,
	         |		Заказ КАК Заказ,
	         |		Сумма КАК Сумма,
	         |		ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	         |		СуммаВзаиморасчетов КАК СуммаВзаиморасчетов
	         |	) КАК РасшифровкаПлатежа,
	         |	РеализацияТоваровУслуг.Серии.(
	         |		Ссылка КАК Ссылка,
	         |		НомерСтроки КАК НомерСтроки,
	         |		Серия КАК Серия,
	         |		Количество КАК Количество,
	         |		Номенклатура КАК Номенклатура,
	         |		Характеристика КАК Характеристика,
	         |		Назначение КАК Назначение,
	         |		Склад КАК Склад
	         |	) КАК Серии,
	         |	РеализацияТоваровУслуг.ЭтапыГрафикаОплаты.(
	         |		Ссылка КАК Ссылка,
	         |		НомерСтроки КАК НомерСтроки,
	         |		Заказ КАК Заказ,
	         |		СверхЗаказа КАК СверхЗаказа,
	         |		ВариантОплаты КАК ВариантОплаты,
	         |		ДатаПлатежа КАК ДатаПлатежа,
	         |		Сдвиг КАК Сдвиг,
	         |		СуммаПлатежа КАК СуммаПлатежа,
	         |		ПроцентПлатежа КАК ПроцентПлатежа,
	         |		СуммаЗалогаЗаТару КАК СуммаЗалогаЗаТару,
	         |		ПроцентЗалогаЗаТару КАК ПроцентЗалогаЗаТару,
	         |		СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	         |		СуммаВзаиморасчетовПоТаре КАК СуммаВзаиморасчетовПоТаре
	         |	) КАК ЭтапыГрафикаОплаты,
	         |	РеализацияТоваровУслуг.ШтрихкодыУпаковок.(
	         |		Ссылка КАК Ссылка,
	         |		НомерСтроки КАК НомерСтроки,
	         |		ШтрихкодУпаковки КАК ШтрихкодУпаковки
	         |	) КАК ШтрихкодыУпаковок,
	         |	РеализацияТоваровУслуг.Представление КАК Представление,
	         |	РеализацияТоваровУслуг.МоментВремени КАК МоментВремени,
	         |	РеализацияТоваровУслуг.СуммаСПЦЧерновик КАК СуммаСПЦЧерновик
	         |ИЗ
	         |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	         |ГДЕ
	         |	РеализацияТоваровУслуг.ИмяКомпьютера = &ИмяКомпьютера
	         |	И РеализацияТоваровУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	         |	И РеализацияТоваровУслуг.Проведен = ИСТИНА
	         |	И НЕ РеализацияТоваровУслуг.Комментарий ПОДОБНО ""Материалы""";
	                                                                        //31.01  11,00,00
	
	Если ТекущаяДата() - 60*60*9 < НачалоДня(ТекущаяДата()) Тогда         
		НачалоСмены = НачалоДня(ТекущаяДата() - 60*60*24) + 60*60*9;
	Иначе
		НачалоСмены = НачалоДня(ТекущаяДата()) + 60*60*9;
	КонецЕсли;
	
	КонецСмены = НачалоСмены + 60*60*24;
	
	лЗапрос = Новый Запрос(лТекст);
	лЗапрос.УстановитьПараметр("ИмяКомпьютера", ТекущееРабочееМесто.Наименование); 
	лЗапрос.УстановитьПараметр("НачалоПериода", НачалоСмены);
	лЗапрос.УстановитьПараметр("КонецПериода", КонецСмены);
	
   	Реализации = лЗапрос.Выполнить().Выгрузить(); 
	
	//+++Безроднов 29.01.2025  выборка на профессию дископравщик 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ШМ_НоменклатураПрофессии.Номенклатура КАК Номенклатура,
		               |	ШМ_НоменклатураПрофессии.Профессия КАК Профессия,
		               |	ШМ_НоменклатураПрофессии.ВидОплаты КАК ВидОплаты,
		               |	ШМ_НоменклатураПрофессии.РазмерОплаты КАК РазмерОплаты,
		               |	ШМ_НоменклатураПрофессии.МатериальныйВычет КАК МатериальныйВычет,
		               |	ШМ_НоменклатураПрофессии.Материал КАК Материал,
		               |	ШМ_НоменклатураПрофессии.ИспГрузики КАК ИспГрузики,
		               |	ШМ_НоменклатураПрофессии.Дископравка КАК Дископравка
		               |ИЗ
		               |	РегистрСведений.ШМ_НоменклатураПрофессии КАК ШМ_НоменклатураПрофессии
		               |ГДЕ
		               |	ШМ_НоменклатураПрофессии.Профессия = &Профессия"; 
		
		Профессия = Справочники.ШМ_Должности.НайтиПоНаименованию("Правщик дисков");
		Запрос.УстановитьПараметр("Профессия", Профессия);
		НоменклатураПрофессии = Запрос.Выполнить().Выгрузить();
	//--Безроднов 
	

	
	Для Каждого ВыбРеалЧерновик ИЗ Реализации Цикл
		ОбластьСтрока.Параметры.НомерБирки=ВыбРеалЧерновик.Бирка;
		ОбластьСтрока.Параметры.Время=Формат(ВыбРеалЧерновик.Дата,"ДЛФ=В");;
		ОбластьСтрока.Параметры.ПроцентСкидкиЧерновик=ВыбРеалЧерновик.ПроцентСкидкиЧерновик;
		ОбластьСтрока.Параметры.ГосНомер=ВыбРеалЧерновик.Комментарий;
		ОбластьСтрокаЖирн.Параметры.НомерБирки=ВыбРеалЧерновик.Бирка;
		ОбластьСтрокаЖирн.Параметры.Время=Формат(ВыбРеалЧерновик.Дата,"ДЛФ=В");;
		ОбластьСтрокаЖирн.Параметры.ПроцентСкидкиЧерновик=ВыбРеалЧерновик.ПроцентСкидкиЧерновик;
		ОбластьСтрокаЖирн.Параметры.ГосНомер=ВыбРеалЧерновик.Комментарий;
		СуммаДок=0; 
		
	//+++Безроднов 29.01.2025 
		ТЗНоменклатуры = Новый ТаблицаЗначений;
		ТЗНоменклатуры.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));  
		ТЗНоменклатуры.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	//--Безроднов   
		
		Для Каждого СтрокаТоварн Из ВыбРеалЧерновик.Товары Цикл
			СуммаДок=СуммаДок+СтрокаТоварн.Сумма;
			
		//+++Безроднов 29.01.2025 
            НовыйСтр = ТЗНоменклатуры.Добавить();
			НовыйСтр.Номенклатура = СтрокаТоварн.Номенклатура;
			НовыйСтр.Количество = СтрокаТоварн.Количество;
		//--Безроднов 29.01.2025 

		КонецЦикла;
		ИтогСумма=ИтогСумма+СуммаДок; 
		
	//+++Безроднов 29.01.2025   добавление нового столбца Материалы дископрав, заполненяется материалом дископравка если профессия дископравщик 
	    МатериалыДископравка = 0;
		Для каждого стр из ТЗНоменклатуры Цикл 
			СтруктураПоиска = Новый Структура("Номенклатура", стр.Номенклатура);
			НайденныеСтроки = НоменклатураПрофессии.НайтиСтроки(СтруктураПоиска);  
			Если НайденныеСтроки.Количество() > 0 Тогда
				МатериалыДископравка = МатериалыДископравка + (НайденныеСтроки[0].МатериальныйВычет * стр.Количество);
			КонецЕсли;
		КонецЦикла;   
		 
		ОбластьСтрока.Параметры.МатДиск = МатериалыДископравка;
		ОбластьСтрокаЖирн.Параметры.МатДиск = МатериалыДископравка;
		ИтогМатДиск = ИтогМатДиск + МатериалыДископравка; 	
	//--Безроднов 29.01.2025   СуммаДископравкаЧерновик 
	
	//+++dev1 заполнение новой профессии
		ОбластьСтрока.Параметры.СПЦ = ВыбРеалЧерновик.СуммаСПЦЧерновик;
		ОбластьСтрокаЖирн.Параметры.СПЦ = ВыбРеалЧерновик.СуммаСПЦЧерновик;	
		ИтогСПЦ = ИтогСПЦ + ВыбРеалЧерновик.СуммаСПЦЧерновик;
	//--dev1
		ОбластьСтрока.Параметры.Сумма=СуммаДок;
		ОбластьСтрокаЖирн.Параметры.Сумма=СуммаДок;
		
		ОбластьСтрока.Параметры.Шиномонт=ВыбРеалЧерновик.СуммаШиномонтажЧерновик; 
		ОбластьСтрокаЖирн.Параметры.Шиномонт=ВыбРеалЧерновик.СуммаШиномонтажЧерновик;
		ИтогШиномонт=ИтогШиномонт+ВыбРеалЧерновик.СуммаШиномонтажЧерновик; 
		
		ОбластьСтрока.Параметры.Съем=ВыбРеалЧерновик.СуммаСъемЧерновик;
		ОбластьСтрокаЖирн.Параметры.Съем=ВыбРеалЧерновик.СуммаСъемЧерновик;	
		ИтогСъем=ИтогСъем+ВыбРеалЧерновик.СуммаСъемЧерновик;  
		
		ОбластьСтрока.Параметры.Правка=ВыбРеалЧерновик.СуммаДископравкаЧерновик;
		ОбластьСтрокаЖирн.Параметры.Правка=ВыбРеалЧерновик.СуммаДископравкаЧерновик; 	
		ИтогПравка=ИтогПравка+ВыбРеалЧерновик.СуммаДископравкаЧерновик; 
		
		ОбластьСтрока.Параметры.Прот=ВыбРеалЧерновик.СуммаПроточкаЧерновик;
	    ОбластьСтрокаЖирн.Параметры.Прот=ВыбРеалЧерновик.СуммаПроточкаЧерновик;		
		ИтогПрот=ИтогПрот+ВыбРеалЧерновик.СуммаПроточкаЧерновик;
		
		ОбластьСтрока.Параметры.НаимМат="";      
		ОбластьСтрока.Параметры.КолБал=ВыбРеалЧерновик.КолГрузБезСкидок+ВыбРеалЧерновик.КолГрузСкидка20+ВыбРеалЧерновик.КолГрузСкидка50;
		ОбластьСтрокаЖирн.Параметры.НаимМат="";
		ОбластьСтрокаЖирн.Параметры.КолБал=ВыбРеалЧерновик.КолГрузБезСкидок+ВыбРеалЧерновик.КолГрузСкидка20+ВыбРеалЧерновик.КолГрузСкидка50;
		ИтогКолБал=ИтогКолБал+ВыбРеалЧерновик.КолГрузБезСкидок+ВыбРеалЧерновик.КолГрузСкидка20+ВыбРеалЧерновик.КолГрузСкидка50;
		
		
		ОбластьСтрока.Параметры.СумЗаГруза = ВыбРеалЧерновик.СуммаГрузБезСкидок+ВыбРеалЧерновик.СуммаГрузСкидка20+ВыбРеалЧерновик.СуммаГрузСкидка50;
		ОбластьСтрокаЖирн.Параметры.СумЗаГруза = ВыбРеалЧерновик.СуммаГрузБезСкидок+ВыбРеалЧерновик.СуммаГрузСкидка20+ВыбРеалЧерновик.СуммаГрузСкидка50; 
		ИтогСумЗаГруза = ИтогСумЗаГруза+ВыбРеалЧерновик.СуммаГрузБезСкидок+ВыбРеалЧерновик.СуммаГрузСкидка20+ВыбРеалЧерновик.СуммаГрузСкидка50;  
				
		
		ОбластьСтрока.Параметры.ТипДиска=ВыбРеалЧерновик.ТипДиска;
		ОбластьСтрокаЖирн.Параметры.ТипДиска=ВыбРеалЧерновик.ТипДиска;
		Если ВыбРеалЧерновик.VISA=Истина Тогда
			ОбластьСтрока.Параметры.VISA="V";
			ОбластьСтрокаЖирн.Параметры.VISA="V";
		Иначе
			ОбластьСтрока.Параметры.VISA="";
			ОбластьСтрокаЖирн.Параметры.VISA="";
		КонецЕсли;
		
		//+++Безроднов 27.02 сумма материалов за шинку и съем минус дископравка и проточка в последнюю колонку  
		СумМат            				   = ВыбРеалЧерновик.СуммаМатВычет - ВыбРеалЧерновик.СуммаМатВычетПроточка - МатериалыДископравка; 
		ОбластьСтрока.Параметры.СумМат	   = СумМат;  //1softpro pok 25.02.2025 +++ коммент вычета материалов проточки из общей суммы материалов, тк в таком случае некорректные данные черновика
		ОбластьСтрокаЖирн.Параметры.СумМат = СумМат;
		ИтогМат							   = ИтогМат + СумМат;// ВыбРеалЧерновик.СуммаМатВычет;
		//--Безроднов
		
		ЕстьСторудникНеНаСмене=Ложь;
		Запрос = Новый Запрос;
    	Запрос.Текст = 
        "ВЫБРАТЬ
        |   ШМ_ИсполнителиРабот.Реализация,
        |   ШМ_ИсполнителиРабот.Номенклатура,
        |   ШМ_ИсполнителиРабот.Исполнитель
        |ИЗ
        |   РегистрСведений.ШМ_ИсполнителиРабот КАК ШМ_ИсполнителиРабот
        |ГДЕ
        |   ШМ_ИсполнителиРабот.Реализация = &ВыбРеализация";
        Запрос.УстановитьПараметр("ВыбРеализация",ВыбРеалЧерновик.Ссылка);
        РезультатЗапроса = Запрос.Выполнить();
        Записи = РезультатЗапроса.Выбрать(); 
    	Пока Записи.Следующий() Цикл
			Если СотрудникНаСмене(Записи.Исполнитель,ТекущаяДата())=Ложь Тогда
				ЕстьСторудникНеНаСмене=Истина;
			КонецЕсли; 
		КонецЦикла;
		Если (ВыбРеалЧерновик.СуммаДископравкаЧерновик+ВыбРеалЧерновик.СуммаПроточкаЧерновик)>0 Тогда
			ЕстьСторудникНеНаСмене=Ложь;
		КонецЕсли;
		Если ЕстьСторудникНеНаСмене=Истина Тогда
			ТабДок.Вывести(ОбластьСтрокаЖирн);
		Иначе
			ТабДок.Вывести(ОбластьСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ОбластьСтрокаИтог.Параметры.ИтогСумма = ИтогСумма;
	ОбластьСтрокаИтог.Параметры.ИтогШиномонт = ИтогШиномонт;
	ОбластьСтрокаИтог.Параметры.ИтогСъем = ИтогСъем;
	ОбластьСтрокаИтог.Параметры.ИтогКолБал = ИтогКолБал;
	ОбластьСтрокаИтог.Параметры.ИтогСумЗаГруза = ИтогСумЗаГруза;
	ОбластьСтрокаИтог.Параметры.ИтогМат = ИтогМат;
	ОбластьСтрокаИтог.Параметры.ИтогПравка = ИтогПравка;
	ОбластьСтрокаИтог.Параметры.ИтогПрот = ИтогПрот;
	//++Безроднов заполнения поля итог новой профессии
	ОбластьСтрокаИтог.Параметры.ИтогСПЦ = ИтогСПЦ;
	//++Безроднов  Заполнение поля итог нового столбца материала дископравка
	ОбластьСтрокаИтог.Параметры.ИтогМатДиск = ИтогМатДиск;
	//--
	ТабДок.Вывести(ОбластьСтрокаИтог);
	
	ТабДок.ТолькоПросмотр = Истина;
	Возврат ТабДок;
	
КонецФункции

Функция ПолучитьОкладШиномонтажника(ДатаОклада)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_СменныйОкладШиномонтажника.Период,
		|	ШМ_СменныйОкладШиномонтажника.Оклад
		|ИЗ
		|	РегистрСведений.ШМ_СменныйОкладШиномонтажника КАК ШМ_СменныйОкладШиномонтажника";
	
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Оклад=0;
	
	Для Каждого СтрокаВыборка из Выборка Цикл	
		
		Если НачалоМесяца(СтрокаВыборка.Период)=НачалоМесяца(ДатаОклада) Тогда
			Оклад=СтрокаВыборка.Оклад;
			Прервать;
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Оклад;
	
	//Возврат Константы.ШМ_СменныйОкладШиномонтажника.Получить();
	
КонецФункции

Функция ПолучитьОкладСъемщика(ДатаОклада)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_СменныйОкладСъемщика.Период,
		|	ШМ_СменныйОкладСъемщика.Оклад
		|ИЗ
		|	РегистрСведений.ШМ_СменныйОкладСъемщика КАК ШМ_СменныйОкладСъемщика";
	
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Оклад=0;
	
	Для Каждого СтрокаВыборка из Выборка Цикл	
		
		Если НачалоМесяца(СтрокаВыборка.Период)=НачалоМесяца(ДатаОклада) Тогда
			Оклад=СтрокаВыборка.Оклад;
			Прервать;
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Оклад;
	
	//Возврат Константы.ШМ_СменныйОкладСъемщика.Получить();
	
КонецФункции

Функция ПолучитьОкладДископравщика(ДатаОклада)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_СменныйОкладДископравщика.Период,
		|	ШМ_СменныйОкладДископравщика.Оклад
		|ИЗ
		|	РегистрСведений.ШМ_СменныйОкладДископравщика КАК ШМ_СменныйОкладДископравщика";
	
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Оклад=0;
	
	Для Каждого СтрокаВыборка из Выборка Цикл	
		
		Если НачалоМесяца(СтрокаВыборка.Период)=НачалоМесяца(ДатаОклада) Тогда
			Оклад=СтрокаВыборка.Оклад;
			Прервать;
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Оклад;
	
	//Возврат Константы.ШМ_СменныйОкладДископравщика.Получить();
	
КонецФункции

Функция СотрудникНаСмене(Сотр,ДатаСмены)
	
	НачалоСмены = НачалоСменыНаДату(ДатаСмены);
	КонецСмены = КонецСменыНаДату(ДатаСмены);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_БригадыСрезПоследних.Период КАК Период,
		|	ШМ_БригадыСрезПоследних.Должность КАК Должность,
		|	ШМ_БригадыСрезПоследних.Помощник КАК Помощник,
		|	ШМ_БригадыСрезПоследних.ИмяКомпьютера КАК ИмяКомпьютера,
		|	ШМ_БригадыСрезПоследних.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ШМ_Бригады КАК ШМ_БригадыСрезПоследних
		|ГДЕ
		|	ШМ_БригадыСрезПоследних.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ШМ_БригадыСрезПоследних.Сотрудник = &Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	ШМ_БригадыСрезПоследних.Период";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоСмены);
	Запрос.УстановитьПараметр("КонецПериода", КонецСмены); 
	Запрос.УстановитьПараметр("Сотрудник", Сотр);
	
	Выборка = Запрос.Выполнить().Выгрузить();
	Выборка.Сортировать("Период");
	
	БылНаСмене=Ложь;
	
	Для Каждого СтрокаВыборка из Выборка Цикл
		Если СтрокаВыборка.Должность.Наименование="Шиномонтажник" Тогда
			БылНаСмене=Истина;
			Прервать;
		ИначеЕсли СтрокаВыборка.Должность.Наименование="Съемщик" Тогда
			БылНаСмене=Истина;
			Прервать;
		ИначеЕсли СтрокаВыборка.Должность.Наименование="Правщик дисков" Тогда
			БылНаСмене=Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат БылНаСмене;
	
КонецФункции

Функция СотрудникЯвляетсяПомощником(Сотр,ДатаСмены)
	
	НачалоСмены = НачалоСменыНаДату(ДатаСмены);
	КонецСмены = КонецСменыНаДату(ДатаСмены);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_БригадыСрезПоследних.Период КАК Период,
		|	ШМ_БригадыСрезПоследних.Должность КАК Должность,
		|	ШМ_БригадыСрезПоследних.Помощник КАК Помощник,
		|	ШМ_БригадыСрезПоследних.ИмяКомпьютера КАК ИмяКомпьютера,
		|	ШМ_БригадыСрезПоследних.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ШМ_Бригады КАК ШМ_БригадыСрезПоследних
		|ГДЕ
		|	ШМ_БригадыСрезПоследних.ИмяКомпьютера = &ИмяКомпьютера
		|
		|УПОРЯДОЧИТЬ ПО
		|	ШМ_БригадыСрезПоследних.Период";
	
	Запрос.УстановитьПараметр("ИмяКомпьютера", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование);
	Выборка = Запрос.Выполнить().Выгрузить();
	Выборка.Сортировать("Период");
	
	ЯвляетсяПомощником=Ложь;
	
	Для Каждого СтрокаВыборка из Выборка Цикл
		Если (СтрокаВыборка.Период>=НачалоСмены) И (СтрокаВыборка.Период<=КонецСмены) Тогда
		Если СтрокаВыборка.Должность.Наименование="Шиномонтажник" Тогда
			Если Сотр=СтрокаВыборка.Сотрудник Тогда
			Если СтрокаВыборка.Помощник Тогда
				ЯвляетсяПомощником=Истина;
				Прервать;
			КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрокаВыборка.Должность.Наименование="Съемщик" Тогда
			Если Сотр=СтрокаВыборка.Сотрудник Тогда
			Если СтрокаВыборка.Помощник Тогда
				ЯвляетсяПомощником=Истина;
				Прервать;
			КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрокаВыборка.Должность.Наименование="Правщик дисков" Тогда
			Если Сотр=СтрокаВыборка.Сотрудник Тогда
			Если СтрокаВыборка.Помощник Тогда
				ЯвляетсяПомощником=Истина;
				Прервать;
			КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЯвляетсяПомощником;
	
КонецФункции

Функция ПолучитьТабДокОтчетБухгалтера()
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Черновик";
	Макет = ПолучитьМакетОтчетаБухгалтера();
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Шапка");
	ОбластьЗаголовок.Параметры.ДатаНачалаОтчета=ДатаНачалаОтчета;
	ОбластьЗаголовок.Параметры.ДатаОкончанияОтчета=ДатаОкончанияОтчета;
	ТабДок.Вывести(ОбластьЗаголовок);
	
	ОбоастьСтрокаПробела = Макет.ПолучитьОбласть("СтрокаПробела");
	ОбластьСтрокаДископравки = Макет.ПолучитьОбласть("СтрокаДископравка");
	ТабДок.Вывести(ОбоастьСтрокаПробела);
	
	ОбластьЗаголовокШиномонтаж = Макет.ПолучитьОбласть("ЗаголовокШиномонтаж");
	ТабДок.Вывести(ОбластьЗаголовокШиномонтаж);
	
	ТаблШиномонтажа = Новый ТаблицаЗначений;
	ТаблШиномонтажа.Колонки.Добавить("ФИО");
	ТаблШиномонтажа.Колонки.Добавить("КолВоСмен");
	ТаблШиномонтажа.Колонки.Добавить("ЗарплатаБезОклада");
	ТаблШиномонтажа.Колонки.Добавить("Получено");
	ТаблШиномонтажа.Колонки.Добавить("СуммаМатВычет");
	ТаблШиномонтажа.Колонки.Добавить("Заработано");
	
	СписокРеализацийШиномонтаж = Новый СписокЗначений;
	
	ТаблСъема = Новый ТаблицаЗначений;
	ТаблСъема.Колонки.Добавить("ФИО");
	ТаблСъема.Колонки.Добавить("КолВоСмен");
	ТаблСъема.Колонки.Добавить("ЗарплатаБезОклада");
	ТаблСъема.Колонки.Добавить("Получено");
	ТаблСъема.Колонки.Добавить("СуммаМатВычет");
	ТаблСъема.Колонки.Добавить("Заработано");
	
	СписокРеализацийСъем = Новый СписокЗначений;
	
	ТаблДископравка = Новый ТаблицаЗначений;
	ТаблДископравка.Колонки.Добавить("ФИО");
	ТаблДископравка.Колонки.Добавить("КолВоСмен");
	ТаблДископравка.Колонки.Добавить("ЗарплатаБезОклада");
	ТаблДископравка.Колонки.Добавить("Получено");
	ТаблДископравка.Колонки.Добавить("СуммаМатВычет");
	ТаблДископравка.Колонки.Добавить("ЗарплатаБезОкладаАлюминевые");
	ТаблДископравка.Колонки.Добавить("ЗарплатаБезОкладаСтальные");
	ТаблДископравка.Колонки.Добавить("ЗаработаноАлюминевые");
	ТаблДископравка.Колонки.Добавить("ЗаработаноСтальные");
	
	СписокРеализацийДископравкаАлюминевые = Новый СписокЗначений;
	СписокРеализацийДископравкаСтальные = Новый СписокЗначений;
	
	СписокРеализацийМатериалы = Новый СписокЗначений;
	
	ТаблСмен = новый ТаблицаЗначений;
	ТаблСмен.Колонки.Добавить("ФИО");
	ТаблСмен.Колонки.Добавить("ДатаСмены");
	ТаблСмен.Колонки.Добавить("КолВоСмен");
	
	ТаблСменСъем = новый ТаблицаЗначений;
	ТаблСменСъем.Колонки.Добавить("ФИО");
	ТаблСменСъем.Колонки.Добавить("ДатаСмены");
	ТаблСменСъем.Колонки.Добавить("КолВоСмен");
	
	ТаблСменДискоравка = новый ТаблицаЗначений;
	ТаблСменДискоравка.Колонки.Добавить("ФИО");
	ТаблСменДискоравка.Колонки.Добавить("ДатаСмены");
	ТаблСменДискоравка.Колонки.Добавить("КолВоСмен");
	
	ДатаСбораЗарплатыБезОклада=Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_Смены.Период КАК Период,
		|	ШМ_Смены.ИмяКомпьютера КАК ИмяКомпьютера
		|ИЗ
		|	РегистрСведений.ШМ_Смены КАК ШМ_Смены
		|ГДЕ
		|	ШМ_Смены.ИмяКомпьютера = &ИмяКомпьютера
		|	И ШМ_Смены.Период МЕЖДУ &НачалоПериода И &КонецПериода";
	
	ТекущееРабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	Запрос.УстановитьПараметр("ИмяКомпьютера", ТекущееРабочееМесто.Наименование);
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНачалаОтчета);
	Запрос.УстановитьПараметр("КонецПериода", ДатаОкончанияОтчета);
	
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаВыборка из Выборка Цикл
		ДатаСбораЗарплатыБезОклада=СтрокаВыборка.Период;
		Прервать;
	КонецЦикла;
	
	Если ДатаСбораЗарплатыБезОклада=Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_Бригады.Период КАК Период,
		|	ШМ_Бригады.Должность КАК Должность,
		|	ШМ_Бригады.Помощник КАК Помощник,
		|	ШМ_Бригады.ИмяКомпьютера КАК ИмяКомпьютера,
		|	ШМ_Бригады.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ШМ_Бригады КАК ШМ_Бригады
		|ГДЕ
		|	ШМ_Бригады.ИмяКомпьютера = &ИмяКомпьютера
		|	И ШМ_Бригады.Помощник = ЛОЖЬ
		|	И ШМ_Бригады.Период МЕЖДУ &НачалоПериода И &КонецПериода"; 
	
	
	Запрос.УстановитьПараметр("ИмяКомпьютера", ТекущееРабочееМесто.Наименование);    
	Запрос.УстановитьПараметр("НачалоПериода", ДатаСбораЗарплатыБезОклада);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ДатаОкончанияОтчета));
	Выборка = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаВыборка из Выборка Цикл

		Если СтрокаВыборка.Должность.Наименование="Шиномонтажник" Тогда	
			СтрокаТаблСмен = ТаблСмен.Добавить();
			СтрокаТаблСмен.ФИО = СтрокаВыборка.Сотрудник;
			СтрокаТаблСмен.ДатаСмены = НачалоДня(СтрокаВыборка.Период);
			СтрокаТаблСмен.КолВоСмен = 1;
		ИначеЕсли СтрокаВыборка.Должность.Наименование="Съемщик" Тогда
			СтрокаТаблСменСъем = ТаблСменСъем.Добавить();
			СтрокаТаблСменСъем.ФИО = СтрокаВыборка.Сотрудник;
			СтрокаТаблСменСъем.ДатаСмены = НачалоДня(СтрокаВыборка.Период);
			СтрокаТаблСменСъем.КолВоСмен = 1;
		ИначеЕсли СтрокаВыборка.Должность.Наименование="Правщик дисков" Тогда
			СтрокаТаблСменДискоравка = ТаблСменДискоравка.Добавить();
			СтрокаТаблСменДискоравка.ФИО = СтрокаВыборка.Сотрудник;
			СтрокаТаблСменДискоравка.ДатаСмены = НачалоДня(СтрокаВыборка.Период);
			СтрокаТаблСменДискоравка.КолВоСмен = 1;
		КонецЕсли; 
		
	КонецЦикла;
	
	//Если ТаблСмен.Количество()=0 Тогда
	Если (ТаблСмен.Количество()=0) И (ТаблСменСъем.Количество()=0) И (ТаблСмен.ТаблСменДискоравка()=0) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблСмен.Свернуть("ФИО,ДатаСмены","КолВоСмен");
	Для Каждого СтрокаТаблСмен Из ТаблСмен Цикл;
		СтрокаТаблСмен.КолВоСмен=1;
	КонецЦикла;
	ТаблСмен.Свернуть("ФИО","КолВоСмен");
	
	Для Каждого СтрокаТаблСмен Из ТаблСмен Цикл;
		СтрокаТаблШиномонтажа = ТаблШиномонтажа.Добавить();
		СтрокаТаблШиномонтажа.ФИО = СтрокаТаблСмен.ФИО;
		СтрокаТаблШиномонтажа.КолВоСмен = СтрокаТаблСмен.КолВоСмен;
		СтрокаТаблШиномонтажа.ЗарплатаБезОклада = 0;
		СтрокаТаблШиномонтажа.Получено = 0;
		СтрокаТаблШиномонтажа.СуммаМатВычет = 0;
	КонецЦикла;
	
	ТаблСменСъем.Свернуть("ФИО,ДатаСмены","КолВоСмен");
	Для Каждого СтрокаТаблСменСъем Из ТаблСменСъем Цикл;
		СтрокаТаблСменСъем.КолВоСмен=1;
	КонецЦикла;
	ТаблСменСъем.Свернуть("ФИО","КолВоСмен");
	
	Для Каждого СтрокаТаблСменСъем Из ТаблСменСъем Цикл;
		СтрокаТаблСъема = ТаблСъема.Добавить();
		СтрокаТаблСъема.ФИО = СтрокаТаблСменСъем.ФИО;
		СтрокаТаблСъема.КолВоСмен = СтрокаТаблСменСъем.КолВоСмен;
		СтрокаТаблСъема.ЗарплатаБезОклада = 0;
		СтрокаТаблСъема.Получено = 0;
		СтрокаТаблСъема.СуммаМатВычет = 0;
	КонецЦикла;
	
	ТаблСменДискоравка.Свернуть("ФИО,ДатаСмены","КолВоСмен");
	Для Каждого СтрокаТаблСменДискоравка Из ТаблСменДискоравка Цикл;
		СтрокаТаблСменДискоравка.КолВоСмен=1;
	КонецЦикла;
	ТаблСменДискоравка.Свернуть("ФИО","КолВоСмен");
	
	Для Каждого СтрокаТаблСменДискоравка Из ТаблСменДискоравка Цикл;
		СтрокаТаблДископравка = ТаблДископравка.Добавить();
		СтрокаТаблДископравка.ФИО = СтрокаТаблСменДискоравка.ФИО;
		СтрокаТаблДископравка.КолВоСмен = СтрокаТаблСменДискоравка.КолВоСмен;
		СтрокаТаблДископравка.ЗарплатаБезОклада = 0;
		СтрокаТаблДископравка.Получено = 0;
		СтрокаТаблДископравка.СуммаМатВычет = 0;
		СтрокаТаблДископравка.ЗарплатаБезОкладаАлюминевые = 0;
		СтрокаТаблДископравка.ЗарплатаБезОкладаСтальные = 0;
		СтрокаТаблДископравка.ЗаработаноСтальные = 0;
		СтрокаТаблДископравка.ЗаработаноАлюминевые = 0;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_ИсполнителиРабот.Реализация КАК Реализация,
		|	ШМ_ИсполнителиРабот.Номенклатура КАК Номенклатура,
		|	ШМ_ИсполнителиРабот.Исполнитель КАК Исполнитель,
		|	ШМ_ИсполнителиРабот.Помощник КАК Помощник,
		|	ШМ_ИсполнителиРабот.Сумма КАК Сумма
		|ИЗ
		|	РегистрСведений.ШМ_ИсполнителиРабот КАК ШМ_ИсполнителиРабот
		|ГДЕ
		|	ШМ_ИсполнителиРабот.Реализация.Дата >= &ДатаСбораЗарплатыБезОклада
		|	И ШМ_ИсполнителиРабот.Помощник = ЛОЖЬ
		|	И ШМ_ИсполнителиРабот.Реализация.Дата <= &Дата
		|	И ШМ_ИсполнителиРабот.Реализация.ИмяКомпьютера = &ИмяКомпьютера";
	
	Запрос.УстановитьПараметр("ДатаСбораЗарплатыБезОклада", ДатаСбораЗарплатыБезОклада); 
	Запрос.УстановитьПараметр("Дата", КонецДня(ДатаОкончанияОтчета));
	Запрос.УстановитьПараметр("ИмяКомпьютера", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование);
	
	Выборка = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаВыборка из Выборка Цикл

		НаборНомПроф=РегистрыСведений.ШМ_НоменклатураПрофессии.СоздатьНаборЗаписей();
		НаборНомПроф.Отбор.Номенклатура.Установить(СтрокаВыборка.Номенклатура,Истина);
		НаборНомПроф.Прочитать();
		Для Каждого СтрНаборНомПроф Из НаборНомПроф Цикл
			Если СтрНаборНомПроф.Профессия=Справочники.ШМ_Должности.НайтиПоНаименованию("Шиномонтажник") Тогда
				
				Для Каждого СтрокаТаблШиномонтажа Из ТаблШиномонтажа Цикл
					Если СтрокаТаблШиномонтажа.ФИО=СтрокаВыборка.Исполнитель Тогда      
						
						Если СотрудникНаСмене(СтрокаВыборка.Исполнитель,СтрокаВыборка.Реализация.Дата) Тогда
							СтрокаТаблШиномонтажа.ЗарплатаБезОклада=СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаВыборка.Сумма;
							Если СписокРеализацийШиномонтаж.НайтиПоЗначению(СтрокаВыборка.Реализация) = Неопределено Тогда
								СписокРеализацийШиномонтаж.Добавить(СтрокаВыборка.Реализация);
								Попытка
									СтрокаТаблШиномонтажа.Заработано=СтрокаТаблШиномонтажа.Заработано+СтрокаВыборка.Реализация.СуммаШиномонтажЧерновик;
								Исключение
									СтрокаТаблШиномонтажа.Заработано=СтрокаВыборка.Реализация.СуммаШиномонтажЧерновик;
								КонецПопытки;
								Попытка
									СтрокаТаблШиномонтажа.СуммаМатВычет=СтрокаТаблШиномонтажа.СуммаМатВычет+СтрокаВыборка.Реализация.СуммаМатВычет;
								Исключение
									СтрокаТаблШиномонтажа.СуммаМатВычет=СтрокаВыборка.Реализация.СуммаМатВычет;
								КонецПопытки;
							КонецЕсли;
							Если СписокРеализацийМатериалы.НайтиПоЗначению(СтрокаВыборка.Реализация) = Неопределено Тогда
								СписокРеализацийМатериалы.Добавить(СтрокаВыборка.Реализация);
							КонецЕсли;
				
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли СтрНаборНомПроф.Профессия=Справочники.ШМ_Должности.НайтиПоНаименованию("Съемщик") Тогда
				
				Для Каждого СтрокаТаблСъема Из ТаблСъема Цикл
					Если СтрокаТаблСъема.ФИО=СтрокаВыборка.Исполнитель Тогда
						Если СотрудникНаСмене(СтрокаВыборка.Исполнитель,СтрокаВыборка.Реализация.Дата) Тогда
							СтрокаТаблСъема.ЗарплатаБезОклада=СтрокаТаблСъема.ЗарплатаБезОклада+СтрокаВыборка.Сумма;
							СтрокаТаблСъема.СуммаМатВычет=0;
							Если СписокРеализацийСъем.НайтиПоЗначению(СтрокаВыборка.Реализация) = Неопределено Тогда
								СписокРеализацийСъем.Добавить(СтрокаВыборка.Реализация);
								Попытка
									СтрокаТаблСъема.Заработано=СтрокаТаблСъема.Заработано+СтрокаВыборка.Реализация.СуммаСъемЧерновик;
								Исключение
									СтрокаТаблСъема.Заработано=СтрокаВыборка.Реализация.СуммаСъемЧерновик;
								КонецПопытки;
							КонецЕсли;
							Если СписокРеализацийМатериалы.НайтиПоЗначению(СтрокаВыборка.Реализация) = Неопределено Тогда
								СписокРеализацийМатериалы.Добавить(СтрокаВыборка.Реализация);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли СтрНаборНомПроф.Профессия=Справочники.ШМ_Должности.НайтиПоНаименованию("Правщик дисков") Тогда
				
				Для Каждого СтрокаТаблДископравка Из ТаблДископравка Цикл
					Если СтрокаТаблДископравка.ФИО=СтрокаВыборка.Исполнитель Тогда
						Если СотрудникНаСмене(СтрокаВыборка.Исполнитель,СтрокаВыборка.Реализация.Дата) Тогда
							Если СтрНаборНомПроф.Дископравка=Перечисления.ШМ_Дископравка.Стальной Тогда
								СтрокаТаблДископравка.ЗарплатаБезОклада=СтрокаТаблДископравка.ЗарплатаБезОклада+СтрокаВыборка.Сумма;
								СтрокаТаблДископравка.ЗарплатаБезОкладаСтальные=СтрокаТаблДископравка.ЗарплатаБезОкладаСтальные+СтрокаВыборка.Сумма;
								Если СписокРеализацийДископравкаСтальные.НайтиПоЗначению(СтрокаВыборка.Реализация) = Неопределено Тогда
									СписокРеализацийДископравкаСтальные.Добавить(СтрокаВыборка.Реализация);
									Попытка
										СтрокаТаблДископравка.ЗаработаноСтальные=СтрокаТаблДископравка.ЗаработаноСтальные+СтрокаВыборка.Реализация.СуммаДископравкаЧерновик;
									Исключение
										СтрокаТаблДископравка.ЗаработаноСтальные=СтрокаВыборка.Реализация.СуммаДископравкаЧерновик;
									КонецПопытки;
								КонецЕсли;
								Если СписокРеализацийМатериалы.НайтиПоЗначению(СтрокаВыборка.Реализация) = Неопределено Тогда
									СписокРеализацийМатериалы.Добавить(СтрокаВыборка.Реализация);
								КонецЕсли;
								//КоличествоНоменклатуры=0;
								//Для Каждого СтрокаРеализ Из СтрокаВыборка.Реализация.Товары Цикл
								//	Если СтрокаРеализ.Номенклатура=СтрокаВыборка.Номенклатура Тогда
								//		КоличествоНоменклатуры=СтрокаРеализ.Количество;
								//		Прервать;
								//	КонецЕсли;
								//КонецЦикла;
								//СтруктураПроф = ПрофессияНоменклатура(СтрокаВыборка.Номенклатура);
								////СтрокаТаблШиномонтажа.СуммаМатВычет=СтрокаТаблШиномонтажа.СуммаМатВычет+Окр((СтруктураПроф.МатериальныйВычет*(1-ВернутьПроцентСкидки(СтрокаВыборка.Номенклатура)/100)),0)*КоличествоНоменклатуры;
								//СтрокаТаблДископравка.СуммаМатВычет=СтрокаТаблДископравка.СуммаМатВычет+Окр((СтруктураПроф.МатериальныйВычет),0)*КоличествоНоменклатуры;
							ИначеЕсли СтрНаборНомПроф.Дископравка=Перечисления.ШМ_Дископравка.Лекгосплавный Тогда
								СтрокаТаблДископравка.ЗарплатаБезОклада=СтрокаТаблДископравка.ЗарплатаБезОклада+СтрокаВыборка.Сумма;
								СтрокаТаблДископравка.ЗарплатаБезОкладаАлюминевые=СтрокаТаблДископравка.ЗарплатаБезОкладаАлюминевые+СтрокаВыборка.Сумма;
								Если СписокРеализацийДископравкаАлюминевые.НайтиПоЗначению(СтрокаВыборка.Реализация) = Неопределено Тогда
									СписокРеализацийДископравкаАлюминевые.Добавить(СтрокаВыборка.Реализация);
									Попытка
										СтрокаТаблДископравка.ЗаработаноАлюминевые=СтрокаТаблДископравка.ЗаработаноАлюминевые+СтрокаВыборка.Реализация.СуммаДископравкаЧерновик;
									Исключение
										СтрокаТаблДископравка.ЗаработаноАлюминевые=СтрокаВыборка.Реализация.СуммаДископравкаЧерновик;
									КонецПопытки;
								КонецЕсли;
								Если СписокРеализацийМатериалы.НайтиПоЗначению(СтрокаВыборка.Реализация) = Неопределено Тогда
									СписокРеализацийМатериалы.Добавить(СтрокаВыборка.Реализация);
								КонецЕсли;
								//КоличествоНоменклатуры=0;
								//Для Каждого СтрокаРеализ Из СтрокаВыборка.Реализация.Товары Цикл
								//	Если СтрокаРеализ.Номенклатура=СтрокаВыборка.Номенклатура Тогда
								//		КоличествоНоменклатуры=СтрокаРеализ.Количество;
								//		Прервать;
								//	КонецЕсли;
								//КонецЦикла;
								//СтруктураПроф = ПрофессияНоменклатура(СтрокаВыборка.Номенклатура);
								////СтрокаТаблШиномонтажа.СуммаМатВычет=СтрокаТаблШиномонтажа.СуммаМатВычет+Окр((СтруктураПроф.МатериальныйВычет*(1-ВернутьПроцентСкидки(СтрокаВыборка.Номенклатура)/100)),0)*КоличествоНоменклатуры;
								//СтрокаТаблДископравка.СуммаМатВычет=СтрокаТаблДископравка.СуммаМатВычет+Окр((СтруктураПроф.МатериальныйВычет),0)*КоличествоНоменклатуры;
							КонецЕсли;
							СтрокаТаблДископравка.СуммаМатВычет=0;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_Затраты.Период КАК Период,
		|	ШМ_Затраты.Сотрудник КАК Сотрудник,
		|	ШМ_Затраты.Профессия КАК Профессия,
		|	ШМ_Затраты.Сумма КАК Сумма
		|ИЗ
		|	РегистрСведений.ШМ_Затраты КАК ШМ_Затраты
		|ГДЕ
		|	ШМ_Затраты.Период >= &ДатаСбораЗарплатыБезОклада
		|	И ШМ_Затраты.Период <= &Период";
	
	Запрос.УстановитьПараметр("ДатаСбораЗарплатыБезОклада", ДатаСбораЗарплатыБезОклада);
	Запрос.УстановитьПараметр("Период", КонецДня(ДатаОкончанияОтчета));

	
	Выборка = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаВыборка из Выборка Цикл
		Если СтрокаВыборка.Профессия.Наименование="Шиномонтажник" Тогда
			
		Для Каждого СтрокаТаблШиномонтажа Из ТаблШиномонтажа Цикл
			Если СтрокаТаблШиномонтажа.ФИО=СтрокаВыборка.Сотрудник Тогда
				СтрокаТаблШиномонтажа.Получено=СтрокаТаблШиномонтажа.Получено+СтрокаВыборка.Сумма;
			КонецЕсли;
		КонецЦикла;
		
		КонецЕсли;
	
		Если СтрокаВыборка.Профессия.Наименование="Съемщик" Тогда
			
		Для Каждого СтрокаТаблСъема Из ТаблСъема Цикл
			Если СтрокаТаблСъема.ФИО=СтрокаВыборка.Сотрудник Тогда
				СтрокаТаблСъема.Получено=СтрокаТаблСъема.Получено+СтрокаВыборка.Сумма;
			КонецЕсли;
		КонецЦикла;
		
		КонецЕсли;
	
	    Если СтрокаВыборка.Профессия.Наименование="Правщик дисков" Тогда
			
		Для Каждого СтрокаТаблДископравка Из ТаблДископравка Цикл
			Если СтрокаТаблДископравка.ФИО=СтрокаВыборка.Сотрудник Тогда
				СтрокаТаблДископравка.Получено=СтрокаТаблДископравка.Получено+СтрокаВыборка.Сумма;
			КонецЕсли;
		КонецЦикла;
		
		КонецЕсли;
		
	КонецЦикла;
	
	ВсегоИтогЗаработано=0;
	ВсегоИтогКолСмен=0;
	ВсегоИтогЗарплатаБезОклада=0;
	ВсегоИтогОклад=0;
	ВсегоИтогЗарплатаСОкладом=0;
	ВсегоИтогПолучено=0;
	ВсегоИтогДополучитьСОкладом=0;
	ВсегоИтогСданоЗаМатер=0;
	ВсегоИтогНедостачиПоМатер=0;
	ВсегоИтогНалоги=0;
	ВсегоИтогВсегоУдержано=0;
	ВсегоИтогКВыплатеСОкладом=0;
	
	ИтогЗаработано=0;
	ИтогКолСмен=0;
	ИтогЗарплатаБезОклада=0;
	ИтогОклад=0;
	ИтогЗарплатаСОкладом=0;
	ИтогПолучено=0;
	ИтогДополучитьСОкладом=0;
	ИтогСданоЗаМатер=0;
	ИтогНедостачиПоМатер=0;
	ИтогНалоги=0;
	ИтогВсегоУдержано=0;
	ИтогКВыплатеСОкладом=0;
	
	КолСтрокШ=0;
	Для Каждого СтрокаТаблШиномонтажа Из ТаблШиномонтажа Цикл
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		КолСтрокШ=КолСтрокШ+1;
		ОбластьСтрока.Параметры.НомерПП = КолСтрокШ;
		ОбластьСтрока.Параметры.ФИО = СтрокаТаблШиномонтажа.ФИО;
		ОбластьСтрока.Параметры.КолСмен = СтрокаТаблШиномонтажа.КолВоСмен;
		ИтогКолСмен=ИтогКолСмен+СтрокаТаблШиномонтажа.КолВоСмен;
		//ОбластьСтрока.Параметры.Оклад = СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладШиномонтажника.Получить();
		ОбластьСтрока.Параметры.Оклад = СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладШиномонтажника(ДатаНачалаОтчета);
		//ИтогОклад=ИтогОклад+СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладШиномонтажника.Получить();
		ИтогОклад=ИтогОклад+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладШиномонтажника(ДатаНачалаОтчета);
		ОбластьСтрока.Параметры.ЗарплатаБезОклада = Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОклада,0);
		ИтогЗарплатаБезОклада=ИтогЗарплатаБезОклада+Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОклада,0);
		//ОбластьСтрока.Параметры.ЗарплатаСОкладом = Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладШиномонтажника.Получить(),0);
		ОбластьСтрока.Параметры.ЗарплатаСОкладом = Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладШиномонтажника(ДатаНачалаОтчета),0);
		//ИтогЗарплатаСОкладом=ИтогЗарплатаСОкладом+Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладШиномонтажника.Получить(),0);
		ИтогЗарплатаСОкладом=ИтогЗарплатаСОкладом+Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладШиномонтажника(ДатаНачалаОтчета),0);
		//ОбластьСтрока.Параметры.Заработано = Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада/ПолучитьПроцентШиномонтажника(ДатаНачалаОтчета))*100,0);
		ОбластьСтрока.Параметры.Заработано = СтрокаТаблШиномонтажа.Заработано;
		//ИтогЗаработано=ИтогЗаработано+Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада/ПолучитьПроцентШиномонтажника(ДатаНачалаОтчета))*100,0);
		Попытка
			ИтогЗаработано=ИтогЗаработано+СтрокаТаблШиномонтажа.Заработано;
		Исключение
		КонецПопытки;
		ОбластьСтрока.Параметры.СредЗаСмену = Окр(((СтрокаТаблШиномонтажа.ЗарплатаБезОклада/ПолучитьПроцентШиномонтажника(ДатаНачалаОтчета))*100)/СтрокаТаблШиномонтажа.КолВоСмен,0);
		ОбластьСтрока.Параметры.Получено = СтрокаТаблШиномонтажа.Получено;
		ИтогПолучено=ИтогПолучено+СтрокаТаблШиномонтажа.Получено;
		//ОбластьСтрока.Параметры.ДополучитьСОкладом=Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладШиномонтажника.Получить())-СтрокаТаблШиномонтажа.Получено,0);
		ОбластьСтрока.Параметры.ДополучитьСОкладом=Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладШиномонтажника(ДатаНачалаОтчета))-СтрокаТаблШиномонтажа.Получено,0);
		//ИтогДополучитьСОкладом=ИтогДополучитьСОкладом+Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладШиномонтажника.Получить())-СтрокаТаблШиномонтажа.Получено,0);
		ИтогДополучитьСОкладом=ИтогДополучитьСОкладом+Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладШиномонтажника(ДатаНачалаОтчета))-СтрокаТаблШиномонтажа.Получено,0);
		МатВыч=0;
		//ВыбРеал=Документы.РеализацияТоваровУслуг.Выбрать(НачалоДня(ДатаНачалаОтчета),КонецДня(ДатаОкончанияОтчета));
		//Пока ВыбРеал.Следующий() Цикл
		//	Если ВыбРеал.Проведен=Ложь Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	Если ВыбРеал.Комментарий = "Материалы" Тогда
		//		Продолжить;
		//	КонецЕсли;
		//    МатВыч=МатВыч+ВыбРеал.СуммаМатВычет;
		//КонецЦикла;
		ОбластьСтрока.Параметры.СданоЗаМатер = СтрокаТаблШиномонтажа.СуммаМатВычет;
		ИтогСданоЗаМатер=ИтогСданоЗаМатер+СтрокаТаблШиномонтажа.СуммаМатВычет;
		//ОбластьСтрока.Параметры.СданоЗаМатер = МатВыч;
		//ИтогСданоЗаМатер=ИтогСданоЗаМатер+МатВыч;
		ОбластьСтрока.Параметры.Процент = ПолучитьПроцентШиномонтажника(ДатаНачалаОтчета);
		
		Налог=0;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_Налоги.Должность КАК Должность,
		|	ШМ_Налоги.Период КАК Период,
		|	ШМ_Налоги.Налог КАК Налог,
		|	ШМ_Налоги.ДископравныйТип КАК ДископравныйТип,
		|	ШМ_Налоги.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ШМ_Налоги КАК ШМ_Налоги
		|ГДЕ
		|	ШМ_Налоги.Период >= &ДатаСбораЗарплатыБезОклада
		|	И ШМ_Налоги.Сотрудник = &Сотрудник
		|	И ШМ_Налоги.Должность.Наименование = ""Шиномонтажник""
		|	И ШМ_Налоги.Период <= &Период";
	
		Запрос.УстановитьПараметр("ДатаСбораЗарплатыБезОклада", ДатаСбораЗарплатыБезОклада);
		Запрос.УстановитьПараметр("Сотрудник", СтрокаТаблШиномонтажа.ФИО);  
		Запрос.УстановитьПараметр("Период", КонецМесяца(ДатаСбораЗарплатыБезОклада));
	
		ВыборкаНалог = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаВыборка из ВыборкаНалог Цикл
			Налог=Налог+СтрокаВыборка.Налог;
		КонецЦикла;
		ОбластьСтрока.Параметры.Налоги = Налог;
		ИтогНалоги=ИтогНалоги+Налог;
		
		НедостачаМат=0;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_Налоги.Должность КАК Должность,
		|	ШМ_Налоги.Период КАК Период,
		|	ШМ_Налоги.Недостача КАК Недостача,
		|	ШМ_Налоги.ДископравныйТип КАК ДископравныйТип,
		|	ШМ_Налоги.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ШМ_НедостачиМатериалов КАК ШМ_Налоги
		|ГДЕ
		|	ШМ_Налоги.Период >= &ДатаСбораЗарплатыБезОклада
		|	И ШМ_Налоги.Сотрудник = &Сотрудник
		|	И ШМ_Налоги.Должность.Наименование = ""Шиномонтажник""
		|	И ШМ_Налоги.Период <= &Период";
	
		Запрос.УстановитьПараметр("ДатаСбораЗарплатыБезОклада", ДатаСбораЗарплатыБезОклада);
		Запрос.УстановитьПараметр("Период", КонецМесяца(ДатаСбораЗарплатыБезОклада));
		Запрос.УстановитьПараметр("Сотрудник", СтрокаТаблШиномонтажа.ФИО);
	
		ВыборкаНедостач = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаВыборка из ВыборкаНедостач Цикл
			НедостачаМат=НедостачаМат+СтрокаВыборка.Недостача;
		КонецЦикла;
		ОбластьСтрока.Параметры.НедостачиПоМатер = НедостачаМат;
		ИтогНедостачиПоМатер=ИтогНедостачиПоМатер+НедостачаМат;
		
		ОбластьСтрока.Параметры.ВсегоУдержано = Налог + НедостачаМат;
		ИтогВсегоУдержано=ИтогВсегоУдержано+Налог + НедостачаМат;
		//ОбластьСтрока.Параметры.КВыплатеСОкладом = Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладШиномонтажника.Получить())-СтрокаТаблШиномонтажа.Получено,0)-(Налог + НедостачаМат);
		ОбластьСтрока.Параметры.КВыплатеСОкладом = Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладШиномонтажника(ДатаНачалаОтчета))-СтрокаТаблШиномонтажа.Получено,0)-(Налог + НедостачаМат);
		//ИтогКВыплатеСОкладом=ИтогКВыплатеСОкладом+Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладШиномонтажника.Получить())-СтрокаТаблШиномонтажа.Получено,0)-(Налог + НедостачаМат);
		ИтогКВыплатеСОкладом=ИтогКВыплатеСОкладом+Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладШиномонтажника(ДатаНачалаОтчета))-СтрокаТаблШиномонтажа.Получено,0)-(Налог + НедостачаМат);
		
		ТабДок.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	ОбластьСтрокаИтог = Макет.ПолучитьОбласть("СтрокаИтог");
	ОбластьСтрокаИтог.Параметры.ИтогЗаработано=ИтогЗаработано;
	ОбластьСтрокаИтог.Параметры.ИтогКолСмен=ИтогКолСмен;
	ОбластьСтрокаИтог.Параметры.ИтогЗарплатаБезОклада=ИтогЗарплатаБезОклада;
	ОбластьСтрокаИтог.Параметры.ИтогОклад=ИтогОклад;
	ОбластьСтрокаИтог.Параметры.ИтогЗарплатаСОкладом=ИтогЗарплатаСОкладом;
	ОбластьСтрокаИтог.Параметры.ИтогПолучено=ИтогПолучено;
	ОбластьСтрокаИтог.Параметры.ИтогДополучитьСОкладом=ИтогДополучитьСОкладом;
	ОбластьСтрокаИтог.Параметры.ИтогСданоЗаМатер=ИтогСданоЗаМатер;
	ОбластьСтрокаИтог.Параметры.ИтогНедостачиПоМатер=ИтогНедостачиПоМатер;
	ОбластьСтрокаИтог.Параметры.ИтогНалоги=ИтогНалоги;
	ОбластьСтрокаИтог.Параметры.ИтогВсегоУдержано=ИтогВсегоУдержано;
	ОбластьСтрокаИтог.Параметры.ИтогКВыплатеСОкладом=ИтогКВыплатеСОкладом;

	ТабДок.Вывести(ОбластьСтрокаИтог);
	
	ВсегоИтогЗаработано=ВсегоИтогЗаработано+ИтогЗаработано;
	ВсегоИтогКолСмен=ВсегоИтогКолСмен+ИтогКолСмен;
	ВсегоИтогЗарплатаБезОклада=ВсегоИтогЗарплатаБезОклада+ИтогЗарплатаБезОклада;
	ВсегоИтогОклад=ВсегоИтогОклад+ИтогОклад;
	ВсегоИтогЗарплатаСОкладом=ВсегоИтогЗарплатаСОкладом+ИтогЗарплатаСОкладом;
	ВсегоИтогПолучено=ВсегоИтогПолучено+ИтогПолучено;
	ВсегоИтогДополучитьСОкладом=ВсегоИтогДополучитьСОкладом+ИтогДополучитьСОкладом;
	ВсегоИтогСданоЗаМатер=ВсегоИтогСданоЗаМатер+ИтогСданоЗаМатер;
	ВсегоИтогНедостачиПоМатер=ВсегоИтогНедостачиПоМатер+ИтогНедостачиПоМатер;
	ВсегоИтогНалоги=ВсегоИтогНалоги+ИтогНалоги;
	ВсегоИтогВсегоУдержано=ВсегоИтогВсегоУдержано+ИтогВсегоУдержано;
	ВсегоИтогКВыплатеСОкладом=ВсегоИтогКВыплатеСОкладом+ИтогКВыплатеСОкладом;
	
	ТабДок.Вывести(ОбоастьСтрокаПробела);
	ОбластьЗаголовокСъем = Макет.ПолучитьОбласть("ЗаголовокСъем");
	ТабДок.Вывести(ОбластьЗаголовокСъем);
	
	ИтогЗаработано=0;
	ИтогКолСмен=0;
	ИтогЗарплатаБезОклада=0;
	ИтогОклад=0;
	ИтогЗарплатаСОкладом=0;
	ИтогПолучено=0;
	ИтогДополучитьСОкладом=0;
	ИтогСданоЗаМатер=0;
	ИтогНедостачиПоМатер=0;
	ИтогНалоги=0;
	ИтогВсегоУдержано=0;
	ИтогКВыплатеСОкладом=0;
	
	КолСтрокШ=0;
	Для Каждого СтрокаТаблШиномонтажа Из ТаблСъема Цикл
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		КолСтрокШ=КолСтрокШ+1;
		ОбластьСтрока.Параметры.НомерПП = КолСтрокШ;
		ОбластьСтрока.Параметры.ФИО = СтрокаТаблШиномонтажа.ФИО;
		ОбластьСтрока.Параметры.КолСмен = СтрокаТаблШиномонтажа.КолВоСмен;
		ИтогКолСмен=ИтогКолСмен+СтрокаТаблШиномонтажа.КолВоСмен;
		//ОбластьСтрока.Параметры.Оклад = СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладСъемщика.Получить();
		ОбластьСтрока.Параметры.Оклад = СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладСъемщика(ДатаНачалаОтчета);
		//ИтогОклад=ИтогОклад+СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладСъемщика.Получить();
		ИтогОклад=ИтогОклад+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладСъемщика(ДатаНачалаОтчета);
		ОбластьСтрока.Параметры.ЗарплатаБезОклада = Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОклада,0);
		ИтогЗарплатаБезОклада=ИтогЗарплатаБезОклада+Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОклада,0);
		//ОбластьСтрока.Параметры.ЗарплатаСОкладом = Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладСъемщика.Получить(),0);
		ОбластьСтрока.Параметры.ЗарплатаСОкладом = Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладСъемщика(ДатаНачалаОтчета),0);
		//ИтогЗарплатаСОкладом=ИтогЗарплатаСОкладом+Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладСъемщика.Получить(),0);
		ИтогЗарплатаСОкладом=ИтогЗарплатаСОкладом+Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладСъемщика(ДатаНачалаОтчета),0);
		//ОбластьСтрока.Параметры.Заработано = Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада/ПолучитьПроцентСъемщика(ДатаНачалаОтчета))*100,0);
		ОбластьСтрока.Параметры.Заработано = СтрокаТаблШиномонтажа.Заработано;
		//ИтогЗаработано=ИтогЗаработано+Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада/ПолучитьПроцентСъемщика(ДатаНачалаОтчета))*100,0);
		Попытка
			ИтогЗаработано=ИтогЗаработано+СтрокаТаблШиномонтажа.Заработано;
		Исключение
		КонецПопытки;
		ОбластьСтрока.Параметры.СредЗаСмену = Окр(((СтрокаТаблШиномонтажа.ЗарплатаБезОклада/ПолучитьПроцентСъемщика(ДатаНачалаОтчета))*100)/СтрокаТаблШиномонтажа.КолВоСмен,0);
		ОбластьСтрока.Параметры.Получено = СтрокаТаблШиномонтажа.Получено;
		ИтогПолучено=ИтогПолучено+СтрокаТаблШиномонтажа.Получено;
		//ОбластьСтрока.Параметры.ДополучитьСОкладом=Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладСъемщика.Получить())-СтрокаТаблШиномонтажа.Получено,0);
		ОбластьСтрока.Параметры.ДополучитьСОкладом=Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладСъемщика(ДатаНачалаОтчета))-СтрокаТаблШиномонтажа.Получено,0);
		//ИтогДополучитьСОкладом=ИтогДополучитьСОкладом+Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладСъемщика.Получить())-СтрокаТаблШиномонтажа.Получено,0);
		ИтогДополучитьСОкладом=ИтогДополучитьСОкладом+Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладСъемщика(ДатаНачалаОтчета))-СтрокаТаблШиномонтажа.Получено,0);
		ОбластьСтрока.Параметры.СданоЗаМатер = СтрокаТаблШиномонтажа.СуммаМатВычет;
		ИтогСданоЗаМатер=ИтогСданоЗаМатер+СтрокаТаблШиномонтажа.СуммаМатВычет;
		ОбластьСтрока.Параметры.Процент = ПолучитьПроцентСъемщика(ДатаНачалаОтчета);
		
		Налог=0;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_Налоги.Должность КАК Должность,
		|	ШМ_Налоги.Период КАК Период,
		|	ШМ_Налоги.Налог КАК Налог,
		|	ШМ_Налоги.ДископравныйТип КАК ДископравныйТип,
		|	ШМ_Налоги.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ШМ_Налоги КАК ШМ_Налоги
		|ГДЕ
		|	ШМ_Налоги.Период >= &ДатаСбораЗарплатыБезОклада
		|	И ШМ_Налоги.Должность.Наименование = ""Съемщик""
		|	И ШМ_Налоги.Сотрудник = &Сотрудник
		|	И ШМ_Налоги.Период <= &Период";
	
		Запрос.УстановитьПараметр("ДатаСбораЗарплатыБезОклада", ДатаСбораЗарплатыБезОклада);
		Запрос.УстановитьПараметр("Период", КонецМесяца(ДатаСбораЗарплатыБезОклада));
		Запрос.УстановитьПараметр("Сотрудник", СтрокаТаблШиномонтажа.ФИО);
	
		ВыборкаНалог = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаВыборка из ВыборкаНалог Цикл
			Налог=Налог+СтрокаВыборка.Налог;
		КонецЦикла;
		ОбластьСтрока.Параметры.Налоги = Налог;
		ИтогНалоги=ИтогНалоги+Налог;
		
		НедостачаМат=0;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_Налоги.Должность КАК Должность,
		|	ШМ_Налоги.Период КАК Период,
		|	ШМ_Налоги.Недостача КАК Недостача,
		|	ШМ_Налоги.ДископравныйТип КАК ДископравныйТип,
		|	ШМ_Налоги.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ШМ_НедостачиМатериалов КАК ШМ_Налоги
		|ГДЕ
		|	ШМ_Налоги.Период >= &ДатаСбораЗарплатыБезОклада
		|	И ШМ_Налоги.Должность.Наименование = ""Съемщик""
		|	И ШМ_Налоги.Период <= &Период
		|	И ШМ_Налоги.Сотрудник = &Сотрудник";
	
		Запрос.УстановитьПараметр("ДатаСбораЗарплатыБезОклада", ДатаСбораЗарплатыБезОклада);
		Запрос.УстановитьПараметр("Период", КонецМесяца(ДатаСбораЗарплатыБезОклада));
		Запрос.УстановитьПараметр("Сотрудник", СтрокаТаблШиномонтажа.ФИО);
	
		ВыборкаНедостач = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаВыборка из ВыборкаНедостач Цикл
			НедостачаМат=НедостачаМат+СтрокаВыборка.Недостача;
		КонецЦикла;
		ОбластьСтрока.Параметры.НедостачиПоМатер = НедостачаМат;
		ИтогНедостачиПоМатер=ИтогНедостачиПоМатер+НедостачаМат;
		
		ОбластьСтрока.Параметры.ВсегоУдержано = Налог + НедостачаМат;
		ИтогВсегоУдержано=ИтогВсегоУдержано+Налог + НедостачаМат;
		//ОбластьСтрока.Параметры.КВыплатеСОкладом = Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладШиномонтажника.Получить())-СтрокаТаблШиномонтажа.Получено,0)-(Налог + НедостачаМат);
		ОбластьСтрока.Параметры.КВыплатеСОкладом = Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладСъемщика(ДатаНачалаОтчета))-СтрокаТаблШиномонтажа.Получено,0)-(Налог + НедостачаМат);
		//ИтогКВыплатеСОкладом=ИтогКВыплатеСОкладом+Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладШиномонтажника.Получить())-СтрокаТаблШиномонтажа.Получено,0)-(Налог + НедостачаМат);
		ИтогКВыплатеСОкладом=ИтогКВыплатеСОкладом+Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладСъемщика(ДатаНачалаОтчета))-СтрокаТаблШиномонтажа.Получено,0)-(Налог + НедостачаМат);
		
		ТабДок.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	ОбластьСтрокаИтог = Макет.ПолучитьОбласть("СтрокаИтог");
	ОбластьСтрокаИтог.Параметры.ИтогЗаработано=ИтогЗаработано;
	ОбластьСтрокаИтог.Параметры.ИтогКолСмен=ИтогКолСмен;
	ОбластьСтрокаИтог.Параметры.ИтогЗарплатаБезОклада=ИтогЗарплатаБезОклада;
	ОбластьСтрокаИтог.Параметры.ИтогОклад=ИтогОклад;
	ОбластьСтрокаИтог.Параметры.ИтогЗарплатаСОкладом=ИтогЗарплатаСОкладом;
	ОбластьСтрокаИтог.Параметры.ИтогПолучено=ИтогПолучено;
	ОбластьСтрокаИтог.Параметры.ИтогДополучитьСОкладом=ИтогДополучитьСОкладом;
	ОбластьСтрокаИтог.Параметры.ИтогСданоЗаМатер=ИтогСданоЗаМатер;
	ОбластьСтрокаИтог.Параметры.ИтогНедостачиПоМатер=ИтогНедостачиПоМатер;
	ОбластьСтрокаИтог.Параметры.ИтогНалоги=ИтогНалоги;
	ОбластьСтрокаИтог.Параметры.ИтогВсегоУдержано=ИтогВсегоУдержано;
	ОбластьСтрокаИтог.Параметры.ИтогКВыплатеСОкладом=ИтогКВыплатеСОкладом;
	ТабДок.Вывести(ОбластьСтрокаИтог);
	
	ВсегоИтогЗаработано=ВсегоИтогЗаработано+ИтогЗаработано;
	ВсегоИтогКолСмен=ВсегоИтогКолСмен+ИтогКолСмен;
	ВсегоИтогЗарплатаБезОклада=ВсегоИтогЗарплатаБезОклада+ИтогЗарплатаБезОклада;
	ВсегоИтогОклад=ВсегоИтогОклад+ИтогОклад;
	ВсегоИтогЗарплатаСОкладом=ВсегоИтогЗарплатаСОкладом+ИтогЗарплатаСОкладом;
	ВсегоИтогПолучено=ВсегоИтогПолучено+ИтогПолучено;
	ВсегоИтогДополучитьСОкладом=ВсегоИтогДополучитьСОкладом+ИтогДополучитьСОкладом;
	ВсегоИтогСданоЗаМатер=ВсегоИтогСданоЗаМатер+ИтогСданоЗаМатер;
	ВсегоИтогНедостачиПоМатер=ВсегоИтогНедостачиПоМатер+ИтогНедостачиПоМатер;
	ВсегоИтогНалоги=ВсегоИтогНалоги+ИтогНалоги;
	ВсегоИтогВсегоУдержано=ВсегоИтогВсегоУдержано+ИтогВсегоУдержано;
	ВсегоИтогКВыплатеСОкладом=ВсегоИтогКВыплатеСОкладом+ИтогКВыплатеСОкладом;
	
	ТабДок.Вывести(ОбоастьСтрокаПробела);
	ОбластьЗаголовокДископравка = Макет.ПолучитьОбласть("ЗаголовокДископравка");
	ТабДок.Вывести(ОбластьЗаголовокДископравка);
	
	ИтогЗаработано=0;
	ИтогКолСмен=0;
	ИтогЗарплатаБезОклада=0;
	ИтогОклад=0;
	ИтогЗарплатаСОкладом=0;
	ИтогПолучено=0;
	ИтогДополучитьСОкладом=0;
	ИтогСданоЗаМатер=0;
	ИтогНедостачиПоМатер=0;
	ИтогНалоги=0;
	ИтогВсегоУдержано=0;
	ИтогКВыплатеСОкладом=0;
	
	КолСтрокШ=0;
	Для Каждого СтрокаТаблШиномонтажа Из ТаблДископравка Цикл
		
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		КолСтрокШ=КолСтрокШ+1;
		ОбластьСтрока.Параметры.НомерПП = КолСтрокШ;
		ОбластьСтрока.Параметры.ФИО = СтрокаТаблШиномонтажа.ФИО;
		ОбластьСтрока.Параметры.КолСмен = СтрокаТаблШиномонтажа.КолВоСмен;
		ИтогКолСмен=ИтогКолСмен+СтрокаТаблШиномонтажа.КолВоСмен;
		//ОбластьСтрока.Параметры.Оклад = СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладДископравщика.Получить();
		ОбластьСтрока.Параметры.Оклад = СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладДископравщика(ДатаНачалаОтчета);
		//ИтогОклад=ИтогОклад+СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладДископравщика.Получить();
		ИтогОклад=ИтогОклад+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладДископравщика(ДатаНачалаОтчета);
		ОбластьСтрока.Параметры.ЗарплатаБезОклада = Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОкладаАлюминевые+СтрокаТаблШиномонтажа.ЗарплатаБезОкладаСтальные,0);
		ИтогЗарплатаБезОклада=ИтогЗарплатаБезОклада+Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОкладаАлюминевые+СтрокаТаблШиномонтажа.ЗарплатаБезОкладаСтальные,0);
		//ОбластьСтрока.Параметры.ЗарплатаСОкладом = Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладДископравщика.Получить(),0);
		ОбластьСтрока.Параметры.ЗарплатаСОкладом = Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладДископравщика(ДатаНачалаОтчета),0);
		//ИтогЗарплатаСОкладом=ИтогЗарплатаСОкладом+Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладДископравщика.Получить(),0);
		ИтогЗарплатаСОкладом=ИтогЗарплатаСОкладом+Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладДископравщика(ДатаНачалаОтчета),0);
		//ОбластьСтрока.Параметры.Заработано = Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОкладаАлюминевые/ПолучитьПроцентДископравщикаАлюм(ДатаНачалаОтчета))*100,0)+Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОкладаСтальные/ПолучитьПроцентДископравщикаСталь(ДатаНачалаОтчета))*100,0);
		ОбластьСтрока.Параметры.Заработано = СтрокаТаблШиномонтажа.ЗаработаноСтальные+СтрокаТаблШиномонтажа.ЗаработаноАлюминевые;
		//ИтогЗаработано=ИтогЗаработано+Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОкладаАлюминевые/ПолучитьПроцентДископравщикаАлюм(ДатаНачалаОтчета))*100,0)+Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОкладаСтальные/ПолучитьПроцентДископравщикаСталь(ДатаНачалаОтчета))*100,0);
		Попытка
			ИтогЗаработано=ИтогЗаработано+СтрокаТаблШиномонтажа.ЗаработаноСтальные+СтрокаТаблШиномонтажа.ЗаработаноАлюминевые;
		Исключение
		КонецПопытки;
		ОбластьСтрока.Параметры.СредЗаСмену = Окр((СтрокаТаблШиномонтажа.ЗаработаноСтальные+СтрокаТаблШиномонтажа.ЗаработаноАлюминевые)/СтрокаТаблШиномонтажа.КолВоСмен,0);
		ОбластьСтрока.Параметры.Получено = СтрокаТаблШиномонтажа.Получено;
		ИтогПолучено=ИтогПолучено+СтрокаТаблШиномонтажа.Получено;
		//ОбластьСтрока.Параметры.ДополучитьСОкладом=Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладДископравщика.Получить())-СтрокаТаблШиномонтажа.Получено,0);
		ОбластьСтрока.Параметры.ДополучитьСОкладом=Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладДископравщика(ДатаНачалаОтчета))-СтрокаТаблШиномонтажа.Получено,0);
		//ИтогДополучитьСОкладом=ИтогДополучитьСОкладом+Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладДископравщика.Получить())-СтрокаТаблШиномонтажа.Получено,0);
		ИтогДополучитьСОкладом=ИтогДополучитьСОкладом+Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладДископравщика(ДатаНачалаОтчета))-СтрокаТаблШиномонтажа.Получено,0);
		ОбластьСтрока.Параметры.СданоЗаМатер = СтрокаТаблШиномонтажа.СуммаМатВычет;
		ИтогСданоЗаМатер=ИтогСданоЗаМатер+СтрокаТаблШиномонтажа.СуммаМатВычет;
		ОбластьСтрока.Параметры.Процент = 0;
		
		Налог=0;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_Налоги.Должность КАК Должность,
		|	ШМ_Налоги.Период КАК Период,
		|	ШМ_Налоги.Налог КАК Налог,
		|	ШМ_Налоги.ДископравныйТип КАК ДископравныйТип,
		|	ШМ_Налоги.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ШМ_Налоги КАК ШМ_Налоги
		|ГДЕ
		|	ШМ_Налоги.Период >= &ДатаСбораЗарплатыБезОклада
		|	И ШМ_Налоги.Период <= &Период
		|	И ШМ_Налоги.Должность.Наименование = ""Правщик дисков""
		|	И ШМ_Налоги.Сотрудник = &Сотрудник";
	
		Запрос.УстановитьПараметр("ДатаСбораЗарплатыБезОклада", ДатаСбораЗарплатыБезОклада);
		Запрос.УстановитьПараметр("Период", КонецМесяца(ДатаСбораЗарплатыБезОклада));
		Запрос.УстановитьПараметр("Сотрудник", СтрокаТаблШиномонтажа.ФИО);
	
		ВыборкаНалог = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаВыборка из ВыборкаНалог Цикл
			Налог=Налог+СтрокаВыборка.Налог;
		КонецЦикла;
		ОбластьСтрока.Параметры.Налоги = Налог;
		ИтогНалоги=ИтогНалоги+Налог;
		
		НедостачаМат=0;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_Налоги.Должность КАК Должность,
		|	ШМ_Налоги.Период КАК Период,
		|	ШМ_Налоги.Недостача КАК Недостача,
		|	ШМ_Налоги.ДископравныйТип КАК ДископравныйТип,
		|	ШМ_Налоги.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ШМ_НедостачиМатериалов КАК ШМ_Налоги
		|ГДЕ
		|	ШМ_Налоги.Период >= &ДатаСбораЗарплатыБезОклада
		|	И ШМ_Налоги.Должность.Наименование = ""Правщик дисков""
		|	И ШМ_Налоги.Сотрудник = &Сотрудник
		|	И ШМ_Налоги.Период <= &Период";
	
		Запрос.УстановитьПараметр("ДатаСбораЗарплатыБезОклада", ДатаСбораЗарплатыБезОклада);
		Запрос.УстановитьПараметр("Сотрудник", СтрокаТаблШиномонтажа.ФИО);
		Запрос.УстановитьПараметр("Период", КонецМесяца(ДатаСбораЗарплатыБезОклада));
	
		ВыборкаНедостач = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаВыборка из ВыборкаНедостач Цикл
			НедостачаМат=НедостачаМат+СтрокаВыборка.Недостача;
		КонецЦикла;
		ОбластьСтрока.Параметры.НедостачиПоМатер = НедостачаМат;
		ИтогНедостачиПоМатер=ИтогНедостачиПоМатер+НедостачаМат;
		
		ОбластьСтрока.Параметры.ВсегоУдержано = Налог + НедостачаМат;
		ИтогВсегоУдержано=ИтогВсегоУдержано+Налог + НедостачаМат;
		//ОбластьСтрока.Параметры.КВыплатеСОкладом = Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладШиномонтажника.Получить())-СтрокаТаблШиномонтажа.Получено,0)-(Налог + НедостачаМат);
		ОбластьСтрока.Параметры.КВыплатеСОкладом = Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладДископравщика(ДатаНачалаОтчета))-СтрокаТаблШиномонтажа.Получено,0)-(Налог + НедостачаМат);
		//ИтогКВыплатеСОкладом=ИтогКВыплатеСОкладом+Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладШиномонтажника.Получить())-СтрокаТаблШиномонтажа.Получено,0)-(Налог + НедостачаМат);
		ИтогКВыплатеСОкладом=ИтогКВыплатеСОкладом+Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладДископравщика(ДатаНачалаОтчета))-СтрокаТаблШиномонтажа.Получено,0)-(Налог + НедостачаМат);
		
		ТабДок.Вывести(ОбластьСтрока);
		
		ОбластьСтрокаДископравки.Параметры.ТипДиска="Алюмин";
		ОбластьСтрокаДископравки.Параметры.ПроцентТипДиска=ПолучитьПроцентДископравщикаАлюм(ДатаНачалаОтчета);
		//ОбластьСтрокаДископравки.Параметры.КолСмен = СтрокаТаблШиномонтажа.КолВоСмен;
		//ИтогКолСмен=ИтогКолСмен+СтрокаТаблШиномонтажа.КолВоСмен;
		//ОбластьСтрокаДископравки.Параметры.Оклад = СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладДископравщика(ДатаНачалаОтчета);
		//ИтогОклад=ИтогОклад+СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладШиномонтажника.Получить();;
		ОбластьСтрокаДископравки.Параметры.ЗарплатаБезОклада = Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОкладаАлюминевые,0);
		//ИтогЗарплатаБезОклада=ИтогЗарплатаБезОклада+Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОклада,0);
		//ОбластьСтрокаДископравки.Параметры.ЗарплатаСОкладом = Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОкладаАлюминевые+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладДископравщика(ДатаНачалаОтчета),0);
		//ИтогЗарплатаСОкладом=ИтогЗарплатаСОкладом+Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладШиномонтажника.Получить(),0);
		//ОбластьСтрокаДископравки.Параметры.Заработано = Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОкладаАлюминевые/ПолучитьПроцентДископравщикаАлюм(ДатаНачалаОтчета))*100,0);
		ОбластьСтрокаДископравки.Параметры.Заработано = СтрокаТаблШиномонтажа.ЗаработаноАлюминевые;
		//ОбластьСтрокаДископравки.Параметры.Заработано = СтрокаТаблШиномонтажа.ЗаработаноАлюминевые;
		//ИтогЗаработано=ИтогЗаработано+Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада/ПолучитьПроцентШиномонтажника(ДатаНачалаОтчета))*100,0);
		//ОбластьСтрокаДископравки.Параметры.СредЗаСмену = Окр(((СтрокаТаблШиномонтажа.ЗарплатаБезОкладаАлюминевые/ПолучитьПроцентДископравщикаАлюм(ДатаНачалаОтчета))*100)/СтрокаТаблШиномонтажа.КолВоСмен,0);
		//ОбластьСтрокаДископравки.Параметры.Получено = СтрокаТаблШиномонтажа.Получено;
		//ИтогПолучено=ИтогПолучено+СтрокаТаблШиномонтажа.Получено;
		//ОбластьСтрокаДископравки.Параметры.ДополучитьСОкладом=Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОкладаАлюминевые+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладДископравщика(ДатаНачалаОтчета))-СтрокаТаблШиномонтажа.Получено,0);
		//ИтогДополучитьСОкладом=ИтогДополучитьСОкладом+Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладШиномонтажника.Получить())-СтрокаТаблШиномонтажа.Получено,0);
		ОбластьСтрокаДископравки.Параметры.СданоЗаМатер = СтрокаТаблШиномонтажа.СуммаМатВычет;
		//ИтогСданоЗаМатер=ИтогСданоЗаМатер+СтрокаТаблШиномонтажа.СуммаМатВычет;
		//ОбластьСтрока.Параметры.Процент = 0;
		ТабДок.Вывести(ОбластьСтрокаДископравки);
		
		ОбластьСтрокаДископравки.Параметры.ТипДиска="Стальные";
		ОбластьСтрокаДископравки.Параметры.ПроцентТипДиска=ПолучитьПроцентДископравщикаСталь(ДатаНачалаОтчета);
		//ОбластьСтрокаДископравки.Параметры.КолСмен = СтрокаТаблШиномонтажа.КолВоСмен;
		//ИтогКолСмен=ИтогКолСмен+СтрокаТаблШиномонтажа.КолВоСмен;
		//ОбластьСтрокаДископравки.Параметры.Оклад = СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладДископравщика(ДатаНачалаОтчета);
		//ИтогОклад=ИтогОклад+СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладШиномонтажника.Получить();;
		ОбластьСтрокаДископравки.Параметры.ЗарплатаБезОклада = Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОкладаСтальные,0);
		//ИтогЗарплатаБезОклада=ИтогЗарплатаБезОклада+Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОклада,0);
		//ОбластьСтрокаДископравки.Параметры.ЗарплатаСОкладом = Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОкладаСтальные+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладДископравщика(ДатаНачалаОтчета),0);
		//ИтогЗарплатаСОкладом=ИтогЗарплатаСОкладом+Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладШиномонтажника.Получить(),0);
		//ОбластьСтрокаДископравки.Параметры.Заработано = Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОкладаСтальные/ПолучитьПроцентДископравщикаСталь(ДатаНачалаОтчета))*100,0);
		ОбластьСтрокаДископравки.Параметры.Заработано = СтрокаТаблШиномонтажа.ЗаработаноСтальные;
		//ОбластьСтрокаДископравки.Параметры.Заработано = СтрокаТаблШиномонтажа.ЗаработаноСтальные;
		//ИтогЗаработано=ИтогЗаработано+Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада/ПолучитьПроцентШиномонтажника(ДатаНачалаОтчета))*100,0);
		//ОбластьСтрокаДископравки.Параметры.СредЗаСмену = Окр(((СтрокаТаблШиномонтажа.ЗарплатаБезОкладаСтальные/ПолучитьПроцентДископравщикаСталь(ДатаНачалаОтчета))*100)/СтрокаТаблШиномонтажа.КолВоСмен,0);
		//ОбластьСтрокаДископравки.Параметры.Получено = 0;
		//ИтогПолучено=ИтогПолучено+СтрокаТаблШиномонтажа.Получено;
		//ОбластьСтрокаДископравки.Параметры.ДополучитьСОкладом=Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОкладаСтальные+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладДископравщика(ДатаНачалаОтчета))-СтрокаТаблШиномонтажа.Получено,0);
		//ИтогДополучитьСОкладом=ИтогДополучитьСОкладом+Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладШиномонтажника.Получить())-СтрокаТаблШиномонтажа.Получено,0);
		ОбластьСтрокаДископравки.Параметры.СданоЗаМатер = СтрокаТаблШиномонтажа.СуммаМатВычет;
		//ИтогСданоЗаМатер=ИтогСданоЗаМатер+СтрокаТаблШиномонтажа.СуммаМатВычет;
		//ОбластьСтрока.Параметры.Процент = 0;
		ТабДок.Вывести(ОбластьСтрокаДископравки);
		
		
	КонецЦикла;
	
	ОбластьСтрокаИтог = Макет.ПолучитьОбласть("СтрокаИтог");
	ОбластьСтрокаИтог.Параметры.ИтогЗаработано=ИтогЗаработано;
	ОбластьСтрокаИтог.Параметры.ИтогКолСмен=ИтогКолСмен;
	ОбластьСтрокаИтог.Параметры.ИтогЗарплатаБезОклада=ИтогЗарплатаБезОклада;
	ОбластьСтрокаИтог.Параметры.ИтогОклад=ИтогОклад;
	ОбластьСтрокаИтог.Параметры.ИтогЗарплатаСОкладом=ИтогЗарплатаСОкладом;
	ОбластьСтрокаИтог.Параметры.ИтогПолучено=ИтогПолучено;
	ОбластьСтрокаИтог.Параметры.ИтогДополучитьСОкладом=ИтогДополучитьСОкладом;
	ОбластьСтрокаИтог.Параметры.ИтогСданоЗаМатер=ИтогСданоЗаМатер;
	ОбластьСтрокаИтог.Параметры.ИтогНедостачиПоМатер=ИтогНедостачиПоМатер;
	ОбластьСтрокаИтог.Параметры.ИтогНалоги=ИтогНалоги;
	ОбластьСтрокаИтог.Параметры.ИтогВсегоУдержано=ИтогВсегоУдержано;
	ОбластьСтрокаИтог.Параметры.ИтогКВыплатеСОкладом=ИтогКВыплатеСОкладом;
	ТабДок.Вывести(ОбластьСтрокаИтог);
	
	ВсегоИтогЗаработано=ВсегоИтогЗаработано+ИтогЗаработано;
	ВсегоИтогКолСмен=ВсегоИтогКолСмен+ИтогКолСмен;
	ВсегоИтогЗарплатаБезОклада=ВсегоИтогЗарплатаБезОклада+ИтогЗарплатаБезОклада;
	ВсегоИтогОклад=ВсегоИтогОклад+ИтогОклад;
	ВсегоИтогЗарплатаСОкладом=ВсегоИтогЗарплатаСОкладом+ИтогЗарплатаСОкладом;
	ВсегоИтогПолучено=ВсегоИтогПолучено+ИтогПолучено;
	ВсегоИтогДополучитьСОкладом=ВсегоИтогДополучитьСОкладом+ИтогДополучитьСОкладом;
	ВсегоИтогСданоЗаМатер=ВсегоИтогСданоЗаМатер+ИтогСданоЗаМатер;
	ВсегоИтогНедостачиПоМатер=ВсегоИтогНедостачиПоМатер+ИтогНедостачиПоМатер;
	ВсегоИтогНалоги=ВсегоИтогНалоги+ИтогНалоги;
	ВсегоИтогВсегоУдержано=ВсегоИтогВсегоУдержано+ИтогВсегоУдержано;
	ВсегоИтогКВыплатеСОкладом=ВсегоИтогКВыплатеСОкладом+ИтогКВыплатеСОкладом;
	
	ОбластьСтрокаИтог = Макет.ПолучитьОбласть("СтрокаВсего");
	ОбластьСтрокаИтог.Параметры.ИтогЗаработано=ВсегоИтогЗаработано;
	ОбластьСтрокаИтог.Параметры.ИтогКолСмен=0;
	ОбластьСтрокаИтог.Параметры.ИтогЗарплатаБезОклада=ВсегоИтогЗарплатаБезОклада;
	ОбластьСтрокаИтог.Параметры.ИтогОклад=ВсегоИтогОклад;
	ОбластьСтрокаИтог.Параметры.ИтогЗарплатаСОкладом=ВсегоИтогЗарплатаСОкладом;
	ОбластьСтрокаИтог.Параметры.ИтогПолучено=ВсегоИтогПолучено;
	ОбластьСтрокаИтог.Параметры.ИтогДополучитьСОкладом=ВсегоИтогДополучитьСОкладом;
	ОбластьСтрокаИтог.Параметры.ИтогСданоЗаМатер=ВсегоИтогСданоЗаМатер;
	ОбластьСтрокаИтог.Параметры.ИтогНедостачиПоМатер=ВсегоИтогНедостачиПоМатер;
	ОбластьСтрокаИтог.Параметры.ИтогНалоги=ВсегоИтогНалоги;
	ОбластьСтрокаИтог.Параметры.ИтогВсегоУдержано=ВсегоИтогВсегоУдержано;
	ОбластьСтрокаИтог.Параметры.ИтогКВыплатеСОкладом=ВсегоИтогКВыплатеСОкладом;
	ТабДок.Вывести(ОбоастьСтрокаПробела);
	ТабДок.Вывести(ОбластьСтрокаИтог);
	
	Возврат ТабДок;
	
КонецФункции

Функция ПолучитьТабДокОтчетБухгалтераПомощники()
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Черновик_Помощники";
	Макет = ПолучитьМакетОтчетаБухгалтераПомощники();
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Шапка");
	ОбластьЗаголовок.Параметры.ДатаНачалаОтчета=ДатаНачалаОтчета;
	ОбластьЗаголовок.Параметры.ДатаОкончанияОтчета=ДатаОкончанияОтчета;
	ТабДок.Вывести(ОбластьЗаголовок);
	
	ОбоастьСтрокаПробела = Макет.ПолучитьОбласть("СтрокаПробела");
	ОбластьСтрокаДископравки = Макет.ПолучитьОбласть("СтрокаДископравка");
	ТабДок.Вывести(ОбоастьСтрокаПробела);
	
	ОбластьЗаголовокШиномонтаж = Макет.ПолучитьОбласть("ЗаголовокШиномонтаж");
	ТабДок.Вывести(ОбластьЗаголовокШиномонтаж);
	
	ТаблШиномонтажа = Новый ТаблицаЗначений;
	ТаблШиномонтажа.Колонки.Добавить("ФИО");
	ТаблШиномонтажа.Колонки.Добавить("КолВоСмен");
	ТаблШиномонтажа.Колонки.Добавить("ЗарплатаБезОклада");
	ТаблШиномонтажа.Колонки.Добавить("Получено");
	ТаблШиномонтажа.Колонки.Добавить("СуммаМатВычет");
	ТаблШиномонтажа.Колонки.Добавить("Заработано");
	
	СписокРеализацийШиномонтаж = Новый СписокЗначений;
	
	ТаблСъема = Новый ТаблицаЗначений;
	ТаблСъема.Колонки.Добавить("ФИО");
	ТаблСъема.Колонки.Добавить("КолВоСмен");
	ТаблСъема.Колонки.Добавить("ЗарплатаБезОклада");
	ТаблСъема.Колонки.Добавить("Получено");
	ТаблСъема.Колонки.Добавить("СуммаМатВычет");
	ТаблСъема.Колонки.Добавить("Заработано");
	
	СписокРеализацийСъем = Новый СписокЗначений;
	
	ТаблДископравка = Новый ТаблицаЗначений;
	ТаблДископравка.Колонки.Добавить("ФИО");
	ТаблДископравка.Колонки.Добавить("КолВоСмен");
	ТаблДископравка.Колонки.Добавить("ЗарплатаБезОклада");
	ТаблДископравка.Колонки.Добавить("Получено");
	ТаблДископравка.Колонки.Добавить("СуммаМатВычет");
	ТаблДископравка.Колонки.Добавить("ЗарплатаБезОкладаАлюминевые");
	ТаблДископравка.Колонки.Добавить("ЗарплатаБезОкладаСтальные");
	ТаблДископравка.Колонки.Добавить("ЗаработаноАлюминевые");
	ТаблДископравка.Колонки.Добавить("ЗаработаноСтальные");
	
	СписокРеализацийДископравкаАлюминевые = Новый СписокЗначений;
	СписокРеализацийДископравкаСтальные = Новый СписокЗначений;
	
	СписокРеализацийМатериалы = Новый СписокЗначений;
	
	ТаблСмен = новый ТаблицаЗначений;
	ТаблСмен.Колонки.Добавить("ФИО");
	ТаблСмен.Колонки.Добавить("ДатаСмены");
	ТаблСмен.Колонки.Добавить("КолВоСмен");
	
	ТаблСменСъем = новый ТаблицаЗначений;
	ТаблСменСъем.Колонки.Добавить("ФИО");
	ТаблСменСъем.Колонки.Добавить("ДатаСмены");
	ТаблСменСъем.Колонки.Добавить("КолВоСмен");
	
	ТаблСменДискоравка = новый ТаблицаЗначений;
	ТаблСменДискоравка.Колонки.Добавить("ФИО");
	ТаблСменДискоравка.Колонки.Добавить("ДатаСмены");
	ТаблСменДискоравка.Колонки.Добавить("КолВоСмен");
	
	ДатаСбораЗарплатыБезОклада=Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_Смены.Период КАК Период,
		|	ШМ_Смены.ИмяКомпьютера КАК ИмяКомпьютера
		|ИЗ
		|	РегистрСведений.ШМ_Смены КАК ШМ_Смены
		|ГДЕ
		|	ШМ_Смены.ИмяКомпьютера = &ИмяКомпьютера
		|	И ШМ_Смены.Период МЕЖДУ &НачалоПериода И &КонецПериода";
	
	Запрос.УстановитьПараметр("ИмяКомпьютера", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ДатаНачалаОтчета));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ДатаОкончанияОтчета));
	
	Выборка = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаВыборка из Выборка Цикл
		ДатаСбораЗарплатыБезОклада=СтрокаВыборка.Период;
		Прервать;
	КонецЦикла;
	
	Если ДатаСбораЗарплатыБезОклада=Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_Бригады.Период КАК Период,
		|	ШМ_Бригады.Должность КАК Должность,
		|	ШМ_Бригады.Помощник КАК Помощник,
		|	ШМ_Бригады.ИмяКомпьютера КАК ИмяКомпьютера,
		|	ШМ_Бригады.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ШМ_Бригады КАК ШМ_Бригады
		|ГДЕ
		|	ШМ_Бригады.ИмяКомпьютера = &ИмяКомпьютера
		|	И ШМ_Бригады.Помощник = ИСТИНА
		|	И ШМ_Бригады.Период МЕЖДУ &НачалоПериода И &КонецПериода";  
	
	Запрос.УстановитьПараметр("ИмяКомпьютера", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование);
	Запрос.УстановитьПараметр("НачалоПериода", ДатаСбораЗарплатыБезОклада);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ДатаОкончанияОтчета));

	Выборка = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаВыборка из Выборка Цикл
		Если СтрокаВыборка.Должность.Наименование="Шиномонтажник" Тогда
				СтрокаТаблСмен = ТаблСмен.Добавить();
				СтрокаТаблСмен.ФИО = СтрокаВыборка.Сотрудник;
				СтрокаТаблСмен.ДатаСмены = НачалоДня(СтрокаВыборка.Период);
				СтрокаТаблСмен.КолВоСмен = 1;
		ИначеЕсли СтрокаВыборка.Должность.Наименование="Съемщик" Тогда
				СтрокаТаблСменСъем = ТаблСменСъем.Добавить();
				СтрокаТаблСменСъем.ФИО = СтрокаВыборка.Сотрудник;
				СтрокаТаблСменСъем.ДатаСмены = НачалоДня(СтрокаВыборка.Период);
				СтрокаТаблСменСъем.КолВоСмен = 1;
		ИначеЕсли СтрокаВыборка.Должность.Наименование="Правщик дисков" Тогда
				СтрокаТаблСменДискоравка = ТаблСменДискоравка.Добавить();
				СтрокаТаблСменДискоравка.ФИО = СтрокаВыборка.Сотрудник;
				СтрокаТаблСменДискоравка.ДатаСмены = НачалоДня(СтрокаВыборка.Период);
				СтрокаТаблСменДискоравка.КолВоСмен = 1;
		КонецЕсли;
	КонецЦикла;
	
	//Если (ТаблСмен.Количество()=0) И (ТаблСменСъем.Количество()=0) И (ТаблСмен.ТаблСменДискоравка()=0) Тогда
	Если (ТаблСмен.Количество()=0) И (ТаблСменСъем.Количество()=0) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблСмен.Свернуть("ФИО,ДатаСмены","КолВоСмен");
	Для Каждого СтрокаТаблСмен Из ТаблСмен Цикл;
		СтрокаТаблСмен.КолВоСмен=1;
	КонецЦикла;
	ТаблСмен.Свернуть("ФИО","КолВоСмен");
	
	Для Каждого СтрокаТаблСмен Из ТаблСмен Цикл;
		СтрокаТаблШиномонтажа = ТаблШиномонтажа.Добавить();
		СтрокаТаблШиномонтажа.ФИО = СтрокаТаблСмен.ФИО;
		СтрокаТаблШиномонтажа.КолВоСмен = СтрокаТаблСмен.КолВоСмен;
		СтрокаТаблШиномонтажа.ЗарплатаБезОклада = 0;
		СтрокаТаблШиномонтажа.Получено = 0;
		СтрокаТаблШиномонтажа.СуммаМатВычет = 0;
	КонецЦикла;
	
	ТаблСменСъем.Свернуть("ФИО,ДатаСмены","КолВоСмен");
	Для Каждого СтрокаТаблСменСъем Из ТаблСменСъем Цикл;
		СтрокаТаблСменСъем.КолВоСмен=1;
	КонецЦикла;
	ТаблСменСъем.Свернуть("ФИО","КолВоСмен");
	
	Для Каждого СтрокаТаблСменСъем Из ТаблСменСъем Цикл;
		СтрокаТаблСъема = ТаблСъема.Добавить();
		СтрокаТаблСъема.ФИО = СтрокаТаблСменСъем.ФИО;
		СтрокаТаблСъема.КолВоСмен = СтрокаТаблСменСъем.КолВоСмен;
		СтрокаТаблСъема.ЗарплатаБезОклада = 0;
		СтрокаТаблСъема.Получено = 0;
		СтрокаТаблСъема.СуммаМатВычет = 0;
	КонецЦикла;
	
	ТаблСменДискоравка.Свернуть("ФИО,ДатаСмены","КолВоСмен");
	Для Каждого СтрокаТаблСменДискоравка Из ТаблСменДискоравка Цикл;
		СтрокаТаблСменДискоравка.КолВоСмен=1;
	КонецЦикла;
	ТаблСменДискоравка.Свернуть("ФИО","КолВоСмен");
	
	Для Каждого СтрокаТаблСменДискоравка Из ТаблСменДискоравка Цикл;
		СтрокаТаблДископравка = ТаблДископравка.Добавить();
		СтрокаТаблДископравка.ФИО = СтрокаТаблСменДискоравка.ФИО;
		СтрокаТаблДископравка.КолВоСмен = СтрокаТаблСменДискоравка.КолВоСмен;
		СтрокаТаблДископравка.ЗарплатаБезОклада = 0;
		СтрокаТаблДископравка.Получено = 0;
		СтрокаТаблДископравка.СуммаМатВычет = 0;
		СтрокаТаблДископравка.ЗарплатаБезОкладаАлюминевые = 0;
		СтрокаТаблДископравка.ЗарплатаБезОкладаСтальные = 0;
		СтрокаТаблДископравка.ЗаработаноСтальные = 0;
		СтрокаТаблДископравка.ЗаработаноАлюминевые = 0;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_ИсполнителиРабот.Реализация КАК Реализация,
		|	ШМ_ИсполнителиРабот.Номенклатура КАК Номенклатура,
		|	ШМ_ИсполнителиРабот.Исполнитель КАК Исполнитель,
		|	ШМ_ИсполнителиРабот.Помощник КАК Помощник,
		|	ШМ_ИсполнителиРабот.Сумма КАК Сумма
		|ИЗ
		|	РегистрСведений.ШМ_ИсполнителиРабот КАК ШМ_ИсполнителиРабот
		|ГДЕ
		|	ШМ_ИсполнителиРабот.Реализация.Дата МЕЖДУ &НачалоПеирода И &КонецПериода
		|	И ШМ_ИсполнителиРабот.Помощник = ИСТИНА";
	
	Запрос.УстановитьПараметр("НачалоПеирода", ДатаСбораЗарплатыБезОклада); 
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ДатаОкончанияОтчета));
	
	Выборка = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаВыборка из Выборка Цикл
		
		НаборНомПроф=РегистрыСведений.ШМ_НоменклатураПрофессии.СоздатьНаборЗаписей();
		НаборНомПроф.Отбор.Номенклатура.Установить(СтрокаВыборка.Номенклатура,Истина);
		НаборНомПроф.Прочитать();
		Для Каждого СтрНаборНомПроф Из НаборНомПроф Цикл
			Если СтрНаборНомПроф.Профессия=Справочники.ШМ_Должности.НайтиПоНаименованию("Шиномонтажник") Тогда
				
				Для Каждого СтрокаТаблШиномонтажа Из ТаблШиномонтажа Цикл
					Если СтрокаТаблШиномонтажа.ФИО=СтрокаВыборка.Исполнитель Тогда
					Если СотрудникНаСмене(СтрокаВыборка.Исполнитель,СтрокаВыборка.Реализация.Дата) Тогда
						СтрокаТаблШиномонтажа.ЗарплатаБезОклада=СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаВыборка.Сумма;
						Если СписокРеализацийШиномонтаж.НайтиПоЗначению(СтрокаВыборка.Реализация) = Неопределено Тогда
							СписокРеализацийШиномонтаж.Добавить(СтрокаВыборка.Реализация);
							Попытка
								СтрокаТаблШиномонтажа.Заработано=СтрокаТаблШиномонтажа.Заработано+СтрокаВыборка.Реализация.СуммаШиномонтажЧерновик;
							Исключение
								СтрокаТаблШиномонтажа.Заработано=СтрокаВыборка.Реализация.СуммаШиномонтажЧерновик;
							КонецПопытки;
							Попытка
								СтрокаТаблШиномонтажа.СуммаМатВычет=СтрокаТаблШиномонтажа.СуммаМатВычет+СтрокаВыборка.Реализация.СуммаМатВычет;
							Исключение
								СтрокаТаблШиномонтажа.СуммаМатВычет=СтрокаВыборка.Реализация.СуммаМатВычет;
							КонецПопытки;	
						КонецЕсли;
						Если СписокРеализацийМатериалы.НайтиПоЗначению(СтрокаВыборка.Реализация) = Неопределено Тогда
							СписокРеализацийМатериалы.Добавить(СтрокаВыборка.Реализация);
						КонецЕсли;
					КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли СтрНаборНомПроф.Профессия=Справочники.ШМ_Должности.НайтиПоНаименованию("Съемщик") Тогда
				
				Для Каждого СтрокаТаблСъема Из ТаблСъема Цикл
					Если СтрокаТаблСъема.ФИО=СтрокаВыборка.Исполнитель Тогда
					Если СотрудникНаСмене(СтрокаВыборка.Исполнитель,СтрокаВыборка.Реализация.Дата) Тогда
						СтрокаТаблСъема.ЗарплатаБезОклада=СтрокаТаблСъема.ЗарплатаБезОклада+СтрокаВыборка.Сумма;
						СтрокаТаблСъема.СуммаМатВычет=0;
						Если СписокРеализацийСъем.НайтиПоЗначению(СтрокаВыборка.Реализация) = Неопределено Тогда
							СписокРеализацийСъем.Добавить(СтрокаВыборка.Реализация);
							Попытка
								СтрокаТаблСъема.Заработано=СтрокаТаблСъема.Заработано+СтрокаВыборка.Реализация.СуммаСъемЧерновик;
							Исключение
								СтрокаТаблСъема.Заработано=СтрокаВыборка.Реализация.СуммаСъемЧерновик;
							КонецПопытки;
						КонецЕсли;
						Если СписокРеализацийМатериалы.НайтиПоЗначению(СтрокаВыборка.Реализация) = Неопределено Тогда
							СписокРеализацийМатериалы.Добавить(СтрокаВыборка.Реализация);
						КонецЕсли;
					КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли СтрНаборНомПроф.Профессия=Справочники.ШМ_Должности.НайтиПоНаименованию("Правщик дисков") Тогда
				
				Для Каждого СтрокаТаблДископравка Из ТаблДископравка Цикл
					Если СтрокаТаблДископравка.ФИО=СтрокаВыборка.Исполнитель Тогда
					Если СотрудникНаСмене(СтрокаВыборка.Исполнитель,СтрокаВыборка.Реализация.Дата) Тогда
						Если СтрНаборНомПроф.Дископравка=Перечисления.ШМ_Дископравка.Стальной Тогда
							СтрокаТаблДископравка.ЗарплатаБезОклада=СтрокаТаблДископравка.ЗарплатаБезОклада+СтрокаВыборка.Сумма;
							СтрокаТаблДископравка.ЗарплатаБезОкладаСтальные=СтрокаТаблДископравка.ЗарплатаБезОкладаСтальные+СтрокаВыборка.Сумма;
							Если СписокРеализацийДископравкаСтальные.НайтиПоЗначению(СтрокаВыборка.Реализация) = Неопределено Тогда
								СписокРеализацийДископравкаСтальные.Добавить(СтрокаВыборка.Реализация);
								Попытка
									СтрокаТаблДископравка.ЗаработаноСтальные=СтрокаТаблДископравка.ЗаработаноСтальные+СтрокаВыборка.Реализация.СуммаДископравкаЧерновик;
								Исключение
									СтрокаТаблДископравка.ЗаработаноСтальные=СтрокаВыборка.Реализация.СуммаДископравкаЧерновик;
								КонецПопытки;
							КонецЕсли;
							Если СписокРеализацийМатериалы.НайтиПоЗначению(СтрокаВыборка.Реализация) = Неопределено Тогда
								СписокРеализацийМатериалы.Добавить(СтрокаВыборка.Реализация);
							КонецЕсли;
						ИначеЕсли СтрНаборНомПроф.Дископравка=Перечисления.ШМ_Дископравка.Лекгосплавный Тогда
							СтрокаТаблДископравка.ЗарплатаБезОклада=СтрокаТаблДископравка.ЗарплатаБезОклада+СтрокаВыборка.Сумма;
							СтрокаТаблДископравка.ЗарплатаБезОкладаАлюминевые=СтрокаТаблДископравка.ЗарплатаБезОкладаАлюминевые+СтрокаВыборка.Сумма;
							Если СписокРеализацийДископравкаАлюминевые.НайтиПоЗначению(СтрокаВыборка.Реализация) = Неопределено Тогда
								СписокРеализацийДископравкаАлюминевые.Добавить(СтрокаВыборка.Реализация);
								Попытка
									СтрокаТаблДископравка.ЗаработаноАлюминевые=СтрокаТаблДископравка.ЗаработаноАлюминевые+СтрокаВыборка.Реализация.СуммаДископравкаЧерновик;
								Исключение
									СтрокаТаблДископравка.ЗаработаноАлюминевые=СтрокаВыборка.Реализация.СуммаДископравкаЧерновик;
								КонецПопытки;
							КонецЕсли;
							Если СписокРеализацийМатериалы.НайтиПоЗначению(СтрокаВыборка.Реализация) = Неопределено Тогда
								СписокРеализацийМатериалы.Добавить(СтрокаВыборка.Реализация);
							КонецЕсли;
						КонецЕсли;
						СтрокаТаблДископравка.СуммаМатВычет=0;
					КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_Затраты.Период КАК Период,
		|	ШМ_Затраты.Сотрудник КАК Сотрудник,
		|	ШМ_Затраты.Профессия КАК Профессия,
		|	ШМ_Затраты.Сумма КАК Сумма
		|ИЗ
		|	РегистрСведений.ШМ_Затраты КАК ШМ_Затраты
		|ГДЕ
		|	ШМ_Затраты.Период МЕЖДУ &НачалоПериода И &КонецПериода";
	
	Запрос.УстановитьПараметр("НачалоПериода", ДатаСбораЗарплатыБезОклада);   
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ДатаОкончанияОтчета));
	
	Выборка = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаВыборка из Выборка Цикл

		Если СтрокаВыборка.Профессия.Наименование="Шиномонтажник" Тогда
			
		Для Каждого СтрокаТаблШиномонтажа Из ТаблШиномонтажа Цикл
			Если СтрокаТаблШиномонтажа.ФИО=СтрокаВыборка.Сотрудник Тогда
			Если СотрудникЯвляетсяПомощником(СтрокаВыборка.Сотрудник,СтрокаВыборка.Период) Тогда
				СтрокаТаблШиномонтажа.Получено=СтрокаТаблШиномонтажа.Получено+СтрокаВыборка.Сумма;
			КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		КонецЕсли;
	
		Если СтрокаВыборка.Профессия.Наименование="Съемщик" Тогда
			
		Для Каждого СтрокаТаблСъема Из ТаблСъема Цикл
			Если СтрокаТаблСъема.ФИО=СтрокаВыборка.Сотрудник Тогда
			Если СотрудникЯвляетсяПомощником(СтрокаВыборка.Сотрудник,СтрокаВыборка.Период) Тогда
				СтрокаТаблСъема.Получено=СтрокаТаблСъема.Получено+СтрокаВыборка.Сумма;
			КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		КонецЕсли;
	
	    Если СтрокаВыборка.Профессия.Наименование="Правщик дисков" Тогда
			
		Для Каждого СтрокаТаблДископравка Из ТаблДископравка Цикл
			Если СтрокаТаблДископравка.ФИО=СтрокаВыборка.Сотрудник Тогда
			Если СотрудникЯвляетсяПомощником(СтрокаВыборка.Сотрудник,СтрокаВыборка.Период) Тогда
				СтрокаТаблДископравка.Получено=СтрокаТаблДископравка.Получено+СтрокаВыборка.Сумма;
			КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		КонецЕсли;
		
	КонецЦикла;
	
	ВсегоИтогЗаработано=0;
	ВсегоИтогКолСмен=0;
	ВсегоИтогЗарплатаБезОклада=0;
	ВсегоИтогОклад=0;
	ВсегоИтогЗарплатаСОкладом=0;
	ВсегоИтогПолучено=0;
	ВсегоИтогДополучитьСОкладом=0;
	ВсегоИтогСданоЗаМатер=0;
	ВсегоИтогНедостачиПоМатер=0;
	ВсегоИтогНалоги=0;
	ВсегоИтогВсегоУдержано=0;
	ВсегоИтогКВыплатеСОкладом=0;
	
	ИтогЗаработано=0;
	ИтогКолСмен=0;
	ИтогЗарплатаБезОклада=0;
	ИтогОклад=0;
	ИтогЗарплатаСОкладом=0;
	ИтогПолучено=0;
	ИтогДополучитьСОкладом=0;
	ИтогСданоЗаМатер=0;
	ИтогНедостачиПоМатер=0;
	ИтогНалоги=0;
	ИтогВсегоУдержано=0;
	ИтогКВыплатеСОкладом=0;
	
	КолСтрокШ=0;
	Для Каждого СтрокаТаблШиномонтажа Из ТаблШиномонтажа Цикл
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		КолСтрокШ=КолСтрокШ+1;
		ОбластьСтрока.Параметры.НомерПП = КолСтрокШ;
		ОбластьСтрока.Параметры.ФИО = СтрокаТаблШиномонтажа.ФИО;
		ОбластьСтрока.Параметры.КолСмен = СтрокаТаблШиномонтажа.КолВоСмен;
		ИтогКолСмен=ИтогКолСмен+СтрокаТаблШиномонтажа.КолВоСмен;
		//ОбластьСтрока.Параметры.Оклад = СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладШиномонтажника.Получить();
		//ОбластьСтрока.Параметры.Оклад = СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладШиномонтажника(ДатаНачалаОтчета);
		//ИтогОклад=ИтогОклад+СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладШиномонтажника.Получить();
		ИтогОклад=ИтогОклад+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладШиномонтажника(ДатаНачалаОтчета);
		ОбластьСтрока.Параметры.ЗарплатаБезОклада = Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОклада,0);
		ИтогЗарплатаБезОклада=ИтогЗарплатаБезОклада+Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОклада,0);
		//ОбластьСтрока.Параметры.ЗарплатаСОкладом = Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладШиномонтажника.Получить(),0);
		//ОбластьСтрока.Параметры.ЗарплатаСОкладом = Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладШиномонтажника(ДатаНачалаОтчета),0);
		//ИтогЗарплатаСОкладом=ИтогЗарплатаСОкладом+Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладШиномонтажника.Получить(),0);
		ИтогЗарплатаСОкладом=ИтогЗарплатаСОкладом+Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладШиномонтажника(ДатаНачалаОтчета),0);
		//ОбластьСтрока.Параметры.Заработано = Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада/ПолучитьПроцентШиномонтажника(ДатаНачалаОтчета))*100,0);
		ОбластьСтрока.Параметры.Заработано = СтрокаТаблШиномонтажа.Заработано;
		//ИтогЗаработано=ИтогЗаработано+Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада/ПолучитьПроцентШиномонтажника(ДатаНачалаОтчета))*100,0);
		Попытка
			ИтогЗаработано=ИтогЗаработано+СтрокаТаблШиномонтажа.Заработано;
		Исключение
		КонецПопытки;
		ОбластьСтрока.Параметры.СредЗаСмену = Окр(((СтрокаТаблШиномонтажа.ЗарплатаБезОклада/ПолучитьПроцентШиномонтажника(ДатаНачалаОтчета))*100)/СтрокаТаблШиномонтажа.КолВоСмен,0);
		ОбластьСтрока.Параметры.Получено = СтрокаТаблШиномонтажа.Получено;
		ИтогПолучено=ИтогПолучено+СтрокаТаблШиномонтажа.Получено;
		//ОбластьСтрока.Параметры.ДополучитьСОкладом=Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладШиномонтажника.Получить())-СтрокаТаблШиномонтажа.Получено,0);
		ОбластьСтрока.Параметры.ДополучитьСОкладом=Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладШиномонтажника(ДатаНачалаОтчета))-СтрокаТаблШиномонтажа.Получено,0);
		//ИтогДополучитьСОкладом=ИтогДополучитьСОкладом+Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладШиномонтажника.Получить())-СтрокаТаблШиномонтажа.Получено,0);
		ИтогДополучитьСОкладом=ИтогДополучитьСОкладом+Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладШиномонтажника(ДатаНачалаОтчета))-СтрокаТаблШиномонтажа.Получено,0);
		МатВыч=0;
		//Для СчМат=0 По (СписокРеализацийМатериалы.Количество()-1) Цикл
		//	МатВыч=МатВыч+СписокРеализацийМатериалы.Получить(СчМат).Значение.СуммаМатВычет;
		//КонецЦикла;
		//ВыбРеал=Документы.РеализацияТоваровУслуг.Выбрать(НачалоДня(ДатаСбораЗарплатыБезОклада),КонецДня(ДатаСбораЗарплатыБезОклада));
		ВыбРеал=Документы.РеализацияТоваровУслуг.Выбрать(НачалоДня(ДатаНачалаОтчета),КонецДня(ДатаОкончанияОтчета));
		Пока ВыбРеал.Следующий() Цикл
			Если ВыбРеал.Проведен=Ложь Тогда
				Продолжить;
			КонецЕсли;
			Если ВыбРеал.Комментарий = "Материалы" Тогда
				Продолжить;
			КонецЕсли;
			    МатВыч=МатВыч+ВыбРеал.СуммаМатВычет;
		КонецЦикла;
		//ОбластьСтрока.Параметры.СданоЗаМатер = СтрокаТаблШиномонтажа.СуммаМатВычет;
		//ИтогСданоЗаМатер=ИтогСданоЗаМатер+СтрокаТаблШиномонтажа.СуммаМатВычет;
		//ОбластьСтрока.Параметры.СданоЗаМатер = МатВыч;
		ИтогСданоЗаМатер=ИтогСданоЗаМатер+МатВыч;
		//ОбластьСтрока.Параметры.Процент = ПолучитьПроцентШиномонтажника(ДатаНачалаОтчета);
		
		Налог=0;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_Налоги.Должность КАК Должность,
		|	ШМ_Налоги.Период КАК Период,
		|	ШМ_Налоги.Налог КАК Налог,
		|	ШМ_Налоги.ДископравныйТип КАК ДископравныйТип,
		|	ШМ_Налоги.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ШМ_Налоги КАК ШМ_Налоги
		|ГДЕ
		|	ШМ_Налоги.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ШМ_Налоги.Должность.Наименование = ""Шиномонтажник""
		|	И ШМ_Налоги.Сотрудник = &Сотрудник";
	
		Запрос.УстановитьПараметр("НачалоПериода", ДатаСбораЗарплатыБезОклада); 
		Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ДатаСбораЗарплатыБезОклада));
		Запрос.УстановитьПараметр("Сотрудник", СтрокаТаблШиномонтажа.ФИО);

	
		ВыборкаНалог = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаВыборка из ВыборкаНалог Цикл
			Налог=Налог+СтрокаВыборка.Налог;
		КонецЦикла;
		ИтогНалоги=ИтогНалоги+Налог;
		
		НедостачаМат=0;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_Налоги.Должность КАК Должность,
		|	ШМ_Налоги.Период КАК Период,
		|	ШМ_Налоги.Недостача КАК Недостача,
		|	ШМ_Налоги.ДископравныйТип КАК ДископравныйТип,
		|	ШМ_Налоги.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ШМ_НедостачиМатериалов КАК ШМ_Налоги
		|ГДЕ
		|	ШМ_Налоги.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ШМ_Налоги.Должность.Наименование = ""Шиномонтажник""
		|	И ШМ_Налоги.Сотрудник = &Сотрудник";
	
		Запрос.УстановитьПараметр("НачалоПериода", ДатаСбораЗарплатыБезОклада); 
		Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ДатаСбораЗарплатыБезОклада));
		Запрос.УстановитьПараметр("Сотрудник", СтрокаТаблШиномонтажа.ФИО);
	
		ВыборкаНедостач = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаВыборка из ВыборкаНедостач Цикл
			НедостачаМат=НедостачаМат+СтрокаВыборка.Недостача;
		КонецЦикла;
		//ОбластьСтрока.Параметры.НедостачиПоМатер = НедостачаМат;
		ИтогНедостачиПоМатер=ИтогНедостачиПоМатер+НедостачаМат;
		
		//ОбластьСтрока.Параметры.ВсегоУдержано = Налог + НедостачаМат;
		ИтогВсегоУдержано=ИтогВсегоУдержано+Налог + НедостачаМат;
		//ОбластьСтрока.Параметры.КВыплатеСОкладом = Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладШиномонтажника.Получить())-СтрокаТаблШиномонтажа.Получено,0)-(Налог + НедостачаМат);
		ОбластьСтрока.Параметры.КВыплатеСОкладом = Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладШиномонтажника(ДатаНачалаОтчета))-СтрокаТаблШиномонтажа.Получено,0)-(Налог + НедостачаМат);
		//ИтогКВыплатеСОкладом=ИтогКВыплатеСОкладом+Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*Константы.ШМ_СменныйОкладШиномонтажника.Получить())-СтрокаТаблШиномонтажа.Получено,0)-(Налог + НедостачаМат);
		ИтогКВыплатеСОкладом=ИтогКВыплатеСОкладом+Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладШиномонтажника(ДатаНачалаОтчета))-СтрокаТаблШиномонтажа.Получено,0)-(Налог + НедостачаМат);
		
		ТабДок.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	ОбластьСтрокаИтог = Макет.ПолучитьОбласть("СтрокаИтог");
	ОбластьСтрокаИтог.Параметры.ИтогЗаработано=ИтогЗаработано;
	ОбластьСтрокаИтог.Параметры.ИтогКолСмен=ИтогКолСмен;
	ОбластьСтрокаИтог.Параметры.ИтогЗарплатаБезОклада=ИтогЗарплатаБезОклада;

	ОбластьСтрокаИтог.Параметры.ИтогПолучено=ИтогПолучено;
	ОбластьСтрокаИтог.Параметры.ИтогДополучитьСОкладом=ИтогДополучитьСОкладом;
	
	ОбластьСтрокаИтог.Параметры.ИтогКВыплатеСОкладом=ИтогКВыплатеСОкладом;

	ТабДок.Вывести(ОбластьСтрокаИтог);
	
	ВсегоИтогЗаработано=ВсегоИтогЗаработано+ИтогЗаработано;
	ВсегоИтогКолСмен=ВсегоИтогКолСмен+ИтогКолСмен;
	ВсегоИтогЗарплатаБезОклада=ВсегоИтогЗарплатаБезОклада+ИтогЗарплатаБезОклада;
	ВсегоИтогОклад=ВсегоИтогОклад+ИтогОклад;
	ВсегоИтогЗарплатаСОкладом=ВсегоИтогЗарплатаСОкладом+ИтогЗарплатаСОкладом;
	ВсегоИтогПолучено=ВсегоИтогПолучено+ИтогПолучено;
	ВсегоИтогДополучитьСОкладом=ВсегоИтогДополучитьСОкладом+ИтогДополучитьСОкладом;
	ВсегоИтогСданоЗаМатер=ВсегоИтогСданоЗаМатер+ИтогСданоЗаМатер;
	ВсегоИтогНедостачиПоМатер=ВсегоИтогНедостачиПоМатер+ИтогНедостачиПоМатер;
	ВсегоИтогНалоги=ВсегоИтогНалоги+ИтогНалоги;
	ВсегоИтогВсегоУдержано=ВсегоИтогВсегоУдержано+ИтогВсегоУдержано;
	ВсегоИтогКВыплатеСОкладом=ВсегоИтогКВыплатеСОкладом+ИтогКВыплатеСОкладом;
	
	ТабДок.Вывести(ОбоастьСтрокаПробела);
	ОбластьЗаголовокСъем = Макет.ПолучитьОбласть("ЗаголовокСъем");
	ТабДок.Вывести(ОбластьЗаголовокСъем);
	
	ИтогЗаработано=0;
	ИтогКолСмен=0;
	ИтогЗарплатаБезОклада=0;
	ИтогОклад=0;
	ИтогЗарплатаСОкладом=0;
	ИтогПолучено=0;
	ИтогДополучитьСОкладом=0;
	ИтогСданоЗаМатер=0;
	ИтогНедостачиПоМатер=0;
	ИтогНалоги=0;
	ИтогВсегоУдержано=0;
	ИтогКВыплатеСОкладом=0;
	
	КолСтрокШ=0;
	Для Каждого СтрокаТаблШиномонтажа Из ТаблСъема Цикл
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		КолСтрокШ=КолСтрокШ+1;
		ОбластьСтрока.Параметры.НомерПП = КолСтрокШ;
		ОбластьСтрока.Параметры.ФИО = СтрокаТаблШиномонтажа.ФИО;
		ОбластьСтрока.Параметры.КолСмен = СтрокаТаблШиномонтажа.КолВоСмен;
		ИтогКолСмен=ИтогКолСмен+СтрокаТаблШиномонтажа.КолВоСмен;

		ИтогОклад=ИтогОклад+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладСъемщика(ДатаНачалаОтчета);
		ОбластьСтрока.Параметры.ЗарплатаБезОклада = Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОклада,0);
		ИтогЗарплатаБезОклада=ИтогЗарплатаБезОклада+Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОклада,0);
		
		ИтогЗарплатаСОкладом=ИтогЗарплатаСОкладом+Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладСъемщика(ДатаНачалаОтчета),0);
		
		ОбластьСтрока.Параметры.Заработано = СтрокаТаблШиномонтажа.Заработано;
		
		Попытка
			ИтогЗаработано=ИтогЗаработано+СтрокаТаблШиномонтажа.Заработано;
		Исключение
		КонецПопытки;
		ОбластьСтрока.Параметры.СредЗаСмену = Окр(((СтрокаТаблШиномонтажа.ЗарплатаБезОклада/ПолучитьПроцентСъемщика(ДатаНачалаОтчета))*100)/СтрокаТаблШиномонтажа.КолВоСмен,0);
		ОбластьСтрока.Параметры.Получено = СтрокаТаблШиномонтажа.Получено;
		ИтогПолучено=ИтогПолучено+СтрокаТаблШиномонтажа.Получено;

		ОбластьСтрока.Параметры.ДополучитьСОкладом=Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладСъемщика(ДатаНачалаОтчета))-СтрокаТаблШиномонтажа.Получено,0);

		ИтогДополучитьСОкладом=ИтогДополучитьСОкладом+Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладСъемщика(ДатаНачалаОтчета))-СтрокаТаблШиномонтажа.Получено,0);
		ИтогСданоЗаМатер=ИтогСданоЗаМатер+СтрокаТаблШиномонтажа.СуммаМатВычет;
		
		Налог=0;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_Налоги.Должность КАК Должность,
		|	ШМ_Налоги.Период КАК Период,
		|	ШМ_Налоги.Налог КАК Налог,
		|	ШМ_Налоги.ДископравныйТип КАК ДископравныйТип,
		|	ШМ_Налоги.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ШМ_Налоги КАК ШМ_Налоги
		|ГДЕ
		|	ШМ_Налоги.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ШМ_Налоги.Сотрудник = &Сотрудник
		|	И ШМ_Налоги.Должность.Наименование = ""Съемщик""";
	
		Запрос.УстановитьПараметр("НачалоПериода", ДатаСбораЗарплатыБезОклада); 
		Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ДатаСбораЗарплатыБезОклада));
		Запрос.УстановитьПараметр("Сотрудник", СтрокаТаблШиномонтажа.ФИО);
	
		ВыборкаНалог = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаВыборка из ВыборкаНалог Цикл
			Налог=Налог+СтрокаВыборка.Налог;
		КонецЦикла;

		ИтогНалоги=ИтогНалоги+Налог;
		
		НедостачаМат=0;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_Налоги.Должность КАК Должность,
		|	ШМ_Налоги.Период КАК Период,
		|	ШМ_Налоги.Недостача КАК Недостача,
		|	ШМ_Налоги.ДископравныйТип КАК ДископравныйТип,
		|	ШМ_Налоги.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ШМ_НедостачиМатериалов КАК ШМ_Налоги
		|ГДЕ
		|	ШМ_Налоги.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ШМ_Налоги.Должность.Наименование = ""Съемщик""
		|	И ШМ_Налоги.Сотрудник = &Сотрудник";
	
		Запрос.УстановитьПараметр("НачалоПериода", ДатаСбораЗарплатыБезОклада);     
		Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ДатаСбораЗарплатыБезОклада));
		Запрос.УстановитьПараметр("Сотрудник", СтрокаТаблШиномонтажа.ФИО);
	
		ВыборкаНедостач = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаВыборка из ВыборкаНедостач Цикл
			НедостачаМат=НедостачаМат+СтрокаВыборка.Недостача;
		КонецЦикла;

		ИтогНедостачиПоМатер=ИтогНедостачиПоМатер+НедостачаМат;
		
		ИтогВсегоУдержано=ИтогВсегоУдержано+Налог + НедостачаМат;
		ОбластьСтрока.Параметры.КВыплатеСОкладом = Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладСъемщика(ДатаНачалаОтчета))-СтрокаТаблШиномонтажа.Получено,0)-(Налог + НедостачаМат);
		ИтогКВыплатеСОкладом=ИтогКВыплатеСОкладом+Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладСъемщика(ДатаНачалаОтчета))-СтрокаТаблШиномонтажа.Получено,0)-(Налог + НедостачаМат);
		
		ТабДок.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	ОбластьСтрокаИтог = Макет.ПолучитьОбласть("СтрокаИтог");
	ОбластьСтрокаИтог.Параметры.ИтогЗаработано=ИтогЗаработано;
	ОбластьСтрокаИтог.Параметры.ИтогКолСмен=ИтогКолСмен;
	ОбластьСтрокаИтог.Параметры.ИтогЗарплатаБезОклада=ИтогЗарплатаБезОклада;
	ОбластьСтрокаИтог.Параметры.ИтогПолучено=ИтогПолучено;
	ОбластьСтрокаИтог.Параметры.ИтогДополучитьСОкладом=ИтогДополучитьСОкладом;
	ОбластьСтрокаИтог.Параметры.ИтогКВыплатеСОкладом=ИтогКВыплатеСОкладом;
	ТабДок.Вывести(ОбластьСтрокаИтог);
	
	ВсегоИтогЗаработано=ВсегоИтогЗаработано+ИтогЗаработано;
	ВсегоИтогКолСмен=ВсегоИтогКолСмен+ИтогКолСмен;
	ВсегоИтогЗарплатаБезОклада=ВсегоИтогЗарплатаБезОклада+ИтогЗарплатаБезОклада;
	ВсегоИтогОклад=ВсегоИтогОклад+ИтогОклад;
	ВсегоИтогЗарплатаСОкладом=ВсегоИтогЗарплатаСОкладом+ИтогЗарплатаСОкладом;
	ВсегоИтогПолучено=ВсегоИтогПолучено+ИтогПолучено;
	ВсегоИтогДополучитьСОкладом=ВсегоИтогДополучитьСОкладом+ИтогДополучитьСОкладом;
	ВсегоИтогСданоЗаМатер=ВсегоИтогСданоЗаМатер+ИтогСданоЗаМатер;
	ВсегоИтогНедостачиПоМатер=ВсегоИтогНедостачиПоМатер+ИтогНедостачиПоМатер;
	ВсегоИтогНалоги=ВсегоИтогНалоги+ИтогНалоги;
	ВсегоИтогВсегоУдержано=ВсегоИтогВсегоУдержано+ИтогВсегоУдержано;
	ВсегоИтогКВыплатеСОкладом=ВсегоИтогКВыплатеСОкладом+ИтогКВыплатеСОкладом;
	
	ТабДок.Вывести(ОбоастьСтрокаПробела);
	ОбластьЗаголовокДископравка = Макет.ПолучитьОбласть("ЗаголовокДископравка");
	ТабДок.Вывести(ОбластьЗаголовокДископравка);
	
	
	Возврат ТабДок;
	
КонецФункции

Функция ПолучитьТабДокОтчетБухгалтераДопИсполнителиДолговая()
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ДопИсполнителиДолговая";
	Макет = ПолучитьМакетОтчетаБухгалтераДопИсполнителиДолговая();
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Шапка");
	ОбластьЗаголовок.Параметры.ДатаНачалаОтчета=ДатаНачалаОтчета;
	ОбластьЗаголовок.Параметры.ДатаОкончанияОтчета=ДатаОкончанияОтчета;
	ТабДок.Вывести(ОбластьЗаголовок);
	
	ОбоастьСтрокаПробела = Макет.ПолучитьОбласть("СтрокаПробела");
	ОбластьСтрокаДископравки = Макет.ПолучитьОбласть("СтрокаДископравка");
	ТабДок.Вывести(ОбоастьСтрокаПробела);
	
	ОбластьЗаголовокШиномонтаж = Макет.ПолучитьОбласть("ЗаголовокШиномонтаж");
	ТабДок.Вывести(ОбластьЗаголовокШиномонтаж);
	
	ТаблШиномонтажа = Новый ТаблицаЗначений;
	ТаблШиномонтажа.Колонки.Добавить("ФИО");
	ТаблШиномонтажа.Колонки.Добавить("КолВоСмен");
	ТаблШиномонтажа.Колонки.Добавить("ЗарплатаБезОклада");
	ТаблШиномонтажа.Колонки.Добавить("Получено");
	ТаблШиномонтажа.Колонки.Добавить("СуммаМатВычет");
	ТаблШиномонтажа.Колонки.Добавить("Заработано");
	
	СписокРеализацийШиномонтаж = Новый СписокЗначений;
	
	ТаблСъема = Новый ТаблицаЗначений;
	ТаблСъема.Колонки.Добавить("ФИО");
	ТаблСъема.Колонки.Добавить("КолВоСмен");
	ТаблСъема.Колонки.Добавить("ЗарплатаБезОклада");
	ТаблСъема.Колонки.Добавить("Получено");
	ТаблСъема.Колонки.Добавить("СуммаМатВычет");
	ТаблСъема.Колонки.Добавить("Заработано");
	
	СписокРеализацийСъем = Новый СписокЗначений;
	
	ТаблДископравка = Новый ТаблицаЗначений;
	ТаблДископравка.Колонки.Добавить("ФИО");
	ТаблДископравка.Колонки.Добавить("КолВоСмен");
	ТаблДископравка.Колонки.Добавить("ЗарплатаБезОклада");
	ТаблДископравка.Колонки.Добавить("Получено");
	ТаблДископравка.Колонки.Добавить("СуммаМатВычет");
	ТаблДископравка.Колонки.Добавить("ЗарплатаБезОкладаАлюминевые");
	ТаблДископравка.Колонки.Добавить("ЗарплатаБезОкладаСтальные");
	ТаблДископравка.Колонки.Добавить("ЗаработаноАлюминевые");
	ТаблДископравка.Колонки.Добавить("ЗаработаноСтальные");
	
	СписокРеализацийДископравкаАлюминевые = Новый СписокЗначений;
	СписокРеализацийДископравкаСтальные = Новый СписокЗначений;
	
	СписокРеализацийМатериалы = Новый СписокЗначений;
	
	ТаблСмен = новый ТаблицаЗначений;
	ТаблСмен.Колонки.Добавить("ФИО");
	ТаблСмен.Колонки.Добавить("ДатаСмены");
	ТаблСмен.Колонки.Добавить("КолВоСмен");
	
	ТаблСменСъем = новый ТаблицаЗначений;
	ТаблСменСъем.Колонки.Добавить("ФИО");
	ТаблСменСъем.Колонки.Добавить("ДатаСмены");
	ТаблСменСъем.Колонки.Добавить("КолВоСмен");
	
	ТаблСменДискоравка = новый ТаблицаЗначений;
	ТаблСменДискоравка.Колонки.Добавить("ФИО");
	ТаблСменДискоравка.Колонки.Добавить("ДатаСмены");
	ТаблСменДискоравка.Колонки.Добавить("КолВоСмен");
	
	ДатаСбораЗарплатыБезОклада=Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_Смены.Период КАК Период,
		|	ШМ_Смены.ИмяКомпьютера КАК ИмяКомпьютера
		|ИЗ
		|	РегистрСведений.ШМ_Смены КАК ШМ_Смены
		|ГДЕ
		|	ШМ_Смены.ИмяКомпьютера = &ИмяКомпьютера
		|	И ШМ_Смены.Период МЕЖДУ &НачалоПериода И &КонецПериода";
	
	Запрос.УстановитьПараметр("ИмяКомпьютера",МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование); 
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ДатаНачалаОтчета));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ДатаОкончанияОтчета));
	
	Выборка = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаВыборка из Выборка Цикл
		ДатаСбораЗарплатыБезОклада=СтрокаВыборка.Период;
		Прервать;
	КонецЦикла;
	
	Если ДатаСбораЗарплатыБезОклада=Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_Бригады.Период КАК Период,
		|	ШМ_Бригады.Должность КАК Должность,
		|	ШМ_Бригады.Помощник КАК Помощник,
		|	ШМ_Бригады.ИмяКомпьютера КАК ИмяКомпьютера,
		|	ШМ_Бригады.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ШМ_Бригады КАК ШМ_Бригады
		|ГДЕ
		|	ШМ_Бригады.ИмяКомпьютера = &ИмяКомпьютера
		|	И ШМ_Бригады.Сотрудник = ЛОЖЬ
		|	И ШМ_Бригады.Период МЕЖДУ &НачалоПериода И &КонецПериода";
	
	Запрос.УстановитьПараметр("ИмяКомпьютера", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование);
	Запрос.УстановитьПараметр("НачалоПериода", ДатаСбораЗарплатыБезОклада);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ДатаОкончанияОтчета));
	Выборка = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаВыборка из Выборка Цикл
		Если СтрокаВыборка.Должность.Наименование="Шиномонтажник" Тогда
			СтрокаТаблСмен = ТаблСмен.Добавить();
			СтрокаТаблСмен.ФИО = СтрокаВыборка.Сотрудник;
			СтрокаТаблСмен.ДатаСмены = НачалоДня(СтрокаВыборка.Период);
			СтрокаТаблСмен.КолВоСмен = 1;
		ИначеЕсли СтрокаВыборка.Должность.Наименование="Съемщик" Тогда
			СтрокаТаблСменСъем = ТаблСменСъем.Добавить();
			СтрокаТаблСменСъем.ФИО = СтрокаВыборка.Сотрудник;
			СтрокаТаблСменСъем.ДатаСмены = НачалоДня(СтрокаВыборка.Период);
			СтрокаТаблСменСъем.КолВоСмен = 1;
		ИначеЕсли СтрокаВыборка.Должность.Наименование="Правщик дисков" Тогда
			СтрокаТаблСменДискоравка = ТаблСменДискоравка.Добавить();
			СтрокаТаблСменДискоравка.ФИО = СтрокаВыборка.Сотрудник;
			СтрокаТаблСменДискоравка.ДатаСмены = НачалоДня(СтрокаВыборка.Период);
			СтрокаТаблСменДискоравка.КолВоСмен = 1;
		КонецЕсли;
	КонецЦикла;
	
	//Если ТаблСмен.Количество()=0 Тогда
	//Если (ТаблСмен.Количество()=0) И (ТаблСменСъем.Количество()=0) И (ТаблСмен.ТаблСменДискоравка()=0) Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	
	ТаблСмен.Свернуть("ФИО,ДатаСмены","КолВоСмен");
	Для Каждого СтрокаТаблСмен Из ТаблСмен Цикл;
		СтрокаТаблСмен.КолВоСмен=1;
	КонецЦикла;
	ТаблСмен.Свернуть("ФИО","КолВоСмен");
	
	Для Каждого СтрокаТаблСмен Из ТаблСмен Цикл;
		СтрокаТаблШиномонтажа = ТаблШиномонтажа.Добавить();
		СтрокаТаблШиномонтажа.ФИО = СтрокаТаблСмен.ФИО;
		СтрокаТаблШиномонтажа.КолВоСмен = СтрокаТаблСмен.КолВоСмен;
		СтрокаТаблШиномонтажа.ЗарплатаБезОклада = 0;
		СтрокаТаблШиномонтажа.Получено = 0;
		СтрокаТаблШиномонтажа.СуммаМатВычет = 0;
	КонецЦикла;
	
	ТаблСменСъем.Свернуть("ФИО,ДатаСмены","КолВоСмен");
	Для Каждого СтрокаТаблСменСъем Из ТаблСменСъем Цикл;
		СтрокаТаблСменСъем.КолВоСмен=1;
	КонецЦикла;
	ТаблСменСъем.Свернуть("ФИО","КолВоСмен");
	
	Для Каждого СтрокаТаблСменСъем Из ТаблСменСъем Цикл;
		СтрокаТаблСъема = ТаблСъема.Добавить();
		СтрокаТаблСъема.ФИО = СтрокаТаблСменСъем.ФИО;
		СтрокаТаблСъема.КолВоСмен = СтрокаТаблСменСъем.КолВоСмен;
		СтрокаТаблСъема.ЗарплатаБезОклада = 0;
		СтрокаТаблСъема.Получено = 0;
		СтрокаТаблСъема.СуммаМатВычет = 0;
	КонецЦикла;
	
	ТаблСменДискоравка.Свернуть("ФИО,ДатаСмены","КолВоСмен");
	Для Каждого СтрокаТаблСменДискоравка Из ТаблСменДискоравка Цикл;
		СтрокаТаблСменДискоравка.КолВоСмен=1;
	КонецЦикла;
	ТаблСменДискоравка.Свернуть("ФИО","КолВоСмен");
	
	Для Каждого СтрокаТаблСменДискоравка Из ТаблСменДискоравка Цикл;
		СтрокаТаблДископравка = ТаблДископравка.Добавить();
		СтрокаТаблДископравка.ФИО = СтрокаТаблСменДискоравка.ФИО;
		СтрокаТаблДископравка.КолВоСмен = СтрокаТаблСменДискоравка.КолВоСмен;
		СтрокаТаблДископравка.ЗарплатаБезОклада = 0;
		СтрокаТаблДископравка.Получено = 0;
		СтрокаТаблДископравка.СуммаМатВычет = 0;
		СтрокаТаблДископравка.ЗарплатаБезОкладаАлюминевые = 0;
		СтрокаТаблДископравка.ЗарплатаБезОкладаСтальные = 0;
		СтрокаТаблДископравка.ЗаработаноСтальные = 0;
		СтрокаТаблДископравка.ЗаработаноАлюминевые = 0;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_ИсполнителиРабот.Реализация КАК Реализация,
		|	ШМ_ИсполнителиРабот.Номенклатура КАК Номенклатура,
		|	ШМ_ИсполнителиРабот.Исполнитель КАК Исполнитель,
		|	ШМ_ИсполнителиРабот.Помощник КАК Помощник,
		|	ШМ_ИсполнителиРабот.Сумма КАК Сумма
		|ИЗ
		|	РегистрСведений.ШМ_ИсполнителиРабот КАК ШМ_ИсполнителиРабот
		|ГДЕ
		|	ШМ_ИсполнителиРабот.Помощник = ЛОЖЬ
		|	И ШМ_ИсполнителиРабот.Реализация.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ШМ_ИсполнителиРабот.Реализация.ИмяКомпьютера = &ИмяКомпьютера";
	
	Запрос.УстановитьПараметр("НачалоПериода", ДатаСбораЗарплатыБезОклада); 
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ДатаОкончанияОтчета)); 
	Запрос.УстановитьПараметр("ИмяКомпьютера", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование); 
	
	Выборка = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаВыборка из Выборка Цикл
		
		НаборНомПроф=РегистрыСведений.ШМ_НоменклатураПрофессии.СоздатьНаборЗаписей();
		НаборНомПроф.Отбор.Номенклатура.Установить(СтрокаВыборка.Номенклатура,Истина);
		НаборНомПроф.Прочитать();
		Для Каждого СтрНаборНомПроф Из НаборНомПроф Цикл
			Если СтрНаборНомПроф.Профессия=Справочники.ШМ_Должности.НайтиПоНаименованию("Шиномонтажник") Тогда
				
				Для Каждого СтрокаТаблШиномонтажа Из ТаблШиномонтажа Цикл
					Если СтрокаТаблШиномонтажа.ФИО=СтрокаВыборка.Исполнитель Тогда
					Если СотрудникНаСмене(СтрокаВыборка.Исполнитель,СтрокаВыборка.Реализация.Дата)=Ложь Тогда
						СтрокаТаблШиномонтажа.ЗарплатаБезОклада=СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаВыборка.Сумма;
						Если СписокРеализацийШиномонтаж.НайтиПоЗначению(СтрокаВыборка.Реализация) = Неопределено Тогда
							СписокРеализацийШиномонтаж.Добавить(СтрокаВыборка.Реализация);
							Попытка
								СтрокаТаблШиномонтажа.Заработано=СтрокаТаблШиномонтажа.Заработано+СтрокаВыборка.Реализация.СуммаШиномонтажЧерновик;
							Исключение
								СтрокаТаблШиномонтажа.Заработано=СтрокаВыборка.Реализация.СуммаШиномонтажЧерновик;
							КонецПопытки;
							Попытка
								СтрокаТаблШиномонтажа.СуммаМатВычет=СтрокаТаблШиномонтажа.СуммаМатВычет+СтрокаВыборка.Реализация.СуммаМатВычет;
							Исключение
								СтрокаТаблШиномонтажа.СуммаМатВычет=СтрокаВыборка.Реализация.СуммаМатВычет;
							КонецПопытки;	
						КонецЕсли;
						Если СписокРеализацийМатериалы.НайтиПоЗначению(СтрокаВыборка.Реализация) = Неопределено Тогда
							СписокРеализацийМатериалы.Добавить(СтрокаВыборка.Реализация);
						КонецЕсли;
					КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли СтрНаборНомПроф.Профессия=Справочники.ШМ_Должности.НайтиПоНаименованию("Съемщик") Тогда
				
				Для Каждого СтрокаТаблСъема Из ТаблСъема Цикл
					Если СтрокаТаблСъема.ФИО=СтрокаВыборка.Исполнитель Тогда
					Если СотрудникНаСмене(СтрокаВыборка.Исполнитель,СтрокаВыборка.Реализация.Дата)=Ложь Тогда
						СтрокаТаблСъема.ЗарплатаБезОклада=СтрокаТаблСъема.ЗарплатаБезОклада+СтрокаВыборка.Сумма;
						СтрокаТаблСъема.СуммаМатВычет=0;
						Если СписокРеализацийСъем.НайтиПоЗначению(СтрокаВыборка.Реализация) = Неопределено Тогда
							СписокРеализацийСъем.Добавить(СтрокаВыборка.Реализация);
							Попытка
								СтрокаТаблСъема.Заработано=СтрокаТаблСъема.Заработано+СтрокаВыборка.Реализация.СуммаСъемЧерновик;
							Исключение
								СтрокаТаблСъема.Заработано=СтрокаВыборка.Реализация.СуммаСъемЧерновик;
							КонецПопытки;
						КонецЕсли;
						Если СписокРеализацийМатериалы.НайтиПоЗначению(СтрокаВыборка.Реализация) = Неопределено Тогда
							СписокРеализацийМатериалы.Добавить(СтрокаВыборка.Реализация);
						КонецЕсли;
					КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли СтрНаборНомПроф.Профессия=Справочники.ШМ_Должности.НайтиПоНаименованию("Правщик дисков") Тогда
				
				Для Каждого СтрокаТаблДископравка Из ТаблДископравка Цикл
					Если СтрокаТаблДископравка.ФИО=СтрокаВыборка.Исполнитель Тогда
					Если СотрудникНаСмене(СтрокаВыборка.Исполнитель,СтрокаВыборка.Реализация.Дата)=Ложь Тогда
						Если СтрНаборНомПроф.Дископравка=Перечисления.ШМ_Дископравка.Стальной Тогда
							СтрокаТаблДископравка.ЗарплатаБезОклада=СтрокаТаблДископравка.ЗарплатаБезОклада+СтрокаВыборка.Сумма;
							СтрокаТаблДископравка.ЗарплатаБезОкладаСтальные=СтрокаТаблДископравка.ЗарплатаБезОкладаСтальные+СтрокаВыборка.Сумма;
							Если СписокРеализацийДископравкаСтальные.НайтиПоЗначению(СтрокаВыборка.Реализация) = Неопределено Тогда
								СписокРеализацийДископравкаСтальные.Добавить(СтрокаВыборка.Реализация);
								Попытка
									СтрокаТаблДископравка.ЗаработаноСтальные=СтрокаТаблДископравка.ЗаработаноСтальные+СтрокаВыборка.Реализация.СуммаДископравкаЧерновик;
								Исключение
									СтрокаТаблДископравка.ЗаработаноСтальные=СтрокаВыборка.Реализация.СуммаДископравкаЧерновик;
								КонецПопытки;
							КонецЕсли;
							Если СписокРеализацийМатериалы.НайтиПоЗначению(СтрокаВыборка.Реализация) = Неопределено Тогда
								СписокРеализацийМатериалы.Добавить(СтрокаВыборка.Реализация);
							КонецЕсли;
						ИначеЕсли СтрНаборНомПроф.Дископравка=Перечисления.ШМ_Дископравка.Лекгосплавный Тогда
							СтрокаТаблДископравка.ЗарплатаБезОклада=СтрокаТаблДископравка.ЗарплатаБезОклада+СтрокаВыборка.Сумма;
							СтрокаТаблДископравка.ЗарплатаБезОкладаАлюминевые=СтрокаТаблДископравка.ЗарплатаБезОкладаАлюминевые+СтрокаВыборка.Сумма;
							Если СписокРеализацийДископравкаАлюминевые.НайтиПоЗначению(СтрокаВыборка.Реализация) = Неопределено Тогда
								СписокРеализацийДископравкаАлюминевые.Добавить(СтрокаВыборка.Реализация);
								Попытка
									СтрокаТаблДископравка.ЗаработаноАлюминевые=СтрокаТаблДископравка.ЗаработаноАлюминевые+СтрокаВыборка.Реализация.СуммаДископравкаЧерновик;
								Исключение
									СтрокаТаблДископравка.ЗаработаноАлюминевые=СтрокаВыборка.Реализация.СуммаДископравкаЧерновик;
								КонецПопытки;
							КонецЕсли;
							Если СписокРеализацийМатериалы.НайтиПоЗначению(СтрокаВыборка.Реализация) = Неопределено Тогда
								СписокРеализацийМатериалы.Добавить(СтрокаВыборка.Реализация);
							КонецЕсли;
						КонецЕсли;
						СтрокаТаблДископравка.СуммаМатВычет=0;
					КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_Затраты.Период КАК Период,
		|	ШМ_Затраты.Сотрудник КАК Сотрудник,
		|	ШМ_Затраты.Профессия КАК Профессия,
		|	ШМ_Затраты.Сумма КАК Сумма
		|ИЗ
		|	РегистрСведений.ШМ_Затраты КАК ШМ_Затраты
		|ГДЕ
		|	ШМ_Затраты.Период МЕЖДУ &НачалоПериода И &КонецПериода";
	
	Запрос.УстановитьПараметр("НачалоПериода", ДатаСбораЗарплатыБезОклада);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ДатаОкончанияОтчета));
	
	Выборка = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаВыборка из Выборка Цикл

		Если СтрокаВыборка.Профессия.Наименование="Шиномонтажник" Тогда
			
		Для Каждого СтрокаТаблШиномонтажа Из ТаблШиномонтажа Цикл
			Если СтрокаТаблШиномонтажа.ФИО=СтрокаВыборка.Сотрудник Тогда
				СтрокаТаблШиномонтажа.Получено=СтрокаТаблШиномонтажа.Получено+СтрокаВыборка.Сумма;
			КонецЕсли;
		КонецЦикла;
		
		КонецЕсли;
	
		Если СтрокаВыборка.Профессия.Наименование="Съемщик" Тогда
			
		Для Каждого СтрокаТаблСъема Из ТаблСъема Цикл
			Если СтрокаТаблСъема.ФИО=СтрокаВыборка.Сотрудник Тогда
				СтрокаТаблСъема.Получено=СтрокаТаблСъема.Получено+СтрокаВыборка.Сумма;
			КонецЕсли;
		КонецЦикла;
		
		КонецЕсли;
	
	    Если СтрокаВыборка.Профессия.Наименование="Правщик дисков" Тогда
			
		Для Каждого СтрокаТаблДископравка Из ТаблДископравка Цикл
			Если СтрокаТаблДископравка.ФИО=СтрокаВыборка.Сотрудник Тогда
				СтрокаТаблДископравка.Получено=СтрокаТаблДископравка.Получено+СтрокаВыборка.Сумма;
			КонецЕсли;
		КонецЦикла;
		
		КонецЕсли;
		
	КонецЦикла;
	
	ВсегоИтогЗаработано=0;
	ВсегоИтогКолСмен=0;
	ВсегоИтогЗарплатаБезОклада=0;
	ВсегоИтогОклад=0;
	ВсегоИтогЗарплатаСОкладом=0;
	ВсегоИтогПолучено=0;
	ВсегоИтогДополучитьСОкладом=0;
	ВсегоИтогСданоЗаМатер=0;
	ВсегоИтогНедостачиПоМатер=0;
	ВсегоИтогНалоги=0;
	ВсегоИтогВсегоУдержано=0;
	ВсегоИтогКВыплатеСОкладом=0;
	
	ИтогЗаработано=0;
	ИтогКолСмен=0;
	ИтогЗарплатаБезОклада=0;
	ИтогОклад=0;
	ИтогЗарплатаСОкладом=0;
	ИтогПолучено=0;
	ИтогДополучитьСОкладом=0;
	ИтогСданоЗаМатер=0;
	ИтогНедостачиПоМатер=0;
	ИтогНалоги=0;
	ИтогВсегоУдержано=0;
	ИтогКВыплатеСОкладом=0;
	
	КолСтрокШ=0;
	Для Каждого СтрокаТаблШиномонтажа Из ТаблШиномонтажа Цикл
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		КолСтрокШ=КолСтрокШ+1;
		ОбластьСтрока.Параметры.НомерПП = КолСтрокШ;
		ОбластьСтрока.Параметры.ФИО = СтрокаТаблШиномонтажа.ФИО;

		ИтогКолСмен=ИтогКолСмен+СтрокаТаблШиномонтажа.КолВоСмен;

		ИтогОклад=ИтогОклад+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладШиномонтажника(ДатаНачалаОтчета);
		ОбластьСтрока.Параметры.ЗарплатаБезОклада = Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОклада,0);
		ИтогЗарплатаБезОклада=ИтогЗарплатаБезОклада+Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОклада,0);

		ИтогЗарплатаСОкладом=ИтогЗарплатаСОкладом+Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладШиномонтажника(ДатаНачалаОтчета),0);
		ОбластьСтрока.Параметры.Заработано = СтрокаТаблШиномонтажа.Заработано;

		Попытка
			ИтогЗаработано=ИтогЗаработано+СтрокаТаблШиномонтажа.Заработано;
		Исключение
		КонецПопытки;

		ИтогПолучено=ИтогПолучено+СтрокаТаблШиномонтажа.Получено;

		ИтогДополучитьСОкладом=ИтогДополучитьСОкладом+Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладШиномонтажника(ДатаНачалаОтчета))-СтрокаТаблШиномонтажа.Получено,0);
		МатВыч=0;
		ВыбРеал=Документы.РеализацияТоваровУслуг.Выбрать(НачалоДня(ДатаНачалаОтчета),КонецДня(ДатаОкончанияОтчета));
		Пока ВыбРеал.Следующий() Цикл
			Если ВыбРеал.Проведен=Ложь Тогда
				Продолжить;
			КонецЕсли;
			Если ВыбРеал.Комментарий = "Материалы" Тогда
				Продолжить;
			КонецЕсли;
		    МатВыч=МатВыч+ВыбРеал.СуммаМатВычет;
		КонецЦикла;
		ИтогСданоЗаМатер=ИтогСданоЗаМатер+МатВыч;
		ОбластьСтрока.Параметры.Процент = ПолучитьПроцентШиномонтажника(ДатаНачалаОтчета);
		
		Налог=0;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_Налоги.Должность КАК Должность,
		|	ШМ_Налоги.Период КАК Период,
		|	ШМ_Налоги.Налог КАК Налог,
		|	ШМ_Налоги.ДископравныйТип КАК ДископравныйТип,
		|	ШМ_Налоги.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ШМ_Налоги КАК ШМ_Налоги
		|ГДЕ
		|	ШМ_Налоги.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ШМ_Налоги.Сотрудник = &Сотрудник
		|	И ШМ_Налоги.Должность.Наименование = ""Шиномонтажник""";
	
		Запрос.УстановитьПараметр("НачалоПериода", ДатаСбораЗарплатыБезОклада);    
		Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ДатаСбораЗарплатыБезОклада));
		Запрос.УстановитьПараметр("Сотрудник", СтрокаТаблШиномонтажа.ФИО);
	
		ВыборкаНалог = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаВыборка из ВыборкаНалог Цикл
			Налог=Налог+СтрокаВыборка.Налог;
		КонецЦикла;

		ИтогНалоги=ИтогНалоги+Налог;
		
		НедостачаМат=0;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_Налоги.Должность КАК Должность,
		|	ШМ_Налоги.Период КАК Период,
		|	ШМ_Налоги.Недостача КАК Недостача,
		|	ШМ_Налоги.ДископравныйТип КАК ДископравныйТип,
		|	ШМ_Налоги.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ШМ_НедостачиМатериалов КАК ШМ_Налоги
		|ГДЕ
		|	ШМ_Налоги.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ШМ_Налоги.Сотрудник = &Сотрудник
		|	И ШМ_Налоги.Должность.Наименование = ""Шиномонтажник""";
	
		Запрос.УстановитьПараметр("НачалоПериода", ДатаСбораЗарплатыБезОклада); 
		Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ДатаСбораЗарплатыБезОклада));
		Запрос.УстановитьПараметр("Сотрудник", ДатаСбораЗарплатыБезОклада);
	
		ВыборкаНедостач = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаВыборка из ВыборкаНедостач Цикл
			НедостачаМат=НедостачаМат+СтрокаВыборка.Недостача;
		КонецЦикла;

		ИтогНедостачиПоМатер=ИтогНедостачиПоМатер+НедостачаМат;
		
		ИтогВсегоУдержано=ИтогВсегоУдержано+Налог + НедостачаМат;

		ИтогКВыплатеСОкладом=ИтогКВыплатеСОкладом+Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладШиномонтажника(ДатаНачалаОтчета))-СтрокаТаблШиномонтажа.Получено,0)-(Налог + НедостачаМат);
		
		ТабДок.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	ОбластьСтрокаИтог = Макет.ПолучитьОбласть("СтрокаИтог");
	ОбластьСтрокаИтог.Параметры.ИтогЗаработано=ИтогЗаработано;

	ОбластьСтрокаИтог.Параметры.ИтогЗарплатаБезОклада=ИтогЗарплатаБезОклада;

	ТабДок.Вывести(ОбластьСтрокаИтог);
	
	ВсегоИтогЗаработано=ВсегоИтогЗаработано+ИтогЗаработано;
	ВсегоИтогКолСмен=ВсегоИтогКолСмен+ИтогКолСмен;
	ВсегоИтогЗарплатаБезОклада=ВсегоИтогЗарплатаБезОклада+ИтогЗарплатаБезОклада;
	ВсегоИтогОклад=ВсегоИтогОклад+ИтогОклад;
	ВсегоИтогЗарплатаСОкладом=ВсегоИтогЗарплатаСОкладом+ИтогЗарплатаСОкладом;
	ВсегоИтогПолучено=ВсегоИтогПолучено+ИтогПолучено;
	ВсегоИтогДополучитьСОкладом=ВсегоИтогДополучитьСОкладом+ИтогДополучитьСОкладом;
	ВсегоИтогСданоЗаМатер=ВсегоИтогСданоЗаМатер+ИтогСданоЗаМатер;
	ВсегоИтогНедостачиПоМатер=ВсегоИтогНедостачиПоМатер+ИтогНедостачиПоМатер;
	ВсегоИтогНалоги=ВсегоИтогНалоги+ИтогНалоги;
	ВсегоИтогВсегоУдержано=ВсегоИтогВсегоУдержано+ИтогВсегоУдержано;
	ВсегоИтогКВыплатеСОкладом=ВсегоИтогКВыплатеСОкладом+ИтогКВыплатеСОкладом;
	
	ТабДок.Вывести(ОбоастьСтрокаПробела);
	ОбластьЗаголовокСъем = Макет.ПолучитьОбласть("ЗаголовокСъем");
	ТабДок.Вывести(ОбластьЗаголовокСъем);
	
	ИтогЗаработано=0;
	ИтогКолСмен=0;
	ИтогЗарплатаБезОклада=0;
	ИтогОклад=0;
	ИтогЗарплатаСОкладом=0;
	ИтогПолучено=0;
	ИтогДополучитьСОкладом=0;
	ИтогСданоЗаМатер=0;
	ИтогНедостачиПоМатер=0;
	ИтогНалоги=0;
	ИтогВсегоУдержано=0;
	ИтогКВыплатеСОкладом=0;
	
	КолСтрокШ=0;
	Для Каждого СтрокаТаблШиномонтажа Из ТаблСъема Цикл
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		КолСтрокШ=КолСтрокШ+1;
		ОбластьСтрока.Параметры.НомерПП = КолСтрокШ;
		ОбластьСтрока.Параметры.ФИО = СтрокаТаблШиномонтажа.ФИО;

		ИтогКолСмен=ИтогКолСмен+СтрокаТаблШиномонтажа.КолВоСмен;

		ИтогОклад=ИтогОклад+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладСъемщика(ДатаНачалаОтчета);
		ОбластьСтрока.Параметры.ЗарплатаБезОклада = Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОклада,0);
		ИтогЗарплатаБезОклада=ИтогЗарплатаБезОклада+Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОклада,0);

		ИтогЗарплатаСОкладом=ИтогЗарплатаСОкладом+Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладСъемщика(ДатаНачалаОтчета),0);

		ОбластьСтрока.Параметры.Заработано = СтрокаТаблШиномонтажа.Заработано;

		Попытка
			ИтогЗаработано=ИтогЗаработано+СтрокаТаблШиномонтажа.Заработано;
		Исключение
		КонецПопытки;

		ИтогПолучено=ИтогПолучено+СтрокаТаблШиномонтажа.Получено;

		ИтогДополучитьСОкладом=ИтогДополучитьСОкладом+Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладСъемщика(ДатаНачалаОтчета))-СтрокаТаблШиномонтажа.Получено,0);

		ИтогСданоЗаМатер=ИтогСданоЗаМатер+СтрокаТаблШиномонтажа.СуммаМатВычет;
		ОбластьСтрока.Параметры.Процент = ПолучитьПроцентСъемщика(ДатаНачалаОтчета);
		
		Налог=0;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_Налоги.Должность КАК Должность,
		|	ШМ_Налоги.Период КАК Период,
		|	ШМ_Налоги.Налог КАК Налог,
		|	ШМ_Налоги.ДископравныйТип КАК ДископравныйТип,
		|	ШМ_Налоги.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ШМ_Налоги КАК ШМ_Налоги
		|ГДЕ
		|	ШМ_Налоги.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ШМ_Налоги.Сотрудник = &Сотрудник
		|	И ШМ_Налоги.Должность.Наименование = ""Съемщик""";
	
		Запрос.УстановитьПараметр("НачалоПериода", ДатаСбораЗарплатыБезОклада);
		Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ДатаСбораЗарплатыБезОклада));
		Запрос.УстановитьПараметр("Сотрудник", СтрокаТаблШиномонтажа.ФИО);
	
		ВыборкаНалог = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаВыборка из ВыборкаНалог Цикл
			Налог=Налог+СтрокаВыборка.Налог;
		КонецЦикла;

		ИтогНалоги=ИтогНалоги+Налог;
		
		НедостачаМат=0;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_Налоги.Должность КАК Должность,
		|	ШМ_Налоги.Период КАК Период,
		|	ШМ_Налоги.Недостача КАК Недостача,
		|	ШМ_Налоги.ДископравныйТип КАК ДископравныйТип,
		|	ШМ_Налоги.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ШМ_НедостачиМатериалов КАК ШМ_Налоги
		|ГДЕ
		|	ШМ_Налоги.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ШМ_Налоги.Должность.Наименование = ""Съемщик""
		|	И ШМ_Налоги.Сотрудник = &Сотрудник";
	
		Запрос.УстановитьПараметр("НачалоПериода", ДатаСбораЗарплатыБезОклада);   
		Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ДатаСбораЗарплатыБезОклада));
		Запрос.УстановитьПараметр("Сотрудник", СтрокаТаблШиномонтажа.ФИО);
	
		ВыборкаНедостач = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаВыборка из ВыборкаНедостач Цикл
			НедостачаМат=НедостачаМат+СтрокаВыборка.Недостача;
		КонецЦикла;

		ИтогНедостачиПоМатер=ИтогНедостачиПоМатер+НедостачаМат;
		
		//ОбластьСтрока.Параметры.ВсегоУдержано = Налог + НедостачаМат;
		ИтогВсегоУдержано=ИтогВсегоУдержано+Налог + НедостачаМат;

		ИтогКВыплатеСОкладом=ИтогКВыплатеСОкладом+Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладСъемщика(ДатаНачалаОтчета))-СтрокаТаблШиномонтажа.Получено,0)-(Налог + НедостачаМат);
		
		ТабДок.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	ОбластьСтрокаИтог = Макет.ПолучитьОбласть("СтрокаИтог");
	ОбластьСтрокаИтог.Параметры.ИтогЗаработано=ИтогЗаработано;
	ОбластьСтрокаИтог.Параметры.ИтогЗарплатаБезОклада=ИтогЗарплатаБезОклада;
	ТабДок.Вывести(ОбластьСтрокаИтог);
	
	ВсегоИтогЗаработано=ВсегоИтогЗаработано+ИтогЗаработано;
	ВсегоИтогКолСмен=ВсегоИтогКолСмен+ИтогКолСмен;
	ВсегоИтогЗарплатаБезОклада=ВсегоИтогЗарплатаБезОклада+ИтогЗарплатаБезОклада;
	ВсегоИтогОклад=ВсегоИтогОклад+ИтогОклад;
	ВсегоИтогЗарплатаСОкладом=ВсегоИтогЗарплатаСОкладом+ИтогЗарплатаСОкладом;
	ВсегоИтогПолучено=ВсегоИтогПолучено+ИтогПолучено;
	ВсегоИтогДополучитьСОкладом=ВсегоИтогДополучитьСОкладом+ИтогДополучитьСОкладом;
	ВсегоИтогСданоЗаМатер=ВсегоИтогСданоЗаМатер+ИтогСданоЗаМатер;
	ВсегоИтогНедостачиПоМатер=ВсегоИтогНедостачиПоМатер+ИтогНедостачиПоМатер;
	ВсегоИтогНалоги=ВсегоИтогНалоги+ИтогНалоги;
	ВсегоИтогВсегоУдержано=ВсегоИтогВсегоУдержано+ИтогВсегоУдержано;
	ВсегоИтогКВыплатеСОкладом=ВсегоИтогКВыплатеСОкладом+ИтогКВыплатеСОкладом;
	
	ТабДок.Вывести(ОбоастьСтрокаПробела);
	ОбластьЗаголовокДископравка = Макет.ПолучитьОбласть("ЗаголовокДископравка");
	ТабДок.Вывести(ОбластьЗаголовокДископравка);
	
	ИтогЗаработано=0;
	ИтогКолСмен=0;
	ИтогЗарплатаБезОклада=0;
	ИтогОклад=0;
	ИтогЗарплатаСОкладом=0;
	ИтогПолучено=0;
	ИтогДополучитьСОкладом=0;
	ИтогСданоЗаМатер=0;
	ИтогНедостачиПоМатер=0;
	ИтогНалоги=0;
	ИтогВсегоУдержано=0;
	ИтогКВыплатеСОкладом=0;
	
	КолСтрокШ=0;
	Для Каждого СтрокаТаблШиномонтажа Из ТаблДископравка Цикл
		
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		КолСтрокШ=КолСтрокШ+1;
		ОбластьСтрока.Параметры.НомерПП = КолСтрокШ;
		ОбластьСтрока.Параметры.ФИО = СтрокаТаблШиномонтажа.ФИО;
		ИтогКолСмен=ИтогКолСмен+СтрокаТаблШиномонтажа.КолВоСмен;
		ИтогОклад=ИтогОклад+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладДископравщика(ДатаНачалаОтчета);
		ОбластьСтрока.Параметры.ЗарплатаБезОклада = Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОкладаАлюминевые+СтрокаТаблШиномонтажа.ЗарплатаБезОкладаСтальные,0);
		ИтогЗарплатаБезОклада=ИтогЗарплатаБезОклада+Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОкладаАлюминевые+СтрокаТаблШиномонтажа.ЗарплатаБезОкладаСтальные,0);
		ИтогЗарплатаСОкладом=ИтогЗарплатаСОкладом+Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладДископравщика(ДатаНачалаОтчета),0);
		ОбластьСтрока.Параметры.Заработано = СтрокаТаблШиномонтажа.ЗаработаноСтальные+СтрокаТаблШиномонтажа.ЗаработаноАлюминевые;
		Попытка
			ИтогЗаработано=ИтогЗаработано+СтрокаТаблШиномонтажа.ЗаработаноСтальные+СтрокаТаблШиномонтажа.ЗаработаноАлюминевые;
		Исключение
		КонецПопытки;
		ИтогПолучено=ИтогПолучено+СтрокаТаблШиномонтажа.Получено;
		ИтогДополучитьСОкладом=ИтогДополучитьСОкладом+Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладДископравщика(ДатаНачалаОтчета))-СтрокаТаблШиномонтажа.Получено,0);
		ИтогСданоЗаМатер=ИтогСданоЗаМатер+СтрокаТаблШиномонтажа.СуммаМатВычет;
		ОбластьСтрока.Параметры.Процент = 0;
		
		Налог=0;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_Налоги.Должность КАК Должность,
		|	ШМ_Налоги.Период КАК Период,
		|	ШМ_Налоги.Налог КАК Налог,
		|	ШМ_Налоги.ДископравныйТип КАК ДископравныйТип,
		|	ШМ_Налоги.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ШМ_Налоги КАК ШМ_Налоги
		|ГДЕ
		|	ШМ_Налоги.Период МЕЖДУ &НачалоПериода И &КонецПериод
		|	И ШМ_Налоги.Должность.Наименование = ""Правщик дисков""
		|	И ШМ_Налоги.Сотрудник = &Сотрудник";
	
		Запрос.УстановитьПараметр("НачалоПериода", ДатаСбораЗарплатыБезОклада); 
		Запрос.УстановитьПараметр("КонецПериод", КонецМесяца(ДатаСбораЗарплатыБезОклада));
		Запрос.УстановитьПараметр("Сотрудник", СтрокаТаблШиномонтажа.ФИО);
	
		ВыборкаНалог = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаВыборка из ВыборкаНалог Цикл
			Налог=Налог+СтрокаВыборка.Налог;
		КонецЦикла;
		//ОбластьСтрока.Параметры.Налоги = Налог;
		ИтогНалоги=ИтогНалоги+Налог;
		
		НедостачаМат=0;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_Налоги.Должность КАК Должность,
		|	ШМ_Налоги.Период КАК Период,
		|	ШМ_Налоги.Недостача КАК Недостача,
		|	ШМ_Налоги.ДископравныйТип КАК ДископравныйТип,
		|	ШМ_Налоги.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ШМ_НедостачиМатериалов КАК ШМ_Налоги
		|ГДЕ
		|	ШМ_Налоги.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ШМ_Налоги.Должность.Наименование = ""Правщик дисков""
		|	И ШМ_Налоги.Сотрудник = &Сотрудник";
	
		Запрос.УстановитьПараметр("НачалоПериода", ДатаСбораЗарплатыБезОклада);
		Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ДатаСбораЗарплатыБезОклада));
		Запрос.УстановитьПараметр("Сотрудник", СтрокаТаблШиномонтажа.ФИО);
	
		ВыборкаНедостач = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаВыборка из ВыборкаНедостач Цикл
			НедостачаМат=НедостачаМат+СтрокаВыборка.Недостача;
		КонецЦикла;
		ИтогНедостачиПоМатер=ИтогНедостачиПоМатер+НедостачаМат;
		

		ИтогВсегоУдержано=ИтогВсегоУдержано+Налог + НедостачаМат;
		ИтогКВыплатеСОкладом=ИтогКВыплатеСОкладом+Окр((СтрокаТаблШиномонтажа.ЗарплатаБезОклада+СтрокаТаблШиномонтажа.КолВоСмен*ПолучитьОкладДископравщика(ДатаНачалаОтчета))-СтрокаТаблШиномонтажа.Получено,0)-(Налог + НедостачаМат);
		
		ТабДок.Вывести(ОбластьСтрока);
		
		ОбластьСтрокаДископравки.Параметры.ТипДиска="Алюмин";
		ОбластьСтрокаДископравки.Параметры.ПроцентТипДиска=ПолучитьПроцентДископравщикаАлюм(ДатаНачалаОтчета);
		ОбластьСтрокаДископравки.Параметры.ЗарплатаБезОклада = Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОкладаАлюминевые,0);

		ОбластьСтрокаДископравки.Параметры.Заработано = СтрокаТаблШиномонтажа.ЗаработаноАлюминевые;
		ТабДок.Вывести(ОбластьСтрокаДископравки);
		
		ОбластьСтрокаДископравки.Параметры.ТипДиска="Стальные";
		ОбластьСтрокаДископравки.Параметры.ПроцентТипДиска=ПолучитьПроцентДископравщикаСталь(ДатаНачалаОтчета);
		ОбластьСтрокаДископравки.Параметры.ЗарплатаБезОклада = Окр(СтрокаТаблШиномонтажа.ЗарплатаБезОкладаСтальные,0);
		ОбластьСтрокаДископравки.Параметры.Заработано = СтрокаТаблШиномонтажа.ЗаработаноСтальные;
		ТабДок.Вывести(ОбластьСтрокаДископравки);
		
		
	КонецЦикла;
	
	ОбластьСтрокаИтог = Макет.ПолучитьОбласть("СтрокаИтог");
	ОбластьСтрокаИтог.Параметры.ИтогЗаработано=ИтогЗаработано;
	ОбластьСтрокаИтог.Параметры.ИтогЗарплатаБезОклада=ИтогЗарплатаБезОклада;
	ТабДок.Вывести(ОбластьСтрокаИтог);
	
	ВсегоИтогЗаработано=ВсегоИтогЗаработано+ИтогЗаработано;
	ВсегоИтогКолСмен=ВсегоИтогКолСмен+ИтогКолСмен;
	ВсегоИтогЗарплатаБезОклада=ВсегоИтогЗарплатаБезОклада+ИтогЗарплатаБезОклада;
	ВсегоИтогОклад=ВсегоИтогОклад+ИтогОклад;
	ВсегоИтогЗарплатаСОкладом=ВсегоИтогЗарплатаСОкладом+ИтогЗарплатаСОкладом;
	ВсегоИтогПолучено=ВсегоИтогПолучено+ИтогПолучено;
	ВсегоИтогДополучитьСОкладом=ВсегоИтогДополучитьСОкладом+ИтогДополучитьСОкладом;
	ВсегоИтогСданоЗаМатер=ВсегоИтогСданоЗаМатер+ИтогСданоЗаМатер;
	ВсегоИтогНедостачиПоМатер=ВсегоИтогНедостачиПоМатер+ИтогНедостачиПоМатер;
	ВсегоИтогНалоги=ВсегоИтогНалоги+ИтогНалоги;
	ВсегоИтогВсегоУдержано=ВсегоИтогВсегоУдержано+ИтогВсегоУдержано;
	ВсегоИтогКВыплатеСОкладом=ВсегоИтогКВыплатеСОкладом+ИтогКВыплатеСОкладом;
	
	ОбластьСтрокаИтог = Макет.ПолучитьОбласть("СтрокаВсего");
	ОбластьСтрокаИтог.Параметры.ИтогЗаработано=ВсегоИтогЗаработано;
	ОбластьСтрокаИтог.Параметры.ИтогЗарплатаБезОклада=ВсегоИтогЗарплатаБезОклада;

	ТабДок.Вывести(ОбоастьСтрокаПробела);
	ТабДок.Вывести(ОбластьСтрокаИтог);
	
	Возврат ТабДок;
	
КонецФункции

Функция ПолучитьТабДокДископравкаНаДату(ДатаСмены, ФормаВыбРабочиеМеста)
		
	НачалоСмены = НачалоСменыНаДату(ДатаСмены);      
	Если ТипЗнч(НачалоСмены) = Тип("Булево") Тогда 
		Сообщить(СтрШаблон("За указанный период(%1) не зарегестрировано смен. Сообщите в IT о данной проблеме", НачалоДня(ДатаСмены)));
		Возврат Ложь;
	КонецЕсли; 	
	КонецСмены = КонецСменыНаДатуЧерновик(КонецДня(НачалоСмены));
	//1softpro pok 18.02.2025 +++ Начало смены всегда 9:00
	//НачалоСмены = НачалоДня(ДатаСмены)+ 60*60*9;
	//КонецСмены = НачалоСмены + 60*60*24;
	Если КонецСмены = ложь Тогда 
		КонецСмены = ТекущаяДата();
	КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Закр_Смены";
	Макет = ПолучитьМакетДископравка();
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Шапка");
	ОбластьПодвал = Макет.ПолучитьОбласть("ПодвалНовый"); 
	
	
	Если НачалоСмены = КонецСмены Тогда 
		КонецСмены = ТекущаяДата();
	КонецЕсли;  
	
	//++dev1 21.03 пользователь после ввода даты, выбирает рабочее место по которому строить отчет, автоматически заполняется склад рабочего места
	Если ФормаВыбРабочиеМеста <> Неопределено тогда
		ТекущееРабочееМесто = ФормаВыбРабочиеМеста.Наименование;
		Склад = ФормаВыбРабочиеМеста.Склад;
	Иначе
		ТекущееРабочееМесто =  МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование;
		Склад =  ПолучитьСклад(ПользователиКлиентСервер.ТекущийПользователь()); 
	КонецЕсли;
	//--
	
	ДископравщикСегодня=Неопределено;
	ОбластьЗаголовок.Параметры.ДатаОтчета=Формат(НачалоСмены,"ДЛФ=Д");
	ОбластьЗаголовок.Параметры.Шиномонтажник="";
	ОбластьЗаголовок.Параметры.Съемщик="";
	ОбластьЗаголовок.Параметры.Дископравщик="";
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_БригадыСрезПоследних.Период КАК Период,
		|	ШМ_БригадыСрезПоследних.Должность КАК Должность,
		|	ШМ_БригадыСрезПоследних.Помощник КАК Помощник,
		|	ШМ_БригадыСрезПоследних.ИмяКомпьютера КАК ИмяКомпьютера,
		|	ШМ_БригадыСрезПоследних.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ШМ_Бригады КАК ШМ_БригадыСрезПоследних
		|ГДЕ
		|	ШМ_БригадыСрезПоследних.ИмяКомпьютера = &ИмяКомпьютера
		|	И ШМ_БригадыСрезПоследних.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	ШМ_БригадыСрезПоследних.Период,
		|	ШМ_БригадыСрезПоследних.Сотрудник,
		|	ШМ_БригадыСрезПоследних.Помощник,
		|	ШМ_БригадыСрезПоследних.Должность,
		|	ШМ_БригадыСрезПоследних.ИмяКомпьютера
		|
		|УПОРЯДОЧИТЬ ПО
		|	ШМ_БригадыСрезПоследних.Период";
	
  
	
	//Запрос.УстановитьПараметр("ИмяКомпьютера", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование);
	Запрос.УстановитьПараметр("ИмяКомпьютера", ТекущееРабочееМесто);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоСмены);
	Запрос.УстановитьПараметр("КонецПериода", КонецСмены);
	Выборка = Запрос.Выполнить().Выгрузить();
	Выборка.Сортировать("Период");
	
	Для Каждого СтрокаВыборка из Выборка Цикл
		Если (СтрокаВыборка.Период>=НачалоСмены) И (СтрокаВыборка.Период<=КонецСмены) Тогда
		Если (СтрокаВыборка.Должность.Наименование="Шиномонтажник") И (СтрокаВыборка.Помощник=Ложь) Тогда
			ОбластьЗаголовок.Параметры.Шиномонтажник=СтрокаВыборка.Сотрудник;
		ИначеЕсли (СтрокаВыборка.Должность.Наименование="Съемщик") И (СтрокаВыборка.Помощник=Ложь) Тогда
			ОбластьЗаголовок.Параметры.Съемщик=СтрокаВыборка.Сотрудник;
		ИначеЕсли (СтрокаВыборка.Должность.Наименование="Правщик дисков") И (СтрокаВыборка.Помощник=Ложь) Тогда
			ОбластьЗаголовок.Параметры.Дископравщик=СтрокаВыборка.Сотрудник;
			ДископравщикСегодня=СтрокаВыборка.Сотрудник;
		КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТабДок.Вывести(ОбластьЗаголовок);
	
	СуммаЛитых=0;
	СуммаСтальных=0;
	КоличествоКвитанций=0;
	//++DEV1		
	Профессия = Справочники.ШМ_Должности.НайтиПоНаименованию("Правщик дисков");
	Профессия2 = Справочники.ШМ_Должности.НайтиПоНаименованию("СПЦ");
	МассивПрофессий = Новый Массив;
	МассивПрофессий.Добавить(Профессия);
	МассивПрофессий.Добавить(Профессия2);
	//++DEV1 
	
	ЗапросНоменклатураДископравка = Новый Запрос;
	ЗапросНоменклатураДископравка.Текст = "ВЫБРАТЬ
	                                      |	ШМ_НоменклатураПрофессии.Материал КАК Материал
	                                      |ИЗ
	                                      |	РегистрСведений.ШМ_НоменклатураПрофессии КАК ШМ_НоменклатураПрофессии
	                                      |ГДЕ
	                                      |	ШМ_НоменклатураПрофессии.Профессия = &Профессия
	                                      |	И ШМ_НоменклатураПрофессии.Материал <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)"; 
	
	ЗапросНоменклатураДископравка.УстановитьПараметр("Профессия", Профессия);       
	
	ВыборкаНоменклатурыДископравка = ЗапросНоменклатураДископравка.Выполнить().Выгрузить();       
	
	
	
	ОбластьШапкаМатериалы = Макет.ПолучитьОбласть("МатериалыШапка"); 
	ОбластьСтрокаМатериалы = Макет.ПолучитьОбласть("МатериалыСтрока");   
	ТабДок.Вывести(ОбластьШапкаМатериалы);

			
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииНачальныйОстаток КАК ОстатокНачало,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииПриход КАК Приход,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииРасход КАК Расход,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииКонечныйОстаток КАК ОстатокКонец,
	               |	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
	               |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	               |	ЦеныНоменклатурыСрезПоследних.Цена * ТоварыНаСкладахОстаткиИОбороты.ВНаличииРасход КАК Сумма,
	               |	ТоварыНаСкладахОстаткиИОбороты.Склад КАК Склад
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , Номенклатура.ТипНоменклатуры = &ТипНоменклатуры) КАК ТоварыНаСкладахОстаткиИОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
	               |		ПО ТоварыНаСкладахОстаткиИОбороты.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
				   |ГДЕ
				   |	ТоварыНаСкладахОстаткиИОбороты.Номенклатура В(&Номенклатура)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииНачальныйОстаток,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииПриход,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииРасход,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииКонечныйОстаток,
	               |	ЦеныНоменклатурыСрезПоследних.Цена,
	               |	ТоварыНаСкладахОстаткиИОбороты.Склад
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Склад";
		
	Запрос.УстановитьПараметр("НачалоПериода", НачалоСмены);
	Запрос.УстановитьПараметр("КонецПериода", КонецСмены);
	Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар);  
	Запрос.УстановитьПараметр("Номенклатура", ВыборкаНоменклатурыДископравка);   
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Выборка = Запрос.Выполнить().Выгрузить();     
	
	//Склад = ПолучитьСклад(ПользователиКлиентСервер.ТекущийПользователь());//dev1 комент
	СтруктураПоиска = Новый Структура("Склад", Склад); 
	НайденныеСтроки = Выборка.НайтиСтроки(СтруктураПоиска); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииНачальныйОстаток КАК ОстатокНачало,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииПриход КАК Приход,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииРасход КАК Расход,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииКонечныйОстаток КАК ОстатокКонец,
	               |	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
	               |	ТоварыНаСкладахОстаткиИОбороты.Склад КАК Склад,
	               |	ТоварыНаСкладахОстаткиИОбороты.Период КАК Период
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Регистратор, , Номенклатура.ТипНоменклатуры = &ТипНоменклатуры) КАК ТоварыНаСкладахОстаткиИОбороты
	               |ГДЕ
	               |	ТоварыНаСкладахОстаткиИОбороты.Регистратор.ИмяКомпьютера = &ИмяКомпьютера
	               |	И ТоварыНаСкладахОстаткиИОбороты.Номенклатура В (&Номенклатура)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииНачальныйОстаток,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииПриход,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииРасход,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииКонечныйОстаток,
	               |	ТоварыНаСкладахОстаткиИОбороты.Склад,
	               |	ТоварыНаСкладахОстаткиИОбороты.Период
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период,
	               |	Номенклатура";   
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоСмены);
	Запрос.УстановитьПараметр("КонецПериода", КонецСмены);
	Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар);  
	Запрос.УстановитьПараметр("Номенклатура", ВыборкаНоменклатурыДископравка);  
	Запрос.УстановитьПараметр("ИмяКомпьютера", ТекущееРабочееМесто);
	
	Выборка2 = Запрос.Выполнить().Выгрузить();

	МассивМатериалов = Новый Массив;
	Если Выборка2.Количество() > 0 Тогда
		Материал = Выборка2[0];
		инд = 1;              
		
		Если инд = Выборка2.Количество() Тогда   
			МассивМатериалов.Добавить(Материал);
		КонецЕсли;
		
		Пока НЕ инд = Выборка2.Количество() Цикл
			Пока Материал.Номенклатура = Выборка2[инд].Номенклатура Цикл  
				Материал.Приход       = Материал.Приход + Выборка2[инд].Приход;
				Материал.Расход       = Материал.Расход + Выборка2[инд].Расход; 
				Материал.ОстатокКонец = Материал.ОстатокНачало + Материал.Приход - Материал.Расход;      
				инд      			  = инд + 1; 
				Если инд = Выборка2.Количество() Тогда  
					Прервать;
				КонецЕсли;
			КонецЦикла;   
			МассивМатериалов.Добавить(Материал);
			Если инд = Выборка2.Количество() Тогда  
				Прервать;
			КонецЕсли;
			Материал = Выборка2[инд]; 
			инд 	 = инд + 1;
			Если инд = Выборка2.Количество() Тогда 
				МассивМатериалов.Добавить(Материал);		
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	МатериалИтог = 0;  
	Номер = 1;
	Для каждого стр из НайденныеСтроки Цикл    
		
		ОбластьСтрокаМатериалы.Параметры.Номер  	   = Номер;
		ОбластьСтрокаМатериалы.Параметры.Номенклатура  = стр.Номенклатура;
		ОбластьСтрокаМатериалы.Параметры.ОстатокНачало = Строка(стр.ОстатокНачало);
		ОбластьСтрокаМатериалы.Параметры.Приход        = Строка(стр.Приход); 
		ОбластьСтрокаМатериалы.Параметры.ОстатокКонец  = Строка(стр.ОстатокКонец);
		ОбластьСтрокаМатериалы.Параметры.Цена          = Строка(стр.Цена); 
		
		Для каждого стр1 из МассивМатериалов Цикл  
			Если стр.Номенклатура = стр1.Номенклатура Тогда
				
				ОбластьСтрокаМатериалы.Параметры.Расход      = Строка(стр1.Расход);
				ОбластьСтрокаМатериалы.Параметры.СуммаКСдаче = Строка(стр1.Расход*стр.Цена);   
				МатериалИтог 		   						 = МатериалИтог + стр1.Расход*стр.Цена;
				Прервать;
				
			Иначе
				
				ОбластьСтрокаМатериалы.Параметры.Расход      = "0";
				ОбластьСтрокаМатериалы.Параметры.СуммаКСдаче = "0";
				
			КонецЕсли; 
		КонецЦикла;	  
		
		Номер = Номер + 1;
		
		ТабДок.Вывести(ОбластьСтрокаМатериалы);  
		
	КонецЦикла;
	
	ОбластьМатериалИтог = Макет.ПолучитьОбласть("ОбластьМатериалИтог");
	ОбластьМатериалИтог.Параметры.МатериалИтог = МатериалИтог;
	ТабДок.Вывести(ОбластьМатериалИтог);
	
	ОбластьПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	ТабДок.Вывести(ОбластьПустаяСтрока);

	//---  
	
	//1softpro pok 03.03.2025 +++ ЗАПОЛНЕНИЕ НОВОГО ПОДВАЛА           
	
	//Вспомогательные переменные 
	АлюминьВсего	  = 0; 
	АлюминьМатериалы  = 0;
	СПЦВсего		  = 0;
	СтальВсего 		  = 0;
	СтальМатериалы	  = 0;  
	
	ВсегоСдано = 0;
	
	ВспомогатеьнаяКассаВсего = Константы.ШМСуммаВспомогательнойКассы.Получить(); 
	Долг 					 = ДолгВспомогательнойКассы(ТекущееРабочееМесто);
	Остаток 				 = 0;
	
	//ЗапросРеалзацийМатериалы = Новый Запрос;
	//ЗапросРеалзацийМатериалы.Текст = "ВЫБРАТЬ
	//                                 |	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	//                                 |	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	//                                 |	РеализацияТоваровУслугТовары.Сумма КАК Сумма
	//                                 |ИЗ
	//                                 |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//                                 |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	//                                 |		ПО (РеализацияТоваровУслугТовары.Ссылка = РеализацияТоваровУслуг.Ссылка)
	//                                 |ГДЕ
	//                                 |	РеализацияТоваровУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	//                                 |	И РеализацияТоваровУслуг.ИмяКомпьютера = &ИмяКомпьютера
	//                                 |	И НЕ РеализацияТоваровУслуг.Комментарий ПОДОБНО &Комментарий
	//                                 |	И РеализацияТоваровУслуг.Проведен = ИСТИНА";
	//
	//ЗапросРеалзацийМатериалы.УстановитьПараметр("НачалоПериода", НачалоСмены);
	//ЗапросРеалзацийМатериалы.УстановитьПараметр("КонецПериода", КонецСмены);
	//ЗапросРеалзацийМатериалы.УстановитьПараметр("ИмяКомпьютера", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование);
	//ЗапросРеалзацийМатериалы.УстановитьПараметр("Комментарий", "Материалы"); 
	//
	//ВыборкаРеалзацийМатериалы = ЗапросРеалзацийМатериалы.Выполнить().Выбрать();
	
	ЗапросНоменклатураПрофессии = Новый Запрос;
	ЗапросНоменклатураПрофессии.Текст = "ВЫБРАТЬ
	                                    |	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка1,
	                                    |	СУММА(ШМ_НоменклатураПрофессии.МатериальныйВычет) КАК МатериальныйВычет,
	                                    |	ШМ_НоменклатураПрофессии.Номенклатура КАК Номенклатура,
	                                    |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	                                    |	ШМ_НоменклатураПрофессии.Дископравка КАК Дископравка,
	                                    |	ЦеныНоменклатурыСрезПоследних.Цена - ШМ_НоменклатураПрофессии.МатериальныйВычет КАК СтоимостьУслуги,
	                                    |	ШМ_НоменклатураПрофессии.Профессия КАК Профессия
	                                    |ИЗ
	                                    |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	                                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШМ_НоменклатураПрофессии КАК ШМ_НоменклатураПрофессии
	                                    |		ПО РеализацияТоваровУслугТовары.Номенклатура = ШМ_НоменклатураПрофессии.Номенклатура
	                                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
	                                    |		ПО РеализацияТоваровУслугТовары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	                                    |ГДЕ
	                                    |	РеализацияТоваровУслугТовары.Ссылка.Проведен = ИСТИНА
	                                    |	И РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	                                    |	И НЕ РеализацияТоваровУслугТовары.Ссылка.Комментарий ПОДОБНО &Комментарий
	                                    |	И РеализацияТоваровУслугТовары.Ссылка.ИмяКомпьютера = &ИмяКомпьютера
	                                    |	И ШМ_НоменклатураПрофессии.Профессия В(&Профессия)
	                                    |
	                                    |СГРУППИРОВАТЬ ПО
	                                    |	РеализацияТоваровУслугТовары.Ссылка,
	                                    |	ШМ_НоменклатураПрофессии.Номенклатура,
	                                    |	ЦеныНоменклатурыСрезПоследних.Цена,
	                                    |	ШМ_НоменклатураПрофессии.Дископравка,
	                                    |	ЦеныНоменклатурыСрезПоследних.Цена - ШМ_НоменклатураПрофессии.МатериальныйВычет,
	                                    |	ШМ_НоменклатураПрофессии.Профессия";
	
	ЗапросНоменклатураПрофессии.УстановитьПараметр("НачалоПериода", НачалоСмены);     
	ЗапросНоменклатураПрофессии.УстановитьПараметр("КонецПериода", КонецСмены);
	ЗапросНоменклатураПрофессии.УстановитьПараметр("Комментарий", "Материалы");
	ЗапросНоменклатураПрофессии.УстановитьПараметр("ИмяКомпьютера", ТекущееРабочееМесто);
	ЗапросНоменклатураПрофессии.УстановитьПараметр("Профессия", МассивПрофессий);
	//ЗапросНоменклатураПрофессии.УстановитьПараметр("Профессия", Профессия);//DEV1
	
	ВыборкаНоменклатураПрофессии = ЗапросНоменклатураПрофессии.Выполнить().Выбрать();
	
	Пока ВыборкаНоменклатураПрофессии.Следующий() Цикл  
		//СтруктураПоиска = Новый Структура("Номенклатура", ВыборкаРеалзацийМатериалы.Номенклатура); 
		//НайденныеСтроки = ВыборкаНоменклатураПрофессии.НайтиСтроки(СтруктураПоиска);
		//++dev1
		Проф = Справочники.ШМ_Должности.НайтиПоНаименованию("СПЦ");
		Если ВыборкаНоменклатураПрофессии.Профессия = Проф тогда
			СПЦВсего = СПЦВсего + ВыборкаНоменклатураПрофессии.СтоимостьУслуги;
		КонецЕсли;
		//--dev1
		Если ВыборкаНоменклатураПрофессии.Дископравка = Перечисления.ШМ_Дископравка.Стальной Тогда
			СтальВсего 	   = СтальВсего + ВыборкаНоменклатураПрофессии.СтоимостьУслуги;  
			СтальМатериалы = СтальМатериалы + ВыборкаНоменклатураПрофессии.МатериальныйВычет;
		ИначеЕсли ВыборкаНоменклатураПрофессии.Дископравка = Перечисления.ШМ_Дископравка.Лекгосплавный Тогда
			АлюминьВсего 	 = АлюминьВсего + ВыборкаНоменклатураПрофессии.СтоимостьУслуги;    
			АлюминьМатериалы = АлюминьМатериалы + ВыборкаНоменклатураПрофессии.МатериальныйВычет;
		КонецЕсли;
	
	КонецЦикла; 
	
	//////++dev1
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	РеализацияТоваровУслуг.Ссылка КАК Ссылка
	//               |ИЗ
	//               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//               |ГДЕ
	//               |	РеализацияТоваровУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	//               |	И РеализацияТоваровУслуг.Проведен = &Проведен
	//               |	И РеализацияТоваровУслуг.Комментарий НЕ ПОДОБНО &Комментарий
	//               |	И РеализацияТоваровУслуг.ИмяКомпьютера = &ИмяКомпьютера";
	//       
	//Запрос.УстановитьПараметр("НачалоПериода", НачалоСмены);
	//Запрос.УстановитьПараметр("КонецПериода", КонецСмены);
	//Запрос.УстановитьПараметр("Проведен", Истина);
	//Запрос.УстановитьПараметр("Комментарий", "Материалы");
	//Запрос.УстановитьПараметр("ИмяКомпьютера", ТекущееРабочееМесто);        
	//
	//ВыбРеалЧерновик = Запрос.Выполнить().Выбрать();
	//
	//Пока ВыбРеалЧерновик.Следующий() Цикл
	//	СПЦВсего = СПЦВсего + ВыбРеалЧерновик.Ссылка.СуммаСПЦЧерновик; 
	//КонецЦикла;
	//ОбластьПодвал.Параметры.СПЦВсего = Строка(СПЦВсего);
	////---dev1
	
	

		
	//Сколько дископравщик забрал денег пр закрытии смены
	Забрал = СотрудникЗабрал(НачалоСмены, КонецСмены, Профессия);   
	
	//Количество квитанций
	КоличествоКвитанций = КоличествоКвитанций(НачалоСмены, КонецСмены, Профессия, ТекущееРабочееМесто);
	
	////Процент заработанных денег сотрудников
	//АлюминийПроцент = АлюминийПроцент(); 
	//СтальПроцент	= СтальПроцент();
	
	//ЗаработанныеДеньгиСотрудником
	//АлюминьЗаработал = (АлюминьВсего - АлюминьМатериалы)*АлюминийПроцент/100;
	//СтальЗаработал   = (СтальВсего - СтальМатериалы)*СтальПроцент/100;     
	
	АлюминьЗаработал = АлюминийЗаработал(НачалоСмены, КонецСмены, Профессия, ТекущееРабочееМесто);
	СтальЗаработал   = СтальЗаработал(НачалоСмены, КонецСмены, Профессия, ТекущееРабочееМесто);
	
	ВсегоСдано = АлюминьВсего + СтальВсего - Забрал + АлюминьМатериалы + СтальМатериалы; 
	
	//СПЦ
	ОбластьПодвал.Параметры.СПЦВсего 			 = Строка(СПЦВсего);
	
	//Алюминий	
	ОбластьПодвал.Параметры.АлВсего 	 		 = Строка(АлюминьВсего ); 
	ОбластьПодвал.Параметры.АлЗаработано 		 = Строка(АлюминьЗаработал);
	
	//Сталь
	ОбластьПодвал.Параметры.СтВсего 	 		 = Строка(СтальВсего);
	ОбластьПодвал.Параметры.СтЗаработано 		 = Строка(СтальЗаработал);
	
	//Диски     
	ОбластьПодвал.Параметры.ДискиВсего           = Строка(АлюминьВсего + СтальВсего);
	ОбластьПодвал.Параметры.ЗаработаноВсего		 = Строка(АлюминьЗаработал + СтальЗаработал);
	ОбластьПодвал.Параметры.Забрал				 = Строка(Забрал);
	ОбластьПодвал.Параметры.Оставил              = Строка(АлюминьЗаработал + СтальЗаработал - Забрал);
	ОбластьПодвал.Параметры.ДискиСдал            = Строка(АлюминьВсего + СтальВсего - Забрал);
	ОбластьПодвал.Параметры.ВсегоСдано			 = Строка(ВсегоСдано);                             
	
	//Материалы
	ОбластьПодвал.Параметры.МатСдал 	 		 = Строка(АлюминьМатериалы + СтальМатериалы);

	//Вспомогательная касса
	ОбластьПодвал.Параметры.ВспомогательнаяКасса = Строка(ВспомогатеьнаяКассаВсего);
	ОбластьПодвал.Параметры.Долг	 			 = Строка(Долг);
	ОбластьПодвал.Параметры.Остаток 		     = Строка(ВспомогатеьнаяКассаВсего - Долг);  
	ОбластьПодвал.Параметры.КоличествоКвитанций  = Строка(КоличествоКвитанций);
	
	
	ТабДок.Вывести(ОбластьПодвал);     
	
	ОбластьПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	ТабДок.Вывести(ОбластьПустаяСтрока); 
	ОбластьПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	ТабДок.Вывести(ОбластьПустаяСтрока);
	
	//1softpro pok --- ЗАПОЛНЕНИЕ НОВОГО ПОДВАЛА
	
	ОбластьШапкаСтойки=Макет.ПолучитьОбласть("ШапкаСтойки");
	ОбластьСтрокаСтойки=Макет.ПолучитьОбласть("СтрокаСтойки");
	ТабДок.Вывести(ОбластьШапкаСтойки);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_Стойка.Продано КАК Продано,
		|	ШМ_Стойка.Номенклатура КАК Номенклатура,
		|	ШМ_Стойка.НоменклатураТекст КАК НоменклатураТекст,
		|	ШМ_Стойка.ДатаПоступления КАК ДатаПоступления,
		|	ШМ_Стойка.Идентификатор КАК Идентификатор,
		|	ШМ_Стойка.ДатаПродажи КАК ДатаПродажи,
		|	ШМ_Стойка.Комплект КАК Комплект,
		|	ШМ_Стойка.Цена КАК Цена,
		|	ШМ_Стойка.ЦенаПродажи КАК ЦенаПродажи,
		|	ШМ_Стойка.Артикул КАК Артикул,
		|	ШМ_Стойка.Радиус КАК Радиус,
		|	ШМ_Стойка.Ширина КАК Ширина,
		|	ШМ_Стойка.Высота КАК Высота,
		|	ШМ_Стойка.Бренд КАК Бренд,
		|	ШМ_Стойка.Зимняя КАК Зимняя,
		|	ШМ_Стойка.Год КАК Год,
		|	ШМ_Стойка.Сотрудник1 КАК Сотрудник1,
		|	ШМ_Стойка.Сотрудник2 КАК Сотрудник2,
		|	ШМ_Стойка.Сотрудник3 КАК Сотрудник3
		|ИЗ
		|	РегистрСведений.ШМ_Стойка КАК ШМ_Стойка
		|ГДЕ
		|	ШМ_Стойка.Продано = ИСТИНА
		|	И ШМ_Стойка.ДатаПродажи МЕЖДУ &ДатаНач И &ДатаКон
		|	И ШМ_Стойка.ТочкаПродажи = &ТочкаПродажи";
	
	Запрос.УстановитьПараметр("ДатаНач", НачалоСмены);
	Запрос.УстановитьПараметр("ДатаКон", КонецСмены);
	Запрос.УстановитьПараметр("ТочкаПродажи", ТекущееРабочееМесто);
	
	Выборка = Запрос.Выполнить().Выгрузить();
	////Выборка.Сортировать("Радиус,Артикул");
	////Таб.Загрузить(Выборка);
	Для Каждого СтрокаВыборка Из Выборка Цикл
	////	СтрокаТаб.Номенклатура=Справочники.Номенклатура.НайтиПоКоду("00-00000734");
		ОбластьСтрокаСтойки.Параметры.ДатаПост=СтрокаВыборка.ДатаПоступления;
		ОбластьСтрокаСтойки.Параметры.ДатаПрод=СтрокаВыборка.ДатаПродажи;
		ОбластьСтрокаСтойки.Параметры.ЦенаУст=СтрокаВыборка.Цена;
		ОбластьСтрокаСтойки.Параметры.ЦенаПрод=СтрокаВыборка.ЦенаПродажи;
		ОбластьСтрокаСтойки.Параметры.Артикул=СтрокаВыборка.Артикул;
		ОбластьСтрокаСтойки.Параметры.Радиус=СтрокаВыборка.Радиус;
		ОбластьСтрокаСтойки.Параметры.Ширина=СтрокаВыборка.Ширина;
		ОбластьСтрокаСтойки.Параметры.Высота=СтрокаВыборка.Высота;
		ОбластьСтрокаСтойки.Параметры.Бренд=СтрокаВыборка.Бренд;
		ОбластьСтрокаСтойки.Параметры.Зима=СтрокаВыборка.Зимняя;
		ОбластьСтрокаСтойки.Параметры.Год=СтрокаВыборка.Год;
		ОбластьСтрокаСтойки.Параметры.Сотр1=СтрокаВыборка.Сотрудник1;
		ОбластьСтрокаСтойки.Параметры.Сотр2=СтрокаВыборка.Сотрудник2;
		ОбластьСтрокаСтойки.Параметры.Сотр3=СтрокаВыборка.Сотрудник3;
		ТабДок.Вывести(ОбластьСтрокаСтойки);
	КонецЦикла;
	
	ТабДок.ТолькоПросмотр = Истина;
	Возврат ТабДок;
	
КонецФункции     
&НаСервере
Функция КоличествоКвитанций(НачалоСмены, КонецСмены, Профессия, ИмяКомпьютера)     
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
	               |	1 КАК Количество,
	               |	ШМ_НоменклатураПрофессии.Дископравка КАК Дископравка
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШМ_НоменклатураПрофессии КАК ШМ_НоменклатураПрофессии
	               |		ПО РеализацияТоваровУслугТовары.Номенклатура = ШМ_НоменклатураПрофессии.Номенклатура
	               |ГДЕ
	               |	ШМ_НоменклатураПрофессии.Профессия = &Профессия
	               |	И РеализацияТоваровУслугТовары.Ссылка.Проведен = ИСТИНА
	               |	И РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	               |	И НЕ РеализацияТоваровУслугТовары.Ссылка.Комментарий ПОДОБНО &Комментарий
	               |	И РеализацияТоваровУслугТовары.Ссылка.ИмяКомпьютера = &ИмяКомпьютера
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РеализацияТоваровУслугТовары.Ссылка,
	               |	ШМ_НоменклатураПрофессии.Дископравка"; 
	
	Запрос.УстановитьПараметр("Профессия", Профессия); 
	Запрос.УстановитьПараметр("НачалоПериода", НачалоСмены);
	Запрос.УстановитьПараметр("КонецПериода", КонецСмены);
	Запрос.УстановитьПараметр("Комментарий", "Материалы");
	Запрос.УстановитьПараметр("ИмяКомпьютера", ИмяКомпьютера);   
	
	Выборка = Запрос.Выполнить().Выгрузить();
	
	КоличествоКвитанций = 0;
	Для каждого стр из Выборка Цикл 
		КоличествоКвитанций = КоличествоКвитанций + стр.Количество;
	КонецЦикла;   
	
	Возврат КоличествоКвитанций

КонецФункции

&НаСервере
Функция СотрудникЗабрал(НачалоСмены, КонецСмены, Профессия)     
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ШМ_Затраты.Период КАК Период,
	               |	ШМ_Затраты.Затрата КАК Затрата,
	               |	ШМ_Затраты.Сотрудник КАК Сотрудник,
	               |	ШМ_Затраты.Профессия КАК Профессия,
	               |	ШМ_Затраты.Сумма КАК Сумма
	               |ИЗ
	               |	РегистрСведений.ШМ_Затраты КАК ШМ_Затраты
	               |ГДЕ
	               |	ШМ_Затраты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	               |	И ШМ_Затраты.Профессия = &Профессия";   
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоСмены);    
	Запрос.УстановитьПараметр("КонецПериода", КонецСмены);
	//Запрос.УстановитьПараметр("Сотрудник", ДископравщикСегодня);
	Запрос.УстановитьПараметр("Профессия", Профессия);  
	
	ВыборкаВыплат = Запрос.Выполнить().Выбрать();     
	
	Забрал = 0;
	
	Пока ВыборкаВыплат.Следующий() Цикл
		Забрал = Забрал + ВыборкаВыплат.Сумма;
	КонецЦикла;
	
	Возврат Забрал;
	
КонецФункции

&НаСервере
Функция АлюминийЗаработал(НачалоСмены, КонецСмены, Профессия, ТекущееРабочееМесто)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ШМ_ИсполнителиРабот.Реализация КАК Реализация,
	               |	ШМ_ИсполнителиРабот.Номенклатура КАК Номенклатура,
	               |	ШМ_ИсполнителиРабот.Исполнитель КАК Исполнитель,
	               |	ШМ_ИсполнителиРабот.ИдентификаторСтойки КАК ИдентификаторСтойки,
	               |	ШМ_ИсполнителиРабот.Помощник КАК Помощник,
	               |	ШМ_ИсполнителиРабот.Сумма КАК Сумма
	               |ИЗ
	               |	РегистрСведений.ШМ_ИсполнителиРабот КАК ШМ_ИсполнителиРабот
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШМ_НоменклатураПрофессии КАК ШМ_НоменклатураПрофессии
	               |		ПО ШМ_ИсполнителиРабот.Номенклатура = ШМ_НоменклатураПрофессии.Номенклатура
	               |ГДЕ
	               |	ШМ_ИсполнителиРабот.Реализация.Дата МЕЖДУ &НачалоСмены И &КонецСмены
	               |	И ШМ_ИсполнителиРабот.Реализация.Проведен = ИСТИНА
	               |	И НЕ ШМ_ИсполнителиРабот.Реализация.Комментарий ПОДОБНО &Комментарий
	               |	И ШМ_ИсполнителиРабот.Реализация.ИмяКомпьютера = &ИмяКомпьютера
	               |	И ШМ_НоменклатураПрофессии.Профессия = &Профессия
	               |	И ШМ_НоменклатураПрофессии.Дископравка = &Дископравка";   
	
	Запрос.УстановитьПараметр("Профессия", Профессия);   
	Запрос.УстановитьПараметр("НачалоСмены", НачалоСмены);
	Запрос.УстановитьПараметр("КонецСмены", КонецСмены);
	Запрос.УстановитьПараметр("ИмяКомпьютера", ТекущееРабочееМесто);  
	Запрос.УстановитьПараметр("Комментарий", "Материалы");      
	Запрос.УстановитьПараметр("Дископравка", Перечисления.ШМ_Дископравка.Лекгосплавный);
	
	Выборка = Запрос.Выполнить().Выгрузить();    
	
	Сумма = 0;
	
	Для каждого стр из Выборка Цикл  
		Сумма = Сумма + стр.Сумма;
	КонецЦикла;
	
	Возврат Сумма
	
КонецФункции  

&НаСервере
Функция СтальЗаработал(НачалоСмены, КонецСмены, Профессия, ТекущееРабочееМесто)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ШМ_ИсполнителиРабот.Реализация КАК Реализация,
	               |	ШМ_ИсполнителиРабот.Номенклатура КАК Номенклатура,
	               |	ШМ_ИсполнителиРабот.Исполнитель КАК Исполнитель,
	               |	ШМ_ИсполнителиРабот.ИдентификаторСтойки КАК ИдентификаторСтойки,
	               |	ШМ_ИсполнителиРабот.Помощник КАК Помощник,
	               |	ШМ_ИсполнителиРабот.Сумма КАК Сумма
	               |ИЗ
	               |	РегистрСведений.ШМ_ИсполнителиРабот КАК ШМ_ИсполнителиРабот
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШМ_НоменклатураПрофессии КАК ШМ_НоменклатураПрофессии
	               |		ПО ШМ_ИсполнителиРабот.Номенклатура = ШМ_НоменклатураПрофессии.Номенклатура
	               |ГДЕ
	               |	ШМ_ИсполнителиРабот.Реализация.Дата МЕЖДУ &НачалоСмены И &КонецСмены
	               |	И ШМ_ИсполнителиРабот.Реализация.Проведен = ИСТИНА
	               |	И НЕ ШМ_ИсполнителиРабот.Реализация.Комментарий ПОДОБНО &Комментарий
	               |	И ШМ_ИсполнителиРабот.Реализация.ИмяКомпьютера = &ИмяКомпьютера
	               |	И ШМ_НоменклатураПрофессии.Профессия = &Профессия
	               |	И ШМ_НоменклатураПрофессии.Дископравка = &Дископравка";   
	
	Запрос.УстановитьПараметр("Профессия", Профессия);   
	Запрос.УстановитьПараметр("НачалоСмены", НачалоСмены);
	Запрос.УстановитьПараметр("КонецСмены", КонецСмены);
	Запрос.УстановитьПараметр("ИмяКомпьютера", ТекущееРабочееМесто);  
	Запрос.УстановитьПараметр("Комментарий", "Материалы");      
	Запрос.УстановитьПараметр("Дископравка", Перечисления.ШМ_Дископравка.Стальной);
	
	Выборка = Запрос.Выполнить().Выгрузить();    
	
	Сумма = 0;
	
	Для каждого стр из Выборка Цикл  
		Сумма = Сумма + стр.Сумма;
	КонецЦикла;
	
	Возврат Сумма
	
КонецФункции


&НаСервере
Функция ДолгВспомогательнойКассы(ТекущееРабочееМесто) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ШМ_ОтложенныеЧеки.Сумма) КАК Сумма
	               |ИЗ
	               |	РегистрСведений.ШМ_ОтложенныеЧеки КАК ШМ_ОтложенныеЧеки
	               |ГДЕ
	               |	ШМ_ОтложенныеЧеки.Отбит = ЛОЖЬ
	               |	И ШМ_ОтложенныеЧеки.РабочееМесто = &РабочееМесто";
	
	Запрос.УстановитьПараметр("РабочееМесто", ТекущееРабочееМесто);      
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Если Выборка.Количество() > 0 Тогда  
		Если ЗначениеЗаполнено(Выборка[0].Сумма) Тогда
			Возврат Выборка[0].Сумма   
		Иначе 
			Возврат 0 
		КонецЕсли;
	Иначе 
		Возврат 0
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТабДокДископравка()
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Закр_Смены";
	Макет = ПолучитьМакетДископравка();
	
	НачалоСмены=НачалоСмены();
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Шапка");
	ОбластьПодвал = Макет.ПолучитьОбласть("ПодвалНовый");
	
	ДископравщикСегодня=Неопределено;
	ОбластьЗаголовок.Параметры.ДатаОтчета=Формат(НачалоСмены,"ДЛФ=Д");
	ОбластьЗаголовок.Параметры.Шиномонтажник="";
	ОбластьЗаголовок.Параметры.Съемщик="";
	ОбластьЗаголовок.Параметры.Дископравщик="";
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_БригадыСрезПоследних.Должность КАК Должность,
		|	ШМ_БригадыСрезПоследних.Помощник КАК Помощник,
		|	ШМ_БригадыСрезПоследних.ИмяКомпьютера КАК ИмяКомпьютера,
		|	ШМ_БригадыСрезПоследних.Сотрудник КАК Сотрудник,
		|	ШМ_БригадыСрезПоследних.Период КАК Период
		|ИЗ
		|	РегистрСведений.ШМ_Бригады.СрезПоследних КАК ШМ_БригадыСрезПоследних
		|ГДЕ
		|	ШМ_БригадыСрезПоследних.ИмяКомпьютера = &ИмяКомпьютера"; 
	
	Запрос.УстановитьПараметр("ИмяКомпьютера", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование);
	Выборка = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаВыборка из Выборка Цикл
		Если (СтрокаВыборка.Должность.Наименование="Шиномонтажник") И (СтрокаВыборка.Помощник=Ложь) Тогда
			ОбластьЗаголовок.Параметры.Шиномонтажник=СтрокаВыборка.Сотрудник;
		ИначеЕсли (СтрокаВыборка.Должность.Наименование="Съемщик") И (СтрокаВыборка.Помощник=Ложь) Тогда
			ОбластьЗаголовок.Параметры.Съемщик=СтрокаВыборка.Сотрудник;
		ИначеЕсли (СтрокаВыборка.Должность.Наименование="Правщик дисков") И (СтрокаВыборка.Помощник=Ложь) Тогда
			ОбластьЗаголовок.Параметры.Дископравщик=СтрокаВыборка.Сотрудник;
			ДископравщикСегодня=СтрокаВыборка.Сотрудник;
		КонецЕсли;
	КонецЦикла;
	
	ТабДок.Вывести(ОбластьЗаголовок);
	
	СуммаЛитых=0;
	СуммаСтальных=0;
	КоличествоКвитанций=0;
	
	//ВыбРеал = Документы.РеализацияТоваровУслуг.Выбрать(НачалоДня(ТекущаяДата()),КонецДня(ТекущаяДата()));     
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	               |	РеализацияТоваровУслугТовары.Сумма КАК Сумма,
	               |	РеализацияТоваровУслуг.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |		ПО РеализацияТоваровУслугТовары.Ссылка = РеализацияТоваровУслуг.Ссылка
	               |ГДЕ
	               |	РеализацияТоваровУслуг.Проведен = ИСТИНА
	               |	И РеализацияТоваровУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	               |	И РеализацияТоваровУслуг.ИмяКомпьютера = &ИмяКомпьютера
	               |	И НЕ РеализацияТоваровУслуг.Комментарий ПОДОБНО &Комментарий";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоСмены);   
	Запрос.УстановитьПараметр("КонецПериода", ТекущаяДата());     
	Запрос.УстановитьПараметр("Комментарий", "Материалы");
	Запрос.УстановитьПараметр("ИмяКомпьютера", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование);
	
	ВыбРеал = Запрос.Выполнить().Выбрать();	
	
	Пока ВыбРеал.Следующий() Цикл

		ПлюсуемКвитанцию=Ложь;
		//Для Каждого СтрокаДок из ВыбРеал.Товары Цикл
			НаборНомПроф=РегистрыСведений.ШМ_НоменклатураПрофессии.СоздатьНаборЗаписей();
			НаборНомПроф.Отбор.Номенклатура.Установить(ВыбРеал.Номенклатура,Истина);
			НаборНомПроф.Прочитать();
			Для Каждого СтрНаборНомПроф Из НаборНомПроф Цикл
				Если СтрНаборНомПроф.Дископравка=Перечисления.ШМ_Дископравка.Стальной Тогда
					СуммаСтальных=СуммаСтальных+ВыбРеал.Сумма;
					ПлюсуемКвитанцию=Истина;
					Прервать;
				КонецЕсли;
				Если СтрНаборНомПроф.Дископравка=Перечисления.ШМ_Дископравка.Лекгосплавный Тогда
					СуммаЛитых=СуммаЛитых+ВыбРеал.Сумма;
					ПлюсуемКвитанцию=Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		//КонецЦикла;
		Если ПлюсуемКвитанцию Тогда
			КоличествоКвитанций=КоличествоКвитанций+1;
		КонецЕсли;
	КонецЦикла;
	
	СуммаВыплачено=0;
	//ВыборкаВыплат=РегистрыСведений.ШМ_Затраты.Выбрать(НачалоДня(ТекущаяДата()),КонецДня(ТекущаяДата()));    
	
	Профессия = Справочники.ШМ_Должности.НайтиПоНаименованию("Правщик дисков");
	
	Запорс = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ШМ_Затраты.Период КАК Период,
	               |	ШМ_Затраты.Затрата КАК Затрата,
	               |	ШМ_Затраты.Сотрудник КАК Сотрудник,
	               |	ШМ_Затраты.Профессия КАК Профессия,
	               |	ШМ_Затраты.Сумма КАК Сумма
	               |ИЗ
	               |	РегистрСведений.ШМ_Затраты КАК ШМ_Затраты
	               |ГДЕ
	               |	ШМ_Затраты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	               |	И ШМ_Затраты.Сотрудник = &Сотрудник
	               |	И ШМ_Затраты.Профессия = &Профессия";   
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоСмены);    
	Запрос.УстановитьПараметр("КонецПериода", ТекущаяДата());
	Запрос.УстановитьПараметр("Сотрудник", ДископравщикСегодня);
	Запрос.УстановитьПараметр("Профессия", Профессия);  
	
	ВыборкаВыплат = Запрос.Выполнить().Выбрать();     
	
	Пока ВыборкаВыплат.Следующий() Цикл
		СуммаВыплачено=СуммаВыплачено+ВыборкаВыплат.Сумма;
	КонецЦикла;
	
	////1softpro pok +++ закомментировал, перенес подвал ниже, чтобы сначала выводилась ТЧ материалы, а уже после подвал
	//ОбластьПодвал.Параметры.АлюмВсего = СуммаЛитых;
	//ОбластьПодвал.Параметры.СталльВсего = СуммаСтальных;
	//ОбластьПодвал.Параметры.ДископравкаПолучил = СуммаВыплачено;
	//ОбластьПодвал.Параметры.ДископравкаСдал = СуммаЛитых+СуммаСтальных-СуммаВыплачено;
	//ОбластьПодвал.Параметры.Количество_квитанций = КоличествоКвитанций;
	//ОбластьПодвал.Параметры.Всего_сдано = СуммаЛитых+СуммаСтальных-СуммаВыплачено;
	//
	//ТабДок.Вывести(ОбластьПодвал);  
	////1softpro pok ---
	
	//1softpro pok +++ 10.02.2025 Добавление в Чистовик макета Дископравка ТЧ с материалами
	
	Профессия = Справочники.ШМ_Должности.НайтиПоНаименованию("Правщик дисков");
	Склад =  ПолучитьСклад(ПользователиКлиентСервер.ТекущийПользователь());	
	
	ЗапросНоменклатураДископравка = Новый Запрос;
	ЗапросНоменклатураДископравка.Текст = "ВЫБРАТЬ
	                                      |	ШМ_НоменклатураПрофессии.Материал КАК Материал
	                                      |ИЗ
	                                      |	РегистрСведений.ШМ_НоменклатураПрофессии КАК ШМ_НоменклатураПрофессии
	                                      |ГДЕ
	                                      |	ШМ_НоменклатураПрофессии.Профессия = &Профессия
	                                      |	И ШМ_НоменклатураПрофессии.Материал <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)"; 
	
	ЗапросНоменклатураДископравка.УстановитьПараметр("Профессия", Профессия);       
	
	ВыборкаНоменклатурыДископравка = ЗапросНоменклатураДископравка.Выполнить().Выгрузить();       
	
	
	ОбластьШапкаМатериалы = Макет.ПолучитьОбласть("МатериалыШапка"); 
	ОбластьСтрокаМатериалы = Макет.ПолучитьОбласть("МатериалыСтрока");   
	ТабДок.Вывести(ОбластьШапкаМатериалы);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииНачальныйОстаток КАК ОстатокНачало,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииПриход КАК Приход,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииРасход КАК Расход,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииКонечныйОстаток КАК ОстатокКонец,
	               |	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
	               |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	               |	ЦеныНоменклатурыСрезПоследних.Цена * ТоварыНаСкладахОстаткиИОбороты.ВНаличииРасход КАК Сумма,
	               |	ТоварыНаСкладахОстаткиИОбороты.Склад КАК Склад
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , Номенклатура.ТипНоменклатуры = &ТипНоменклатуры) КАК ТоварыНаСкладахОстаткиИОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
	               |		ПО ТоварыНаСкладахОстаткиИОбороты.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
				   |ГДЕ
				   |	ТоварыНаСкладахОстаткиИОбороты.Номенклатура В(&Номенклатура)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииНачальныйОстаток,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииПриход,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииРасход,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииКонечныйОстаток,
	               |	ЦеныНоменклатурыСрезПоследних.Цена,
	               |	ТоварыНаСкладахОстаткиИОбороты.Склад
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Склад";
		
	Запрос.УстановитьПараметр("НачалоПериода", НачалоСмены);
	Запрос.УстановитьПараметр("КонецПериода", ТекущаяДата());
	Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар);  
	Запрос.УстановитьПараметр("Номенклатура", ВыборкаНоменклатурыДископравка);   
	//Запрос.УстановитьПараметр("Склад", ПолучитьСклад(ПользователиКлиентСервер.ТекущийПользователь()));
	
	Выборка = Запрос.Выполнить().Выгрузить();     
	
	Склад = ПолучитьСклад(ПользователиКлиентСервер.ТекущийПользователь());
	СтруктураПоиска = Новый Структура("Склад", Склад); 
	НайденныеСтроки = Выборка.НайтиСтроки(СтруктураПоиска); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииНачальныйОстаток КАК ОстатокНачало,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииПриход КАК Приход,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииРасход КАК Расход,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииКонечныйОстаток КАК ОстатокКонец,
	               |	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
	               |	ТоварыНаСкладахОстаткиИОбороты.Склад КАК Склад,
	               |	ТоварыНаСкладахОстаткиИОбороты.Период КАК Период
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Регистратор, , Номенклатура.ТипНоменклатуры = &ТипНоменклатуры) КАК ТоварыНаСкладахОстаткиИОбороты
	               |ГДЕ
	               |	ТоварыНаСкладахОстаткиИОбороты.Регистратор.ИмяКомпьютера = &ИмяКомпьютера
	               |	И ТоварыНаСкладахОстаткиИОбороты.Номенклатура В (&Номенклатура)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииНачальныйОстаток,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииПриход,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииРасход,
	               |	ТоварыНаСкладахОстаткиИОбороты.ВНаличииКонечныйОстаток,
	               |	ТоварыНаСкладахОстаткиИОбороты.Склад,
	               |	ТоварыНаСкладахОстаткиИОбороты.Период
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период,
	               |	Номенклатура";   
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоСмены);
	Запрос.УстановитьПараметр("КонецПериода", ТекущаяДата());
	Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар);  
	Запрос.УстановитьПараметр("Номенклатура", ВыборкаНоменклатурыДископравка);  
	Запрос.УстановитьПараметр("ИмяКомпьютера", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование);
	
	Выборка2 = Запрос.Выполнить().Выгрузить();

	МассивМатериалов = Новый Массив; 
	
	Если Выборка2.Количество() > 0 Тогда
		Материал = Выборка2[0];
		инд = 1;      
		
		Если инд = Выборка2.Количество() Тогда   
			МассивМатериалов.Добавить(Материал);
		КонецЕсли;
		
		Пока НЕ инд = Выборка2.Количество() Цикл
			Пока Материал.Номенклатура = Выборка2[инд].Номенклатура Цикл  
				Материал.Приход = Материал.Приход + Выборка2[инд].Приход;
				Материал.Расход = Материал.Расход + Выборка2[инд].Расход; 
				Материал.ОстатокКонец = Материал.ОстатокНачало + Материал.Приход - Материал.Расход;      
				инд = инд + 1; 
				Если инд = Выборка2.Количество() Тогда  
					Прервать;
				КонецЕсли;
			КонецЦикла;   
			МассивМатериалов.Добавить(Материал);
			Если инд = Выборка2.Количество() Тогда  
				Прервать;
			КонецЕсли;
			Материал = Выборка2[инд]; 
			инд = инд + 1;
			Если инд = Выборка2.Количество() Тогда 
				МассивМатериалов.Добавить(Материал);		
			КонецЕсли;
		КонецЦикла;    
	КонецЕсли;
	                                                       
	МатериалИтог = 0;
	Для каждого стр из НайденныеСтроки Цикл    
		
		ОбластьСтрокаМатериалы.Параметры.Номенклатура  = стр.Номенклатура;
		ОбластьСтрокаМатериалы.Параметры.ОстатокНачало = Строка(стр.ОстатокНачало);
		ОбластьСтрокаМатериалы.Параметры.Приход        = Строка(стр.Приход); 
		ОбластьСтрокаМатериалы.Параметры.ОстатокКонец  = Строка(стр.ОстатокКонец);
		ОбластьСтрокаМатериалы.Параметры.Цена          = Строка(стр.Цена); 
		
		Для каждого стр1 из МассивМатериалов Цикл  
			Если стр.Номенклатура = стр1.Номенклатура Тогда
				
				ОбластьСтрокаМатериалы.Параметры.Расход        = Строка(стр1.Расход);
				ОбластьСтрокаМатериалы.Параметры.СуммаКСдаче  	   = Строка(стр1.Расход*стр.Цена);   
				МатериалИтог 		   = МатериалИтог + стр1.Расход*стр.Цена;
				Прервать;
				
			Иначе
				
				ОбластьСтрокаМатериалы.Параметры.Расход        = "0";
				ОбластьСтрокаМатериалы.Параметры.СуммаКСдаче		   = "0";
				
			КонецЕсли; 
		КонецЦикла;	  
		
		ТабДок.Вывести(ОбластьСтрокаМатериалы);  
		
	КонецЦикла;
	
	ОбластьМатериалИтог						   = Макет.ПолучитьОбласть("ОбластьМатериалИтог");
	ОбластьМатериалИтог.Параметры.МатериалИтог = МатериалИтог;
	ТабДок.Вывести(ОбластьМатериалИтог);

	ОбластьПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	ТабДок.Вывести(ОбластьПустаяСтрока);
	
	//--- 
	
	//////1softpro pok +++ закомментировал, перенес подвал пониже, чтобы сначала выводилась ТЧ материалы, а уже после подвал
	////ОбластьПодвал.Параметры.АлюмВсего 				= Строка(СуммаЛитых);
	////ОбластьПодвал.Параметры.СталльВсего 			= Строка(СуммаСтальных);
	////ОбластьПодвал.Параметры.ДископравкаПолучил 		= Строка(СуммаВыплачено);
	////ОбластьПодвал.Параметры.ДископравкаСдал 		= Строка(СуммаЛитых + СуммаСтальных - СуммаВыплачено);
	////ОбластьПодвал.Параметры.Количество_квитанций 	= Строка(КоличествоКвитанций);
	////ОбластьПодвал.Параметры.Всего_сдано 			= Строка(СуммаЛитых + СуммаСтальных - СуммаВыплачено);
	////
	////ТабДок.Вывести(ОбластьПодвал);  
	//////1softpro pok --- 
	
	//1softpro pok 03.03.2025 +++ ЗАПОЛНЕНИЕ НОВОГО ПОДВАЛА           
	
	//Вспомогательные переменные 
	АлюминьВсего	  = 0; 
	АлюминьМатериалы  = 0;
	
	СтальВсего 		  = 0;
	СтальМатериалы	  = 0;  
	
	ВсегоСдано = 0;
	
	ВспомогатеьнаяКассаВсего = Константы.ШМСуммаВспомогательнойКассы.Получить(); 
	Долг 					 = ДолгВспомогательнойКассы(МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование);
	Остаток 				 = 0;
	КоличествоКвитанций 	 = 0;
	
	МатериалыАлюминь = Новый Массив;   
	МатериалыСталь   = Новый Массив;
	
	//ЗапросРеалзацийМатериалы = Новый Запрос;
	//ЗапросРеалзацийМатериалы.Текст = "ВЫБРАТЬ
	//                                 |	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	//                                 |	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	//                                 |	РеализацияТоваровУслугТовары.Сумма КАК Сумма
	//                                 |ИЗ
	//                                 |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//                                 |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	//                                 |		ПО (РеализацияТоваровУслугТовары.Ссылка = РеализацияТоваровУслуг.Ссылка)
	//                                 |ГДЕ
	//                                 |	РеализацияТоваровУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	//                                 |	И РеализацияТоваровУслуг.ИмяКомпьютера = &ИмяКомпьютера
	//                                 |	И НЕ РеализацияТоваровУслуг.Комментарий ПОДОБНО &Комментарий
	//                                 |	И РеализацияТоваровУслуг.Проведен = ИСТИНА";
	//
	//ЗапросРеалзацийМатериалы.УстановитьПараметр("НачалоПериода", НачалоСмены);
	//ЗапросРеалзацийМатериалы.УстановитьПараметр("КонецПериода", ТекущаяДата());
	//ЗапросРеалзацийМатериалы.УстановитьПараметр("ИмяКомпьютера", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование);
	//ЗапросРеалзацийМатериалы.УстановитьПараметр("Комментарий", "Материалы"); 
	//
	//ВыборкаРеалзацийМатериалы = ЗапросРеалзацийМатериалы.Выполнить().Выбрать();
	
	ЗапросНоменклатураПрофессии = Новый Запрос;
	ЗапросНоменклатураПрофессии.Текст = "ВЫБРАТЬ
	                                    |	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка1,
	                                    |	СУММА(ШМ_НоменклатураПрофессии.МатериальныйВычет) КАК МатериальныйВычет,
	                                    |	ШМ_НоменклатураПрофессии.Номенклатура КАК Номенклатура,
	                                    |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	                                    |	ШМ_НоменклатураПрофессии.Дископравка КАК Дископравка,
	                                    |	ЦеныНоменклатурыСрезПоследних.Цена - ШМ_НоменклатураПрофессии.МатериальныйВычет КАК СтоимостьУслуги
	                                    |ИЗ
	                                    |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	                                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШМ_НоменклатураПрофессии КАК ШМ_НоменклатураПрофессии
	                                    |		ПО РеализацияТоваровУслугТовары.Номенклатура = ШМ_НоменклатураПрофессии.Номенклатура
	                                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
	                                    |		ПО РеализацияТоваровУслугТовары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	                                    |ГДЕ
	                                    |	РеализацияТоваровУслугТовары.Ссылка.Проведен = ИСТИНА
	                                    |	И РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	                                    |	И НЕ РеализацияТоваровУслугТовары.Ссылка.Комментарий ПОДОБНО &Комментарий
	                                    |	И РеализацияТоваровУслугТовары.Ссылка.ИмяКомпьютера = &ИмяКомпьютера
	                                    |	И ШМ_НоменклатураПрофессии.Профессия = &Профессия
	                                    |
	                                    |СГРУППИРОВАТЬ ПО
	                                    |	РеализацияТоваровУслугТовары.Ссылка,
	                                    |	ШМ_НоменклатураПрофессии.Номенклатура,
	                                    |	ЦеныНоменклатурыСрезПоследних.Цена,
	                                    |	ШМ_НоменклатураПрофессии.Дископравка,
	                                    |	ЦеныНоменклатурыСрезПоследних.Цена - ШМ_НоменклатураПрофессии.МатериальныйВычет";
	
	ЗапросНоменклатураПрофессии.УстановитьПараметр("НачалоПериода", НачалоСмены);     
	ЗапросНоменклатураПрофессии.УстановитьПараметр("КонецПериода", ТекущаяДата());
	ЗапросНоменклатураПрофессии.УстановитьПараметр("Комментарий", "Материалы");
	ЗапросНоменклатураПрофессии.УстановитьПараметр("ИмяКомпьютера", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование);
	ЗапросНоменклатураПрофессии.УстановитьПараметр("Профессия", Профессия);
	
	ВыборкаНоменклатураПрофессии = ЗапросНоменклатураПрофессии.Выполнить().Выбрать();
	
	Пока ВыборкаНоменклатураПрофессии.Следующий() Цикл  
		//СтруктураПоиска = Новый Структура("Номенклатура", ВыборкаРеалзацийМатериалы.Номенклатура); 
		//НайденныеСтроки = ВыборкаНоменклатураПрофессии.НайтиСтроки(СтруктураПоиска);   
		
		Если ВыборкаНоменклатураПрофессии.Дископравка = Перечисления.ШМ_Дископравка.Стальной Тогда
			СтальВсего 	   = СтальВсего + ВыборкаНоменклатураПрофессии.СтоимостьУслуги;  
			СтальМатериалы = СтальМатериалы + ВыборкаНоменклатураПрофессии.МатериальныйВычет;
		ИначеЕсли ВыборкаНоменклатураПрофессии.Дископравка = Перечисления.ШМ_Дископравка.Лекгосплавный Тогда
			АлюминьВсего 	 = АлюминьВсего + ВыборкаНоменклатураПрофессии.СтоимостьУслуги;    
			АлюминьМатериалы = АлюминьМатериалы + ВыборкаНоменклатураПрофессии.МатериальныйВычет;
		КонецЕсли;

		
	КонецЦикла; 
	
	
		
	//Сколько дископравщик забрал денег пр закрытии смены
	Забрал = СотрудникЗабрал(НачалоСмены, ТекущаяДата(), Профессия);   
	
	//Количество квитанций
	КоличествоКвитанций = КоличествоКвитанций(НачалоСмены, ТекущаяДата(), Профессия, МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование);
	
	////Процент заработанных денег сотрудников
	//АлюминийПроцент = АлюминийПроцент(); 
	//СтальПроцент	= СтальПроцент();
	
	//ЗаработанныеДеньгиСотрудником
	//АлюминьЗаработал = (АлюминьВсего - АлюминьМатериалы)*АлюминийПроцент/100;
	//СтальЗаработал   = (СтальВсего - СтальМатериалы)*СтальПроцент/100;     
	
	АлюминьЗаработал = АлюминийЗаработал(НачалоСмены, ТекущаяДата(), Профессия, МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование);
	СтальЗаработал   = СтальЗаработал(НачалоСмены, ТекущаяДата(), Профессия, МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование);
	
	ВсегоСдано = АлюминьВсего + СтальВсего - Забрал + АлюминьМатериалы + СтальМатериалы; 
	
	//Алюминий	
	ОбластьПодвал.Параметры.АлВсего 	 		 = Строка(АлюминьВсего ); 
	ОбластьПодвал.Параметры.АлЗаработано 		 = Строка(АлюминьЗаработал);
	
	//Сталь
	ОбластьПодвал.Параметры.СтВсего 	 		 = Строка(СтальВсего);
	ОбластьПодвал.Параметры.СтЗаработано 		 = Строка(СтальЗаработал);
	
	//Диски     
	ОбластьПодвал.Параметры.ДискиВсего           = Строка(АлюминьВсего + СтальВсего);
	ОбластьПодвал.Параметры.ЗаработаноВсего		 = Строка(АлюминьЗаработал + СтальЗаработал);
	ОбластьПодвал.Параметры.Забрал				 = Строка(Забрал);
	ОбластьПодвал.Параметры.Оставил              = Строка(АлюминьЗаработал + СтальЗаработал - Забрал);
	ОбластьПодвал.Параметры.ДискиСдал            = Строка(АлюминьВсего + СтальВсего - Забрал);
	ОбластьПодвал.Параметры.ВсегоСдано			 = Строка(ВсегоСдано);                             
	
	//Материалы
	ОбластьПодвал.Параметры.МатСдал 	 		 = Строка(АлюминьМатериалы + СтальМатериалы);
	
	//Вспомогательная касса
	ОбластьПодвал.Параметры.ВспомогательнаяКасса = Строка(ВспомогатеьнаяКассаВсего);
	ОбластьПодвал.Параметры.Долг	 			 = Строка(Долг);
	ОбластьПодвал.Параметры.Остаток 		     = Строка(ВспомогатеьнаяКассаВсего - Долг);  
	ОбластьПодвал.Параметры.КоличествоКвитанций  = Строка(КоличествоКвитанций);
	
	
	ТабДок.Вывести(ОбластьПодвал);     
	
	ОбластьПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	ТабДок.Вывести(ОбластьПустаяСтрока); 
	ОбластьПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	ТабДок.Вывести(ОбластьПустаяСтрока);
	
	//1softpro pok --- ЗАПОЛНЕНИЕ НОВОГО ПОДВАЛА

	
	ОбластьШапкаСтойки  = Макет.ПолучитьОбласть("ШапкаСтойки");
	ОбластьСтрокаСтойки = Макет.ПолучитьОбласть("СтрокаСтойки");
	ТабДок.Вывести(ОбластьШапкаСтойки);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_Стойка.Продано КАК Продано,
		|	ШМ_Стойка.Номенклатура КАК Номенклатура,
		|	ШМ_Стойка.НоменклатураТекст КАК НоменклатураТекст,
		|	ШМ_Стойка.ДатаПоступления КАК ДатаПоступления,
		|	ШМ_Стойка.Идентификатор КАК Идентификатор,
		|	ШМ_Стойка.ДатаПродажи КАК ДатаПродажи,
		|	ШМ_Стойка.Комплект КАК Комплект,
		|	ШМ_Стойка.Цена КАК Цена,
		|	ШМ_Стойка.ЦенаПродажи КАК ЦенаПродажи,
		|	ШМ_Стойка.Артикул КАК Артикул,
		|	ШМ_Стойка.Радиус КАК Радиус,
		|	ШМ_Стойка.Ширина КАК Ширина,
		|	ШМ_Стойка.Высота КАК Высота,
		|	ШМ_Стойка.Бренд КАК Бренд,
		|	ШМ_Стойка.Зимняя КАК Зимняя,
		|	ШМ_Стойка.Год КАК Год,
		|	ШМ_Стойка.Сотрудник1 КАК Сотрудник1,
		|	ШМ_Стойка.Сотрудник2 КАК Сотрудник2,
		|	ШМ_Стойка.Сотрудник3 КАК Сотрудник3
		|ИЗ
		|	РегистрСведений.ШМ_Стойка КАК ШМ_Стойка
		|ГДЕ
		|	ШМ_Стойка.Продано = ИСТИНА
		|	И ШМ_Стойка.ДатаПродажи МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ШМ_Стойка.ТочкаПродажи = &ТочкаПродажи";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоСмены);
	Запрос.УстановитьПараметр("КонецПериода", ТекущаяДата());      
	Запрос.УстановитьПараметр("ТочкаПродажи", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование);
	
	Выборка = Запрос.Выполнить().Выгрузить();
	////Выборка.Сортировать("Радиус,Артикул");
	////Таб.Загрузить(Выборка);
	Для Каждого СтрокаВыборка Из Выборка Цикл
	////	СтрокаТаб.Номенклатура=Справочники.Номенклатура.НайтиПоКоду("00-00000734");
		ОбластьСтрокаСтойки.Параметры.ДатаПост = СтрокаВыборка.ДатаПоступления;
		ОбластьСтрокаСтойки.Параметры.ДатаПрод = СтрокаВыборка.ДатаПродажи;
		ОбластьСтрокаСтойки.Параметры.ЦенаУст  = СтрокаВыборка.Цена;
		ОбластьСтрокаСтойки.Параметры.ЦенаПрод = СтрокаВыборка.ЦенаПродажи;
		ОбластьСтрокаСтойки.Параметры.Артикул  = СтрокаВыборка.Артикул;
		ОбластьСтрокаСтойки.Параметры.Радиус   = СтрокаВыборка.Радиус;
		ОбластьСтрокаСтойки.Параметры.Ширина   = СтрокаВыборка.Ширина;
		ОбластьСтрокаСтойки.Параметры.Высота   = СтрокаВыборка.Высота;
		ОбластьСтрокаСтойки.Параметры.Бренд    = СтрокаВыборка.Бренд;
		ОбластьСтрокаСтойки.Параметры.Зима     = СтрокаВыборка.Зимняя;
		ОбластьСтрокаСтойки.Параметры.Год      = СтрокаВыборка.Год;
		ОбластьСтрокаСтойки.Параметры.Сотр1    = СтрокаВыборка.Сотрудник1;
		ОбластьСтрокаСтойки.Параметры.Сотр2    = СтрокаВыборка.Сотрудник2;
		ОбластьСтрокаСтойки.Параметры.Сотр3    = СтрокаВыборка.Сотрудник3;
		ТабДок.Вывести(ОбластьСтрокаСтойки);
	КонецЦикла;
	
	ТабДок.ТолькоПросмотр = Истина;
	Возврат ТабДок;
	
КонецФункции

&НаСервере
Функция СуммаШМНаДату(ДатаНачСмены,ДатаОкончСмены,ТекущееРабочееМесто)
	
	СуммаВыплачено=0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВложенныйЗапрос.Должность КАК Должность,
	|	ВложенныйЗапрос.Помощник КАК Помощник,
	|	ВложенныйЗапрос.ИмяКомпьютера КАК ИмяКомпьютера,
	|	ВложенныйЗапрос.Сотрудник КАК Сотрудник,
	|	СУММА(ШМ_Затраты.Сумма) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		ШМ_Бригады.Должность КАК Должность,
	|		ШМ_Бригады.Помощник КАК Помощник,
	|		ШМ_Бригады.ИмяКомпьютера КАК ИмяКомпьютера,
	|		ШМ_Бригады.Сотрудник КАК Сотрудник
	|	ИЗ
	|		РегистрСведений.ШМ_Бригады КАК ШМ_Бригады
	|	ГДЕ
	|		ШМ_Бригады.ИмяКомпьютера = &ИмяКомпьютера
	|		И ШМ_Бригады.Должность = &Должность
	|		И ШМ_Бригады.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ШМ_Бригады.Должность,
	|		ШМ_Бригады.Помощник,
	|		ШМ_Бригады.ИмяКомпьютера,
	|		ШМ_Бригады.Сотрудник) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШМ_Затраты КАК ШМ_Затраты
	|		ПО ВложенныйЗапрос.Должность = ШМ_Затраты.Профессия
	|			И ВложенныйЗапрос.Сотрудник = ШМ_Затраты.Сотрудник
	|ГДЕ
	|	ШМ_Затраты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Сотрудник,
	|	ВложенныйЗапрос.Должность,
	|	ВложенныйЗапрос.Помощник,
	|	ВложенныйЗапрос.ИмяКомпьютера";
	
	Профессия = Справочники.ШМ_Должности.НайтиПоНаименованию("Шиномонтажник");
	//Запрос.УстановитьПараметр("ИмяКомпьютера", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование); dev1 21.03
	Запрос.УстановитьПараметр("ИмяКомпьютера", ТекущееРабочееМесто);
	Запрос.УстановитьПараметр("Должность", Профессия);
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНачСмены);
	Запрос.УстановитьПараметр("КонецПериода", ДатаОкончСмены);
	
	ВыборкаВыплат = Запрос.Выполнить().Выбрать();
	
	//ВыборкаВыплат=РегистрыСведений.ШМ_Затраты.Выбрать(ДатаНачСмены,ДатаОкончСмены);
	Пока ВыборкаВыплат.Следующий() Цикл
		СуммаВыплачено=СуммаВыплачено+ВыборкаВыплат.Сумма;
	КонецЦикла;
	
	Возврат СуммаВыплачено;
	
КонецФункции

Функция СуммаШМ(ШиномонтажникСегодня)
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	СУММА(ШМ_ИсполнителиРабот.Сумма) КАК Сумма
	//	|ИЗ
	//	|	РегистрСведений.ШМ_ИсполнителиРабот КАК ШМ_ИсполнителиРабот
	//	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ШМ_НоменклатураПрофессии КАК ШМ_НоменклатураПрофессии
	//	|		ПО ШМ_ИсполнителиРабот.Номенклатура = ШМ_НоменклатураПрофессии.Номенклатура
	//	|ГДЕ
	//	|	ШМ_НоменклатураПрофессии.Профессия = &Профессия
	//	|	И ШМ_ИсполнителиРабот.Реализация.Дата МЕЖДУ &НачалоПериода И &КонецПериода";
	//
	//Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ТекущаяДата()));
	//Запрос.УстановитьПараметр("КонецПериода", КонецДня(ТекущаяДата()));
	//Запрос.УстановитьПараметр("Профессия", Справочники.ШМ_Должности.Шиномонтажник);
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//Сумма = 0;
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	Сумма = ВыборкаДетальныеЗаписи.Сумма;
	//КонецЦикла;
	//Возврат Сумма;
	НачалоСмены=НачалоСмены();
	СуммаВыплачено=0;
	ВыборкаВыплат=РегистрыСведений.ШМ_Затраты.Выбрать(НачалоСмены,ТекущаяДата());
	Пока ВыборкаВыплат.Следующий() Цикл
		Если ВыборкаВыплат.Сотрудник=ШиномонтажникСегодня И ВыборкаВыплат.Профессия.Наименование="Шиномонтажник" Тогда
			СуммаВыплачено=СуммаВыплачено+ВыборкаВыплат.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СуммаВыплачено;
	
КонецФункции

&НаСервере
Функция СуммаСъемНаДату(ДатаНачСмены,ДатаОкончСмены,ТекущееРабочееМесто)
	
	СуммаВыплачено=0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВложенныйЗапрос.Должность КАК Должность,
	|	ВложенныйЗапрос.Помощник КАК Помощник,
	|	ВложенныйЗапрос.ИмяКомпьютера КАК ИмяКомпьютера,
	|	ВложенныйЗапрос.Сотрудник КАК Сотрудник,
	|	СУММА(ШМ_Затраты.Сумма) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		ШМ_Бригады.Должность КАК Должность,
	|		ШМ_Бригады.Помощник КАК Помощник,
	|		ШМ_Бригады.ИмяКомпьютера КАК ИмяКомпьютера,
	|		ШМ_Бригады.Сотрудник КАК Сотрудник
	|	ИЗ
	|		РегистрСведений.ШМ_Бригады КАК ШМ_Бригады
	|	ГДЕ
	|		ШМ_Бригады.ИмяКомпьютера = &ИмяКомпьютера
	|		И ШМ_Бригады.Должность = &Должность
	|		И ШМ_Бригады.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ШМ_Бригады.Должность,
	|		ШМ_Бригады.Помощник,
	|		ШМ_Бригады.ИмяКомпьютера,
	|		ШМ_Бригады.Сотрудник) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШМ_Затраты КАК ШМ_Затраты
	|		ПО ВложенныйЗапрос.Должность = ШМ_Затраты.Профессия
	|			И ВложенныйЗапрос.Сотрудник = ШМ_Затраты.Сотрудник
	|ГДЕ
	|	ШМ_Затраты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Сотрудник,
	|	ВложенныйЗапрос.Должность,
	|	ВложенныйЗапрос.Помощник,
	|	ВложенныйЗапрос.ИмяКомпьютера";
	
	Профессия = Справочники.ШМ_Должности.НайтиПоНаименованию("Съемщик");
	//Запрос.УстановитьПараметр("ИмяКомпьютера", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование); 
	Запрос.УстановитьПараметр("ИмяКомпьютера", ТекущееРабочееМесто); 
	Запрос.УстановитьПараметр("Должность", Профессия);
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНачСмены);
	Запрос.УстановитьПараметр("КонецПериода", ДатаОкончСмены);
	
	ВыборкаВыплат = Запрос.Выполнить().Выбрать();
	
	//ВыборкаВыплат=РегистрыСведений.ШМ_Затраты.Выбрать(ДатаНачСмены,ДатаОкончСмены);
	Пока ВыборкаВыплат.Следующий() Цикл
		СуммаВыплачено=СуммаВыплачено+ВыборкаВыплат.Сумма;
	КонецЦикла;
	
	Возврат СуммаВыплачено;
	
КонецФункции

Функция СуммаСъем(СъемщикСегодня)
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	СУММА(ШМ_ИсполнителиРабот.Сумма) КАК Сумма
	//	|ИЗ
	//	|	РегистрСведений.ШМ_ИсполнителиРабот КАК ШМ_ИсполнителиРабот
	//	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ШМ_НоменклатураПрофессии КАК ШМ_НоменклатураПрофессии
	//	|		ПО ШМ_ИсполнителиРабот.Номенклатура = ШМ_НоменклатураПрофессии.Номенклатура
	//	|ГДЕ
	//	|	ШМ_НоменклатураПрофессии.Профессия = &Профессия
	//	|	И ШМ_ИсполнителиРабот.Реализация.Дата МЕЖДУ &НачалоПериода И &КонецПериода";
	//
	//Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ТекущаяДата()));
	//Запрос.УстановитьПараметр("КонецПериода", КонецДня(ТекущаяДата()));
	//Запрос.УстановитьПараметр("Профессия", Справочники.ШМ_Должности.Съемщик);
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//Сумма = 0;
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	Сумма = ВыборкаДетальныеЗаписи.Сумма;
	//КонецЦикла;
	//Возврат Сумма;
	
	НачалоСмены=НачалоСмены();
	СуммаВыплачено=0;
	ВыборкаВыплат=РегистрыСведений.ШМ_Затраты.Выбрать(НачалоСмены,ТекущаяДата());
	Пока ВыборкаВыплат.Следующий() Цикл
		Если ВыборкаВыплат.Сотрудник=СъемщикСегодня  И ВыборкаВыплат.Профессия.Наименование="Съемщик" Тогда
			СуммаВыплачено=СуммаВыплачено+ВыборкаВыплат.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СуммаВыплачено;
	
КонецФункции
	
&НаСервере
Функция ШМВсегоНаДату(ДатаНачалаСмены,ДатаОкончСмены)
		
	Рез = 0;
		
	ВыбРеалШиномонт=Документы.РеализацияТоваровУслуг.Выбрать(ДатаНачалаСмены,ДатаОкончСмены);
	Пока ВыбРеалШиномонт.Следующий() Цикл
		Если ВыбРеалШиномонт.Проведен=Ложь Тогда
			Продолжить;
		КонецЕсли;
		Если ВыбРеалШиномонт.Комментарий="Материалы" Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаШиномонт Из ВыбРеалШиномонт.Товары Цикл
			Если СтрокаШиномонт.Номенклатура.ТипНоменклатуры<>Перечисления.ТипыНоменклатуры.Услуга Тогда
				Продолжить;
			КонецЕсли;
			НаборНомПроф=РегистрыСведений.ШМ_НоменклатураПрофессии.СоздатьНаборЗаписей();
			НаборНомПроф.Отбор.Номенклатура.Установить(СтрокаШиномонт.Номенклатура,Истина);
			НаборНомПроф.Прочитать();
			Для Каждого СтрНаборНомПроф Из НаборНомПроф Цикл
				Если СтрНаборНомПроф.Профессия=Справочники.ШМ_Должности.НайтиПоНаименованию("Шиномонтажник") Тогда
					Рез=Рез+СтрокаШиномонт.Сумма;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции

Функция ШМВсего()
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	СУММА(ЦеныНоменклатурыСрезПоследних.Цена * ВыручкаИСебестоимостьПродажОбороты.КоличествоОборот) КАК Сумма
	//               |ИЗ
	//               |	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&НачалоПериода, &КонецПериода, Период, ХозяйственнаяОперация = &ХозОперРеал) КАК ВыручкаИСебестоимостьПродажОбороты
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
	//               |		ПО ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	//               |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ШМ_НоменклатураПрофессии КАК ШМ_НоменклатураПрофессии
	//               |		ПО ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.Номенклатура = ШМ_НоменклатураПрофессии.Номенклатура
	//               |ГДЕ
	//               |	ШМ_НоменклатураПрофессии.Профессия = &Профессия";
	//
	//
	//Запрос.УстановитьПараметр("ХозОперРеал", Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
	//Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ТекущаяДата()));
	//Запрос.УстановитьПараметр("КонецПериода", КонецДня(ТекущаяДата()));
	//Запрос.УстановитьПараметр("Профессия", Справочники.ШМ_Должности.Шиномонтажник);
	//Выборка = Запрос.Выполнить().Выбрать();	
	Рез = 0;
	//Пока Выборка.Следующий() Цикл
	//	Рез = Выборка.Сумма;
	//КонецЦикла;
	
	
	НачалоСмены=НачалоСмены();
	ВыбРеалШиномонт=Документы.РеализацияТоваровУслуг.Выбрать(НачалоСмены,ТекущаяДата());
	Пока ВыбРеалШиномонт.Следующий() Цикл
		Если ВыбРеалШиномонт.Проведен=Ложь Тогда
			Продолжить;
		КонецЕсли;
		Если ВыбРеалШиномонт.Комментарий="Материалы" Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаШиномонт Из ВыбРеалШиномонт.Товары Цикл
			Если СтрокаШиномонт.Номенклатура.ТипНоменклатуры<>Перечисления.ТипыНоменклатуры.Услуга Тогда
				Продолжить;
			КонецЕсли;
			НаборНомПроф=РегистрыСведений.ШМ_НоменклатураПрофессии.СоздатьНаборЗаписей();
			НаборНомПроф.Отбор.Номенклатура.Установить(СтрокаШиномонт.Номенклатура,Истина);
			НаборНомПроф.Прочитать();
			Для Каждого СтрНаборНомПроф Из НаборНомПроф Цикл
				Если СтрНаборНомПроф.Профессия=Справочники.ШМ_Должности.НайтиПоНаименованию("Шиномонтажник") Тогда
					Рез=Рез+СтрокаШиномонт.Сумма;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции

&НаСервере
Функция СъемВсегоНаДату(ДатаНачалаСмены,ДатаОкончСмены)
		
	Рез = 0;
	
	ВыбРеалШиномонт=Документы.РеализацияТоваровУслуг.Выбрать(ДатаНачалаСмены,ДатаОкончСмены);
	Пока ВыбРеалШиномонт.Следующий() Цикл
		Если ВыбРеалШиномонт.Проведен=Ложь Тогда
			Продолжить;
		КонецЕсли;
		Если ВыбРеалШиномонт.Комментарий="Материалы" Тогда
			Продолжить;
		КонецЕсли;
		//Для Каждого СтрокаШиномонт Из ВыбРеалШиномонт.Товары Цикл
		//	Если СтрокаШиномонт.Номенклатура.ТипНоменклатуры<>Перечисления.ТипыНоменклатуры.Услуга Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	НаборНомПроф=РегистрыСведений.ШМ_НоменклатураПрофессии.СоздатьНаборЗаписей();
		//	НаборНомПроф.Отбор.Номенклатура.Установить(СтрокаШиномонт.Номенклатура,Истина);
		//	НаборНомПроф.Прочитать();
		//	Для Каждого СтрНаборНомПроф Из НаборНомПроф Цикл
		//		Если СтрНаборНомПроф.Профессия=Справочники.ШМ_Должности.НайтиПоНаименованию("Съемщик") Тогда
		//			Рез=Рез+СтрокаШиномонт.Сумма;
		//		КонецЕсли;
		//	КонецЦикла;
		//КонецЦикла;
		Рез=Рез+ВыбРеалШиномонт.СуммаСъемЧерновик;
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции

Функция СъемВсего()
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	СУММА(ЦеныНоменклатурыСрезПоследних.Цена * ВыручкаИСебестоимостьПродажОбороты.КоличествоОборот) КАК Сумма
	//               |ИЗ
	//               |	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&НачалоПериода, &КонецПериода, Период, ХозяйственнаяОперация = &ХозОперРеал) КАК ВыручкаИСебестоимостьПродажОбороты
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
	//               |		ПО ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	//               |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ШМ_НоменклатураПрофессии КАК ШМ_НоменклатураПрофессии
	//               |		ПО ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.Номенклатура = ШМ_НоменклатураПрофессии.Номенклатура
	//               |ГДЕ
	//               |	ШМ_НоменклатураПрофессии.Профессия = &Профессия";
	//
	//Запрос.УстановитьПараметр("ХозОперРеал", Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
	//Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ТекущаяДата()));
	//Запрос.УстановитьПараметр("КонецПериода", КонецДня(ТекущаяДата()));
	//Запрос.УстановитьПараметр("Профессия", Справочники.ШМ_Должности.Съемщик);
	//Выборка = Запрос.Выполнить().Выбрать();	
	Рез = 0;
	//Пока Выборка.Следующий() Цикл
	//	Рез = Выборка.Сумма;
	//КонецЦикла;
	//Возврат Рез;
	
	НачалоСмены=НачалоСмены();
	ВыбРеалШиномонт=Документы.РеализацияТоваровУслуг.Выбрать(НачалоСмены,ТекущаяДата());
	Пока ВыбРеалШиномонт.Следующий() Цикл
		Если ВыбРеалШиномонт.Проведен=Ложь Тогда
			Продолжить;
		КонецЕсли;
		Если ВыбРеалШиномонт.Комментарий="Материалы" Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаШиномонт Из ВыбРеалШиномонт.Товары Цикл
			Если СтрокаШиномонт.Номенклатура.ТипНоменклатуры<>Перечисления.ТипыНоменклатуры.Услуга Тогда
				Продолжить;
			КонецЕсли;
			НаборНомПроф=РегистрыСведений.ШМ_НоменклатураПрофессии.СоздатьНаборЗаписей();
			НаборНомПроф.Отбор.Номенклатура.Установить(СтрокаШиномонт.Номенклатура,Истина);
			НаборНомПроф.Прочитать();
			Для Каждого СтрНаборНомПроф Из НаборНомПроф Цикл
				Если СтрНаборНомПроф.Профессия=Справочники.ШМ_Должности.НайтиПоНаименованию("Съемщик") Тогда
					Рез=Рез+СтрокаШиномонт.Сумма;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции

&НаКлиенте
Процедура ЗакрытьСменуНаСервере()
//Чистовик Шиномонтаж + Съем	
	ТабДок = ПолучитьЗапрос(Ложь);
	ТабДок.Показать();
//Чистовик дископравка	
	ТабДокДискоравка = ПолучитьТабДокДископравка();
	ТабДокДискоравка.Показать();     
//Черновик	
	ТабДокЧерновик = ПолучитьТабДокЧерновика2020();
	ТабДокЧерновик.Показать();
		
	ДатаНачОтчетаСтойка=НачалоСмены();
	ДатаОкончОтчетаСтойка=ТекущаяДата();
//Отчет по стойке
	ТабДок = ПолучитьОтчетЗаСтойкуЗаПериод(ДатаНачОтчетаСтойка,ДатаОкончОтчетаСтойка);
	Если ТабДок<>Неопределено Тогда
		ТабДок.Показать();
	КонецЕсли;
	
	ЗаписатьИнформациюОЗакрытииСмены();
	
	ОткрытьФормуМодально("Документ.КассоваяСмена.Форма.ФормаСписка",, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИнформациюОЗакрытииСмены()
	
		НаборЗаписей = РегистрыСведений.ШМ_Смены.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Период.Установить(НачалоСмены());
		НаборЗаписей.Прочитать();
		Для Каждого СтрокаНаборЗаписей Из НаборЗаписей Цикл
			СтрокаНаборЗаписей.СменаЗакрыта=Истина;
		КонецЦикла;
		НаборЗаписей.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварныйЧек()
	ТабДок = ПолучитьЗапросТоварныйЧек();
	ТабДок.Показать();
КонецПроцедуры

&НаСервере
Функция ПолучитьЗапросТоварныйЧек()
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Тов_Чек";
	Макет = ПолучитьМакетТЧ();
	ПоказыватьНДС = Константы.ВыводитьДопКолонкиНДС.Получить();
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.НомерДок = ДокРеал.Номер;
	ОбластьМакета.Параметры.ДатаДок = ДокРеал.Дата;	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");   
	ТекущееРабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();  
	ТочкаПродажи = СтрРазделить(ТекущееРабочееМесто.Наименование, " ");  
	ПредставлениеПоставщика = ПолучитьДанныеПоставщика(ТочкаПродажи[0]);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	Если ВыбраноАвтоЮЛ.Пустая() Тогда
		ОбластьМакета.Параметры.ПредставлениеПолучателя = НомерМашины;
		ОбластьМакета.Параметры.ПредставлениеКлиента = "";
		ОбластьМакета.Параметры.ПредставлениеМаркиАвто = "";
	Иначе
		//ОбластьМакета.Параметры.ПредставлениеПолучателя = ВыбраноАвтоЮЛ.Код+"("+"("+СокрЛП(ВыбраноАвтоЮЛ.Юрлицо)+")"+СокрЛП(ВыбраноАвтоЮЛ.Наименование)+")";
		ОбластьМакета.Параметры.ПредставлениеПолучателя = СокрЛП(ВыбраноАвтоЮЛ.Наименование);
		ОбластьМакета.Параметры.ПредставлениеКлиента = СокрЛП(ВыбраноАвтоЮЛ.Юрлицо);
		ОбластьМакета.Параметры.ПредставлениеМаркиАвто = СокрЛП(ВыбраноАвтоЮЛ.МаркаАвто);
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ЕстьНДС = Ложь;
	Для Каждого СтрокаТовары Из ДокРеал.Товары Цикл
		Если СтрокаТовары.СуммаНДС <> 0 Тогда
			ЕстьНДС = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	ВыводитьПомещения = Ложь;
	
	//		ПервоеПомещение = Неопределено;
	//		Для Каждого СтрокаТовара Из ТаблицаТовары Цикл
	//			Если ЗначениеЗаполнено(СтрокаТовара.Помещение) Тогда
	//				ВыводитьПомещения = Истина;
	//			КонецЕсли;
	//		КонецЦикла;
	
	ОбластьНомера    = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов     = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьПомещение = Макет.ПолучитьОбласть("ШапкаТаблицы|Помещение");
	ОбластьДанных    = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок    = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммыНДС  = Макет.ПолучитьОбласть("ШапкаТаблицы|СуммаНДС");
	ОбластьСуммы     = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
	
	ТабличныйДокумент.Вывести(ОбластьНомера);
	Если ВыводитьПомещения Тогда
		ТабличныйДокумент.Присоединить(ОбластьПомещение);
	КонецЕсли;
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабличныйДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабличныйДокумент.Присоединить(ОбластьДанных);
	Если ЕстьНДС И ПоказыватьНДС Тогда
		ТабличныйДокумент.Присоединить(ОбластьСуммыНДС);
	КонецЕсли;
	ТабличныйДокумент.Присоединить(ОбластьСкидок);
	ТабличныйДокумент.Присоединить(ОбластьСуммы);
	
	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
		+ Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	Если ВыводитьПомещения Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
		+ Макет.Область("Помещение").ШиринаКолонки;
	КонецЕсли;
	ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
	+ Макет.Область("СуммаБезСкидки").ШиринаКолонки
	+ Макет.Область("СуммаСкидки").ШиринаКолонки;
	
	ОбластьНомераСтандарт    = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодовСтандарт     = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьПомещениеСтандарт = Макет.ПолучитьОбласть("Строка|Помещение");
	ОбластьДанныхСтандарт    = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидокСтандарт    = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммыНДССтандарт  = Макет.ПолучитьОбласть("Строка|СуммаНДС");
	ОбластьСуммыСтандарт     = Макет.ПолучитьОбласть("Строка|Сумма");
	
	ИспользоватьНаборы = Ложь;
	
	Сумма          = 0;
	СуммаНДС       = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	НомерСтроки    = 0;
	//		ПустыеДанные   = НаборыСервер.ПустыеДанные();
	//		
	Для Каждого СтрокаТовары Из ДокРеал.Товары Цикл
		ОбластьНомера    = ОбластьНомераСтандарт;
		ОбластьКодов     = ОбластьКодовСтандарт;
		ОбластьПомещение = ОбластьПомещениеСтандарт;
		ОбластьДанных    = ОбластьДанныхСтандарт;
		ОбластьСкидок    = ОбластьСкидокСтандарт;
		ОбластьСуммыНДС  = ОбластьСуммыНДССтандарт;
		ОбластьСуммы     = ОбластьСуммыСтандарт;
		
		НомерСтроки = НомерСтроки + 1;
		ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьПомещения Тогда
			ОбластьПомещение.Параметры.Заполнить(СтрокаТовары);
			ТабличныйДокумент.Присоединить(ОбластьПомещение);
		КонецЕсли;
		
		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = СтрокаТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = СтрокаТовары.Код;
			КонецЕсли;
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ОбластьДанных.Параметры.Заполнить(СтрокаТовары);
		
		УстановитьПараметр(ОбластьДанных, "Товар", НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
		СтрокаТовары.Номенклатура.НаименованиеПолное,
		СтрокаТовары.Характеристика.НаименованиеПолное));
		
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		ОбластьСкидок.Параметры.СуммаБезСкидки=СтрокаТовары.Количество*СтрокаТовары.Цена;
		ВсегоБезСкидок=ВсегоБезСкидок+(СтрокаТовары.Количество*СтрокаТовары.Цена);
		ОбластьСкидок.Параметры.Скидка=СтрокаТовары.СуммаРучнойСкидки;
		ВсегоСкидок=ВсегоСкидок+СтрокаТовары.СуммаРучнойСкидки;
		
		ТабличныйДокумент.Присоединить(ОбластьСкидок);
		
		Если ЕстьНДС И ПоказыватьНДС Тогда
			ОбластьСуммыНДС.Параметры.Заполнить(СтрокаТовары);
			ТабличныйДокумент.Присоединить(ОбластьСуммыНДС);
		КонецЕсли;
		
		Если Не ДокРеал.ЦенаВключаетНДС Тогда
			СуммаСНДС = СтрокаТовары.Сумма + СтрокаТовары.СуммаНДС;
		Иначе
			СуммаСНДС = СтрокаТовары.Сумма;
		КонецЕсли;
		
		УстановитьПараметр(ОбластьСуммы, "Сумма", СуммаСНДС);
		
		ТабличныйДокумент.Присоединить(ОбластьСуммы);
		Сумма    = Сумма    + СтрокаТовары.Сумма;
		СуммаНДС = СуммаНДС + СтрокаТовары.СуммаНДС;
	КонецЦикла;
	
	// Вывести Итого.
	ОбластьНомера    = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов     = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьПомещение = Макет.ПолучитьОбласть("Итого|Помещение");
	ОбластьДанных    = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок    = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы     = Макет.ПолучитьОбласть("Итого|Сумма");
	ОбластьСуммыНДС  = Макет.ПолучитьОбласть("Итого|СуммаНДС");
	
	ТабличныйДокумент.Вывести(ОбластьНомера);
	Если ВыводитьПомещения Тогда
		ТабличныйДокумент.Присоединить(ОбластьПомещение);
	КонецЕсли;
	Если ВыводитьКоды Тогда
		ТабличныйДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабличныйДокумент.Присоединить(ОбластьДанных);
	Если ЕстьНДС И ПоказыватьНДС Тогда
		ОбластьСуммыНДС.Параметры.СуммаНДС = СуммаНДС;
		ТабличныйДокумент.Присоединить(ОбластьСуммыНДС);
	КонецЕсли;
	
	Если Не ДокРеал.ЦенаВключаетНДС Тогда
		СуммаДокумента = Сумма + СуммаНДС;
	Иначе
		СуммаДокумента = Сумма;
	КонецЕсли;
	
	ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
	ОбластьСкидок.Параметры.ВсегоСкидок = ВсегоСкидок;
	ТабличныйДокумент.Присоединить(ОбластьСкидок);
	
	ОбластьСуммы.Параметры.Сумма = СуммаДокумента;
	ТабличныйДокумент.Присоединить(ОбластьСуммы);
	
	// Вывести Сумму прописью.
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	
	ИтоговаяСтрока = НСтр("ru = 'Всего наименований %1, на сумму %2'");
	ОбластьМакета.Параметры.ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	ИтоговаяСтрока,
	НомерСтроки,
	ФормированиеПечатныхФорм.ФорматСумм(СуммаДокумента));
	
	ОбластьМакета.Параметры.СуммаПрописью  = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаДокумента, ДокРеал.Валюта);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Вывести подписи.
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.ОтветственныйПредставление = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДокРеал.Менеджер, ДокРеал.Дата);
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	//ТабличныйДокумент.ТолькоПросмотр = Истина;
	Возврат ТабличныйДокумент;
КонецФункции

&НаСервере
Функция ПолучитьДанныеПоставщика(ТочкаПродажи)
	лТекст = "ВЫБРАТЬ
		|	СкладыДополнительныеРеквизиты.Значение КАК ИП,
		|	СкладыКонтактнаяИнформация.Представление КАК Адрес,
		|	СкладыДополнительныеРеквизиты1.Значение КАК ИНН
		|ИЗ
		|	Справочник.Склады.КонтактнаяИнформация КАК СкладыКонтактнаяИнформация,
		|	Справочник.Склады.ДополнительныеРеквизиты КАК СкладыДополнительныеРеквизиты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО (СкладыДополнительныеРеквизиты.Ссылка = Склады.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады.ДополнительныеРеквизиты КАК СкладыДополнительныеРеквизиты1
		|		ПО (СкладыДополнительныеРеквизиты.Ссылка = СкладыДополнительныеРеквизиты1.Ссылка)
		|ГДЕ
		|	Склады.Наименование ПОДОБНО &Наименование
		|	И СкладыДополнительныеРеквизиты.Свойство = &Свойство
		|	И СкладыКонтактнаяИнформация.Ссылка = &Ссылка
		|	И СкладыДополнительныеРеквизиты1.Свойство = &Свойство1";

	лЗапрос = Новый Запрос(лТекст);
	
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Ответственный_d6a6f048aa5d440287711a91597c225a"); // Ответственный ()
    Свойство1 = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ИНН_3dfa0481037741ed893ec326d467ba93");
	Ссылка = Справочники.Склады.НайтиПоНаименованию(ТочкаПродажи); 
	
	лЗапрос.УстановитьПараметр("Наименование", ТочкаПродажи);
	лЗапрос.УстановитьПараметр("Свойство", Свойство);
	лЗапрос.УстановитьПараметр("Свойство1", Свойство1);
	лЗапрос.УстановитьПараметр("Ссылка", Ссылка);


	лВыборка = лЗапрос.Выполнить().Выгрузить();  
	
	Результат = "";
	
	Если лВыборка.Количество() > 0 Тогда 
		Результат = лВыборка[0].ИП + ", ИНН " + лВыборка[0].ИНН + ", " + лВыборка[0].Адрес;
	КонецЕсли;
	
	Возврат Результат

КонецФункции
Процедура УстановитьПараметр(ОбластьМакета, ИмяПараметра, ЗначениеПараметра)
	ОбластьМакета.Параметры.Заполнить(Новый Структура(ИмяПараметра, ЗначениеПараметра));
КонецПроцедуры

&НаКлиенте
Процедура Затраты(Команда)
	ОткрытьФорму("Обработка.Шиномонтаж.Форма.Затраты");
	ЭтаФорма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Утиль(Команда)
	ОткрытьФорму("Обработка.Шиномонтаж.Форма.Утиль");
	ЭтаФорма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Стойка(Команда)
	ЗапомнитьЧекНаСервере();
	ОткрытьФорму("Обработка.Шиномонтаж.Форма.Стойка");
	ЭтаФорма.Закрыть();
КонецПроцедуры

&НаСервере
Процедура ЗапомнитьЧекНаСервере()
	
	НаборЗаписей = РегистрыСведений.ШМ_ЗапомненныйЧек.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	
	ДатаОтложения=ТекущаяДата();
	Для Каждого СтрТаб Из Таб Цикл
		МенеджеОтлож=РегистрыСведений.ШМ_ЗапомненныйЧек.СоздатьМенеджерЗаписи();
		//НаборЗаписейОтлож.Прочитать();
		//МенеджеОтлож = НаборЗаписейОтлож.Добавить();
		МенеджеОтлож.ДатаЧека=ДатаОтложения;
		МенеджеОтлож.Номенклатура=СтрТаб.Номенклатура;
		МенеджеОтлож.Количество=СтрТаб.Количество;
		МенеджеОтлож.Цена=СтрТаб.Цена;
		МенеджеОтлож.Сумма=СтрТаб.Сумма;
		Если СтрТаб.Сотрудник.Пустая()=Ложь Тогда
			МенеджеОтлож.Сотрудник=СтрТаб.Сотрудник;
		Иначе
			//СтруктураПроф = ПрофессияНоменклатура(СтрТаб.Номенклатура); //Сотрудник,Сотрудник2,Размер,Размер2,ВидОплаты
			//МенеджеОтлож.Сотрудник=СтруктураПроф.Сотрудник;
		КонецЕсли;
		МенеджеОтлож.НомерМашины=НомерМашины;
		МенеджеОтлож.СуммаБезСкидки=СтрТаб.СуммаБезСкидки;
		МенеджеОтлож.СуммаСкидки=СтрТаб.СуммаСкидки;
		МенеджеОтлож.Купон=СейчасКупон;
		МенеджеОтлож.Скидка=СейчасСкидка;
		МенеджеОтлож.СкидкаРазовая=СейчасСкидкаРазовая;
		МенеджеОтлож.Телефон=Телефон;
		МенеджеОтлож.Бирка=Бирка;
		МенеджеОтлож.КолГруз1=СтрТаб.КолГруз1;
		МенеджеОтлож.КолГруз2=СтрТаб.КолГруз2;
		Если СтрДлина(СокрЛП(ИдентификаторОтложенногоЧека))=0 Тогда
			МенеджеОтлож.ИдентификаторЧека=Строка(ДатаОтложения)+" бирка: "+Строка(Бирка)+" Номер машины: "+НомерМашины+" Телефон: "+Телефон;
		Иначе
			МенеджеОтлож.ИдентификаторЧека=ИдентификаторОтложенногоЧека;
		КонецЕсли;
		МенеджеОтлож.ДатаВыполнения=СтрТаб.ДатаВыполнения;
		МенеджеОтлож.Выполнен=СтрТаб.Выполнен;
		МенеджеОтлож.ИдентификаторСтойки=СтрТаб.ИдентификаторСтойки;
		МенеджеОтлож.Записать();
		//НаборЗаписейОтлож.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТС = Элементы.Таблица.ТекущиеДанные;
	
	ТС.СуммаБезСкидки = ТС.Количество * ТС.Цена;
	ТС.Сумма = ТС.Количество * ТС.Цена;
	//ТС.Сумма = ТС.Количество * ТС.Цена-ТС.СуммаСкидки;
	
	Если СейчасСкидка Тогда
		СкидкаНаСервере();
	КонецЕсли;
	Если СейчасСкидкаРазовая Тогда
		СкидкаНаСервереРазовая();
	КонецЕсли;
	Если СейчасКупон Тогда
		КупонНаСервере();
	КонецЕсли;
	Если СкидкаИнетМаг Тогда
		СкидкаНаСервереИнетМаг();
	КонецЕсли;

	ТаблицаПриОкончанииРедактированияНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере()
	
	ФормаОплаты=Перечисления.ФормыОплаты.Наличная;
	ВыбОтложенных=РегистрыСведений.ШМ_ОтложенныеЧеки.Выбрать();
	Пока ВыбОтложенных.Следующий() Цикл
		Если ВыбОтложенных.Восстановить Тогда
			СтрокаТаб=Таб.Добавить();
			СтрокаТаб.Номенклатура=ВыбОтложенных.Номенклатура;
			СтрокаТаб.Количество=ВыбОтложенных.Количество;
			СтрокаТаб.Цена=ВыбОтложенных.Цена;
			СтрокаТаб.Сумма=ВыбОтложенных.Сумма;
			СтрокаТаб.Сотрудник=ВыбОтложенных.Сотрудник;
			СтрокаТаб.КолГруз1=ВыбОтложенных.КолГруз1;
			СтрокаТаб.КолГруз2=ВыбОтложенных.КолГруз2;
			СтрокаТаб.СуммаБезСкидки=ВыбОтложенных.СуммаБезСкидки;
			СтрокаТаб.СуммаСкидки=ВыбОтложенных.СуммаСкидки;
			СтрокаТаб.ДатаВыполнения=ВыбОтложенных.ДатаВыполнения;
			СтрокаТаб.Выполнен=ВыбОтложенных.Выполнен;
			НомерМашины=ВыбОтложенных.НомерМашины;
			СейчасКупон=ВыбОтложенных.Купон;
			СейчасСкидка=ВыбОтложенных.Скидка;
			СейчасСкидкаРазовая=ВыбОтложенных.СкидкаРазовая;
			Телефон=ВыбОтложенных.Телефон;
			Бирка=ВыбОтложенных.Бирка;
			ИдентификаторОтложенногоЧека=ВыбОтложенных.ИдентификаторЧека;
			МенЗаписиОтл=ВыбОтложенных.ПолучитьМенеджерЗаписи();
			МенЗаписиОтл.Восстановить=Ложь;
			МенЗаписиОтл.Записать();
		КонецЕсли;
	КонецЦикла;
	
	ВыбОтложенных=РегистрыСведений.ШМ_ЗапомненныйЧек.Выбрать();
	Пока ВыбОтложенных.Следующий() Цикл
		//Если ВыбОтложенных.Восстановить Тогда
			СтрокаТаб=Таб.Добавить();
			СтрокаТаб.Номенклатура=ВыбОтложенных.Номенклатура;
			СтрокаТаб.Количество=ВыбОтложенных.Количество;
			СтрокаТаб.Цена=ВыбОтложенных.Цена;
			СтрокаТаб.Сумма=ВыбОтложенных.Сумма;
			СтрокаТаб.Сотрудник=ВыбОтложенных.Сотрудник;
			СтрокаТаб.КолГруз1=ВыбОтложенных.КолГруз1;
			СтрокаТаб.КолГруз2=ВыбОтложенных.КолГруз2;
			СтрокаТаб.СуммаБезСкидки=ВыбОтложенных.СуммаБезСкидки;
			СтрокаТаб.СуммаСкидки=ВыбОтложенных.СуммаСкидки;
			СтрокаТаб.ДатаВыполнения=ВыбОтложенных.ДатаВыполнения;
			СтрокаТаб.Выполнен=ВыбОтложенных.Выполнен;
			СтрокаТаб.ИдентификаторСтойки=ВыбОтложенных.ИдентификаторСтойки;
			НомерМашины=ВыбОтложенных.НомерМашины;
			СейчасКупон=ВыбОтложенных.Купон;
			СейчасСкидка=ВыбОтложенных.Скидка;
			СейчасСкидкаРазовая=ВыбОтложенных.СкидкаРазовая;
			Телефон=ВыбОтложенных.Телефон;
			Бирка=ВыбОтложенных.Бирка;
			ИдентификаторОтложенногоЧека=ВыбОтложенных.ИдентификаторЧека;
			//МенЗаписиОтл=ВыбОтложенных.ПолучитьМенеджерЗаписи();
			//МенЗаписиОтл.Восстановить=Ложь;
			//МенЗаписиОтл.Записать();
		//КонецЕсли;
	КонецЦикла;
	НаборЗаписей = РегистрыСведений.ШМ_ЗапомненныйЧек.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	
	ТабСтойки = Новый ТаблицаЗначений;
	ТабСтойки.Колонки.Добавить("Номенклатура");
	ТабСтойки.Колонки.Добавить("Количество");
	ТабСтойки.Колонки.Добавить("Цена");
	ТабСтойки.Колонки.Добавить("Сумма");
	ТабСтойки.Колонки.Добавить("СуммаБезСкидки");
	ТабСтойки.Колонки.Добавить("ИдентификаторСтойки");
	
	ВыбОтложенных=РегистрыСведений.ШМ_Стойка.Выбрать();
	Пока ВыбОтложенных.Следующий() Цикл
		Если ВыбОтложенных.Восстановить Тогда
			
			СтрокаТабСтойки = ТабСтойки.Добавить();
			СтрокаТабСтойки.Номенклатура=ВыбОтложенных.Номенклатура;
			СтрокаТабСтойки.Количество=1;
			СтрокаТабСтойки.Цена=ВыбОтложенных.Цена;
			СтрокаТабСтойки.Сумма=ВыбОтложенных.Цена;
			СтрокаТабСтойки.СуммаБезСкидки=ВыбОтложенных.Цена;
			СтрокаТабСтойки.ИдентификаторСтойки=ВыбОтложенных.Идентификатор;
			МенЗаписиОтл=ВыбОтложенных.ПолучитьМенеджерЗаписи();
			МенЗаписиОтл.Восстановить=Ложь;
			МенЗаписиОтл.Записать();
		КонецЕсли;
	КонецЦикла;
	//ТабСтойки.Свернуть("Номенклатура,Цена,ИдентификаторСтойки","Количество,Сумма,СуммаБезСкидки");
	
	Если ТабСтойки.Количество()>0 Тогда
		ОчиститьКнопки();
	КонецЕсли;
	
	Для Каждого СтрокаТабСтойки Из ТабСтойки Цикл
		
		СтрокаТаб=Таб.Добавить();
		СтрокаТаб.Номенклатура=СтрокаТабСтойки.Номенклатура;
		СтрокаТаб.Количество=СтрокаТабСтойки.Количество;
		СтрокаТаб.Цена=СтрокаТабСтойки.Цена;
		СтрокаТаб.Сумма=СтрокаТабСтойки.Сумма;
		//СтрокаТаб.Сотрудник=ВыбОтложенных.Сотрудник;
		//СтрокаТаб.КолГруз1=ВыбОтложенных.КолГруз1;
		//СтрокаТаб.КолГруз2=ВыбОтложенных.КолГруз2;
		СтрокаТаб.СуммаБезСкидки=СтрокаТабСтойки.СуммаБезСкидки;
		//СтрокаТаб.СуммаСкидки=ВыбОтложенных.СуммаСкидки;
		//СтрокаТаб.ДатаВыполнения=ВыбОтложенных.ДатаВыполнения;
		//СтрокаТаб.Выполнен=ВыбОтложенных.Выполнен;
		//НомерМашины=ВыбОтложенных.НомерМашины;
		//СейчасКупон=ВыбОтложенных.Купон;
		//СейчасСкидка=ВыбОтложенных.Скидка;
		//Телефон=ВыбОтложенных.Телефон;
		//Бирка=ВыбОтложенных.Бирка;
		СтрокаТаб.ИдентификаторСтойки=СтрокаТабСтойки.ИдентификаторСтойки; 
		
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	Если (Найти(ИмяПользователя(),"Директор")=0) И (Найти(ИмяПользователя(),"Администратор")=0) И (Найти(ИмяПользователя(),"prof1c")=0) Тогда
		ЭтаФорма.Элементы.КнопкаОтчетБухгалтера.Видимость=Ложь;
		ЭтаФорма.Элементы.КнопкаОтчетБухгалтера.Доступность=Ложь;
		ЭтаФорма.Элементы.КнопкаОтчетЗаСменуНаДату.Видимость=Ложь;
		ЭтаФорма.Элементы.КнопкаОтчетЗаСменуНаДату.Доступность=Ложь;
		ЭтаФорма.Элементы.КнопкаОтчетСтойкаЗаПериод.Видимость=Ложь;
		ЭтаФорма.Элементы.КнопкаОтчетСтойкаЗаПериод.Доступность=Ложь;
	КонецЕсли;
	
	ПриОткрытииНаСервере();
	
	Если СейчасСкидка Тогда
		СкидкаНаСервере();
	КонецЕсли;
	Если СейчасСкидкаРазовая Тогда
		СкидкаНаСервереРазовая();
	КонецЕсли;
	Если СейчасКупон Тогда
		КупонНаСервере();
	КонецЕсли;
	Если СкидкаИнетМаг Тогда
		СкидкаНаСервереИнетМаг();
	КонецЕсли;
	
	//++dev1 Проверка активности скидки, если не включена то видимость скидки скрывается с формы
	
	Активность = СкидкаАктивнаПоСкладу();  
	Если Активность.Скидка10 = Ложь тогда
		ЭтаФорма.Элементы.СкидкаИнетМаг.Видимость = Ложь;
	КонецЕсли;
	Если Активность.Скидка20 = Ложь тогда
		ЭтаФорма.Элементы.РазоваяСкидка.Видимость = Ложь;
	КонецЕсли;

	//--dev1
	
	
	ТаблицаПриОкончанииРедактированияНаСервере(); 
	
			
	
	
КонецПроцедуры  


//++dev1 24.04 Добавил два доп.реквизита(скидка10, скидка20) в склады, Функция получает значения дополнительных реквизитов скидок на 10% и на 20% 
//от склада текущего пользователя. Проверяет значение булево у скидки и передает структуру значений в процедуру при открытии формы. 
&НаСервере
Функция СкидкаАктивнаПоСкладу()

	Склад = ПолучитьСклад(ПользователиКлиентСервер.ТекущийПользователь());	
	ДопРеквСвойство10 = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Скидка10_5ea5aec9b944484899f76192467a4a59");
	ДопРеквСвойство20 = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Скидка20_13e743ea87ff4b58b71588583f691e51");  
	СтруктураСкидок = Новый Структура;
	
	Если ЗначениеЗаполнено(Склад) тогда // у текущего пользователя не заполнен склад
	    СкидкаАктивна10 = Склад.ДополнительныеРеквизиты.Найти(ДопРеквСвойство10, "Свойство");
		СкидкаАктивна20 = Склад.ДополнительныеРеквизиты.Найти(ДопРеквСвойство20, "Свойство");     
		
		Если НЕ СкидкаАктивна10 = Неопределено Тогда
			СтруктураСкидок.Вставить("Скидка10", СкидкаАктивна10.Значение);
		Иначе
			СтруктураСкидок.Вставить("Скидка10", Ложь);
		КонецЕсли;
		
		Если НЕ СкидкаАктивна20 = Неопределено Тогда
			СтруктураСкидок.Вставить("Скидка20", СкидкаАктивна20.Значение);
		Иначе
			СтруктураСкидок.Вставить("Скидка20", Ложь);
		КонецЕсли;
	
		Возврат СтруктураСкидок;
	Иначе       
		СтруктураСкидок.Вставить("Скидка10", Истина);
		СтруктураСкидок.Вставить("Скидка20", Истина);	
	    Возврат СтруктураСкидок;
	КонецЕсли;
		
КонецФункции
//--dev1 24.03   

&НаСервере
Процедура ОтложитьНаСервере()
	
	Если СтрДлина(СокрЛП(ИдентификаторОтложенногоЧека))<>0 Тогда
		НаборЗаписей = РегистрыСведений.ШМ_ОтложенныеЧеки.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.ИдентификаторЧека.Установить(ИдентификаторОтложенногоЧека); 
		НаборЗаписей.Записать();
	КонецЕсли;
	
	ДатаОтложения=ТекущаяДата();
	//НаборЗаписейОтлож = РегистрыСведений.ШМ_ОтложенныеЧеки.СоздатьНаборЗаписей();
	//НаборЗаписейОтлож.Прочитать();
	Для Каждого СтрТаб Из Таб Цикл
		МенеджеОтлож=РегистрыСведений.ШМ_ОтложенныеЧеки.СоздатьМенеджерЗаписи();
		//НаборЗаписейОтлож.Прочитать();
		//МенеджеОтлож = НаборЗаписейОтлож.Добавить();
		МенеджеОтлож.ДатаЧека=ДатаОтложения;
		МенеджеОтлож.Номенклатура=СтрТаб.Номенклатура;
		МенеджеОтлож.Количество=СтрТаб.Количество;
		МенеджеОтлож.Цена=СтрТаб.Цена;
		МенеджеОтлож.Сумма=СтрТаб.Сумма;
		Если СтрТаб.Сотрудник.Пустая()=Ложь Тогда
			МенеджеОтлож.Сотрудник=СтрТаб.Сотрудник;
		Иначе
			//СтруктураПроф = ПрофессияНоменклатура(СтрТаб.Номенклатура); //Сотрудник,Сотрудник2,Размер,Размер2,ВидОплаты
			//МенеджеОтлож.Сотрудник=СтруктураПроф.Сотрудник;
		КонецЕсли;
		МенеджеОтлож.НомерМашины=НомерМашины;
		МенеджеОтлож.СуммаБезСкидки=СтрТаб.СуммаБезСкидки;
		МенеджеОтлож.СуммаСкидки=СтрТаб.СуммаСкидки;
		МенеджеОтлож.Купон=СейчасКупон;
		МенеджеОтлож.Скидка=СейчасСкидка;
		МенеджеОтлож.СкидкаРазовая=СейчасСкидкаРазовая;
		МенеджеОтлож.Телефон=Телефон;
		МенеджеОтлож.Бирка=Бирка;
		МенеджеОтлож.КолГруз1=СтрТаб.КолГруз1;
		МенеджеОтлож.КолГруз2=СтрТаб.КолГруз2;
		Если СтрДлина(СокрЛП(ИдентификаторОтложенногоЧека))=0 Тогда
			МенеджеОтлож.ИдентификаторЧека=Строка(ДатаОтложения)+" бирка: "+Строка(Бирка)+" Номер машины: "+НомерМашины+" Телефон: "+Телефон;
		Иначе
			МенеджеОтлож.ИдентификаторЧека=ИдентификаторОтложенногоЧека;
		КонецЕсли;
		МенеджеОтлож.ДатаВыполнения=СтрТаб.ДатаВыполнения;
		МенеджеОтлож.Выполнен=СтрТаб.Выполнен;
		//++Безроднов 17.02  В рс отложенные чеки,добавил реквизит рабочего места для использования условия по точкам продажи в запросе
		МенеджеОтлож.РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
		//--Безроднов 17.02
		МенеджеОтлож.Записать();
		//НаборЗаписейОтлож.Записать();
	КонецЦикла;
	ИдентификаторОтложенногоЧека="";
	Таб.Очистить();
	НомерМашины = "";
	Бирка="";
	Телефон="";
	ДомойНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Отложить(Команда)
	
	//Если (СейчасСкидкаРазовая=Истина) ИЛИ (СейчасСкидка=Истина) ИЛИ (СейчасКупон=Истина) ИЛИ (СкидкаИнетМаг=Истина) Тогда
	//	Предупреждение("Отложить без скидки запрещено!");
	//	Возврат;
	//КонецЕсли;
	
	Если СтрДлина(СокрЛП(НомерМашины))=0 Тогда
		Сообщить("Не заполнен номер машины!");
		Возврат;
	КонецЕсли;
	
	Если СтрДлина(СокрЛП(Телефон))=0 Тогда
		Сообщить("Не заполнен телефон!");
		Возврат;
	КонецЕсли;
	
	Если СтрДлина(СокрЛП(Бирка))=0 Тогда
		Сообщить("Не заполнена бирка!");
		Возврат;
	КонецЕсли;
	
	КолЧиселВТелефоне=0;
	Для СчЧисел=1 По 15 Цикл
		Если Сред(Телефон,СчЧисел,1)="0" ИЛИ
			 Сред(Телефон,СчЧисел,1)="1" ИЛИ
			 Сред(Телефон,СчЧисел,1)="2" ИЛИ
			 Сред(Телефон,СчЧисел,1)="3" ИЛИ
			 Сред(Телефон,СчЧисел,1)="4" ИЛИ
			 Сред(Телефон,СчЧисел,1)="5" ИЛИ
			 Сред(Телефон,СчЧисел,1)="6" ИЛИ
			 Сред(Телефон,СчЧисел,1)="7" ИЛИ
			 Сред(Телефон,СчЧисел,1)="8" ИЛИ
			 Сред(Телефон,СчЧисел,1)="9"
		Тогда
			КолЧиселВТелефоне=КолЧиселВТелефоне+1;
		КонецЕсли;
	КонецЦикла;
	
	Если (КолЧиселВТелефоне<>8) И (КолЧиселВТелефоне<>11) Тогда
		Сообщить("Неверно заполнен телефон!");
		Возврат;
	КонецЕсли;
	
	ОтложитьНаСервере();
	
	Предупреждение("Заказ отложен в раздел СДЕЛАТЬ!");
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьОтложенныйНаСервере()
	
	//НаборОтложенных=РегистрыСведений.ШМ_ОтложенныеЧеки.СоздатьНаборЗаписей();
	//НаборОтложенных.Прочитать();
	//ТаблОтложенных=Новый СписокЗначений;
	//Для Каждого СтрокаНаборОтложенных Из НаборОтложенных Цикл
	//	ТаблОтложенных.Добавить(СтрокаНаборОтложенных.ДатаЧека);
	//КонецЦикла;
	//ТаблОтложенных.ВыбратьЭлемент();
	
	//Ф=РегистрыСведений.ШМ_ОтложенныеЧеки.ПолучитьФормуСписка();
	//Резл=Ф.ОткрытьМодально();
	
КонецПроцедуры

Функция ПолучитьВсеОтложенныеНаСервере()
	
	НаборОтложенных=РегистрыСведений.ШМ_ОтложенныеЧеки.СоздатьНаборЗаписей();
	НаборОтложенных.Прочитать();
	ТаблОтложенных=Новый ТаблицаЗначений;
	ТаблОтложенных.Колонки.Добавить("ДатаЧека");
	ТаблОтложенных.Колонки.Добавить("Отбит");
	ТаблОтложенных.Колонки.Добавить("Номенклатура");
	ТаблОтложенных.Колонки.Добавить("Количество");
	ТаблОтложенных.Колонки.Добавить("Цена");
	ТаблОтложенных.Колонки.Добавить("Сумма");
	ТаблОтложенных.Колонки.Добавить("Сотрудник");
	ТаблОтложенных.Колонки.Добавить("НомерМашины");
	ТаблОтложенных.Колонки.Добавить("СуммаБезСкидки");
	ТаблОтложенных.Колонки.Добавить("СуммаСкидки");
	Для Каждого СтрокаНаборОтложенных Из НаборОтложенных Цикл
		СтрокаТаблОтложенных=ТаблОтложенных.Добавить();
		СтрокаТаблОтложенных.ДатаЧека=СтрокаНаборОтложенных.ДатаЧека;
		СтрокаТаблОтложенных.Отбит=СтрокаНаборОтложенных.Отбит;
		СтрокаТаблОтложенных.Номенклатура=СтрокаНаборОтложенных.Номенклатура;
		СтрокаТаблОтложенных.Количество=СтрокаНаборОтложенных.Количество;
		СтрокаТаблОтложенных.Цена=СтрокаНаборОтложенных.Цена;
		СтрокаТаблОтложенных.Сумма=СтрокаНаборОтложенных.Сумма;
		СтрокаТаблОтложенных.Сотрудник=СтрокаНаборОтложенных.Сотрудник;
		СтрокаТаблОтложенных.НомерМашины=СтрокаНаборОтложенных.НомерМашины;
		СтрокаТаблОтложенных.СуммаБезСкидки=СтрокаНаборОтложенных.СуммаБезСкидки;
		СтрокаТаблОтложенных.СуммаСкидки=СтрокаНаборОтложенных.СуммаСкидки;
	КонецЦикла;
	
	//ТаблОтложенных.ВыбратьСтроку();
	
	Возврат ТаблОтложенных;
	
КонецФункции

&НаКлиенте
Процедура ВосстановитьОтложенный(Команда)
	
	ОткрытьФорму("Обработка.Шиномонтаж.Форма.Отложенные");
	ЭтаФорма.Закрыть();
	
	////ТаблицаОтложенных=Новый ТаблицаЗначений;
	//ТаблицаОтложенных=ПолучитьВсеОтложенныеНаСервере();
	//ТаблицаОтложенных.ВыбратьСтроку();
	//////Ф=РегистрыСведений.ШМ_ОтложенныеЧеки.ПолучитьФормуСписка();
	//////Резл=Ф.ОткрытьМодально();
	////ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор", Истина, Ложь);
	////ОткрытьФорму("РегистрСведений.ШМ_ОтложенныеЧеки.ФормаСписка",ПараметрыПодбора,Элементы.Таблица);
	//
	//
	//
	////ВосстановитьОтложенныйНаСервере();
КонецПроцедуры

&НаСервере
Процедура ТаблицаОбработкаВыбораНаСервере(ВыбранноеЗначение)
	
	//Сообщить("!!!");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТаблицаОбработкаВыбораНаСервере(ВыбранноеЗначение);
КонецПроцедуры

&НаСервере
Процедура СкидкаНаСервере()
	
	Для Каждого СтрТаб Из Таб Цикл
		
		ПроцСк=0;
		НаборСкидки=РегистрыСведений.ШМ_Скидки.СоздатьНаборЗаписей();
		НаборСкидки.Отбор.Номенклатура.Установить(СтрТаб.Номенклатура,Истина);
		НаборСкидки.Прочитать();
		Для Каждого СтрНаборСкидки Из НаборСкидки Цикл
			ПроцСк=СтрНаборСкидки.ПроцентСкидки;
		КонецЦикла;
		
		СтрТаб.СуммаСкидки=Окр((СтрТаб.Цена*СтрТаб.Количество)*(ПроцСк/100),0);
		СтрТаб.Сумма=СтрТаб.Цена*СтрТаб.Количество-СтрТаб.СуммаСкидки;
		СтрТаб.СуммаБезСкидки=СтрТаб.Цена*СтрТаб.Количество;
	КонецЦикла;
	
	
КонецПроцедуры

Процедура КупонНаСервере()
	
	Для Каждого СтрТаб Из Таб Цикл
		
		ПроцСк=0;
		НаборСкидки=РегистрыСведений.ШМ_Купоны.СоздатьНаборЗаписей();
		НаборСкидки.Отбор.Номенклатура.Установить(СтрТаб.Номенклатура,Истина);
		НаборСкидки.Прочитать();
		Для Каждого СтрНаборСкидки Из НаборСкидки Цикл
			ПроцСк=СтрНаборСкидки.ПроцентСкидки;
		КонецЦикла;
		
		СтрТаб.СуммаСкидки=Окр((СтрТаб.Цена*СтрТаб.Количество)*(ПроцСк/100),0);
		СтрТаб.Сумма=СтрТаб.Цена*СтрТаб.Количество-СтрТаб.СуммаСкидки;
		СтрТаб.СуммаБезСкидки=СтрТаб.Цена*СтрТаб.Количество;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Скидка(Команда)
	СейчасСкидка=Истина;
	СейчасСкидкаРазовая=Ложь;
	СейчасКупон=Ложь;
	СкидкаИнетМаг=Ложь;
	СкидкаНаСервере();
	ТаблицаПриОкончанииРедактированияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Купон(Команда)
	СейчасСкидка=Ложь;
	СейчасСкидкаРазовая=Ложь;
	СейчасКупон=Истина;
	СкидкаИнетМаг=Ложь;
	//ТС = Элементы.Таблица.ТекущиеДанные;
	//
	//ПроцКупон=ПолучитьСкидкуПоКупонуНаСервере(ТС.Номенклатура);
	//ТС.СуммаСкидки=(ТС.Количество * ТС.Цена)*(ПроцКупон/100);
	//ТС.СуммаБезСкидки = ТС.Количество * ТС.Цена;
	//ТС.Сумма = ТС.Количество * ТС.Цена-ТС.СуммаСкидки;
	
	КупонНаСервере();

	ТаблицаПриОкончанииРедактированияНаСервере();

КонецПроцедуры

&НаСервере
Функция ПолучитьСкидкуПоКупонуНаСервере(Ном)
	
	ПроцСк=0;
	НаборСкидки=РегистрыСведений.ШМ_Купоны.СоздатьНаборЗаписей();
	НаборСкидки.Отбор.Номенклатура.Установить(Ном,Истина);
	НаборСкидки.Прочитать();
	Для Каждого СтрНаборСкидки Из НаборСкидки Цикл
		ПроцСк=СтрНаборСкидки.ПроцентСкидки;
	КонецЦикла;
	
	Возврат ПроцСк;
	
КонецФункции

Процедура ОтменаСкидокНаСервере()
	
	Для Каждого СтрТаб Из Таб Цикл
		
		ПроцСк=0;
		СтрТаб.СуммаСкидки=Окр((СтрТаб.Цена*СтрТаб.Количество)*(ПроцСк/100),0);
		СтрТаб.Сумма=СтрТаб.Цена*СтрТаб.Количество-СтрТаб.СуммаСкидки;
		СтрТаб.СуммаБезСкидки=СтрТаб.Цена*СтрТаб.Количество;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаСкидок(Команда)
	СейчасСкидка=Ложь;
	СейчасКупон=Ложь;
	СкидкаИнетМаг=Ложь;
	СейчасСкидкаРазовая=Ложь;
	//СкидкаНаСервере();
	//КупонНаСервере();
	ОтменаСкидокНаСервере();
	ТаблицаПриОкончанииРедактированияНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаПослеУдаления(Элемент)
	
	Если СейчасСкидка Тогда
		СкидкаНаСервере();
	КонецЕсли;
	Если СейчасСкидкаРазовая Тогда
		СкидкаНаСервереРазовая();
	КонецЕсли;
	Если СейчасКупон Тогда
		КупонНаСервере();
	КонецЕсли;

	ТаблицаПриОкончанииРедактированияНаСервере();
	
КонецПроцедуры


&НаКлиенте
Процедура РазоваяСкидка(Команда)
	СейчасСкидкаРазовая=Истина;
	СейчасСкидка=Ложь;
	СейчасКупон=Ложь;
	СкидкаИнетМаг=Ложь;
	СкидкаНаСервереРазовая();
	ТаблицаПриОкончанииРедактированияНаСервере();
КонецПроцедуры

&НаСервере
Процедура СкидкаНаСервереРазовая()
	
	Для Каждого СтрТаб Из Таб Цикл
		
		ПроцСк=0;
		НаборСкидки=РегистрыСведений.ШМ_Скидки.СоздатьНаборЗаписей();
		НаборСкидки.Отбор.Номенклатура.Установить(СтрТаб.Номенклатура,Истина);
		НаборСкидки.Прочитать();
		Для Каждого СтрНаборСкидки Из НаборСкидки Цикл
			//Если СтрНаборСкидки.Действует = Истина тогда
			ПроцСк=СтрНаборСкидки.ПроцентСкидкиРазовая;
			//иначе ничего не делать
			//КонецЕсли
		КонецЦикла;
		
		СтрТаб.СуммаСкидки=Окр((СтрТаб.Цена*СтрТаб.Количество)*(ПроцСк/100),0);
		СтрТаб.Сумма=СтрТаб.Цена*СтрТаб.Количество-СтрТаб.СуммаСкидки;
		СтрТаб.СуммаБезСкидки=СтрТаб.Цена*СтрТаб.Количество;
	КонецЦикла;
	
	
КонецПроцедуры


&НаКлиенте
Процедура СкидкаИнтернетМагазин(Команда)
	СейчасСкидка=Ложь;
	СейчасСкидкаРазовая=Ложь;
	СейчасКупон=Ложь;
	//++Dev1 24.03 если доп реквизит  
	//Если СкидкаАктивнаПоСкладу Тогда
		СкидкаИнетМаг = Истина;	
	//Иначе 
	//	СкидкаИнетМаг = Ложь;
	//КонецЕсли;
	//--Dev1 
	СкидкаНаСервереИнетМаг();
	ТаблицаПриОкончанииРедактированияНаСервере();
КонецПроцедуры  


&НаСервере
Процедура СкидкаНаСервереИнетМаг()
	
	Для Каждого СтрТаб Из Таб Цикл
		
		ПроцСк=0;
		НаборСкидки=РегистрыСведений.ШМ_Скидки.СоздатьНаборЗаписей();
		НаборСкидки.Отбор.Номенклатура.Установить(СтрТаб.Номенклатура,Истина);
		НаборСкидки.Прочитать();
		Для Каждого СтрНаборСкидки Из НаборСкидки Цикл 
			//Если СтрНаборСкидки.Действует = Истина тогда
			ПроцСк=СтрНаборСкидки.ПроцентСкидкиИнетМаг;
			//иначе ничего не делать
			//КонецЕсли
		КонецЦикла;
		
		СтрТаб.СуммаСкидки=Окр((СтрТаб.Цена*СтрТаб.Количество)*(ПроцСк/100),0);
		СтрТаб.Сумма=СтрТаб.Цена*СтрТаб.Количество-СтрТаб.СуммаСкидки;
		СтрТаб.СуммаБезСкидки=СтрТаб.Цена*СтрТаб.Количество;
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаКромеМатериал(Команда)
	СейчасСкидка=Истина;
	СейчасСкидкаРазовая=Ложь;
	СейчасКупон=Ложь;
	СкидкаИнетМаг=Ложь;
	СкидкаНаСервереКромеМатериал();
	ТаблицаПриОкончанииРедактированияНаСервере();
КонецПроцедуры

&НаСервере
Процедура СкидкаНаСервереКромеМатериал()
	
	Для Каждого СтрТаб Из Таб Цикл
		
		ПроцСк=0;
		НаборСкидки=РегистрыСведений.ШМ_Скидки.СоздатьНаборЗаписей();
		НаборСкидки.Отбор.Номенклатура.Установить(СтрТаб.Номенклатура,Истина);
		НаборСкидки.Прочитать();
		Для Каждого СтрНаборСкидки Из НаборСкидки Цикл
			ПроцСк=СтрНаборСкидки.ПроцентСкидкиКромеМатериал;
		КонецЦикла;
		
		СтрТаб.СуммаСкидки=Окр((СтрТаб.Цена*СтрТаб.Количество)*(ПроцСк/100),0);
		СтрТаб.Сумма=СтрТаб.Цена*СтрТаб.Количество-СтрТаб.СуммаСкидки;
		СтрТаб.СуммаБезСкидки=СтрТаб.Цена*СтрТаб.Количество;
	КонецЦикла;
	
	
КонецПроцедуры


&НаКлиенте
Процедура ПоказатьОстатки(Команда)               
	
	Оповещение = Новый ОписаниеОповещения("ВыборОстаткиЗавершение",ЭтаФорма);
    ОткрытьФорму("Справочник.РабочиеМеста.ФормаВыбора", ,,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Функция ВыборОстаткиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТабДок = ПолучитьЗапрос(Результат);
	ТабДок.Показать();  

КонецФункции


&НаКлиенте
Процедура ТаблицаПередНачаломИзменения(Элемент, Отказ)
	
	ТС = Элемент.ТекущиеДанные;
	
	////Если Элемент.ТекущийЭлемент.Имя="ТаблицаЦена" ИЛИ
	////	Элемент.ТекущийЭлемент.Имя="ТаблицаСуммаБезСкидки" ИЛИ
	////	Элемент.ТекущийЭлемент.Имя="ТаблицаСуммаСкидки" ИЛИ
	////	Элемент.ТекущийЭлемент.Имя="ТаблицаСумма"
	////Тогда
	//	СтрокаНом=ВРЕГ(Строка(ТС.Номенклатура));
	//	Если Найти(СтрокаНом,"УСТАНОВКА П/К/Д БУ")>0 ИЛИ
	//		Найти(СтрокаНом,"ПРАВКА")>0 ИЛИ
	//		Найти(СтрокаНом,"СВАРКА")>0 ИЛИ
	//		Найти(СтрокаНом,"ШИП")>0 ИЛИ
	//		Найти(СтрокаНом,"ГРУЗ БАЛАНСИРОВОЧНЫЙ")>0 ИЛИ
	//		Найти(СтрокаНом,"МАСТЕРСКОЙ")>0 ИЛИ
	//		Найти(СтрокаНом,"НАПЛАВЛЕНИЕ")>0
	//	Тогда
	//		Отказ=Ложь;
	//	Иначе
	//		Отказ=Истина;
	//	КонецЕсли;
	////КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТС = Элемент.ТекущиеДанные;
	
	////Если Элемент.ТекущийЭлемент.Имя="ТаблицаЦена" ИЛИ
	////	Элемент.ТекущийЭлемент.Имя="ТаблицаСуммаБезСкидки" ИЛИ
	////	Элемент.ТекущийЭлемент.Имя="ТаблицаСуммаСкидки" ИЛИ
	////	Элемент.ТекущийЭлемент.Имя="ТаблицаСумма"
	////Тогда
	//	СтрокаНом=ВРЕГ(Строка(ТС.Номенклатура));
	//	Если Найти(СтрокаНом,"УСТАНОВКА П/К/Д БУ")>0 ИЛИ
	//		Найти(СтрокаНом,"ПРАВКА")>0 ИЛИ
	//		Найти(СтрокаНом,"СВАРКА")>0 ИЛИ
	//		Найти(СтрокаНом,"ШИП")>0 ИЛИ
	//		Найти(СтрокаНом,"ГРУЗ БАЛАНСИРОВОЧНЫЙ")>0 ИЛИ
	//		Найти(СтрокаНом,"МАСТЕРСКОЙ")>0 ИЛИ
	//		Найти(СтрокаНом,"НАПЛАВЛЕНИЕ")>0
	//	Тогда
	//		Отказ=Ложь;
	//	Иначе
	//		Отказ=Истина;
	//	КонецЕсли;
	////КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	Если РежимЗакрытияСмены() Тогда
		
		ОтменяемРежимЗакрытияСмены();
		
		Если Вопрос("Закрыть смену?",РежимДиалогаВопрос.ДаНет,,,"Закрытие смены",)=КодВозвратаДиалога.Да Тогда
			Если ТекущаяСменаЗакрыта()=Ложь Тогда
				
				СоздатьРеализациюПоМатериалам("Материалы");
				ЗакрытьСменуНаСервере();
				СоставСмены();
			Иначе
				Сообщить("Текущая смена уже закрыта!");
				ОткрытьФормуМодально("Документ.КассоваяСмена.Форма.ФормаСписка",, ЭтотОбъект);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЧерновик(Команда)
	ТабДок = ПолучитьТабДокЧерновика();
	ТабДок.Показать();
КонецПроцедуры

&НаКлиенте
Процедура ОтчетБухгалтера(Команда)
	
	ДатаНачалаОтчета=НачалоМесяца(ТекущаяДата());
	ДатаОкончанияОтчета=КонецМесяца(ТекущаяДата());
	
	//ВвестиДату(ДатаНачалаОтчета,"Ввод даты периода отчета",ЧастиДаты.Дата);
	ВвестиДату(ДатаНачалаОтчета,"Ввод даты начала отчета",ЧастиДаты.Дата);
	ВвестиДату(ДатаОкончанияОтчета,"Ввод даты окончания отчета",ЧастиДаты.Дата);
	//ДатаНачалаОтчета=НачалоМесяца(ДатаНачалаОтчета);
	//ДатаОкончанияОтчета=КонецМесяца(ДатаНачалаОтчета);
	
	ДатаНачалаОтчета=НачалоДня(ДатаНачалаОтчета);
	ДатаОкончанияОтчета=КонецДня(ДатаОкончанияОтчета);
	
	ТабДок = ПолучитьТабДокОтчетБухгалтера();
	Если ТабДок=Неопределено Тогда
		Предупреждение("Не хватает данных для расчета!");
	Иначе
		ТабДок.Показать();
	КонецЕсли;
	
	ТабДокПомощники=ПолучитьТабДокОтчетБухгалтераПомощники();
	Если ТабДокПомощники=Неопределено Тогда
		Предупреждение("Не хватает данных для расчета!");
	Иначе
		ТабДокПомощники.Показать();
	КонецЕсли;
	
	ТабДокДопИсполнителиДолговая=ПолучитьТабДокОтчетБухгалтераДопИсполнителиДолговая();
	Если ТабДокДопИсполнителиДолговая=Неопределено Тогда
		Предупреждение("Не хватает данных для расчета!");
	Иначе
		ТабДокДопИсполнителиДолговая.Показать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникОткрытие(Элемент, СтандартнаяОбработка)
	//Сообщить(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЧерновик2020(Команда)
	ТабДок = ПолучитьТабДокЧерновика2020(); 
	Если ТипЗнч(ТабДок) = Тип("Булево") Тогда 
		Возврат
	КонецЕсли;
	ТабДок.Показать();
КонецПроцедуры

&НаСервере
Функция ПроверкаКартыНаСервере(Тел)
	КартаНайдена=Ложь;
	ВыбКарт = Справочники.ШМ_КартыСкидок.Выбрать();
	Пока ВыбКарт.Следующий() Цикл
		Если СокрЛП(Тел)=СокрЛП(ВыбКарт.Наименование) Тогда
			КартаНайдена=Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат КартаНайдена;
КонецФункции

&НаКлиенте
Процедура ПроверкаКарты(Команда)
	Если ПроверкаКартыНаСервере(Телефон) Тогда
		Предупреждение("Карта есть!");
	Иначе
		Предупреждение("Карты нет!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтойкуВТочках(Команда)
	ОткрытьФорму("Справочник.ШМ_СтойкаВТочках.ФормаСписка");
КонецПроцедуры

&НаСервере
Процедура ВнестиКартуНаСервере(Тел)
	Если ПроверкаКартыНаСервере(Тел)=Ложь Тогда
		НоваяКарта=Справочники.ШМ_КартыСкидок.СоздатьЭлемент();
		НоваяКарта.Наименование = Тел;
		НоваяКарта.Записать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВнестиКарту(Команда)
	ВнестиКартуНаСервере(Телефон);
	Предупреждение("Карта добавлена!");
	Телефон = "";
КонецПроцедуры

&НаКлиенте
Процедура НомерМашиныОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура НомерМашиныПриИзменении(Элемент)
	//Таб.Очистить();
	//Телефон = "";
	//Бирка = "";
	//ОтменаСкидок(Элемент);
КонецПроцедуры

&НаСервере
Функция КонецСменыНаДатуЧерновик(НачалоСмены)  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ШМ_Смены.Период КАК Период,
		|	ШМ_Смены.ИмяКомпьютера КАК ИмяКомпьютера,
		|	ШМ_Смены.НомерСмены КАК НомерСмены
		|ИЗ
		|	РегистрСведений.ШМ_Смены КАК ШМ_Смены
		|ГДЕ
		|	ШМ_Смены.ИмяКомпьютера = &ИмяКомпьютера
		|	И ШМ_Смены.Период > &НачалоПериода
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";

 
	ТекущееРабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	Запрос.УстановитьПараметр("НачалоПериода", НачалоСмены); 
	Запрос.УстановитьПараметр("ИмяКомпьютера", ТекущееРабочееМесто.Наименование);   
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл 
		Возврат Выборка.Период
	КонецЦикла;  
	
	Возврат ТекущаяДата();
КонецФункции

&НаСервере
Функция ПоказатьЧерновикНаДатуНаСервере(ДатаСмены)
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Черновик";
	Макет = ПолучитьМакетЧерновика2020();
	
	НачалоСмены = НачалоСменыНаДату(ДатаСмены);      
	
	Если ТипЗнч(НачалоСмены) = Тип("Булево") Тогда 
		Сообщить(СтрШаблон("За указанный период(%1) не зарегестрировано смен. Сообщите в IT о данной проблеме", НачалоДня(ДатаСмены)));
		Возврат Ложь;
	КонецЕсли; 
	
	КонецСмены = КонецСменыНаДатуЧерновик(КонецДня(НачалоСмены));
	//1softpro pok 18.02.2025 +++ Начало смены всегда 9:00
	//НачалоСмены = НачалоДня(ДатаСмены)+ 60*60*9;
	//КонецСмены = НачалоСмены + 60*60*24;
	
	Если КонецСмены = ложь Тогда 
		КонецСмены = ТекущаяДата();
	КонецЕсли;
	//--
	
	
	//Если НачалоСмены = КонецСмены Тогда 
	//	КонецСмены = КонецДня(ДатаСмены); 
	//КонецЕсли;
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьСтрокаЖирн = Макет.ПолучитьОбласть("СтрокаЖирн");
	ОбластьСтрокаИтог = Макет.ПолучитьОбласть("СтрокаИтог");
	
	//ОбластьЗаголовок.Параметры.ДатаОтчета=Формат(КонецСмены,"ДЛФ=Д");
	ОбластьЗаголовок.Параметры.ДатаОтчета=Формат(ДатаСмены,"ДЛФ=Д");
	ОбластьЗаголовок.Параметры.Шиномонтажник="";
	ОбластьЗаголовок.Параметры.Съемщик="";
	ОбластьЗаголовок.Параметры.Дископравщик="";   
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_БригадыСрезПоследних.Должность КАК Должность,
		|	ШМ_БригадыСрезПоследних.Помощник КАК Помощник,
		|	ШМ_БригадыСрезПоследних.ИмяКомпьютера КАК ИмяКомпьютера,
		|	ШМ_БригадыСрезПоследних.Сотрудник КАК Сотрудник,
		|	ШМ_БригадыСрезПоследних.Период КАК Период
		|ИЗ
		|	РегистрСведений.ШМ_Бригады КАК ШМ_БригадыСрезПоследних
		|ГДЕ
		|	ШМ_БригадыСрезПоследних.ИмяКомпьютера = &ИмяКомпьютера
		|	И ШМ_БригадыСрезПоследних.Период МЕЖДУ &НачалоСмены И &КонецСмены
		|
		|СГРУППИРОВАТЬ ПО
		|	ШМ_БригадыСрезПоследних.Сотрудник,
		|	ШМ_БригадыСрезПоследних.ИмяКомпьютера,
		|	ШМ_БригадыСрезПоследних.Помощник,
		|	ШМ_БригадыСрезПоследних.Должность,
		|	ШМ_БригадыСрезПоследних.Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	Должность";
	
	ТекущееРабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	Запрос.УстановитьПараметр("ИмяКомпьютера", ТекущееРабочееМесто.Наименование);
	Запрос.УстановитьПараметр("НачалоСмены", НачалоСмены);
	Запрос.УстановитьПараметр("КонецСмены", КонецСмены);
	Выборка = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаВыборка из Выборка Цикл
		Если (СтрокаВыборка.Должность.Наименование="Шиномонтажник") И (СтрокаВыборка.Помощник=Ложь) Тогда
			ОбластьЗаголовок.Параметры.Шиномонтажник=СтрокаВыборка.Сотрудник;
			ШиномонтажникСегодня=СтрокаВыборка.Сотрудник;
		ИначеЕсли (СтрокаВыборка.Должность.Наименование="Съемщик") И (СтрокаВыборка.Помощник=Ложь) Тогда
			ОбластьЗаголовок.Параметры.Съемщик=СтрокаВыборка.Сотрудник;
			СъемщикСегодня=СтрокаВыборка.Сотрудник;
		ИначеЕсли (СтрокаВыборка.Должность.Наименование="Правщик дисков") И (СтрокаВыборка.Помощник=Ложь) Тогда
			ОбластьЗаголовок.Параметры.Дископравщик=СтрокаВыборка.Сотрудник;
		ИначеЕсли (СтрокаВыборка.Должность.Наименование="Проточник") И (СтрокаВыборка.Помощник=Ложь) Тогда
			ОбластьЗаголовок.Параметры.Проточник=СтрокаВыборка.Сотрудник;
		КонецЕсли;
	КонецЦикла;
	
	ТабДок.Вывести(ОбластьЗаголовок);
	ИтогСумма=0;
	ИтогШиномонт=0;
	ИтогСъем=0;
	ИтогКолБал=0;
	ИтогСумЗаГруза=0;
	ИтогМат=0;
	ИтогПравка=0;
	ИтогПрот=0;
	//
	ИтогМатДиск=0;
	ИтогСПЦ = 0;
	//
	лТекст = "ВЫБРАТЬ
	         |	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	         |	РеализацияТоваровУслуг.ВерсияДанных КАК ВерсияДанных,
	         |	РеализацияТоваровУслуг.ПометкаУдаления КАК ПометкаУдаления,
	         |	РеализацияТоваровУслуг.Номер КАК Номер,
	         |	РеализацияТоваровУслуг.Дата КАК Дата,
	         |	РеализацияТоваровУслуг.Проведен КАК Проведен,
	         |	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
	         |	РеализацияТоваровУслуг.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
	         |	РеализацияТоваровУслуг.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	         |	РеализацияТоваровУслуг.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
	         |	РеализацияТоваровУслуг.БанковскийСчетГрузополучателя КАК БанковскийСчетГрузополучателя,
	         |	РеализацияТоваровУслуг.Валюта КАК Валюта,
	         |	РеализацияТоваровУслуг.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	         |	РеализацияТоваровУслуг.Грузоотправитель КАК Грузоотправитель,
	         |	РеализацияТоваровУслуг.Грузополучатель КАК Грузополучатель,
	         |	РеализацияТоваровУслуг.УдалитьДатаПлатежа КАК УдалитьДатаПлатежа,
	         |	РеализацияТоваровУслуг.ДатаРаспоряжения КАК ДатаРаспоряжения,
	         |	РеализацияТоваровУслуг.ДоверенностьВыдана КАК ДоверенностьВыдана,
	         |	РеализацияТоваровУслуг.ДоверенностьДата КАК ДоверенностьДата,
	         |	РеализацияТоваровУслуг.ДоверенностьЛицо КАК ДоверенностьЛицо,
	         |	РеализацияТоваровУслуг.ДоверенностьНомер КАК ДоверенностьНомер,
	         |	РеализацияТоваровУслуг.ЗаказКлиента КАК ЗаказКлиента,
	         |	РеализацияТоваровУслуг.Организация КАК Организация,
	         |	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
	         |	РеализацияТоваровУслуг.Менеджер КАК Менеджер,
	         |	РеализацияТоваровУслуг.НалогообложениеНДС КАК НалогообложениеНДС,
	         |	РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
	         |	РеализацияТоваровУслуг.Партнер КАК Партнер,
	         |	РеализацияТоваровУслуг.Подразделение КАК Подразделение,
	         |	РеализацияТоваровУслуг.Сделка КАК Сделка,
	         |	РеализацияТоваровУслуг.СкидкиРассчитаны КАК СкидкиРассчитаны,
	         |	РеализацияТоваровУслуг.Склад КАК Склад,
	         |	РеализацияТоваровУслуг.Согласован КАК Согласован,
	         |	РеализацияТоваровУслуг.Соглашение КАК Соглашение,
	         |	РеализацияТоваровУслуг.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	         |	РеализацияТоваровУслуг.Комментарий КАК Комментарий,
	         |	РеализацияТоваровУслуг.ФормаОплаты КАК ФормаОплаты,
	         |	РеализацияТоваровУслуг.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	         |	РеализацияТоваровУслуг.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	         |	РеализацияТоваровУслуг.Касса КАК Касса,
	         |	РеализацияТоваровУслуг.Отпустил КАК Отпустил,
	         |	РеализацияТоваровУслуг.ОтпустилДолжность КАК ОтпустилДолжность,
	         |	РеализацияТоваровУслуг.РеализацияПоЗаказам КАК РеализацияПоЗаказам,
	         |	РеализацияТоваровУслуг.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	         |	РеализацияТоваровУслуг.КартаЛояльности КАК КартаЛояльности,
	         |	РеализацияТоваровУслуг.Договор КАК Договор,
	         |	РеализацияТоваровУслуг.Основание КАК Основание,
	         |	РеализацияТоваровУслуг.Статус КАК Статус,
	         |	РеализацияТоваровУслуг.Автор КАК Автор,
	         |	РеализацияТоваровУслуг.УдалитьСуммаПредоплаты КАК УдалитьСуммаПредоплаты,
	         |	РеализацияТоваровУслуг.УдалитьСуммаПредоплатыЗаТару КАК УдалитьСуммаПредоплатыЗаТару,
	         |	РеализацияТоваровУслуг.СпособДоставки КАК СпособДоставки,
	         |	РеализацияТоваровУслуг.ЗонаДоставки КАК ЗонаДоставки,
	         |	РеализацияТоваровУслуг.АдресДоставкиЗначенияПолей КАК АдресДоставкиЗначенияПолей,
	         |	РеализацияТоваровУслуг.ПеревозчикПартнер КАК ПеревозчикПартнер,
	         |	РеализацияТоваровУслуг.ВремяДоставкиС КАК ВремяДоставкиС,
	         |	РеализацияТоваровУслуг.ВремяДоставкиПо КАК ВремяДоставкиПо,
	         |	РеализацияТоваровУслуг.АдресДоставкиПеревозчика КАК АдресДоставкиПеревозчика,
	         |	РеализацияТоваровУслуг.АдресДоставкиПеревозчикаЗначенияПолей КАК АдресДоставкиПеревозчикаЗначенияПолей,
	         |	РеализацияТоваровУслуг.ДополнительнаяИнформацияПоДоставке КАК ДополнительнаяИнформацияПоДоставке,
	         |	РеализацияТоваровУслуг.КонтактноеЛицо КАК КонтактноеЛицо,
	         |	РеализацияТоваровУслуг.Руководитель КАК Руководитель,
	         |	РеализацияТоваровУслуг.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	         |	РеализацияТоваровУслуг.ПорядокРасчетов КАК ПорядокРасчетов,
	         |	РеализацияТоваровУслуг.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
	         |	РеализацияТоваровУслуг.ДатаВозвратаМногооборотнойТары КАК ДатаВозвратаМногооборотнойТары,
	         |	РеализацияТоваровУслуг.СостояниеЗаполненияМногооборотнойТары КАК СостояниеЗаполненияМногооборотнойТары,
	         |	РеализацияТоваровУслуг.ВидыЗапасовУказаныВручную КАК ВидыЗапасовУказаныВручную,
	         |	РеализацияТоваровУслуг.ТребуетсяЗалогЗаТару КАК ТребуетсяЗалогЗаТару,
	         |	РеализацияТоваровУслуг.ОснованиеДата КАК ОснованиеДата,
	         |	РеализацияТоваровУслуг.ОснованиеНомер КАК ОснованиеНомер,
	         |	РеализацияТоваровУслуг.ДопоставкаПоРеализации КАК ДопоставкаПоРеализации,
	         |	РеализацияТоваровУслуг.ДатаПереходаПраваСобственности КАК ДатаПереходаПраваСобственности,
	         |	РеализацияТоваровУслуг.ВариантОформленияПродажи КАК ВариантОформленияПродажи,
	         |	РеализацияТоваровУслуг.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
	         |	РеализацияТоваровУслуг.ОсобыеУсловияПеревозки КАК ОсобыеУсловияПеревозки,
	         |	РеализацияТоваровУслуг.ОсобыеУсловияПеревозкиОписание КАК ОсобыеУсловияПеревозкиОписание,
	         |	РеализацияТоваровУслуг.НаправлениеДеятельности КАК НаправлениеДеятельности,
	         |	РеализацияТоваровУслуг.Курс КАК Курс,
	         |	РеализацияТоваровУслуг.Кратность КАК Кратность,
	         |	РеализацияТоваровУслуг.ПорядокОплаты КАК ПорядокОплаты,
	         |	РеализацияТоваровУслуг.ЕстьМаркируемаяПродукцияГИСМ КАК ЕстьМаркируемаяПродукцияГИСМ,
	         |	РеализацияТоваровУслуг.УдалитьЕстьАлкогольнаяПродукцияДляРеализацииРозницаЕГАИС КАК УдалитьЕстьАлкогольнаяПродукцияДляРеализацииРозницаЕГАИС,
	         |	РеализацияТоваровУслуг.СуммаВзаиморасчетовПоТаре КАК СуммаВзаиморасчетовПоТаре,
	         |	РеализацияТоваровУслуг.СуммаМатВычет КАК СуммаМатВычет,
	         |	РеализацияТоваровУслуг.КолГрузБезСкидок КАК КолГрузБезСкидок,
	         |	РеализацияТоваровУслуг.КолГрузСкидка20 КАК КолГрузСкидка20,
	         |	РеализацияТоваровУслуг.КолГрузСкидка50 КАК КолГрузСкидка50,
	         |	РеализацияТоваровУслуг.СуммаГрузБезСкидок КАК СуммаГрузБезСкидок,
	         |	РеализацияТоваровУслуг.СуммаГрузСкидка20 КАК СуммаГрузСкидка20,
	         |	РеализацияТоваровУслуг.СуммаГрузСкидка50 КАК СуммаГрузСкидка50,
	         |	РеализацияТоваровУслуг.ПроцентСкидкиЧерновик КАК ПроцентСкидкиЧерновик,
	         |	РеализацияТоваровУслуг.СуммаШиномонтажЧерновик КАК СуммаШиномонтажЧерновик,
	         |	РеализацияТоваровУслуг.СуммаСъемЧерновик КАК СуммаСъемЧерновик,
	         |	РеализацияТоваровУслуг.СуммаБалЧерновик КАК СуммаБалЧерновик,
	         |	РеализацияТоваровУслуг.Бирка КАК Бирка,
	         |	РеализацияТоваровУслуг.СуммаДископравкаЧерновик КАК СуммаДископравкаЧерновик,
	         |	РеализацияТоваровУслуг.СуммаПроточкаЧерновик КАК СуммаПроточкаЧерновик,
	         |	РеализацияТоваровУслуг.АдресДоставкиЗначение КАК АдресДоставкиЗначение,
	         |	РеализацияТоваровУслуг.АдресДоставкиПеревозчикаЗначение КАК АдресДоставкиПеревозчикаЗначение,
	         |	РеализацияТоваровУслуг.ЮЛ КАК ЮЛ,
	         |	РеализацияТоваровУслуг.СуммаМатВычетПроточка КАК СуммаМатВычетПроточка,
	         |	РеализацияТоваровУслуг.ТипДиска КАК ТипДиска,
	         |	РеализацияТоваровУслуг.ВыбраноАвтоЮЛ КАК ВыбраноАвтоЮЛ,
	         |	РеализацияТоваровУслуг.VISA КАК VISA,
	         |	РеализацияТоваровУслуг.ИмяКомпьютера КАК ИмяКомпьютера,
	         |	РеализацияТоваровУслуг.Товары.(
	         |		Ссылка КАК Ссылка,
	         |		НомерСтроки КАК НомерСтроки,
	         |		Номенклатура КАК Номенклатура,
	         |		Характеристика КАК Характеристика,
	         |		Назначение КАК Назначение,
	         |		Упаковка КАК Упаковка,
	         |		КоличествоУпаковок КАК КоличествоУпаковок,
	         |		Количество КАК Количество,
	         |		ВидЦены КАК ВидЦены,
	         |		Цена КАК Цена,
	         |		Сумма КАК Сумма,
	         |		СтавкаНДС КАК СтавкаНДС,
	         |		СуммаНДС КАК СуммаНДС,
	         |		СуммаСНДС КАК СуммаСНДС,
	         |		КодСтроки КАК КодСтроки,
	         |		СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	         |		СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	         |		ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	         |		ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	         |		КлючСвязи КАК КлючСвязи,
	         |		Склад КАК Склад,
	         |		СтатусУказанияСерий КАК СтатусУказанияСерий,
	         |		СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	         |		ЗаказКлиента КАК ЗаказКлиента,
	         |		СрокПоставки КАК СрокПоставки,
	         |		ИдентификаторСтроки КАК ИдентификаторСтроки,
	         |		Серия КАК Серия,
	         |		АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	         |		НоменклатураНабора КАК НоменклатураНабора,
	         |		ХарактеристикаНабора КАК ХарактеристикаНабора,
	         |		АналитикаУчетаНаборов КАК АналитикаУчетаНаборов,
	         |		КодТНВЭД КАК КодТНВЭД,
	         |		Исполнитель КАК Исполнитель,
	         |		ЗарплатаРаботника КАК ЗарплатаРаботника,
	         |		РаботаВыполнена КАК РаботаВыполнена
	         |	) КАК Товары,
	         |	РеализацияТоваровУслуг.СкидкиНаценки.(
	         |		Ссылка КАК Ссылка,
	         |		НомерСтроки КАК НомерСтроки,
	         |		КлючСвязи КАК КлючСвязи,
	         |		СкидкаНаценка КАК СкидкаНаценка,
	         |		Сумма КАК Сумма,
	         |		НапомнитьПозже КАК НапомнитьПозже
	         |	) КАК СкидкиНаценки,
	         |	РеализацияТоваровУслуг.ВидыЗапасов.(
	         |		Ссылка КАК Ссылка,
	         |		НомерСтроки КАК НомерСтроки,
	         |		АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	         |		ВидЗапасов КАК ВидЗапасов,
	         |		НомерГТД КАК НомерГТД,
	         |		Упаковка КАК Упаковка,
	         |		КоличествоУпаковок КАК КоличествоУпаковок,
	         |		Количество КАК Количество,
	         |		КоличествоПоРНПТ КАК КоличествоПоРНПТ,
	         |		СуммаСНДС КАК СуммаСНДС,
	         |		СтавкаНДС КАК СтавкаНДС,
	         |		СуммаНДС КАК СуммаНДС,
	         |		ИдентификаторСтроки КАК ИдентификаторСтроки,
	         |		СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	         |		ЗаказКлиента КАК ЗаказКлиента,
	         |		СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	         |		СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	         |		АналитикаУчетаНаборов КАК АналитикаУчетаНаборов,
	         |		Цена КАК Цена,
	         |		ВидЗапасовПолучателя КАК ВидЗапасовПолучателя,
	         |		КодТНВЭД КАК КодТНВЭД
	         |	) КАК ВидыЗапасов,
	         |	РеализацияТоваровУслуг.ДополнительныеРеквизиты.(
	         |		Ссылка КАК Ссылка,
	         |		НомерСтроки КАК НомерСтроки,
	         |		Свойство КАК Свойство,
	         |		Значение КАК Значение,
	         |		ТекстоваяСтрока КАК ТекстоваяСтрока
	         |	) КАК ДополнительныеРеквизиты,
	         |	РеализацияТоваровУслуг.РасшифровкаПлатежа.(
	         |		Ссылка КАК Ссылка,
	         |		НомерСтроки КАК НомерСтроки,
	         |		Заказ КАК Заказ,
	         |		Сумма КАК Сумма,
	         |		ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	         |		СуммаВзаиморасчетов КАК СуммаВзаиморасчетов
	         |	) КАК РасшифровкаПлатежа,
	         |	РеализацияТоваровУслуг.Серии.(
	         |		Ссылка КАК Ссылка,
	         |		НомерСтроки КАК НомерСтроки,
	         |		Серия КАК Серия,
	         |		Количество КАК Количество,
	         |		Номенклатура КАК Номенклатура,
	         |		Характеристика КАК Характеристика,
	         |		Назначение КАК Назначение,
	         |		Склад КАК Склад
	         |	) КАК Серии,
	         |	РеализацияТоваровУслуг.ЭтапыГрафикаОплаты.(
	         |		Ссылка КАК Ссылка,
	         |		НомерСтроки КАК НомерСтроки,
	         |		Заказ КАК Заказ,
	         |		СверхЗаказа КАК СверхЗаказа,
	         |		ВариантОплаты КАК ВариантОплаты,
	         |		ДатаПлатежа КАК ДатаПлатежа,
	         |		Сдвиг КАК Сдвиг,
	         |		СуммаПлатежа КАК СуммаПлатежа,
	         |		ПроцентПлатежа КАК ПроцентПлатежа,
	         |		СуммаЗалогаЗаТару КАК СуммаЗалогаЗаТару,
	         |		ПроцентЗалогаЗаТару КАК ПроцентЗалогаЗаТару,
	         |		СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	         |		СуммаВзаиморасчетовПоТаре КАК СуммаВзаиморасчетовПоТаре
	         |	) КАК ЭтапыГрафикаОплаты,
	         |	РеализацияТоваровУслуг.ШтрихкодыУпаковок.(
	         |		Ссылка КАК Ссылка,
	         |		НомерСтроки КАК НомерСтроки,
	         |		ШтрихкодУпаковки КАК ШтрихкодУпаковки
	         |	) КАК ШтрихкодыУпаковок,
	         |	РеализацияТоваровУслуг.Представление КАК Представление,
	         |	РеализацияТоваровУслуг.МоментВремени КАК МоментВремени,
	         |	РеализацияТоваровУслуг.СуммаСПЦЧерновик КАК СуммаСПЦЧерновик
	         |ИЗ
	         |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	         |ГДЕ
	         |	РеализацияТоваровУслуг.ИмяКомпьютера = &ИмяКомпьютера
	         |	И РеализацияТоваровУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	         |	И РеализацияТоваровУслуг.Проведен = ИСТИНА
	         |	И НЕ РеализацияТоваровУслуг.Комментарий ПОДОБНО ""Материалы""";
	
	
	лЗапрос = Новый Запрос(лТекст);
	лЗапрос.УстановитьПараметр("ИмяКомпьютера", ТекущееРабочееМесто.Наименование); 
	лЗапрос.УстановитьПараметр("НачалоПериода", НачалоСмены);
	лЗапрос.УстановитьПараметр("КонецПериода", КонецСмены);

	Реализации = лЗапрос.Выполнить().Выгрузить();  
	
	
	//+++Безроднов 29.01.2025 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ШМ_НоменклатураПрофессии.Номенклатура КАК Номенклатура,
	               |	ШМ_НоменклатураПрофессии.Профессия КАК Профессия,
	               |	ШМ_НоменклатураПрофессии.ВидОплаты КАК ВидОплаты,
	               |	ШМ_НоменклатураПрофессии.РазмерОплаты КАК РазмерОплаты,
	               |	ШМ_НоменклатураПрофессии.МатериальныйВычет КАК МатериальныйВычет,
	               |	ШМ_НоменклатураПрофессии.Материал КАК Материал,
	               |	ШМ_НоменклатураПрофессии.ИспГрузики КАК ИспГрузики,
	               |	ШМ_НоменклатураПрофессии.Дископравка КАК Дископравка
	               |ИЗ
	               |	РегистрСведений.ШМ_НоменклатураПрофессии КАК ШМ_НоменклатураПрофессии
	               |ГДЕ
	               |	ШМ_НоменклатураПрофессии.Профессия = &Профессия"; 
	
	Профессия = Справочники.ШМ_Должности.НайтиПоНаименованию("Правщик дисков");
	Запрос.УстановитьПараметр("Профессия", Профессия);
	НоменклатураПрофессии = Запрос.Выполнить().Выгрузить();
	//--Безроднов 
	
	Для Каждого ВыбРеалЧерновик из Реализации Цикл
		ОбластьСтрока.Параметры.НомерБирки=ВыбРеалЧерновик.Бирка;
		ОбластьСтрока.Параметры.Время=Формат(ВыбРеалЧерновик.Дата,"ДЛФ=В");;
		ОбластьСтрока.Параметры.ПроцентСкидкиЧерновик=ВыбРеалЧерновик.ПроцентСкидкиЧерновик;
		ОбластьСтрока.Параметры.ГосНомер=ВыбРеалЧерновик.Комментарий;
		ОбластьСтрокаЖирн.Параметры.НомерБирки=ВыбРеалЧерновик.Бирка;
		ОбластьСтрокаЖирн.Параметры.Время=Формат(ВыбРеалЧерновик.Дата,"ДЛФ=В");;
		ОбластьСтрокаЖирн.Параметры.ПроцентСкидкиЧерновик=ВыбРеалЧерновик.ПроцентСкидкиЧерновик;
		ОбластьСтрокаЖирн.Параметры.ГосНомер=ВыбРеалЧерновик.Комментарий;
		СуммаДок=0;
		
		
	//+++Безроднов 29.01.2025 
		ТЗНоменклатуры = Новый ТаблицаЗначений;
		ТЗНоменклатуры.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));  
		ТЗНоменклатуры.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		//--   
		
		Для Каждого СтрокаТоварн Из ВыбРеалЧерновик.Товары Цикл
			СуммаДок=СуммаДок+СтрокаТоварн.Сумма;
			
			//+++Безроднов 29.01.2025 
            НовыйСтр = ТЗНоменклатуры.Добавить();
			НовыйСтр.Номенклатура = СтрокаТоварн.Номенклатура;
			НовыйСтр.Количество = СтрокаТоварн.Количество;
			//--Безроднов 29.01.2025 

		КонецЦикла;
		ИтогСумма=ИтогСумма+СуммаДок; 
		
		
	//+++Безроднов 29.01.2025   добавление нового столбца Материалы дископрав, заполненяется материалом дископравка если профессия дископравщик 
	    МатериалыДископравка = 0;
		Для каждого стр из ТЗНоменклатуры Цикл 
			СтруктураПоиска = Новый Структура("Номенклатура", стр.Номенклатура);
			НайденныеСтроки = НоменклатураПрофессии.НайтиСтроки(СтруктураПоиска);  
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				МатериалыДископравка = МатериалыДископравка + (НайденныеСтроки[0].МатериальныйВычет * стр.Количество);
			
			КонецЕсли;
		КонецЦикла;   
		 
		ОбластьСтрока.Параметры.МатДиск = МатериалыДископравка;
		ОбластьСтрокаЖирн.Параметры.МатДиск = МатериалыДископравка;
		ИтогМатДиск = ИтогМатДиск + МатериалыДископравка; 		
	//--Безроднов 29.01.2025   СуммаДископравкаЧерновик
	//++Безроднов СПЦ 
	    ОбластьСтрока.Параметры.СПЦ = ВыбРеалЧерновик.СуммаСПЦЧерновик;
		ОбластьСтрокаЖирн.Параметры.СПЦ = ВыбРеалЧерновик.СуммаСПЦЧерновик;
		ИтогСПЦ = ИтогСПЦ + ВыбРеалЧерновик.СуммаСПЦЧерновик;
	//--Безроднов СПЦ
		ОбластьСтрока.Параметры.Сумма=СуммаДок;
		ОбластьСтрокаЖирн.Параметры.Сумма=СуммаДок;
		
		ОбластьСтрока.Параметры.Шиномонт=ВыбРеалЧерновик.СуммаШиномонтажЧерновик;
		ОбластьСтрокаЖирн.Параметры.Шиномонт=ВыбРеалЧерновик.СуммаШиномонтажЧерновик;
		ИтогШиномонт=ИтогШиномонт+ВыбРеалЧерновик.СуммаШиномонтажЧерновик; 
		
		ОбластьСтрока.Параметры.Съем=ВыбРеалЧерновик.СуммаСъемЧерновик;
		ОбластьСтрокаЖирн.Параметры.Съем=ВыбРеалЧерновик.СуммаСъемЧерновик;
		ИтогСъем=ИтогСъем+ВыбРеалЧерновик.СуммаСъемЧерновик;   
		
		ОбластьСтрока.Параметры.Правка=ВыбРеалЧерновик.СуммаДископравкаЧерновик;
		ОбластьСтрокаЖирн.Параметры.Съем=ВыбРеалЧерновик.СуммаСъемЧерновик;
		ИтогПравка=ИтогПравка+ВыбРеалЧерновик.СуммаДископравкаЧерновик;
		
		ОбластьСтрока.Параметры.Прот=ВыбРеалЧерновик.СуммаПроточкаЧерновик;
		ОбластьСтрокаЖирн.Параметры.Прот=ВыбРеалЧерновик.СуммаПроточкаЧерновик;
		ИтогПрот=ИтогПрот+ВыбРеалЧерновик.СуммаПроточкаЧерновик;
		
		ОбластьСтрока.Параметры.НаимМат="";
		ОбластьСтрока.Параметры.КолБал=ВыбРеалЧерновик.КолГрузБезСкидок+ВыбРеалЧерновик.КолГрузСкидка20+ВыбРеалЧерновик.КолГрузСкидка50;
		ОбластьСтрокаЖирн.Параметры.НаимМат="";   
		
		ОбластьСтрокаЖирн.Параметры.КолБал=ВыбРеалЧерновик.КолГрузБезСкидок+ВыбРеалЧерновик.КолГрузСкидка20+ВыбРеалЧерновик.КолГрузСкидка50;
		ИтогКолБал=ИтогКолБал+ВыбРеалЧерновик.КолГрузБезСкидок+ВыбРеалЧерновик.КолГрузСкидка20+ВыбРеалЧерновик.КолГрузСкидка50;
			
		ОбластьСтрока.Параметры.СумЗаГруза=ВыбРеалЧерновик.СуммаГрузБезСкидок+ВыбРеалЧерновик.СуммаГрузСкидка20+ВыбРеалЧерновик.СуммаГрузСкидка50;
		ОбластьСтрокаЖирн.Параметры.СумЗаГруза=ВыбРеалЧерновик.СуммаГрузБезСкидок+ВыбРеалЧерновик.СуммаГрузСкидка20+ВыбРеалЧерновик.СуммаГрузСкидка50;
		ИтогСумЗаГруза=ИтогСумЗаГруза+ВыбРеалЧерновик.СуммаГрузБезСкидок+ВыбРеалЧерновик.СуммаГрузСкидка20+ВыбРеалЧерновик.СуммаГрузСкидка50;
		
		//ОбластьСтрока.Параметры.СумМат=ВыбРеалЧерновик.СуммаМатВычет;      //-ВыбРеалЧерновик.СуммаМатВычетПроточка;    1softpro pok 25.02.2025 +++ коммент вычета материалов проточки из общей суммы материалов, тк в таком случае некорректные данные черновика
		//ОбластьСтрокаЖирн.Параметры.СумМат=ВыбРеалЧерновик.СуммаМатВычет;  //-ВыбРеалЧерновик.СуммаМатВычетПроточка;
		
		ОбластьСтрока.Параметры.ТипДиска=ВыбРеалЧерновик.ТипДиска;
		ОбластьСтрокаЖирн.Параметры.ТипДиска=ВыбРеалЧерновик.ТипДиска;
		Если ВыбРеалЧерновик.VISA=Истина Тогда
			ОбластьСтрока.Параметры.VISA="V";
			ОбластьСтрокаЖирн.Параметры.VISA="V";
		Иначе
			ОбластьСтрока.Параметры.VISA="";
			ОбластьСтрокаЖирн.Параметры.VISA="";
		КонецЕсли;
		
		//+++Безроднов 27.02 сумма материалов за шинку и съем минус дископравка и проточка в последнюю колонку  
		СумМат            				   = ВыбРеалЧерновик.СуммаМатВычет - ВыбРеалЧерновик.СуммаМатВычетПроточка - МатериалыДископравка; 
		ОбластьСтрока.Параметры.СумМат	   = СумМат;  //1softpro pok 25.02.2025 +++ коммент вычета материалов проточки из общей суммы материалов, тк в таком случае некорректные данные черновика
		ОбластьСтрокаЖирн.Параметры.СумМат = СумМат;
		ИтогМат							   = ИтогМат + СумМат;// ВыбРеалЧерновик.СуммаМатВычет;
		//--Безроднов

		ЕстьСторудникНеНаСмене=Ложь;
		Запрос = Новый Запрос;
    	Запрос.Текст = 
        "ВЫБРАТЬ
        |   ШМ_ИсполнителиРабот.Реализация,
        |   ШМ_ИсполнителиРабот.Номенклатура,
        |   ШМ_ИсполнителиРабот.Исполнитель
        |ИЗ
        |   РегистрСведений.ШМ_ИсполнителиРабот КАК ШМ_ИсполнителиРабот
        |ГДЕ
        |   ШМ_ИсполнителиРабот.Реализация = &ВыбРеализация";
        Запрос.УстановитьПараметр("ВыбРеализация",ВыбРеалЧерновик.Ссылка);
        РезультатЗапроса = Запрос.Выполнить();
        Записи = РезультатЗапроса.Выбрать(); 
    	Пока Записи.Следующий() Цикл
			Если СотрудникНаСмене(Записи.Исполнитель,ДатаСмены)=Ложь Тогда
				ЕстьСторудникНеНаСмене=Истина;
			КонецЕсли; 
		КонецЦикла;
		Если (ВыбРеалЧерновик.СуммаДископравкаЧерновик+ВыбРеалЧерновик.СуммаПроточкаЧерновик)>0 Тогда
			ЕстьСторудникНеНаСмене=Ложь;
		КонецЕсли;
		Если ЕстьСторудникНеНаСмене=Истина Тогда
			ТабДок.Вывести(ОбластьСтрокаЖирн);
		Иначе
			ТабДок.Вывести(ОбластьСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ОбластьСтрокаИтог.Параметры.ИтогСумма = ИтогСумма;
	ОбластьСтрокаИтог.Параметры.ИтогШиномонт = ИтогШиномонт;
	ОбластьСтрокаИтог.Параметры.ИтогСъем = ИтогСъем;
	ОбластьСтрокаИтог.Параметры.ИтогКолБал = ИтогКолБал;
	ОбластьСтрокаИтог.Параметры.ИтогСумЗаГруза = ИтогСумЗаГруза;
	ОбластьСтрокаИтог.Параметры.ИтогМат = ИтогМат;
	ОбластьСтрокаИтог.Параметры.ИтогПравка = ИтогПравка;
	ОбластьСтрокаИтог.Параметры.ИтогПрот = ИтогПрот;
	//++
	ОбластьСтрокаИтог.Параметры.ИтогМатДиск = ИтогМатДиск;
	ОбластьСтрокаИтог.Параметры.ИтогСПЦ = ИтогСПЦ;
    //--
	ТабДок.Вывести(ОбластьСтрокаИтог);
	
	ТабДок.ТолькоПросмотр = Истина;
	Возврат ТабДок;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьЧерновикНаДату(Команда)
	
	Перем ДатаСмены;
	
	Если ВвестиДату(ДатаСмены,"Ввод даты смены",ЧастиДаты.ДатаВремя) Тогда
	
		ТабДок = ПоказатьЧерновикНаДатуНаСервере(ДатаСмены);  
		Если ТипЗнч(ТабДок) = Тип("Булево") Тогда
			Возврат
		КонецЕсли;
		ТабДок.Показать();
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура СписокЧековНаДату(Команда)
	
	Перем ДатаСмены;
	
	//СписокЧековНаДатуНаСервере();
	
	Если ВвестиДату(ДатаСмены,"Ввод даты смены",ЧастиДаты.ДатаВремя) Тогда
				
		ФормаСпискаРеализаций=Получитьформу("Документ.РеализацияТоваровУслуг.ФормаСписка");
	
		НастройкаПериода = ФормаСпискаРеализаций.Элементы.СписокРеализацииТоваровУслуг.Период;
		
    	НачалоСмены=НачалоСменыНаДату(ДатаСмены);
		КонецСмены=КонецСменыНаДату(ДатаСмены);
		НастройкаПериода.ДатаНачала=НачалоСмены;
		НастройкаПериода.ДатаОкончания=КонецСмены;
	
		ФормаСпискаРеализаций.Открыть();
		ФормаСпискаРеализаций.Элементы.СписокРеализацииТоваровУслуг.Обновить();
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗапросДетализация()
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Тов_Чек";
	Макет = ПолучитьМакетДетализации();
	ПоказыватьНДС = Константы.ВыводитьДопКолонкиНДС.Получить();
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	//ОбластьМакета.Параметры.НомерДок = ДокРеал.Номер;
	ОбластьМакета.Параметры.ДатаДок = ТекущаяДата();	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	//ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	//ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДокРеал.Организация, ДокРеал.Дата), "ПолноеНаименование,ИНН,ЮридическийАдрес,Телефоны");
	//ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
	//ТабличныйДокумент.Вывести(ОбластьМакета);
	
	//ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	//ОбластьМакета.Параметры.ПредставлениеПолучателя = НомерМашины;
	//ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ЕстьНДС = Ложь;
	//Для Каждого СтрокаТовары Из Таб Цикл
	//	Если СтрокаТовары.СуммаНДС <> 0 Тогда
	//		ЕстьНДС = Истина;
	//	КонецЕсли;
	//КонецЦикла;
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	ВыводитьПомещения = Ложь;
	
	//		ПервоеПомещение = Неопределено;
	//		Для Каждого СтрокаТовара Из ТаблицаТовары Цикл
	//			Если ЗначениеЗаполнено(СтрокаТовара.Помещение) Тогда
	//				ВыводитьПомещения = Истина;
	//			КонецЕсли;
	//		КонецЦикла;
	
	ОбластьНомера    = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов     = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьПомещение = Макет.ПолучитьОбласть("ШапкаТаблицы|Помещение");
	ОбластьДанных    = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок    = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммыНДС  = Макет.ПолучитьОбласть("ШапкаТаблицы|СуммаНДС");
	ОбластьСуммы     = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
	
	ТабличныйДокумент.Вывести(ОбластьНомера);
	Если ВыводитьПомещения Тогда
		ТабличныйДокумент.Присоединить(ОбластьПомещение);
	КонецЕсли;
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабличныйДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабличныйДокумент.Присоединить(ОбластьДанных);
	Если ЕстьНДС И ПоказыватьНДС Тогда
		ТабличныйДокумент.Присоединить(ОбластьСуммыНДС);
	КонецЕсли;
	ТабличныйДокумент.Присоединить(ОбластьСкидок);
	ТабличныйДокумент.Присоединить(ОбластьСуммы);
	
	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
		+ Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	Если ВыводитьПомещения Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
		+ Макет.Область("Помещение").ШиринаКолонки;
	КонецЕсли;
	ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
	+ Макет.Область("СуммаБезСкидки").ШиринаКолонки
	+ Макет.Область("СуммаСкидки").ШиринаКолонки;
	
	ОбластьНомераСтандарт    = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодовСтандарт     = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьПомещениеСтандарт = Макет.ПолучитьОбласть("Строка|Помещение");
	ОбластьДанныхСтандарт    = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидокСтандарт    = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммыНДССтандарт  = Макет.ПолучитьОбласть("Строка|СуммаНДС");
	ОбластьСуммыСтандарт     = Макет.ПолучитьОбласть("Строка|Сумма");
	
	ИспользоватьНаборы = Ложь;
	
	Сумма          = 0;
	СуммаНДС       = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	НомерСтроки    = 0;
	//		ПустыеДанные   = НаборыСервер.ПустыеДанные();
	//		
	Для Каждого СтрокаТовары Из Таб Цикл
		ОбластьНомера    = ОбластьНомераСтандарт;
		ОбластьКодов     = ОбластьКодовСтандарт;
		ОбластьПомещение = ОбластьПомещениеСтандарт;
		ОбластьДанных    = ОбластьДанныхСтандарт;
		ОбластьСкидок    = ОбластьСкидокСтандарт;
		ОбластьСуммыНДС  = ОбластьСуммыНДССтандарт;
		ОбластьСуммы     = ОбластьСуммыСтандарт;
		
		НомерСтроки = НомерСтроки + 1;
		ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьПомещения Тогда
			ОбластьПомещение.Параметры.Заполнить(СтрокаТовары);
			ТабличныйДокумент.Присоединить(ОбластьПомещение);
		КонецЕсли;
		
		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = СтрокаТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = СтрокаТовары.Код;
			КонецЕсли;
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ОбластьДанных.Параметры.Заполнить(СтрокаТовары);
		
		УстановитьПараметр(ОбластьДанных, "Товар", НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
		СтрокаТовары.Номенклатура.НаименованиеПолное,
		СтрокаТовары.Характеристика.НаименованиеПолное));
		
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		ОбластьСкидок.Параметры.СуммаБезСкидки=СтрокаТовары.Количество*СтрокаТовары.Цена;
		ОбластьСкидок.Параметры.Скидка=СтрокаТовары.СуммаСкидки;
		
		ТабличныйДокумент.Присоединить(ОбластьСкидок);
		
		Если ЕстьНДС И ПоказыватьНДС Тогда
			ОбластьСуммыНДС.Параметры.Заполнить(СтрокаТовары);
			ТабличныйДокумент.Присоединить(ОбластьСуммыНДС);
		КонецЕсли;
		
		//Если Не ДокРеал.ЦенаВключаетНДС Тогда
		//	СуммаСНДС = СтрокаТовары.Сумма + СтрокаТовары.СуммаНДС;
		//Иначе
			СуммаСНДС = СтрокаТовары.Сумма;
		//КонецЕсли;
		
		УстановитьПараметр(ОбластьСуммы, "Сумма", СуммаСНДС);
		
		ТабличныйДокумент.Присоединить(ОбластьСуммы);
		Сумма    = Сумма    + СтрокаТовары.Сумма;
		СуммаНДС = СуммаНДС + СтрокаТовары.Сумма;
	КонецЦикла;
	
	// Вывести Итого.
	ОбластьНомера    = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов     = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьПомещение = Макет.ПолучитьОбласть("Итого|Помещение");
	ОбластьДанных    = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок    = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы     = Макет.ПолучитьОбласть("Итого|Сумма");
	ОбластьСуммыНДС  = Макет.ПолучитьОбласть("Итого|СуммаНДС");
	
	ТабличныйДокумент.Вывести(ОбластьНомера);
	Если ВыводитьПомещения Тогда
		ТабличныйДокумент.Присоединить(ОбластьПомещение);
	КонецЕсли;
	Если ВыводитьКоды Тогда
		ТабличныйДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабличныйДокумент.Присоединить(ОбластьДанных);
	Если ЕстьНДС И ПоказыватьНДС Тогда
		ОбластьСуммыНДС.Параметры.СуммаНДС = СуммаНДС;
		ТабличныйДокумент.Присоединить(ОбластьСуммыНДС);
	КонецЕсли;
	
	//Если Не ДокРеал.ЦенаВключаетНДС Тогда
	//	СуммаДокумента = Сумма + СуммаНДС;
	//Иначе
		СуммаДокумента = Сумма;
	//КонецЕсли;
	
	ОбластьСуммы.Параметры.Сумма = СуммаДокумента;
	ТабличныйДокумент.Присоединить(ОбластьСуммы);
	
	// Вывести Сумму прописью.
	//ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	//
	//ИтоговаяСтрока = НСтр("ru = 'Всего наименований %1, на сумму %2'");
	//ОбластьМакета.Параметры.ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//ИтоговаяСтрока,
	//НомерСтроки,
	//ФормированиеПечатныхФорм.ФорматСумм(СуммаДокумента));
	//
	//ОбластьМакета.Параметры.СуммаПрописью  = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаДокумента, ДокРеал.Валюта);
	//ТабличныйДокумент.Вывести(ОбластьМакета);
	//
	//// Вывести подписи.
	//ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	//ОбластьМакета.Параметры.ОтветственныйПредставление = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДокРеал.Менеджер, ДокРеал.Дата);
	//
	//ТабличныйДокумент.Вывести(ОбластьМакета);
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	Возврат ТабличныйДокумент;
КонецФункции

&НаСервере
Процедура ДетализацияНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

Функция ПолучитьПустуюССылкуШМ_Авто_Юрлиц()
	Возврат Справочники.ШМ_Авто_Юрлиц.ПустаяСсылка();
КонецФункции

&НаКлиенте
Процедура Детализация(Команда)
	//ДетализацияНаСервере();
	ТабДок = ПолучитьЗапросДетализация();
	ТабДок.Показать();
КонецПроцедуры

&НаКлиенте
Процедура ОформитьЮЛ(Команда)
	
	//СейчасСкидка=Ложь;
	//СейчасКупон=Ложь;
	//СкидкаИнетМаг=Ложь;
	//СейчасСкидкаРазовая=Ложь;
	//СкидкаНаСервере();
	//КупонНаСервере();
	//ОтменаСкидокНаСервере();
	ТаблицаПриОкончанииРедактированияНаСервере();
	
	Если (СейчасСкидка=Истина) ИЛИ (СейчасСкидкаРазовая=Истина) Тогда
		Если Вопрос("У клиента есть карточка?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да Тогда
			Если Не ЗначениеЗаполнено(Телефон) Тогда
				Если Вопрос("Необходимо указать номер телефона для указания скидочной карты! Продолжить без указания телефона (данные о карте не будут записаны)?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Нет Тогда
					Сообщить("Укажите номер телефона!");
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтойкаНайдена=Ложь;
	Для Каждого СтрокаТаб Из Таб Цикл
		Если СтрДлина(СокрЛП(СтрокаТаб.ИдентификаторСтойки))>0 Тогда
			СтойкаНайдена=Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если СтойкаНайдена=Истина Тогда
		Если Не ЗначениеЗаполнено(Телефон) Тогда
			Сообщить("Укажите номер телефона!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерМашины) Тогда
		//Если ЗапрашиватьТипОплаты() Тогда
		//	
		//	Если ВвестиЗначение(ФормаОплаты, "Введите Тип Оплаты", ТипЗнч(ФормаОплаты)) Тогда
		//	Иначе
		//		Возврат;
		//	КонецЕсли;
		//	
		//	//Если Вопрос("Текущий тип оплаты:"+ТекущийТипОплаты()+"?",РежимДиалогаВопрос.ДаНет,,,"Запрос типа оплаты",)=КодВозвратаДиалога.Нет Тогда
		//	//	Возврат;
		//	//КонецЕсли;
		//	
		//КонецЕсли;
		//Если РассчитыватьСдачу() И Наличные() Тогда
		//	СуммаНаличных=0;
		//	ВвестиЧисло(СуммаНаличных,"Сумма наличных",15,0);
		//	СуммаДокПриОформлении=СуммаДокПриОформлении();
		//	Сдача=0;
		//	Сдача=СуммаНаличных-СуммаДокПриОформлении;
		//	Если Сдача>=0 Тогда
		//		Предупреждение(Сдача,20,"Сдача:");
		//	Иначе
		//		Предупреждение("Сумма к оплате превышает сумму наличных!");
		//		Возврат;
		//	КонецЕсли;
		//КонецЕсли; 
		
		//1softpro pok 01042025 +++ добавил описание ошибки не заведенной номенклатуры в РС номенклатура профессии в комментарий реализации
		Комментарий = ТекстОшибкиРС;   
				//СоздатьРеализацию(СокрЛП(НомерМашины), Ложь);
		СоздатьРеализацию(СокрЛП(НомерМашины), Комментарий, Истина);
		//---
		ПроведениеРеализаций();
		ФормаВыбора = ПолучитьФорму("Справочник.ШМ_Авто_Юрлиц.ФормаВыбора"); 
		ФормаВыбора.Заголовок	= "Выберите автомобиль юрлица!";
		ВыбраноАвтоЮЛ = ФормаВыбора.ОткрытьМодально();
		Если ВыводитьТовЧек() Тогда
			Если ВыводитьТовЧекНаПринтер()=Ложь Тогда
				ТоварныйЧек();
			Иначе
				ТоварныйЧекНаПринтер();
			конецЕсли;
		КонецЕсли;
		Если ((СейчасСкидка=Истина) ИЛИ (СейчасСкидкаРазовая=Истина)) И (ЗначениеЗаполнено(Телефон)) Тогда
			ЗаписатьКартуСкидки(Телефон);
		КонецЕсли;
		//ФормаЧек = ПолучитьФорму("Документ.ЧекККМ.Форма.ФормаДокументаРМК");
		//ДанныеФормы = ФормаЧек.Объект;
		//ЗаполнитьЧекНаСервере(ДанныеФормы);
		//КопироватьДанныеФормы(ДанныеФормы, ФормаЧек.Объект);
		//ФормаЧек.Открыть();
		ИдентификаторОтложенногоЧека="";
		Таб.Очистить();
		НомерМашины = "";
		Телефон = "";
		Бирка = "";
		ВыбраноАвтоЮЛ = ПолучитьПустуюССылкуШМ_Авто_Юрлиц();
		ФормаОплаты=ТипОплатыНаличные();
		ДомойНаСервере();
		ОтменаСкидок(Команда);
	Иначе
		Сообщить("Не заполнен номер машины!!!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетЗаСменуНаДату(Команда)
	
	Перем ДатаСмены;
	
	Если ВвестиДату(ДатаСмены,"Ввод даты смены",ЧастиДаты.ДатаВремя)=Ложь Тогда
		Возврат;
	КонецЕсли;  
	
	//++dev1 25.03 Открывается
	ПараметрыСтруктуры = Новый Структура("ДатаСмены", ДатаСмены);
	Оповещение 		   = Новый ОписаниеОповещения("ВыборЗавершение",ЭтаФорма, ПараметрыСтруктуры);
    ОткрытьФорму("Справочник.РабочиеМеста.ФормаВыбора", ,,,,,Оповещение);	
	//--dev1
	
	//ТабДок = ПолучитьЗапросНаДату(ДатаСмены);
	//Если ТабДок<>Неопределено Тогда
	//	ТабДок.Показать();
	//	ТабДокДиск=ПолучитьТабДокДископравкаНаДату(ПараметрыСтруктуры.ДатаСмены);
	//	ТабДокДиск.Показать();
	//КонецЕсли;
		//ТабДокДискоравка = ПолучитьТабДокДископравка();
	//ТабДокДискоравка.Показать();
	//ТабДокЧерновик = ПолучитьТабДокЧерновика();
	//ТабДокЧерновик.Показать();
	
КонецПроцедуры    

//++dev1
&НаКлиенте
Функция ВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТабДок     = ПолучитьЗапросНаДату(ДополнительныеПараметры.ДатаСмены, Результат);
	ТабДокДиск = ПолучитьТабДокДископравкаНаДату(ДополнительныеПараметры.ДатаСмены, Результат);
 	Если ТабДок<>Неопределено Тогда
		ТабДок.Показать();
 		ТабДокДиск.Показать();
	КонецЕсли;

КонецФункции


&НаСервере
Функция ПолучитьПроцентШиномонтажника(ДатаПроцента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_СменныйПроцентШиномонтажника.Период,
		|	ШМ_СменныйПроцентШиномонтажника.Процент
		|ИЗ
		|	РегистрСведений.ШМ_СменныйПроцентШиномонтажника КАК ШМ_СменныйПроцентШиномонтажника";
	
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Процент=0;
	
	Для Каждого СтрокаВыборка из Выборка Цикл	
		
		Если НачалоМесяца(СтрокаВыборка.Период)=НачалоМесяца(ДатаПроцента) Тогда
			Процент=СтрокаВыборка.Процент;
			Прервать;
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Процент;
	
КонецФункции

Функция ПолучитьПроцентСъемщика(ДатаПроцента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_СменныйПроцентСъемщика.Период,
		|	ШМ_СменныйПроцентСъемщика.Процент
		|ИЗ
		|	РегистрСведений.ШМ_СменныйПроцентСъемщика КАК ШМ_СменныйПроцентСъемщика";
	
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Процент=0;
	
	Для Каждого СтрокаВыборка из Выборка Цикл	
		
		Если НачалоМесяца(СтрокаВыборка.Период)=НачалоМесяца(ДатаПроцента) Тогда
			Процент=СтрокаВыборка.Процент;
			Прервать;
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Процент;
	
КонецФункции

Функция ПолучитьПроцентДископравщикаСталь(ДатаПроцента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_СменныйПроцентДископравщикаСталь.Период,
		|	ШМ_СменныйПроцентДископравщикаСталь.Процент
		|ИЗ
		|	РегистрСведений.ШМ_СменныйПроцентДископравщикаСталь КАК ШМ_СменныйПроцентДископравщикаСталь";
	
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Процент=0;
	
	Для Каждого СтрокаВыборка из Выборка Цикл	
		
		Если НачалоМесяца(СтрокаВыборка.Период)=НачалоМесяца(ДатаПроцента) Тогда
			Процент=СтрокаВыборка.Процент;
			Прервать;
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Процент;
	
КонецФункции

Функция ПолучитьПроцентДископравщикаАлюм(ДатаПроцента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_СменныйПроцентДископравщикаАлюм.Период,
		|	ШМ_СменныйПроцентДископравщикаАлюм.Процент
		|ИЗ
		|	РегистрСведений.ШМ_СменныйПроцентДископравщикаАлюм КАК ШМ_СменныйПроцентДископравщикаАлюм";
	
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Процент=0;
	
	Для Каждого СтрокаВыборка из Выборка Цикл	
		
		Если НачалоМесяца(СтрокаВыборка.Период)=НачалоМесяца(ДатаПроцента) Тогда
			Процент=СтрокаВыборка.Процент;
			Прервать;
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Процент;
	
КонецФункции

Функция ПолучитьОтчетЗаСтойкуЗаПериод(ДатаНачОтчетаСтойка,ДатаОкончОтчетаСтойка)
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Отчет_Стойка";
	Макет = ПолучитьМакетОтчетСтойка();
	
	КолНаСтойке=0;
	СуммаНаСтойке=0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_Стойка.Продано КАК Продано,
		|	ШМ_Стойка.Номенклатура КАК Номенклатура,
		|	ШМ_Стойка.НоменклатураТекст КАК НоменклатураТекст,
		|	ШМ_Стойка.ДатаПоступления КАК ДатаПоступления,
		|	ШМ_Стойка.Идентификатор КАК Идентификатор,
		|	ШМ_Стойка.ДатаПродажи КАК ДатаПродажи,
		|	ШМ_Стойка.Комплект КАК Комплект,
		|	ШМ_Стойка.Цена КАК Цена,
		|	ШМ_Стойка.ЦенаПродажи КАК ЦенаПродажи,
		|	ШМ_Стойка.Артикул КАК Артикул,
		|	ШМ_Стойка.Радиус КАК Радиус,
		|	ШМ_Стойка.Ширина КАК Ширина,
		|	ШМ_Стойка.Высота КАК Высота,
		|	ШМ_Стойка.Бренд КАК Бренд,
		|	ШМ_Стойка.Зимняя КАК Зимняя,
		|	ШМ_Стойка.Год КАК Год,
		|	ШМ_Стойка.ПродалСотрудник КАК ПродалСотрудник,
		|	ШМ_Стойка.Сотрудник1 КАК Сотрудник1,
		|	ШМ_Стойка.Сотрудник2 КАК Сотрудник2,
		|	ШМ_Стойка.Сотрудник3 КАК Сотрудник3
		|ИЗ
		|	РегистрСведений.ШМ_Стойка КАК ШМ_Стойка
		|ГДЕ
		|	ШМ_Стойка.Продано = ЛОЖЬ
		|	И ШМ_Стойка.ДатаПоступления <= &ДатаКон
		|	И ШМ_Стойка.ТочкаПродажи = &ТочкаПродажи";
	
	Запрос.УстановитьПараметр("ДатаКон", ДатаОкончОтчетаСтойка);  
	Запрос.УстановитьПараметр("ТочкаПродажи", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование);
	Выборка = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаВыборка Из Выборка Цикл
		КолНаСтойке=КолНаСтойке+1;
		СуммаНаСтойке=СуммаНаСтойке+СтрокаВыборка.Цена;
	КонецЦикла;
	
	ОбластьСуммаКолНаСтойке=Макет.ПолучитьОбласть("СуммаКолНаСтойке");
	ОбластьСуммаКолНаСтойке.Параметры.КолНаСтойке=КолНаСтойке;
	ОбластьСуммаКолНаСтойке.Параметры.СуммаНаСтойке=СуммаНаСтойке;
	ОбластьСуммаКолНаСтойке.Параметры.ДатаОкончОтчетаСтойка=ДатаОкончОтчетаСтойка;
	ТабДок.Вывести(ОбластьСуммаКолНаСтойке);
	
	ОбластьШапкаСтойки=Макет.ПолучитьОбласть("ШапкаСтойки");
	ОбластьСтрокаСтойки=Макет.ПолучитьОбласть("СтрокаСтойки");
	ОбластьШапкаСтойки.Параметры.ДатаНачОтчетаСтойка=ДатаНачОтчетаСтойка;
	ОбластьШапкаСтойки.Параметры.ДатаОкончОтчетаСтойка=ДатаОкончОтчетаСтойка;
	ТабДок.Вывести(ОбластьШапкаСтойки);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_Стойка.Продано КАК Продано,
		|	ШМ_Стойка.Номенклатура КАК Номенклатура,
		|	ШМ_Стойка.НоменклатураТекст КАК НоменклатураТекст,
		|	ШМ_Стойка.ДатаПоступления КАК ДатаПоступления,
		|	ШМ_Стойка.Идентификатор КАК Идентификатор,
		|	ШМ_Стойка.ДатаПродажи КАК ДатаПродажи,
		|	ШМ_Стойка.Комплект КАК Комплект,
		|	ШМ_Стойка.Цена КАК Цена,
		|	ШМ_Стойка.ЦенаПродажи КАК ЦенаПродажи,
		|	ШМ_Стойка.Артикул КАК Артикул,
		|	ШМ_Стойка.Радиус КАК Радиус,
		|	ШМ_Стойка.Ширина КАК Ширина,
		|	ШМ_Стойка.Высота КАК Высота,
		|	ШМ_Стойка.Бренд КАК Бренд,
		|	ШМ_Стойка.Зимняя КАК Зимняя,
		|	ШМ_Стойка.Год КАК Год,
		|	ШМ_Стойка.ПродалСотрудник КАК ПродалСотрудник,
		|	ШМ_Стойка.Сотрудник1 КАК Сотрудник1,
		|	ШМ_Стойка.Сотрудник2 КАК Сотрудник2,
		|	ШМ_Стойка.Сотрудник3 КАК Сотрудник3
		|ИЗ
		|	РегистрСведений.ШМ_Стойка КАК ШМ_Стойка
		|ГДЕ
		|	ШМ_Стойка.Продано = ИСТИНА
		|	И ШМ_Стойка.ДатаПродажи МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ШМ_Стойка.ТочкаПродажи = &ТочкаПродажи";
	
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНачОтчетаСтойка);
	Запрос.УстановитьПараметр("КонецПериода", ДатаОкончОтчетаСтойка);
	Запрос.УстановитьПараметр("ТочкаПродажи", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование);
	
	Выборка = Запрос.Выполнить().Выгрузить();
	
	ТабЗаработаноСотрудником = Новый ТаблицаЗначений;
	ТабЗаработаноСотрудником.Колонки.Добавить("Сотрудник");
	ТабЗаработаноСотрудником.Колонки.Добавить("Сумма");
	//ТабЗаработаноСотрудником.Колонки.Добавить("КоличествоКолес");
	
	СуммаПроданных=0;
	СуммаНазначенных=0;
	КолПроданных=0;
	
	Для Каждого СтрокаВыборка Из Выборка Цикл
		ОбластьСтрокаСтойки.Параметры.ДатаПост=СтрокаВыборка.ДатаПоступления;
		ОбластьСтрокаСтойки.Параметры.ДатаПрод=СтрокаВыборка.ДатаПродажи;
		ОбластьСтрокаСтойки.Параметры.ЦенаУст=СтрокаВыборка.Цена;
		СуммаНазначенных=СуммаНазначенных+СтрокаВыборка.Цена;		
		ОбластьСтрокаСтойки.Параметры.ЦенаПрод=СтрокаВыборка.ЦенаПродажи;
		СуммаПроданных=СуммаПроданных+СтрокаВыборка.ЦенаПродажи;
		КолПроданных=КолПроданных+1;
		ОбластьСтрокаСтойки.Параметры.Артикул=СтрокаВыборка.Артикул;
		//ОбластьСтрокаСтойки.Параметры.Ширина_Высота_Радиус=СокрЛП(СтрокаВыборка.Ширина)+"/"+СокрЛП(СтрокаВыборка.Высота)+"/"+СокрЛП(СтрокаВыборка.Радиус);
		ОбластьСтрокаСтойки.Параметры.Радиус=СтрокаВыборка.Радиус;
		ОбластьСтрокаСтойки.Параметры.Ширина=СтрокаВыборка.Ширина;
		ОбластьСтрокаСтойки.Параметры.Высота=СтрокаВыборка.Высота;
		ОбластьСтрокаСтойки.Параметры.Бренд=СтрокаВыборка.Бренд;
		Если СтрокаВыборка.Зимняя Тогда
			ОбластьСтрокаСтойки.Параметры.Зима="Зима";
		Иначе
			ОбластьСтрокаСтойки.Параметры.Зима="Лето";
		КонецЕсли;
		//ОбластьСтрокаСтойки.Параметры.Год=СтрокаВыборка.Год;
		ОбластьСтрокаСтойки.Параметры.Сотр1=СтрокаВыборка.Сотрудник1;
		ОбластьСтрокаСтойки.Параметры.Сотр2=СтрокаВыборка.Сотрудник2;
		ОбластьСтрокаСтойки.Параметры.Сотр3=СтрокаВыборка.Сотрудник3;
		ОбластьСтрокаСтойки.Параметры.Продал=СтрокаВыборка.ПродалСотрудник;
		ТабДок.Вывести(ОбластьСтрокаСтойки);
		КоэфДеленияСуммы=3;
		Если СтрокаВыборка.Сотрудник1.Пустая() Тогда
			КоэфДеленияСуммы=КоэфДеленияСуммы-1;
		КонецЕсли;
		Если СтрокаВыборка.Сотрудник2.Пустая() Тогда
			КоэфДеленияСуммы=КоэфДеленияСуммы-1;
		КонецЕсли;
		Если СтрокаВыборка.Сотрудник3.Пустая() Тогда
			КоэфДеленияСуммы=КоэфДеленияСуммы-1;
		КонецЕсли;
		Если СтрокаВыборка.Сотрудник1.Пустая()=Ложь Тогда
			СтрокаТабЗаработаноСотрудником=ТабЗаработаноСотрудником.Добавить();
			СтрокаТабЗаработаноСотрудником.Сотрудник=СтрокаВыборка.Сотрудник1;
			СтрокаТабЗаработаноСотрудником.Сумма=Окр((СтрокаВыборка.ЦенаПродажи/2)/КоэфДеленияСуммы,0);
			//СтрокаТабЗаработаноСотрудником.КоличествоКолес=1;
		КонецЕсли;
		Если СтрокаВыборка.Сотрудник2.Пустая()=Ложь Тогда
			СтрокаТабЗаработаноСотрудником=ТабЗаработаноСотрудником.Добавить();
			СтрокаТабЗаработаноСотрудником.Сотрудник=СтрокаВыборка.Сотрудник2;
			СтрокаТабЗаработаноСотрудником.Сумма=Окр((СтрокаВыборка.ЦенаПродажи/2)/КоэфДеленияСуммы,0);
			//СтрокаТабЗаработаноСотрудником.КоличествоКолес=1;
		КонецЕсли;
		Если СтрокаВыборка.Сотрудник3.Пустая()=Ложь Тогда
			СтрокаТабЗаработаноСотрудником=ТабЗаработаноСотрудником.Добавить();
			СтрокаТабЗаработаноСотрудником.Сотрудник=СтрокаВыборка.Сотрудник3;
			СтрокаТабЗаработаноСотрудником.Сумма=Окр((СтрокаВыборка.ЦенаПродажи/2)/КоэфДеленияСуммы,0);
			//СтрокаТабЗаработаноСотрудником.КоличествоКолес=1;
		КонецЕсли;
	КонецЦикла;
	
	ОбластьСтрокаИтога=Макет.ПолучитьОбласть("СтрокаИтога");
	ОбластьСтрокаИтога.Параметры.ИтогоКоличество=КолПроданных;
	ОбластьСтрокаИтога.Параметры.ИтогоЦенаУст=СуммаНазначенных;
	ОбластьСтрокаИтога.Параметры.ИтогоЦенаПрод=СуммаПроданных;
	ТабДок.Вывести(ОбластьСтрокаИтога);
	
	ОбластьСуммаКолПроданных=Макет.ПолучитьОбласть("СуммаКолПроданных");
	ОбластьСуммаКолПроданных.Параметры.КолПроданных=КолПроданных;
	ОбластьСуммаКолПроданных.Параметры.СуммаПроданных=СуммаПроданных;
	ТабДок.Вывести(ОбластьСуммаКолПроданных);
		
	ТабЗаработаноСотрудником.Свернуть("Сотрудник","Сумма");
	
	ОбластьШапкаЗаработаноСотрудниками=Макет.ПолучитьОбласть("ШапкаЗаработаноСотрудниками");
	ОбластьСтрокаЗаработаноСотрудниками=Макет.ПолучитьОбласть("СтрокаЗаработаноСотрудниками");
	ОбластьИтогЗаработаноСотрудниками=Макет.ПолучитьОбласть("ИтогЗаработаноСотрудниками");
	ТабДок.Вывести(ОбластьШапкаЗаработаноСотрудниками);
	ОбщийИтог=0;
	//КоличествоКолесИтог=0;
	Для Каждого СтрокаТабЗаработаноСотрудником Из ТабЗаработаноСотрудником Цикл
		ОбластьСтрокаЗаработаноСотрудниками.Параметры.Сотрудник=СтрокаТабЗаработаноСотрудником.Сотрудник;
		ОбластьСтрокаЗаработаноСотрудниками.Параметры.Сумма=СтрокаТабЗаработаноСотрудником.Сумма;
		//ОбластьСтрокаЗаработаноСотрудниками.Параметры.КоличествоКолес=СтрокаТабЗаработаноСотрудником.КоличествоКолес;
		ТабДок.Вывести(ОбластьСтрокаЗаработаноСотрудниками);
		ОбщийИтог=ОбщийИтог+СтрокаТабЗаработаноСотрудником.Сумма;
		//КоличествоКолесИтог=КоличествоКолесИтог+СтрокаТабЗаработаноСотрудником.КоличествоКолес;
	КонецЦикла;
	ОбластьИтогЗаработаноСотрудниками.Параметры.СуммаИтог=ОбщийИтог;
	//ОбластьИтогЗаработаноСотрудниками.Параметры.КоличествоКолесИтог=КоличествоКолесИтог;
	ТабДок.Вывести(ОбластьИтогЗаработаноСотрудниками);
	
	
	//ТабЗабраноСотрудником = Новый ТаблицаЗначений;
	//ТабЗабраноСотрудником.Колонки.Добавить("Сотрудник");
	//ТабЗабраноСотрудником.Колонки.Добавить("Сумма");
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ШМ_Затраты.Период,
	//	|	ШМ_Затраты.Затрата,
	//	|	ШМ_Затраты.Сотрудник,
	//	|	ШМ_Затраты.Профессия,
	//	|	ШМ_Затраты.Сумма
	//	|ИЗ
	//	|	РегистрСведений.ШМ_Затраты КАК ШМ_Затраты
	//	|ГДЕ
	//	|	(ШМ_Затраты.Период>=&ДатаНач) И (ШМ_Затраты.Период<=&ДатаКон)";
	//
	//Запрос.УстановитьПараметр("ДатаНач", ДатаНачОтчетаСтойка);
	//Запрос.УстановитьПараметр("ДатаКон", ДатаОкончОтчетаСтойка);
	//
	//Выборка = Запрос.Выполнить().Выгрузить();
	//Для Каждого СтрокаВыборка из Выборка Цикл
	//	Если СокрЛП(СтрокаВыборка.Затрата.Наименование)="За стойку" Тогда
	//		СтрокаЗабраноСотрудниками=ТабЗабраноСотрудником.Добавить();
	//		СтрокаЗабраноСотрудниками.Сотрудник=СтрокаВыборка.Сотрудник;
	//		СтрокаЗабраноСотрудниками.Сумма=СтрокаВыборка.Сумма;;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//ТабЗабраноСотрудником.Свернуть("Сотрудник","Сумма");
	//
	//ОбластьШапкаЗабраноСотрудниками=Макет.ПолучитьОбласть("ШапкаЗабраноСотрудниками");
	//ОбластьСтрокаЗабраноСотрудниками=Макет.ПолучитьОбласть("СтрокаЗабраноСотрудниками");
	//ОбластьИтогЗабраноСотрудниками=Макет.ПолучитьОбласть("ИтогЗабраноСотрудниками");
	//ТабДок.Вывести(ОбластьШапкаЗабраноСотрудниками);
	//ОбщийИтогЗабрано=0;
	//
	//Для Каждого СтрокаЗабраноСотрудниками Из ТабЗабраноСотрудником Цикл
	//	ОбластьСтрокаЗабраноСотрудниками.Параметры.Сотрудник=СтрокаЗабраноСотрудниками.Сотрудник;
	//	ОбластьСтрокаЗабраноСотрудниками.Параметры.Сумма=СтрокаЗабраноСотрудниками.Сумма;
	//	ТабДок.Вывести(ОбластьСтрокаЗабраноСотрудниками);
	//	ОбщийИтогЗабрано=ОбщийИтогЗабрано+СтрокаЗабраноСотрудниками.Сумма;
	//КонецЦикла;
	//ОбластьИтогЗабраноСотрудниками.Параметры.СуммаИтог=ОбщийИтогЗабрано;
	//ТабДок.Вывести(ОбластьИтогЗабраноСотрудниками);
	
	Возврат ТабДок;
	
КонецФункции

Функция ПолучитьОтчетЗаСтойкуПоДеньгамЗаСмену()
	
	ТаблицаНаСмене = Новый ТаблицаЗначений;
	ТаблицаНаСмене.Колонки.Добавить("Сотрудник");
	ТаблицаНаСмене.Колонки.Добавить("КоличествоКолес");
	ТаблицаНаСмене.Колонки.Добавить("СтоимостьКолес");
	ТаблицаНаСмене.Колонки.Добавить("ЗабралСумму");
	
	ТаблицаПродалосьНаСмене = Новый ТаблицаЗначений;
	ТаблицаПродалосьНаСмене.Колонки.Добавить("Сотрудник");
	ТаблицаПродалосьНаСмене.Колонки.Добавить("КоличествоКолес");
	ТаблицаПродалосьНаСмене.Колонки.Добавить("СтоимостьКолес");
	ТаблицаПродалосьНаСмене.Колонки.Добавить("ДолженЗабратьСумму");
	
	ТаблицаПродалосьРаньше = Новый ТаблицаЗначений;
	ТаблицаПродалосьРаньше.Колонки.Добавить("Сотрудник");
	ТаблицаПродалосьРаньше.Колонки.Добавить("КоличествоКолес");
	ТаблицаПродалосьРаньше.Колонки.Добавить("СтоимостьКолес");
	ТаблицаПродалосьРаньше.Колонки.Добавить("ДолженЗабратьСумму");
	
	НСмены = НачалоСмены();
	КСмены = ТекущаяДата();
	
	СписокСотрудниковНаСмене = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Период КАК Период,
		|	ШМ_БригадыСрезПоследних.Должность КАК Должность,
		|	ШМ_БригадыСрезПоследних.Помощник КАК Помощник,
		|	ШМ_БригадыСрезПоследних.ИмяКомпьютера КАК ИмяКомпьютера,
		|	ШМ_БригадыСрезПоследних.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ШМ_Бригады.СрезПоследних КАК ШМ_БригадыСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МАКСИМУМ(ШМ_БригадыСрезПоследних.Период) КАК Период
		|		ИЗ
		|			РегистрСведений.ШМ_Бригады.СрезПоследних(, ) КАК ШМ_БригадыСрезПоследних) КАК ВложенныйЗапрос
		|		ПО ШМ_БригадыСрезПоследних.Период = ВложенныйЗапрос.Период
		|ГДЕ
		|	ШМ_БригадыСрезПоследних.ИмяКомпьютера = &ИмяКомпьютера";
	Запрос.УстановитьПараметр("ИмяКомпьютера)", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента().Наименование);
	Выборка = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаВыборка из Выборка Цикл
		Если (СтрокаВыборка.Должность.Наименование="Шиномонтажник") И (СтрокаВыборка.Помощник=Ложь) Тогда
			СписокСотрудниковНаСмене.Добавить(СтрокаВыборка.Сотрудник);
			//Сотрудник1НаСмене = СтрокаВыборка.Сотрудник;
		ИначеЕсли (СтрокаВыборка.Должность.Наименование="Съемщик") И (СтрокаВыборка.Помощник=Ложь) Тогда
			СписокСотрудниковНаСмене.Добавить(СтрокаВыборка.Сотрудник);
			//Сотрудник2НаСмене = СтрокаВыборка.Сотрудник;
		ИначеЕсли (СтрокаВыборка.Должность.Наименование="Правщик дисков") И (СтрокаВыборка.Помощник=Ложь) Тогда
			СписокСотрудниковНаСмене.Добавить(СтрокаВыборка.Сотрудник);
			//Сотрудник3НаСмене=СтрокаВыборка.Сотрудник;
		Иначе
			СписокСотрудниковНаСмене.Добавить(СтрокаВыборка.Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШМ_Стойка.Продано,
		|	ШМ_Стойка.Номенклатура,
		|	ШМ_Стойка.НоменклатураТекст,
		|	ШМ_Стойка.ДатаПоступления,
		|	ШМ_Стойка.Идентификатор,
		|	ШМ_Стойка.ДатаПродажи,
		|	ШМ_Стойка.Комплект,
		|	ШМ_Стойка.Цена,
		|	ШМ_Стойка.ЦенаПродажи,
		|	ШМ_Стойка.Артикул,
		|	ШМ_Стойка.Радиус,
		|	ШМ_Стойка.Ширина,
		|	ШМ_Стойка.Высота,
		|	ШМ_Стойка.Бренд,
		|	ШМ_Стойка.Зимняя,
		|	ШМ_Стойка.Год,
		|	ШМ_Стойка.ПродалСотрудник,
		|	ШМ_Стойка.Сотрудник1,
		|	ШМ_Стойка.Сотрудник2,
		|	ШМ_Стойка.Сотрудник3,
		|	ШМ_Стойка.ДолженЗабратьДеньгиСотрудник1,
		|	ШМ_Стойка.ДолженЗабратьДеньгиСотрудник2,
		|	ШМ_Стойка.ДолженЗабратьДеньгиСотрудник3
		|ИЗ
		|	РегистрСведений.ШМ_Стойка КАК ШМ_Стойка
		|ГДЕ (ШМ_Стойка.Продано=Истина) И (ШМ_Стойка.ДатаПоступления<=&ДатаКон)";
	
	Запрос.УстановитьПараметр("ДатаКон", КСмены);
	
	//КолНаСтойке=0;
	//СуммаНаСтойке=0;
	
	Выборка = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаВыборка Из Выборка Цикл
		
		Если СтрокаВыборка.ДатаПродажи>=НСмены Тогда
			
		СотрудникНаСмене = Ложь;
		
		Для Каждого СтрокаСписокСотрудниковНаСмене Из СписокСотрудниковНаСмене Цикл
			
			Сотрудник1НаСмене=СтрокаСписокСотрудниковНаСмене.Значение;
			
			Если Сотрудник1НаСмене<>Неопределено Тогда
				Если (СтрокаВыборка.Сотрудник1=Сотрудник1НаСмене) ИЛИ (СтрокаВыборка.Сотрудник2=Сотрудник1НаСмене) ИЛИ (СтрокаВыборка.Сотрудник3=Сотрудник1НаСмене) Тогда
					
					СотрудникНаСмене = Истина;
					СтрокаТаблицаНаСмене = ТаблицаНаСмене.Добавить();
					СтрокаТаблицаНаСмене.Сотрудник=Сотрудник1НаСмене;
					СтрокаТаблицаНаСмене.КоличествоКолес=1;
					СтрокаТаблицаНаСмене.СтоимостьКолес=СтрокаВыборка.ЦенаПродажи;
					Если СтрокаВыборка.Сотрудник1=Сотрудник1НаСмене Тогда
						СтрокаТаблицаНаСмене.ЗабралСумму=(СтрокаВыборка.ЦенаПродажи/2)-СтрокаВыборка.ДолженЗабратьДеньгиСотрудник1;
					КонецЕсли;
					Если СтрокаВыборка.Сотрудник2=Сотрудник1НаСмене Тогда
						СтрокаТаблицаНаСмене.ЗабралСумму=(СтрокаВыборка.ЦенаПродажи/2)-СтрокаВыборка.ДолженЗабратьДеньгиСотрудник2;
					КонецЕсли;
					Если СтрокаВыборка.Сотрудник3=Сотрудник1НаСмене Тогда
						СтрокаТаблицаНаСмене.ЗабралСумму=(СтрокаВыборка.ЦенаПродажи/2)-СтрокаВыборка.ДолженЗабратьДеньгиСотрудник3;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		
		КонецЦикла;
		
		Если СотрудникНаСмене = Ложь Тогда
		Если (СтрокаВыборка.ДолженЗабратьДеньгиСотрудник1>0) ИЛИ (СтрокаВыборка.ДолженЗабратьДеньгиСотрудник2>0) ИЛИ (СтрокаВыборка.ДолженЗабратьДеньгиСотрудник3>0) Тогда
			
			Попытка
			Если СтрДлина(СокрЛП(Строка(СтрокаВыборка.Сотрудник1.Наименование)))>0 Тогда			
				СтрокаТаблицаПродалосьНаСмене = ТаблицаПродалосьНаСмене.Добавить();
				СтрокаТаблицаПродалосьНаСмене.Сотрудник=СтрокаВыборка.Сотрудник1;
				СтрокаТаблицаПродалосьНаСмене.КоличествоКолес=1;
				СтрокаТаблицаПродалосьНаСмене.СтоимостьКолес=СтрокаВыборка.ЦенаПродажи;
				СтрокаТаблицаПродалосьНаСмене.ДолженЗабратьСумму=СтрокаВыборка.ДолженЗабратьДеньгиСотрудник1;
			КонецЕсли;
			Исключение
			КонецПопытки;
			
			Попытка
			Если СтрДлина(СокрЛП(Строка(СтрокаВыборка.Сотрудник2.Наименование)))>0 Тогда			
				СтрокаТаблицаПродалосьНаСмене = ТаблицаПродалосьНаСмене.Добавить();
				СтрокаТаблицаПродалосьНаСмене.Сотрудник=СтрокаВыборка.Сотрудник2;
				СтрокаТаблицаПродалосьНаСмене.КоличествоКолес=1;
				СтрокаТаблицаПродалосьНаСмене.СтоимостьКолес=СтрокаВыборка.ЦенаПродажи;
				СтрокаТаблицаПродалосьНаСмене.ДолженЗабратьСумму=СтрокаВыборка.ДолженЗабратьДеньгиСотрудник2;
			КонецЕсли;
			Исключение
			КонецПопытки;
			
			Попытка
			Если СтрДлина(СокрЛП(Строка(СтрокаВыборка.Сотрудник3.Наименование)))>0 Тогда			
				СтрокаТаблицаПродалосьНаСмене = ТаблицаПродалосьНаСмене.Добавить();
				СтрокаТаблицаПродалосьНаСмене.Сотрудник=СтрокаВыборка.Сотрудник3;
				СтрокаТаблицаПродалосьНаСмене.КоличествоКолес=1;
				СтрокаТаблицаПродалосьНаСмене.СтоимостьКолес=СтрокаВыборка.ЦенаПродажи;
				СтрокаТаблицаПродалосьНаСмене.ДолженЗабратьСумму=СтрокаВыборка.ДолженЗабратьДеньгиСотрудник3;
			КонецЕсли;
			Исключение
			КонецПопытки;
	
		КонецЕсли;
		КонецЕсли;
		
		Иначе
			Если (СтрокаВыборка.ДолженЗабратьДеньгиСотрудник1>0) ИЛИ (СтрокаВыборка.ДолженЗабратьДеньгиСотрудник2>0) ИЛИ (СтрокаВыборка.ДолженЗабратьДеньгиСотрудник3>0) Тогда
			
			Попытка
			Если СтрДлина(СокрЛП(Строка(СтрокаВыборка.Сотрудник1.Наименование)))>0 Тогда			
				СтрокаТаблицаПродалосьРаньше = ТаблицаПродалосьРаньше.Добавить();
				СтрокаТаблицаПродалосьРаньше.Сотрудник=СтрокаВыборка.Сотрудник1;
				СтрокаТаблицаПродалосьРаньше.КоличествоКолес=1;
				СтрокаТаблицаПродалосьРаньше.СтоимостьКолес=СтрокаВыборка.ЦенаПродажи;
				СтрокаТаблицаПродалосьРаньше.ДолженЗабратьСумму=СтрокаВыборка.ДолженЗабратьДеньгиСотрудник1;
			КонецЕсли;
			Исключение
			КонецПопытки;
			
			Попытка
			Если СтрДлина(СокрЛП(Строка(СтрокаВыборка.Сотрудник2.Наименование)))>0 Тогда			
				СтрокаТаблицаПродалосьРаньше = ТаблицаПродалосьРаньше.Добавить();
				СтрокаТаблицаПродалосьРаньше.Сотрудник=СтрокаВыборка.Сотрудник2;
				СтрокаТаблицаПродалосьРаньше.КоличествоКолес=1;
				СтрокаТаблицаПродалосьРаньше.СтоимостьКолес=СтрокаВыборка.ЦенаПродажи;
				СтрокаТаблицаПродалосьРаньше.ДолженЗабратьСумму=СтрокаВыборка.ДолженЗабратьДеньгиСотрудник2;
			КонецЕсли;
			Исключение
			КонецПопытки;
			
			Попытка
			Если СтрДлина(СокрЛП(Строка(СтрокаВыборка.Сотрудник3.Наименование)))>0 Тогда			
				СтрокаТаблицаПродалосьРаньше = ТаблицаПродалосьРаньше.Добавить();
				СтрокаТаблицаПродалосьРаньше.Сотрудник=СтрокаВыборка.Сотрудник3;
				СтрокаТаблицаПродалосьРаньше.КоличествоКолес=1;
				СтрокаТаблицаПродалосьРаньше.СтоимостьКолес=СтрокаВыборка.ЦенаПродажи;
				СтрокаТаблицаПродалосьРаньше.ДолженЗабратьСумму=СтрокаВыборка.ДолженЗабратьДеньгиСотрудник3;
			КонецЕсли;
			Исключение
			КонецПопытки;
	
			КонецЕсли;
			 			
		КонецЕсли;
		
		
		//КолНаСтойке=КолНаСтойке+1;
		//СуммаНаСтойке=СуммаНаСтойке+СтрокаВыборка.Цена;
	КонецЦикла;
	
	ТаблицаНаСмене.Свернуть("Сотрудник","КоличествоКолес,СтоимостьКолес,ЗабралСумму");
	ТаблицаПродалосьНаСмене.Свернуть("Сотрудник","КоличествоКолес,СтоимостьКолес,ДолженЗабратьСумму");
	ТаблицаПродалосьРаньше.Свернуть("Сотрудник","КоличествоКолес,СтоимостьКолес,ДолженЗабратьСумму");
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Отчет_Стойка_По_Деньгам";
	Макет = ПолучитьМакетОтчетСтойкаПоДеньгам();
	
	ОбластьШапка=Макет.ПолучитьОбласть("ШапкаСтойки");
	ОбластьШапка.Параметры.ДатаНачОтчетаСтойка=НСмены;
	ОбластьШапка.Параметры.ДатаОкончОтчетаСтойка=КСмены;
	ТабДок.Вывести(ОбластьШапка);
	
	ИтогоНачальнику=0;
	ИтогоОставилиРабочим=0;
	
	ОбластьРазделительная=Макет.ПолучитьОбласть("ОтделНаСмене");
	ТабДок.Вывести(ОбластьРазделительная);
	
	Для Каждого СтрокаТаблВывода Из ТаблицаНаСмене Цикл
		ОбластьСтроки=Макет.ПолучитьОбласть("СтрокаСтойки");
		ОбластьСтроки.Параметры.Сотрудник=СтрокаТаблВывода.Сотрудник;
		ОбластьСтроки.Параметры.ПродалосьВсегоКолес=СтрокаТаблВывода.КоличествоКолес;
		ОбластьСтроки.Параметры.СтоимостьКолес=СтрокаТаблВывода.СтоимостьКолес;
		ОбластьСтроки.Параметры.ЗабралиСразу=СтрокаТаблВывода.ЗабралСумму;
		ОбластьСтроки.Параметры.ОставилиНачальнику=СтрокаТаблВывода.СтоимостьКолес-СтрокаТаблВывода.ЗабралСумму;
		ИтогоНачальнику=ИтогоНачальнику+СтрокаТаблВывода.СтоимостьКолес-СтрокаТаблВывода.ЗабралСумму;
		ОбластьСтроки.Параметры.ОставилиРабочим=0;
		//ИтогоОставилиРабочим=ИтогоОставилиРабочим+;
		ТабДок.Вывести(ОбластьСтроки);
	КонецЦикла;
	
	ОбластьРазделительная=Макет.ПолучитьОбласть("ОтделНаСменеПродалось");
	ТабДок.Вывести(ОбластьРазделительная);
	
	Для Каждого СтрокаТаблВывода Из ТаблицаПродалосьНаСмене Цикл
		ОбластьСтроки=Макет.ПолучитьОбласть("СтрокаСтойки");
		ОбластьСтроки.Параметры.Сотрудник=СтрокаТаблВывода.Сотрудник;
		ОбластьСтроки.Параметры.ПродалосьВсегоКолес=СтрокаТаблВывода.КоличествоКолес;
		ОбластьСтроки.Параметры.СтоимостьКолес=СтрокаТаблВывода.СтоимостьКолес;
		ОбластьСтроки.Параметры.ЗабралиСразу=0;
		ОбластьСтроки.Параметры.ОставилиНачальнику=СтрокаТаблВывода.СтоимостьКолес-СтрокаТаблВывода.ДолженЗабратьСумму;
		ИтогоНачальнику=ИтогоНачальнику+СтрокаТаблВывода.СтоимостьКолес-СтрокаТаблВывода.ДолженЗабратьСумму;
		ОбластьСтроки.Параметры.ОставилиРабочим=СтрокаТаблВывода.ДолженЗабратьСумму;
		ИтогоОставилиРабочим=ИтогоОставилиРабочим+СтрокаТаблВывода.ДолженЗабратьСумму;
		ТабДок.Вывести(ОбластьСтроки);
	КонецЦикла;
	
	ОбластьРазделительная=Макет.ПолучитьОбласть("ОтделПродалосьРаньше");
	ТабДок.Вывести(ОбластьРазделительная);
	
	Для Каждого СтрокаТаблВывода Из ТаблицаПродалосьРаньше Цикл
		ОбластьСтроки=Макет.ПолучитьОбласть("СтрокаСтойки");
		ОбластьСтроки.Параметры.Сотрудник=СтрокаТаблВывода.Сотрудник;
		ОбластьСтроки.Параметры.ПродалосьВсегоКолес=СтрокаТаблВывода.КоличествоКолес;
		ОбластьСтроки.Параметры.СтоимостьКолес=СтрокаТаблВывода.СтоимостьКолес;
		ОбластьСтроки.Параметры.ЗабралиСразу=0;
		ОбластьСтроки.Параметры.ОставилиНачальнику=СтрокаТаблВывода.СтоимостьКолес-СтрокаТаблВывода.ДолженЗабратьСумму;
		ИтогоНачальнику=ИтогоНачальнику+СтрокаТаблВывода.СтоимостьКолес-СтрокаТаблВывода.ДолженЗабратьСумму;
		ОбластьСтроки.Параметры.ОставилиРабочим=СтрокаТаблВывода.ДолженЗабратьСумму;
		ИтогоОставилиРабочим=ИтогоОставилиРабочим+СтрокаТаблВывода.ДолженЗабратьСумму;
		ТабДок.Вывести(ОбластьСтроки);
	КонецЦикла;
	
	ОбластьИтого=Макет.ПолучитьОбласть("Итого");
	ОбластьИтого.Параметры.ИтогоНачальнику=ИтогоНачальнику;
	ОбластьИтого.Параметры.ИтогоРабочим=ИтогоОставилиРабочим;
	ТабДок.Вывести(ОбластьИтого);
	
	Возврат ТабДок;
	
КонецФункции


&НаКлиенте
Процедура ОтчетСтойкаЗаПериод(Команда)
	
	Перем ДатаНачОтчетаСтойка,ДатаОкончОтчетаСтойка;
	
	Если ВвестиДату(ДатаНачОтчетаСтойка,"Дата начала",ЧастиДаты.ДатаВремя)=Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если ВвестиДату(ДатаОкончОтчетаСтойка,"Дата окончания",ЧастиДаты.ДатаВремя)=Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ТабДок = ПолучитьОтчетЗаСтойкуЗаПериод(ДатаНачОтчетаСтойка,ДатаОкончОтчетаСтойка);
	Если ТабДок<>Неопределено Тогда
		ТабДок.Показать();
	КонецЕсли;
	
	//ТабДокПоДеньгам = ПолучитьОтчетЗаСтойкуПоДеньгамЗаСмену();
	//Если ТабДокПоДеньгам<>Неопределено Тогда
	//	ТабДокПоДеньгам.Показать();
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция МК_СформироватьТекстКопииЧека()
	
	ШиринаСтроки = Константы.ШМРазмерСтрокиНаККм.Получить();
	
	ТекстПунктир = "------------------------------------------";
	ТекстВыделение = "******************************************";
	
	//ТекстКопииЧека = "<?xml version=""1.0"" encoding=""UTF-8"" ?>
	//|<Document>
	//|   <Positions>
	//|      <TextString Text=""            *** ДЕТАЛИЗАЦИЯ ***        ""/>";
	
	ТекстКопииЧека = "<?xml version=""1.0"" encoding=""UTF-8"" ?>
	|<Document>
	|   <Positions>
	|      <TextString Text=""                    ""/>";
	 
	
	ТекстСкидки = "";
	//Если СейчасСкидкаРазовая=Истина Тогда
	//	ТекстСкидки = "Ск.10% ";
	//ИначеЕсли СейчасСкидка=Истина Тогда
	//	ТекстСкидки = "Ск.20% ";
	//ИначеЕсли СейчасКупон=Истина Тогда
	//	ТекстСкидки = "Ск.10% ";
	//ИначеЕсли СкидкаИнетМаг=Истина Тогда
	//	ТекстСкидки = "Ск.50% ";
	//КонецЕсли;
	Если СейчасСкидкаРазовая=Истина Тогда
		ТекстСкидки = "20% ";
	ИначеЕсли СейчасСкидка=Истина Тогда
		ТекстСкидки = "10% ";
	ИначеЕсли СейчасКупон=Истина Тогда
		ТекстСкидки = "10% ";
	ИначеЕсли СкидкаИнетМаг=Истина Тогда
		ТекстСкидки = "10% ";
	КонецЕсли;
	
	СуммаСкидкиПечать=0;
	СуммаИтогоПечать=0;
	Для Каждого СтрокаТаб Из Таб Цикл
		
		ТекстКопииЧека = ТекстКопииЧека + 
		"|      <TextString Text=""" + ТекстПунктир + """/>";
		
	    ТекстВыводаНаименования="";
		ТекстВыводаНаименования=ТекстВыводаНаименования+СтрЗаменить(СокрЛП(СтрокаТаб.Номенклатура.НаименованиеПолное),"""","");
		ПоложениеТочкиВНачале = Найти(ТекстВыводаНаименования,".");
		Если (ПоложениеТочкиВНачале>0) И (ПоложениеТочкиВНачале<=4) Тогда
			НумерацияНоменклатуры=Лев(ТекстВыводаНаименования,4);
			ТекстВыводаНаименования=СтрЗаменить(ТекстВыводаНаименования,НумерацияНоменклатуры,"");
		КонецЕсли;
		//Если СтрокаТаб.СуммаСкидки>0 Тогда
		//	ТекстВыводаНаименования=ТекстСкидки+ТекстВыводаНаименования;
		//Иначе
		//	Если СтрДлина(ТекстСкидки)>0 Тогда
		//		//ТекстВыводаНаименования="Ск.0%  "+ТекстВыводаНаименования;
		//		ТекстВыводаНаименования="       "+ТекстВыводаНаименования;
		//	КонецЕсли;
		//КонецЕсли;
		Если СтрДлина(ТекстВыводаНаименования)>ШиринаСтроки Тогда	
			ПервоначальнаяСтрокаТекстВыводаНаименования=ТекстВыводаНаименования;
			Пока СтрДлина(ПервоначальнаяСтрокаТекстВыводаНаименования)>ШиринаСтроки Цикл
				ТекстВыводаНаименования=Лев(ПервоначальнаяСтрокаТекстВыводаНаименования,ШиринаСтроки);
				ТекстКопииЧека = ТекстКопииЧека + 
				"|      <TextString Text=""" + ТекстВыводаНаименования + """/>";
				ПервоначальнаяСтрокаТекстВыводаНаименования=СтрЗаменить(ПервоначальнаяСтрокаТекстВыводаНаименования,ТекстВыводаНаименования,"");
				//ПервоначальнаяСтрокаТекстВыводаНаименования="       "+ПервоначальнаяСтрокаТекстВыводаНаименования;
			КонецЦикла;
			Если СтрДлина(ПервоначальнаяСтрокаТекстВыводаНаименования)>0 Тогда
				ТекстКопииЧека = ТекстКопииЧека + 
				"|      <TextString Text=""" + ПервоначальнаяСтрокаТекстВыводаНаименования + """/>";
			КонецЕсли;
		Иначе
			ТекстКопииЧека = ТекстКопииЧека + 
			"|      <TextString Text=""" + ТекстВыводаНаименования + """/>";
		КонецЕсли;
		
		
		//ТекстВыводаСуммы="                    ";
		ТекстВыводаСуммы="";
		ТекстВыводаСкидки="";
		Если СтрДлина(ТекстСкидки)>0 Тогда
			Если (СтрокаТаб.Цена*СтрокаТаб.Количество)<>(СтрокаТаб.Сумма) Тогда
				ТекстВыводаСкидки=Формат(СтрокаТаб.Цена,"ЧГ=0,ЧДЦ=2")+" - "+ТекстСкидки+" = ";
			КонецЕсли;
		КонецЕсли;
		Пока СтрДлина(ТекстВыводаСкидки) < Окр(ШиринаСтроки/2,0) Цикл
			ТекстВыводаСкидки = ТекстВыводаСкидки + " ";
		КонецЦикла;
		ТекстВыводаСуммы=Формат(СтрокаТаб.Цена-(СтрокаТаб.СуммаСкидки/СтрокаТаб.Количество),"ЧГ=0,ЧДЦ=2");
		ТекстВыводаСуммы = ТекстВыводаСуммы + " Х ";
		ТекстВыводаСуммы = ТекстВыводаСуммы + СокрЛП(Строка(СтрокаТаб.Количество));
		ЧастьСуммаСоСкидкой = "="+Формат(СтрокаТаб.Сумма,"ЧГ=0,ЧДЦ=2");
		Пока (СтрДлина(ТекстВыводаСуммы)+СтрДлина(ЧастьСуммаСоСкидкой))<Окр(ШиринаСтроки/2,0) Цикл
			ЧастьСуммаСоСкидкой=" "+ЧастьСуммаСоСкидкой;
		КонецЦикла;
		ТекстВыводаСуммы = ТекстВыводаСуммы + ЧастьСуммаСоСкидкой;
		ТекстВыводаСуммы = ТекстВыводаСкидки + ТекстВыводаСуммы;
		ТекстКопииЧека = ТекстКопииЧека + 
		"|      <TextString Text=""" + ТекстВыводаСуммы + """/>";
		
		СуммаСкидкиПечать=СуммаСкидкиПечать+СтрокаТаб.СуммаСкидки;
		СуммаИтогоПечать=СуммаИтогоПечать+СтрокаТаб.Сумма;
		
	КонецЦикла;
	
	//Итог скидки
	Если СуммаСкидкиПечать=0 Тогда
		ТекстИтоговаяСкидка = "ИТОГОВАЯ СКИДКА - 0.00";
	Иначе
		ТекстИтоговаяСкидка = "ИТОГОВАЯ СКИДКА - "+Формат(СуммаСкидкиПечать,"ЧГ=0,ЧДЦ=2");
	КонецЕсли;
	ТекстКопииЧека = ТекстКопииЧека +
	"|      <TextString Text=""" + ТекстВыделение + """/>";
	ТекстКопииЧека = ТекстКопииЧека +
	"|      <TextString Text=""" + ТекстИтоговаяСкидка + """/>";
	
	//ИтогСуммы
	ТекстКопииЧека = ТекстКопииЧека +
	"|      <TextString Text=""" + ТекстВыделение + """/>";
	Если СуммаСкидкиПечать=0 Тогда
		ТекстИтог="ИТОГО К ОПЛАТЕ";
	Иначе
		ТекстИтог="ИТОГО К ОПЛАТЕ СО СКИДКОЙ";
	КонецЕсли;
	Пока СтрДлина(ТекстИтог+Формат(СуммаИтогоПечать,"ЧГ=0,ЧДЦ=2")) < ШиринаСтроки Цикл
		ТекстИтог = ТекстИтог + " ";
	КонецЦикла;
	ТекстИтог = ТекстИтог + Формат(СуммаИтогоПечать,"ЧГ=0,ЧДЦ=2");
	//ТекстИтог = "ИТОГО К ОПЛАТЕ         "+Формат(СуммаИтогоПечать,"ЧГ=0,ЧДЦ=2");
	ТекстКопииЧека = ТекстКопииЧека +
	"|      <TextString Text=""" + ТекстИтог + """/>";
	ТекстКопииЧека = ТекстКопииЧека +
	"|      <TextString Text=""" + ТекстВыделение + """/>";
	
	
	ТекстНДС = "НДС не облагается";
	ТекстКопииЧека = ТекстКопииЧека +
	"|      <TextString Text=""" + ТекстНДС + """/> 
	|      <TextString Text=""        ""/>";
	
	ТекстРеализация = "№ Реал. "+ДокРеал.Номер+" от "+ДокРеал.Дата;
	ТекстКопииЧека = ТекстКопииЧека +
	"|      <TextString Text=""" + ТекстРеализация + """/>";
	
	ТекстКопииЧека = ТекстКопииЧека + Символы.ПС +  """/>
	 |   </Positions>
	 |</Document>";
    
    Возврат ТекстКопииЧека;
    
КонецФункции


//&НаСервере
//Процедура ТаблицаНоменклатураПриИзмененииНаСервере(Элемент)
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	ШМ_НоменклатураПрофессии.Номенклатура КАК Номенклатура
//		|ИЗ
//		|	РегистрСведений.ШМ_НоменклатураПрофессии КАК ШМ_НоменклатураПрофессии
//		|ГДЕ
//		|	ШМ_НоменклатураПрофессии.Номенклатура = &Номенклатура";
//	
//	Запрос.УстановитьПараметр("Номенклатура", Элемент);
//	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
//	
//	Если РезультатЗапроса.Количество() = 0 тогда
//		
//		ТекстОшибкиРС = ТекстОшибкиРС + Символы.ПС + СтрШаблон("Данный товар %1 не добавлен в РС Номенклатура Профессии. Возможны ошибки учета(не корректность данных в чистовике и черновике)", Элемент);
//		
//	КонецЕсли;
//КонецПроцедуры


//&НаКлиенте
//Процедура ТаблицаНоменклатураПриИзменении(Элемент)
//	ТаблицаНоменклатураПриИзмененииНаСервере(Элемент);
//КонецПроцедуры

