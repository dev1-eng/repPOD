
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	УстановитьНедоступныеОтборыИзПараметров(Параметры.Отбор);
	
	Если Параметры.Свойство("Партнер") Тогда
		
		Партнер = Параметры.Партнер;
		
		СписокПартнеров = Новый СписокЗначений;
		ПартнерыИКонтрагенты.ЗаполнитьСписокПартнераСРодителями(Партнер, СписокПартнеров);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список, 
			"Партнер", 
			СписокПартнеров, 
			ВидСравненияКомпоновкиДанных.ВСписке,
			, 
			ЗначениеЗаполнено(Партнер));
		
		Список.Параметры.УстановитьЗначениеПараметра("ПартнерПоУмолчанию", Партнер);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список, 
			"ПартнерПоУмолчанию", 
			Партнер, 
			ВидСравненияКомпоновкиДанных.Равно,
			,
			Истина);
		
	Иначе
		
		Список.Параметры.УстановитьЗначениеПараметра("ПартнерПоУмолчанию", Справочники.Партнеры.ПустаяСсылка());
		
	КонецЕсли;
	Если Параметры.Свойство("Контрагент") Тогда
		Контрагент = Параметры.Контрагент;
		УстановитьЭлементОтбораДинамическогоСписка(Список, Контрагент, "Контрагент");
	КонецЕсли;
	
	Если Параметры.Свойство("РазрешитьВыборПартнера") Тогда
		Элементы.ОтборПартнер.Видимость = Истина;
		Элементы.ОтборКонтрагент.Видимость = Истина;
		Элементы.СписокОрганизация.Видимость = Истина;
		Элементы.СписокКонтрагент.Видимость = Истина;
		Элементы.СписокПартнер.Видимость = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("НалогообложениеНДС") Тогда 
		УчетАгентскогоНДС = (Параметры.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НалоговыйАгентПоНДС);  
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка( 
			Список, 
			"УчетАгентскогоНДС", 
			УчетАгентскогоНДС, 
			ВидСравненияКомпоновкиДанных.Равно, 
			, 
			Истина); 
	КонецЕсли;
		
	Если Параметры.Отбор.Свойство("ХозяйственнаяОперация") И
		Параметры.Отбор.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика И
		Параметры.Свойство("ПоказыватьЗакупкуПоИмпорту") Тогда
		
		МассивХозяйственныхОпераций = Новый Массив();
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьИмпортныеЗакупкиТоваровВПути") Тогда
			ОперацииВПути = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивХозяйственныхОпераций, ОперацииВПути);
			ОперацииВПути = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивХозяйственныхОпераций, ОперацииВПути);
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьТоварыВПутиОтПоставщиков")
			Или ПолучитьФункциональнуюОпцию("ИспользоватьНеотфактурованныеПоставки") Тогда
			ОперацииВПути = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивХозяйственныхОпераций, ОперацииВПути);
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоНаСтороне") Тогда
			ПроизводствоУПереработчика = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ПроизводствоУПереработчика);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивХозяйственныхОпераций, ПроизводствоУПереработчика);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список, 
			"ХозяйственнаяОперация", 
			МассивХозяйственныхОпераций,
			ВидСравненияКомпоновкиДанных.ВСписке);
			
	КонецЕсли;
	
	Если Параметры.Свойство("ДоступныеПорядкиРасчетов") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список, 
			"ПорядокРасчетов", 
			Параметры.ДоступныеПорядкиРасчетов, 
			ВидСравненияКомпоновкиДанных.ВСписке);
		
	КонецЕсли;
	
	Если Параметры.Свойство("ТипыДоговоров") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список, 
			"ТипДоговора", 
			Параметры.ТипыДоговоров, 
			ВидСравненияКомпоновкиДанных.ВСписке);
		
	КонецЕсли;
	
	ОтборыСписковКлиентСервер.СкопироватьСписокВыбораОтбораПоМенеджеру(
		Элементы.ОтборМенеджер.СписокВыбора, 
		ОбщегоНазначенияУТ.ПолучитьСписокПользователейСПравомДобавления(Метаданные.Справочники.ДоговорыКонтрагентов));
	
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Параметры.Отбор.Очистить();

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Менеджер = Настройки.Получить("Менеджер");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, 
		"Менеджер", 
		Менеджер, 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		ЗначениеЗаполнено(Менеджер));
	
	Настройки.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборМенеджерПриИзменении(Элемент)
	
	УстановитьЭлементОтбораДинамическогоСписка(Список, Менеджер, "Менеджер");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПартнерПриИзменении(Элемент)
	
	УстановитьЭлементОтбораДинамическогоСписка(Список, Партнер, "Партнер");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентПриИзменении(Элемент)
	
	УстановитьЭлементОтбораДинамическогоСписка(Список, Контрагент, "Контрагент");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЭлементОтбораДинамическогоСписка(Список, РеквизитФормы, ИмяПоляДинамическогоСписка)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, 
		ИмяПоляДинамическогоСписка, 
		РеквизитФормы, 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		ЗначениеЗаполнено(РеквизитФормы));
	
КонецПроцедуры

// Процедура устанавливает отборы, переданные в структуре. Отборы недоступны для изменения.
//
// Параметры:
//	СтруктураОтбора - Структура - Ключ: имя поля компоновки данных, Значение: значение отбора.
//
&НаСервере
Процедура УстановитьНедоступныеОтборыИзПараметров(СтруктураОтбора)
	
	Для Каждого ЭлементОтбора Из СтруктураОтбора Цикл
		
		Если ЭлементОтбора.Ключ = "Контрагент" И ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
			
			РеквизитОтбора = ?(ЗначениеЗаполнено(ЭлементОтбора.Значение),
			                   ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементОтбора.Значение, "Партнер"),
			                   Справочники.Партнеры.ПустаяСсылка());
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			   Список, 
			   "Партнер", 
			   РеквизитОтбора,
			   ВидСравненияКомпоновкиДанных.Равно);
			
			Продолжить;
			
		КонецЕсли;
		
		Если ЭлементОтбора.Ключ = "ХозяйственнаяОперация" 
			И ЭлементОтбора.Значение = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Список, 
				ЭлементОтбора.Ключ, 
				Перечисления.ХозяйственныеОперации.РеализацияКлиенту,
				ВидСравненияКомпоновкиДанных.Равно);
			
			Продолжить;
			
		КонецЕсли;

		Если ТипЗнч(ЭлементОтбора.Значение) = Тип("ФиксированныйМассив") Тогда
			ВидСравненияКомпоновки = ВидСравненияКомпоновкиДанных.Всписке;
		Иначе
			ВидСравненияКомпоновки = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список, 
			ЭлементОтбора.Ключ, 
			ЭлементОтбора.Значение, 
			ВидСравненияКомпоновки);
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
