#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// Обработчик механизма "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	НадписьСоздатьПравило = НСтр("ru='Объединять данные счетов банка в один файл'");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ)
	
	Если Объект.РучноеИзменениеРеквизитовБанка Тогда
		ЗаполнитьЗначенияСвойств(Объект, ЭтаФорма, РеквизитыБанка());
	КонецЕсли;
	
	Объект.НаименованиеБанкаМеждународное = НаименованиеБанкаМеждународное;
	
	Если Объект.РучноеИзменениеРеквизитовБанкаДляРасчетов Тогда
		ЗаполнитьЗначенияСвойств(Объект, ЭтаФорма, РеквизитыБанкаДляРасчетов());
	КонецЕсли;
	
	Объект.НаименованиеБанкаДляРасчетовМеждународное = НаименованиеБанкаДляРасчетовМеждународное;
	
	Если ИспользоватьТекстКорреспондента Тогда
		Объект.ТекстКорреспондента = ТекстКорреспондента;
	Иначе
		Объект.ТекстКорреспондента = "";
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.Наименование) Тогда
		Объект.Наименование = СформироватьАвтоНаименование();
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		ДубльБанковскогоСчета = НайтиДубльБанковскогоСчета(Объект.Ссылка, Объект.НомерСчета, Объект.Владелец, Объект.ВалютаДенежныхСредств, Объект.Банк);
		Если ДубльБанковскогоСчета <> Неопределено Тогда
			
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Найден банковский счет ""%1"", с аналогичным номером в указанном банке.
					|Продолжить запись текущего элемента?'"),
				ДубльБанковскогоСчета);
				
			ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаДублейЗавершение", ЭтаФорма);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаДублейЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Модифицированность = Ложь;
		Записать();
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_БанковскиеСчетаОрганизаций", ПараметрыЗаписи, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ЭлектронноеВзаимодействие.ОбменСБанками
	Если ТипЗнч(Параметр) = Тип("СправочникСсылка.НастройкиОбменСБанками") Тогда
		ОбновитьЭлементыФормыИСоглашениеЭД();
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСБанками
	ОбменСБанкамиКлиент.ОбновитьРекламуДиректБанк(ИмяСобытия, Элементы.ГруппаРекламаДиректБанк, Элементы.ТекстДиректБанкГоризонтально);
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НомерСчетаПриИзменении(Элемент)
	
	Если Не ПустаяСтрока(Объект.НомерСчета) Тогда
		НомерСчетаПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяБанкДляРасчетовПриИзменении(Элемент)
	
	Если Не ИспользуетсяБанкДляРасчетов Тогда
		Объект.БанкДляРасчетов = Неопределено;
		Для каждого КлючИЗначение Из Новый Структура(РеквизитыБанкаДляРасчетов()) Цикл
			Объект[КлючИЗначение.Ключ] = "";
			ЭтаФорма[КлючИЗначение.Ключ] = "";
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПараметрыРедактированияРеквизитов();
	
	НастроитьЗависимыеЭлементыФормы(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьТекстКорреспондентаПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	ВладелецПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВладелецПриИзмененииНаСервере()
	
	Если Не ИспользоватьТекстКорреспондента Тогда
		ЗаполнитьТекстКорреспондента();
	КонецЕсли;
	
	СформироватьАвтоНаименование();
	
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаПриИзменении(Элемент)
	
	РеквизитБанкаПриИзменении("БИКБанка");
	
КонецПроцедуры

&НаКлиенте
Процедура БикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элемент.Имя = "БИКБанка" И Не Объект.РучноеИзменениеРеквизитовБанка
		Или Элемент.Имя = "БИКБанкаДляРасчетов" И Не Объект.РучноеИзменениеРеквизитовБанкаДляРасчетов Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Реквизит", Элемент.Имя);
		СтруктураПараметров.Вставить("ТекущаяСтрока", ?(Элемент.Имя = "БИКБанка", Объект.Банк, Объект.БанкДляРасчетов));
		СтруктураПараметров.Вставить("ПараметрВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
		ОткрытьФорму("Справочник.КлассификаторБанков.Форма.ФормаВыбора", СтруктураПараметров, ЭтаФорма,,,,
			Новый ОписаниеОповещения("ОбработкаВыбораБанкаИзКлассификатора", ЭтотОбъект, Элемент.Имя));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(БИКБанка) Тогда
		РеквизитБанкаОткрытие("БИКБанка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаДляРасчетовПриИзменении(Элемент)
	
	РеквизитБанкаПриИзменении("БИКБанкаДляРасчетов");
	
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаДляРасчетовОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(БИКБанкаДляРасчетов) Тогда
		РеквизитБанкаОткрытие("БИКБанкаДляРасчетов");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РучноеИзменениеРеквизитовБанкаПриИзменении(Элемент)
	
	РучноеИзменениеРеквизитовБанкаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РучноеИзменениеРеквизитовБанкаПриИзмененииНаСервере()
	
	Если Объект.РучноеИзменениеРеквизитовБанка Тогда
		Если Не Объект.Банк.Пустая() Тогда
			ЗаполнитьРеквизитыБанкаПоБанку("Банк", Объект.Банк, Истина);
		КонецЕсли;
		Объект.Банк = "";
		
		РежимОбмена = 2;
		Объект.ИспользоватьПрямойОбменСБанком = Ложь;
		Объект.ИспользоватьОбменСБанком = Истина;
	Иначе
		ЗаполнитьРеквизитыБанкаПоБИК("Банк", Объект.БИКБанка, Истина);
		Для каждого КлючИЗначение Из Новый Структура(РеквизитыБанка()) Цикл
			Объект[КлючИЗначение.Ключ] = "";
		КонецЦикла;
	КонецЕсли;
	
	БанкПриИзменении();
	ОбновитьЭлементыФормыИСоглашениеЭД();
	НастроитьЗависимыеЭлементыФормыНаСервере("РучноеИзменениеРеквизитовБанка, ИспользоватьОбменСБанком");
	
КонецПроцедуры

&НаКлиенте
Процедура РучноеИзменениеРеквизитовБанкаДляРасчетовПриИзменении(Элемент)
	
	Если Объект.РучноеИзменениеРеквизитовБанкаДляРасчетов Тогда
		Если Не Объект.БанкДляРасчетов.Пустая() Тогда
			ЗаполнитьРеквизитыБанкаПоБанку("БанкДляРасчетов", Объект.БанкДляРасчетов, Истина);
		КонецЕсли;
		Объект.БанкДляРасчетов = "";
	Иначе
		ЗаполнитьРеквизитыБанкаПоБИК("БанкДляРасчетов", Объект.БИКБанкаДляРасчетов, Истина);
		Для каждого КлючИЗначение Из Новый Структура(РеквизитыБанкаДляРасчетов()) Цикл
			Объект[КлючИЗначение.Ключ] = "";
		КонецЦикла;
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборФайла(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборФайла(Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФайлДляПросмотра(Элемент, НСтр("ru='Файл загрузки'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФайлДляПросмотра(Элемент, НСтр("ru='Файл выгрузки'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДенежныхСредствПриИзменении(Элемент)
	
	ВалютныйСчет = (ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств) И Объект.ВалютаДенежныхСредств <> ВалютаРеглУчета);
	
	УстановитьПараметрыРедактированияРеквизитов();
	
	ВалютаДенежныхСредствПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ВалютаДенежныхСредствПриИзмененииСервер()
	
	СформироватьАвтоНаименование();
	
	Если Объект.ВалютаДенежныхСредств = ВалютаРеглУчета
		И Объект.ТипСчета = Перечисления.ТипыБанковскихСчетов.Транзитный Тогда
		Объект.ТипСчета = Неопределено;
	КонецЕсли;
	
	ЗаполнитьСписокВыбораТипаСчета();
	
	
	УправлениеЭлементамиФормы();
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеБанкаПриИзменении(Элемент)
	
	СформироватьАвтоНаименование();
	
КонецПроцедуры

// ЭлектронноеВзаимодействие.ОбменСБанками

&НаКлиенте
Процедура ДекорацияСоглашениеЭДНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", СоглашениеЭД);
	ОткрытьФорму("Справочник.НастройкиОбменСБанками.Форма.ФормаЭлемента", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДобавитьСоглашениеЭДНажатие(Элемент)
	
	НеДобавлять = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Владелец) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не указана организация'"), , "Владелец", "Объект", НеДобавлять); 
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Банк) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не указан банк'"), , "БИК", "Объект", НеДобавлять); 
	КонецЕсли;
	
	Если НеДобавлять Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ПослеСозданияНастройкиОбмена", ЭтотОбъект);
	ОбменСБанкамиКлиент.ОткрытьСоздатьНастройкуОбмена(
		Объект.Владелец, Объект.Банк, Объект.НомерСчета, Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияНастройкиОбмена(НастройкаЭДО, Параметры) Экспорт
	
	Элементы.ДекорацияДобавитьСоглашениеЭД.Заголовок = ОбменСБанкамиКлиентСервер.ЗаголовокНастройкиОбменаСБанком(
		Объект.Владелец, Объект.Банк);

КонецПроцедуры

&НаКлиенте
Процедура ТекстДиректБанкГоризонтальноОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбменСБанкамиКлиент.ОбработкаНавигационнойСсылкиРекламыДиректБанк(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСБанками

&НаКлиенте
Процедура РежимОбменаВключенПриИзменении(Элемент)
	
	СтрокаВключенОбменСБанком = ?(Объект.ОбменСБанкомВключен, НСтр("ru = 'включен'"), НСтр("ru = 'не включен'"));
	
	НастроитьЗависимыеЭлементыФормы(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимОбменаКлиентБанкаПриИзменении(Элемент)
	
	РежимОбменаПриИзменении("ИспользоватьОбменСБанком");
	
КонецПроцедуры

&НаКлиенте
Процедура РежимОбменаПрямойОбменПриИзменении(Элемент)
	
	РежимОбменаПриИзменении("ИспользоватьПрямойОбменСБанком");
	
КонецПроцедуры

&НаКлиенте
Процедура РежимОбменаПриИзменении(ИмяЭлемента)
	
	Объект.ИспользоватьПрямойОбменСБанком = (РежимОбмена = 1);
	Объект.ИспользоватьОбменСБанком = (РежимОбмена = 2);
	
	Если Не ЗначениеЗаполнено(Объект.Кодировка) Тогда
		Объект.Кодировка = "Windows";
	КонецЕсли;
	
	РежимОбменаПриИзмененииНаСервере(ИмяЭлемента);
	
КонецПроцедуры

&НаСервере
Процедура РежимОбменаПриИзмененииНаСервере(ИмяЭлемента)
	
	НастроитьЗависимыеЭлементыФормыНаСервере(ИмяЭлемента);
	УстановитьСтраницуСоглашенийЭД();
	
КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ТекстОшибки = "";
	ОчиститьСообщения();
	Валютный = (Объект.ВалютаДенежныхСредств <> ВалютаРеглУчета);
	
	Если Не ПустаяСтрока(Текст)
		И Не Объект.ИностранныйБанк
		И Не ДенежныеСредстваКлиентСервер.ПроверитьКорректностьНомераСчета(Текст, Валютный, ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НомерСчета", "Объект");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИностранныйБанкПриИзменении(Элемент)
	
	Объект.ИностранныйБанк = (ИностранныйБанк = 1);
	
	Если Объект.ИностранныйБанк Тогда
		Объект.ТипСчета = Неопределено;
	КонецЕсли;
	
	УстановитьПараметрыРедактированияРеквизитов();
	
	ИностранныйБанкПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ИностранныйБанкПриИзмененииНаСервере()
	
	ЗаполнитьСписокВыбораТипаСчета();
	УправлениеЭлементамиФормы();
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипСчетаПриИзменении(Элемент)
	
	
	СформироватьАвтоНаименование();
	
	НастроитьЗависимыеЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтдельныйСчетГОЗПриИзменении(Элемент)
	
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ГосударственныйКонтрактПриИзменении(Элемент)
	
	
	Возврат;
	
КонецПроцедуры


&НаКлиенте
Процедура ВвестиТранзитныйСчетНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	
	Основание = Новый Структура;
	Основание.Вставить("ТипСчета", ПредопределенноеЗначение("Перечисление.ТипыБанковскихСчетов.Транзитный"));
	Основание.Вставить("Владелец", Объект.Владелец);
	Основание.Вставить("ВалютаДенежныхСредств", Объект.ВалютаДенежныхСредств);
	Основание.Вставить("Банк", Объект.Банк);
	Основание.Вставить("ОсновнойБанковскийСчет", Объект.Ссылка);
	Основание.Вставить("РазрешитьПлатежиБезУказанияЗаявок", Объект.РазрешитьПлатежиБезУказанияЗаявок);
	ПараметрыФормы.Вставить("Основание", Основание);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВводаТранзитногоСчета", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.БанковскиеСчетаОрганизаций.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаТранзитногоСчета(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьНадписьТранзитныйСчет();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ОткрытьФорму("Справочник.БанковскиеСчетаОрганизаций.Форма.РазблокированиеРеквизитов",,,,,, 
			Новый ОписаниеОповещения("Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение", ЭтотОбъект), 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда
		ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтаФорма, Результат);
	КонецЕсли;
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТекстКорреспондента.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьТекстКорреспондента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.FormBackColor);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.BorderColor);
	
КонецПроцедуры

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ЗаполнитьТекстКорреспондента()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НаименованиеСокращенное КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Ссылка
	|";
	Запрос.УстановитьПараметр("Ссылка", Объект.Владелец);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ТекстКорреспондента = СокрЛП(Выборка.Наименование);
	Иначе
		ТекстКорреспондента = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.БанкДляРасчетов) Или ЗначениеЗаполнено(Объект.БИКБанкаДляРасчетов) Тогда
		
		Если Объект.РучноеИзменениеРеквизитовБанка Тогда
			ТекстКорреспондента = ТекстКорреспондента
				+ " р/с " + СокрЛП(Объект.НомерСчета)
				+ " в " + Строка(Объект.НаименованиеБанка)
				+ " " + Объект.ГородБанка;
		Иначе
			ТекстКорреспондента = ТекстКорреспондента
				+ " р/с " + СокрЛП(Объект.НомерСчета)
				+ " в " + Строка(Объект.Банк);
			Если ЗначениеЗаполнено(Объект.Банк) Тогда
				ТекстКорреспондента = ТекстКорреспондента	
				+ " " + Объект.Банк.Город;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляПросмотра(Элемент, Заголовок)
	
	ФайлНаДиске = Новый Файл;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФайлДляПросмотраНачатьИнициализацию",
		ЭтотОбъект,
		Новый Структура("Элемент, Заголовок", Элемент, Заголовок));
		
	ФайлНаДиске.НачатьИнициализацию(ОписаниеОповещения, Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляПросмотраНачатьИнициализацию(Файл, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФайлДляПросмотраФайлСуществует",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляПросмотраФайлСуществует(Существует, ДополнительныеПараметры) Экспорт
	
	Если Не Существует Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Не найден файл!'"));
		Возврат;
	КонецЕсли;
	
	ПомещаемыеФайлы = Новый Массив;
	ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ДополнительныеПараметры.Элемент.ТекстРедактирования));
	ПомещениеФайловЗавершение = Новый ОписаниеОповещения("ОткрытьФайлДляПросмотраЗавершениеПомещения", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПомещениеФайлов(ПомещениеФайловЗавершение, ПомещаемыеФайлы,, Ложь, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляПросмотраЗавершениеПомещения(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы <> Неопределено
		И ПомещенныеФайлы.Количество() > 0 Тогда
		
		ОписаниеФайлов = ПомещенныеФайлы.Получить(0);
		АдресФайла     = ОписаниеФайлов.Хранение;
		
		Если АдресФайла = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Текст = ПолучитьТекстовыйДокументИзВременногоХранилищаФайла(АдресФайла, Объект.Кодировка);
		Текст.Показать(ДополнительныеПараметры.Заголовок, ДополнительныеПараметры.Элемент.ВыделенныйТекст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекстовыйДокументИзВременногоХранилищаФайла(АдресФайла, Кодировка)
	
	#Если ВебКлиент ИЛИ МобильныйКлиент Тогда
		Возврат "";
	#Иначе
		ИмяВременногоФайла  = ПолучитьИмяВременногоФайла("txt");
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
		ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
		Текст = Новый ТекстовыйДокумент();
		Если Кодировка = "DOS" Тогда
			Кодир = "cp866";
		Иначе
			Кодир = "windows-1251";
		КонецЕсли;
		
		Текст.Прочитать(ИмяВременногоФайла, Кодир);
		НачатьУдалениеФайлов(Новый ОписаниеОповещения("ПослеУдаленияФайлов", ЭтотОбъект), ИмяВременногоФайла);
		
		Возврат Текст;
	#КонецЕсли
	
КонецФункции

&НаКлиенте
Процедура ПослеУдаленияФайлов(ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайла(Элемент, Загрузка = Истина);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Элемент", Элемент);
	ДопПараметры.Вставить("Загрузка", Загрузка);
	
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(
		Новый ОписаниеОповещения("ВыборФайлаПродолжение", ЭтотОбъект, ДопПараметры),, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаПродолжение(РасширениеПодключено, ДополнительныеПараметры) Экспорт
	
	Если РасширениеПодключено Тогда
	
		Элемент = ДополнительныеПараметры.Элемент;
		Загрузка = ДополнительныеПараметры.Загрузка;
		
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.Фильтр = НСтр("ru='Текстовый файл (*.txt)|*.txt'");
		ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
		ДиалогВыбораФайла.Расширение = "txt";
		ДиалогВыбораФайла.ИндексФильтра = 0;
		ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Ложь;
		
		Если Загрузка Тогда
			ДиалогВыбораФайла.Заголовок = НСтр("ru='Выберите файл для загрузки данных из программы банка'");
			ДиалогВыбораФайла.ПолноеИмяФайла =
				?(ПустаяСтрока(Элемент.ТекстРедактирования), "kl_to_1c.txt", Элемент.ТекстРедактирования);
		Иначе
			ДиалогВыбораФайла.Заголовок = НСтр("ru='Выберите файл для выгрузки данных в программу банка'");
			НазваниеФайла = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
			ДиалогВыбораФайла.ПолноеИмяФайла =
				?(ПустаяСтрока(Элемент.ТекстРедактирования), НазваниеФайла + ".txt", Элемент.ТекстРедактирования);
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВыборФайлаЗавершение",
			ЭтотОбъект,
			Новый Структура("Загрузка", Загрузка));
		
		ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если ДополнительныеПараметры.Загрузка Тогда
		Объект.ФайлЗагрузки = ВыбранныеФайлы[0];
	Иначе
		Объект.ФайлВыгрузки = ВыбранныеФайлы[0];
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьРеквизитыБанкаПоБИК(ТипБанка, БИК = "", ПеренестиЗначенияРеквизитов = Ложь)
	
	НашлиПоБИК   = Ложь;
	ЗаписьОБанке = Неопределено;
	
	Если ТипБанка = "Банк" Тогда
		СтруктураРеквизитов = Новый Структура(РеквизитыБанка());
	Иначе
		СтруктураРеквизитов = Новый Структура(РеквизитыБанкаДляРасчетов());
	КонецЕсли;
	
	Для каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ЭтаФорма[КлючИЗначение.Ключ] = "";
	КонецЦикла;
	
	Если ЗначениеЗаполнено(БИК) Тогда
		
		РаботаСБанками.ПолучитьДанныеКлассификатора(БИК,, ЗаписьОБанке);
		
		Если ЗначениеЗаполнено(ЗаписьОБанке) Тогда
			ЗаполнитьРеквизитыБанкаПоБанку(ТипБанка, ЗаписьОБанке, ПеренестиЗначенияРеквизитов);
			Объект[ТипБанка] = ЗаписьОБанке;
			НашлиПоБИК = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НашлиПоБИК;
	
КонецФункции

&НаСервере
Функция ЗаполнитьРеквизитыБанкаПоБанку(ТипБанка, Банк = "", ПеренестиЗначенияРеквизитов = Ложь)
	
	Если ТипБанка = "Банк" Тогда
		
		СтруктураРеквизитов = Новый Структура;
		ИменаРеквизитов = СтрРазделить(РеквизитыБанка(), ",", Ложь);
		Для каждого ИмяРеквизита Из ИменаРеквизитов Цикл
			СтруктураРеквизитов.Вставить(ИмяРеквизита, СтрЗаменить(ИмяРеквизита, "Банка", ""));
		КонецЦикла;
		СтруктураРеквизитов.Вставить("БИКБанка", "Код");
		СтруктураРеквизитов.Вставить("СВИФТБанка", "СВИФТБИК");
		СтруктураРеквизитов.Вставить("НаименованиеБанкаМеждународное", "МеждународноеНаименование");
		
		РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Банк, СтруктураРеквизитов);
		
		Исключения = "";
		Если Не ЗначениеЗаполнено(РеквизитыБанка.НаименованиеБанкаМеждународное)
			Или ЗначениеЗаполнено(НаименованиеБанкаМеждународное) Тогда
			Исключения = "НаименованиеБанкаМеждународное";
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭтаФорма, РеквизитыБанка,, Исключения);
		
		Если ПеренестиЗначенияРеквизитов Тогда
			ЗаполнитьЗначенияСвойств(Объект, РеквизитыБанка);
			Объект.Банк = Неопределено;
		КонецЕсли;
		
	ИначеЕсли ТипБанка = "БанкДляРасчетов" Тогда
		
		СтруктураРеквизитов = Новый Структура;
		ИменаРеквизитов = СтрРазделить(РеквизитыБанкаДляРасчетов(), ",", Ложь);
		Для каждого ИмяРеквизита Из ИменаРеквизитов Цикл
			СтруктураРеквизитов.Вставить(ИмяРеквизита, СтрЗаменить(ИмяРеквизита, "БанкаДляРасчетов", ""));
		КонецЦикла;
		СтруктураРеквизитов.Вставить("БИКБанкаДляРасчетов", "Код");
		СтруктураРеквизитов.Вставить("СВИФТБанкаДляРасчетов", "СВИФТБИК");
		СтруктураРеквизитов.Вставить("НаименованиеБанкаДляРасчетовМеждународное", "МеждународноеНаименование");
		
		РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Банк, СтруктураРеквизитов);
		
		Исключения = "";
		Если Не ЗначениеЗаполнено(РеквизитыБанка.НаименованиеБанкаДляРасчетовМеждународное)
			Или ЗначениеЗаполнено(НаименованиеБанкаДляРасчетовМеждународное) Тогда
			Исключения = "НаименованиеБанкаДляРасчетовМеждународное";
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭтаФорма, РеквизитыБанка,, Исключения);
		
		Если ПеренестиЗначенияРеквизитов Тогда
			ЗаполнитьЗначенияСвойств(Объект, РеквизитыБанка);
			Объект.БанкДляРасчетов = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	СформироватьАвтоНаименование();
	
КонецФункции

&НаСервере
Процедура НомерСчетаПриИзмененииСервер()
	
	Валюта = ДенежныеСредстваСервер.ПолучитьВалютуПоНомеруСчета(Объект.НомерСчета);
	Если ЗначениеЗаполнено(Валюта) Тогда
		Объект.ВалютаДенежныхСредств = Валюта;
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	СформироватьАвтоНаименование();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	НастройкиПолейФормы = Справочники.БанковскиеСчетаОрганизаций.НастройкиПолейФормы();
	ЗначениеВРеквизитФормы(НастройкиПолейФормы, "НастройкиПолей");
	ЗависимостиПолейФормы = ДенежныеСредстваСервер.ЗависимостиПолейФормы(НастройкиПолейФормы);
	ЗначениеВРеквизитФормы(ЗависимостиПолейФормы, "ЗависимостиПолей");
	
	ИспользоватьНесколькоОрганизаций               = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	ИспользоватьНесколькоВалют                     = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	ИспользоватьВалютныеПлатежи                    = ПолучитьФункциональнуюОпцию("ИспользоватьВалютныеПлатежи");
	ИспользоватьОбменСБанками                      = ПолучитьФункциональнуюОпцию("ИспользоватьОбменСБанками");
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ВалютныйСчет = (ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств) И Объект.ВалютаДенежныхСредств <> ВалютаРеглУчета);
	ИностранныйБанк = ?(Объект.ИностранныйБанк, 1, 0);
	
	
	Если Объект.ИспользоватьПрямойОбменСБанком Тогда
		РежимОбмена = 1;
	ИначеЕсли Объект.ИспользоватьОбменСБанком Тогда
		РежимОбмена = 2;
	Иначе
		РежимОбмена = 0;
	КонецЕсли;
	
	СтрокаВключенОбменСБанком = ?(Объект.ОбменСБанкомВключен, НСтр("ru = 'включен'"), НСтр("ru = 'не включен'"));
	
	ЗаполнитьРеквизитыБанка();
	ОбновитьЭлементыФормыИСоглашениеЭД();
	СформироватьАвтоНаименование();
	ЗаполнитьСписокВыбораТипаСчета();
	ОбновитьНадписьТранзитныйСчет();
	
	ИспользоватьТекстКорреспондента = ЗначениеЗаполнено(Объект.ТекстКорреспондента);
	Если ИспользоватьТекстКорреспондента Тогда
		ТекстКорреспондента = Объект.ТекстКорреспондента;
	Иначе
		ЗаполнитьТекстКорреспондента();
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	УстановитьСтраницуСоглашенийЭД();
	
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	Если Объект.ИностранныйБанк Тогда
		Элементы.Переместить(Элементы.СВИФТБанка, Элементы.СВИФТБанка.Родитель, Элементы.БИКБанка);
	Иначе
		Элементы.Переместить(Элементы.БИКБанка, Элементы.БИКБанка.Родитель, Элементы.СВИФТБанка);
	КонецЕсли;
	
	Если ВалютныйСчет Тогда
		Элементы.Переместить(Элементы.СВИФТБанкаДляРасчетов, Элементы.СВИФТБанкаДляРасчетов.Родитель, Элементы.БИКБанкаДляРасчетов);
	Иначе
		Элементы.Переместить(Элементы.БИКБанкаДляРасчетов, Элементы.БИКБанкаДляРасчетов.Родитель, Элементы.СВИФТБанкаДляРасчетов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораТипаСчета()
	
	СписокВыбораТипаСчета = Элементы.ТипСчета.СписокВыбора;
	СписокВыбораТипаСчета.Очистить();
	СписокВыбораТипаСчета.Добавить(Перечисления.ТипыБанковскихСчетов.Расчетный);
	СписокВыбораТипаСчета.Добавить(Перечисления.ТипыБанковскихСчетов.Депозитный);
	Если ИспользоватьВалютныеПлатежи И ВалютныйСчет И Не Объект.ИностранныйБанк Тогда
		СписокВыбораТипаСчета.Добавить(Перечисления.ТипыБанковскихСчетов.Транзитный);
	КонецЕсли;
	СписокВыбораТипаСчета.Добавить(Перечисления.ТипыБанковскихСчетов.Прочий);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыБанка()
	
	НаименованиеБанкаМеждународное = Объект.НаименованиеБанкаМеждународное;
	НаименованиеБанкаДляРасчетовМеждународное = Объект.НаименованиеБанкаДляРасчетовМеждународное;
	
	Если Объект.РучноеИзменениеРеквизитовБанка Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Объект, РеквизитыБанка());
	Иначе
		Если Не Объект.Банк.Пустая() Тогда
			ЗаполнитьРеквизитыБанкаПоБанку("Банк", Объект.Банк, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ЗначениеЗаполнено(Объект.БанкДляРасчетов)
			Или ЗначениеЗаполнено(Объект.БИКБанкаДляРасчетов)
			Или ЗначениеЗаполнено(Объект.СВИФТБанкаДляРасчетов) Тогда
			ИспользуетсяБанкДляРасчетов = Истина;
		Иначе
			ИспользуетсяБанкДляРасчетов = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.РучноеИзменениеРеквизитовБанкаДляРасчетов Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Объект, РеквизитыБанкаДляРасчетов());
	Иначе
		Если Не Объект.БанкДляРасчетов.Пустая() Тогда
			ЗаполнитьРеквизитыБанкаПоБанку("БанкДляРасчетов", Объект.БанкДляРасчетов, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьАвтоНаименование()
	
	Элементы.Наименование.СписокВыбора.Очистить();
	
	Если Объект.РучноеИзменениеРеквизитовБанка Тогда
		
		СтрокаНаименования = Прав(СокрЛП(Объект.НомерСчета), 4) +
			?(ЗначениеЗаполнено(НаименованиеБанка), " в " + Строка(НаименованиеБанка), "") + ", " + СокрЛП(Объект.Владелец);
		СтрокаНаименования = Лев(СтрокаНаименования, 150);
		
		Если Объект.ТипСчета = Перечисления.ТипыБанковскихСчетов.Транзитный Тогда
			СтрокаНаименования = НСтр("ru = 'Транзитный'") + " " + СтрокаНаименования;
		КонецЕсли;
		Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
		
		СтрокаНаименования = ?(ЗначениеЗаполнено(НаименованиеБанка), Строка(НаименованиеБанка), "") +
			", " + СокрЛП(объект.Владелец) + " (" + Строка(Объект.ВалютаДенежныхСредств) + ")";
		СтрокаНаименования = Лев(СтрокаНаименования, 150);
		
		Если Объект.ТипСчета = Перечисления.ТипыБанковскихСчетов.Транзитный Тогда
			СтрокаНаименования = НСтр("ru = 'Транзитный'") + " " + СтрокаНаименования;
		КонецЕсли;
		Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	Иначе
		
		СтрокаНаименования = Прав(СокрЛП(Объект.НомерСчета), 4) +
			?(ЗначениеЗаполнено(Объект.Банк), " в " + Строка(Объект.Банк), "") + ", " + СокрЛП(Объект.Владелец);
		СтрокаНаименования = Лев(СтрокаНаименования, 150);
		
		Если Объект.ТипСчета = Перечисления.ТипыБанковскихСчетов.Транзитный Тогда
			СтрокаНаименования = НСтр("ru = 'Транзитный'") + " " + СтрокаНаименования;
		КонецЕсли;
		Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
		
		СтрокаНаименования = ?(ЗначениеЗаполнено(Объект.Банк), Строка(Объект.Банк), "") +
			", " + СокрЛП(объект.Владелец) + " (" + Строка(Объект.ВалютаДенежныхСредств) + ")";
		СтрокаНаименования = Лев(СтрокаНаименования, 150);
		
		Если Объект.ТипСчета = Перечисления.ТипыБанковскихСчетов.Транзитный Тогда
			СтрокаНаименования = НСтр("ru = 'Транзитный'") + " " + СтрокаНаименования;
		КонецЕсли;
		Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	КонецЕсли;
	
	Возврат СтрокаНаименования;
	
КонецФункции

&НаКлиенте
Процедура УстановитьПараметрыРедактированияРеквизитов()
	
	Если Объект.ИностранныйБанк Тогда
		Объект.РучноеИзменениеРеквизитовБанка = Истина;
		Объект.РучноеИзменениеРеквизитовБанкаДляРасчетов = ВалютныйСчет;
	Иначе
		Объект.РучноеИзменениеРеквизитовБанкаДляРасчетов = ВалютныйСчет;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитБанкаОткрытие(ИмяЭлемента)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Реквизит", ИмяЭлемента);
	
	ЗначенияПолей = Новый Структура;
	
	Если ИмяЭлемента = "БИКБанка" Тогда
		
		СтруктураПараметров.Вставить("РучноеИзменение", Объект.РучноеИзменениеРеквизитовБанка);
		
		Если Объект.РучноеИзменениеРеквизитовБанка Тогда
			
			СтруктураРеквизитов = Новый Структура(РеквизитыБанка());
			ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, ЭтаФорма);
			
			ЗначенияПолей = Новый Структура;
			Для каждого КлючИЗначение Из СтруктураРеквизитов Цикл
				ЗначенияПолей.Вставить(СтрЗаменить(КлючИЗначение.Ключ, "Банка", ""), КлючИЗначение.Значение);
			КонецЦикла;
		Иначе
			СтруктураПараметров.Вставить("Банк", Объект.Банк);
		КонецЕсли;
		
	ИначеЕсли ИмяЭлемента = "БИКБанкаДляРасчетов" Тогда
		
		СтруктураПараметров.Вставить("РучноеИзменение", Объект.РучноеИзменениеРеквизитовБанкаДляРасчетов);
		
		Если Объект.РучноеИзменениеРеквизитовБанка Тогда
			
			СтруктураРеквизитов = Новый Структура(РеквизитыБанкаДляРасчетов());
			ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, ЭтаФорма);
			
			ЗначенияПолей = Новый Структура;
			Для каждого КлючИЗначение Из СтруктураРеквизитов Цикл
				ЗначенияПолей.Вставить(СтрЗаменить(КлючИЗначение.Ключ, "БанкаДляРасчетов", ""), КлючИЗначение.Значение);
			КонецЦикла;
		Иначе
			СтруктураПараметров.Вставить("Банк", Объект.БанкДляРасчетов);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ЗначенияПолей", ЗначенияПолей);
	ОткрытьФорму("Справочник.БанковскиеСчетаОрганизаций.Форма.РеквизитыБанка", СтруктураПараметров, ЭтаФорма,,,,
		Новый ОписаниеОповещения("ОбработкаРедактированияРеквизитовБанка", ЭтотОбъект, ИмяЭлемента));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРедактированияРеквизитовБанка(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат <> Неопределено Тогда
		
		Если ДополнительныеПараметры = "БИКБанка" Тогда
			
			Объект.РучноеИзменениеРеквизитовБанка = Результат.РучноеИзменение;
			Если Результат.РучноеИзменение Тогда
				
				Объект.Банк = Неопределено;
				
				Для каждого КлючИЗначение Из Новый Структура(РеквизитыБанка()) Цикл
					Результат.ЗначенияПолей.Свойство(СтрЗаменить(КлючИЗначение.Ключ, "Банка", ""), Объект[КлючИЗначение.Ключ]);
					Результат.ЗначенияПолей.Свойство(СтрЗаменить(КлючИЗначение.Ключ, "Банка", ""), ЭтаФорма[КлючИЗначение.Ключ]);
					Результат.ЗначенияПолей.Свойство("СВИФТБИК", Объект.СВИФТБанка);
					Результат.ЗначенияПолей.Свойство("СВИФТБИК", СВИФТБанка);
				КонецЦикла;
			Иначе
				Объект.Банк = Результат.Банк;
				Для каждого КлючИЗначение Из Новый Структура(РеквизитыБанка()) Цикл
					Объект[КлючИЗначение.Ключ] = "";
				КонецЦикла;
				ЗаполнитьРеквизитыБанкаПоБанку("Банк", Объект.Банк, Ложь);
			КонецЕсли;
			
		ИначеЕсли ДополнительныеПараметры = "БИКБанкаДляРасчетов" Тогда
			
			Объект.РучноеИзменениеРеквизитовБанкаДляРасчетов = Результат.РучноеИзменение;
			Если Результат.РучноеИзменение Тогда
				
				Объект.БанкДляРасчетов = Неопределено;
				
				Для каждого КлючИЗначение Из Новый Структура(РеквизитыБанкаДляРасчетов()) Цикл
					Результат.ЗначенияПолей.Свойство(СтрЗаменить(КлючИЗначение.Ключ, "БанкаДляРасчетов", ""), Объект[КлючИЗначение.Ключ]);
					Результат.ЗначенияПолей.Свойство(СтрЗаменить(КлючИЗначение.Ключ, "БанкаДляРасчетов", ""), ЭтаФорма[КлючИЗначение.Ключ]);
					Результат.ЗначенияПолей.Свойство("СВИФТБИК", Объект.СВИФТБанкаДляРасчетов);
					Результат.ЗначенияПолей.Свойство("СВИФТБИК", СВИФТБанкаДляРасчетов);
				КонецЦикла;
			Иначе
				Объект.БанкДляРасчетов = Результат.Банк;
				Для каждого КлючИЗначение Из Новый Структура(РеквизитыБанкаДляРасчетов()) Цикл
					Объект[КлючИЗначение.Ключ] = "";
				КонецЦикла;
				ЗаполнитьРеквизитыБанкаПоБанку("БанкДляРасчетов", Объект.БанкДляРасчетов, Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитБанкаПриИзменении(ИмяЭлемента)
	
	Если ИмяЭлемента = "БИКБанка" Тогда
		Если Не Объект.РучноеИзменениеРеквизитовБанка И Не Объект.ИностранныйБанк Тогда
			Если Не ЗаполнитьРеквизитыБанкаПоБИК("Банк", БИКБанка, Истина) И ЗначениеЗаполнено(БИКБанка) Тогда
				
				СписокВариантовОтветовНаВопрос = Новый СписокЗначений;
				СписокВариантовОтветовНаВопрос.Добавить("ВыбратьИзСписка",  НСтр("ru = 'Выбрать из списка'"));
				СписокВариантовОтветовНаВопрос.Добавить("ПродолжитьВвод",   НСтр("ru = 'Продолжить ввод'"));
				СписокВариантовОтветовНаВопрос.Добавить("ОтменитьВвод",     НСтр("ru = 'Отменить ввод'"));
				
				ТекстВопроса = НСтр("ru = 'Банк с БИК  %Значение% не найден в классификаторе банков.'");
				ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Значение%", БИКБанка);
				
				Ответ = Неопределено;
				
				ПоказатьВопрос(
					Новый ОписаниеОповещения("РеквизитБанкаПриИзмененииПослеВопроса",
					ЭтотОбъект,
					Новый Структура("ИмяЭлемента, СписокВариантовОтветовНаВопрос, ТекстВопроса",
						ИмяЭлемента, СписокВариантовОтветовНаВопрос, ТекстВопроса)),
					ТекстВопроса,
					СписокВариантовОтветовНаВопрос,
					0,,
					НСтр("ru = 'Выбор банка из классификатора'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяЭлемента = "БИКБанкаДляРасчетов" Тогда
		Если Не Объект.РучноеИзменениеРеквизитовБанкаДляРасчетов И Не ВалютныйСчет Тогда
			Если Не ЗаполнитьРеквизитыБанкаПоБИК("БанкДляРасчетов", БИКБанкаДляРасчетов, Истина)
				И ЗначениеЗаполнено(БИКБанкаДляРасчетов) Тогда
				
				СписокВариантовОтветовНаВопрос = Новый СписокЗначений;
				СписокВариантовОтветовНаВопрос.Добавить("ВыбратьИзСписка", НСтр("ru = 'Выбрать из списка'"));
				СписокВариантовОтветовНаВопрос.Добавить("ПродолжитьВвод",  НСтр("ru = 'Продолжить ввод'"));
				СписокВариантовОтветовНаВопрос.Добавить("ОтменитьВвод",    НСтр("ru = 'Отменить ввод'"));
				
				ТекстВопроса = НСтр("ru = 'Банк с БИК  %Значение% не найден в классификаторе банков.'");
				ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Значение%", БИКБанкаДляРасчетов);
				
				ПоказатьВопрос(
					Новый ОписаниеОповещения("РеквизитБанкаПриИзмененииЗавершение", ЭтотОбъект),
					ТекстВопроса,
					СписокВариантовОтветовНаВопрос,
					0,,
					НСтр("ru = 'Выбор банка-корреспондента из классификатора'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	БанкПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитБанкаПриИзмененииПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ИмяЭлемента = ДополнительныеПараметры.ИмяЭлемента;
	СписокВариантовОтветовНаВопрос = ДополнительныеПараметры.СписокВариантовОтветовНаВопрос;
	ТекстВопроса = ДополнительныеПараметры.ТекстВопроса;
	
	Ответ = РезультатВопроса;
	
	Если Ответ = "ОтменитьВвод" Тогда
		БИКБанка = "";
	ИначеЕсли Ответ = "ПродолжитьВвод" Тогда
		Объект.РучноеИзменениеРеквизитовБанка = Истина;
		Объект.БИКБанка = БИКБанка;
	ИначеЕсли Ответ = "ВыбратьИзСписка" Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Реквизит", "БИКБанка");
		ОткрытьФорму("Справочник.КлассификаторБанков.Форма.ФормаВыбора", СтруктураПараметров, ЭтаФорма,,,,
			Новый ОписаниеОповещения("ОбработкаВыбораБанкаИзКлассификатора", ЭтотОбъект, "БИКБанка"));
	КонецЕсли;
	
	ОбновитьЭлементыФормыИСоглашениеЭД();
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитБанкаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = "ОтменитьВвод" Тогда
		БИКБанкаДляРасчетов = "";
	ИначеЕсли Ответ = "ПродолжитьВвод" Тогда
		Объект.РучноеИзменениеРеквизитовБанкаДляРасчетов = Истина;
		Объект.БИКБанкаДляРасчетов = БИКБанкаДляРасчетов;
	ИначеЕсли Ответ = "ВыбратьИзСписка" Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Реквизит", "БИКБанкаДляРасчетов");
		ОткрытьФорму("Справочник.КлассификаторБанков.Форма.ФормаВыбора", СтруктураПараметров, ЭтаФорма,,,,
			Новый ОписаниеОповещения("ОбработкаВыбораБанкаИзКлассификатора", ЭтотОбъект, "БИКБанкаДляРасчетов"));
	КонецЕсли;
	
	ОбновитьЭлементыФормыИСоглашениеЭД();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораБанкаИзКлассификатора(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если ДополнительныеПараметры = "БИКБанка" Тогда
			Для каждого КлючИЗначение Из Новый Структура(РеквизитыБанка()) Цикл
				Объект[КлючИЗначение.Ключ] = "";
			КонецЦикла;
			Объект.Банк = Результат;
			ЗаполнитьРеквизитыБанкаПоБанку("Банк", Результат, Ложь);
		Иначе
			Для каждого КлючИЗначение Из Новый Структура(РеквизитыБанкаДляРасчетов()) Цикл
				Объект[КлючИЗначение.Ключ] = "";
			КонецЦикла;
			Объект.БанкДляРасчетов = Результат;
			ЗаполнитьРеквизитыБанкаПоБанку("БанкДляРасчетов", Результат, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыФормыИСоглашениеЭД();
	
	ЗаполнитьСоглашениеЭД();
	УстановитьСтраницуСоглашенийЭД();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоглашениеЭД()
	
	СоглашениеЭД = Неопределено;
	
	Если ЗначениеЗаполнено(Объект.Владелец) И ЗначениеЗаполнено(Объект.Банк)
		И ПравоДоступа("Чтение", Метаданные.Справочники.НастройкиОбменСБанками) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Соглашения.Ссылка КАК СоглашениеЭД,
		|	Соглашения.Недействительна КАК Статус
		|ИЗ
		|	Справочник.НастройкиОбменСБанками КАК Соглашения
		|ГДЕ
		|	Соглашения.Организация = &Организация
		|	И Соглашения.Банк = &Банк";
		
		Запрос.УстановитьПараметр("Организация", Объект.Владелец);
		Запрос.УстановитьПараметр("Банк", Объект.Банк);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СоглашениеЭД = Выборка.СоглашениеЭД;
			Если Выборка.Статус Тогда
				СтатусСоглашенияЭД = НСтр("ru='Не действует'");
			Иначе
				СтатусСоглашенияЭД = НСтр("ru='Действует'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДиректБанкНастроен = ЗначениеЗаполнено(СоглашениеЭД);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтраницуСоглашенийЭД()
	
	Если Не Объект.ИспользоватьПрямойОбменСБанком Тогда
		
		Элементы.ГруппаСоглашениеЭД.ТекущаяСтраница = Элементы.СтраницаЕстьСоглашениеЭД;
		Элементы.ДекорацияСоглашениеЭД.Заголовок = "";
		Элементы.ДекорацияСоглашениеЭД.Гиперссылка = Ложь;
		
	ИначеЕсли ЗначениеЗаполнено(СоглашениеЭД) Тогда
		
		Элементы.ГруппаСоглашениеЭД.ТекущаяСтраница = Элементы.СтраницаЕстьСоглашениеЭД;
		Элементы.ДекорацияСоглашениеЭД.Заголовок = СтрШаблон(НСтр("ru='%1, (%2)'"), СоглашениеЭД, СтатусСоглашенияЭД);
		Элементы.ДекорацияСоглашениеЭД.Гиперссылка = Истина;
		
	ИначеЕсли ПравоДоступа("Добавление", Метаданные.Справочники.НастройкиОбменСБанками) Тогда
		
		Элементы.ГруппаСоглашениеЭД.ТекущаяСтраница = Элементы.СтраницаНетСоглашенияЭДДобавление;
	Иначе
		
		Элементы.ГруппаСоглашениеЭД.ТекущаяСтраница = Элементы.СтраницаНетСоглашенияЭДНетПрав;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьТранзитныйСчет()
	
	ТранзитныйСчет = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеСправочника.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК ДанныеСправочника
	|ГДЕ
	|	ДанныеСправочника.ОсновнойБанковскийСчет = &Ссылка
	|	И ДанныеСправочника.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыБанковскихСчетов.Транзитный)
	|";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ТранзитныйСчет = Выборка.Ссылка;
	КонецЕсли;
	
	ТранзитныйСчетЗадан = ЗначениеЗаполнено(ТранзитныйСчет);
	НастроитьЗависимыеЭлементыФормыНаСервере("ТранзитныйСчетЗадан");
	
КонецПроцедуры


&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиДубльБанковскогоСчета(Ссылка, НомерСчета, Организация, Валюта, Банк)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	БанковскиеСчета.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	|ГДЕ
	|	НЕ БанковскиеСчета.ПометкаУдаления
	|	И БанковскиеСчета.Ссылка <> &Ссылка
	|	И БанковскиеСчета.НомерСчета = &НомерСчета
	|	И БанковскиеСчета.Владелец = &Организация
	|	И БанковскиеСчета.ВалютаДенежныхСредств = &Валюта
	|	И БанковскиеСчета.Банк = &Банк
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("Банк", Банк);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура БанкПриИзменении()
	
	Объект.ФайлВыгрузки = Справочники.БанковскиеСчетаОрганизаций.ФайлВыгрузкиПоУмолчанию(Объект.Банк);
	Объект.ФайлЗагрузки = Справочники.БанковскиеСчетаОрганизаций.ФайлЗагрузкиПоУмолчанию(Объект.Банк);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РеквизитыБанка()
	
	Возврат "БИКБанка, СВИФТБанка, НаименованиеБанка, НаименованиеБанкаМеждународное, КоррСчетБанка, СтранаБанка,
		|ГородБанка, ГородБанкаМеждународный, АдресБанка, АдресБанкаМеждународный, ТелефоныБанка";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РеквизитыБанкаДляРасчетов()
	
	Возврат "БИКБанкаДляРасчетов, СВИФТБанкаДляРасчетов, НаименованиеБанкаДляРасчетов, НаименованиеБанкаДляРасчетовМеждународное,
		|КоррСчетБанкаДляРасчетов, СтранаБанкаДляРасчетов, ГородБанкаДляРасчетов, ГородБанкаДляРасчетовМеждународный,
		|АдресБанкаДляРасчетов, АдресБанкаДляРасчетовМеждународный, ТелефоныБанкаДляРасчетов";
	
КонецФункции

&НаКлиенте
Процедура НастроитьЗависимыеЭлементыФормы(ИзмененныйРеквизит = "")
	
	ДенежныеСредстваКлиентСервер.НастроитьЭлементыФормы(ЭтаФорма, ИзмененныйРеквизит, РеквизитыФормы(ЭтаФорма));
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЗависимыеЭлементыФормыНаСервере(ИзмененныйРеквизит = "")
	
	ДенежныеСредстваКлиентСервер.НастроитьЭлементыФормы(ЭтаФорма, ИзмененныйРеквизит, РеквизитыФормы(ЭтаФорма));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РеквизитыФормы(Форма)
	
	РеквизитыФормы = Новый Структура;
	РеквизитыФормы.Вставить("ПоддержкаПлатежей275ФЗ");
	РеквизитыФормы.Вставить("ИспользоватьОбменСБанками");
	РеквизитыФормы.Вставить("ИспользоватьВалютныеПлатежи");
	РеквизитыФормы.Вставить("ИспользоватьНесколькоВалют");
	РеквизитыФормы.Вставить("ИспользоватьНесколькоОрганизаций");
	РеквизитыФормы.Вставить("ИспользоватьТекстКорреспондента");
	РеквизитыФормы.Вставить("ИспользуетсяБанкДляРасчетов");
	РеквизитыФормы.Вставить("ДиректБанкНастроен");
	РеквизитыФормы.Вставить("ВалютныйСчет");
	РеквизитыФормы.Вставить("ТранзитныйСчетЗадан");
	
	ЗаполнитьЗначенияСвойств(РеквизитыФормы, Форма);
	
	Возврат РеквизитыФормы;
	
КонецФункции

#КонецОбласти

#КонецОбласти
