#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	УправлениеДоступом.ПриСозданииФормыЗначенияДоступа(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// ЭлектронноеВзаимодействие.ТорговыеПредложения
	ТорговыеПредложения.ПриСозданииПодсказокФормы(ЭтотОбъект, Элементы.ПодсказкиБизнесСеть);
	// Конец ЭлектронноеВзаимодействие.ТорговыеПредложения
	
	// ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов
	СопоставлениеНоменклатурыКонтрагентов.ПриСозданииФормыНоменклатуры(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов
	
	ИспользоватьТоварныеКатегории = ПолучитьФункциональнуюОпцию("ИспользоватьТоварныеКатегории");
	ИспользоватьДополнительныеРеквизитыИСведения = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	ИспользоватьСервисРаботаСНоменклатурой = ПолучитьФункциональнуюОпцию("ИспользоватьСервисРаботаСНоменклатурой");

	ПараметрыДополнительныхСвойств = Новый Структура;
	ПараметрыДополнительныхСвойств.Вставить("Объект", Объект);
	ПараметрыДополнительныхСвойств.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ПараметрыДополнительныхСвойств.Вставить("СкрытьУдаленные", Ложь);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ПараметрыДополнительныхСвойств);
	
	Элементы.ВидНоменклатурыШаблонЦенникаНеУказан.Заголовок = НСтр("ru = '<не указан>'");
	Элементы.ВидНоменклатурыШаблонЭтикеткиНеУказан.Заголовок = НСтр("ru = '<не указан>'");
	
	ЗаголовокГруппыКартинкаОписание = НСтр("ru = 'Описание'");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЕстьПравоРедактирования = Справочники.ГруппыДоступаНоменклатуры.ЕстьПравоИзменения(Объект);
		
		// Установим доступность
		// ... формы в целом 
		ЭтаФорма.ТолькоПросмотр = Не ЕстьПравоРедактирования;
		
		// ... полей шаблонов этикетки и ценника
		Элементы.ИспользоватьИндивидуальныйШаблонЦенника.ТолькоПросмотр   = Не ПравоДоступа("Редактирование", Метаданные.Справочники.Номенклатура.Реквизиты.ИспользоватьИндивидуальныйШаблонЦенника);
		Элементы.ИспользоватьИндивидуальныйШаблонЭтикетки.ТолькоПросмотр = Не ПравоДоступа("Редактирование", Метаданные.Справочники.Номенклатура.Реквизиты.ИспользоватьИндивидуальныйШаблонЭтикетки);
		
		// ... поля картинки и кнопок его панели
		ЕстьПравоРедактированияКартинки    = ПравоДоступа("Редактирование", Метаданные.Справочники.Номенклатура.Реквизиты.ФайлКартинки);
		Элементы.ФайлКартинки.Доступность = ЕстьПравоРедактированияКартинки;
		Элементы.ДобавитьИзображение.Доступность = ЕстьПравоРедактированияКартинки;
		Элементы.ИзменитьИзображение.Доступность = ЕстьПравоРедактированияКартинки;
		Элементы.ОчиститьИзображение.Доступность = ЕстьПравоРедактированияКартинки;
		Элементы.ВыбратьКартинкуИзПрисоединенныхФайлов.Видимость = ЕстьПравоРедактированияКартинки;
		
		// ... поля описание для сайта и кнопки его выбора
		ЕстьПравоРедактированияОписания = ПравоДоступа("Редактирование", Метаданные.Справочники.Номенклатура.Реквизиты.ФайлОписанияДляСайта);
		Элементы.ФайлОписанияДляСайта.ТолькоПросмотр = Не ЕстьПравоРедактированияОписания;
		
		ОбновитьЭлементыДополнительныхРеквизитов(Ложь);
		ОбновитьНастройкиРеквизитов();
	Иначе
		ЕстьПравоРедактирования = Истина;
		ЗаполнитьПоПараметрам();
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РежимПредставленияОбъектаСервиса", "Гиперссылка");
	РаботаСНоменклатурой.ПриСозданииНаСервереФормаНоменклатуры(ЭтотОбъект, Объект.Ссылка, Элементы.ГруппаРаботаСНоменклатурой, ДополнительныеПараметры);
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
	Если Не ЕстьПравоРедактирования Тогда
		Элементы.СтраницыКарточкаНоменклатуры.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.СтраницаРеквизитыНоменклатуры.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("РежимВыбора") И Параметры.РежимВыбора Тогда
		ДляВыбора = Истина;
	КонецЕсли;
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовНоменклатуры") Тогда
		МассивВидов = Справочники.ВидыНоменклатуры.ПолучитьПредустановленныеВидыНоменклатуры();
		Элементы.ВидНоменклатурыПереключатель.СписокВыбора.ЗагрузитьЗначения(МассивВидов);
		Элементы.ВидНоменклатурыПереключательОбязательныеПоля.СписокВыбора.ЗагрузитьЗначения(МассивВидов);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		// Режим копирования
		Элементы.СтраницыКарточкаНоменклатуры.ТекущаяСтраница = Элементы.СтраницаРеквизитыНоменклатуры;
		НастройкаВидимостиФормы = "ПоказатьВсе";
		РежимВидимостиПоказатьТолькоВажные = Ложь;
		
		СкрытьРаскрытьВсеГруппы(Ложь);
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
		// Режим редактирования
		Элементы.СтраницыКарточкаНоменклатуры.ТекущаяСтраница = Элементы.СтраницаКарточкаНоменклатуры;
		НастройкаВидимостиФормы = "СвернутьВсеГруппы";
		РежимВидимостиПоказатьТолькоВажные = Ложь;
		
		СкрытьРаскрытьВсеГруппы(Истина);
		Элементы.ГруппаГруппировкаЛевоПраво.Видимость=Ложь;
		
		Элементы.НастройкаВидимостиФормы.СписокВыбора.Удалить(0);
	Иначе	
		// Режим создания
		Элементы.СтраницыКарточкаНоменклатуры.ТекущаяСтраница = Элементы.СтраницаРеквизитыНоменклатуры;
		НастройкаВидимостиФормы = "ПоказатьОсновные";
		РежимВидимостиПоказатьТолькоВажные = Истина;
		
		СкрытьРаскрытьВсеГруппы(Ложь);
	КонецЕсли;
	
	КоэффициентПересчетаВКубическиеМетры = 
		НоменклатураСервер.КоэффициентПересчетаВКубическиеМетры(Константы.ЕдиницаИзмеренияОбъема.Получить());
		
	Элементы.ВидНоменклатурыШаблонЦенникаНеУказан.Заголовок = НСтр("ru = '<не указан>'");
	Элементы.ВидНоменклатурыШаблонЭтикеткиНеУказан.Заголовок = НСтр("ru = '<не указан>'");
	
	ЗаголовокГруппыКартинкаОписание = НСтр("ru = 'Описание'");
	
	// Запрет редактирования
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НастроитьВидимостьСворачиваемойГруппы("ДополнительныеРеквизиты");
		НастроитьДоступностьБлокируемыхРеквизитов();
	Иначе
		ПриСозданииЧтенииНаСервере();
		НастроитьФормуИОбновитьКарточку();
	КонецЕсли;
	
	ПоказатьСоветПереходКРедактированию = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить("Справочник.Номенклатура.Форма.ФормаЭлемента",
																								"ПоказатьСоветПереходКРедактированию",
																								Истина);
		
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ВидНоменклатурыДоИзменения = Объект.ВидНоменклатуры;
	
	ПриСозданииЧтенииНаСервере();
	
	НастроитьФормуИОбновитьКарточку();
	
	НастроитьДоступностьБлокируемыхРеквизитов();
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	РаботаСНоменклатурой.ПерезаполнитьВстроенныеРеквизиты(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ОбновитьКешРеквизитовВидаНоменклатуры();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ВариантКомплектацииНоменклатуры = НаборыВызовСервера.ВариантКомплектацииНоменклатурыПоУмолчанию(
											Объект.Ссылка,
											Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		
		ОбновитьАдресКартинки(Ложь);
		
		Если Не Объект.ФайлОписанияДляСайта.Пустая() Тогда
			ПутьКФайлуОписанию = Строка(Объект.ФайлОписанияДляСайта);
		КонецЕсли;
		
	КонецЕсли;
	
	ПреобразоватьМожноУказыватьВДокументахВСтроку("Вес");
	ПреобразоватьМожноУказыватьВДокументахВСтроку("Объем");
	ПреобразоватьМожноУказыватьВДокументахВСтроку("Площадь");
	ПреобразоватьМожноУказыватьВДокументахВСтроку("Длина");
	
	Если Объект.ИспользоватьИндивидуальныйШаблонЦенника Тогда 
		ИспользоватьИндивидуальныйШаблонЦенника = 1;
	КонецЕсли;
	
	Если Объект.ИспользоватьИндивидуальныйШаблонЭтикетки Тогда 
		ИспользоватьИндивидуальныйШаблонЭтикетки = 1;
	КонецЕсли;
	
	Если Объект.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда
		ИспользованиеУпаковок = "ИндивидуальныйНабор";
	Иначе
		ИспользованиеУпаковок = "ОбщийНабор";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЕстьПравоРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ТорговыеПредложения
	ТорговыеПредложенияКлиент.ОбновитьПодсказкуФормы(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ТорговыеПредложения
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не НастройкиКопированияЗаданы
		Или Не КонтрольУникальностиПередЗаписьюПроведен Тогда
		
		ПроверитьЗаполнениеОбязательныхРеквизитов(Отказ);
		
		Если Не Отказ Тогда
			// Контроль уникальности вызываем всегда, т.к. нужно обязательно проверить уникальность рабочего наименования.
			АдресВременногоХранилищаТаблицаНайдено = ПроверитьУникальностьСформироватьНаименования(Истина, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Если НастройкаВидимостиФормы = "СвернутьВсеГруппы" Тогда
			НастройкаВидимостиФормы = "ПоказатьВсе";
		КонецЕсли;
		
		СкрытьРаскрытьВсеГруппы(Ложь);
	КонецЕсли;
	
	Если Не Отказ
		И (ЕстьИндивидуальныеУпаковкиВОбъектеКопирования 
			Или ЕстьИндивидуальныеХарактеристикиВОбъектеКопирования
			Или ЕстьСвязьСКлассификаторомПродукцииВЕТИСВОбъектеКопирования
			Или ЕстьСвязьСКлассификаторомАлкогольнойПродукцииЕГАИСВОбъектеКопирования)
		И Не НастройкиКопированияЗаданы Тогда
		
		Отказ = Истина;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ИсточникКопирования", ИсточникКопирования);
		ПараметрыФормы.Вставить("ЕстьИндивидуальныеУпаковкиВОбъектеКопирования",
								ЕстьИндивидуальныеУпаковкиВОбъектеКопирования);
		ПараметрыФормы.Вставить("ЕстьИндивидуальныеХарактеристикиВОбъектеКопирования",
								ЕстьИндивидуальныеХарактеристикиВОбъектеКопирования);
		ПараметрыФормы.Вставить("ЕстьСвязьСКлассификаторомПродукцииВЕТИСВОбъектеКопирования",
								ЕстьСвязьСКлассификаторомПродукцииВЕТИСВОбъектеКопирования);
		ПараметрыФормы.Вставить("ЕстьСвязьСКлассификаторомАлкогольнойПродукцииЕГАИСВОбъектеКопирования",
								ЕстьСвязьСКлассификаторомАлкогольнойПродукцииЕГАИСВОбъектеКопирования);
		
		ОткрытьФорму("Справочник.Номенклатура.Форма.НастройкиКопированияИндивидуальныхУпаковокХарактеристик",
					ПараметрыФормы,ЭтаФорма,
					,
					,
					,
					Новый ОписаниеОповещения("КопироватьИндивидуальныеУпаковкиХарактеристикиЗавершение",
					ЭтаФорма),
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресВременногоХранилищаТаблицаНайдено) Тогда
		Отказ = Истина;
		
		ПараметрыФормы = Новый Структура("АдресВременногоХранилищаТаблицаНайдено, ЭтоЗапись",
										АдресВременногоХранилищаТаблицаНайдено, Истина);
		ОткрытьФорму("Справочник.Номенклатура.Форма.КонтрольУникальности",
					ПараметрыФормы,ЭтаФорма,
					,
					,
					,
					Новый ОписаниеОповещения("ПроверитьУникальностьЗавершение",ЭтаФорма),
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОписаниеОповещенияОЗакрытии <> Неопределено Тогда
		Если ТипЗнч(ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры) = Тип("Структура") Тогда
			ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры.Вставить("НоменклатураСсылка", Объект.Ссылка);
		КонецЕсли;
	КонецЕсли; 
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	РаботаСНоменклатуройКлиент.ПередЗакрытиемФормыНоменклатуры(ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНоваяНоменклатура", Не ЗначениеЗаполнено(Объект.Ссылка));
	
	ТекущийОбъект.ИспользоватьИндивидуальныйШаблонЭтикетки = Булево(ИспользоватьИндивидуальныйШаблонЭтикетки);
	ТекущийОбъект.ИспользоватьИндивидуальныйШаблонЦенника  = Булево(ИспользоватьИндивидуальныйШаблонЦенника);
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("НаименованиеДляПечатиСформировано");
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочееНаименованиеСформировано");
	ТекущийОбъект.ДополнительныеСвойства.Вставить("СменаВидаНоменклатурыОтработана");
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочееНаименованиеПроверено", Истина);
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	РаботаСНоменклатурой.ПриЗаписиНаСервереФормаНоменклатуры(ЭтотОбъект, ТекущийОбъект, Отказ);
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Если ЗначениеЗаполнено(ДанныеФайлаHTML) Или ЗначениеЗаполнено(ДанныеФайлаКартинки) Тогда
		
		Если ЗначениеЗаполнено(ДанныеФайлаКартинки) Тогда
			
			ПараметрыФайлаКартинки = РаботаСФайлами.ПараметрыДобавленияФайла();
			ПараметрыФайлаКартинки.Автор				= Пользователи.АвторизованныйПользователь();
			ПараметрыФайлаКартинки.ВладелецФайлов		= ТекущийОбъект.Ссылка;
			ПараметрыФайлаКартинки.ИмяБезРасширения		= ДанныеФайлаКартинки.ИмяБезРасширения;
			ПараметрыФайлаКартинки.РасширениеБезТочки	= ДанныеФайлаКартинки.Расширение;
			
			ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайлаКартинки, АдресКартинки);
			
			ТекущийОбъект.ФайлКартинки = ПрисоединенныйФайл;
			
			ДанныеФайлаКартинки = Неопределено;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеФайлаHTML) Тогда
			
			ПараметрыФайлаHTML = РаботаСФайлами.ПараметрыДобавленияФайла();
			ПараметрыФайлаHTML.Автор				= Пользователи.АвторизованныйПользователь();
			ПараметрыФайлаHTML.ВладелецФайлов		= ТекущийОбъект.Ссылка;
			ПараметрыФайлаHTML.ИмяБезРасширения		= ДанныеФайлаHTML.ИмяБезРасширения;
			ПараметрыФайлаHTML.РасширениеБезТочки	= ДанныеФайлаHTML.Расширение;
			
			ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайлаHTML, АдресОписанияHTML);
			
			ТекущийОбъект.ФайлОписанияДляСайта = ПрисоединенныйФайл;
			
			ДанныеФайлаHTML = Неопределено;
			
		КонецЕсли;
		
		ТекущийОбъект.Записать();
		
		Прочитать();
		
	КонецЕсли;
	
	Если КопироватьИндивидуальныеУпаковки Тогда
		Справочники.УпаковкиЕдиницыИзмерения.СкопироватьИерархиюУпаковок(ИсточникКопирования, Объект.Ссылка);
		КопироватьИндивидуальныеУпаковки = Ложь;
	КонецЕсли;
	
	УстановитьСвязьСХарактеристикамиПродукцииВЕТИС = КопироватьИндивидуальныеХарактеристики
															И КопироватьСвязьСКлассификаторомПродукцииВЕТИС;
	УстановитьСвязьСХарактеристикамиАлкогольнойПродукции = КопироватьИндивидуальныеХарактеристики
															И КопироватьСвязьСКлассификаторомАлкогольнойПродукцииЕГАИС;
	
	СоответствиеСоздаваемыхОбъектов = Новый Соответствие;
	
	Если КопироватьИндивидуальныеХарактеристики Тогда
		КопироватьИндивидуальныеХарактеристики = Ложь;
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка,
		|	ХарактеристикиНоменклатуры.Наименование,
		|	ХарактеристикиНоменклатуры.НаименованиеПолное,
		|	ХарактеристикиНоменклатуры.ДополнительныеРеквизиты.(
		|		Ссылка,
		|		НомерСтроки,
		|		Свойство,
		|		Значение,
		|		ТекстоваяСтрока
		|	)
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Владелец = &Владелец
		|	И (Не ХарактеристикиНоменклатуры.ПометкаУдаления)";
		
		Запрос.УстановитьПараметр("Владелец", ИсточникКопирования);
		
		ВыборкаХарактеристик = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаХарактеристик.Следующий() Цикл
			
			ХарактеристикаОбъект = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
			
			ХарактеристикаОбъект.Наименование       = ВыборкаХарактеристик.Наименование;
			ХарактеристикаОбъект.НаименованиеПолное = ВыборкаХарактеристик.НаименованиеПолное;
			
			ВыборкаДопРеквизитов = ВыборкаХарактеристик.ДополнительныеРеквизиты.Выбрать();
			
			Пока ВыборкаДопРеквизитов.Следующий() Цикл
				
				СтрокаДопРеквизитов = ХарактеристикаОбъект.ДополнительныеРеквизиты.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДопРеквизитов,ВыборкаДопРеквизитов);
				
			КонецЦикла;
			
			ХарактеристикаОбъект.Владелец = Объект.Ссылка;
			ХарактеристикаОбъект.Записать();
			
			СоответствиеСоздаваемыхОбъектов.Вставить(ВыборкаХарактеристик.Ссылка, ХарактеристикаОбъект.Ссылка);
			
		КонецЦикла;
	КонецЕсли;
	
	Если КопироватьСвязьСКлассификаторомАлкогольнойПродукцииЕГАИС Тогда
		
		ИнтеграцияЕГАИСУТ.КопироватьСвязьСКлассификаторомАлкогольнойПродукцииЕГАИС(
			ИсточникКопирования,
			Объект.Ссылка,
			УстановитьСвязьСХарактеристикамиАлкогольнойПродукции);
			
		КопироватьСвязьСКлассификаторомАлкогольнойПродукцииЕГАИС = Ложь;
		УстановитьСвязьСХарактеристикамиАлкогольнойПродукции = Ложь;
		
	ИначеЕсли КопироватьСвязьСКлассификаторомПродукцииВЕТИС Тогда
		
		Если УстановитьСвязьСХарактеристикамиПродукцииВЕТИС Тогда
			ИнтеграцияВЕТИСУТ.КопироватьСвязьСКлассификаторомПродукцииВЕТИС(
				ИсточникКопирования,
				Объект.Ссылка,
				СоответствиеСоздаваемыхОбъектов);
		КонецЕсли;
		
		КопироватьСвязьСКлассификаторомПродукцииВЕТИС  = Ложь;
		УстановитьСвязьСХарактеристикамиПродукцииВЕТИС = Ложь;
		
	КонецЕсли;
	
	Если Не Элементы.СтраницаКарточкаНоменклатуры.Доступность Тогда
		РежимВидимостиПоказатьТолькоВажные = Ложь;
		НастройкаВидимостиФормы = "ПоказатьВсе";
		НастроитьФормуИОбновитьКарточку();
		СкрытьРаскрытьВсеГруппы(Ложь);
	Иначе
		НастроитьФормуИОбновитьКарточку();
	КонецЕсли;
	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	НастроитьДоступностьБлокируемыхРеквизитов();
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	Если ИзображенияИзСервиса.Количество() > 0 Тогда
		РаботаСНоменклатуройУТ.ПрикрепитьИзображения(ТекущийОбъект.Ссылка, ИзображенияИзСервиса);
		Прочитать();
		ИзображенияИзСервиса.Очистить();
	КонецЕсли;
	Если ЭтоАдресВременногоХранилища(ШтрихкодыСервис) Тогда
		ШтрихКоды = ПолучитьИзВременногоХранилища(ШтрихкодыСервис);
		
		ШтрихкодыДляЗаписи = Новый ТаблицаЗначений;
		
		ШтрихкодыДляЗаписи.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.НоменклатураРаботаСНоменклатурой.Тип);
		ШтрихкодыДляЗаписи.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаРаботаСНоменклатурой.Тип);
		ШтрихкодыДляЗаписи.Колонки.Добавить("Штрихкод",       Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
		
		Для каждого Элемент Из ШтрихКоды Цикл
			НоваяСтрока = ШтрихкодыДляЗаписи.Добавить();
			НоваяСтрока.Номенклатура = ТекущийОбъект.Ссылка;
			НоваяСтрока.Штрихкод = Элемент.Штрихкод;
			НоваяСтрока.Характеристика = Элемент.Характеристика;
		КонецЦикла; 
		РаботаСНоменклатуройУТ.ЗаписатьШтрихкоды(ШтрихкодыДляЗаписи);
		Прочитать();
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_Номенклатура", ПараметрыЗаписи, Объект.Ссылка);

	Если ЗначениеЗаполнено(Штрихкод) и НЕ ЗначениеЗаполнено(ШтрихкодыСервис) Тогда
		
		ТекстВопроса =НСтр("ru = 'Зарегистрировать штрихкод?'");
		
		Оповещение = Новый ОписаниеОповещения("ЗарегистрироватьШтрихкодЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = 'Регистрация штрихкода'"));
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	РаботаСНоменклатуройКлиент.ПослеЗаписиФормаНоменклатуры(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Если Элементы.Штрихкод.Видимость
				И Элементы.Штрихкод.Доступность Тогда
				Штрихкод = МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр).Штрихкод;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "Запись_ВидыНоменклатуры" Тогда
		
		ПриЗаписиВидаНоменклатуры();
	ИначеЕсли ИмяСобытия = "Запись_ШтрихкодыНоменклатуры"
		И Параметр = Объект.Ссылка Тогда
		
		НастроитьФормуИОбновитьКарточку();
		
	ИначеЕсли ИмяСобытия = "Запись_ТоварыДругогоКачества"
		И Параметр = Объект.Ссылка Тогда
		
		ОбработатьЗаписьТовараДругогоКачества();
		
	ИначеЕсли ИмяСобытия = "Запись_ВариантыКомплектацииНоменклатуры"
		И Параметр.Свойство("ВладелецКомплекта")
		И Параметр.ВладелецКомплекта = Объект.Ссылка Тогда
		
		Если Объект.ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать")
			И Параметр.Свойство("Основной")
			И Параметр.Основной Тогда
			
			ВариантКомплектацииНоменклатуры = Параметр.Комплект;
			
		КонецЕсли;
		
		НастроитьФормуИОбновитьКарточку();
		
	ИначеЕсли ИмяСобытия = "Запись_ХарактеристикиНоменклатуры"
		И ЗначениеЗаполнено(Источник) Тогда
		
		ОбработкаОповещенияЗапись_ХарактеристикиНоменклатуры(Источник);
		
	ИначеЕсли ИмяСобытия = "Запись_УпаковкиНоменклатурыСписок"
		И (Параметр = Объект.Ссылка Или Параметр = Объект.НаборУпаковок) Тогда
		
		НастроитьФормуИОбновитьКарточку();
		
	ИначеЕсли ИмяСобытия = "Запись_СертификатНоменклатуры" Тогда
		ОбработкаОповещенияЗапись_Запись_СертификатыНоменклатурыСписок(Параметр);
	ИначеЕсли ИмяСобытия = "ВключитьУдалитьВСегмент"
		И Параметр = Объект.Ссылка Тогда
		
		НастроитьФормуИОбновитьКарточку();
		
	ИначеЕсли ИмяСобытия = "Запись_СоглашенияСПоставщиками" Тогда
		НастроитьФормуИОбновитьКарточку();
	ИначеЕсли ИмяСобытия = "ВыбранаУпаковкаДляОтчетов" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Свойство("Коэффициент") Тогда
			
			Объект.КоэффициентЕдиницыДляОтчетов = Параметр.Коэффициент;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияЗапись_Запись_СертификатыНоменклатурыСписок(Сертификат)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбластиДействияСертификатовНоменклатуры.СертификатНоменклатуры
	|ИЗ
	|	РегистрСведений.ОбластиДействияСертификатовНоменклатуры КАК ОбластиДействияСертификатовНоменклатуры
	|ГДЕ
	|	(ОбластиДействияСертификатовНоменклатуры.Номенклатура = &Номенклатура
	|			ИЛИ ОбластиДействияСертификатовНоменклатуры.ВидНоменклатуры = &ВидНоменклатуры
	|				И ОбластиДействияСертификатовНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|	И НЕ ОбластиДействияСертификатовНоменклатуры.СертификатНоменклатуры.ПометкаУдаления
	|	И ОбластиДействияСертификатовНоменклатуры.СертификатНоменклатуры.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСертификатовНоменклатуры.Действующий)
	|	И ОбластиДействияСертификатовНоменклатуры.СертификатНоменклатуры = &СертификатНоменклатуры";
	
	Запрос.УстановитьПараметр("Номенклатура", Объект.Ссылка);
	Запрос.УстановитьПараметр("ВидНоменклатуры", Объект.ВидНоменклатуры);
	Запрос.УстановитьПараметр("СертификатНоменклатуры", Сертификат);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		НастроитьФормуИОбновитьКарточку();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияЗапись_ХарактеристикиНоменклатуры(Характеристика)

	Владелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Характеристика,"Владелец");
	
	Если Объект.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры 
		И Владелец = Объект.Ссылка 
		Или Объект.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры 
		И Владелец = Объект.ВидНоменклатуры
		Или Объект.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры 
		И Владелец = Объект.ВладелецХарактеристик Тогда
			НастроитьФормуИОбновитьКарточку();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыКарточкаНоменклатурыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Справочник.Номенклатура.ФормаЭлемента.Элемент.СтраницыКарточкаНоменклатуры.ПриСменеСтраницы");
	
	Если ТекущаяСтраница = Элементы.СтраницаРеквизитыНоменклатуры Тогда
		
		Элементы.ГруппаГруппировкаЛевоПраво.Видимость = Истина;
		ПоказатьСовет("ПереходКРедактированию");
		
	Иначе
		Элементы.ГруппаГруппировкаЛевоПраво.Видимость = Ложь;
		
		Если Не ЗначениеЗаполнено(Объект.Ссылка)
			Или Модифицированность Тогда
			
			ОчиститьСообщения();
			
			ТекстВопроса = Нстр("ru = 'Данные еще не записаны.
			|Информация, отображаемая в карточке, обновится после записи.
			|Записать элемент?'");
			
			ПоказатьВопрос(Новый ОписаниеОповещения("СтраницыКарточкаНоменклатурыПриСменеСтраницыЗавершение", ЭтотОбъект),
				ТекстВопроса,
				РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыКарточкаНоменклатурыПриСменеСтраницыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСовет(ИмяСовета)

	ИмяНастройки = "ПоказатьСовет" + ИмяСовета;
	
	Если ЭтотОбъект[ИмяНастройки] Тогда
		
			Если ИмяСовета = "ПереходКРедактированию" Тогда 
				ТекстСообщения = НСтр("ru = 'Чтобы быстро перейти к редактированию реквизита, кликните дважды по нему в карточке.'");
			Иначе
				ВызватьИсключение НСтр("ru = 'Неизвестное имя совета. Обратитесь к разработчикам программы.'");
			КонецЕсли;
			
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Спасибо за совет'"));
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьСоветЗавершение", ЭтотОбъект, ИмяНастройки);
			
			ПоказатьВопрос(ОписаниеОповещения,ТекстСообщения, СписокКнопок,,КодВозвратаДиалога.ОК, НСтр("ru = 'Полезный совет'"));
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСоветЗавершение(Результат, ИмяНастройки) Экспорт
	
	ПоказатьСоветЗавершениеСервер(ИмяНастройки);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСоветЗавершениеСервер(Знач ИмяНастройки)
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить("Справочник.Номенклатура.Форма.ФормаЭлемента",
															ИмяНастройки,
															Ложь);
	ЭтотОбъект[ИмяНастройки] = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ВидНоменклатурыПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ВидНоменклатурыПриИзмененииНастройкаФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУпаковкиПриИзменении(Элемент)
	
	Если Не Объект.ИспользоватьУпаковки Тогда
		Объект.НаборУпаковок = Неопределено;
	Иначе
		Объект.НаборУпаковок = РеквизитыВидаНоменклатуры.НаборУпаковок;
		Если Объект.НаборУпаковок = ПредопределенноеЗначение("Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры") Тогда
			ИспользованиеУпаковок = "ИндивидуальныйНабор";
		КонецЕсли;
		Объект.ПоставляетсяВМногооборотнойТаре   = Ложь;
		Объект.НоменклатураМногооборотнаяТара    = Неопределено;
		Объект.ХарактеристикаМногооборотнаяТара  = Неопределено;
	КонецЕсли;
	
	НастроитьФормуИОбновитьКарточку();
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеУпаковокИндивидуальныйНаборПриИзменении(Элемент)
	Объект.НаборУпаковок = ПредопределенноеЗначение("Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры");
	НастроитьФормуИОбновитьКарточку();
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеУпаковокОбщийНаборПриИзменении(Элемент)
	Объект.НаборУпаковок = Неопределено;
	НастроитьФормуИОбновитьКарточку();
КонецПроцедуры

&НаКлиенте
Процедура НаборУпаковокПриИзменении(Элемент)
	
	НаборУпаковокПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура НаборУпаковокПриИзмененииСервер()
	
	ИндивидуальныеУпаковки = Объект.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры;
	
	Если Объект.ИспользоватьУпаковки
		И Не ИндивидуальныеУпаковки  Тогда
		
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
						Объект.НаборУпаковок,
						Новый Структура("ЕдиницаИзмерения, ЕдиницаДляОтчетов, КоэффициентЕдиницыДляОтчетов"));
						НеЗаполняемыеРеквизиты = "";
		Если Не ЗначениеЗаполнено(РеквизитыОбъекта.ЕдиницаДляОтчетов) Тогда
			НеЗаполняемыеРеквизиты = "ЕдиницаДляОтчетов, КоэффициентЕдиницыДляОтчетов";
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыОбъекта, , НеЗаполняемыеРеквизиты);
	КонецЕсли;
	
	НастроитьФормуИОбновитьКарточку();
	
КонецПроцедуры

&НаКлиенте
Процедура НаборУпаковокОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Объект.НаборУпаковок = ПредопределенноеЗначение("Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			Если Не ЭтаФорма.Записать() Тогда
				
				ТекстСообщения = НСтр("ru='Ошибка записи элемента!'");
				ПоказатьПредупреждение(Неопределено, ТекстСообщения);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Владелец", Объект.Ссылка);
		
		ОткрытьФорму("Справочник.УпаковкиЕдиницыИзмерения.ФормаСписка", Новый Структура("Отбор", Отбор), ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПриИзменении(Элемент)
	
	ЕдиницаИзмеренияПриИзмененииСервер();

КонецПроцедуры

&НаКлиенте
Процедура ПоставляетсяВМногооборотнойТареПриИзменении(Элемент)
	
	НастроитьФормуИОбновитьКарточку();

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураМногооборотнаяТараПриИзменении(Элемент)
	
	НоменклатураМногооборотнаяТараПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура НоменклатураМногооборотнаяТараПриИзмененииСервер()
	
	ИспользуютсяХарактеристикиМногооборотнойТары = Справочники.Номенклатура.ХарактеристикиИспользуются(Объект.НоменклатураМногооборотнаяТара);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", Объект.ХарактеристикаМногооборотнаяТара);

	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("Номенклатура", Объект.НоменклатураМногооборотнаяТара);
	СтруктураСтроки.Вставить("Характеристика", Объект.ХарактеристикаМногооборотнаяТара);
	СтруктураСтроки.Вставить("ХарактеристикиИспользуются", ИспользуютсяХарактеристикиМногооборотнойТары);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтруктураСтроки, СтруктураДействий, Неопределено);

	Объект.НоменклатураМногооборотнаяТара = СтруктураСтроки.Номенклатура;
	Объект.ХарактеристикаМногооборотнаяТара = СтруктураСтроки.Характеристика;
	
	ИспользуютсяХарактеристикиМногооборотнойТары = СтруктураСтроки.ХарактеристикиИспользуются;
	
	НастроитьФормуИОбновитьКарточку();
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаДляОтчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Объект.ИспользоватьУпаковки Тогда
		СтандартнаяОбработка = Ложь;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Номенклатура", Объект.Ссылка);
		СтруктураПараметров.Вставить("НаборУпаковок", Объект.НаборУпаковок);
		СтруктураПараметров.Вставить("ЕдиницаХранения", Объект.ЕдиницаИзмерения);
		СтруктураПараметров.Вставить("ЕдиницаДляОтчетов", Объект.ЕдиницаДляОтчетов);
		
		ОткрытьФорму("Справочник.УпаковкиЕдиницыИзмерения.Форма.ФормаВыбораЕдиницыДляОтчетов",
				СтруктураПараметров,
				Элемент, , , , ,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаДляОтчетовПриИзменении(Элемент)
	НастроитьФормуИОбновитьКарточку();
КонецПроцедуры

&НаКлиенте
Процедура ВесИспользоватьПриИзменении(Элемент)
	МераИспользоватьПриИзмененииСервер("Вес");
КонецПроцедуры

&НаКлиенте
Процедура ОбъемИспользоватьПриИзменении(Элемент)
	МераИспользоватьПриИзмененииСервер("Объем");
КонецПроцедуры

&НаКлиенте
Процедура ПлощадьИспользоватьПриИзменении(Элемент)
	МераИспользоватьПриИзмененииСервер("Площадь");
КонецПроцедуры

&НаКлиенте
Процедура ДлинаИспользоватьПриИзменении(Элемент)
	МераИспользоватьПриИзмененииСервер("Длина");
КонецПроцедуры

&НаКлиенте
Процедура ВесМожноУказыватьВДокументахПриИзменении(Элемент)
	МераМожноУказыватьВДокументахПриИзменении("Вес");
КонецПроцедуры

&НаКлиенте
Процедура ОбъемМожноУказыватьВДокументахПриИзменении(Элемент)
	МераМожноУказыватьВДокументахПриИзменении("Объем");
КонецПроцедуры

&НаКлиенте
Процедура ПлощадьМожноУказыватьВДокументахПриИзменении(Элемент)
	МераМожноУказыватьВДокументахПриИзменении("Площадь");
КонецПроцедуры

&НаКлиенте
Процедура ДлинаМожноУказыватьВДокументахПриИзменении(Элемент)
	МераМожноУказыватьВДокументахПриИзменении("Длина");
КонецПроцедуры

&НаКлиенте
Процедура ВесЕдиницаИзмеренияНажатие(Элемент, СтандартнаяОбработка)
	ЕдиницаИзмеренияНажатие("ВесЕдиницаИзмерения", СтандартнаяОбработка, "Вес");
КонецПроцедуры

&НаКлиенте
Процедура ОбъемЕдиницаИзмеренияНажатие(Элемент, СтандартнаяОбработка)
	ЕдиницаИзмеренияНажатие("ОбъемЕдиницаИзмерения", СтандартнаяОбработка, "Объем");
КонецПроцедуры

&НаКлиенте
Процедура ПлощадьЕдиницаИзмеренияНажатие(Элемент, СтандартнаяОбработка)
	ЕдиницаИзмеренияНажатие("ПлощадьЕдиницаИзмерения", СтандартнаяОбработка, "Площадь");
КонецПроцедуры

&НаКлиенте
Процедура ДлинаЕдиницаИзмеренияНажатие(Элемент, СтандартнаяОбработка)
	ЕдиницаИзмеренияНажатие("ДлинаЕдиницаИзмерения", СтандартнаяОбработка, "Длина");
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияНажатие(ИмяПоля, СтандартнаяОбработка, ИмяМеры)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОповещения = Новый Структура("ИмяПоля, ИмяМеры", ИмяПоля, ИмяМеры);
	ОписаниеОповещения  = Новый ОписаниеОповещения("ЕдиницаИзмеренияНажатиеЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	ИмяТипаИзмеряемойВеличины = "Перечисление.ТипыИзмеряемыхВеличин." + ИмяМеры;
	ТипИзмеряемойВеличины     = ПредопределенноеЗначение(ИмяТипаИзмеряемойВеличины);
	
	Отбор          = Новый Структура("ТипИзмеряемойВеличины", ТипИзмеряемойВеличины);
	ПараметрыФормы = Новый Структура("Отбор,ТекущаяСтрока", Отбор, Объект[ИмяПоля]);
	
	ОткрытьФорму("Справочник.УпаковкиЕдиницыИзмерения.ФормаВыбора",
				ПараметрыФормы,
				ЭтотОбъект,
				,
				,
				,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда 
		Модифицированность = Истина;
		
		Объект[ДополнительныеПараметры.ИмяПоля] = Результат;
	КонецЕсли;
	
	Мера = ДополнительныеПараметры.ИмяМеры;
	
	ТекстПредставленияЗначения = НСтр("ru = 'Можно указывать количество в %ЕдиницаИзмеренияМеры% в документах'");
	ТекстПредставленияЗначения = СтрЗаменить(ТекстПредставленияЗначения,
											"%ЕдиницаИзмеренияМеры%",
											Строка(Объект[Мера + "ЕдиницаИзмерения"]));
	
	Элементы[Мера + "МожноУказыватьВДокументах"].СписокВыбора[1].Представление = ТекстПредставленияЗначения;
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетСертификатовНоменклатурыПриИзменении(Элемент)
	НастроитьФормуИОбновитьКарточку();
КонецПроцедуры

&НаКлиенте
Процедура ПринципалПриИзменении(Элемент)
	ПринципалПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	НастроитьФормуИОбновитьКарточку();
КонецПроцедуры

&НаКлиенте
Процедура ПроизводительПриИзменении(Элемент)
	
	Если ИспользоватьТоварныеКатегории Тогда
		ПроизводительПриИзмененииСервер()
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИндивидуальныйШаблонЭтикеткаПриИзменении(Элемент)
	
	Объект.ШаблонЭтикетки = ПредопределенноеЗначение("Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка");
	Объект.ИспользоватьИндивидуальныйШаблонЭтикетки = (ИспользоватьИндивидуальныйШаблонЭтикетки = 1);
	
	НастроитьФормуИОбновитьКарточку();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИндивидуальныйШаблонЦенникПриИзменении(Элемент)
	
	Объект.ШаблонЦенника = ПредопределенноеЗначение("Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка");
	Объект.ИспользоватьИндивидуальныйШаблонЦенника = ИспользоватьИндивидуальныйШаблонЦенника = 1;
	
	НастроитьФормуИОбновитьКарточку();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПустаяСтрока(АдресКартинки) Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
		ПриДобавленииИзображения();
	Иначе
		ТекстСообщения = НСтр("ru='Отсутствует изображение для просмотра'");
		
		ПросмотретьПрисоединенныйФайл("ФайлКартинки", "АдресКартинки", ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования,
																	ЭтотОбъект,
																	"Объект.Описание",
																	НСтр("ru = 'Дополнительная информация'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлОписанияДляСайтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПриДобавленииФайлаОписания();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлОписанияДляСайтаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекстСообщения = НСтр("ru='Файл описания не выбран'");
	
	ПросмотретьПрисоединенныйФайл("ФайлОписанияДляСайта", "ПутьКФайлуОписанию", ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлОписанияДляСайтаОчистка(Элемент, СтандартнаяОбработка)
	
	ПутьКФайлуОписанию			= "";
	Объект.ФайлОписанияДляСайта	= ПредопределенноеЗначение("Справочник.НоменклатураПрисоединенныеФайлы.ПустаяСсылка");
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыПереходаПоГиперссылке(ИмяЭлемента, Гиперссылка = "")
	Если ИмяЭлемента = "ГиперссылкаПерейтиНоменклатураСАналогичнымиСвойствами" Тогда
		
		ПараметрыФормы = Новый Структура("НоменклатураФильтраПоСвойствам", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.Номенклатура.Форма.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиТоварыДругогоКачества" Тогда
		
		ПараметрыФормы = Новый Структура("Номенклатура", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.ТоварыДругогоКачества.Форма.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиШтрихкодыНоменклатуры" Тогда
		
		ПараметрыФормы = Новый Структура("Номенклатура", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.ШтрихкодыНоменклатуры.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиВариантыКомплектации"
		Или ИмяЭлемента = "ГиперссылкаПерейтиСоставНабора" Тогда
		
		ПараметрыФормы = Новый Структура("Номенклатура", Объект.Ссылка);
		
		Если Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор") Тогда
			
			Если ЗначениеЗаполнено(ВариантКомплектацииНоменклатуры) Тогда
				ПараметрыФормы = Новый Структура("Ключ", ВариантКомплектацииНоменклатуры);
				
				ПараметрыПереходаПоГиперссылке = Новый Структура;
				ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.ВариантыКомплектацииНоменклатуры.Форма.СоставНабора");
				ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
			Иначе
				Если Объект.ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать") Тогда
					Отбор = Новый Структура;
					Отбор.Вставить("Владелец", Объект.Ссылка);
					Отбор.Вставить("Характеристика", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
					ПараметрыФормы = Новый Структура("Отбор", Отбор);
					
					ПараметрыПереходаПоГиперссылке = Новый Структура;
					ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.ВариантыКомплектацииНоменклатуры.Форма.СоставНабора");
					ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
				Иначе
					Отбор = Новый Структура;
					Отбор.Вставить("Владелец", Объект.Ссылка);
					ПараметрыФормы = Новый Структура("Отбор", Отбор);
					
					ПараметрыПереходаПоГиперссылке = Новый Структура;
					ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.ХарактеристикиНоменклатуры.ФормаСписка");
					ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Отбор = Новый Структура;
			Отбор.Вставить("Владелец", Объект.Ссылка);
			ПараметрыФормы = Новый Структура("Отбор", Отбор);
			
			ПараметрыПереходаПоГиперссылке = Новый Структура;
			ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.ВариантыКомплектацииНоменклатуры.Форма.ФормаСписка");
			ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		КонецЕсли;
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиХарактеристикиНоменклатуры" Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Владелец", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.ХарактеристикиНоменклатуры.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиУпаковкиНоменклатуры" Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Владелец", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.УпаковкиЕдиницыИзмерения.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиУпаковкиНабора" Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Владелец", Объект.НаборУпаковок);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.УпаковкиЕдиницыИзмерения.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиПрогнозыРасходаУпаковок" Тогда
		
		ПараметрыФормы = Новый Структура("Номенклатура", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.ПрогнозыРасходаУпаковок.Форма.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы", ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиРазмещениеНоменклатуры" Тогда
		
		Отбор = Новый Структура("Номенклатура", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы",
			"РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам.Форма.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы", ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиСертификатыНоменклатуры" Тогда
		
		ПараметрыФормы = Новый Структура("Номенклатура", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.СертификатыНоменклатуры.Форма.ФормаСпискаКонтекст");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиДрагоценныеМатериалы" Тогда
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяГруппы", "ГиперссылкаПерейтиДрагоценныеМатериалы");
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиФайлы" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВладелецФайла",  Объект.Ссылка);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиРаспределениеПродажПоНаправлениямДеятельности" Тогда
		
		Отбор = Новый Структура("Номенклатура", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.НастройкаРаспределенияПоНаправлениямДеятельности.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиСовместныеПродажи" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ",  Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.Номенклатура.Форма.СовместныеПродажи");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиСегменты" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Номенклатура", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.НоменклатураСегмента.Форма.СегментыНоменклатурыПараметрическая");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
				
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиНастройкаСпособовОбеспеченияПотребностей" Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", Объект.Ссылка);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор",	Отбор);
		ПараметрыФормы.Вставить("Источник",	"Номенклатура");
				
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Обработка.НастройкаСпособовОбеспеченияПотребностей.Форма.Форма");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы", ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиНастройкаПоддержанияЗапасов" Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", Объект.Ссылка);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор",	Отбор);
		ПараметрыФормы.Вставить("Источник",	"Номенклатура");
				
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Обработка.НастройкаПоддержанияЗапасов.Форма.Форма");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы", ПараметрыФормы);
		
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиПрайсЛистКомпании" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Номенклатура",  Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Обработка.ПрайсЛист.Форма.Форма");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиПрайсЛистыПоставщиков" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Номенклатура",  Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Обработка.ПрайсЛистПоставщика.Форма.Форма");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиИсторияИзмененияЦенКомпании" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Номенклатура", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.ЦеныНоменклатуры.Форма.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы", ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиИсторияИзмененияЦенПоставщиков" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Номенклатура", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.ЦеныНоменклатурыПоставщиков.Форма.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы", ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиСоглашения" Тогда
		
		ЗначенияЗаполненияСоглашений = Новый Структура;
		ЗначенияЗаполненияСоглашений.Вставить("Партнер",				Объект.Принципал);
		ЗначенияЗаполненияСоглашений.Вставить("Контрагент",				Объект.Контрагент);
		ЗначенияЗаполненияСоглашений.Вставить("Статус",					ПредопределенноеЗначение("Перечисление.СтатусыСоглашенийСПоставщиками.Действует"));
		ЗначенияЗаполненияСоглашений.Вставить("ХозяйственнаяОперация",	ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОказаниеАгентскихУслуг"));
		
		Если Гиперссылка = "СоглашенияВыбрать"
			Или Гиперссылка = "СписокСоглашенийПоНоменклатуре" Тогда
			
			ПартнерыДляОтбора = Новый Массив;
			ПартнерыДляОтбора.Добавить(ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"));
			ПартнерыДляОтбора.Добавить(Объект.Принципал);
			
			КонтрагентыДляОтбора = Новый Массив;
			КонтрагентыДляОтбора.Добавить(ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
			КонтрагентыДляОтбора.Добавить(Объект.Контрагент);
			
			ОтборСоглашений = Новый Структура;
			ОтборСоглашений.Вставить("Партнер",					Новый ФиксированныйМассив(ПартнерыДляОтбора));
			ОтборСоглашений.Вставить("Контрагент",				Новый ФиксированныйМассив(КонтрагентыДляОтбора));
			ОтборСоглашений.Вставить("ХозяйственнаяОперация",	ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОказаниеАгентскихУслуг"));
			
			ОтборПользовательский = Новый Структура;
			ОтборПользовательский.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.СостоянияСоглашенийСПоставщиками.Действует"));
			
			ПараметрыСозданияСоглашения = Новый Структура;
			Если Гиперссылка = "СоглашенияВыбрать" Тогда
				ЗначенияЗаполненияСоглашений.Вставить("АгентскаяУслугаНоменклатура", Объект.Ссылка);
				
				ПараметрыСозданияСоглашения.Вставить("ДанныеУслуги", ЗначенияЗаполненияСоглашений);
			КонецЕсли;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Отбор",							ОтборСоглашений);
			ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора",			ОтборПользовательский);
			ПараметрыФормы.Вставить("ВключитьОтборПоАгентскойУслуге",	Гиперссылка = "СписокСоглашенийПоНоменклатуре");
			ПараметрыФормы.Вставить("АгентскаяУслугаНоменклатура",		Объект.Ссылка);
			ПараметрыФормы.Вставить("ДополнительныеПараметры",			ПараметрыСозданияСоглашения);
			
			ПараметрыПереходаПоГиперссылке = Новый Структура;
			ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы",			"Справочник.СоглашенияСПоставщиками.ФормаСписка");
			ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",	ПараметрыФормы);
			
		ИначеЕсли Гиперссылка = "СоглашенияСоздать" Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ЗначенияЗаполнения",			ЗначенияЗаполненияСоглашений);
			ПараметрыФормы.Вставить("АгентскаяУслугаНоменклатура",	Объект.Ссылка);
			
			ПараметрыПереходаПоГиперссылке = Новый Структура;
			ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы",			"Справочник.СоглашенияСПоставщиками.ФормаОбъекта");
			ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",	ПараметрыФормы);
			
		ИначеЕсли Гиперссылка = "СписокСоглашенийПоХарактеристикам" Тогда
			
			ПараметрыФормы = Новый Структура("Номенклатура", Объект.Ссылка);
			
			ПараметрыПереходаПоГиперссылке = Новый Структура;
			ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы",			"Справочник.Номенклатура.Форма.СоглашенияСПоставщикамиПоХарактеристикам");
			ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",	ПараметрыФормы);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПараметрыПереходаПоГиперссылке.Свойство("РежимОткрытияОкнаФормы") Тогда
		ПараметрыПереходаПоГиперссылке.Вставить("РежимОткрытияОкнаФормы", РежимОткрытияОкнаФормы.Независимый);
	КонецЕсли;
	
	ПараметрыПереходаПоГиперссылке.Вставить("ИмяЭлемента", ИмяЭлемента);
	ПараметрыПереходаПоГиперссылке.Вставить("Гиперссылка", Гиперссылка);
	
	Возврат ПараметрыПереходаПоГиперссылке;
	
КонецФункции

&НаСервере
Функция ПредставлениеВсплывающейГруппы(ИмяГруппы)
	
	Если ИмяГруппы = "ГиперссылкаПерейтиДрагоценныеМатериалы" Тогда
		ТабличныйДокумент = ОбщегоНазначенияУТ.ТабличныйДокументИзТаблицыЗначений(Объект.ДрагоценныеМатериалы.Выгрузить(),
		    Истина,
			Метаданные.Справочники.Номенклатура.ТабличныеЧасти.ДрагоценныеМатериалы);	
	Иначе
		ТекстИсключения = НСтр("ru = 'Не определено действие по гиперссылке для режима, когда у пользователя нет прав на редактирование.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаКлиенте
Процедура ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		Или Модифицированность Тогда
		
		ТекстВопроса = Нстр("ru = 'Данные еще не записаны.
		|Переход к дополнительной информации возможен только после записи элемента.
		|Записать элемент?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ГиперссылкаПерейтиВопросЗавершение", ЭтотОбъект, ПараметрыПереходаПоГиперссылке), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ЭлементЗаписан = Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если Не ЭлементЗаписан Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ДополнительныеПараметры.ИмяЭлемента,
																		ДополнительныеПараметры.Гиперссылка);
	ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке)
	
	Если ПараметрыПереходаПоГиперссылке.Свойство("ИмяФормы") Тогда
		Если ПараметрыПереходаПоГиперссылке.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаСписка" Тогда
			Оповестить("ФильтрПоАналогичнымСвойствам_Номенклатура", Объект.Ссылка, Объект.Ссылка);
		КонецЕсли;
		
		ОткрытьФорму(ПараметрыПереходаПоГиперссылке.ИмяФормы,
			ПараметрыПереходаПоГиперссылке.ПараметрыФормы, , ЭтаФорма.УникальныйИдентификатор, , , ,
			ПараметрыПереходаПоГиперссылке.РежимОткрытияОкнаФормы);
	ИначеЕсли ПараметрыПереходаПоГиперссылке.Свойство("НавигационнаяСсылка") Тогда
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ПараметрыПереходаПоГиперссылке.НавигационнаяСсылка);
	ИначеЕсли ПараметрыПереходаПоГиперссылке.Свойство("ИмяГруппы") Тогда
		Если ЕстьПравоРедактирования Тогда
			Элементы.СтраницыКарточкаНоменклатуры.ТекущаяСтраница = Элементы.СтраницаРеквизитыНоменклатуры;
			РазвернутьСворачиваемуюГруппу(ПараметрыПереходаПоГиперссылке.ИмяГруппы);
			Элементы[ПараметрыПереходаПоГиперссылке.ИмяГруппы].Показать();
		Иначе
			ТабличныйДокумент = ПредставлениеВсплывающейГруппы(ПараметрыПереходаПоГиперссылке.ИмяГруппы);
			ТабличныйДокумент.Показать(Элементы[ПараметрыПереходаПоГиперссылке.ИмяГруппы].Заголовок);
		КонецЕсли;
	Иначе
		ТекстИсключения = НСтр("ru = 'Не определено действие по гиперссылке.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиНоменклатураСАналогичнымиСвойствамиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиТоварыДругогоКачестваОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиШтрихкодыНоменклатурыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиВариантыКомплектацииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиХарактеристикиНоменклатурыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиУпаковкиНоменклатурыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиУпаковкиНабораОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиПрогнозыРасходаУпаковокОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиРазмещениеНоменклатурыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиСертификатыНоменклатурыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиФайлыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиРаспределениеПродажПоНаправлениямДеятельностиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиСовместныеПродажиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиСегментыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиНастройкаПоддержанияЗапасовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Справочник.Номенклатура.Форма.ФормаЭлемента.Команда.ПерейтиНастройкаПоддержанияЗапасов");
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиНастройкаСпособовОбеспеченияПотребностейОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Справочник.Номенклатура.Форма.ФормаЭлемента.Команда.ПерейтиНастройкаСпособовОбеспеченияПотребностей");
		
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиНастройкаПередачиМатериаловВПроизводство(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Возврат; // Для УТКА
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиПроизводствоОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиПрайсЛистКомпанииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиПрайсЛистыПоставщиковОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиИсторияИзмененияЦенКомпанииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиИсторияИзмененияЦенПоставщиковОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиСоглашенияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя, НавигационнаяСсылкаФорматированнойСтроки);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	ПересчитатьНеобходимостьФормированияНаименований(ЭтотОбъект);
	НаименованиеЗаполнение = Объект.Наименование;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	ПересчитатьНеобходимостьФормированияНаименований(ЭтотОбъект);
	НаименованиеПолноеЗаполнение = Объект.НаименованиеПолное;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьУникальность(Команда)
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	
	АдресВременногоХранилищаТаблицаНайдено = ПроверитьУникальностьСервер(Отказ); 
	
	Если Не Отказ Тогда
		Если ЗначениеЗаполнено(АдресВременногоХранилищаТаблицаНайдено) Тогда
			ПараметрыФормы = Новый Структура("АдресВременногоХранилищаТаблицаНайдено, Запись",
											АдресВременногоХранилищаТаблицаНайдено, Ложь);
			
			ОткрытьФорму("Справочник.Номенклатура.Форма.КонтрольУникальности",
						ПараметрыФормы,ЭтаФорма,
						,
						,
						РежимОткрытияОкнаФормы.БлокироватьОкноВладельца,
						Новый ОписаниеОповещения("ПроверитьУникальностьЗавершение",
							ЭтаФорма),
						РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ПоказатьПредупреждение(Неопределено,НСтр("ru='Позиция номенклатуры уникальна'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьУникальностьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Действие = "ВыбратьСуществующую" Тогда
		
		ПараметрыОповещения = Новый Структура("ЭтоНоваяНоменклатура", Ложь);
		Оповестить("Запись_Номенклатура",ПараметрыОповещения,Результат.Ссылка);
		
		Если ДляВыбора Тогда
			ОповеститьОВыборе(Результат.Ссылка);
		Иначе
			Модифицированность = Ложь;
			Закрыть();
		КонецЕсли;
		
	ИначеЕсли Результат.Действие = "ПродолжитьЗапись" Тогда
		
		КонтрольУникальностиПередЗаписьюПроведен = Истина;
		
		Попытка
			ЭлементЗаписан = Записать();
		Исключение
			КонтрольУникальностиПередЗаписьюПроведен = Ложь;
			Возврат;
		КонецПопытки;
		
		Если Не ЭлементЗаписан Тогда
			КонтрольУникальностиПередЗаписьюПроведен = Ложь;
			Возврат;
		КонецЕсли;
		
		Если ДляВыбора Тогда
			ОповеститьОВыборе(Объект.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьУникальностьСервер(Отказ)
	
	ПроверитьЗаполнениеОбязательныхРеквизитов(Отказ);
	
	Если Не Отказ Тогда
		АдресВременногоХранилищаТаблицаНайдено = ПроверитьУникальностьСформироватьНаименования(Ложь);
	Иначе
		АдресВременногоХранилищаТаблицаНайдено = "";
	КонецЕсли;
	
	Возврат АдресВременногоХранилищаТаблицаНайдено;
	
КонецФункции

&НаКлиенте
Процедура КарточкаНоменклатурыОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Справочник.Номенклатура.ФормаЭлемента.Элемент.КарточкаНоменклатуры.ОбработкаРасшифровки");
	
	Если Не ЗначениеЗаполнено(Расшифровка) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Не Элементы.ГруппаГруппировкаЛевоПраво.Видимость Тогда
		Элементы.ГруппаГруппировкаЛевоПраво.Видимость=Истина;
	КонецЕсли;
	
	Если ТипЗнч(Расшифровка) = Тип("Строка")
		Или ТипЗнч(Расшифровка) = ТипЗнч(Расшифровка) = Тип("ФорматированнаяСтрока") Тогда
		ИмяЭлемента = Расшифровка;
		Гиперссылка = "";
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		ИмяЭлемента = Расшифровка.ИмяЭлемента;
		Гиперссылка = Расшифровка.Гиперссылка;
	Иначе
		ТекстИсключения = НСтр("ru = 'Неподдерживаемый тип параметры расшифровки.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
		
	Если СтрНайти(ИмяЭлемента, "ГиперссылкаПерейти") <> 0 Тогда
		ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяЭлемента, Гиперссылка);
		ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	ИначеЕсли Элементы.Найти(ИмяЭлемента) <> Неопределено Тогда
		Если ЕстьПравоРедактирования Тогда
			Элементы.СтраницыКарточкаНоменклатуры.ТекущаяСтраница = Элементы.СтраницаРеквизитыНоменклатуры;
			
			РазвернутьСворачиваемуюГруппу(ИмяЭлемента);
			ТекущийЭлементВыбор = ИмяЭлемента;
			ПодключитьОбработчикОжидания("УстановитьАктивностьТекущийЭлемент",0.0001,Истина);
		Иначе
			Если Объект.Свойство(ИмяЭлемента) Тогда
				Если ТипЗнч(Объект[ИмяЭлемента]) <> Тип("Строка")
					И ТипЗнч(Объект[ИмяЭлемента]) <> Тип("Булево")
					И ЗначениеЗаполнено(Объект[ИмяЭлемента]) Тогда
					ПоказатьЗначение(,Объект[ИмяЭлемента]);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстИсключения = НСтр("ru = 'Необрабатываемый тип параметр расшифровки.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАктивностьТекущийЭлемент()
	ЭтаФорма.ТекущийЭлемент = Элементы[ТекущийЭлементВыбор];
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	НастроитьФормуИОбновитьКарточку();
	
КонецПроцедуры

&НаКлиенте
Процедура ОблагаетсяНДСУПокупателяПриИзменении(Элемент)
	
	НастроитьФормуИОбновитьКарточку();
	
КонецПроцедуры

&НаКлиенте
Процедура КодТНВЭДПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.КодТНВЭД) Тогда
		КодТНВЭДПриИзмененииСервер();
	Иначе
		Объект.ЕдиницаИзмеренияТНВЭД = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыДрагоценныеМатериалы
&НаКлиенте
Процедура ДрагоценныеМатериалыДрагоценныйМатериалПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДрагоценныеМатериалы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДрагоценныйМатериал) Тогда
		ТекущиеДанные.ЕдиницаИзмерения = ЕдиницаИзмерения(ТекущиеДанные.ДрагоценныйМатериал);
	Иначе
		ТекущиеДанные.ЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьНаименованиеДляПечатиПоШаблону(Команда)
	
	ЗаполнитьНаименованиеПоШаблонуСервер("ДляПечати");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРабочееНаименованиеПоШаблону(Команда)
	
	ЗаполнитьНаименованиеПоШаблонуСервер("Рабочее");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьШтрихкодЗавершение(Знач Результат, Знач ПараметрКоманды) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Штрихкод = Неопределено;
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Штрихкод) Тогда
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Номенклатура", Объект.Ссылка);
		ЗначенияЗаполнения.Вставить("Штрихкод", Штрихкод);
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
		Штрихкод = Неопределено;
		ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.ФормаЗаписи", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОбъемВДекалитрах(Команда)
	
	ОчиститьСообщения();
	
	РассчитатьОбъемВДекалитрахНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьОбъемВДекалитрахНаСервере()
	
	Если Не Объект.ОбъемИспользовать Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не задан объем для номенклатуры.'"),,"ОбъемИспользовать","Объект");
		Возврат;
	КонецЕсли;
	ОбъемЕдиницаИзмерения = ?(ЗначениеЗаполнено(Объект.ОбъемЕдиницаИзмерения), Объект.ОбъемЕдиницаИзмерения, Объект.ЕдиницаИзмерения);
	РеквизитыЕдиницыИзмеренияОбъем = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъемЕдиницаИзмерения, "Числитель, Знаменатель");
	
	Объект.ОбъемДАЛ = 100 * (Объект.ОбъемЧислитель * РеквизитыЕдиницыИзмеренияОбъем.Числитель) / 
		(Объект.ОбъемЗнаменатель * РеквизитыЕдиницыИзмеренияОбъем.Знаменатель);
	
КонецПроцедуры

&НаКлиенте
Процедура АлкогольнаяПродукцияВоВскрытойТареПриИзменении(Элемент)
	
	АлкогольнаяПродукцияВоВскрытойТареПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АлкогольнаяПродукцияВоВскрытойТареПриИзмененииНаСервере()
	
	Если Объект.АлкогольнаяПродукцияВоВскрытойТаре Тогда
		Объект.ЕдиницаИзмерения = Константы.ЕдиницаИзмеренияРазливнойПродукции.Получить();
	КонецЕсли;
	
	НастроитьФормуИОбновитьКарточку();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	ПриДобавленииИзображения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображение(Команда)
	
	Объект.ФайлКартинки = ПредопределенноеЗначение("Справочник.НоменклатураПрисоединенныеФайлы.ПустаяСсылка");
	ДанныеФайлаКартинки = Неопределено;
	
	ОбновитьАдресКартинки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	
	ТекстСообщения = НСтр("ru='Отсутствует изображение для просмотра'");
	
	ПросмотретьПрисоединенныйФайл("ФайлКартинки", "АдресКартинки", ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображение(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
		РаботаСФайламиКлиент.ОткрытьФормуФайла(Объект.ФайлКартинки);
	Иначе
		ТекстСообщения = НСтр("ru='Отсутствует изображение для редактирования'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "АдресКартинки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайлов(Команда)
	
	СтруктураПараметрыВыбора =
		Новый Структура("ВладелецФайла, ЗакрыватьПриВыборе, РежимВыбора", Объект.Ссылка, Истина, Истина);

	ОткрытьФорму(
		"Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
		СтруктураПараметрыВыбора,,,,,
		Новый ОписаниеОповещения("ВыбратьКартинкуИзПрисоединенныхФайловЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайловЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.ФайлКартинки = Результат;
		
		ОбновитьАдресКартинки(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиУпаковкиНоменклатуры(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиУпаковкиНабора(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиХарактеристикиНоменклатуры(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиНоменклатураСАналогичнымиСвойствами(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиШтрихкодыНоменклатуры(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиФайлы(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиТоварыДругогоКачества(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиПрогнозыРасходаУпаковок(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиРазмещениеНоменклатуры(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиСовместныеПродажи(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиСегменты(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиВариантыКомплектации(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиНастройкаПоддержанияЗапасов(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Справочник.Номенклатура.Форма.ФормаЭлемента.Команда.ПерейтиНастройкаПоддержанияЗапасов");
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиНастройкаСпособовОбеспеченияПотребностей(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Справочник.Номенклатура.Форма.ФормаЭлемента.Команда.ПерейтиНастройкаСпособовОбеспеченияПотребностей");
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиНастройкаПередачиМатериаловВПроизводство(Команда)
	
	Возврат; // Для УТКА
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиПроизводство(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиСертификатыНоменклатуры(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиРаспределениеПродажПоНаправлениямДеятельности(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиПрайсЛистыПоставщиков(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиПрайсЛистКомпании(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиИсторияИзмененияЦенКомпании(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиИсторияИзмененияЦенПоставщиков(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

// Обработчик команды, создаваемой механизмом запрета редактирования ключевых реквизитов.
//
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Если Не Объект.Ссылка.Пустая() Тогда
		
		ОткрытьФорму("Справочник.Номенклатура.Форма.РазблокированиеРеквизитов",,,,,, 
			Новый ОписаниеОповещения("Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение", ЭтотОбъект), 
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда
		
		Если Результат.Найти("ИспользоватьУпаковки") <> Неопределено Тогда
			Элементы.ИспользованиеУпаковокИндивидуальныйНабор.ТолькоПросмотр = Ложь;
			Элементы.ИспользованиеУпаковокОбщийНабор.ТолькоПросмотр = Ложь;
		КонецЕсли;
		ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтаФорма, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// ЭлектронноеВзаимодействие.ТорговыеПредложения
&НаКлиенте
Процедура Подключаемый_ПодсказкиБизнесСетьНажатие(Команда)
	
	ТорговыеПредложенияКлиент.ОткрытьФормуПодсказок(ЭтаФорма);
	
КонецПроцедуры
// Конец ЭлектронноеВзаимодействие.ТорговыеПредложения

// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
&НаКлиенте
Процедура Подключаемый_НачалоВыбораРаботаСНоменклатурой(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.ВыбратьОбъектСервиса(ЭтотОбъект, Элемент, СтандартнаяОбработка, Ложь,
		Новый ОписаниеОповещения("ЗакрытиеФормыВыбораОбъектаСервиса", ЭтотОбъект, Новый Структура));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОчисткаРаботаСНоменклатурой(Элемент, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.НажатиеОчиститьНоменклатуру(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеРежимОбновленияРаботаСНоменклатурой(Элемент)
	
	РаботаСНоменклатуройКлиент.НажатиеРежимОбновления(ЭтотОбъект, ПодготовитьДанныеДляИнтерактивногоЗаполнения(), 
		Новый ОписаниеОповещения("ЗакрытиеФормыЗаполненияОбъекта", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьРаботаСНоменклатурой(Элемент, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.ОткрытьКарточкуОбъектаСервиса(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИзменениеТекстаРедактированияРаботаСНоменклатурой(Элемент, Текст, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.ИзменениеТекстаСобратьСтрокуПоиска(ЭтотОбъект, Текст, Элемент, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРаботаСНоменклатурой(Элемент)
	
	РаботаСНоменклатуройКлиент.ПриИзмененииСобратьСтрокуПоиска(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеРаботаСНоменклатурой(Элемент, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.НажатиеГиперссылки(ЭтотОбъект, Элемент, СтандартнаяОбработка,
		Новый ОписаниеОповещения("ЗакрытиеФормыВыбораОбъектаСервиса", ЭтотОбъект, Новый Структура));
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаНавигационнойСсылкиРаботаСНоменклатурой(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.НажатиеГиперссылки(ЭтотОбъект, Элемент, СтандартнаяОбработка,
		Новый ОписаниеОповещения("ЗакрытиеФормыВыбораОбъектаСервиса", ЭтотОбъект, Новый Структура));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеЗаписиРаботаСНоменклатурой()
	
	РаботаСНоменклатуройКлиент.ПослеЗаписиФормаНоменклатурыПродолжение(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыВыбораОбъектаСервиса(ДанныеОбъекта, ДополнительныеПараметры) Экспорт 
	
	РаботаСНоменклатуройКлиент.ОбработкаОповещенияЗакрытиеФормыВыбора(
		ДанныеОбъекта, ДополнительныеПараметры, ПодготовитьДанныеДляИнтерактивногоЗаполнения(),
		Новый ОписаниеОповещения("ЗакрытиеФормыЗаполненияОбъекта", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыЗаполненияОбъекта(ПараметрыЗакрытияФормы, ДополнительныеПараметры) Экспорт 
	
	ЗаполнитьРеквизитыФормы(ПараметрыЗакрытияФормы);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеДляИнтерактивногоЗаполнения()
	
	Возврат РаботаСНоменклатурой.ПодготовитьДанныеДляИнтерактивногоЗаполнения(ЭтотОбъект);
			
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыФормы(ПараметрыЗакрытияФормы)
	
	РаботаСНоменклатурой.ЗаполнитьРеквизитыФормы(ЭтотОбъект, ПараметрыЗакрытияФормы);
	
	НастроитьФормуИОбновитьКарточку();
			
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ПринципалПриИзмененииНаСервере()
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Принципал, Объект.Контрагент);
	НастроитьФормуИОбновитьКарточку();
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиВидаНоменклатуры()

	ОбновитьКешРеквизитовВидаНоменклатуры();
	НастроитьФормуИОбновитьКарточку();

КонецПроцедуры

&НаСервере
Процедура ВидНоменклатурыПриИзмененииНаСервере(ЗаполнениеПоИсточникуКопирования = Ложь)
	
	ОбновитьКешРеквизитовВидаНоменклатуры();
	
	Справочники.Номенклатура.ЗаполнитьРеквизитыПоВидуНоменклатуры(Объект,
																	Ложь,
																	Ложь,
																	ВидНоменклатурыДоИзменения,
																	ЗаполнениеПоИсточникуКопирования);
	
	ВидНоменклатурыДоИзменения = Объект.ВидНоменклатуры;
	
	Если ЗначениеЗаполнено(Объект.ВидНоменклатуры)
		И Модифицированность Тогда
		
		Если ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.ШаблонРабочегоНаименованияНоменклатуры) Тогда
			Объект.Наименование = "";
			ФормироватьРабочееНаименование = Истина;
		ИначеЕсли ЗначениеЗаполнено(НаименованиеЗаполнение) Тогда
			// После обратного переключения на вид номенклатуры без шаблона возвращаем исходное наименование.
			Объект.Наименование = НаименованиеЗаполнение;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.ШаблонНаименованияДляПечатиНоменклатуры) Тогда
			Объект.НаименованиеПолное = "";
			ФормироватьНаименованиеДляПечати = Истина;
		ИначеЕсли ЗначениеЗаполнено(НаименованиеПолноеЗаполнение) Тогда 	
			// После обратного переключения на вид номенклатуры без шаблона возвращаем исходное наименование.
			Объект.НаименованиеПолное = НаименованиеПолноеЗаполнение;
		КонецЕсли;
		
		Если Объект.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда 
			ИспользованиеУпаковок = "ИндивидуальныйНабор";
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.АлкогольнаяПродукция
		И ЗначениеЗаполнено(РеквизитыЕГАИС) Тогда
		
		Объект.ОбъемДАЛ = РеквизитыЕГАИС.ОбъемЕГАИС / 10;
		Объект.Крепость = РеквизитыЕГАИС.КрепостьЕГАИС;
		Объект.ВидАлкогольнойПродукции = РеквизитыЕГАИС.ВидАлкогольнойПродукцииЕГАИС;
		
		Если ЗначениеЗаполнено(РеквизитыЕГАИС.ИмпортерЕГАИС) Тогда
			Объект.ПроизводительИмпортерКонтрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыЕГАИС.ИмпортерЕГАИС, "Контрагент");
			Объект.ИмпортнаяАлкогольнаяПродукция = Истина;
		Иначе
			Объект.ИмпортнаяАлкогольнаяПродукция = Ложь;
			Объект.ПроизводительИмпортерКонтрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыЕГАИС.ПроизводительЕГАИС, "Контрагент");
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьЭлементыДополнительныхРеквизитов();
	ОбновитьНастройкиРеквизитов();
	
	РеквизитыШаблоновЦенниковИЭтикеток = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидНоменклатуры,
		"ШаблонЦенника, ШаблонЭтикетки");
	
	ИспользуетсяИндивидуальныйШаблонЦенника  = ЗначениеЗаполнено(Объект.ШаблонЦенника)
												И (Объект.ШаблонЦенника <> РеквизитыШаблоновЦенниковИЭтикеток.ШаблонЦенника);
	ИспользуетсяИндивидуальныйШаблонЭтикетки = ЗначениеЗаполнено(Объект.ШаблонЭтикетки)
												И (Объект.ШаблонЭтикетки <> РеквизитыШаблоновЦенниковИЭтикеток.ШаблонЭтикетки);
	
	Объект.ИспользоватьИндивидуальныйШаблонЦенника  = ИспользуетсяИндивидуальныйШаблонЦенника;
	объект.ИспользоватьИндивидуальныйШаблонЭтикетки = ИспользуетсяИндивидуальныйШаблонЭтикетки;
	
	Объект.ШаблонЦенника  = ?(ИспользуетсяИндивидуальныйШаблонЦенника, Объект.ШаблонЦенника,
		Справочники.ШаблоныЭтикетокИЦенников.ПустаяСсылка());
	Объект.ШаблонЭтикетки = ?(ИспользуетсяИндивидуальныйШаблонЭтикетки, Объект.ШаблонЭтикетки,
		Справочники.ШаблоныЭтикетокИЦенников.ПустаяСсылка());
	
	ОтборНастроекШаблонаЦенников = Новый Структура("ИмяРеквизита", "ШаблонЦенника");
	НастройкиШаблонаЦенников     = ТаблицаНастроекРеквизитов.НайтиСтроки(ОтборНастроекШаблонаЦенников);
	
	Если НастройкиШаблонаЦенников.Количество() > 0 Тогда
		
		Если Не Объект.ИспользоватьИндивидуальныйШаблонЦенника
			И НастройкиШаблонаЦенников[0].ЗаполнятьОбязательно
			И Не ЗначениеЗаполнено(РеквизитыШаблоновЦенниковИЭтикеток.ШаблонЦенника) Тогда
			
			ИспользоватьИндивидуальныйШаблонЦенника = 1;
			Объект.ИспользоватьИндивидуальныйШаблонЦенника = Истина;
			
		ИначеЕсли Не Объект.ИспользоватьИндивидуальныйШаблонЦенника Тогда
			ИспользоватьИндивидуальныйШаблонЦенника = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	ОтборНастроекШаблонаЭтикеток = Новый Структура("ИмяРеквизита", "ШаблонЭтикетки");
	НастройкиШаблонаЭтикеток     = ТаблицаНастроекРеквизитов.НайтиСтроки(ОтборНастроекШаблонаЭтикеток);
	
	Если НастройкиШаблонаЭтикеток.Количество() > 0 Тогда
		
		Если Не Объект.ИспользоватьИндивидуальныйШаблонЭтикетки
			И НастройкиШаблонаЭтикеток[0].ЗаполнятьОбязательно
			И Не ЗначениеЗаполнено(РеквизитыШаблоновЦенниковИЭтикеток.ШаблонЭтикетки) Тогда
			
			ИспользоватьИндивидуальныйШаблонЭтикетки = 1;
			Объект.ИспользоватьИндивидуальныйШаблонЭтикетки = Истина;
			
		ИначеЕсли Не Объект.ИспользоватьИндивидуальныйШаблонЭтикетки Тогда
			ИспользоватьИндивидуальныйШаблонЭтикетки = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ВидНоменклатуры.АвтоОтметкаНезаполненного = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ВидНоменклатурыПриИзмененииНастройкаФормы()
	
	ВидНоменклатурыПриИзмененииНаСервере();
	НастроитьФормуИОбновитьКарточку();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов(ОбновитьРеквизиты = Истина)
	
	Если ОбновитьРеквизиты Тогда
		УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, , Ложь);
	КонецЕсли;
	
	НастроитьЭлементыДополнительныхРеквизитов();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыДополнительныхРеквизитов()
	
	Для Каждого Элемент Из Элементы.ГруппаДополнительныеРеквизиты.ПодчиненныеЭлементы Цикл
		
		Если Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
			
			Если Элемент.МногострочныйРежим <> Истина Тогда
				
				Элемент.РастягиватьПоГоризонтали = Ложь;
				
			Иначе
				
				Элемент.ПоложениеЗаголовка       = ПоложениеЗаголовкаЭлементаФормы.Лево;
				Элемент.РастягиватьПоВертикали   = Ложь;
				Элемент.РастягиватьПоГоризонтали = Истина;
				
			КонецЕсли;
			
		ИначеЕсли Элемент.Вид = ВидПоляФормы.ПолеФлажка Тогда
			
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКешРеквизитовВидаНоменклатуры()
	
	КэшРеквизитовВидаНоменклатуры = Новый Структура;
	КэшРеквизитовВидаНоменклатуры.Вставить("ШаблонРабочегоНаименованияНоменклатуры", "");
	КэшРеквизитовВидаНоменклатуры.Вставить("ЗапретРедактированияРабочегоНаименованияНоменклатуры", Ложь);
	КэшРеквизитовВидаНоменклатуры.Вставить("ШаблонНаименованияДляПечатиНоменклатуры", "");
	КэшРеквизитовВидаНоменклатуры.Вставить("ЗапретРедактированияНаименованияДляПечатиНоменклатуры", Ложь);
	
	КэшРеквизитовВидаНоменклатуры.Вставить("НастройкаИспользованияСерий", Перечисления.НастройкиИспользованияСерийНоменклатуры.ПустаяСсылка());
	КэшРеквизитовВидаНоменклатуры.Вставить("СодержитДрагоценныеМатериалы", Ложь);
	КэшРеквизитовВидаНоменклатуры.Вставить("ИспользованиеХарактеристик", Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать);
	КэшРеквизитовВидаНоменклатуры.Вставить("ИспользоватьСерии", Ложь);
	КэшРеквизитовВидаНоменклатуры.Вставить("ИспользоватьСрокГодностиСерии", Ложь);
	КэшРеквизитовВидаНоменклатуры.Вставить("НаборУпаковок", Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры);
	КэшРеквизитовВидаНоменклатуры.Вставить("ГруппаДоступа", Справочники.ГруппыДоступа.ПустаяСсылка());
	КэшРеквизитовВидаНоменклатуры.Вставить("НаборСвойств", Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка());
	КэшРеквизитовВидаНоменклатуры.Вставить("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.ПустаяСсылка());
		
	Если ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
		ИменаРеквизитов = "";
		Для Каждого КлючЗначение Из КэшРеквизитовВидаНоменклатуры Цикл
			ИменаРеквизитов = ИменаРеквизитов + КлючЗначение.Ключ + ",";
		КонецЦикла;
		
		ИменаРеквизитов = Лев(ИменаРеквизитов,СтрДлина(ИменаРеквизитов) - 1);
		
		РеквизитыВидаНоменклатуры = Новый ФиксированнаяСтруктура(ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидНоменклатуры, ИменаРеквизитов));
	Иначе
		РеквизитыВидаНоменклатуры = Новый ФиксированнаяСтруктура(КэшРеквизитовВидаНоменклатуры);
	КонецЕсли;
	
	ПересчитатьНеобходимостьФормированияНаименований(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьНеобходимостьФормированияНаименований(Форма)
	
	Форма.ФормироватьРабочееНаименование = Форма.РеквизитыВидаНоменклатуры.ЗапретРедактированияРабочегоНаименованияНоменклатуры
											ИЛИ (Не ЗначениеЗаполнено(Форма.Объект.Наименование)
												И ЗначениеЗаполнено(Форма.РеквизитыВидаНоменклатуры.ШаблонРабочегоНаименованияНоменклатуры));
	Форма.ФормироватьНаименованиеДляПечати = Форма.РеквизитыВидаНоменклатуры.ЗапретРедактированияНаименованияДляПечатиНоменклатуры
											ИЛИ (Не ЗначениеЗаполнено(Форма.Объект.НаименованиеПолное)
												И ЗначениеЗаполнено(Форма.РеквизитыВидаНоменклатуры.ШаблонНаименованияДляПечатиНоменклатуры));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриДобавленииИзображения()
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПараметрыОповещения	= Новый Структура("ИмяРеквизита", "ДанныеФайлаКартинки");
		ОписаниеОповещения	= Новый ОписаниеОповещения("ДобавлениеФайлаНеПрисоединенноЗавершение",
														ЭтотОбъект,
														ПараметрыОповещения);
		
		ПараметрыЗагрузкиФайла = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
		ПараметрыЗагрузкиФайла.Диалог.Фильтр = НоменклатураКлиент.ФильтрФайловИзображений();
		
		ФайловаяСистемаКлиент.ЗагрузитьФайл(ОписаниеОповещения, ПараметрыЗагрузкиФайла);
		
	Иначе
		
		ПараметрыОповещения	= Новый Структура("ВыборИзображения, ВыборФайлаОписания", Истина, Ложь);
		ОписаниеОповещения	= Новый ОписаниеОповещения("ДобавлениеФайлаЗавершение",
														ЭтотОбъект,
														ПараметрыОповещения);
		
		РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка,
											УникальныйИдентификатор,
											НоменклатураКлиент.ФильтрФайловИзображений(),
											,
											ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриДобавленииФайлаОписания()
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПараметрыОповещения	= Новый Структура("ИмяРеквизита", "ДанныеФайлаHTML");
		ОписаниеОповещения	= Новый ОписаниеОповещения("ДобавлениеФайлаНеПрисоединенноЗавершение",
														ЭтотОбъект,
														ПараметрыОповещения);
		
		ПараметрыЗагрузкиФайла = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
		ПараметрыЗагрузкиФайла.Диалог.Фильтр = НСтр("ru = 'Все файлы (*.*)|*.*'");
		
		Если ЗначениеЗаполнено(ПутьКФайлуОписанию) Тогда
			ПараметрыЗагрузкиФайла.Диалог.ПолноеИмяФайла = ПутьКФайлуОписанию;
		КонецЕсли;
		
		ФайловаяСистемаКлиент.ЗагрузитьФайл(ОписаниеОповещения, ПараметрыЗагрузкиФайла);
		
	Иначе
		
		ПараметрыОповещения	= Новый Структура("ВыборИзображения, ВыборФайлаОписания", Ложь, Истина);
		ОписаниеОповещения	= Новый ОписаниеОповещения("ДобавлениеФайлаЗавершение",
														ЭтотОбъект,
														ПараметрыОповещения);
		
		РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, УникальныйИдентификатор, , , ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаНеПрисоединенноЗавершение(ПомещенныйФайл, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныйФайл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита] = Новый Структура("ПолноеИмя, ИмяБезРасширения, Расширение");
	
	СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПомещенныйФайл.Имя);
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита].ПолноеИмя		= СтруктураИмениФайла.Имя;
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита].ИмяБезРасширения	= СтруктураИмениФайла.ИмяБезРасширения;
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита].Расширение		= ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(
																		СтруктураИмениФайла.Расширение);
	
	Если ДополнительныеПараметры.ИмяРеквизита = "ДанныеФайлаКартинки" Тогда
		АдресКартинки = ПомещенныйФайл.Хранение;
	ИначеЕсли ДополнительныеПараметры.ИмяРеквизита = "ДанныеФайлаHTML" Тогда
		АдресОписанияHTML	= ПомещенныйФайл.Хранение;
		ПутьКФайлуОписанию	= СтруктураИмениФайла.ИмяБезРасширения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	СсылкаНаФайл = ВыбранныеФайлы[0];
	
	Если ДополнительныеПараметры.ВыборИзображения Тогда
		Объект.ФайлКартинки = СсылкаНаФайл;
		
		ОбновитьАдресКартинки(Истина);
	ИначеЕсли ДополнительныеПараметры.ВыборФайлаОписания Тогда
		ПутьКФайлуОписанию			= Строка(СсылкаНаФайл);
		Объект.ФайлОписанияДляСайта	= СсылкаНаФайл;
		
		НастроитьФормуИОбновитьКарточку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл(ИмяРеквизитаОбъекта, ИмяРеквизитаФормы, ТекстСообщенияОбОшибке)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если ЗначениеЗаполнено(Объект[ИмяРеквизитаОбъекта]) Тогда
			РаботаСФайламиКлиент.ОткрытьФайл(РаботаСФайламиКлиент.ДанныеФайла(Объект[ИмяРеквизитаОбъекта],
																				УникальныйИдентификатор));
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке, , ИмяРеквизитаФормы);
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(ЭтаФорма[ИмяРеквизитаФормы]) Тогда
			
			Если ИмяРеквизитаФормы = "АдресКартинки" Тогда
				РасположениеФайла	= АдресКартинки;
				ИмяФайла			= ?(ТипЗнч(ДанныеФайлаКартинки) = Тип("Структура"),
										ДанныеФайлаКартинки.ПолноеИмя,
										"");
			Иначе
				РасположениеФайла	= АдресОписанияHTML;
				ИмяФайла			= ?(ТипЗнч(ДанныеФайлаHTML) = Тип("Структура"),
										ДанныеФайлаHTML.ПолноеИмя,
										"");
			КонецЕсли;
			ФайловаяСистемаКлиент.ОткрытьФайл(РасположениеФайла, ,ИмяФайла);
			
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке, , ИмяРеквизитаФормы);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроизводительПриИзмененииСервер()
		
	Объект.Марка = Справочники.Марки.ПолучитьМаркуПоУмолчанию(Объект.Производитель);
	
КонецПроцедуры

&НаСервере
Процедура КодТНВЭДПриИзмененииСервер()
	
	РеквизитыТНВЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.КодТНВЭД, "ЕдиницаИзмерения, ПрослеживаемыйТовар");
	
	Если РеквизитыТНВЭД.ПрослеживаемыйТовар Тогда
		Объект.ВестиУчетПоГТД = Истина;
	КонецЕсли;
	
	Объект.ЕдиницаИзмеренияТНВЭД = РеквизитыТНВЭД.ЕдиницаИзмерения;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФайламиИИзображениями

&НаСервере
Процедура ОбновитьАдресКартинки(НастроитьФормуИОбновитьКарточку)
	
	Если Объект.ФайлКартинки.Пустая() Тогда
		АдресКартинки = "";
		ПриПолученииДанныхКартинкиВозниклаОшибка = Ложь;
	Иначе
		
		УстановитьПривилегированныйРежим(Истина);
		Попытка
			АдресКартинки = РаботаСФайлами.ДанныеФайла(Объект.ФайлКартинки, УникальныйИдентификатор).СсылкаНаДвоичныеДанныеФайла;
		Исключение
			АдресКартинки = "";
		КонецПопытки;
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ПустаяСтрока(АдресКартинки) Тогда
			ПриПолученииДанныхКартинкиВозниклаОшибка = Истина;
		Иначе
			ПриПолученииДанныхКартинкиВозниклаОшибка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НастроитьФормуИОбновитьКарточку Тогда
		НастроитьФормуИОбновитьКарточку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьИндивидуальныеУпаковкиХарактеристикиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КопироватьИндивидуальныеУпаковки = Результат.КопироватьИндивидуальныеУпаковки;
	КопироватьИндивидуальныеХарактеристики = Результат.КопироватьИндивидуальныеХарактеристики;
	КопироватьСвязьСКлассификаторомПродукцииВЕТИС = Результат.КопироватьСвязьСКлассификаторомПродукцииВЕТИС;
	КопироватьСвязьСКлассификаторомАлкогольнойПродукцииЕГАИС = Результат.КопироватьСвязьСКлассификаторомАлкогольнойПродукцииЕГАИС;
	КонтрольУникальностиПередЗаписьюПроведен = Истина;
	НастройкиКопированияЗаданы = Истина;
	
	Попытка
		ЭлементЗаписан = Записать();
	Исключение
		КонтрольУникальностиПередЗаписьюПроведен = Ложь;
		Возврат;
	КонецПопытки;
	
	Если Не ЭлементЗаписан Тогда
		КонтрольУникальностиПередЗаписьюПроведен = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаВидимостиГруппИЭлементов

&НаСервере
Процедура НастроитьФормуИОбновитьКарточку()

	// Настройки видимости элементов формы происходят в конце этой процедуры.
	// Если видимость элементов формы зависит от реквизитов формы и эти элементы 
	// не должны отображаться в карточке номенклатуры (первая вкладка формы), то настройки их видимости не обязательно 
	// заносить в процедуру СтруктураВидимостиЭлементовФормы(...). 
	// (Но все же лучше попытаться занести не добавляя никаких параметров для однородности).
	
	Элементы.СтраницаКарточкаНоменклатуры.Доступность = ЗначениеЗаполнено(Объект.Ссылка);
	
	УстановитьДоступностьРедактированияНаименований(Истина);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Элементы.Штрихкод.Видимость = Ложь;
	Иначе
		Элементы.Штрихкод.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ПоставляетсяВМногооборотнойТаре.Доступность = Не Объект.ИспользоватьУпаковки
															И Не Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(Объект.ЕдиницаИзмерения);
	
	Если Не ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.НастройкаИспользованияСерий) Тогда
		НастройкаИспользованияСерий = НСтр("ru = 'Не используются'");
	Иначе
		НастройкаИспользованияСерий = Строка(РеквизитыВидаНоменклатуры.НастройкаИспользованияСерий);
	КонецЕсли;
	
	Если Объект.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ОрганизациейПоАгентскойСхеме Тогда
		ТипСсылкаОрганизации = Новый ОписаниеТипов("СправочникСсылка.Организации");
		
		Элементы.Принципал.ОграничениеТипа = ТипСсылкаОрганизации;
	Иначе
		ТипСсылкаКонтрагенты = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		ТипСсылкаПартнеры = Новый ОписаниеТипов("СправочникСсылка.Партнеры");
		
		Элементы.Принципал.ОграничениеТипа  = ТипСсылкаПартнеры;
		Элементы.Контрагент.ОграничениеТипа = ТипСсылкаКонтрагенты;
	КонецЕсли;
	
	ЗаполненВидНоменклатуры = ЗначениеЗаполнено(Объект.ВидНоменклатуры);
	
	Элементы.ТоварнаяКатегория.Доступность = ЗаполненВидНоменклатуры;
	
	Элементы.ЕдиницаИзмерения.Доступность = (ИспользованиеУпаковок = "ИндивидуальныйНабор"
											И Объект.ИспользоватьУпаковки)
											Или Не Объект.ИспользоватьУпаковки;
	
	ДоступностьШаблоновЭтикеток = ИспользоватьИндивидуальныйШаблонЭтикетки = 1;
	Элементы.ШаблонЭтикетки.Доступность = ДоступностьШаблоновЭтикеток;
	
	ДоступностьШаблоновЦенников = ИспользоватьИндивидуальныйШаблонЦенника = 1;
	Элементы.ШаблонЦенника.Доступность = ДоступностьШаблоновЦенников;
	
	Элементы.ГруппаДоступа.Доступность = ЗначениеЗаполнено(Объект.Ссылка);
	
	Элементы.ОбъемДАЛ.Доступность = Не Объект.АлкогольнаяПродукцияВоВскрытойТаре;
	
	// Настройка видимости и заголовков
	
	НастройкиВидимостиИЗаголовков = Справочники.Номенклатура.НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные);
	
	ВидимостьЭлементов = НастройкиВидимостиИЗаголовков.ВидимостьЭлементов;
	ЗаголовкиЭлементов = НастройкиВидимостиИЗаголовков.ЗаголовкиЭлементов;
	
	НастроитьЭлементыМеры("Вес",	ВидимостьЭлементов, ЗаголовкиЭлементов, РежимВидимостиПоказатьТолькоВажные);
	НастроитьЭлементыМеры("Объем",	ВидимостьЭлементов, ЗаголовкиЭлементов, РежимВидимостиПоказатьТолькоВажные);
	НастроитьЭлементыМеры("Площадь",ВидимостьЭлементов, ЗаголовкиЭлементов, РежимВидимостиПоказатьТолькоВажные);
	НастроитьЭлементыМеры("Длина",	ВидимостьЭлементов, ЗаголовкиЭлементов, РежимВидимостиПоказатьТолькоВажные);
	
	Для Каждого ЭлементВидимость Из ВидимостьЭлементов Цикл
		
		Если Элементы.Найти(ЭлементВидимость.Ключ) <> Неопределено Тогда
			Элементы[ЭлементВидимость.Ключ].Видимость = ЭлементВидимость.Значение;
		КонецЕсли;
		
		// Формирование видимости элементов подменю "Перейти"
		ИмяКоманды = ЭлементВидимость.Ключ;
		Если СтрНачинаетсяС(ИмяКоманды,"Гиперссылка") Тогда
			ИмяКоманды = СтрЗаменить(ИмяКоманды, "Гиперссылка", "Команда");
			
			Если Элементы.Найти(ИмяКоманды) <> Неопределено Тогда
				Элементы[ИмяКоманды].Видимость = ЭлементВидимость.Значение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементЗаголовок Из ЗаголовкиЭлементов Цикл
		
		ИмяЭлемента = ЭлементЗаголовок.Ключ;
		
		ЗаголовокЭлемента = ЗаголовокГиперссылки(ЭлементЗаголовок);
		
		ЭлементУправления = Элементы.Найти(ИмяЭлемента);
		
		Если  ЭлементУправления <> Неопределено
			И ТипЗнч(ЭлементУправления) <> Тип("ГруппаФормы") Тогда
			ЭлементУправления.Заголовок = ЗаголовокЭлемента;
		КонецЕсли;
		
		// Формирование заголовков элементов подменю "Перейти"
		Если СтрНачинаетсяС(ИмяЭлемента,"Гиперссылка") Тогда
			
			ИмяКоманды = СтрЗаменить(ИмяЭлемента, "Гиперссылка", "Команда");
			
			Если Элементы.Найти(ИмяКоманды) <> Неопределено Тогда
				
				СтрокаИсключение = НСтр("ru = 'Список'");
				НачалоСтроки     = СтрНайти(ЗаголовокЭлемента, "(") - 1;
				
				Если СтрНайти(ЗаголовокЭлемента, СтрокаИсключение) = 0
					И НачалоСтроки > 0 Тогда
					
					Элементы[ИмяКоманды].Заголовок = СокрЛП(Лев(ЗаголовокЭлемента, НачалоСтроки));
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПриПолученииДанныхКартинкиВозниклаОшибка Тогда
		Элементы.ФайлКартинки.ТекстНевыбраннойКартинки	= НСтр("ru = 'Ошибка при чтении файла изображения'");
		Элементы.ФайлКартинки.ЦветТекста				= ЦветаСтиля.ПоясняющийОшибкуТекст;
	Иначе
		Элементы.ФайлКартинки.ТекстНевыбраннойКартинки	= НСтр("ru = 'Добавить изображение'");
		Элементы.ФайлКартинки.ЦветТекста				= ЦветаСтиля.ЦветТекстаНевыбраннойКартинки;
	КонецЕсли;
	
	НастроитьВидимостьСворачиваемыхГрупп();
	
	КарточкаНоменклатуры = Справочники.Номенклатура.ТабличныйДокументКарточкиНоменклатуры(Объект, НастройкиВидимостиИЗаголовков);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьСворачиваемыхГрупп()
	
	ИменаСворачиваемыхГрупп = ИменаСворачиваемыхГрупп();
	
	Для Каждого ИмяГруппы Из ИменаСворачиваемыхГрупп Цикл
		
		НастроитьВидимостьСворачиваемойГруппы(ИмяГруппы);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьСворачиваемойГруппы(ИмяГруппы)
	
	ЭлементСворачиваяГруппа = Элементы["СворачиваемаяГруппа" + ИмяГруппы];
	Элементы["ГруппаЗаголовок" + ИмяГруппы].Видимость = ЕстьВидимыеЭлементыВГруппе(ЭлементСворачиваяГруппа);
	
КонецПроцедуры

&НаСервере
Функция ЕстьВидимыеЭлементыВГруппе(Элемент)
	Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") Тогда
			Если ПодчиненныйЭлемент.Видимость 
				И ЕстьВидимыеЭлементыВГруппе(ПодчиненныйЭлемент) Тогда
				Возврат Истина;
			КонецЕсли;
		Иначе
			Если ПодчиненныйЭлемент.Видимость Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура СвернутьРазвернутьГруппу(Элемент)
	ИмяГруппыСвернутьРазвернуть = Элемент.Имя;
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ДекорацияОткрыть", "");
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ДекорацияЗакрыть", "");
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ЗаголовокГруппы", "");
	ИзменитьСвернутостьГруппы(ИмяГруппыСвернутьРазвернуть);
	ПодключитьОбработчикОжидания("УстановитьАктивностьПослеСворачиванияРазворачиванияГруппы",0.0001,Истина);
КонецПроцедуры

&НаСервере
Процедура ИзменитьСвернутостьГруппы(ИмяГруппы, Свернуть = Неопределено)
	Элементы["СворачиваемаяГруппа" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["СворачиваемаяГруппа" + ИмяГруппы].Видимость, Не Свернуть);
	Элементы["ДекорацияОткрыть" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["ДекорацияОткрыть" + ИмяГруппы].Видимость, Свернуть);
	Элементы["ДекорацияЗакрыть" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["ДекорацияЗакрыть" + ИмяГруппы].Видимость, Не Свернуть);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАктивностьПослеСворачиванияРазворачиванияГруппы()
	Если Элементы["ДекорацияОткрыть" + ИмяГруппыСвернутьРазвернуть].Видимость Тогда
		ТекущийЭлемент = Элементы["ДекорацияОткрыть" + ИмяГруппыСвернутьРазвернуть];
	Иначе
		ТекущийЭлемент = Элементы["ДекорацияЗакрыть" + ИмяГруппыСвернутьРазвернуть];
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РазвернутьСворачиваемуюГруппу(ИмяГруппы)
	ГруппаРодитель  = Элементы[ИмяГруппы].Родитель;
	Если ГруппаРодитель = ЭтаФорма Тогда
		Возврат;
	КонецЕсли;
	ИмяГруппыРодителя =ГруппаРодитель.Имя;
	
	Если СтрНайти(ИмяГруппыРодителя, "СворачиваемаяГруппа") = 0 Тогда
		РазвернутьСворачиваемуюГруппу(ИмяГруппыРодителя);
	Иначе
		ИмяГруппыРодителя = СтрЗаменить(ИмяГруппыРодителя, "СворачиваемаяГруппа", "");
		ИзменитьСвернутостьГруппы(ИмяГруппыРодителя, Ложь);
	КонецЕсли;
КонецПроцедуры

#Область НастройкаВидимостиГруппИЭлементовПереключательРежима

&НаКлиенте
Процедура НастройкаВидимостиФормыПриИзменении(Элемент)
	
	Если НастройкаВидимостиФормы = "ПоказатьВсе" Тогда
		РежимВидимостиПоказатьТолькоВажные = Ложь;
		НастроитьФормуИОбновитьКарточку();
		СкрытьРаскрытьВсеГруппы(Ложь);
	ИначеЕсли НастройкаВидимостиФормы = "ПоказатьОсновные" Тогда
		РежимВидимостиПоказатьТолькоВажные = Истина;
		НастроитьФормуИОбновитьКарточку();
		СкрытьРаскрытьВсеГруппы(Ложь);
	Иначе
		РежимВидимостиПоказатьТолькоВажные = Ложь;
		НастроитьФормуИОбновитьКарточку();
		СкрытьРаскрытьВсеГруппы(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьРаскрытьВсеГруппы(Свернуть = Неопределено)
	
	ИменаСворачиваемыхГрупп = ИменаСворачиваемыхГрупп();
	
	Для Каждого ИмяГруппы Из ИменаСворачиваемыхГрупп Цикл
		
		ИзменитьСвернутостьГруппы(ИмяГруппы, Свернуть);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЕдиницыИзмерения

&НаСервере
Процедура НастроитьЭлементыМеры(Мера, СтруктураВидимостиЭлементов, СтруктураЗаголовковЭлементов, РежимВидимостиПоказатьТолькоВажные)
	
	ДоступностьМеры = ПравоДоступа("Редактирование", Метаданные.Справочники.Номенклатура.Реквизиты[Мера + "ЕдиницаИзмерения"]);
	
	Если Не ЗначениеЗаполнено(Объект.ЕдиницаИзмерения) Тогда
		ВидимостьМеры = Объект[Мера + "Использовать"];
		Элементы[Мера + "Использовать"].Доступность = ДоступностьМеры;
	Иначе
		
		ТипЕдиницы = "";
		
		Если Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(Объект.ЕдиницаИзмерения, ТипЕдиницы)
			И Мера = ТипЕдиницы Тогда
			ДоступностьМеры = Ложь;
			Элементы[Мера + "Использовать"].Доступность = ДоступностьМеры;
			ВидимостьМеры = Ложь;
		Иначе
			
			Элементы[Мера + "Использовать"].Доступность = ДоступностьМеры;
			ВидимостьМеры = Объект[Мера + "Использовать"] И СтруктураВидимостиЭлементов[Мера + "Использовать"];
		КонецЕсли;
	КонецЕсли;
	
	ВидимостьМеры = ВидимостьМеры;
	
	СтруктураВидимостиЭлементов.Вставить(Мера + "Отступ", 						ВидимостьМеры);
	СтруктураВидимостиЭлементов.Вставить(Мера + "Знаменатель", 					ВидимостьМеры);
	СтруктураВидимостиЭлементов.Вставить(Мера + "Надпись", 						ВидимостьМеры);
	СтруктураВидимостиЭлементов.Вставить(Мера + "Числитель", 					ВидимостьМеры);
	СтруктураВидимостиЭлементов.Вставить(Мера + "ЕдиницаИзмерения", 			ВидимостьМеры);
	СтруктураВидимостиЭлементов.Вставить(Мера + "МожноУказыватьВДокументах", 	ВидимостьМеры);
	
	Если Мера = "Вес" Тогда
		ТекстЗаголовкаНадписи = НСтр("ru = '%ЕдиницаИзмерения% весит'");
	ИначеЕсли Мера = "Объем" Тогда
		ТекстЗаголовкаНадписи = НСтр("ru = '%ЕдиницаИзмерения% занимает объем'");
	ИначеЕсли Мера = "Площадь" Тогда
		ТекстЗаголовкаНадписи = НСтр("ru = '%ЕдиницаИзмерения% имеет площадь'");
	ИначеЕсли Мера = "Длина" Тогда
		ТекстЗаголовкаНадписи = НСтр("ru = '%ЕдиницаИзмерения% имеет длину'");
	КонецЕсли;
	
	ТекстЗаголовкаНадписи = СтрЗаменить(ТекстЗаголовкаНадписи, "%ЕдиницаИзмерения%", Строка(Объект.ЕдиницаИзмерения));
	СтруктураЗаголовковЭлементов.Вставить(Мера + "Надпись", ТекстЗаголовкаНадписи);
	
	ТекстПредставленияЗначения = НСтр("ru = 'Можно указывать количество в %ЕдиницаИзмеренияМеры% в документах'");
	ТекстПредставленияЗначения = СтрЗаменить(ТекстПредставленияЗначения, "%ЕдиницаИзмеренияМеры%", Строка(Объект[Мера + "ЕдиницаИзмерения"]));
	
	Элементы[Мера + "МожноУказыватьВДокументах"].Доступность = ДоступностьМеры;
	Элементы[Мера + "МожноУказыватьВДокументах"].СписокВыбора[1].Представление = ТекстПредставленияЗначения;
	
КонецПроцедуры

&НаСервере
Процедура ПреобразоватьМожноУказыватьВДокументахВСтроку(Мера)
	
	Если Объект[Мера + "МожноУказыватьВДокументах"] Тогда
		ЭтотОбъект[Мера + "МожноУказыватьВДокументахСтрока"] = "МожноВыбиратьВДокументах";
	Иначе
		ЭтотОбъект[Мера + "МожноУказыватьВДокументахСтрока"] = "Справочно";
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура МераМожноУказыватьВДокументахПриИзменении(Мера)
	
	Если ЭтотОбъект[Мера + "МожноУказыватьВДокументахСтрока"] = "МожноВыбиратьВДокументах" Тогда
		Объект[Мера + "МожноУказыватьВДокументах"] = Истина;
	Иначе
		Объект[Мера + "МожноУказыватьВДокументах"] = Ложь;
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура МераИспользоватьПриИзмененииСервер(Мера)
	
	Если Объект[Мера + "Использовать"] Тогда
		Объект[Мера + "Знаменатель"] = 1;
		Объект[Мера + "ЕдиницаИзмерения"] = НоменклатураСервер.ЕдиницаИзмеренияПоУмолчанию(Мера);
	КонецЕсли;
	
	НастроитьФормуИОбновитьКарточку();
	
КонецПроцедуры

&НаСервере
Процедура ЕдиницаИзмеренияПриИзмененииСервер()
	Если Объект.КоэффициентЕдиницыДляОтчетов = 1 Тогда
		Объект.ЕдиницаДляОтчетов = Объект.ЕдиницаИзмерения;
	КонецЕсли;
	
	Если Объект.ЕдиницаДляОтчетов = Объект.ЕдиницаИзмерения Тогда
		Объект.КоэффициентЕдиницыДляОтчетов = 1;
	КонецЕсли;
	
	ТипЕдиницы = "";
	
	ЭтоМернаяЕдиница = Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(Объект.ЕдиницаИзмерения, ТипЕдиницы);
	Справочники.Номенклатура.ОтработатьЛогикуЗаполненияМеры(Объект, ЭтоМернаяЕдиница, ТипЕдиницы, ТипЕдиницы);
	
	Если ЭтоМернаяЕдиница Тогда
		Объект.ПоставляетсяВМногооборотнойТаре   = Ложь;
	КонецЕсли;
	
	НастроитьФормуИОбновитьКарточку();
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаУникальности

&НаСервере
Процедура ПроверитьЗаполнениеОбязательныхРеквизитов(Отказ)
	
	ТекстОшибки = НСтр("ru='Поле ""%ИмяРеквизита%"" не заполнено'");
	
	Если Не ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
		
		ТекстСообщения = СтрЗаменить(ТекстОшибки, "%ИмяРеквизита%", НСтр("ru = 'Вид номенклатуры'"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Объект.ВидНоменклатуры",,Отказ);
		
		Возврат;
		
	КонецЕсли;
	
	НепроверяемыеРеквизиты = Справочники.Номенклатура.НепроверяемыеРеквизиты(Объект);
	
	Для Каждого СтрокаТаблицы Из ТаблицаНастроекРеквизитов Цикл
		
		Если СтрокаТаблицы.ЭтоДопРеквизит Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не СтрокаТаблицы.ЗаполнятьОбязательно
			Или (НепроверяемыеРеквизиты.Найти(СтрокаТаблицы.ИмяРеквизита) <> Неопределено) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ЗначениеРеквизита	= Объект[СтрокаТаблицы.ИмяРеквизита];
		ПутьКРеквизиту		= СтрокаТаблицы.ПутьКДанным;
		
		Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			
			ТекстСообщения = СтрЗаменить(ТекстОшибки, "%ИмяРеквизита%", СтрокаТаблицы.Представление);
			
			Если СтрокаТаблицы.ИмяРеквизита = "ФайлКартинки" Тогда
				Если Не ЗначениеЗаполнено(Объект.Ссылка)
						И Не ЗначениеЗаполнено(АдресКартинки)
					Или ЗначениеЗаполнено(Объект.Ссылка) Тогда
					
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , ПутьКРеквизиту, , Отказ);
					
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТаблицы.ИмяРеквизита = "ФайлОписанияДляСайта" Тогда
				Если Не ЗначениеЗаполнено(Объект.Ссылка)
						И Не ЗначениеЗаполнено(ПутьКФайлуОписанию)
					Или ЗначениеЗаполнено(Объект.Ссылка) Тогда
					
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , ПутьКРеквизиту, , Отказ);
					
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ,"Объект." + СтрокаТаблицы.ИмяРеквизита, ,Отказ);
			
		КонецЕсли;
	
	КонецЦикла;
	
	ПроверяемыеРеквизиты = Новый Массив;
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
	Если Отказ
		И Не РежимВидимостиПоказатьТолькоВажные Тогда
		
		НастройкаВидимостиФормы				= "ПоказатьВсе";
		РежимВидимостиПоказатьТолькоВажные	= Ложь;
		
		НастроитьФормуИОбновитьКарточку();
		СкрытьРаскрытьВсеГруппы(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВозможностьСозданияИзмененияЭлементаПоГруппеДоступа(Отказ)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГруппыДоступаНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = "";
	
	Если ЗначениеЗаполнено(Объект.ГруппаДоступа) Тогда
		
		Если Не Справочники.ГруппыДоступаНоменклатуры.ЕстьПравоИзменения(Новый Структура("ГруппаДоступа, Ссылка", Объект.ГруппаДоступа, Объект.Ссылка)) Тогда
			
			ТекстСообщения = НСтр("ru = 'Недостаточно прав на создание номенклатуры по этой группе доступа %ГруппаДоступа%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ГруппаДоступа%", Объект.ГруппаДоступа);
			
		КонецЕсли;
		
	Иначе
		ТекстСообщения = НСтр("ru = 'В виде номенклатуры ""%ГруппаДоступа%"" не указана группа доступа. Невозможно создать номенклатуру этого вида.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ГруппаДоступа%", Объект.ГруппаДоступа);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.ВидНоменклатуры",,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьУникальностьЭлементаПоШтрихкоду()
	
	Если Не ЗначениеЗаполнено(Штрихкод) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Номенклатура                   КАК Ссылка,
	|	ШтрихкодыНоменклатуры.Номенклатура.Наименование      КАК Наименование
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод";
	
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Отбор.Ссылка = Выборка.Ссылка;
		НайденныеСтроки = ТаблицаНайдено.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = ТаблицаНайдено.Добавить();
			
			НоваяСтрока.Ссылка				= Выборка.Ссылка;
			НоваяСтрока.НайденоПоШтрихкоду	= Истина;
		Иначе
			НайденныеСтроки[0].НайденоПоШтрихкоду = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьУникальностьПоРабочемуНаименованию()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка <> &Ссылка
	|	И Номенклатура.Наименование = &Наименование
	|	И НЕ Номенклатура.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("Ссылка",       Объект.Ссылка);
	Запрос.УстановитьПараметр("Наименование", Объект.Наименование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Отбор = Новый Структура("Ссылка");
	
	Пока Выборка.Следующий() Цикл
		
		Отбор.Ссылка = Выборка.Ссылка;
		НайденныеСтроки = ТаблицаНайдено.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = ТаблицаНайдено.Добавить();
			
			НоваяСтрока.Ссылка					= Выборка.Ссылка;
			НоваяСтрока.НайденоПоНаименованию	= Истина;
		Иначе
			НайденныеСтроки[0].НайденоПоНаименованию = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьУникальностьСформироватьНаименования(ЭтоЗапись, Отказ = Ложь)

	Если Не Отказ Тогда
		ПроверитьВозможностьСозданияИзмененияЭлементаПоГруппеДоступа(Отказ);
	КонецЕсли;
		
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаНайдено.Очистить();
	
	Если Константы.КонтролироватьУникальностьНоменклатурыПоСочетаниюЗначенийРеквизитов.Получить()
		И Не ЗначениеЗаполнено(Объект.Ссылка)
		И Не КонтрольУникальностиПередЗаписьюПроведен Тогда
		
		Справочники.Номенклатура.ПроверитьУникальностьЭлементаПоРеквизитам(ЭтотОбъект);
		
		Если ЗначениеЗаполнено(Штрихкод) Тогда
			ПроверитьУникальностьЭлементаПоШтрихкоду();
		КонецЕсли;
	КонецЕсли;	
	
	Если ЭтоЗапись Тогда
		Если ФормироватьРабочееНаименование
			И ФормироватьНаименованиеДляПечати Тогда
			ЗаполнитьНаименованиеПоШаблонуСервер("Оба");
		ИначеЕсли ФормироватьРабочееНаименование Тогда
			ЗаполнитьНаименованиеПоШаблонуСервер("Рабочее");
		ИначеЕсли ФормироватьНаименованиеДляПечати Тогда
			ЗаполнитьНаименованиеПоШаблонуСервер("ДляПечати");
		КонецЕсли;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Объект.Наименование)
		И Константы.КонтролироватьУникальностьРабочегоНаименованияНоменклатурыИХарактеристик.Получить() Тогда
		ПроверитьУникальностьПоРабочемуНаименованию();
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Наименование) И ЭтоЗапись Тогда
		ТекстСообщения = НСтр("ru='Поле ""Рабочее наименование"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Наименование", "Объект"); 
		Отказ = Истина;
	КонецЕсли;
	
	ТаблицаНайдено.Сортировать("Ссылка");
	Если ТаблицаНайдено.Количество() > 0 Тогда
		Отказ = Истина;
		Возврат ПоместитьВоВременноеХранилище(ТаблицаНайдено.Выгрузить(),УникальныйИдентификатор);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура НастроитьДоступностьБлокируемыхРеквизитов()

	Элементы.ИспользоватьУпаковки.ТолькоПросмотр = Объект.ИспользоватьУпаковки;
	Элементы.ИспользованиеУпаковокИндивидуальныйНабор.ТолькоПросмотр = Объект.ИспользоватьУпаковки;
	Элементы.ИспользованиеУпаковокОбщийНабор.ТолькоПросмотр = Объект.ИспользоватьУпаковки;
	Элементы.НаборУпаковок.ТолькоПросмотр = Объект.ИспользоватьУпаковки;
	
КонецПроцедуры

&НаКлиенте
Функция ИмяГиперссылкиПоИмениКоманды(ИмяКоманды)
	
	ИмяГиперссылки = ИмяКоманды;
	ИмяГиперссылки = СтрЗаменить(ИмяГиперссылки, "Команда", "Гиперссылка");
	
	Возврат ИмяГиперссылки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоПараметрам()
	
	Если Параметры.Свойство("ДополнительныеПараметры")И
		(Параметры.ДополнительныеПараметры.Свойство("ВидАлкогольнойПродукцииЕГАИС")
			И ЗначениеЗаполнено(Параметры.ДополнительныеПараметры.ВидАлкогольнойПродукцииЕГАИС))
		Или (Параметры.ДополнительныеПараметры.Свойство("ИмпортерЕГАИС")
			И ЗначениеЗаполнено(Параметры.ДополнительныеПараметры.ИмпортерЕГАИС))
		Или (Параметры.ДополнительныеПараметры.Свойство("ОбъемЕГАИС")
			И ЗначениеЗаполнено(Параметры.ДополнительныеПараметры.ОбъемЕГАИС))
		Или (Параметры.ДополнительныеПараметры.Свойство("ПроизводительЕГАИС")
			И ЗначениеЗаполнено(Параметры.ДополнительныеПараметры.ПроизводительЕГАИС))
		Или (Параметры.ДополнительныеПараметры.Свойство("КрепостьЕГАИС")
			И ЗначениеЗаполнено(Параметры.ДополнительныеПараметры.КрепостьЕГАИС))Тогда
		
		РеквизитыЕГАИССтруктура = Новый Структура();
		РеквизитыЕГАИССтруктура.Вставить("ВидАлкогольнойПродукцииЕГАИС");
		РеквизитыЕГАИССтруктура.Вставить("ИмпортерЕГАИС");
		РеквизитыЕГАИССтруктура.Вставить("ПроизводительЕГАИС");
		РеквизитыЕГАИССтруктура.Вставить("ОбъемЕГАИС", 0);
		РеквизитыЕГАИССтруктура.Вставить("КрепостьЕГАИС", 0);
		
		ЗаполнитьЗначенияСвойств(РеквизитыЕГАИССтруктура, Параметры.ДополнительныеПараметры);
		
		РеквизитыЕГАИС = Новый ФиксированнаяСтруктура(РеквизитыЕГАИССтруктура);
		
		Запрос = Новый Запрос();
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВидыНоменклатуры.Ссылка) КАК Количество
		|ПОМЕСТИТЬ ВТКоличествоВидовНоменклатурыСАлкогольнойПродукциейИВидом
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|ГДЕ
		|	ВидыНоменклатуры.АлкогольнаяПродукция = ИСТИНА
		|	И ВидыНоменклатуры.ВидАлкогольнойПродукции = &ВидАлкогольнойПродукции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВидыНоменклатуры.Ссылка) КАК Количество
		|ПОМЕСТИТЬ ВТКоличествоВидовНоменклатурыСАлкогольнойПродукцией
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|ГДЕ
		|	ВидыНоменклатуры.АлкогольнаяПродукция = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыНоменклатуры.Ссылка КАК Ссылка,
		|	ТаблицаКоличество.Количество КАК Количество
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоВидовНоменклатурыСАлкогольнойПродукциейИВидом КАК ТаблицаКоличество
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВидыНоменклатуры.АлкогольнаяПродукция = ИСТИНА
		|	И ВидыНоменклатуры.ВидАлкогольнойПродукции = &ВидАлкогольнойПродукции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыНоменклатуры.Ссылка КАК Ссылка,
		|	ТаблицаКоличество.Количество КАК Количество
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоВидовНоменклатурыСАлкогольнойПродукцией КАК ТаблицаКоличество
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВидыНоменклатуры.АлкогольнаяПродукция = ИСТИНА";
		Запрос.УстановитьПараметр("ВидАлкогольнойПродукции", РеквизитыЕГАИССтруктура.ВидАлкогольнойПродукцииЕГАИС);
		Результат = Запрос.ВыполнитьПакет();
		ВыборкаПоВидуАлкогольнойПродукции = Результат[2].Выбрать();
		ВыборкаПоАлкогольнойПродукции = Результат[3].Выбрать();
		
		Если ВыборкаПоВидуАлкогольнойПродукции.Следующий() Тогда
			Если ВыборкаПоВидуАлкогольнойПродукции.Количество = 1 Тогда
				Объект.ВидНоменклатуры = ВыборкаПоВидуАлкогольнойПродукции.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ВидНоменклатуры)
			И ВыборкаПоАлкогольнойПродукции.Следующий() Тогда
			Если ВыборкаПоАлкогольнойПродукции.Количество = 1 Тогда
				Объект.ВидНоменклатуры = ВыборкаПоАлкогольнойПродукции.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Не ЗначениеЗаполнено(Объект.ВидНоменклатуры)
		И Параметры.Свойство("ДополнительныеПараметры")
		И (Параметры.ДополнительныеПараметры.Свойство("НаименованиеНоменклатурыВЕТИС")
			Или Параметры.ДополнительныеПараметры.Свойство("АртикулНоменклатурыВЕТИС")
			Или Параметры.ДополнительныеПараметры.Свойство("ШтрихкодВЕТИС")
			Или Параметры.ДополнительныеПараметры.Свойство("ЕдиницаИзмеренияВЕТИС")) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВидыНоменклатуры.Ссылка) КАК Количество
		|ПОМЕСТИТЬ ВТКоличествоВидовНоменклатурыВЕТИС
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|ГДЕ
		|	ВидыНоменклатуры.ПодконтрольнаяПродукцияВЕТИС
		|	Или ВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС)
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////// 1
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыНоменклатуры.Ссылка      КАК Ссылка,
		|	ТаблицаКоличество.Количество КАК Количество
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоВидовНоменклатурыВЕТИС КАК ТаблицаКоличество
		|		ПО ИСТИНА
		|ГДЕ
		|	ВидыНоменклатуры.ПодконтрольнаяПродукцияВЕТИС
		|	Или ВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий()
			И Выборка.Количество = 1 Тогда
			
			Объект.ВидНоменклатуры = Выборка.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		СправочникОбъект = РеквизитФормыВЗначение("Объект");
		СправочникОбъект.Заполнить(Неопределено);
		ЗначениеВРеквизитФормы(СправочникОбъект, "Объект");
		
		ЕстьПравоРедактирования = Истина;
		
		// Новый элемент номенклатуры создан копированием, реквизиты формы заполняются
		// значениями реквизитов параметра копирования.
		ИсточникКопирования = Параметры.ЗначениеКопирования;
		ЗаполнитьЗначенияСвойств(Объект, ИсточникКопирования, , "ГруппаДоступа, ФайлКартинки, ФайлОписанияДляСайта, 
																|ДополнительныеРеквизиты, ДрагоценныеМатериалы, Код, 
																|ПометкаУдаления");
		
		Объект.ДополнительныеРеквизиты.Загрузить(ИсточникКопирования.ДополнительныеРеквизиты.Выгрузить());
		
		СтруктураРеквизитовОбъектаКопирования = Новый Структура;
		СтруктураРеквизитовОбъектаКопирования.Вставить("ОбъектКопирования",          ИсточникКопирования);
		СтруктураРеквизитовОбъектаКопирования.Вставить("Наименование",               Объект.Наименование);
		СтруктураРеквизитовОбъектаКопирования.Вставить("ВидНоменклатуры",            Объект.ВидНоменклатуры);
		СтруктураРеквизитовОбъектаКопирования.Вставить("ИспользоватьУпаковки",       Объект.ИспользоватьУпаковки);
		СтруктураРеквизитовОбъектаКопирования.Вставить("НаборУпаковок",              Объект.НаборУпаковок);
		СтруктураРеквизитовОбъектаКопирования.Вставить("ИспользованиеХарактеристик", Объект.ИспользованиеХарактеристик);
		СтруктураРеквизитовОбъектаКопирования.Вставить("ТипНоменклатуры",            Объект.ТипНоменклатуры);
		
		РеквизитыОбъектаКопирования = Новый ФиксированнаяСтруктура(СтруктураРеквизитовОбъектаКопирования);
		
		НаименованиеЗаполнение       = Объект.Наименование;
		НаименованиеПолноеЗаполнение = Объект.НаименованиеПолное;
		ВидНоменклатуры              = Объект.ВидНоменклатуры;
		ВидНоменклатурыДоИзменения   = Объект.ВидНоменклатуры;
		ГруппаНоменклатуры           = Объект.Родитель;
		
		Если Параметры.Свойство("СозданиеНекачественногоТовара") Тогда
			
			Автозаголовок = Ложь;
			
			ТекстЗаголовка = НСтр("ru='Создание номенклатуры для испорченного товара ""%НаименованиеТовара%"".'");
			Заголовок = СтрЗаменить(ТекстЗаголовка, "%НаименованиеТовара%", Строка(Объект.Наименование));
			
			Объект.Качество        = Параметры.СозданиеНекачественногоТовара;
			Объект.СкладскаяГруппа = Справочники.СкладскиеГруппыНоменклатуры.ПустаяСсылка();
			Объект.ЦеноваяГруппа   = Справочники.ЦеновыеГруппы.ПустаяСсылка();
			Объект.ФайлКартинки    = Справочники.НоменклатураПрисоединенныеФайлы.ПустаяСсылка();
			
			НаименованиеЗаполнение       = Объект.Наименование + ", " + Строка(Объект.Качество);
			НаименованиеПолноеЗаполнение = Объект.НаименованиеПолное + ", " + Строка(Объект.Качество);
			
		ИначеЕсли Параметры.Свойство("НаименованиеНоменклатурыПартнера") 
			И ЗначениеЗаполнено(Параметры.НаименованиеНоменклатурыПартнера) Тогда
			
			НаименованиеЗаполнение = Параметры.НаименованиеНоменклатурыПартнера;
			
		ИначеЕсли Параметры.ДополнительныеПараметры.Свойство("НаименованиеНоменклатурыЕГАИС")
			Или Параметры.ДополнительныеПараметры.Свойство("ПолноеНаименованиеНоменклатурыЕГАИС") Тогда
			
			Если Параметры.ДополнительныеПараметры.Свойство("НаименованиеНоменклатурыЕГАИС")
				И ЗначениеЗаполнено(Параметры.ДополнительныеПараметры.НаименованиеНоменклатурыЕГАИС) Тогда
				НаименованиеЗаполнение = Параметры.ДополнительныеПараметры.НаименованиеНоменклатурыЕГАИС;
			КонецЕсли;
			
			Если Параметры.ДополнительныеПараметры.Свойство("ПолноеНаименованиеНоменклатурыЕГАИС")
				И ЗначениеЗаполнено(Параметры.ДополнительныеПараметры.ПолноеНаименованиеНоменклатурыЕГАИС) Тогда
				НаименованиеПолноеЗаполнение = Параметры.ДополнительныеПараметры.ПолноеНаименованиеНоменклатурыЕГАИС;
			КонецЕсли;
			
		ИначеЕсли Параметры.ДополнительныеПараметры.Свойство("НаименованиеНоменклатурыВЕТИС")
			И ЗначениеЗаполнено(Параметры.ДополнительныеПараметры.НаименованиеНоменклатурыВЕТИС) Тогда
			
			НаименованиеЗаполнение = Параметры.ДополнительныеПараметры.НаименованиеНоменклатурыВЕТИС;
			
		КонецЕсли;
		
		Если Параметры.Свойство("АртикулНоменклатурыПартнера")
			И ЗначениеЗаполнено(Параметры.АртикулНоменклатурыПартнера) Тогда
			
			Объект.Артикул = Параметры.АртикулНоменклатурыПартнера;
			
		ИначеЕсли Параметры.ДополнительныеПараметры.Свойство("АртикулНоменклатурыВЕТИС")
			И ЗначениеЗаполнено(Параметры.ДополнительныеПараметры.АртикулНоменклатурыВЕТИС) Тогда
			
			Объект.Артикул = Параметры.ДополнительныеПараметры.АртикулНоменклатурыВЕТИС;
			
		КонецЕсли;
		
		Если Параметры.ДополнительныеПараметры.Свойство("ШтрихкодВЕТИС")
			И ЗначениеЗаполнено(Параметры.ДополнительныеПараметры.ШтрихкодВЕТИС) Тогда
			
			Штрихкод = Параметры.ДополнительныеПараметры.ШтрихкодВЕТИС;
			
		КонецЕсли;
		
		Если Параметры.ДополнительныеПараметры.Свойство("ЕдиницаИзмеренияВЕТИС")
			И ЗначениеЗаполнено(Параметры.ДополнительныеПараметры.ЕдиницаИзмеренияВЕТИС) Тогда
			
			Объект.ЕдиницаИзмерения = Параметры.ДополнительныеПараметры.ЕдиницаИзмеренияВЕТИС;
			
			ТипЕдиницы = "";
			ЭтоМернаяЕдиница = Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(Объект.ЕдиницаИзмерения, ТипЕдиницы);
			
			Справочники.Номенклатура.ОтработатьЛогикуЗаполненияМеры(Объект, ЭтоМернаяЕдиница, ТипЕдиницы, ТипЕдиницы);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИсточникКопирования.ФайлКартинки)
			Или ЗначениеЗаполнено(ИсточникКопирования.ФайлОписанияДляСайта) Тогда
			
			СкопироватьПрисоединенныеФайлы(ИсточникКопирования.ФайлКартинки, ИсточникКопирования.ФайлОписанияДляСайта);
			
		КонецЕсли;
		
		ЕстьИндивидуальныеХарактеристикиВОбъектеКопирования = 
			(РеквизитыОбъектаКопирования.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры);
		
		Объект.Наименование       = НаименованиеЗаполнение;
		Объект.НаименованиеПолное = НаименованиеПолноеЗаполнение;
		
		ЕстьИндивидуальныеУпаковкиВОбъектеКопирования = РеквизитыОбъектаКопирования.ИспользоватьУпаковки 
			И (РеквизитыОбъектаКопирования.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры);
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция
		|ИЗ
		|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
		|ГДЕ
		|	СоответствиеНоменклатурыЕГАИС.Номенклатура = &Номенклатура
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////// 1
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СоответствиеНоменклатурыВЕТИС.Продукция КАК ПродукцияВЕТИС
		|ИЗ
		|	РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатурыВЕТИС
		|ГДЕ
		|	СоответствиеНоменклатурыВЕТИС.Номенклатура = &Номенклатура";
		
		Запрос.УстановитьПараметр("Номенклатура", ИсточникКопирования);
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		УстановитьПривилегированныйРежим(Ложь);
		
		ЕстьСвязьСКлассификаторомАлкогольнойПродукцииЕГАИСВОбъектеКопирования = Не РезультатЗапроса[0].Пустой();
		ЕстьСвязьСКлассификаторомПродукцииВЕТИСВОбъектеКопирования            = Не РезультатЗапроса[1].Пустой();
		
		КопироватьИндивидуальныеУпаковки       = ЕстьИндивидуальныеУпаковкиВОбъектеКопирования;
		КопироватьИндивидуальныеХарактеристики = ЕстьИндивидуальныеХарактеристикиВОбъектеКопирования;
		
		КопироватьСвязьСКлассификаторомАлкогольнойПродукцииЕГАИС = ЕстьСвязьСКлассификаторомАлкогольнойПродукцииЕГАИСВОбъектеКопирования;
		КопироватьСвязьСКлассификаторомПродукцииВЕТИС = ЕстьСвязьСКлассификаторомПродукцииВЕТИСВОбъектеКопирования;
		
		ВидНоменклатурыПриИзмененииНаСервере(Истина);
		
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		СправочникОбъект = РеквизитФормыВЗначение("Объект");
		СправочникОбъект.Заполнить(Неопределено);
		ЗначениеВРеквизитФормы(СправочникОбъект, "Объект");
		
		ЕстьПравоРедактирования = Истина;
		
		// Создается новый элемент номенклатуры.
		Параметры.Свойство("ВидНоменклатуры", ВидНоменклатуры);
		Параметры.Свойство("Родитель", ГруппаНоменклатуры);
		Если ВидНоменклатуры = Неопределено
			И ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
			ВидНоменклатуры = Объект.ВидНоменклатуры;
		ИначеЕсли ВидНоменклатуры = Неопределено
			И Не ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
			ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		Если ГруппаНоменклатуры = Неопределено Тогда
			ГруппаНоменклатуры = Справочники.Номенклатура.ПустаяСсылка();
		КонецЕсли;
		
		Если Параметры.Свойство("ТекстЗаполнения")
			И ЗначениеЗаполнено(Параметры.ТекстЗаполнения) Тогда
			НаименованиеЗаполнение = Параметры.ТекстЗаполнения;
		КонецЕсли;
		
		Если Параметры.Свойство("НаименованиеНоменклатурыПартнера")
			И ЗначениеЗаполнено(Параметры.НаименованиеНоменклатурыПартнера) Тогда
			НаименованиеЗаполнение = Параметры.НаименованиеНоменклатурыПартнера;
		КонецЕсли;
		
		Если Параметры.Свойство("АртикулНоменклатурыПартнера")
			И ЗначениеЗаполнено(Параметры.АртикулНоменклатурыПартнера) Тогда
			Объект.Артикул = Параметры.АртикулНоменклатурыПартнера;
		КонецЕсли;
		
		Если Параметры.ДополнительныеПараметры.Свойство("АртикулНоменклатурыВЕТИС")
			И ЗначениеЗаполнено(Параметры.ДополнительныеПараметры.АртикулНоменклатурыВЕТИС) Тогда
			
			Объект.Артикул = Параметры.ДополнительныеПараметры.АртикулНоменклатурыВЕТИС;
			
		КонецЕсли;
		
		Если Параметры.ДополнительныеПараметры.Свойство("ШтрихкодВЕТИС")
			И ЗначениеЗаполнено(Параметры.ДополнительныеПараметры.ШтрихкодВЕТИС) Тогда
			
			Штрихкод = Параметры.ДополнительныеПараметры.ШтрихкодВЕТИС;
			
		КонецЕсли;
		
		Если Параметры.ДополнительныеПараметры.Свойство("ЕдиницаИзмеренияВЕТИС")
			И ЗначениеЗаполнено(Параметры.ДополнительныеПараметры.ЕдиницаИзмеренияВЕТИС) Тогда
			
			Объект.ЕдиницаИзмерения = Параметры.ДополнительныеПараметры.ЕдиницаИзмеренияВЕТИС;
			
			ТипЕдиницы = "";
			ЭтоМернаяЕдиница = Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(Объект.ЕдиницаИзмерения, ТипЕдиницы);
			
			Справочники.Номенклатура.ОтработатьЛогикуЗаполненияМеры(Объект, ЭтоМернаяЕдиница, ТипЕдиницы, ТипЕдиницы);
			
		КонецЕсли;
		
		Если Параметры.ДополнительныеПараметры.Свойство("НаименованиеНоменклатурыЕГАИС")
			Или Параметры.ДополнительныеПараметры.Свойство("ПолноеНаименованиеНоменклатурыЕГАИС") Тогда
			
			Если Параметры.ДополнительныеПараметры.Свойство("НаименованиеНоменклатурыЕГАИС")
				И ЗначениеЗаполнено(Параметры.ДополнительныеПараметры.НаименованиеНоменклатурыЕГАИС) Тогда
				НаименованиеЗаполнение = Параметры.ДополнительныеПараметры.НаименованиеНоменклатурыЕГАИС;
			КонецЕсли;
			
			
			Если Параметры.ДополнительныеПараметры.Свойство("ПолноеНаименованиеНоменклатурыЕГАИС")
				И ЗначениеЗаполнено(Параметры.ДополнительныеПараметры.ПолноеНаименованиеНоменклатурыЕГАИС) Тогда
				НаименованиеПолноеЗаполнение = Параметры.ДополнительныеПараметры.ПолноеНаименованиеНоменклатурыЕГАИС;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Параметры.ДополнительныеПараметры.Свойство("НаименованиеНоменклатурыВЕТИС")
			И ЗначениеЗаполнено(Параметры.ДополнительныеПараметры.НаименованиеНоменклатурыВЕТИС) Тогда
			
			НаименованиеЗаполнение = Параметры.ДополнительныеПараметры.НаименованиеНоменклатурыВЕТИС;
			
		КонецЕсли;
		
		Объект.Наименование       = НаименованиеЗаполнение;
		Объект.НаименованиеПолное = НаименованиеПолноеЗаполнение;
		
		РеквизитыОбъектаКопирования = Неопределено;
		
		Объект.Качество  = Перечисления.ГрадацииКачества.Новый;
		Объект.СтавкаНДС = УчетНДСУП.СтавкаНДСПоУмолчанию();
		
		ВидНоменклатурыГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ЭтоГруппа");
		
		Если ВидНоменклатуры.Пустая()
			Или ВидНоменклатурыГруппа Тогда
			ВидНоменклатуры = Справочники.ВидыНоменклатуры.ВидНоменклатурыПоУмолчанию();
		КонецЕсли;
			
		Объект.Родитель        = ГруппаНоменклатуры;
		Объект.ВидНоменклатуры = ВидНоменклатуры;
		
		Если ЗначениеЗаполнено(ВидНоменклатуры) Тогда
			
			Если Параметры.Свойство("АдресТаблицыПараметров") Тогда
				
				СтруктураПараметровДереваОтборов = Новый Структура("ВидНоменклатуры, АдресТаблицыСопоставления");
				СтруктураПараметровДереваОтборов.ВидНоменклатуры           = ВидНоменклатуры;
				СтруктураПараметровДереваОтборов.АдресТаблицыСопоставления = Параметры.АдресТаблицыСопоставления;
				
				АдресТаблицы = Параметры.АдресТаблицыПараметров;
				
			КонецЕсли;
			
			ТаблицаДопРеквизитов = Новый ТаблицаЗначений;
			ТаблицаДопРеквизитов.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(255)));
			
			ВидНоменклатурыПриИзмененииНаСервере();
			
			Если ЗначениеЗаполнено(АдресТаблицы) Тогда
				
				ТаблицаЗначенийРеквизитов = ПолучитьИзВременногоХранилища(АдресТаблицы);
				МассивРеквизитов = ТаблицаЗначенийРеквизитов.НайтиСтроки(Новый Структура("ЭтоДопРеквизит", Ложь));
				
				Для Каждого ЭлементМассива Из МассивРеквизитов Цикл
					Объект[ЭлементМассива.ИмяРеквизита] = ЭлементМассива.ЗначениеОтбора;
				КонецЦикла;
				
				МассивДопРеквизитов = ТаблицаЗначенийРеквизитов.НайтиСтроки(Новый Структура("ЭтоДопРеквизит", Истина));
				
				Если ИспользоватьДополнительныеРеквизитыИСведения И МассивДопРеквизитов.Количество() > 0 Тогда
					
					Для Каждого ЭлементМассива Из МассивДопРеквизитов Цикл
						
						НоваяСтрока = ТаблицаДопРеквизитов.Добавить();
						НоваяСтрока.ИмяРеквизита = ЭлементМассива.ИмяРеквизита;
						
					КонецЦикла;
					
					Запрос = Новый Запрос;
					Запрос.Текст =
					"ВЫБРАТЬ
					|	ТаблицаДопРеквизитов.ИмяРеквизита
					|ПОМЕСТИТЬ ТаблицаИменСвойств
					|ИЗ
					|	&ТаблицаДопРеквизитов КАК ТаблицаДопРеквизитов
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ТаблицаИменСвойств.ИмяРеквизита КАК ИмяРеквизита,
					|	НаборыДополнительныхРеквизитов.Свойство КАК Свойство
					|ИЗ
					|	ТаблицаИменСвойств КАК ТаблицаИменСвойств
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитов
					|		ПО ТаблицаИменСвойств.ИмяРеквизита = НаборыДополнительныхРеквизитов.Свойство.Наименование
					|ГДЕ
					|	НаборыДополнительныхРеквизитов.Ссылка = &НаборРеквизитов";
					
					Запрос.УстановитьПараметр("ТаблицаДопРеквизитов", ТаблицаДопРеквизитов);
					Запрос.УстановитьПараметр("НаборРеквизитов",      РеквизитыВидаНоменклатуры.НаборСвойств);
					
					ТаблицаСвойств = Запрос.Выполнить().Выгрузить();
					СтруктураПоиска = Новый Структура("ИмяРеквизита");
					
					Для Каждого СтрокаТаблицы Из ТаблицаСвойств Цикл
						
						СтруктураПоискаЗначения = Новый Структура("Свойство", СтрокаТаблицы.Свойство);
						МассивСтрок = ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураПоискаЗначения);
						ОписаниеСвойства = МассивСтрок[0];
						ПутьКДанным = ОписаниеСвойства.ИмяРеквизитаЗначение;
						
						СтруктураПоиска.ИмяРеквизита = СтрокаТаблицы.ИмяРеквизита;
						МассивСтрокЗначение = ТаблицаЗначенийРеквизитов.НайтиСтроки(СтруктураПоиска);
						ЗначениеРеквизита = МассивСтрокЗначение[0].ЗначениеОтбора;
						ЭтаФорма[ПутьКДанным] = ЗначениеРеквизита;
						
					КонецЦикла;
					
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			ОбновитьКешРеквизитовВидаНоменклатуры();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьПрисоединенныеФайлы(ФайлКартинки, ФайлОписание)
	
	Если ЗначениеЗаполнено(ФайлКартинки) Тогда
		
		ДанныеПрисоединенногоФайла = РаботаСФайлами.ДанныеФайла(ФайлКартинки);
		
		ДанныеФайлаКартинки = Новый Структура("ПолноеИмя, ИмяБезРасширения, Расширение");
		ДанныеФайлаКартинки.ПолноеИмя			= ДанныеПрисоединенногоФайла.ИмяФайла;
		ДанныеФайлаКартинки.ИмяБезРасширения	= СтрЗаменить(ДанныеПрисоединенногоФайла.ИмяФайла,
																"." + ДанныеПрисоединенногоФайла.Расширение,
																"");
		ДанныеФайлаКартинки.Расширение			= ДанныеПрисоединенногоФайла.Расширение;
		
		// Конвертация присоединенного файла "старого" формата
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеПрисоединенногоФайла.СсылкаНаДвоичныеДанныеФайла);
		ПреобразоватьКартинкуВДвоичныеДанные(ДвоичныеДанныеФайла);
		
		Если Не ЗначениеЗаполнено(ДвоичныеДанныеФайла) Тогда
			ДанныеФайлаКартинки = Неопределено;
		КонецЕсли;
		
		АдресКартинки = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
		
	КонецЕсли;

	Если ЗначениеЗаполнено(ФайлОписание) Тогда
		
		ДанныеПрисоединенногоФайла = РаботаСФайлами.ДанныеФайла(ФайлОписание);
		
		ДанныеФайлаHTML =  Новый Структура("ПолноеИмя, ИмяБезРасширения, Расширение");
		ДанныеФайлаHTML.ПолноеИмя			= ДанныеПрисоединенногоФайла.ИмяФайла;
		ДанныеФайлаHTML.ИмяБезРасширения	= СтрЗаменить(ДанныеПрисоединенногоФайла.ИмяФайла,
															"." + ДанныеПрисоединенногоФайла.Расширение,
															"");
		ДанныеФайлаHTML.Расширение			= ДанныеПрисоединенногоФайла.Расширение;
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеПрисоединенногоФайла.СсылкаНаДвоичныеДанныеФайла);
		
		АдресОписанияHTML	= ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
		ПутьКФайлуОписанию	= Строка(ФайлОписание);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПреобразоватьКартинкуВДвоичныеДанные(ОбъектКартинка)
	
	Если ТипЗнч(ОбъектКартинка) <> Тип("Картинка") Тогда
		Возврат;
	КонецЕсли;
	
	ВременныйФайл = ПолучитьИмяВременногоФайла();
	ОбъектКартинка.Записать(ВременныйФайл);
	
	ОбъектКартинка = Новый ДвоичныеДанные(ВременныйФайл);
	
	Попытка
		УдалитьФайлы(ВременныйФайл);
	Исключение
		ИмяСобытия = НСтр("ru = 'Копирование номенклатуры. Удаление временного файла.'",
							ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(ИмяСобытия,
								УровеньЖурналаРегистрации.Ошибка,
								,
								,
								ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаписьТовараДругогоКачества()
			 
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СпрНоменклатура.ЕстьТоварыДругогоКачества КАК ЕстьТоварыДругогоКачестваВБазе,
	|	ВЫБОР
	|		КОГДА ТоварыДругогоКачества.НоменклатураБрак ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьТоварыДругогоКачестваПоФакту
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыДругогоКачества КАК ТоварыДругогоКачества
	|		ПО СпрНоменклатура.Ссылка = ТоварыДругогоКачества.Номенклатура
	|ГДЕ
	|	СпрНоменклатура.Ссылка = &Номенклатура
	|	И СпрНоменклатура.ЕстьТоварыДругогоКачества <> ВЫБОР
	|			КОГДА ТоварыДругогоКачества.НоменклатураБрак ЕСТЬ NULL 
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("Номенклатура",Объект.Ссылка);	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Объект.ЕстьТоварыДругогоКачества <> Выборка.ЕстьТоварыДругогоКачестваПоФакту Тогда
			Объект.ЕстьТоварыДругогоКачества = Выборка.ЕстьТоварыДругогоКачестваПоФакту;
		КонецЕсли;
		
		Записать();
	КонецЕсли;
	
	НастроитьФормуИОбновитьКарточку();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаименованиеПоШаблонуСервер(ВариантФормирования)
	
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, Объект);
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ВариантФормирования = "Рабочее" ИЛИ ВариантФормирования = "Оба" Тогда
		Объект.Наименование = НоменклатураСервер.НаименованиеПоШаблону(РеквизитыВидаНоменклатуры.ШаблонРабочегоНаименованияНоменклатуры, СправочникОбъект);
		СправочникОбъект.Наименование = Объект.Наименование;
	КонецЕсли;
	Если ВариантФормирования = "ДляПечати" ИЛИ ВариантФормирования = "Оба" Тогда
		Объект.НаименованиеПолное = НоменклатураСервер.НаименованиеПоШаблону(РеквизитыВидаНоменклатуры.ШаблонНаименованияДляПечатиНоменклатуры, СправочникОбъект);
	КонецЕсли;

	ПересчитатьНеобходимостьФормированияНаименований(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Функция ЗаголовокФормированияПоШаблонуРабочее()
	Возврат НСтр("ru='<Рабочее наименование будет сформировано по шаблону>'");
КонецФункции

&НаСервере
Функция ЗаголовокФормированияПоШаблонуДляПечати()
	Возврат НСтр("ru='<Наименование для печати будет сформировано по шаблону>'");
КонецФункции

&НаСервере
Процедура УстановитьДоступностьРедактированияНаименований(СкрыватьДоступность)
	
	ЗаголовокФормированияПоШаблонуРабочее = ЗаголовокФормированияПоШаблонуРабочее();
	ЗаголовокФормированияПоШаблонуДляПечати = ЗаголовокФормированияПоШаблонуДляПечати();
	
	Если РеквизитыВидаНоменклатуры.ЗапретРедактированияРабочегоНаименованияНоменклатуры Тогда
		
		Элементы.Наименование.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Наименование.ОтметкаНезаполненного = Ложь;
		
	Иначе
		
		Элементы.Наименование.АвтоОтметкаНезаполненного = Не ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.ШаблонРабочегоНаименованияНоменклатуры);
		
	КонецЕсли;
	
	Если СкрыватьДоступность Тогда
		
		Если РеквизитыВидаНоменклатуры.ЗапретРедактированияРабочегоНаименованияНоменклатуры Тогда
			Объект.Наименование = ?(ЗначениеЗаполнено(Объект.Наименование), Объект.Наименование, ЗаголовокФормированияПоШаблонуРабочее);
			ЦветТекстаНаименования = ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента;
		Иначе
			Объект.Наименование = ?(ЗначениеЗаполнено(Объект.Наименование), Объект.Наименование, "");
			ЦветТекстаНаименования = ЦветаСтиля.ЦветТекстаФормы;
		КонецЕсли;
		
			Элементы.Наименование.ТолькоПросмотр = РеквизитыВидаНоменклатуры.ЗапретРедактированияРабочегоНаименованияНоменклатуры;
			Элементы.Наименование.ЦветТекста = ЦветТекстаНаименования;
		
		Если РеквизитыВидаНоменклатуры.ЗапретРедактированияНаименованияДляПечатиНоменклатуры Тогда
			Объект.НаименованиеПолное = ?(ЗначениеЗаполнено(Объект.НаименованиеПолное), Объект.НаименованиеПолное, ЗаголовокФормированияПоШаблонуДляПечати);
			ЦветТекстаНаименования = ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента;
		Иначе
			Объект.НаименованиеПолное = ?(ЗначениеЗаполнено(Объект.НаименованиеПолное), Объект.НаименованиеПолное, "");
			ЦветТекстаНаименования = ЦветаСтиля.ЦветТекстаФормы;
		КонецЕсли;
		
		Элементы.НаименованиеПолное.ТолькоПросмотр = РеквизитыВидаНоменклатуры.ЗапретРедактированияНаименованияДляПечатиНоменклатуры;
		Элементы.НаименованиеПолное.ЦветТекста = ЦветТекстаНаименования;
		
	Иначе
		
		Если РеквизитыВидаНоменклатуры.ЗапретРедактированияРабочегоНаименованияНоменклатуры И Объект.Наименование = ЗаголовокФормированияПоШаблонуРабочее Тогда
			Объект.Наименование = ?(Объект.Наименование = ЗаголовокФормированияПоШаблонуРабочее, "", Объект.Наименование);
		КонецЕсли;
		
		Если РеквизитыВидаНоменклатуры.ЗапретРедактированияНаименованияДляПечатиНоменклатуры И Объект.НаименованиеПолное = ЗаголовокФормированияПоШаблонуДляПечати Тогда
			Объект.НаименованиеПолное = ?(Объект.НаименованиеПолное = ЗаголовокФормированияПоШаблонуДляПечати, "", Объект.НаименованиеПолное);
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ЗаполнитьНаименованиеДляПечатиПоШаблону.Доступность = ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.ШаблонНаименованияДляПечатиНоменклатуры);
	
	Элементы.ЗаполнитьРабочееНаименованиеПоШаблону.Доступность   = ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.ШаблонРабочегоНаименованияНоменклатуры);	                                                                                     

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	//
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИспользованиеУпаковокОбщийНабор.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Элементы.ИспользоватьУпаковки.ТолькоПросмотр;
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
		//
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИспользованиеУпаковокИндивидуальныйНабор.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Элементы.ИспользоватьУпаковки.ТолькоПросмотр;
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
	КонецЕсли;
	

	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиРеквизитов()
	
	СтруктураПоиска = Новый Структура("Свойство");
	
	Если ТаблицаНастроекРеквизитов.Количество() > 0 Тогда
		
		Для Каждого Строка Из ТаблицаНастроекРеквизитов Цикл
			Если Не Строка.ЗаполнятьОбязательно
				И Не Строка.Уникален Тогда
				Продолжить;
			КонецЕсли;
			 
			Если Строка.ЭтоДопРеквизит Тогда
				
				Если НЕ ИспользоватьДополнительныеРеквизитыИСведения Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураПоиска.Свойство = Строка.Свойство;
				
				НайденныеСтроки = ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураПоиска);
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ИмяЭлементаФормы = НайденныеСтроки[0].ИмяРеквизитаЗначение;
				
			Иначе
				
				ИмяЭлементаФормы = Строка.ИмяРеквизита;
				
			КонецЕсли;
			
			Если Элементы.Найти(ИмяЭлементаФормы) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Элемент = Элементы[ИмяЭлементаФормы];
			
			Если Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
				Элементы[ИмяЭлементаФормы].АвтоОтметкаНезаполненного = Ложь;
				Элементы[ИмяЭлементаФормы].ОтметкаНезаполненного     = Ложь;
				
				Элемент.ЦветФона = ЦветаСтиля.ЦветФонаПоля;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаРеквизитов = Справочники.Номенклатура.ТаблицаНастроекРеквизитов(Объект.ВидНоменклатуры,
																			Объект.ТипНоменклатуры,
																			Объект.ОсобенностьУчета,
																			Объект.ИспользованиеХарактеристик,
																			РеквизитыВидаНоменклатуры.ИспользоватьСрокГодностиСерии,
																			"Номенклатура");
	
	ТаблицаНастроекРеквизитов.Загрузить(ТаблицаРеквизитов);
	
	Справочники.Номенклатура.НастроитьФормуПоТаблицеНастроек(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ИменаСворачиваемыхГрупп()
	
	ИменаСворачиваемыхГрупп = Новый Массив;
	
	ИменаСворачиваемыхГрупп.Добавить("ОсновныеПараметрыУчета");
	ИменаСворачиваемыхГрупп.Добавить("ЕдиницыИзмерения");
	ИменаСворачиваемыхГрупп.Добавить("РегламентированныйУчет");
	ИменаСворачиваемыхГрупп.Добавить("Алкоголь");
	ИменаСворачиваемыхГрупп.Добавить("КиЗ");
	ИменаСворачиваемыхГрупп.Добавить("СведенияОПроизводителе");
	ИменаСворачиваемыхГрупп.Добавить("Классификаторы");
	
	ИменаСворачиваемыхГрупп.Добавить("КартинкаОписание");
	ИменаСворачиваемыхГрупп.Добавить("ДополнительныеРеквизиты");
	ИменаСворачиваемыхГрупп.Добавить("ПланированиеИМаркетинг");
	ИменаСворачиваемыхГрупп.Добавить("Обеспечение");
	ИменаСворачиваемыхГрупп.Добавить("Цены");
	ИменаСворачиваемыхГрупп.Добавить("Шаблоны");

	Возврат ИменаСворачиваемыхГрупп;
КонецФункции

&НаСервере
Функция ЗаголовокГиперссылки(ЭлементЗаголовок)
	Если ТипЗнч(ЭлементЗаголовок.Значение) = Тип("Строка") 
		Или ТипЗнч(ЭлементЗаголовок.Значение) = Тип("ФорматированнаяСтрока") Тогда
		Возврат ЭлементЗаголовок.Значение;
	Иначе
		Возврат ЭлементЗаголовок.Значение.Заголовок;
	КонецЕсли;	
КонецФункции

&НаСервереБезКонтекста
Функция ЕдиницаИзмерения(Знач ДрагоценныйМатериал)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДрагоценныйМатериал, "ЕдиницаИзмерения");

КонецФункции

&НаКлиенте
Процедура КодВидаНоменклатурнойКлассификацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОповещениеПриВыборе = Новый ОписаниеОповещения("НачатьВыборКодаВидаНоменклатурнойКлассификации_Завершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьВыборКодаВидаНоменклатурнойКлассификации(ОповещениеПриВыборе);
КонецПроцедуры

&НаКлиенте
Процедура НачатьВыборКодаВидаНоменклатурнойКлассификации_Завершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("КодВидаНоменклатурнойКлассификации")
		И Результат.Свойство("НаименованиеВидаНоменклатурнойКлассификации") Тогда
		
		Объект.КодВидаНоменклатурнойКлассификации = Результат.КодВидаНоменклатурнойКлассификации;
		Объект.НаименованиеВидаНоменклатурнойКлассификации = Результат.НаименованиеВидаНоменклатурнойКлассификации;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
