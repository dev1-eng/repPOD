#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Выполняет расчет ABC класса номенклатуры и записывает его в регистр
//
//	Параметры:
//		ДатаКлассификации - Дата - дата окончания периода, за который нужно выбрать данные для
//			классификации, если Неопределенно - используется текущая дата.
//
Процедура ВыполнитьABCКлассификацию(ДатаКлассификации = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьКлассификациюПоВаловойПрибыли = ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюНоменклатурыПоВаловойПрибыли");
	ИспользоватьКлассификациюПоВыручке = ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюНоменклатурыПоВыручке");
	ИспользоватьКлассификациюПоКоличеству = ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюНоменклатурыПоКоличествуПродаж");
	УчитыватьПравилаВнутреннегоТовародвижения = Константы.УчитыватьПравилаВнутреннегоТовародвиженияПриABCКлассификацииНоменклатуры.Получить();
	
	Если Не ИспользоватьКлассификациюПоВаловойПрибыли И Не ИспользоватьКлассификациюПоВыручке И Не ИспользоватьКлассификациюПоКоличеству Тогда
		Возврат;
	КонецЕсли;
	
	ПериодКлассификации = Константы.ПериодABCКлассификацииНоменклатуры.Получить();
	КоличествоПериодовКлассификации = Константы.КоличествоПериодовABCКлассификацииНоменклатуры.Получить();
	
	Если ПериодКлассификации.Пустая() Или КоличествоПериодовКлассификации = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.МестоХранения КАК Склад,
	|	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	ВыручкаИСебестоимостьПродажОбороты.Подразделение КАК Подразделение,
	|	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот - ВыручкаИСебестоимостьПродажОбороты.СтоимостьОборот - ВыручкаИСебестоимостьПродажОбороты.ДопРасходыОборот КАК ВаловаяПрибыль,
	|	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот КАК Выручка,
	|	ВыручкаИСебестоимостьПродажОбороты.КоличествоОборот КАК Количество
	|ПОМЕСТИТЬ ИсточникДанных
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&НачалоПериода, &ОкончаниеПериода, , ) КАК ВыручкаИСебестоимостьПродажОбороты
	|ГДЕ
	|	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаПоПартнерам.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|	И ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 КАК РазделительКлассификации,
	|	НЕОПРЕДЕЛЕНО КАК РазделКлассификации,
	|	ИсточникДанных.Номенклатура КАК Номенклатура,
	|	ИсточникДанных.Характеристика КАК Характеристика,
	|	СУММА(ИсточникДанных.ВаловаяПрибыль) КАК ВаловаяПрибыль,
	|	СУММА(ИсточникДанных.Выручка) КАК Выручка,
	|	СУММА(ИсточникДанных.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_Раздел0
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникДанных.Номенклатура   КАК Номенклатура,
	|	ИсточникДанных.Характеристика КАК Характеристика,
	|	ИсточникДанных.Склад          КАК Склад
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|ГДЕ
	|	&УчитыватьПравилаВнутреннегоТовародвижения
	|	И ТИПЗНАЧЕНИЯ(ИсточникДанных.Склад) = ТИП(Справочник.Склады)
	|	И ИсточникДанных.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|;
	|
	|///////////////////////////////////////////////////////////
	|" + СтрЗаменить(РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаСпособыОбеспечения("ВЫЧИСЛЯТЬ"), "РАЗРЕШЕННЫЕ", "")
	+"ВЫБРАТЬ
	|	1 КАК РазделительКлассификации,
	|	ИсточникДанных.Склад КАК РазделКлассификации,
	|	ИсточникДанных.Номенклатура КАК Номенклатура,
	|	ИсточникДанных.Характеристика КАК Характеристика,
	|	СУММА(ИсточникДанных.ВаловаяПрибыль) КАК ВаловаяПрибыль,
	|	СУММА(ИсточникДанных.Выручка) КАК Выручка,
	|	СУММА(ИсточникДанных.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_Раздел1
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИсточникДанных.Склад КАК Склад,
	|		ИсточникДанных.Номенклатура КАК Номенклатура,
	|		ИсточникДанных.Характеристика КАК Характеристика,
	|		ИсточникДанных.ВаловаяПрибыль КАК ВаловаяПрибыль,
	|		ИсточникДанных.Выручка КАК Выручка,
	|		ИсточникДанных.Количество КАК Количество
	|	ИЗ
	|		ИсточникДанных КАК ИсточникДанных
	|	ГДЕ
	|		ТИПЗНАЧЕНИЯ(ИсточникДанных.Склад) = ТИП(Справочник.Склады)
	|		И ИсточникДанных.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СпрСпособыОбеспечения.ИсточникОбеспеченияПотребностей,
	|		ИсточникДанных.Номенклатура,
	|		ИсточникДанных.Характеристика,
	|		ИсточникДанных.ВаловаяПрибыль,
	|		ИсточникДанных.Выручка,
	|		ИсточникДанных.Количество
	|	ИЗ
	|		ИсточникДанных КАК ИсточникДанных
	|			
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтСпособыОбеспечения КАК ТаблицаСпособовОбеспечения
	|			ПО ТаблицаСпособовОбеспечения.Склад          = ИсточникДанных.Склад
	|			 И ТаблицаСпособовОбеспечения.Номенклатура   = ИсточникДанных.Номенклатура
	|			 И ТаблицаСпособовОбеспечения.Характеристика = ИсточникДанных.Характеристика
	|			
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособыОбеспечения
	|			ПО СпрСпособыОбеспечения.Ссылка = ТаблицаСпособовОбеспечения.СпособОбеспеченияПотребностей
	|	ГДЕ
	|		&УчитыватьПравилаВнутреннегоТовародвижения
	|		И ТИПЗНАЧЕНИЯ(ИсточникДанных.Склад) = ТИП(Справочник.Склады)
	|		И ИсточникДанных.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		И СпрСпособыОбеспечения.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Перемещение)
	|		И СпрСпособыОбеспечения.ИсточникОбеспеченияПотребностей ССЫЛКА Справочник.Склады
	|		И СпрСпособыОбеспечения.ИсточникОбеспеченияПотребностей <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК ИсточникДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных.Склад,
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	2 КАК РазделительКлассификации,
	|	ИсточникДанных.Организация КАК РазделКлассификации,
	|	ИсточникДанных.Номенклатура КАК Номенклатура,
	|	ИсточникДанных.Характеристика КАК Характеристика,
	|	СУММА(ИсточникДанных.ВаловаяПрибыль) КАК ВаловаяПрибыль,
	|	СУММА(ИсточникДанных.Выручка) КАК Выручка,
	|	СУММА(ИсточникДанных.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_Раздел2
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных.Организация,
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	3 КАК РазделКлассификации,
	|	ИсточникДанных.Подразделение КАК Подразделение,
	|	ИсточникДанных.Номенклатура КАК Номенклатура,
	|	ИсточникДанных.Характеристика КАК Характеристика,
	|	СУММА(ИсточникДанных.ВаловаяПрибыль) КАК ВаловаяПрибыль,
	|	СУММА(ИсточникДанных.Выручка) КАК Выручка,
	|	СУММА(ИсточникДанных.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_Раздел3
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных.Подразделение,
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Раздел0.РазделительКлассификации КАК РазделительКлассификации,
	|	ВТ_Раздел0.РазделКлассификации КАК РазделКлассификации,
	|	ВТ_Раздел0.Номенклатура КАК Номенклатура,
	|	ВТ_Раздел0.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ВТ_Раздел0.ВаловаяПрибыль > 0
	|			ТОГДА ВТ_Раздел0.ВаловаяПрибыль
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВаловаяПрибыль,
	|	ВЫБОР
	|		КОГДА ВТ_Раздел0.Выручка > 0
	|			ТОГДА ВТ_Раздел0.Выручка
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Выручка,
	|	ВЫБОР
	|		КОГДА ВТ_Раздел0.Количество > 0
	|			ТОГДА ВТ_Раздел0.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	ВТ_Раздел0 КАК ВТ_Раздел0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Раздел1.РазделительКлассификации,
	|	ВТ_Раздел1.РазделКлассификации,
	|	ВТ_Раздел1.Номенклатура,
	|	ВТ_Раздел1.Характеристика,
	|	ВЫБОР
	|		КОГДА ВТ_Раздел1.ВаловаяПрибыль > 0
	|			ТОГДА ВТ_Раздел1.ВаловаяПрибыль
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_Раздел1.Выручка > 0
	|			ТОГДА ВТ_Раздел1.Выручка
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_Раздел1.Количество > 0
	|			ТОГДА ВТ_Раздел1.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	ВТ_Раздел1 КАК ВТ_Раздел1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Раздел2.РазделительКлассификации,
	|	ВТ_Раздел2.РазделКлассификации,
	|	ВТ_Раздел2.Номенклатура,
	|	ВТ_Раздел2.Характеристика,
	|	ВЫБОР
	|		КОГДА ВТ_Раздел2.ВаловаяПрибыль > 0
	|			ТОГДА ВТ_Раздел2.ВаловаяПрибыль
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_Раздел2.Выручка > 0
	|			ТОГДА ВТ_Раздел2.Выручка
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТ_Раздел2.Количество > 0
	|			ТОГДА ВТ_Раздел2.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	ВТ_Раздел2 КАК ВТ_Раздел2";
	
	Период = ОбщегоНазначенияУТКлиентСервер.РасширенныйПериод(
		?(ДатаКлассификации = Неопределено, ТекущаяДатаСеанса(), ДатаКлассификации), 
			ПериодКлассификации, -КоличествоПериодовКлассификации);
	
	Запрос.УстановитьПараметр("НачалоПериода", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ОкончаниеПериода", Период.ДатаОкончания);
	Запрос.УстановитьПараметр("УчитыватьПравилаВнутреннегоТовародвижения", УчитыватьПравилаВнутреннегоТовародвижения);

	РезультатКлассификации = Запрос.Выполнить().Выгрузить();
	
	Если ИспользоватьКлассификациюПоВаловойПрибыли Тогда
		Классификация.ВыполнитьABCКлассификацию(РезультатКлассификации, "ВаловаяПрибыль");
		ОбновитьДанныеКлассификации(РезультатКлассификации, Перечисления.ТипыКлассификации.ABC, 
			Перечисления.ТипыПараметровКлассификации.ВаловаяПрибыль, Период.ДатаОкончания, Перечисления.ABCКлассификация.НеКлассифицирован);
	КонецЕсли;
	
	Если ИспользоватьКлассификациюПоВыручке Тогда
		Классификация.ВыполнитьABCКлассификацию(РезультатКлассификации, "Выручка");
		ОбновитьДанныеКлассификации(РезультатКлассификации, Перечисления.ТипыКлассификации.ABC, 
			Перечисления.ТипыПараметровКлассификации.Выручка, Период.ДатаОкончания, Перечисления.ABCКлассификация.НеКлассифицирован);
	КонецЕсли;
	
	Если ИспользоватьКлассификациюПоКоличеству Тогда
		Классификация.ВыполнитьABCКлассификацию(РезультатКлассификации, "Количество");
		ОбновитьДанныеКлассификации(РезультатКлассификации, Перечисления.ТипыКлассификации.ABC, 
			Перечисления.ТипыПараметровКлассификации.Количество, Период.ДатаОкончания, Перечисления.ABCКлассификация.НеКлассифицирован);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет расчет XYZ класса номенклатуры и записывает его в регистр
//
//	Параметры:
//		ДатаКлассификации - Дата - дата окончания периода, за который нужно выбрать данные для
//			классификации, если Неопределенно - используется текущая дата.
//
Процедура ВыполнитьXYZКлассификацию(ДатаКлассификации = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьКлассификациюПоВаловойПрибыли = ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюНоменклатурыПоВаловойПрибыли");
	ИспользоватьКлассификациюПоВыручке = ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюНоменклатурыПоВыручке");
	ИспользоватьКлассификациюПоКоличеству = ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюНоменклатурыПоКоличествуПродаж");
	УчитыватьПравилаВнутреннегоТовародвижения = Константы.УчитыватьПравилаВнутреннегоТовародвиженияПриXYZКлассификацииНоменклатуры.Получить();
	
	Если НЕ ИспользоватьКлассификациюПоВаловойПрибыли И НЕ ИспользоватьКлассификациюПоВыручке И НЕ ИспользоватьКлассификациюПоКоличеству Тогда
		Возврат;
	КонецЕсли;
	
	ПериодКлассификации = Константы.ПериодXYZКлассификацииНоменклатуры.Получить();
	КоличествоПериодовКлассификации = Константы.КоличествоПериодовXYZКлассификацииНоменклатуры.Получить();
	ПодпериодКлассификации = Константы.ПодпериодXYZКлассификацииНоменклатуры.Получить();
	
	Если ПериодКлассификации.Пустая() ИЛИ КоличествоПериодовКлассификации = 0 ИЛИ ПодпериодКлассификации.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.МестоХранения КАК Склад,
	|	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	ВыручкаИСебестоимостьПродажОбороты.Подразделение КАК Подразделение,
	|	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	ВыручкаИСебестоимостьПродажОбороты.Период КАК Период,
	|	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот - ВыручкаИСебестоимостьПродажОбороты.СтоимостьОборот - ВыручкаИСебестоимостьПродажОбороты.ДопРасходыОборот КАК ВаловаяПрибыль,
	|	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот КАК Выручка,
	|	ВыручкаИСебестоимостьПродажОбороты.КоличествоОборот КАК Количество
	|ПОМЕСТИТЬ ИсточникДанных
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(НАЧАЛОПЕРИОДА(&НачалоПериода, " + Строка(ПодпериодКлассификации) + "), КОНЕЦПЕРИОДА(&ОкончаниеПериода, " + Строка(ПодпериодКлассификации) + "), " + Строка(ПодпериодКлассификации) + ", ) КАК ВыручкаИСебестоимостьПродажОбороты
	|ГДЕ
	|	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаПоПартнерам.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|	И ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникДанных.Номенклатура   КАК Номенклатура,
	|	ИсточникДанных.Характеристика КАК Характеристика,
	|	ИсточникДанных.Склад          КАК Склад
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|ГДЕ
	|	&УчитыватьПравилаВнутреннегоТовародвижения
	|	И ТИПЗНАЧЕНИЯ(ИсточникДанных.Склад) = ТИП(Справочник.Склады)
	|	И ИсточникДанных.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|;
	|
	|///////////////////////////////////////////////////////////
	|" + СтрЗаменить(РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаСпособыОбеспечения("ВЫЧИСЛЯТЬ"), "РАЗРЕШЕННЫЕ", "")
	+"ВЫБРАТЬ
	|	0 КАК РазделительКлассификации,
	|	НЕОПРЕДЕЛЕНО КАК РазделКлассификации,
	|	ИсточникДанных.Номенклатура КАК Номенклатура,
	|	ИсточникДанных.Характеристика КАК Характеристика,
	|	ИсточникДанных.Период КАК Период,
	|	ИсточникДанных.ВаловаяПрибыль КАК ВаловаяПрибыль,
	|	ИсточникДанных.Выручка КАК Выручка,
	|	ИсточникДанных.Количество КАК Количество
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ИсточникДанных.Склад,
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.Характеристика,
	|	ИсточникДанных.Период,
	|	ИсточникДанных.ВаловаяПрибыль,
	|	ИсточникДанных.Выручка,
	|	ИсточникДанных.Количество
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ИсточникДанных.Склад) = ТИП(Справочник.Склады)
	|	И ИсточникДанных.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ЕСТЬNULL(СпрСпособыОбеспечения.ИсточникОбеспеченияПотребностей, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)),
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.Характеристика,
	|	ИсточникДанных.Период,
	|	ИсточникДанных.ВаловаяПрибыль,
	|	ИсточникДанных.Выручка,
	|	ИсточникДанных.Количество
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|			
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтСпособыОбеспечения КАК ТаблицаСпособовОбеспечения
	|			ПО ТаблицаСпособовОбеспечения.Склад          = ИсточникДанных.Склад
	|			 И ТаблицаСпособовОбеспечения.Номенклатура   = ИсточникДанных.Номенклатура
	|			 И ТаблицаСпособовОбеспечения.Характеристика = ИсточникДанных.Характеристика
	|			
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособыОбеспечения
	|			ПО СпрСпособыОбеспечения.Ссылка = ТаблицаСпособовОбеспечения.СпособОбеспеченияПотребностей
	|ГДЕ
	|	&УчитыватьПравилаВнутреннегоТовародвижения
	|	И ТИПЗНАЧЕНИЯ(ИсточникДанных.Склад) = ТИП(Справочник.Склады)
	|	И ИсточникДанных.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	И СпрСпособыОбеспечения.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Перемещение)
	|	И СпрСпособыОбеспечения.ИсточникОбеспеченияПотребностей ССЫЛКА Справочник.Склады
	|	И СпрСпособыОбеспечения.ИсточникОбеспеченияПотребностей <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ИсточникДанных.Организация,
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.Характеристика,
	|	ИсточникДанных.Период,
	|	ИсточникДанных.ВаловаяПрибыль,
	|	ИсточникДанных.Выручка,
	|	ИсточникДанных.Количество
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	ИсточникДанных.Подразделение,
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.Характеристика,
	|	ИсточникДанных.Период,
	|	ИсточникДанных.ВаловаяПрибыль,
	|	ИсточникДанных.Выручка,
	|	ИсточникДанных.Количество
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|
	|УПОРЯДОЧИТЬ ПО
	|	РазделительКлассификации
	|ИТОГИ
	|	МАКСИМУМ(РазделительКлассификации),
	|	СУММА(ВаловаяПрибыль),
	|	СУММА(Выручка),
	|	СУММА(Количество)
	|ПО
	|	РазделКлассификации,
	|	Номенклатура,
	|	Характеристика,
	|	Период ПЕРИОДАМИ(" + Строка(ПодпериодКлассификации)
			+ ", НАЧАЛОПЕРИОДА(&НачалоПериода, " + Строка(ПодпериодКлассификации) 
			+ "), КОНЕЦПЕРИОДА(&ОкончаниеПериода, " + Строка(ПодпериодКлассификации) + "))";
	
	Период = ОбщегоНазначенияУТКлиентСервер.РасширенныйПериод(
		?(ДатаКлассификации = Неопределено, ТекущаяДатаСеанса(), ДатаКлассификации),
		ПериодКлассификации,
		- КоличествоПериодовКлассификации);
	
	Запрос.УстановитьПараметр("НачалоПериода",    Период.ДатаНачала);
	Запрос.УстановитьПараметр("ОкончаниеПериода", Период.ДатаОкончания);
	Запрос.УстановитьПараметр("УчитыватьПравилаВнутреннегоТовародвижения", УчитыватьПравилаВнутреннегоТовародвижения);

	ИсточникДанных = Новый Структура("ИсточникДанных", Запрос.Выполнить());
	
	Если ИспользоватьКлассификациюПоВаловойПрибыли Тогда
		
		РезультатКлассификации =
			Классификация.ВыполнитьXYZКлассификацию(
				ИсточникДанных, 
				"ВаловаяПрибыль", 
				"РазделКлассификации, Номенклатура, Характеристика");
		ОбновитьДанныеКлассификации(
			РезультатКлассификации,
			Перечисления.ТипыКлассификации.XYZ,
			Перечисления.ТипыПараметровКлассификации.ВаловаяПрибыль,
			Период.ДатаОкончания,
			Перечисления.XYZКлассификация.НеКлассифицирован);
		
	КонецЕсли;
	
	Если ИспользоватьКлассификациюПоВыручке Тогда
	
		РезультатКлассификации =
			Классификация.ВыполнитьXYZКлассификацию(
				ИсточникДанных,
				"Выручка",
				"РазделКлассификации, Номенклатура, Характеристика");
		ОбновитьДанныеКлассификации(
			РезультатКлассификации,
			Перечисления.ТипыКлассификации.XYZ,
			Перечисления.ТипыПараметровКлассификации.Выручка,
			Период.ДатаОкончания,
			Перечисления.XYZКлассификация.НеКлассифицирован);
		
	КонецЕсли;
	
	Если ИспользоватьКлассификациюПоКоличеству Тогда
		
		РезультатКлассификации =
			Классификация.ВыполнитьXYZКлассификацию(
				ИсточникДанных,
				"Количество",
				"РазделКлассификации, Номенклатура, Характеристика");
		ОбновитьДанныеКлассификации(
			РезультатКлассификации,
			Перечисления.ТипыКлассификации.XYZ,
			Перечисления.ТипыПараметровКлассификации.Количество,
			Период.ДатаОкончания,
			Перечисления.XYZКлассификация.НеКлассифицирован);

	КонецЕсли;

КонецПроцедуры

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП.
//
// Возвращаемое значение:
//	Массив - имена блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт

	Результат = Новый Массив;
	Результат.Добавить("ВестиУчетПоГТД");
	Результат.Добавить("ЦеноваяГруппа");
	Результат.Добавить("ИспользоватьУпаковки");
	Результат.Добавить("НаборУпаковок");
	Результат.Добавить("Качество");
	Результат.Добавить("СтавкаНДС");
	Результат.Добавить("ОблагаетсяНДСУПокупателя");
	Результат.Добавить("ПодакцизныйТовар");
	Результат.Добавить("ЕдиницаИзмерения");
	Результат.Добавить("Принципал");
	Результат.Добавить("Контрагент");
	
	Результат.Добавить("КиЗГИСМВид");
	Результат.Добавить("КиЗГИСМСпособВыпускаВОборот");
	Результат.Добавить("КиЗГИСМGTIN");
	Результат.Добавить("КиЗГИСМРазмер");
	Результат.Добавить("АлкогольнаяПродукцияВоВскрытойТаре");
	
	Возврат Результат;

КонецФункции

// Проверяет могут ли переданные характеристика и упаковка являться характеристикой и упаковкой переданной
// номенклатуры. При проверке учитывается, что характеристики могут быть общими для вида номенклатуры,
// а упаковки общими для набора упаковок.
//
//		Параметры:
//			Номенклатура - СправочникСсылка.Номенклатура - номенклатура-владелец характеристик и упаковок
//			Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - проверяемая характеристика
//			Упаковка - СправочникСсылка.Упаковка - проверяемая упаковка.
//
//		Возвращаемое значение:
//			Структура - стуктура с полями
//				Характеристика - если проверяемая характеристика подходит, то записывается она, если нет - пустая ссылка
//				Упаковка - если проверяемая упаковка подходит, то записывается она, если нет - пустая ссылка
//				ХарактеристикиИспользуются - равно ИСТИНА, если по номенклатуре ведется учет характеристик.
//
Функция ХарактеристикаИУпаковкаПринадлежатВладельцу(Номенклатура, Характеристика, Упаковка) Экспорт
	СтруктураВозврата = Новый Структура("Характеристика, Упаковка, ХарактеристикиИспользуются");
	СтруктураВозврата.Характеристика             = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	СтруктураВозврата.Упаковка                   = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	СтруктураВозврата.ХарактеристикиИспользуются = Ложь;
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЕСТЬNULL(СпрХарактеристики.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
		|	ВЫБОР
		|		КОГДА СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|			ИЛИ СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|			ИЛИ СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
		|		ПО (ВЫБОР
		|				КОГДА СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|					ТОГДА СпрНоменклатура.ВидНоменклатуры
		|				КОГДА СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|					ТОГДА СпрНоменклатура.Ссылка
		|				КОГДА СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
		|					ТОГДА СпрНоменклатура.ВладелецХарактеристик
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ = СпрХарактеристики.Владелец)
		|			И (СпрХарактеристики.Ссылка = &Характеристика)
		|ГДЕ
		|	СпрНоменклатура.Ссылка = &Номенклатура";
		
		Запрос.УстановитьПараметр("Номенклатура", 	Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", Характеристика);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
		
	КонецЕсли;	
	
	ПараметрыВыбораУпаковки = Новый Структура();
	ПараметрыВыбораУпаковки.Вставить("Номенклатура", Номенклатура);
	
	ДанныеВыбораУпаковок = Справочники.УпаковкиЕдиницыИзмерения.ПолучитьДанныеВыбора(ПараметрыВыбораУпаковки);
	
	Для Каждого ЭлементСпискаЗначений из ДанныеВыбораУпаковок Цикл
		Если (ТипЗнч(ЭлементСпискаЗначений.Значение) = Тип("Структура")
			И ЭлементСпискаЗначений.Значение.Значение = Упаковка)
			Или ЭлементСпискаЗначений.Значение = Упаковка Тогда 
			СтруктураВозврата.Упаковка = Упаковка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Проверяет используются ли характеристики для переданной номенклатуры
//	Параметры:
//		Номенклатура - СправочникСсылка.Номенклатура - проверяемая номенклатура
//	Возвращаемое значение:
//		Булево - ИСТИНА, если характеристики используются.
//
Функция ХарактеристикиИспользуются(Номенклатура) Экспорт
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|			ИЛИ СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|			ИЛИ СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|				ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.ХарактеристикиИспользуются;
	
КонецФункции

// Возвращает значения реквизитов номенклатуры, если номенклатура не передана - возвращаются значения по умолчанию.
//
//	Параметры:
//		Номенклатура - СправочникСсылка.Номенклатура - номенклатура, чьи реквизиты нужно вернуть
//	Возвращаемое значение:
//		Структура - поля ВестиУчетПоГТД, ЕдиницаИзмерения, СтавкаНДС, ГруппаФинансовогоУчета, ПодакцизныйТовар, ЭтоУслуга.
//
Функция ЗначенияРеквизитовНоменклатуры(Номенклатура) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Номенклатура.ВестиУчетПоГТД КАК ВестиУчетПоГТД,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	Номенклатура.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	Номенклатура.ПодакцизныйТовар КАК ПодакцизныйТовар,
	|	ВЫБОР КОГДА Номенклатура.ТипНоменклатуры НЕ В
	|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ЭтоУслуга
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|");
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВестиУчетПоГТД = Выборка.ВестиУчетПоГТД;
		СтавкаНДС = Выборка.СтавкаНДС;
		ЭтоУслуга = Выборка.ЭтоУслуга;
		ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		ГруппаФинансовогоУчета = Выборка.ГруппаФинансовогоУчета;
		ПодакцизныйТовар = Выборка.ПодакцизныйТовар;
	Иначе
		ВестиУчетПоГТД = Ложь;
		СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		ЭтоУслуга = Неопределено;
		ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаНоменклатуры.ПустаяСсылка();
		ПодакцизныйТовар = Ложь;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ВестиУчетПоГТД",ВестиУчетПоГТД);
	СтруктураРеквизитов.Вставить("СтавкаНДС",СтавкаНДС);
	СтруктураРеквизитов.Вставить("ЭтоУслуга",ЭтоУслуга);
	СтруктураРеквизитов.Вставить("ЕдиницаИзмерения",ЕдиницаИзмерения);
	СтруктураРеквизитов.Вставить("ГруппаФинансовогоУчета",ГруппаФинансовогоУчета);
	СтруктураРеквизитов.Вставить("ПодакцизныйТовар",ПодакцизныйТовар);
	
	Возврат СтруктураРеквизитов;

КонецФункции // ЗначенияРеквизитовНоменклатуры()

// Возвращает имена реквизитов, которые не должны отображаться в списке реквизитов обработки ГрупповоеИзменениеОбъектов.
//
//	Возвращаемое значение:
//		Массив - массив имен реквизитов.
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовНоменклатуры") Тогда
		НеРедактируемыеРеквизиты.Добавить("ВидНоменклатуры");
	КонецЕсли;
	НеРедактируемыеРеквизиты.Добавить("ЕстьТоварыДругогоКачества");
	НеРедактируемыеРеквизиты.Добавить("ИспользованиеХарактеристик");
	НеРедактируемыеРеквизиты.Добавить("КодДляПоиска");
	НеРедактируемыеРеквизиты.Добавить("НаименованиеПолное");
	НеРедактируемыеРеквизиты.Добавить("ПоставляетсяВМногооборотнойТаре");
	НеРедактируемыеРеквизиты.Добавить("НоменклатураМногооборотнаяТара");
	НеРедактируемыеРеквизиты.Добавить("ХарактеристикаМногооборотнаяТара");
	НеРедактируемыеРеквизиты.Добавить("Описание");
	НеРедактируемыеРеквизиты.Добавить("ТипНоменклатуры");
	НеРедактируемыеРеквизиты.Добавить("ВладелецХарактеристик");
	НеРедактируемыеРеквизиты.Добавить("ВладелецСерий");
	НеРедактируемыеРеквизиты.Добавить("ВладелецТоварныхКатегорий");
	НеРедактируемыеРеквизиты.Добавить("ФайлКартинки");
	НеРедактируемыеРеквизиты.Добавить("ФайлОписанияДляСайта");
	НеРедактируемыеРеквизиты.Добавить("АлкогольнаяПродукция");
	НеРедактируемыеРеквизиты.Добавить("ОсобенностьУчета");
	НеРедактируемыеРеквизиты.Добавить("ПродукцияМаркируемаяДляГИСМ");
	НеРедактируемыеРеквизиты.Добавить("КиЗГИСМ");
	НеРедактируемыеРеквизиты.Добавить("ПодконтрольнаяПродукцияВЕТИС");
	НеРедактируемыеРеквизиты.Добавить("УдалитьТабачнаяПродукция");
	НеРедактируемыеРеквизиты.Добавить("УдалитьОбувнаяПродукция");
	
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

// Если для переданной номенклатуры ведутся характеристики, то в параметре возвращается владелец характеристик.
//
//	Параметры:
//		Номенклатура - СправочникСсылка.Номенклатура - проверяемая номенклатура
//		ВладелецХарактеристики - СправочникСсылка.Номенклатура, СправочникСсылка.ВидыНоменклатуры - в этом параметре
//			возвращается владелец характеристик (это зависит от того, какие характеристики используются - индивидуальные
//			или общие для вида номенклатуры)
//	Возвращаемое значение:
//		Булево - признак того, что для переданной номенклатуры ведется учет по характеристикам.
//
Функция ПроверитьИспользованиеХарактеристикИПолучитьВладельцаДляВыбора(Номенклатура, ВладелецХарактеристики) Экспорт

	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ВидНоменклатуры"           , "ВидНоменклатуры");
	СтруктураРеквизитов.Вставить("ИспользованиеХарактеристик", "ИспользованиеХарактеристик");
	СтруктураРеквизитов.Вставить("ВладелецХарактеристик"     , "ВладелецХарактеристик");
	ЗначенияРеквизитовВИБ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, СтруктураРеквизитов);

	Если ЗначенияРеквизитовВИБ.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать Тогда
		ИспользованиеХарактеристик = Ложь;
	Иначе
		ИспользованиеХарактеристик = Истина;

		Если ЗначенияРеквизитовВИБ.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры Тогда
			ВладелецХарактеристики = ЗначенияРеквизитовВИБ.ВидНоменклатуры;
		ИначеЕсли ЗначенияРеквизитовВИБ.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры Тогда
			ВладелецХарактеристики = ЗначенияРеквизитовВИБ.ВладелецХарактеристик;
		Иначе
			ВладелецХарактеристики = Номенклатура;
		КонецЕсли;
	КонецЕсли;

	Возврат ИспользованиеХарактеристик;

КонецФункции

// Заполняет реквизиты элемента номенклатуры значениями соответствующих реквизитов вида номенклатуры.
//
// Параметры:
//	Номенклатура - СправочникОбъект.Номенклатура, ДанныеФормыСтруктура	 - заполняемый элемент номенклатуры.
//	ПрерыватьЗаполнениеПриОшибкеПроверки - Булево - Истина, признак отмены выполнения заполнения данных.
//	Отказ		 - Булево - если происходит смена вида номенклатуры, то делается проверка корректности этой смены.
//							Если проверка выдает ошибку, то параметр выставляется в значение Истина.
//	СтарыйВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры - закешированный вид номенклатуры элемента номенклатуры.
//	ЗаполнениеПоИсточникуКопирования - Булево - признак выполнения заполнения данных из источника копирования.
//
Процедура ЗаполнитьРеквизитыПоВидуНоменклатуры(Номенклатура,
												ПрерыватьЗаполнениеПриОшибкеПроверки = Ложь,
												Отказ = Ложь,
												СтарыйВидНоменклатуры = Неопределено,
												ЗаполнениеПоИсточникуКопирования = Ложь) Экспорт
	
	Если Номенклатура.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Номенклатура.ВидНоменклатуры) Тогда
		Возврат;	
	КонецЕсли;
	
	Если СтарыйВидНоменклатуры = Неопределено Тогда
		Если ЗначениеЗаполнено(Номенклатура.Ссылка) Тогда
			СтарыйВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура.Ссылка, "ВидНоменклатуры");
			Если ЗначениеЗаполнено(СтарыйВидНоменклатуры) Тогда
				ПроверитьКорректностьСменыВидаНоменклатурыЗаполнитьПоНовомуВиду(Номенклатура, СтарыйВидНоменклатуры, Отказ);
			КонецЕсли;
			Если Отказ
				И ПрерыватьЗаполнениеПриОшибкеПроверки Тогда
				Возврат;
			КонецЕсли;
		Иначе
			СтарыйВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	СтрогоБерутсяИзВида = 
	"ТипНоменклатуры,ВариантОформленияПродажи,ГруппаДоступа,ИспользованиеХарактеристик,АлкогольнаяПродукция,"
	+"ВладелецСерий,ВладелецХарактеристик,ВладелецТоварныхКатегорий,ОсобенностьУчета,ПродукцияМаркируемаяДляГИСМ,КиЗГИСМ,"
	+"ПодконтрольнаяПродукцияВЕТИС,ЕдиницаИзмеренияСрокаГодности";
	
	ЗаполняютсяТолькоПриСозданииНоменклатуры =
	"ЕдиницаИзмерения,ЕдиницаДляОтчетов,КоэффициентЕдиницыДляОтчетов,ВестиУчетПоГТД,ПодакцизныйТовар,"
	+"ИмпортнаяАлкогольнаяПродукция,ОбособленнаяЗакупкаПродажа,СтавкаНДС,ЦеноваяГруппа,ОблагаетсяНДСУПокупателя";
	
	ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию = 
	"СкладскаяГруппа,СезоннаяГруппа,ГруппаАналитическогоУчета,ГруппаФинансовогоУчета,ВидАлкогольнойПродукции,Крепость,"
	+"ШаблонЦенника,ШаблонЭтикетки,КодОКВЭД,КодОКВЭД2,КодТНВЭД,КодОКП,КодОКПД2,СхемаОбеспечения,СпособОбеспеченияПотребностей,КодРаздел7ДекларацииНДС";
	
	ПерезаполняютсяЕслиРаньшеБылиНеЗаполнены =
	"ИспользоватьУпаковки,НаборУпаковок,"
	+"ПоставляетсяВМногооборотнойТаре,НоменклатураМногооборотнаяТара,ХарактеристикаМногооборотнаяТара,"
	+"ВестиУчетСертификатовНоменклатуры";
	// При этом булевы реквизиты не заполнены, если равны ЛОЖЬ, т.е. булевы могут поменяться только с ЛОЖЬ на ИСТИНА.
	
	// Очистим реквизиты, которые точно нужно перезаполнить по виду	
	ОчиститьЗначенияСвойств(Номенклатура, СтрогоБерутсяИзВида);
	
	// Получим реквизиты нового вида, если нужно заполнять только при создании, то просто не будем получать такие реквизиты.
	РеквизитыНовогоВида = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
	Номенклатура.ВидНоменклатуры,
	СтрогоБерутсяИзВида
	+ ?(ЗначениеЗаполнено(Номенклатура.Ссылка), "", "," + ЗаполняютсяТолькоПриСозданииНоменклатуры)
	+ "," + ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию
	+ "," + ПерезаполняютсяЕслиРаньшеБылиНеЗаполнены);
	
	// Если номенклатура создается, то очистим реквизиты, которые при создании заполняются по виду, если в новом виде эти
	// реквизиты заполнены.
	Если Не ЗаполнениеПоИсточникуКопирования
		И Не ЗначениеЗаполнено(Номенклатура.Ссылка) Тогда
		
		ЗаполняютсяТолькоПриСозданииНоменклатурыМассив = СтрРазделить(ЗаполняютсяТолькоПриСозданииНоменклатуры, ",", Ложь);
		
		Для Каждого ИмяРеквизита Из ЗаполняютсяТолькоПриСозданииНоменклатурыМассив Цикл
			Если ЗначениеЗаполнено(РеквизитыНовогоВида[ИмяРеквизита]) Тогда
				Номенклатура[ИмяРеквизита] = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Очистим реквизиты, которые раньше были заполнены значениями по умолчанию (если в новом виде эти умолчания не заданы
	// очищать не будем).
	Если ЗначениеЗаполнено(СтарыйВидНоменклатуры) Тогда
		РеквизитыСтарогоВида = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтарыйВидНоменклатуры, ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию);
		
		Для Каждого КлючЗначение Из РеквизитыСтарогоВида Цикл
			Если Номенклатура[КлючЗначение.Ключ] = КлючЗначение.Значение
				И ЗначениеЗаполнено(РеквизитыНовогоВида[КлючЗначение.Ключ]) Тогда
				
				Номенклатура[КлючЗначение.Ключ] = Неопределено;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Заполним только незаполненные реквизиты - те, которые нужно перезаполнять всегда были ранее принудительно очищены.
	ЗаполнитьЗначенияПустыхСвойств(Номенклатура, РеквизитыНовогоВида);
		
	ЗначенияПоУмолчанию = Новый Структура;
	ЗначенияПоУмолчанию.Вставить("ГруппаФинансовогоУчета", Справочники.ГруппыФинансовогоУчетаНоменклатуры.ПолучитьГруппуФинансовогоУчетаПоУмолчанию());
	ЗначенияПоУмолчанию.Вставить("СкладскаяГруппа", ЗначениеНастроекПовтИсп.СкладскаяГруппаНоменклатурыПоУмолчанию());
	ЗначенияПоУмолчанию.Вставить("ГруппаАналитическогоУчета", Справочники.ГруппыАналитическогоУчетаНоменклатуры.ПолучитьГруппуАналитическогоУчетаПоУмолчанию());
	
	ЗаполнитьЗначенияПустыхСвойств(Номенклатура, ЗначенияПоУмолчанию);
	ОтработатьЛогикуСвязиРеквизитов(Номенклатура);
	
КонецПроцедуры

// Процедура выполняет гармонизацию значений реквизитов между собой, исключая недопустимые сочетания значений.
//
// Параметры:
//  Номенклатура - СправочникОбъект.Номенклатура, ДанныеФормыСтруктура - элемент, для которого нужно отработать логику
//                                                                       связи реквизитов.
Процедура ОтработатьЛогикуСвязиРеквизитов(Номенклатура) Экспорт
	
	Если Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа
		Или Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
		Или Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор Тогда
		
		Номенклатура.НаборУпаковок        = Справочники.НаборыУпаковок.ПустаяСсылка();
		Номенклатура.СкладскаяГруппа      = Справочники.СкладскиеГруппыНоменклатуры.ПустаяСсылка();
		Номенклатура.ВестиУчетПоГТД       = Ложь;
		Номенклатура.ПодакцизныйТовар     = Ложь;
		Номенклатура.ИспользоватьУпаковки = Ложь;
		Номенклатура.Качество             = Перечисления.ГрадацииКачества.Новый;
		Номенклатура.ПоставляетсяВМногооборотнойТаре  = Ложь;
		Номенклатура.НоменклатураМногооборотнаяТара   = Справочники.Номенклатура.ПустаяСсылка();
		Номенклатура.ХарактеристикаМногооборотнаяТара = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		Номенклатура.ВестиУчетСертификатовНоменклатуры = Ложь;
	КонецЕсли;
	
	Если Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа
		Или Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
		
		Номенклатура.КодТНВЭД				= Справочники.КлассификаторТНВЭД.ПустаяСсылка();
		Номенклатура.ЕдиницаИзмеренияТНВЭД	= Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		Номенклатура.КодОКП					= Справочники.ОбщероссийскийКлассификаторПродукции.ПустаяСсылка();
		
		Если ЗначениеЗаполнено(Номенклатура.Принципал)
			И ТипЗнч(Номенклатура.Принципал) = Тип("СправочникСсылка.Организации") Тогда
			Номенклатура.Контрагент = Номенклатура.Принципал;
		КонецЕсли;
	КонецЕсли;
		
	Если Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
		Или Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара
		Или Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор Тогда
		
		Номенклатура.Принципал  = Неопределено;
		Номенклатура.Контрагент = Неопределено;
		
	КонецЕсли;
	
	Если Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
		
		Номенклатура.НаборУпаковок        = Справочники.НаборыУпаковок.ПустаяСсылка();
		Номенклатура.ИспользоватьУпаковки = Ложь;
		Номенклатура.ПоставляетсяВМногооборотнойТаре  = Ложь;
		Номенклатура.НоменклатураМногооборотнаяТара   = Справочники.Номенклатура.ПустаяСсылка();
		Номенклатура.ХарактеристикаМногооборотнаяТара = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		Номенклатура.ВестиУчетСертификатовНоменклатуры = Ложь;
		
	КонецЕсли;
	
	Если Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
		
		Если Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(Номенклатура.ЕдиницаИзмерения) Тогда
			Номенклатура.ПоставляетсяВМногооборотнойТаре  = Ложь;
			Номенклатура.НоменклатураМногооборотнаяТара   = Справочники.Номенклатура.ПустаяСсылка();
			Номенклатура.ХарактеристикаМногооборотнаяТара = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		КонецЕсли;	
		
	КонецЕсли;
	
	Если Не Номенклатура.ИспользоватьУпаковки Тогда
		Номенклатура.НаборУпаковок = Справочники.НаборыУпаковок.ПустаяСсылка();
	Иначе
		Номенклатура.ПоставляетсяВМногооборотнойТаре  = Ложь;
		Номенклатура.НоменклатураМногооборотнаяТара   = Справочники.Номенклатура.ПустаяСсылка();
		Номенклатура.ХарактеристикаМногооборотнаяТара = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура.НаборУпаковок)
		И Номенклатура.НаборУпаковок <> Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда
		
		Номенклатура.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура.НаборУпаковок, "ЕдиницаИзмерения");
		
	КонецЕсли;
	
	ИспользоватьТоварныеКатегории = ПолучитьФункциональнуюОпцию("ИспользоватьТоварныеКатегории");
	
	Если ИспользоватьТоварныеКатегории
		И ЗначениеЗаполнено(Номенклатура.ТоварнаяКатегория) Тогда
		
		ВладелецКатегории = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура.ТоварнаяКатегория, "Владелец");
		
		Если ВладелецКатегории <> Номенклатура.ВидНоменклатуры 
			И ВладелецКатегории <> Номенклатура.ВладелецТоварныхКатегорий Тогда
			
			Номенклатура.ТоварнаяКатегория = Справочники.ТоварныеКатегории.ПустаяСсылка();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Номенклатура.ЕдиницаДляОтчетов) Тогда
		Номенклатура.ЕдиницаДляОтчетов = Номенклатура.ЕдиницаИзмерения;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Номенклатура.КоэффициентЕдиницыДляОтчетов)
		Или Номенклатура.ЕдиницаДляОтчетов = Номенклатура.ЕдиницаИзмерения Тогда
		Номенклатура.КоэффициентЕдиницыДляОтчетов = 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура.ВидНоменклатуры)
		И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура.ВидНоменклатуры, "СодержитДрагоценныеМатериалы") Тогда
		Номенклатура.ДрагоценныеМатериалы.Очистить();
	КонецЕсли;
	
	Если Не Номенклатура.АлкогольнаяПродукция Тогда
		МассивАлкоРеквизитов = МассивРеквизитовАлкогольнойПродукции();
		
		Для Каждого СтрМас Из МассивАлкоРеквизитов Цикл
			Номенклатура[СтрМас] = Неопределено;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Номенклатура.АлкогольнаяПродукцияВоВскрытойТаре Тогда
		Номенклатура.ОбъемДал = 0;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Номенклатура.ВидНоменклатуры)
		Или (ЗначениеЗаполнено(Номенклатура.ВидНоменклатуры)
			И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура.ВидНоменклатуры, "ИспользоватьСрокГодностиСерии")) Тогда
		
		Номенклатура.СрокГодности = 0;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура.КодТНВЭД)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура.КодТНВЭД, "ПрослеживаемыйТовар") Тогда
		
		Номенклатура.ВестиУчетПоГТД = Истина;
		
	КонецЕсли;
	
	ТипЕдиницы = "";
	МернаяЕдиницаХранения = Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(Номенклатура.ЕдиницаИзмерения, ТипЕдиницы);
	
	ОтработатьЛогикуЗаполненияМеры(Номенклатура, МернаяЕдиницаХранения, ТипЕдиницы, "Вес");
	ОтработатьЛогикуЗаполненияМеры(Номенклатура, МернаяЕдиницаХранения, ТипЕдиницы, "Объем");
	ОтработатьЛогикуЗаполненияМеры(Номенклатура, МернаяЕдиницаХранения, ТипЕдиницы, "Площадь");
	ОтработатьЛогикуЗаполненияМеры(Номенклатура, МернаяЕдиницаХранения, ТипЕдиницы, "Длина");
	
	Если ЗначениеЗаполнено(Номенклатура.КодТНВЭД) Тогда
		Номенклатура.ЕдиницаИзмеренияТНВЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура.КодТНВЭД,
																						"ЕдиницаИзмерения");
	КонецЕсли;
	
	Если Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар
		И Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда	
		
		Номенклатура.СхемаОбеспечения = Справочники.СхемыОбеспечения.ПустаяСсылка();		
		
	КонецЕсли;
	
	Если Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Работа Тогда
		
		Номенклатура.СпособОбеспеченияПотребностей = Справочники.СпособыОбеспеченияПотребностей.ПустаяСсылка();		
		
	КонецЕсли;		
	
	Номенклатура.АлкогольнаяПродукция        = (Номенклатура.ОсобенностьУчета
												= Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция);
	Номенклатура.ПродукцияМаркируемаяДляГИСМ  = (Номенклатура.ОсобенностьУчета
												= Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияМаркируемаяДляГИСМ);
	Номенклатура.КиЗГИСМ                      = (Номенклатура.ОсобенностьУчета
												= Перечисления.ОсобенностиУчетаНоменклатуры.КиЗГИСМ);
	Номенклатура.ПодконтрольнаяПродукцияВЕТИС = (Номенклатура.ОсобенностьУчета
												= Перечисления.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС);
	
КонецПроцедуры

// Проверяет корректность смены вида номенклатуры и в случае проблем выставляет Отказ в ИСТИНА.
//
// Параметры:
//	Номенклатура          - СправочникОбъект.Номенклатура, ДанныеФормыСтруктура - номенклатура, нового вида номенклатуры,
//	СтарыйВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры - вид номенклатуры до смены,
//	Отказ                 - Булево, Истина - отмена смена вида номенклатуры.
//
Процедура ПроверитьКорректностьСменыВидаНоменклатурыЗаполнитьПоНовомуВиду(Номенклатура, СтарыйВидНоменклатуры, Отказ) Экспорт
	
	УсловияВыбораНовогоВидаНоменклатуры = УсловияВыбораНовогоВидаНоменклатуры();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ";
	
	Для Каждого КлючЗначение Из УсловияВыбораНовогоВидаНоменклатуры Цикл
		ТекстЗапроса = ТекстЗапроса + КлючЗначение.Значение + " КАК " + КлючЗначение.Ключ + ", ";
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|	НовыйВидНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК НовыйВидНоменклатуры ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	ПараметрыЗапроса = Запрос.НайтиПараметры();

	ИменаРеквизитов = Новый Массив;
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		ИменаРеквизитов.Добавить(Параметр.Имя);
	КонецЦикла;
	
	СтарыеРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтарыйВидНоменклатуры, ИменаРеквизитов);
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Имя, СтарыеРеквизиты[Параметр.Имя]);
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
	|ГДЕ
	|	НовыйВидНоменклатуры.Ссылка = &НовыйВидНоменклатуры";
	Запрос.УстановитьПараметр("НовыйВидНоменклатуры", Номенклатура.ВидНоменклатуры);
	
	Результат = Запрос.Выполнить().Выгрузить();
	ЗначениеОшибки = Результат[0];
	
	//кмв
	//Для Каждого Ошибка Из Результат.Колонки Цикл
	//	Если Ошибка.Имя = "Ссылка"
	//		Или Не ЗначениеОшибки[Ошибка.Имя] Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Если Ошибка.Имя = "ЕстьПроблемаТипНоменклатуры" Тогда
	//		Отказ = Истина;
	//		ТекстСообщения = НСтр("ru = 'Проблема при изменении вида номенклатуры: у нового вида другой тип номенклатуры.'");
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	//	ИначеЕсли Ошибка.Имя = "ЕстьПроблемаОсобенностьУчета" Тогда
	//		Отказ = Истина;
	//		ТекстСообщения = НСтр("ru = 'Проблема при изменении вида номенклатуры: у нового вида другая особенность учета.'");
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	//	ИначеЕсли Ошибка.Имя = "ЕстьПроблемаИспользоватьСерии" Тогда
	//		Отказ = Истина;
	//		ТекстСообщения = НСтр("ru = 'Проблема при изменении вида номенклатуры: у нового вида несовместимые настройки ведения серий.'");
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	//	ИначеЕсли Ошибка.Имя = "ЕстьПроблемаИспользованиеХарактеристик" Тогда
	//		Отказ = Истина;
	//		ТекстСообщения = НСтр("ru = 'Проблема при изменении вида номенклатуры: у нового вида несовместимые настройки ведения характеристик.'");
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	//	Иначе
	//		ТекстИсключения = НСтр("ru = 'Неизвестный код ошибки.'");
	//		ВызватьИсключение ТекстИсключения;
	//	КонецЕсли;
	//КонецЦикла;
	
КонецПроцедуры

// Условия выбора нового вида номенклатуры. Используются как для ограничения списка выбора, так и для проверки смены вида.
// Возвращаемое значение:
//  Структура - структура условий. Ключ - имя условия, значения - текст запроса условия.
//
Функция УсловияВыбораНовогоВидаНоменклатуры() Экспорт
	
	УсловияВыбораНовогоВидаНоменклатуры = Новый Структура;
	
	ЕстьПроблемаТипНоменклатуры = "
	|	ВЫБОР
	|		КОГДА &Ссылка = НовыйВидНоменклатуры.Ссылка
	|			ТОГДА ЛОЖЬ
	|		КОГДА &ТипНоменклатуры <> НовыйВидНоменклатуры.ТипНоменклатуры
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ ";
	УсловияВыбораНовогоВидаНоменклатуры.Вставить("ЕстьПроблемаТипНоменклатуры", ЕстьПроблемаТипНоменклатуры);
	
	ЕстьПроблемаОсобенностьУчета = "
	|	ВЫБОР
	|		КОГДА &Ссылка = НовыйВидНоменклатуры.Ссылка
	|			ТОГДА ЛОЖЬ
	|		КОГДА &ОсобенностьУчета <> НовыйВидНоменклатуры.ОсобенностьУчета
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ ";
	УсловияВыбораНовогоВидаНоменклатуры.Вставить("ЕстьПроблемаОсобенностьУчета", ЕстьПроблемаОсобенностьУчета);
	
	ЕстьПроблемаИспользоватьСерии = "
	|	ВЫБОР
	|		КОГДА &Ссылка = НовыйВидНоменклатуры.Ссылка
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ(&ИспользоватьСерии = ЛОЖЬ
	|						И НовыйВидНоменклатуры.ИспользоватьСерии = ЛОЖЬ
	|					ИЛИ &ИспользоватьСерии = ИСТИНА
	|						И НовыйВидНоменклатуры.ИспользоватьСерии = ИСТИНА
	|						И (&ВладелецСерий = НовыйВидНоменклатуры.ВладелецСерий
	|								И &ВладелецСерий <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|								И НовыйВидНоменклатуры.ВладелецСерий <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|							ИЛИ &ВладелецСерий = НовыйВидНоменклатуры.Ссылка
	|							ИЛИ НовыйВидНоменклатуры.ВладелецСерий = &Ссылка))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ ";
	УсловияВыбораНовогоВидаНоменклатуры.Вставить("ЕстьПроблемаИспользоватьСерии", ЕстьПроблемаИспользоватьСерии);
	
	ЕстьПроблемаИспользованиеХарактеристик = "
	|	ВЫБОР
	|		КОГДА &Ссылка = НовыйВидНоменклатуры.Ссылка
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ(&ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|						И НовыйВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|					ИЛИ &ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	|						И НовыйВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	|					ИЛИ &ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|						И НовыйВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|						И НовыйВидНоменклатуры.ВладелецХарактеристик = &Ссылка
	|					ИЛИ НовыйВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|						И &ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|						И &ВладелецХарактеристик = НовыйВидНоменклатуры.Ссылка
	|					ИЛИ НовыйВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|						И &ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|						И &ВладелецХарактеристик = НовыйВидНоменклатуры.ВладелецХарактеристик)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ ";
	УсловияВыбораНовогоВидаНоменклатуры.Вставить("ЕстьПроблемаИспользованиеХарактеристик", ЕстьПроблемаИспользованиеХарактеристик);
	
	Возврат УсловияВыбораНовогоВидаНоменклатуры;
	
КонецФункции

// Возвращает настройки видимости и заголовков элементов формы. Используется для построения формы и табличного
// документа карточки номенклатуры.
// Параметры:
//  Объект - СправочникОбъект.Номенклатура, ДанныеФормыСтруктура - элемент, для которого нужно отработать логику связи реквизитов
//	РежимВидимостиПоказатьТолькоВажные 	- Булево - признак отображения основных реквизитов.
//
// Возвращаемое значение:
//  Структура - структура с ключами:
//		* ВидимостьЭлементов - структура видимости элементов
//		* ЗаголовкиЭлементов - структура заголовков элементов.
//
Функция НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные = Ложь) Экспорт
	
	НастройкиВидимостиИЗаголовков = Новый Структура;
	
	ВидимостьЭлементов = СтруктураВидимостиЭлементовФормы(Объект, РежимВидимостиПоказатьТолькоВажные);
	УстановитьПривилегированныйРежим(Истина);
	ЗаголовкиЭлементов = СтруктураЗаголовковЭлементовФормы(Объект, ВидимостьЭлементов);
	УстановитьПривилегированныйРежим(Ложь);
		
	НастройкиВидимостиИЗаголовков.Вставить("ВидимостьЭлементов", ВидимостьЭлементов);
	НастройкиВидимостиИЗаголовков.Вставить("ЗаголовкиЭлементов", ЗаголовкиЭлементов);
		
	Возврат НастройкиВидимостиИЗаголовков;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтение
	|ГДЕ ИСТИНА
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ЭтоГруппа ИЛИ
	|	ЗначениеРазрешено(Ссылка)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий
 
Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда	
		Если Параметры.Свойство("ЗначениеКопирования") Тогда
			ОбъектКопирования = Параметры.ЗначениеКопирования;
			Если Не ОбъектКопирования.ЭтоГруппа Тогда
				СтандартнаяОбработка = Ложь;
				Параметры = Новый Структура("ЗначениеКопирования", ОбъектКопирования);
				ВыбраннаяФорма = "ФормаЭлемента";
			КонецЕсли;
		ИначеЕсли Параметры.Свойство("РежимВыбора") Тогда
			Если Параметры.РежимВыбора
				И (Не Параметры.Свойство("ЭтоГруппа")
				 	Или Не Параметры.ЭтоГруппа) Тогда
				СтандартнаяОбработка = Ложь;
				ВыбраннаяФорма = "ФормаЭлемента";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидФормы = "ФормаВыбора" Тогда
		ВыборГруппИЭлементов = Неопределено;
		Если Параметры.Свойство("ВыборГруппИЭлементов",ВыборГруппИЭлементов) Тогда
			Если ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
				СтандартнаяОбработка = Ложь;
				ВыбраннаяФорма = "ФормаВыбораГруппИЭлементов";
			КонецЕсли;
		Иначе
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "ФормаВыбораГруппИЭлементов";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	НоменклатураВызовСервера.НоменклатураОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Карточка номенклатуры
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "КарточкаНоменклатуры";
	КомандаПечати.Представление = НСтр("ru = 'Печать'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Карточка номенклатуры'");
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КарточкаНоменклатуры") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"КарточкаНоменклатуры", 
			?(МассивОбъектов.Количество() = 1, МассивОбъектов[0], НСтр("ru = 'Список номенклатуры'")), 
			СформироватьПечатнуюФормуКарточкиНоменклатуры(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьПечатнуюФормуКарточкиНоменклатуры(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КАРТОЧКАНОМЕНКЛАТУРЫ";
	
	ПерваяКарточка = Истина;
	
	Для Каждого Номенклатура Из МассивОбъектов Цикл
		Если ПерваяКарточка Тогда
			ПерваяКарточка = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		НастройкиВидимостиИЗаголовков = НастройкиВидимостиИЗаголовков(Номенклатура);
		ТабличныйДокумент.Вывести(
			ТабличныйДокументКарточкиНоменклатуры(Номенклатура, НастройкиВидимостиИЗаголовков));	
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#Область КарточкаНоменклатуры

// Возвращает табличный документ номенклатуры.
// Параметры:
//  Номенклатура - СправочникОбъект.Номенклатура, ДанныеФормыСтруктура - элемент, для которого нужно отработать логику
//                                                                       связи реквизитов
//  НастройкиВидимостиИЗаголовков - Структура - см. функцию Справочники.Номенклатура.НастройкиВидимостиИЗаголовков.
//
// Возвращаемое значение:
//	ТабличныйДокумент - табличный документ с реквизитами.
//
Функция ТабличныйДокументКарточкиНоменклатуры(Номенклатура, НастройкиВидимостиИЗаголовков) Экспорт
	
	Перем Заголовок;
	
	Объект = Неопределено;
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Объект = Номенклатура.ПолучитьОбъект();
	ИначеЕсли ТипЗнч(Номенклатура) = Тип("СправочникОбъект.Номенклатура")
		Или ТипЗнч(Номенклатура) = Тип("ДанныеФормыСтруктура") Тогда
		Объект = Номенклатура;
	Иначе
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	ТабличныйДокументКарточка = Новый ТабличныйДокумент;
	
	СтруктураВидимости = НастройкиВидимостиИЗаголовков.ВидимостьЭлементов;
	СтруктураЗаголовков = НастройкиВидимостиИЗаголовков.ЗаголовкиЭлементов;
	
	Макет = ПолучитьМакет("ПФ_MXL_КарточкаНоменклатуры");
	
	#Область Шапка
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры, Объект);
		
	Если Не ЗначениеЗаполнено(Объект.Наименование) Тогда
		ОбластьШапка.Параметры.Наименование = ТекстЗначенияНеЗаполнен("Наименование");
	КонецЕсли;
	ОбластьШапка.Параметры.РасшифровкаНаименование = "Наименование";
	
	Если Не ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		ОбластьШапка.Параметры.НаименованиеПолное = ТекстЗначенияНеЗаполнен("НаименованиеПолное");
	КонецЕсли;
	ОбластьШапка.Параметры.РасшифровкаНаименованиеПолное = "НаименованиеПолное";
	
	Если Не ЗначениеЗаполнено(Объект.Артикул) Тогда
		ОбластьШапка.Параметры.Артикул = ТекстЗначенияНеЗаполнен("Артикул");
	КонецЕсли;
	ОбластьШапка.Параметры.РасшифровкаАртикул = "Артикул";
	
	Если Не ЗначениеЗаполнено(Объект.Код) Тогда
		ОбластьШапка.Параметры.Код = ТекстЗначенияНеЗаполнен("Код");
	КонецЕсли;
	ОбластьШапка.Параметры.РасшифровкаКод = "Код";

	Если РазделВиден("ГиперссылкаПерейтиНоменклатураСАналогичнымиСвойствами", СтруктураВидимости) Тогда
		ОбластьШапка.Параметры.РасшифровкаГиперссылкаПерейтиНоменклатураСАналогичнымиСвойствами = "ГиперссылкаПерейтиНоменклатураСАналогичнымиСвойствами";
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиШтрихкодыНоменклатуры", СтруктураВидимости) Тогда 
		Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиШтрихкодыНоменклатуры", Заголовок) Тогда
			ОбластьШапка.Параметры.ГиперссылкаПерейтиШтрихкодыНоменклатуры = Заголовок;	
		КонецЕсли;
		ОбластьШапка.Параметры.РасшифровкаГиперссылкаПерейтиШтрихкодыНоменклатуры = "ГиперссылкаПерейтиШтрихкодыНоменклатуры";
	КонецЕсли;
	
	ТабличныйДокументКарточка.Присоединить(ОбластьШапка);
	
	#КонецОбласти
		
	ТабличныйДокументКолонки = Новый ТабличныйДокумент;
	
	#Область ТабличныйДокументЛево
	
	ТабличныйДокументЛево = Новый ТабличныйДокумент;
		
	#Область Описание
	
	Если ГлаваВидна("Описание", СтруктураВидимости) Тогда 
		
		ОбластьОписаниеЗаголовок = Макет.ПолучитьОбласть("ОписаниеЗаголовок");
		ТабличныйДокументЛево.Вывести(ОбластьОписаниеЗаголовок);
		
		// Вывод картинки
		Если ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
			
			ОбластьОписаниеКартинка = Макет.ПолучитьОбласть("ОписаниеКартинка");
			Попытка
				УстановитьПривилегированныйРежим(Истина);
				КартинкаНоменклатуры = РаботаСФайлами.ДвоичныеДанныеФайла(Объект.ФайлКартинки);
				УстановитьПривилегированныйРежим(Ложь);
			Исключение
				КартинкаНоменклатуры = Неопределено; 
			КонецПопытки;
			
			Если ЗначениеЗаполнено(КартинкаНоменклатуры) Тогда
				ОбластьКартинка = ОбластьОписаниеКартинка.Области.АдресКартинки; 
				
				Если ТипЗнч(КартинкаНоменклатуры) = Тип("Картинка") Тогда
					ОбластьКартинка.Картинка = КартинкаНоменклатуры;
				ИначеЕсли ТипЗнч(КартинкаНоменклатуры) = Тип("ДвоичныеДанные") Тогда
					ОбластьКартинка.Картинка = Новый Картинка(КартинкаНоменклатуры);
				КонецЕсли;
				
				ОбластьОписаниеКартинка.Параметры.Расшифровка = "ФайлКартинки";
				
				ТабличныйДокументЛево.Вывести(ОбластьОписаниеКартинка);
			Иначе
				ОписаниеКартинкиОшибка = Макет.ПолучитьОбласть("ФайлКартинкиСтрокаОшибка");
				ОписаниеКартинкиОшибка.Параметры.Расшифровка = "ФайлКартинки";
				ТабличныйДокументЛево.Вывести(ОписаниеКартинкиОшибка);
			КонецЕсли;
			
		Иначе
			
			ОписаниеКартинкиНет = Макет.ПолучитьОбласть("ФайлКартинкиСтрока");
			ОписаниеКартинкиНет.Параметры.Расшифровка = "ФайлКартинки";
			ТабличныйДокументЛево.Вывести(ОписаниеКартинкиНет);
			
		КонецЕсли;	
		
		ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "Описание", Объект.Описание);
		
		Если РазделВиден("ФайлОписанияДляСайта", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "ФайлОписанияДляСайта", Объект.ФайлОписанияДляСайта);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиФайлы", СтруктураВидимости) Тогда
			ОбластьОписаниеФайлыСтрока = Макет.ПолучитьОбласть("ФайлыСтрока");
			
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиФайлы", Заголовок) Тогда
				ОбластьОписаниеФайлыСтрока.Параметры.Файлы = Заголовок;
				ОбластьОписаниеФайлыСтрока.Параметры.Расшифровка = "ГиперссылкаПерейтиФайлы";
			КонецЕсли;
			ТабличныйДокументЛево.Вывести(ОбластьОписаниеФайлыСтрока);
		КонецЕсли;
		
	КонецЕсли;
		
	#КонецОбласти
	
	#Область ДополнительныеРеквизиты
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитов.Свойство КАК Свойство,
	|	ВидыНоменклатуры.НаборСвойств КАК НаборСвойств,
	|	НаборыДополнительныхРеквизитов.Свойство.Заголовок КАК ПредставлениеРеквизита,
	|	НоменклатураДополнительныеРеквизиты.Значение КАК Значение,
	|	ЛОЖЬ КАК ОбщееСвойство,
	|	НаборыДополнительныхРеквизитов.НомерСтроки КАК НомерСтрокиДляСортировки
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитов
	|		ПО ВидыНоменклатуры.НаборСвойств = НаборыДополнительныхРеквизитов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|		ПО (НоменклатураДополнительныеРеквизиты.Ссылка = &Номенклатура)
	|			И (НаборыДополнительныхРеквизитов.Свойство = НоменклатураДополнительныеРеквизиты.Свойство)
	|ГДЕ
	|	НЕ НаборыДополнительныхРеквизитов.Свойство.ЭтоДополнительноеСведение
	|	И ВидыНоменклатуры.Ссылка В(&ВидНоменклатуры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитов.Свойство,
	|	ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие),
	|	НаборыДополнительныхРеквизитов.Свойство.Заголовок,
	|	НоменклатураДополнительныеРеквизиты.Значение,
	|	ИСТИНА КАК ОбщееСвойство,
	|	НаборыДополнительныхРеквизитов.НомерСтроки
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|		ПО (НоменклатураДополнительныеРеквизиты.Ссылка = &Номенклатура)
	|			И НаборыДополнительныхРеквизитов.Свойство = НоменклатураДополнительныеРеквизиты.Свойство
	|ГДЕ
	|	НЕ НаборыДополнительныхРеквизитов.Свойство.ЭтоДополнительноеСведение
	|	И НаборыДополнительныхРеквизитов.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие)";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", Объект.ВидНоменклатуры);
	Запрос.УстановитьПараметр("Номенклатура", Объект.Ссылка);
	ДополнительныеРеквизиты = Запрос.Выполнить().Выгрузить();
	
	Если ГлаваВидна("ДополнительныеРеквизиты", СтруктураВидимости, ДополнительныеРеквизиты.Количество()) Тогда

		ДополнительныеРеквизиты.Сортировать("ОбщееСвойство Убыв, НомерСтрокиДляСортировки Возр");
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("ДополнительныеРеквизитыЗаголовок");
		ТабличныйДокументЛево.Вывести(ОбластьЗаголовок);
		
		Для Каждого ДопРеквизит Из ДополнительныеРеквизиты Цикл
			ИмяЭлементаДопРеквизита =  "ДополнительныйРеквизитЗначение_" 
				+ СтрЗаменить(ВРег(Строка(ДопРеквизит.НаборСвойств.УникальныйИдентификатор())), "-", "x")
				+ "_"
				+ СтрЗаменить(ВРег(Строка(ДопРеквизит.Свойство.УникальныйИдентификатор())), "-", "x");
			Если РазделВиден(ИмяЭлементаДопРеквизита, СтруктураВидимости) Тогда 
				ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "ДополнительныеРеквизиты", ДопРеквизит.Значение, ДопРеквизит.ПредставлениеРеквизита, ИмяЭлементаДопРеквизита);		
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти	
	
	#Область СведенияОПроизводителе
	
	Если ГлаваВидна("СведенияОПроизводителе", СтруктураВидимости) Тогда 

		
		ОбластьОписаниеЗаголовок = Макет.ПолучитьОбласть("СведенияОПроизводителеЗаголовок");
		ТабличныйДокументЛево.Вывести(ОбластьОписаниеЗаголовок);
		
		Если РазделВиден("Производитель", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "Производитель", Объект.Производитель);
		КонецЕсли;
		
		Если РазделВиден("Марка", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "Марка", Объект.Марка);
		КонецЕсли;
		
		Если РазделВиден("ПроизводительИмпортерКонтрагент", СтруктураВидимости) Тогда
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "ПроизводительИмпортерКонтрагент", Объект.ПроизводительИмпортерКонтрагент);				
		КонецЕсли;
		
		Если РазделВиден("Принципал", СтруктураВидимости)
			Или РазделВиден("Контрагент", СтруктураВидимости)
			Или РазделВиден ("ГиперссылкаПерейтиСоглашения", СтруктураВидимости) Тогда
			ОбластьРеализацияУслугиПоАгентскомуДоговору = Макет.ПолучитьОбласть("РеализацияУслугиПоАгентскомуДоговору");
			Если СтруктураЗаголовков.Свойство("ГруппаАгентскиеУслуги", Заголовок) Тогда
				ОбластьРеализацияУслугиПоАгентскомуДоговору.Параметры.РеализацияУслугиПоАгентскомуДоговору = Заголовок;
			КонецЕсли;
			ОбластьРеализацияУслугиПоАгентскомуДоговору.Параметры.Расшифровка = "ГруппаАгентскиеУслуги";
			ТабличныйДокументЛево.Вывести(ОбластьРеализацияУслугиПоАгентскомуДоговору);
		КонецЕсли;
		
		Если РазделВиден("Принципал", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "Принципал", Объект.Принципал);
		КонецЕсли;
		
		Если РазделВиден("Контрагент", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "Контрагент", Объект.Контрагент);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиСоглашения", СтруктураВидимости) Тогда 
			ОбластьГиперссылкаПерейтиСоглашения = Макет.ПолучитьОбласть("ГиперссылкаПерейтиСоглашенияСтрока");
			
			ОбластьГиперссылкаПерейтиСоглашения.Параметры.ГиперссылкаПерейтиСоглашения = СтруктураЗаголовков.ГиперссылкаПерейтиСоглашения.Заголовок;
			
			РасшифровкаСоглашения = Новый Структура;
			РасшифровкаСоглашения.Вставить("ИмяЭлемента", "ГиперссылкаПерейтиСоглашения");
			РасшифровкаСоглашения.Вставить("Гиперссылка", СтруктураЗаголовков.ГиперссылкаПерейтиСоглашения.Гиперссылка);
			
			ОбластьГиперссылкаПерейтиСоглашения.Параметры.Расшифровка = РасшифровкаСоглашения;
			
			ТабличныйДокументЛево.Вывести(ОбластьГиперссылкаПерейтиСоглашения);
		КонецЕсли;
		
	КонецЕсли;	
	
	#КонецОбласти
	
	#Область ПланированиеИМаркетинг
	
	Если ГлаваВидна("ПланированиеИМаркетинг", СтруктураВидимости) Тогда 
		
		ОбластьОписаниеЗаголовок = Макет.ПолучитьОбласть("ПланированиеИМаркетингЗаголовок");
		ТабличныйДокументЛево.Вывести(ОбластьОписаниеЗаголовок);
		
		Если РазделВиден("ТоварнаяКатегория", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "ТоварнаяКатегория", Объект.ТоварнаяКатегория);
		КонецЕсли;
		
		Если РазделВиден("КоллекцияНоменклатуры", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "КоллекцияНоменклатуры", Объект.КоллекцияНоменклатуры);
		КонецЕсли;
		
		Если РазделВиден("СезоннаяГруппа", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "СезоннаяГруппа", Объект.СезоннаяГруппа);
		КонецЕсли;
		
		Если РазделВиден("РейтингПродаж", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "РейтингПродаж", Объект.РейтингПродаж);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиСовместныеПродажи", СтруктураВидимости) Тогда
			ОбластьГиперссылкаПерейтиСовместныеПродажиСтрока = Макет.ПолучитьОбласть("ГиперссылкаПерейтиСовместныеПродажиСтрока");
			ОбластьГиперссылкаПерейтиСовместныеПродажиСтрока.Параметры.Расшифровка = "ГиперссылкаПерейтиСовместныеПродажи";
			ТабличныйДокументЛево.Вывести(ОбластьГиперссылкаПерейтиСовместныеПродажиСтрока);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиСегменты", СтруктураВидимости) Тогда
			ОбластьГиперссылкаПерейтиСегменты = Макет.ПолучитьОбласть("ГиперссылкаПерейтиСегментыСтрока");
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиСегменты", Заголовок) Тогда  
				ОбластьГиперссылкаПерейтиСегменты.Параметры.ГиперссылкаПерейтиСегменты = Заголовок;
			КонецЕсли;
			ОбластьГиперссылкаПерейтиСегменты.Параметры.Расшифровка = "ГиперссылкаПерейтиСегменты";
			ТабличныйДокументЛево.Вывести(ОбластьГиперссылкаПерейтиСегменты);
		КонецЕсли;
				
	КонецЕсли;	
	
	#КонецОбласти
	
	#Область ОбеспечениеИПроизводство
	
	Если ГлаваВидна("ОбеспечениеИПроизводство", СтруктураВидимости) Тогда 
		
		Область = Макет.ПолучитьОбласть("ОбеспечениеИПроизводствоЗаголовок");
		Если СтруктураЗаголовков.Свойство("ДекорацияЗаголовокОбеспечение", Заголовок) Тогда
			Область.Параметры.ОбеспечениеПроизводство = Заголовок;
		КонецЕсли;		
		ТабличныйДокументЛево.Вывести(Область);
		
		Если РазделВиден("ОбособленнаяЗакупкаПродажа", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ОбособленнаяЗакупкаПродажаСтрока");
			Картинка = КартинкаФлагаПоЗначению(Объект.ОбособленнаяЗакупкаПродажа);
			Область.Область("ОбособленнаяЗакупкаПродажаФлаг").Картинка = Картинка;
			Область.Параметры.Расшифровка = "ОбособленнаяЗакупкаПродажа";
			ТабличныйДокументЛево.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("СпособОбеспеченияПотребностей", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "СпособОбеспеченияПотребностей", Объект.СпособОбеспеченияПотребностей);
		КонецЕсли;
		
		Если РазделВиден("СхемаОбеспечения", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "СхемаОбеспечения", Объект.СхемаОбеспечения);
		КонецЕсли;
				
		Если РазделВиден("ГиперссылкаПерейтиВариантыКомплектации", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиВариантыКомплектацииСтрока");
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиВариантыКомплектации", Заголовок) Тогда
				Область.Параметры.ГиперссылкаПерейтиВариантыКомплектации = Заголовок;
			КонецЕсли;
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиВариантыКомплектации";
			ТабличныйДокументЛево.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиНастройкаПоддержанияЗапасов", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиНастройкаПоддержанияЗапасовСтрока");
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиНастройкаПоддержанияЗапасов";
			ТабличныйДокументЛево.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиНастройкаСпособовОбеспеченияПотребностей", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиНастройкаСпособовОбеспеченияПотребностейСтрока");
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиНастройкаСпособовОбеспеченияПотребностей";
			ТабличныйДокументЛево.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиНастройкаПередачиМатериаловВПроизводство", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиНастройкаПередачиМатериаловВПроизводствоСтрока");
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиНастройкаПередачиМатериаловВПроизводство";
			ТабличныйДокументЛево.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиПроизводство", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиПроизводствоСтрока");
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиПроизводство";
			ТабличныйДокументЛево.Вывести(Область);
		КонецЕсли;
				
	КонецЕсли;	
	
	#КонецОбласти
	
	#Область Цены
	
	Если ГлаваВидна("Цены", СтруктураВидимости) Тогда 

		
		ОбластьОписаниеЗаголовок = Макет.ПолучитьОбласть("ЦеныЗаголовок");
		ТабличныйДокументЛево.Вывести(ОбластьОписаниеЗаголовок);
		
		Если РазделВиден("ЦеноваяГруппа", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "ЦеноваяГруппа", Объект.ЦеноваяГруппа);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиПрайсЛистКомпании", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ПрайсЛистКомпанииСтрока");
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиПрайсЛистКомпании";
			ТабличныйДокументЛево.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиПрайсЛистыПоставщиков", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ПрайсЛистыПоставщиковСтрока");
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиПрайсЛистыПоставщиков";
			ТабличныйДокументЛево.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиИсторияИзмененияЦенКомпании", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ИсторияИзмененияЦенКомпанииСтрока");
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиИсторияИзмененияЦенКомпании";
			ТабличныйДокументЛево.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиИсторияИзмененияЦенПоставщиков", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ИсторияИзмененияЦенПоставщиковСтрока");
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиИсторияИзмененияЦенПоставщиков";
			ТабличныйДокументЛево.Вывести(Область);
		КонецЕсли;
		
	КонецЕсли;
				
	#КонецОбласти
	
	#Область ПечатьЭтикетокИЦенников
	
	Если ГлаваВидна("ПечатьЭтикетокИЦенников", СтруктураВидимости) Тогда 
		
		ВидНоменклатурыШаблоны = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидНоменклатуры, "ШаблонЦенника, ШаблонЭтикетки");
		
		ОбластьОписаниеЗаголовок = Макет.ПолучитьОбласть("ПечатьЭтикетокИЦенниковЗаголовок");
		ТабличныйДокументЛево.Вывести(ОбластьОписаниеЗаголовок);
		
		Область = Макет.ПолучитьОбласть("ИспользоватьИндивидуальныйШаблонЭтикеткиСтрока");
		Если Объект.ИспользоватьИндивидуальныйШаблонЭтикетки Тогда
			Область.Параметры.ИспользоватьИндивидуальныйШаблонЭтикетки = НСтр("ru = 'Индивидуальный шаблон этикетки:'");
			Область.Параметры.Расшифровка = "ИспользоватьИндивидуальныйШаблонЭтикетки";
			ТабличныйДокументЛево.Вывести(Область);
			ОбластьЭтикетки = Макет.ПолучитьОбласть("ШаблонЭтикеткиСтрока");
			ОбластьЭтикетки.Параметры.ШаблонЭтикетки = Объект.ШаблонЭтикетки;
			ОбластьЭтикетки.Параметры.Расшифровка = "ШаблонЭтикетки";
			ТабличныйДокументЛево.Вывести(ОбластьЭтикетки);
		Иначе
			Область.Параметры.ИспользоватьИндивидуальныйШаблонЭтикетки = НСтр("ru = 'Используется общий для вида шаблон этикетки'");
			Область.Параметры.Расшифровка = "ИспользоватьИндивидуальныйШаблонЭтикетки";
			ТабличныйДокументЛево.Вывести(Область);
			ОбластьЭтикетки = Макет.ПолучитьОбласть("ШаблонЭтикеткиСтрока");
			Если ЗначениеЗаполнено(ВидНоменклатурыШаблоны.ШаблонЭтикетки) Тогда
				ОбластьЭтикетки.Параметры.ШаблонЭтикетки = ВидНоменклатурыШаблоны.ШаблонЭтикетки;
			Иначе
				ОбластьЭтикетки.Параметры.ШаблонЭтикетки =  НСтр("ru = '<не указан>'");
			КонецЕсли;
			ОбластьЭтикетки.Параметры.Расшифровка = "ШаблонЭтикетки";
			ТабличныйДокументЛево.Вывести(ОбластьЭтикетки);
		КонецЕсли;
		
		Область = Макет.ПолучитьОбласть("ИспользоватьИндивидуальныйШаблонЦенникаСтрока");
		Если Объект.ИспользоватьИндивидуальныйШаблонЦенника Тогда
			Область.Параметры.ИспользоватьИндивидуальныйШаблонЦенника = НСтр("ru = 'Индивидуальный шаблон ценника:'");
			Область.Параметры.Расшифровка = "ИспользоватьИндивидуальныйШаблонЦенника";
			ТабличныйДокументЛево.Вывести(Область);
			ОбластьЦенника = Макет.ПолучитьОбласть("ШаблонЦенникаСтрока");
			ОбластьЦенника.Параметры.ШаблонЦенника = Объект.ШаблонЦенника;
			ОбластьЦенника.Параметры.Расшифровка = "ШаблонЦенника";
			ТабличныйДокументЛево.Вывести(ОбластьЦенника);
		Иначе
			Область.Параметры.ИспользоватьИндивидуальныйШаблонЦенника = НСтр("ru = 'Используется общий для вида шаблон ценника'");
			Область.Параметры.Расшифровка = "ИспользоватьИндивидуальныйШаблонЦенника";
			ТабличныйДокументЛево.Вывести(Область);
			ОбластьЦенника = Макет.ПолучитьОбласть("ШаблонЦенникаСтрока");
			Если ЗначениеЗаполнено(ВидНоменклатурыШаблоны.ШаблонЦенника) Тогда
				ОбластьЦенника.Параметры.ШаблонЦенника = ВидНоменклатурыШаблоны.ШаблонЦенника;
			Иначе
				ОбластьЦенника.Параметры.ШаблонЦенника =  НСтр("ru = '<не указан>'");
			КонецЕсли;
			ОбластьЦенника.Параметры.Расшифровка = "ШаблонЦенника";
			ТабличныйДокументЛево.Вывести(ОбластьЦенника);
		КонецЕсли;
				
	КонецЕсли;	
	
	#КонецОбласти
	
	ТабличныйДокументКолонки.Присоединить(ТабличныйДокументЛево);
	
	#КонецОбласти
		
	#Область ТабличныйДокументПраво
	
	ТабличныйДокументПраво = Новый ТабличныйДокумент;
	
	
	#Область ОсновныеПараметрыУчета
	
	Если ГлаваВидна("ОсновныеПараметрыУчета", СтруктураВидимости) Тогда 
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("ОсновныеПараметрыУчетаЗаголовок");
		ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);
		
		Если РазделВиден("ВидНоменклатуры", СтруктураВидимости) Или РазделВиден("ВидНоменклатурыПереключатель", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ВидНоменклатуры", Объект.ВидНоменклатуры);
		КонецЕсли;
		
		Если РазделВиден("ТипНоменклатуры", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ТипНоменклатуры", Объект.ТипНоменклатуры);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиСоставНабора", СтруктураВидимости) Тогда 
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиСоставНабораСтрока");
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиСоставНабора", Заголовок) Тогда  
				Область.Параметры.ГиперссылкаПерейтиСоставНабора = Заголовок;
				Если РазделВиден("ГиперссылкаПерейтиСоставНабораВнимание", СтруктураВидимости) Тогда 
					Область.Область("ГиперссылкаПерейтиСоставНабораВнимание").Картинка = БиблиотекаКартинок.Внимание16;
				КонецЕсли;
			КонецЕсли;
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиСоставНабора";
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("ИспользованиеХарактеристик", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ИспользованиеХарактеристик", Объект.ИспользованиеХарактеристик);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиХарактеристикиНоменклатуры", СтруктураВидимости) Тогда 
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиХарактеристикиНоменклатурыСтрока");
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиХарактеристикиНоменклатуры", Заголовок) Тогда  
				Область.Параметры.ГиперссылкаПерейтиХарактеристикиНоменклатуры = Заголовок;
			КонецЕсли;
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиХарактеристикиНоменклатуры";
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;

		
		Если РазделВиден("НастройкаИспользованияСерий", СтруктураВидимости) Тогда
			НастройкаИспользованияСерий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидНоменклатуры, "НастройкаИспользованияСерий");
			Если Не ЗначениеЗаполнено(НастройкаИспользованияСерий) Тогда
				НастройкаИспользованияСерийСтрока = НСтр("ru = 'Не используются'");
			Иначе
				НастройкаИспользованияСерийСтрока = Строка(НастройкаИспользованияСерий);
			КонецЕсли;
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "НастройкаИспользованияСерий", НастройкаИспользованияСерийСтрока);
		КонецЕсли;
		
		Если РазделВиден("ВариантОформленияПродажи", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ВариантОформленияПродажи", Объект.ВариантОформленияПродажи);
		КонецЕсли;
		
		Если РазделВиден("Родитель", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "Родитель", Объект.Родитель);
		КонецЕсли;
		
		Если РазделВиден("ГруппаДоступа", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ГруппаДоступа", Объект.ГруппаДоступа);
		КонецЕсли;

		
		Если РазделВиден("Качество", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "Качество", Объект.Качество);
		КонецЕсли;
				
		Если РазделВиден("ГиперссылкаПерейтиТоварыДругогоКачества", СтруктураВидимости) Тогда 
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиТоварыДругогоКачестваСтрока");
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиТоварыДругогоКачества", Заголовок) Тогда  
				Область.Параметры.ГиперссылкаПерейтиТоварыДругогоКачества = Заголовок;
			КонецЕсли;
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиТоварыДругогоКачества";
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;
		
	КонецЕсли;	
	
	#КонецОбласти
	
	#Область ЕдиницыИзмеренияИОбластьХранения
	
	Если ГлаваВидна("ЕдиницыИзмеренияИОбластьХранения", СтруктураВидимости) Тогда 
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("ЕдиницыИзмеренияИОбластьХраненияЗаголовок");
		ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);
		
		Если РазделВиден("ИспользоватьУпаковки", СтруктураВидимости) Тогда 
			Если Объект.ИспользоватьУпаковки Тогда
				Если Объект.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда
					Набор = НСтр("ru = 'Индивидуальный набор'");
				Иначе
					Набор = Объект.НаборУпаковок;
				КонецЕсли;
				ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ИспользоватьУпаковки", Набор);
			Иначе
				ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ИспользоватьУпаковки", НСтр("ru = 'не используются'"));
			КонецЕсли;
		КонецЕсли;
				
		Если РазделВиден("ГиперссылкаПерейтиУпаковкиНоменклатуры", СтруктураВидимости) Тогда 
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиУпаковкиНоменклатурыСтрока");
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиУпаковкиНоменклатуры", Заголовок) Тогда  
				Область.Параметры.ГиперссылкаПерейтиУпаковкиНоменклатуры = Заголовок;
				Если РазделВиден("ГиперссылкаПерейтиУпаковкиНоменклатурыВнимание", СтруктураВидимости) Тогда 
					Область.Область("ГиперссылкаПерейтиУпаковкиНоменклатурыВнимание").Картинка = БиблиотекаКартинок.Внимание16;
				КонецЕсли;
			КонецЕсли;
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиУпаковкиНоменклатуры";
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиУпаковкиНабора", СтруктураВидимости) Тогда 
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиУпаковкиНабораСтрока");
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиУпаковкиНабора", Заголовок) Тогда  
				Область.Параметры.ГиперссылкаПерейтиУпаковкиНабора = Заголовок;
				Если РазделВиден("ГиперссылкаПерейтиУпаковкиНабораВнимание", СтруктураВидимости) Тогда 
					Область.Область("ГиперссылкаПерейтиУпаковкиНабораВнимание").Картинка = БиблиотекаКартинок.Внимание16;
				КонецЕсли;
			КонецЕсли;
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиУпаковкиНабора";
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиПрогнозыРасходаУпаковок", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиПрогнозыРасходаУпаковокСтрока");
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиПрогнозыРасходаУпаковок";
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("ЕдиницаИзмерения", СтруктураВидимости) Тогда
			
			
			СтрокаЗаполнения = НСтр("ru = '%ЕдиницаИзмерения%%Тара%'");
			Если ЗначениеЗаполнено(Объект.ЕдиницаИзмерения) Тогда
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаИзмерения%", Объект.ЕдиницаИзмерения);
			Иначе
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаИзмерения%", НСтр("ru = '<не указана>'"));
			КонецЕсли;
			
			Если Объект.ПоставляетсяВМногооборотнойТаре Тогда 
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Тара%", НСтр("ru = ', поставляется в таре'"));
			Иначе
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Тара%", "");
			КонецЕсли;
			
			СтруктураЗаголовков.Свойство("ЕдиницаИзмерения", Заголовок);
			
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ЕдиницаИзмерения", СтрокаЗаполнения, Заголовок);
			
		КонецЕсли;
		
		Если РазделВиден("НоменклатураМногооборотнаяТара", СтруктураВидимости) Тогда
			
			СтрокаЗаполнения = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
				Объект.НоменклатураМногооборотнаяТара,
				Объект.ХарактеристикаМногооборотнаяТара);				
			
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "НоменклатураМногооборотнаяТара", СтрокаЗаполнения);

			
		КонецЕсли;
		
		Если РазделВиден("ЕдиницаДляОтчетов", СтруктураВидимости) Тогда
			
			СтрокаЗаполнения = НСтр("ru = '<не указана>'");
			Если ЗначениеЗаполнено(Объект.ЕдиницаДляОтчетов) Тогда
				СтрокаЗаполнения = НСтр("ru = '%ЕдиницаДляОтчетов%, содержит %Количество% %ЕдиницаИзмерения%'");
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаДляОтчетов%", Объект.ЕдиницаДляОтчетов);
				Если Объект.ЕдиницаДляОтчетов <> Объект.ЕдиницаИзмерения Тогда					
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Количество%", Объект.КоэффициентЕдиницыДляОтчетов);
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаИзмерения%", Объект.ЕдиницаИзмерения);
				Иначе
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, ", содержит %Количество% %ЕдиницаИзмерения%", "");
				КонецЕсли;
			КонецЕсли;
			
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ЕдиницаДляОтчетов", СтрокаЗаполнения);
			
		КонецЕсли;
		
		Если РазделВиден("Вес", СтруктураВидимости) Тогда
			
			Если Объект.ВесИспользовать Тогда
				СтрокаЗаполнения = НСтр("ru = '%Количество1% %ЕдиницаИзмерения% весит %Количество2% %Единица%, %МожноУказыватьВДокументах%'");
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Количество1%", Объект.ВесЗнаменатель);
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Количество2%", Объект.ВесЧислитель);
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаИзмерения%", Объект.ЕдиницаИзмерения);
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Единица%", Объект.ВесЕдиницаИзмерения);				
				Если Объект.ВесМожноУказыватьВДокументах Тогда
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%МожноУказыватьВДокументах%", НСтр("ru = 'можно указывать количество в %ЕдиницаИзмерения% в документах'"));
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаИзмерения%", Объект.ВесЕдиницаИзмерения);
				Иначе
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%МожноУказыватьВДокументах%", НСтр("ru = 'указан справочно'"));
				КонецЕсли;
			Иначе
				СтрокаЗаполнения = НСтр("ru = '<не измеряется>'");
			КонецЕсли;
			
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "Вес", СтрокаЗаполнения);
			
		КонецЕсли;

		
		Если РазделВиден("Объем", СтруктураВидимости) Тогда
			
			Если Объект.ОбъемИспользовать Тогда
				СтрокаЗаполнения = НСтр("ru = '%Количество1% %ЕдиницаИзмерения% занимает объем %Количество2% %Единица%, %МожноУказыватьВДокументах%'");
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Количество1%", Объект.ОбъемЗнаменатель);
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Количество2%", Объект.ОбъемЧислитель);
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаИзмерения%", Объект.ЕдиницаИзмерения);
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Единица%", Объект.ОбъемЕдиницаИзмерения);				
				Если Объект.ОбъемМожноУказыватьВДокументах Тогда
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%МожноУказыватьВДокументах%", НСтр("ru = 'можно указывать количество в %ЕдиницаИзмерения% в документах'"));
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаИзмерения%", Объект.ОбъемЕдиницаИзмерения);
				Иначе
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%МожноУказыватьВДокументах%", НСтр("ru = 'указан справочно'"));
				КонецЕсли;
			Иначе
				СтрокаЗаполнения = НСтр("ru = '<не измеряется>'");
			КонецЕсли;
			
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "Объем", СтрокаЗаполнения);
			
		КонецЕсли;

		
		Если РазделВиден("Длина", СтруктураВидимости) Тогда
			
			Если Объект.ДлинаИспользовать Тогда
				СтрокаЗаполнения = НСтр("ru = '%Количество1% %ЕдиницаИзмерения% имеет длину %Количество2% %Единица%, %МожноУказыватьВДокументах%'");
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Количество1%", Объект.ДлинаЗнаменатель);
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Количество2%", Объект.ДлинаЧислитель);
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаИзмерения%", Объект.ЕдиницаИзмерения);
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Единица%", Объект.ДлинаЕдиницаИзмерения);				
				Если Объект.ДлинаМожноУказыватьВДокументах Тогда
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%МожноУказыватьВДокументах%", НСтр("ru = 'можно указывать количество в %ЕдиницаИзмерения% в документах'"));
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаИзмерения%", Объект.ДлинаЕдиницаИзмерения);
				Иначе
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%МожноУказыватьВДокументах%", НСтр("ru = 'указана справочно'"));
				КонецЕсли;
			Иначе
				СтрокаЗаполнения = НСтр("ru = '<не измеряется>'");
			КонецЕсли;
			
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "Длина", СтрокаЗаполнения);
			
		КонецЕсли;

		
		Если РазделВиден("Площадь", СтруктураВидимости) Тогда
			
			Если Объект.ПлощадьИспользовать Тогда
				СтрокаЗаполнения = НСтр("ru = '%Количество1% %ЕдиницаИзмерения% имеет площадь %Количество2% %Единица%, %МожноУказыватьВДокументах%'");
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Количество1%", Объект.ПлощадьЗнаменатель);
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Количество2%", Объект.ПлощадьЧислитель);
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаИзмерения%", Объект.ЕдиницаИзмерения);
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Единица%", Объект.ПлощадьЕдиницаИзмерения);				
				Если Объект.ПлощадьМожноУказыватьВДокументах Тогда
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%МожноУказыватьВДокументах%", НСтр("ru = 'можно указывать количество в %ЕдиницаИзмерения% в документах'"));
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаИзмерения%", Объект.ПлощадьЕдиницаИзмерения);
				Иначе
					СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%МожноУказыватьВДокументах%", НСтр("ru = 'указана справочно'"));
				КонецЕсли;
			Иначе
				СтрокаЗаполнения = НСтр("ru = '<не измеряется>'");
			КонецЕсли;
			
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "Площадь", СтрокаЗаполнения);
			
		КонецЕсли;
		
		Если РазделВиден("СкладскаяГруппа", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "СкладскаяГруппа", Объект.СкладскаяГруппа);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиРазмещениеНоменклатуры", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиРазмещениеНоменклатурыСтрока");
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиРазмещениеНоменклатуры";
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("СрокГодности", СтруктураВидимости) Тогда
			СтрокаЗаполнения = НСтр("ru = '%СрокГодности% %ЕдиницаИзмеренияСрокаГодности%'");
			СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%СрокГодности%", Объект.СрокГодности);
			СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%ЕдиницаИзмеренияСрокаГодности%", Объект.ЕдиницаИзмеренияСрокаГодности);
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "СрокГодности", СтрокаЗаполнения);
		КонецЕсли;	
		
	КонецЕсли;	
	
	#КонецОбласти
		
	#Область РегламентированныйИФинансовыйУчет
	
	Если ГлаваВидна("РегламентированныйИФинансовыйУчет", СтруктураВидимости) Тогда 
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("РегламентированныйИФинансовыйУчетЗаголовок");
		ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);
		
		Если РазделВиден("ОблагаетсяНДСУПокупателя", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ОблагаетсяНДСУПокупателяСтрока");
			Картинка = КартинкаФлагаПоЗначению(Объект.ОблагаетсяНДСУПокупателя);
			Область.Область("ОблагаетсяНДСУПокупателяФлаг").Картинка = Картинка;
			Область.Параметры.Расшифровка = "ОблагаетсяНДСУПокупателя";
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("СтавкаНДС", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "СтавкаНДС", Объект.СтавкаНДС);
		КонецЕсли;
		
		Если РазделВиден("ПодакцизныйТовар", СтруктураВидимости) Тогда 
			Область = Макет.ПолучитьОбласть("ПодакцизныйТоварСтрока");
			Картинка = КартинкаФлагаПоЗначению(Объект.ПодакцизныйТовар);
			Область.Область("ПодакцизныйТоварФлаг").Картинка = Картинка;
			Область.Параметры.Расшифровка = "ПодакцизныйТовар";
			ТабличныйДокументПраво.Вывести(Область);		
		КонецЕсли;
		
		Если РазделВиден("КодРаздел7ДекларацииНДС", СтруктураВидимости) Тогда
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "КодРаздел7ДекларацииНДС", Объект.КодРаздел7ДекларацииНДС);
		КонецЕсли;
		
		Если РазделВиден("ВестиУчетПоГТД", СтруктураВидимости) Тогда 
			Область = Макет.ПолучитьОбласть("ВестиУчетПоГТДСтрока");
			Картинка = КартинкаФлагаПоЗначению(Объект.ВестиУчетПоГТД);
			Область.Область("ВестиУчетПоГТДФлаг").Картинка = Картинка;
			Область.Параметры.Расшифровка = "ВестиУчетПоГТД";
			ТабличныйДокументПраво.Вывести(Область);		
		КонецЕсли;
		
		Если РазделВиден("ВестиУчетСертификатовНоменклатуры", СтруктураВидимости) Тогда 
			
			
			Область = Макет.ПолучитьОбласть("ВестиУчетСертификатовНоменклатурыСтрока");
			Картинка = КартинкаФлагаПоЗначению(Объект.ВестиУчетСертификатовНоменклатуры);
			Область.Область("ВестиУчетСертификатовНоменклатурыФлаг").Картинка = Картинка;
						
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиСертификатыНоменклатуры", Заголовок) Тогда
				Область.Параметры.ГиперссылкаПерейтиСертификатыНоменклатуры = Заголовок;
				Если РазделВиден("ГиперссылкаПерейтиСертификатыНоменклатурыВнимание", СтруктураВидимости) Тогда 
					Область.Область("ГиперссылкаПерейтиСертификатыНоменклатурыВнимание").Картинка = БиблиотекаКартинок.Внимание16;
				КонецЕсли;
				Область.Параметры.РасшифровкаГиперссылки = "ГиперссылкаПерейтиСертификатыНоменклатуры";
			КонецЕсли;
			
			Область.Параметры.Расшифровка = "ВестиУчетСертификатовНоменклатуры";
			ТабличныйДокументПраво.Вывести(Область);
			
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиДрагоценныеМатериалы", СтруктураВидимости) Тогда 
			
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиДрагоценныеМатериалыСтрока");
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиДрагоценныеМатериалы", Заголовок) Тогда
				Область.Параметры.ГиперссылкаПерейтиДрагоценныеМатериалы = Заголовок;
			КонецЕсли;
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиДрагоценныеМатериалы";
			ТабличныйДокументПраво.Вывести(Область);
			
		КонецЕсли;
		
		Если РазделВиден("ГруппаАналитическогоУчета", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ГруппаАналитическогоУчета", Объект.ГруппаАналитическогоУчета);	 
		КонецЕсли;
		
		Если РазделВиден("ГруппаФинансовогоУчета", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ГруппаФинансовогоУчета", Объект.ГруппаФинансовогоУчета);	 
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиРаспределениеПродажПоНаправлениямДеятельности", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиРаспределениеПродажПоНаправлениямДеятельностиСтрока");
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиРаспределениеПродажПоНаправлениямДеятельности";
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;
			
	КонецЕсли;
	
	#КонецОбласти
		
	#Область СведенияОбАлкогольнойПродукции
	
	Если ГлаваВидна("СведенияОбАлкогольнойПродукции", СтруктураВидимости) Тогда
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("СведенияОбАлкогольнойПродукцииЗаголовок");
		ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);		
		
		Если РазделВиден("ВидАлкогольнойПродукции", СтруктураВидимости) Тогда
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ВидАлкогольнойПродукции", Объект.ВидАлкогольнойПродукции);				
		КонецЕсли;
		
		Если РазделВиден("ИмпортнаяАлкогольнаяПродукция", СтруктураВидимости) Тогда
			Если Объект.ИмпортнаяАлкогольнаяПродукция Тогда
				СтрокаЗаполнения = НСтр("ru = 'Импорт'");	
			Иначе
				СтрокаЗаполнения = НСтр("ru = 'Россия'");
			КонецЕсли;
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ИмпортнаяАлкогольнаяПродукция", СтрокаЗаполнения);				
		КонецЕсли;
		
		Если РазделВиден("АлкогольнаяПродукцияВоВскрытойТаре", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("АлкогольнаяПродукцияВоВскрытойТареСтрока");
			Картинка = КартинкаФлагаПоЗначению(Объект.АлкогольнаяПродукцияВоВскрытойТаре);
			Область.Область("АлкогольнаяПродукцияВоВскрытойТареФлаг").Картинка = Картинка;
			Область.Параметры.Расшифровка = "АлкогольнаяПродукцияВоВскрытойТаре";
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("ОбъемДАЛ", СтруктураВидимости) Тогда
			СтрокаЗаполнения = НСтр("ru = '%Объем% дал'");
			СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Объем%", Объект.ОбъемДАЛ);
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ОбъемДАЛ", СтрокаЗаполнения);				
		КонецЕсли;
		
		Если РазделВиден("Крепость", СтруктураВидимости) Тогда
			СтрокаЗаполнения = НСтр("ru = '%Крепость% % об.'");
			СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Крепость%", Объект.Крепость);
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "Крепость", СтрокаЗаполнения);				
		КонецЕсли;
			
	КонецЕсли;
	
	#КонецОбласти
	
	#Область КиЗГИСМ
	
	Если ГлаваВидна("КиЗГИСМ", СтруктураВидимости) Тогда
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("КиЗГИСМЗаголовок");
		ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);		
		
		Если РазделВиден("КиЗГИСМВид", СтруктураВидимости) Тогда
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "КиЗГИСМВид", Объект.КиЗГИСМВид);				
		КонецЕсли;
		
		Если РазделВиден("КиЗГИСМСпособВыпускаВОборот", СтруктураВидимости) Тогда
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "КиЗГИСМСпособВыпускаВОборот", Объект.КиЗГИСМСпособВыпускаВОборот);				
		КонецЕсли;
		
		Если РазделВиден("КиЗГИСМРазмер", СтруктураВидимости) Тогда
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "КиЗГИСМРазмер", Объект.КиЗГИСМРазмер);				
		КонецЕсли;
		
		Если РазделВиден("КиЗГИСМGTIN", СтруктураВидимости) Тогда
			СтрокаЗаполнения = НСтр("ru = '%КиЗГИСМGTIN%'");
			
			Если ЗначениеЗаполнено(Объект.ЕдиницаИзмерения) Тогда
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%КиЗГИСМGTIN%", Объект.КиЗГИСМGTIN);
			Иначе
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%КиЗГИСМGTIN%", НСтр("ru = '<не указан>'"));
			КонецЕсли;
			
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "КиЗГИСМGTIN", СтрокаЗаполнения);				
		КонецЕсли;
			
	КонецЕсли;
	
	#КонецОбласти	
	#Область ОбщероссийскиеКлассификаторы
	
	Если ГлаваВидна("ОбщероссийскиеКлассификаторы", СтруктураВидимости) Тогда
			
		ОбластьЗаголовок = Макет.ПолучитьОбласть("ОбщероссийскиеКлассификаторыЗаголовок");
		ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);		
		
		Шаблон = НСтр("ru = '%Код% (%Наименование%)'");
		
		Если РазделВиден("КодОКВЭД", СтруктураВидимости) Тогда
			СтрокаОКВЭД = "";
			Если ЗначениеЗаполнено(Объект.КодОКВЭД) Тогда 
				Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КодОКВЭД, "Наименование");
				СтрокаОКВЭД = СтрЗаменить(Шаблон, "%Код%", Объект.КодОКВЭД);
				СтрокаОКВЭД = СтрЗаменить(СтрокаОКВЭД, "%Наименование%", Наименование);
			КонецЕсли;
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "КодОКВЭД", СтрокаОКВЭД);				
		КонецЕсли;
		
		Если РазделВиден("КодОКВЭД2", СтруктураВидимости) Тогда
			СтрокаОКВЭД2 = "";
			Если ЗначениеЗаполнено(Объект.КодОКВЭД2) Тогда 
				Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КодОКВЭД2, "Наименование");
				СтрокаОКВЭД2 = СтрЗаменить(Шаблон, "%Код%", Объект.КодОКВЭД2);
				СтрокаОКВЭД2 = СтрЗаменить(СтрокаОКВЭД2, "%Наименование%", Наименование);
			КонецЕсли;
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "КодОКВЭД2", СтрокаОКВЭД2);				
		КонецЕсли;
		
		Если РазделВиден("КодТНВЭД", СтруктураВидимости) Тогда
			СтрокаТНВЭД = "";
			Если ЗначениеЗаполнено(Объект.КодТНВЭД) Тогда
				Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КодТНВЭД, "Наименование");
				СтрокаТНВЭД = СтрЗаменить(Шаблон, "%Код%", Объект.КодТНВЭД);
				СтрокаТНВЭД = СтрЗаменить(СтрокаТНВЭД, "%Наименование%", Наименование);
			КонецЕсли;
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "КодТНВЭД", СтрокаТНВЭД);				
		КонецЕсли;
		
		Если РазделВиден("КодОКП", СтруктураВидимости) Тогда
			СтрокаОКП = "";
			Если ЗначениеЗаполнено(Объект.КодОКП) Тогда
				Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КодОКП, "Наименование");
				СтрокаОКП = СтрЗаменить(Шаблон, "%Код%", Объект.КодОКП);
				СтрокаОКП = СтрЗаменить(СтрокаОКП, "%Наименование%", Наименование);
			КонецЕсли;
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "КодОКП", СтрокаОКП);
		КонецЕсли;
			
		Если РазделВиден("КодОКПД2", СтруктураВидимости) Тогда
			СтрокаОКПД2 = "";
			Если ЗначениеЗаполнено(Объект.КодОКПД2) Тогда
				Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КодОКПД2, "Наименование");
				СтрокаОКПД2 = СтрЗаменить(Шаблон, "%Код%", Объект.КодОКПД2);
				СтрокаОКПД2 = СтрЗаменить(СтрокаОКПД2, "%Наименование%", Наименование);
			КонецЕсли;
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "КодОКПД2", СтрокаОКПД2);
		КонецЕсли;
		
		Если РазделВиден("КодВидаНоменклатурнойКлассификации", СтруктураВидимости) Тогда
			СтрокаКВНК = "";
			Если ЗначениеЗаполнено(Объект.КодВидаНоменклатурнойКлассификации) Тогда
				Наименование = Объект.НаименованиеВидаНоменклатурнойКлассификации;
				СтрокаКВНК = СтрЗаменить(Шаблон, "%Код%", Объект.КодВидаНоменклатурнойКлассификации);
				СтрокаКВНК = СтрЗаменить(СтрокаКВНК, "%Наименование%", Наименование);
			КонецЕсли;
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "КодВидаНоменклатурнойКлассификации", СтрокаКВНК);
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	ТабличныйДокументКолонки.Присоединить(ТабличныйДокументПраво);
	
	#КонецОбласти
	
	ТабличныйДокументКарточка.Вывести(ТабличныйДокументКолонки);
	
	Возврат ТабличныйДокументКарточка;
	
КонецФункции

Функция ТекстЗначенияНеЗаполнен(ИмяРаздела)

	Если ИмяРаздела = "Наименование" Тогда
		Возврат НСтр("ru = '<не указано>'");	
	ИначеЕсли ИмяРаздела = "НаименованиеПолное" Тогда
		Возврат НСтр("ru = '<не указано>'");
	ИначеЕсли ИмяРаздела = "Артикул" Тогда
		Возврат НСтр("ru = '<не указан>'");
	ИначеЕсли ИмяРаздела = "Код" Тогда
		Возврат НСтр("ru = '<не указан>'");
	ИначеЕсли ИмяРаздела = "Описание" Тогда
		Возврат НСтр("ru = '<не указано>'");
	ИначеЕсли ИмяРаздела = "ФайлОписанияДляСайта" Тогда
		Возврат НСтр("ru = '<не указан>'");
	ИначеЕсли ИмяРаздела = "ДополнительныеРеквизиты" Тогда
		Возврат НСтр("ru = '<значение не задано>'");
	ИначеЕсли ИмяРаздела = "Производитель" Тогда
		Возврат НСтр("ru = '<не указан>'");
	ИначеЕсли ИмяРаздела = "Марка" Тогда
		Возврат НСтр("ru = '<не указана>'");
	ИначеЕсли ИмяРаздела = "Контрагент" Тогда
		Возврат НСтр("ru = '<не указан>'");
	ИначеЕсли ИмяРаздела = "Принципал" Тогда
		Возврат НСтр("ru = '<не указан>'");
	ИначеЕсли ИмяРаздела = "ТоварнаяКатегория" Тогда
		Возврат НСтр("ru = '<не указана>'");
	ИначеЕсли ИмяРаздела = "КоллекцияНоменклатуры" Тогда
		Возврат НСтр("ru = '<не указана>'");
	ИначеЕсли ИмяРаздела = "СезоннаяГруппа" Тогда
		Возврат НСтр("ru = '<не указана>'");
	ИначеЕсли ИмяРаздела = "РейтингПродаж" Тогда
		Возврат НСтр("ru = '<не указан>'");
	ИначеЕсли ИмяРаздела = "СпособОбеспеченияПотребностей" Тогда
		Возврат НСтр("ru = '<не указан>'");
	ИначеЕсли ИмяРаздела = "СхемаОбеспечения" Тогда
		Возврат НСтр("ru = '<не указана>'");
	ИначеЕсли ИмяРаздела = "ЦеноваяГруппа" Тогда
		Возврат НСтр("ru = '<не указана>'");
	ИначеЕсли ИмяРаздела = "Родитель" Тогда
		Возврат НСтр("ru = '<не указана>'");
	ИначеЕсли ИмяРаздела = "ГруппаДоступа" Тогда
		Возврат НСтр("ru = '<не указана>'");
	ИначеЕсли ИмяРаздела = "СкладскаяГруппа" Тогда
		Возврат НСтр("ru = '<не указана>'");
	ИначеЕсли ИмяРаздела = "ГруппаАналитическогоУчета" Тогда
		Возврат НСтр("ru = '<не указана>'");
	ИначеЕсли ИмяРаздела = "ГруппаФинансовогоУчета" Тогда
		Возврат НСтр("ru = '<не указана>'");
	ИначеЕсли ИмяРаздела = "ВидАлкогольнойПродукции" Тогда
		Возврат НСтр("ru = '<не указан>'");
	ИначеЕсли ИмяРаздела = "ПроизводительИмпортерКонтрагент" Тогда
		Возврат НСтр("ru = '<не указан>'");
	ИначеЕсли ИмяРаздела = "КодОКВЭД" Тогда
		Возврат НСтр("ru = '<не указан>'");
	ИначеЕсли ИмяРаздела = "КодОКВЭД2" Тогда
		Возврат НСтр("ru = '<не указан>'");
	ИначеЕсли ИмяРаздела = "КодТНВЭД" Тогда
		Возврат НСтр("ru = '<не указан>'");
	ИначеЕсли ИмяРаздела = "КодОКП" Тогда
		Возврат НСтр("ru = '<не указан>'");
	ИначеЕсли ИмяРаздела = "КодОКПД2" Тогда
		Возврат НСтр("ru = '<не указан>'");
	ИначеЕсли ИмяРаздела = "КодВидаНоменклатурнойКлассификации" Тогда
		Возврат НСтр("ru = '<не указан>'");
	КонецЕсли;
	
КонецФункции

Процедура ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокумент, Макет, ИмяРаздела, ТекстЗначенияРеквизита, ТекстЗаголовкаРеквизита = Неопределено, НовоеИмяРаздела = Неопределено)
	
	ОбластьСтрока = Макет.ПолучитьОбласть(ИмяРаздела + "Строка");
		
	Если ТекстЗаголовкаРеквизита <> Неопределено Тогда 
		ОбластьСтрока.Параметры[ИмяРаздела + "Реквизит"] = Строка(ТекстЗаголовкаРеквизита) + ":";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстЗначенияРеквизита) Тогда 
		ОбластьСтрока.Параметры[ИмяРаздела] = ТекстЗначенияРеквизита;
	Иначе
		ОбластьСтрока.Параметры[ИмяРаздела] = ТекстЗначенияНеЗаполнен(ИмяРаздела);
	КонецЕсли;
	
	Если НовоеИмяРаздела = Неопределено Тогда 
		ОбластьСтрока.Параметры.Расшифровка = ИмяРаздела;
	Иначе
		ОбластьСтрока.Параметры.Расшифровка = НовоеИмяРаздела;
	КонецЕсли;
		
	ТабличныйДокумент.Вывести(ОбластьСтрока);
	
	КоличествоДополнительныхСтрок = 0;
	
	КоличествоДополнительныхСтрок = КоличествоДополнительныхСтрок(ТабличныйДокумент, ИмяРаздела, ТекстЗначенияРеквизита, ТекстЗаголовкаРеквизита);
	
	Счетчик = КоличествоДополнительныхСтрок;
	
	ОбластьДопСтрока = Макет.ПолучитьОбласть(ПолучитьИмяОбластиДопСтрокиПоИмениРаздела(ИмяРаздела));
	
	Пока Счетчик > 0 Цикл
		Счетчик = Счетчик - 1;
		ТабличныйДокумент.Вывести(ОбластьДопСтрока);
	КонецЦикла;
	
	ОбъединитьРазделСоСтрокамиНиже(ТабличныйДокумент, ИмяРаздела + "Строка", КоличествоДополнительныхСтрок);
	                                                                                                           		
КонецПроцедуры

Процедура ОбъединитьРазделСоСтрокамиНиже(ТабличныйДокумент, ИмяОбласти, КоличествоДопСтрок)
	
	Если КоличествоДопСтрок = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Область = ТабличныйДокумент.Область(ИмяОбласти);
	Область.Разъединить();
	Область.Имя = Неопределено;
	АдресОбласти = Область.Имя;
	СтруктураАдреса = СтруктураАдреса(АдресОбласти);
	
	АдресКолонкиЗаголовкаНачало = СтруктураАдреса.АдресКолонкиНачало + 1; // + 1, т.к. слева колонка-отступ
	АдресКолонкиЗаголовкаКонец = АдресКолонкиЗаголовкаНачало + 7; // +7, т.к. заголовок занимает 8 колонок
	АдресКолонкиЗначенияНачало = АдресКолонкиЗаголовкаКонец + 1;
	
	// В левой колонке карточки разность должна быть равна 20, в правой - 21
	Если СтруктураАдреса.АдресКолонкиКонец - СтруктураАдреса.АдресКолонкиНачало = 20 Тогда
		АдресКолонкиЗначенияКонец = СтруктураАдреса.АдресКолонкиКонец;
	ИначеЕсли СтруктураАдреса.АдресКолонкиКонец - СтруктураАдреса.АдресКолонкиНачало = 21 Тогда
		АдресКолонкиЗначенияКонец = СтруктураАдреса.АдресКолонкиКонец - 1;
	КонецЕсли;
	
	АдресСтрокиНачало = СтруктураАдреса.АдресСтрокиНачало; 
	АдресСтрокиКонец = СтруктураАдреса.АдресСтрокиКонец;
	
	// Для заголовка
	НовыйАдрес = "R" + АдресСтрокиНачало + "C" + АдресКолонкиЗаголовкаНачало + ":" 
				+ "R" + (АдресСтрокиКонец + КоличествоДопСтрок) + "C" + АдресКолонкиЗаголовкаКонец;
	Область = ТабличныйДокумент.Область(НовыйАдрес);	
	Область.Объединить();
	
	// Для значения
	НовыйАдрес = "R" + АдресСтрокиНачало + "C" + АдресКолонкиЗначенияНачало + ":" 
				+ "R" + (АдресСтрокиКонец + КоличествоДопСтрок) + "C" + АдресКолонкиЗначенияКонец;
	Область = ТабличныйДокумент.Область(НовыйАдрес);	
	Область.Объединить();
	
КонецПроцедуры

Функция СтруктураАдреса(Адрес)
	
	МассивАдресОбласти = СтрРазделить(Адрес, ":");
	Если МассивАдресОбласти.Количество() <> 2 Тогда
		// Это значит, что строка состоит из одной колонки, процедура объединения с такими не работает.
		Возврат Неопределено;
	КонецЕсли;
	
	АдресНачало = МассивАдресОбласти[0];
	МассивАдресНачало = СтрРазделить(АдресНачало, "C");
	АдресСтрокиНачало = СтрЗаменить(МассивАдресНачало[0], "R", "");
	АдресКолонкиНачало = МассивАдресНачало[1];
	
	АдресКонец = МассивАдресОбласти[1];
	МассивАдресКонец = СтрРазделить(АдресКонец, "C");
	АдресСтрокиКонец = СтрЗаменить(МассивАдресКонец[0], "R", "");
	АдресКолонкиКонец = МассивАдресКонец[1];

	СтруктураАдреса = Новый Структура;
	СтруктураАдреса.Вставить("АдресСтрокиНачало", 	Число(АдресСтрокиНачало));
	СтруктураАдреса.Вставить("АдресКолонкиНачало", 	Число(АдресКолонкиНачало));
	СтруктураАдреса.Вставить("АдресСтрокиКонец", 	Число(АдресСтрокиКонец));
	СтруктураАдреса.Вставить("АдресКолонкиКонец", 	Число(АдресКолонкиКонец));
	
	Возврат СтруктураАдреса;
	
КонецФункции

Функция ПолучитьИмяОбластиДопСтрокиПоИмениРаздела(ИмяРаздела)
	
	МассивАлкоРеквизитов = Справочники.Номенклатура.МассивРеквизитовАлкогольнойПродукции();
	
	Если ИмяРаздела = "ДополнительныеРеквизиты"
		Или ИмяРаздела = "Описание"
		Или ИмяРаздела = "Производитель"
		Или ИмяРаздела = "ПроизводительИмпортерКонтрагент"
		Или ИмяРаздела = "Марка"
		Или ИмяРаздела = "Принципал"
		Или ИмяРаздела = "Контрагент"
		Или ИмяРаздела = "ФайлОписанияДляСайта"
		Или ИмяРаздела = "ТоварнаяКатегория"
		Или ИмяРаздела = "КоллекцияНоменклатуры"
		Или ИмяРаздела = "СезоннаяГруппа"
		Или ИмяРаздела = "РейтингПродаж"
		Или ИмяРаздела = "ГиперссылкаПерейтиСегменты"
		Или ИмяРаздела = "ГиперссылкаПерейтиСовместныеПродажи"
		Или ИмяРаздела = "ОбособленнаяЗакупкаПродажа"
		Или ИмяРаздела = "СпособОбеспеченияПотребностей"
		Или ИмяРаздела = "СхемаОбеспечения"
		Или ИмяРаздела = "ГиперссылкаПерейтиВариантыКомплектации"
		Или ИмяРаздела = "ГиперссылкаПерейтиНастройкаПоддержанияЗапасов"
		Или ИмяРаздела = "ГиперссылкаПерейтиНастройкаСпособовОбеспеченияПотребностей"
		Или ИмяРаздела = "ГиперссылкаПерейтиПроизводство" 
		Или ИмяРаздела = "ЦеноваяГруппа"
		Или ИмяРаздела = "ГиперссылкаПерейтиПрайсЛистКомпании"
		Или ИмяРаздела = "ГиперссылкаПерейтиПрайсЛистыПоставщиков"
		Или ИмяРаздела = "ШаблонЭтикетки"
		Или ИмяРаздела = "ШаблонЦенника"
		Или ИмяРаздела = "ГруппаАналитическогоУчета"
		Или ИмяРаздела = "ГруппаФинансовогоУчета" 
		Или ИмяРаздела = "ДекорацияДекалитры"
		Или ИмяРаздела = "ДекорацияПроцентыКрепости"
		Или ИмяРаздела = "РассчитатьОбъемВДекалитрах"
		Или МассивАлкоРеквизитов.Найти(ИмяРаздела) <> Неопределено Тогда
		Возврат "ДопСтрокаЛево";
	Иначе
		Возврат "ДопСтрокаПраво";
	КонецЕсли;
	
КонецФункции

Функция КоличествоДополнительныхСтрок(ТабличныйДокумент, ИмяРаздела, ТекстЗаполненияЗначения, ТекстЗаполненияРеквизита)
	
	ШиринаКолонки = 2.38;
	КоличествоКолонокВЗначенииРеквизита = 12;
	ШиринаЗначенияРеквизита = КоличествоКолонокВЗначенииРеквизита * ШиринаКолонки;
	ЧислоСтрокЗначения = КоличествоСтрок(ШиринаЗначенияРеквизита, ТекстЗаполненияЗначения);
		
	ЧислоСтрокСвойства = 0;
	Если ЗначениеЗаполнено(ТекстЗаполненияРеквизита) Тогда
		КоличествоКолонокВЗаголовкеРеквизита = 8;
		ШиринаЗаголовкаРеквизита = ШиринаКолонки * КоличествоКолонокВЗаголовкеРеквизита;
		ЧислоСтрокСвойства = КоличествоСтрок(ШиринаЗаголовкаРеквизита, ТекстЗаполненияРеквизита);
	КонецЕсли;
	
	ЧислоСтрок = Макс(ЧислоСтрокЗначения, ЧислоСтрокСвойства);
	
	Если ЧислоСтрок = 0 Тогда 
		Возврат 0;
	КонецЕсли;
	
	Возврат ЧислоСтрок - 1;	
	
КонецФункции

Функция КоличествоСтрок(ШиринаОбласти, Строка)
	
	 Если Не ЗначениеЗаполнено(Строка) Тогда 
		Возврат 0;
	КонецЕсли;
	
	СредняяШиринаСимвола = 0.75;
	
	МассивСлов = СтрРазделить(Строка, " ");
		
	КоличествоСтрок = 1; // = 1, т.к. проверку на заполненность мы сделали выше, а значит одна строка нужна точно
	ТекущаяСтрока = "";
	
	Для Каждого Слово Из МассивСлов Цикл
		
		ТекущаяСтрока = ТекущаяСтрока + Слово + " ";
		Если СтрДлина(ТекущаяСтрока) * СредняяШиринаСимвола > ШиринаОбласти Тогда
			КоличествоСтрок = КоличествоСтрок + 1;
			ТекущаяСтрока = Слово + " ";
		КонецЕсли;
		
	КонецЦикла;	 
	 	 
	Возврат КоличествоСтрок;
	
КонецФункции

Функция КартинкаФлагаПоЗначению(ЗначениеФлага)
	
	Если ЗначениеФлага Тогда
		Возврат БиблиотекаКартинок.ФлагУстановлен;
	Иначе
		Возврат БиблиотекаКартинок.ФлагНеУстановлен;
	КонецЕсли;
	
КонецФункции

Функция РазделВиден(ИмяРаздела, СтруктураВидимости)
	
	Видимость = Истина;
	Если СтруктураВидимости.Свойство(ИмяРаздела) Тогда 
		Видимость = СтруктураВидимости[ИмяРаздела];	
	КонецЕсли;
	
	Возврат Видимость;
	
КонецФункции

Функция ГлаваВидна(ИмяГлавы, СтруктураВидимости, КоличествоДопРеквизитов = 0)
	
	Если ИмяГлавы = "Описание" Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Если ИмяГлавы = "ДополнительныеРеквизиты" Тогда
		Возврат КоличествоДопРеквизитов > 0 И ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");		
	КонецЕсли;
	
	Если ИмяГлавы = "СведенияОПроизводителе" Тогда
		Возврат РазделВиден("Производитель", СтруктураВидимости) 
					Или РазделВиден("Марка", СтруктураВидимости) 
					Или РазделВиден("ПроизводительИмпортерКонтрагент", СтруктураВидимости)
					Или РазделВиден("Принципал", СтруктураВидимости)
					Или РазделВиден("Контрагент", СтруктураВидимости)		
					Или РазделВиден("ГиперссылкаПерейтиСоглашения", СтруктураВидимости);		
	КонецЕсли;
				
	Если ИмяГлавы = "ПланированиеИМаркетинг" Тогда
		Возврат РазделВиден("ТоварнаяКатегория", СтруктураВидимости)
					Или РазделВиден("КоллекцияНоменклатуры", СтруктураВидимости)
					Или РазделВиден("СезоннаяГруппа", СтруктураВидимости)
					Или РазделВиден("РейтингПродаж", СтруктураВидимости)
					Или РазделВиден("ГиперссылкаПерейтиСегменты", СтруктураВидимости)
					Или РазделВиден("ГиперссылкаПерейтиСовместныеПродажи", СтруктураВидимости);
	КонецЕсли;
				
	Если ИмяГлавы = "ОбеспечениеИПроизводство" Тогда
		Возврат РазделВиден("ОбособленнаяЗакупкаПродажаСтрока", СтруктураВидимости)
					Или РазделВиден("СпособОбеспеченияПотребностейСтрока", СтруктураВидимости)
					Или РазделВиден("СхемаОбеспеченияСтрока", СтруктураВидимости)
					Или РазделВиден("ГиперссылкаПерейтиВариантыКомплектацииСтрока", СтруктураВидимости)
					Или РазделВиден("ГиперссылкаПерейтиНастройкаПоддержанияЗапасовСтрока", СтруктураВидимости)
					Или РазделВиден("ГиперссылкаПерейтиНастройкаСпособовОбеспеченияПотребностейСтрока", СтруктураВидимости)
					Или РазделВиден("ГиперссылкаПерейтиПроизводствоСтрока", СтруктураВидимости);
	КонецЕсли;
				
	Если ИмяГлавы = "Цены" Тогда
		Возврат РазделВиден("ЦеноваяГруппа", СтруктураВидимости)
					Или РазделВиден("ГиперссылкаПерейтиПрайсЛистКомпании", СтруктураВидимости)
					Или РазделВиден("ГиперссылкаПерейтиПрайсЛистыПоставщиков", СтруктураВидимости);
	КонецЕсли;
				
	Если ИмяГлавы = "ПечатьЭтикетокИЦенников" Тогда
		Возврат РазделВиден("ШаблонЭтикетки", СтруктураВидимости)
				Или РазделВиден("ШаблонЦенника", СтруктураВидимости);
	КонецЕсли;
	
	Если ИмяГлавы = "ОсновныеПараметрыУчета" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИмяГлавы = "ЕдиницыИзмеренияИОбластьХранения" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИмяГлавы = "РегламентированныйИФинансовыйУчет" Тогда
		Возврат РазделВиден("СтавкаНДС", СтруктураВидимости)
					Или РазделВиден("ПодакцизныйТовар", СтруктураВидимости)
					Или РазделВиден("ВестиУчетПоГТД", СтруктураВидимости)
					Или РазделВиден("ВестиУчетСертификатовНоменклатуры", СтруктураВидимости)
					Или РазделВиден("ГиперссылкаПерейтиСертификатыНоменклатуры", СтруктураВидимости)
					Или РазделВиден("ГиперссылкаПерейтиДрагоценныеМатериалы", СтруктураВидимости)
					Или РазделВиден("ГруппаАналитическогоУчета", СтруктураВидимости)
					Или РазделВиден("ГруппаФинансовогоУчета", СтруктураВидимости);
	КонецЕсли;
	
	Если ИмяГлавы = "СведенияОбАлкогольнойПродукции" Тогда
		Возврат РазделВиден("ВидАлкогольнойПродукции", СтруктураВидимости);
	КонецЕсли;
	
	Если ИмяГлавы = "КиЗГИСМ" Тогда
		Возврат РазделВиден("КиЗГИСМВид", СтруктураВидимости);
	КонецЕсли;
	
	Если ИмяГлавы = "ОбщероссийскиеКлассификаторы" Тогда
			Возврат РазделВиден("КодОКВЭД", СтруктураВидимости)
					Или РазделВиден("КодОКВЭД2", СтруктураВидимости)
					Или РазделВиден("КодТНВЭД", СтруктураВидимости)
					Или РазделВиден("КодОКП", СтруктураВидимости)
					Или РазделВиден("КодОКПД2", СтруктураВидимости)
					Или РазделВиден("КодВидаНоменклатурнойКлассификации", СтруктураВидимости);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПодменюСоздатьНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
КонецПроцедуры

#КонецОбласти

#Область ПодменюОтчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	КомандаОтчет = Отчеты.ОстаткиИДоступностьТоваров.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Важность = "Важное";
		КомандаОтчет.РежимЗаписи = "";
	КонецЕсли;
	
	КомандаОтчет = Отчеты.ТоварыВЯчейках.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Важность = "Важное";
		КомандаОтчет.РежимЗаписи = "";
	КонецЕсли;
	
	КомандаОтчет = Отчеты.ABCXYZАнализНоменклатуры.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 1;
		КомандаОтчет.РежимЗаписи = "";
	КонецЕсли;
	
	КомандаОтчет = Отчеты.ВедомостьПоТоварамОрганизаций.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 2;
		КомандаОтчет.РежимЗаписи = "";
	КонецЕсли;
	
	КомандаОтчет = Отчеты.ВедомостьПоТоварамНаСкладах.ДобавитьКомандуДвиженияТовара(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 3;
		КомандаОтчет.РежимЗаписи = "";
	КонецЕсли;
	
	КомандаОтчет = Отчеты.ТоварыВЯчейках.ДобавитьКомандуОтчетаДвиженияТовара(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 4;
		КомандаОтчет.РежимЗаписи = "";
	КонецЕсли;
	
	КомандаОтчет = Отчеты.ВедомостьПоСериямНоменклатуры.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 5;
		КомандаОтчет.РежимЗаписи = "";
	КонецЕсли;
	
	КомандаОтчет = Отчеты.ТоварыНаСкладахПоСрокамГодности.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.РежимЗаписи = "";
	КонецЕсли;
	
	КомандаОтчет = Отчеты.ВыручкаИСебестоимостьПродаж.ДобавитьКомандуПродажиПоНоменклатуре(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Важность = "СмТакже";
		КомандаОтчет.РежимЗаписи = "";
	КонецЕсли;
	
	КомандаОтчет = Отчеты.СостояниеАссортимента.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Важность = "СмТакже";
		КомандаОтчет.РежимЗаписи = "";
		КомандаОтчет.ФункциональныеОпции = "ИспользоватьАссортимент";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МеханизмыНастройкиРаботыСРеквизитамиВВидеНоменклатуры

// Возвращает имена реквизитов, которые в настоящий момент отключены функциональными опциями.
//
// Возвращаемое значение:
//	Массив, элементы - Строка - имена реквизитов.
//
Функция РеквизитыОтключенныеПоФО(ЭтоРеквизитыХарактеристик = Ложь) Экспорт
	
	Результат = Новый Массив;
	ИспользоватьПродажуАгентскихУслуг  = ПолучитьФункциональнуюОпцию("ИспользоватьПродажуАгентскихУслуг");
	ИспользоватьПартнеровИКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов");
	
	Если Не ИспользоватьПродажуАгентскихУслуг Тогда
		Результат.Добавить("Принципал");
		Результат.Добавить("Контрагент");
	ИначеЕсли Не ИспользоватьПартнеровИКонтрагентов Тогда
		Результат.Добавить("Контрагент");
	КонецЕсли;
	
	Если ЭтоРеквизитыХарактеристик Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВыводитьКачество							= ПолучитьФункциональнуюОпцию("ИспользоватьКачествоТоваров");
	ИспользоватьАдресноеХранение				= ПолучитьФункциональнуюОпцию("ИспользоватьАдресноеХранение", Новый Структура);
	ВыводитьЦеновуюГруппу						= ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы");
	ВыводитьГруппуФинУчета						= ПолучитьФункциональнуюОпцию("ИспользоватьГруппыФинансовогоУчета");
	ВыводитьАссортимент							= ПолучитьФункциональнуюОпцию("ИспользоватьТоварныеКатегории");
	ВыводитьМногооборотнуюТару					= ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару");
	ИспользоватьХарактеристики					= ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ВестиСведенияДляДекларацийАлкоВРознице		= ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийАлкоВРознице");
	ИспользоватьЕдиницыДляОтчетов				= ПолучитьФункциональнуюОпцию("ИспользоватьЕдиницыИзмеренияДляОтчетов");
	ИспользоватьСезонныеКоэффициенты 			= ПолучитьФункциональнуюОпцию("ИспользоватьСезонныеКоэффициенты");
	ИспользоватьУправлениеКоллекциями 			= ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеКоллекциями");
	ИспользоватьРейтингиПродажНоменклатуры		= ПолучитьФункциональнуюОпцию("ИспользоватьРейтингиПродажНоменклатуры");
	ИспользоватьОбособленноеОбеспечениеЗаказов 	= ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов");
	ИспользоватьСертификатыНоменклатуры			= ПолучитьФункциональнуюОпцию("ИспользоватьСертификатыНоменклатуры");
	ИспользоватьИмпортныеТовары					= ПолучитьФункциональнуюОпцию("ИспользоватьИмпортныеТовары");
	ИспользоватьКлассификаторыНоменклатуры		= ПолучитьФункциональнуюОпцию("ИспользованиеКлассификаторовНоменклатуры");
	ИспользоватьСтарыеКлассификаторы			= ПолучитьФункциональнуюОпцию("ИспользованиеСтарыхКлассификаторовОКПиОКВЭД");
	ИспользоватьСпособыОбеспечения 		        = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенноеОбеспечениеПотребностей");
	ИспользоватьУпаковкиНоменклатуры 			= ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ИспользоватьГруппыАналитическогоУчетаНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьГруппыАналитическогоУчетаНоменклатуры");
	ИспользоватьГруппыДоступаНоменклатуры 		= ПолучитьФункциональнуюОпцию("ИспользоватьГруппыДоступаНоменклатуры");
	ИспользоватьОбменССайтом 					= ПолучитьФункциональнуюОпцию("ИспользоватьОбменССайтом");
	ВестиУчетМаркировкиПродукцииВГИСМ			= ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ");
	ИспользоватьУчетДрагоценныхМатериалов = ПолучитьФункциональнуюОпцию("ИспользоватьУчетДрагоценныхМатериалов");	
	
	НастройкиУчетаНДС = УчетНДСУП.НастройкиУчета();
	ИспользоватьЗаполнениеРаздела7ДекларацииПоНДС = НастройкиУчетаНДС.ИспользоватьЗаполнениеРаздела7ДекларацииПоНДС;
	ОперацииСТоварамиОблагаемымиНДСУПокупателя  = НастройкиУчетаНДС.ПродажаТоваровОблагаемыхНДСУПокупателя 
													ИЛИ НастройкиУчетаНДС.ПокупкаТоваровОблагаемыхНДСУПокупателя;
	ИспользоватьПродажиНаЭкспортСырьевыхТоваровУслуг = НастройкиУчетаНДС.ЭкспортСырьевыхТоваровУслуг;
	
	Если Не ВыводитьКачество Тогда
		Результат.Добавить("Качество");
	КонецЕсли;
	
	Если Не ИспользоватьЗаполнениеРаздела7ДекларацииПоНДС Тогда
		Результат.Добавить("КодРаздел7ДекларацииНДС");
	КонецЕсли;
	
	Если Не ОперацииСТоварамиОблагаемымиНДСУПокупателя Тогда
		Результат.Добавить("ОблагаетсяНДСУПокупателя");
	КонецЕсли;
	
	Если Не ИспользоватьАдресноеХранение Тогда
		Результат.Добавить("СкладскаяГруппа");
	КонецЕсли;
	
	Если Не ВыводитьЦеновуюГруппу Тогда
		Результат.Добавить("ЦеноваяГруппа");
	КонецЕсли;
	
	Если Не ВыводитьГруппуФинУчета Тогда
		Результат.Добавить("ГруппаФинансовогоУчета");
	КонецЕсли;
	
	Если Не ИспользоватьГруппыАналитическогоУчетаНоменклатуры Тогда
		Результат.Добавить("ГруппаАналитическогоУчета");
	КонецЕсли;
	
	Если Не ВыводитьАссортимент Тогда
		Результат.Добавить("ТоварнаяКатегория");
		Результат.Добавить("Марка");
	КонецЕсли;
	
	Если Не ВыводитьМногооборотнуюТару Тогда
		Результат.Добавить("ПоставляетсяВМногооборотнойТаре");
		Результат.Добавить("НоменклатураМногооборотнаяТара");
		Результат.Добавить("ХарактеристикаМногооборотнаяТара");
	ИначеЕсли Не ИспользоватьХарактеристики Тогда 	
		Результат.Добавить("ХарактеристикаМногооборотнаяТара");
	КонецЕсли;
	
	Если Не ИспользоватьХарактеристики Тогда
		Результат.Добавить("ИспользованиеХарактеристик");
	КонецЕсли;
	
	Если НЕ ВестиСведенияДляДекларацийАлкоВРознице Тогда
		
		Результат.Добавить("АлкогольнаяПродукция");
		МассивАлкоРеквизитов = Справочники.Номенклатура.МассивРеквизитовАлкогольнойПродукции();
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, МассивАлкоРеквизитов);
		
	КонецЕсли;
	
	Если Не ИспользоватьЕдиницыДляОтчетов Тогда
		Результат.Добавить("ЕдиницаДляОтчетов");
	КонецЕсли;
	
	Если Не ИспользоватьСезонныеКоэффициенты Тогда
		Результат.Добавить("СезоннаяГруппа");
	КонецЕсли;
	
	Если Не ИспользоватьУправлениеКоллекциями Тогда
		Результат.Добавить("КоллекцияНоменклатуры");
	КонецЕсли;
	
	Если Не ИспользоватьРейтингиПродажНоменклатуры Тогда
		Результат.Добавить("РейтингПродаж");
	КонецЕсли;
	
	Если Не ИспользоватьОбособленноеОбеспечениеЗаказов Тогда
		Результат.Добавить("ОбособленнаяЗакупкаПродажа");
	КонецЕсли;
	
	Если Не ИспользоватьСертификатыНоменклатуры Тогда
		Результат.Добавить("ВестиУчетСертификатовНоменклатуры");
	КонецЕсли;
	
	Если Не ИспользоватьИмпортныеТовары Тогда
		Результат.Добавить("ВестиУчетПоГТД");
	КонецЕсли;
	
	Если Не ИспользоватьКлассификаторыНоменклатуры Тогда
		Результат.Добавить("КодОКВЭД");
		Результат.Добавить("КодОКВЭД2");
		Результат.Добавить("КодТНВЭД");
		Результат.Добавить("КодОКП");
		Результат.Добавить("КодОКПД2");
		Результат.Добавить("КодВидаНоменклатурнойКлассификации");
	ИначеЕсли Не ИспользоватьСтарыеКлассификаторы Тогда
		Результат.Добавить("КодОКВЭД");
		Результат.Добавить("КодОКП");
	КонецЕсли;
	
	Если Не ИспользоватьУчетДрагоценныхМатериалов Тогда
		Результат.Добавить("ДрагоценныеМатериалы");
	КонецЕсли;
	
	Если Не ИспользоватьСпособыОбеспечения Тогда
		Результат.Добавить("СхемаОбеспечения");
		Результат.Добавить("СпособОбеспеченияПотребностей");
	КонецЕсли;
	
	Если Не ИспользоватьУпаковкиНоменклатуры Тогда
		Результат.Добавить("ИспользоватьУпаковки");
	КонецЕсли;
	
	Если Не ИспользоватьГруппыДоступаНоменклатуры Тогда
		Результат.Добавить("ГруппаДоступа");
	КонецЕсли;
	
	Если Не ИспользоватьОбменССайтом Тогда
		Результат.Добавить("ФайлОписанияДляСайта");
	КонецЕсли;
	
	Если Не ВестиУчетМаркировкиПродукцииВГИСМ Тогда
		Результат.Добавить("КиЗГИСМВид");
		Результат.Добавить("КиЗГИСМСпособВыпускаВОборот");
		Результат.Добавить("КиЗГИСМРазмер");
		Результат.Добавить("КиЗГИСМGTIN");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает имена реквизитов, которые всегда отображаются при создании новой номенклатуры.
//
// Возвращаемое значение:
//	Массив, элементы - Строка - имена реквизитов.
//
Функция ОбязательноОтображаемыеПриСозданииРеквизиты(ТипНоменклатуры, ОсобенностьУчета)
	
	Результат = Новый Массив;
	
	Результат.Добавить("НаименованиеПолное");
	Результат.Добавить("ВестиУчетПоГТД");
	Результат.Добавить("ПодакцизныйТовар");
	Результат.Добавить("СтавкаНДС");
	
	Если ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, МассивРеквизитовАлкогольнойПродукции());
	КонецЕсли;
	
	Если ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС
		Или ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
		Результат.Добавить("Артикул");
	КонецЕсли;
	
	Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
		И ОсобенностьУчета <> Перечисления.ОсобенностиУчетаНоменклатуры.ОрганизациейПродавцом Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, МассивРеквизитовАгентскихУслуг());
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает имена реквизитов, которые не отображаются в таблице настроек.
//
// Возвращаемое значение:
//	Массив, элементы - Строка - имена реквизитов.
//
Функция НеотображаемыеВТаблицеНастроекРеквизиты() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("КодДляПоиска");
	Результат.Добавить("ИспользоватьИндивидуальныйШаблонЦенника");
	Результат.Добавить("ИспользоватьИндивидуальныйШаблонЭтикетки");
	Результат.Добавить("ВариантОформленияПродажи");
	Результат.Добавить("ИспользоватьУпаковки");
	Результат.Добавить("НаборУпаковок");
	Результат.Добавить("ТипНоменклатуры");
	Результат.Добавить("ЕстьТоварыДругогоКачества");
	Результат.Добавить("ИспользованиеХарактеристик");
	Результат.Добавить("НоменклатураМногооборотнаяТара");
	Результат.Добавить("ХарактеристикаМногооборотнаяТара");
	Результат.Добавить("АлкогольнаяПродукция");
	Результат.Добавить("КиЗГИСМ");
	Результат.Добавить("ПродукцияМаркируемаяДляГИСМ");
	Результат.Добавить("ПодконтрольнаяПродукцияВЕТИС");
	Результат.Добавить("ОсобенностьУчета");
	Результат.Добавить("ЕдиницаИзмеренияСрокаГодности");
	Результат.Добавить("КоэффициентЕдиницыДляОтчетов");
	Результат.Добавить("ОблагаетсяНДПИПоПроцентнойСтавке");
	Результат.Добавить("ВладелецХарактеристик");
	Результат.Добавить("ВладелецСерий");
	Результат.Добавить("ВладелецТоварныхКатегорий");
	Результат.Добавить("ГруппаДоступа");
	Результат.Добавить("ВариантОформленияПродажи");
	Результат.Добавить("УдалитьСырьевойТовар");
	Результат.Добавить("УдалитьТабачнаяПродукция");
	Результат.Добавить("УдалитьОбувнаяПродукция");
	
	Результат.Добавить("ВесЕдиницаИзмерения");
	Результат.Добавить("ВесЗнаменатель");
	Результат.Добавить("ВесМожноУказыватьВДокументах");
	Результат.Добавить("ВесЧислитель");
	
	Результат.Добавить("ОбъемЕдиницаИзмерения");
	Результат.Добавить("ОбъемЗнаменатель");
	Результат.Добавить("ОбъемМожноУказыватьВДокументах");
	Результат.Добавить("ОбъемЧислитель");
	
	Результат.Добавить("ДлинаЕдиницаИзмерения");
	Результат.Добавить("ДлинаЗнаменатель");
	Результат.Добавить("ДлинаМожноУказыватьВДокументах");
	Результат.Добавить("ДлинаЧислитель");
	
	Результат.Добавить("ПлощадьЕдиницаИзмерения");
	Результат.Добавить("ПлощадьЗнаменатель");
	Результат.Добавить("ПлощадьМожноУказыватьВДокументах");
	Результат.Добавить("ПлощадьЧислитель");
	
	Возврат Результат;
	
КонецФункции

// Возвращает имена реквизитов, которые не используются для контроля уникальности.
//
// Возвращаемое значение:
//	Массив, элементы - Строка - имена реквизитов.
//
Функция НеиспользуемыеДляКонтроляУникальностиРеквизиты() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("НаименованиеПолное");
	Результат.Добавить("Описание");
	Результат.Добавить("ФайлКартинки");
	Результат.Добавить("ШаблонЦенника");
	Результат.Добавить("ШаблонЭтикетки");
	Результат.Добавить("ФайлОписанияДляСайта");
	Результат.Добавить("ИспользоватьИндивидуальныйШаблонЦенника");
	Результат.Добавить("ИспользоватьИндивидуальныйШаблонЭтикетки");
	Результат.Добавить("СрокГодности");
	Результат.Добавить("ОбособленнаяЗакупкаПродажа");
	
	Результат.Добавить("ВесИспользовать");
	Результат.Добавить("ОбъемИспользовать");
	Результат.Добавить("ПлощадьИспользовать");
	Результат.Добавить("ДлинаИспользовать");
	

	Результат.Добавить("ДрагоценныеМатериалы");

	
	Возврат Результат;
	
КонецФункции

// Возвращает типы значений. Реквизиты данных типов не проверяются на заполненность.
//
// Возвращаемое значение:
//	Массив, элементы - ОписаниеТипов.
//
Функция НеиспользуемыеДляКонтроляЗаполненияИОтборовТипы() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить(Новый ОписаниеТипов("СправочникСсылка.НоменклатураПрисоединенныеФайлы"));
	Результат.Добавить(Новый ОписаниеТипов("СправочникСсылка.Файлы"));
	Результат.Добавить(Новый ОписаниеТипов("ХранилищеЗначения"));
	Результат.Добавить(Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(0)));
	
	Возврат Результат;
	
КонецФункции

// Возвращает описание действий с реквизитами номенклатуры в форме номенклатуры в зависимости от типа номенклатуры.
//
// Параметры:
//	ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры - тип номенклатуры.
//	ОсобенностьУчета - ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры - особенность учета номенклатуры.
//	ИспользованиеХарактеристик - ПеречислениеСсылка.ВариантыИспользованияХарактеристикНоменклатуры, Булево - вариант
//		использования номенклатуры или признак использования характеристик.
//	ИспользоватьСрокГодностиСерии - Булево - признак использования срока годности в сериях номенклатуры.
//	ЭтоРеквизитыХарактеристик - Булево - признак принадлежности реквизитов справочнику ХарактеристикиНоменклатуры.
//
// Возвращаемое значение:
//	ТаблицаЗначений с колонками
//		Реквизит - ОбъектМетаданных:Реквизит - реквизит справочника Номенклатура
//		ДействиеСРеквизитом - Строка - действие.
//
Функция ЗависимостьРеквизитовОтТипаНоменклатуры(ТипНоменклатуры,
												ОсобенностьУчета,
												ИспользованиеХарактеристик,
												ИспользоватьСрокГодностиСерии,
												ЭтоРеквизитыХарактеристик = Ложь) Экспорт
	
	Если ТипЗнч(ИспользованиеХарактеристик) = Тип("ПеречислениеСсылка.ВариантыИспользованияХарактеристикНоменклатуры") Тогда
		ИспользоватьХарактеристики = ИспользованиеХарактеристик <> Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать;
	Иначе
		ИспользоватьХарактеристики = ИспользованиеХарактеристик;
	КонецЕсли;
	
	ЭтоТовар 				= (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	ЭтоНабор 				= (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор);
	ЭтоУслуга 				= (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
	ЭтоРабота 				= (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа);
	ЭтоМногооборотнаяТара 	= (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	
	АлкогольнаяПродукция  = (ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция);
	КиЗГИСМ               = (ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.КиЗГИСМ);
	// Сформировать таблицу реквизитов для заполнения.
	
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	ТаблицаРеквизитов.Колонки.Добавить("Реквизит");
	ТаблицаРеквизитов.Колонки.Добавить("Использование");
	
	Если ЭтоРеквизитыХарактеристик Тогда
		Реквизиты = Метаданные.Справочники.ХарактеристикиНоменклатуры.Реквизиты;
	Иначе
		Реквизиты = Метаданные.Справочники.Номенклатура.Реквизиты;
	КонецЕсли;
	
	// Реквизиты, которые должны быть в номенклатуре только тогда, когда не используются характеристики.
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.Принципал;
	НоваяСтрока.Использование = (ЭтоУслуга
									Или ЭтоРабота)
								И (ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ОрганизациейПоАгентскойСхеме
									Или ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Партнером)
								И (Не ИспользоватьХарактеристики
									Или ЭтоРеквизитыХарактеристик);
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.Контрагент;
	НоваяСтрока.Использование = (ЭтоУслуга
									Или ЭтоРабота)
								И ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Партнером
								И (Не ИспользоватьХарактеристики
									Или ЭтоРеквизитыХарактеристик);
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.КиЗГИСМGTIN;
	НоваяСтрока.Использование = ЭтоТовар
								И КиЗГИСМ
								И (Не ИспользоватьХарактеристики
									Или ЭтоРеквизитыХарактеристик);
	
	Если ЭтоРеквизитыХарактеристик Тогда
		Возврат ТаблицаРеквизитов;
	КонецЕсли;
	
	#Область КиЗГИСМ	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.КиЗГИСМВид;
	НоваяСтрока.Использование = ЭтоТовар
								И КиЗГИСМ;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.КиЗГИСМСпособВыпускаВОборот;
	НоваяСтрока.Использование = ЭтоТовар
								И КиЗГИСМ;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.КиЗГИСМРазмер;
	НоваяСтрока.Использование = ЭтоТовар
								И КиЗГИСМ;
	#КонецОбласти
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ВариантОформленияПродажи;
	НоваяСтрока.Использование = (ПолучитьФункциональнуюОпцию("ИспользоватьАктыНаПередачуПрав")
									И ЭтоТовар)
								Или ЭтоРабота
								Или ЭтоУслуга;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.СкладскаяГруппа;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.Качество;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара;
	
	#Область Вес
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ВесЕдиницаИзмерения;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ВесЗнаменатель;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ВесМожноУказыватьВДокументах;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ВесЧислитель;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ВесИспользовать;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара;
	#КонецОбласти
	
	#Область Объем
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ОбъемЕдиницаИзмерения;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ОбъемЗнаменатель;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ОбъемМожноУказыватьВДокументах;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ОбъемЧислитель;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ОбъемИспользовать;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара;
	#КонецОбласти
	
	#Область Длина
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ДлинаЕдиницаИзмерения;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ДлинаЗнаменатель;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ДлинаМожноУказыватьВДокументах;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ДлинаЧислитель;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ДлинаИспользовать;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара;
	#КонецОбласти
	
	#Область Площадь
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ПлощадьЕдиницаИзмерения;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ПлощадьЗнаменатель;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ПлощадьМожноУказыватьВДокументах;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ПлощадьЧислитель;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ПлощадьИспользовать;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара;
	#КонецОбласти
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ИспользоватьУпаковки;
	НоваяСтрока.Использование = ЭтоТовар;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.НаборУпаковок;
	НоваяСтрока.Использование = ЭтоТовар;

	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ВестиУчетПоГТД;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ПодакцизныйТовар;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ОбособленнаяЗакупкаПродажа;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоРабота;
		
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ПоставляетсяВМногооборотнойТаре;
	НоваяСтрока.Использование = ЭтоТовар;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.НоменклатураМногооборотнаяТара;
	НоваяСтрока.Использование = ЭтоТовар;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ХарактеристикаМногооборотнаяТара;
	НоваяСтрока.Использование = ЭтоТовар;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ЕдиницаИзмерения;
	НоваяСтрока.Использование = Истина;
	
	МассивАлкоРеквизитов = Справочники.Номенклатура.МассивРеквизитовАлкогольнойПродукции();
	
	Для Каждого СтрМас Из МассивАлкоРеквизитов Цикл
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		НоваяСтрока.Реквизит      = Реквизиты[СтрМас];
		НоваяСтрока.Использование = ЭтоТовар
									И АлкогольнаяПродукция;
	КонецЦикла;	
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.СрокГодности;
	НоваяСтрока.Использование = ЭтоТовар
								И ИспользоватьСрокГодностиСерии;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ЕдиницаИзмеренияСрокаГодности;
	НоваяСтрока.Использование = ЭтоТовар
								И ИспользоватьСрокГодностиСерии;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ГруппаФинансовогоУчета;
	НоваяСтрока.Использование = Не ЭтоНабор;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ВестиУчетСертификатовНоменклатуры;
	НоваяСтрока.Использование = ЭтоТовар;
	
	#Область ОбщероссийскиеКлассификаторы
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.КодОКВЭД;
	НоваяСтрока.Использование = Не КиЗГИСМ;
		
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.КодОКВЭД2;
	НоваяСтрока.Использование = Не КиЗГИСМ;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.КодОКП;
	НоваяСтрока.Использование = Не (ЭтоРабота
									Или ЭтоУслуга
									Или КиЗГИСМ);
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.КодОКПД2;
	НоваяСтрока.Использование = Не КиЗГИСМ;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.КодТНВЭД;
	НоваяСтрока.Использование = Не (ЭтоРабота
									Или ЭтоУслуга
									Или КиЗГИСМ);
									
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.КодВидаНоменклатурнойКлассификации;
	НоваяСтрока.Использование = ЭтоТовар;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.НаименованиеВидаНоменклатурнойКлассификации;
	НоваяСтрока.Использование = ЭтоТовар;
	#КонецОбласти
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.СхемаОбеспечения;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.СпособОбеспеченияПотребностей;
	НоваяСтрока.Использование = ЭтоРабота;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.КодРаздел7ДекларацииНДС;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоРабота
								Или ЭтоУслуга;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ОблагаетсяНДСУПокупателя;
	НоваяСтрока.Использование = ?(ЭтоТовар,
										Истина,
										Ложь);
	
	ТаблицаРеквизитов.Индексы.Добавить("Реквизит");
	
	Возврат ТаблицаРеквизитов;
	
КонецФункции

// Функция - Значение свойств реквизита
// 
// Возвращаемое значение:
//	Структура: - 
//		** Представление - Строка
//		** Тип - ОписаниеТипов
//		** ОбязательныйДляЗаполнения - Булево
//		** ОбязательныйДляОтображенияПриСоздании - Булево
//		** РекомендуемыйДляКонтроляУникальности - Булево
//		** Использование - Булево.
//
Функция ЗначениеСвойствРеквизита() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Имя");
	Результат.Вставить("Представление");
	Результат.Вставить("Тип");
	Результат.Вставить("Использование");
	Результат.Вставить("ОбязательныйДляЗаполнения");
	Результат.Вставить("ОбязательныйДляОтображенияПриСоздании", Ложь);
	Результат.Вставить("РекомендуемыйДляКонтроляУникальности", Ложь);
	
	Возврат Результат;	
КонецФункции

// Для вызова в методе ЗначениеНастроекПовтИсп.ВсеРеквизитыНоменклатуры
// Возвращает свойства реквизитов номенклатуры с учетом настроек сделанных
// в метаданных и доопределенных в модулях менеджера номенклатуры.
//
// Параметры:
//	ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры - тип номенклатуры.
//	ОсобенностьУчета - ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры - особенность учета номенклатуры.
//	ИспользованиеХарактеристик - ПеречислениеСсылка.ВариантыИспользованияХарактеристикНоменклатуры, Булево - вариант
//		использования номенклатуры или признак использования характеристик.
//	ИспользоватьСрокГодностиСерии - Булево - признак использования срока годности в сериях номенклатуры.
//
// Возвращаемое значение:
//	ФиксированнаяСтруктура
//		* Ключ - имя реквизита
//		* Значение - ФиксированнаяСтруктура - см. Справочник.Номенклатура.ЗначениеСвойствРеквизита.
//
Функция ВсеРеквизиты(ТипНоменклатуры,
					ОсобенностьУчета,
					ИспользованиеХарактеристик,
					ИспользоватьСрокГодностиСерии) Экспорт
	
	ЭтоТовар = (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	ЭтоМногооборотнаяТара = (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	
	ОбязательноОтображаемыеПриСозданииРеквизиты   = ОбязательноОтображаемыеПриСозданииРеквизиты(ТипНоменклатуры,
																								ОсобенностьУчета);
	РекомендуемыеДляКонтроляУникальностиРеквизиты = РекомендуемыеДляКонтроляУникальностиРеквизиты(ОсобенностьУчета);
	
	НастройкиРеквизитовПоТипу = ЗависимостьРеквизитовОтТипаНоменклатуры(ТипНоменклатуры,
																		ОсобенностьУчета,
																		ИспользованиеХарактеристик,
																		ИспользоватьСрокГодностиСерии);
	
	РеквизитыОтключенныеПоФО = РеквизитыОтключенныеПоФО();
	
	ВсеРеквизиты = Новый Структура;
	
	Для Каждого Реквизит Из Метаданные.Справочники.Номенклатура.Реквизиты Цикл
		ЗначениеСвойств = ЗначениеСвойствРеквизита();
		
		ЗначениеСвойств.Имя = Реквизит.Имя;
		ПредставлениеРеквизита = "";
		
		СтрокаНастройки = НастройкиРеквизитовПоТипу.Найти(Реквизит, "Реквизит");
		
		Если СтрокаНастройки = Неопределено Тогда
			ЗначениеСвойств.Использование = РеквизитыОтключенныеПоФО.Найти(Реквизит.Имя) = Неопределено;
		Иначе
			ЗначениеСвойств.Использование = СтрокаНастройки.Использование
											И РеквизитыОтключенныеПоФО.Найти(Реквизит.Имя) = Неопределено;
		КонецЕсли;
		
		Если Реквизит.Имя = "ЕдиницаИзмерения" Тогда
			Если ЭтоТовар
				Или ЭтоМногооборотнаяТара Тогда
				ПредставлениеРеквизита = НСтр("ru = 'Единица хранения'");
			Иначе
				ПредставлениеРеквизита = НСтр("ru = 'Единица измерения'");
			КонецЕсли;
		Иначе
			ПредставлениеРеквизита = Реквизит.Синоним;
			Если Не ЗначениеЗаполнено(ПредставлениеРеквизита) Тогда
				ПредставлениеРеквизита = Реквизит.Имя;
			КонецЕсли;
		КонецЕсли;
		
		ЗначениеСвойств.Представление = ПредставлениеРеквизита;
		
		ОбязательныйДляЗаполнения = (Реквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку);
		
		Если Реквизит.Имя = "ШаблонЦенника"
			Или Реквизит.Имя = "ШаблонЭтикетки" Тогда
			ОбязательныйДляЗаполнения = Ложь;
		ИначеЕсли Реквизит.Имя = "ЕдиницаИзмерения" Тогда
			ОбязательныйДляЗаполнения = (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар)
			Или (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара)
			Или (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор);
		ИначеЕсли Реквизит.Имя = "КодТНВЭД" Тогда
			ОбязательныйДляЗаполнения = ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияМаркируемаяДляГИСМ;
		ИначеЕсли Реквизит.Имя = "Принципал" Тогда
			ОбязательныйДляЗаполнения = (ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ОрганизациейПоАгентскойСхеме)
										ИЛИ (ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Партнером);
		ИначеЕсли Реквизит.Имя = "Контрагент" Тогда
			ОбязательныйДляЗаполнения = (ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Партнером)
		ИначеЕсли Реквизит.Имя = "НаборУпаковок" Тогда
			ОбязательныйДляЗаполнения = Ложь;
		ИначеЕсли Реквизит.Имя = "ГруппаДоступа" Тогда
			ОбязательныйДляЗаполнения = Справочники.ГруппыДоступаНоменклатуры.ИспользуютсяГруппыДоступа();
		ИначеЕсли Реквизит.Имя = "НоменклатураМногооборотнаяТара"
			Или Реквизит.Имя = "ХарактеристикаМногооборотнаяТара" Тогда	
			ОбязательныйДляЗаполнения = Справочники.ГруппыДоступаНоменклатуры.ИспользуютсяГруппыДоступа();
		ИначеЕсли Реквизит.Имя = "ВесЧислитель"
			Или Реквизит.Имя = "ВесЗнаменатель"
			Или Реквизит.Имя = "ОбъемЧислитель"
			Или Реквизит.Имя = "ОбъемЗнаменатель"
			Или Реквизит.Имя = "ПлощадьЧислитель"
			Или Реквизит.Имя = "ПлощадьЗнаменатель"
			Или Реквизит.Имя = "ДлинаЧислитель"
			Или Реквизит.Имя = "ДлинаЗнаменатель" Тогда
			ОбязательныйДляЗаполнения = Ложь;
		КонецЕсли;
		
		ЗначениеСвойств.ОбязательныйДляЗаполнения = ЗначениеСвойств.Использование
													И ОбязательныйДляЗаполнения;
		ЗначениеСвойств.Тип = Реквизит.Тип;
		
		ЗначениеСвойств.ОбязательныйДляОтображенияПриСоздании = ЗначениеСвойств.Использование
																И (ОбязательноОтображаемыеПриСозданииРеквизиты.Найти(Реквизит.Имя) <> Неопределено
																	Или ЗначениеСвойств.ОбязательныйДляЗаполнения);
		ЗначениеСвойств.РекомендуемыйДляКонтроляУникальности = ЗначениеСвойств.Использование
																И РекомендуемыеДляКонтроляУникальностиРеквизиты.Найти(Реквизит.Имя) <> Неопределено;
		
		ВсеРеквизиты.Вставить(Реквизит.Имя, Новый ФиксированнаяСтруктура(ЗначениеСвойств));
	КонецЦикла;
	
	Возврат Новый ФиксированнаяСтруктура(ВсеРеквизиты);
	
КонецФункции

// Выполняет настройку отображения элементов формы объекта.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма объекта.
//
Процедура НастроитьФормуПоТаблицеНастроек(Форма) Экспорт
	
	СтруктураПоиска = Новый Структура("Свойство");
	
	Для Каждого СтрокаТаблицыРеквизитов Из Форма.ТаблицаНастроекРеквизитов Цикл
		
		Если СтрокаТаблицыРеквизитов.ЭтоДопРеквизит Тогда
			
			Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПоиска.Свойство = СтрокаТаблицыРеквизитов.Свойство;
			НайденныеСтроки = Форма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяЭлементаФормы = НайденныеСтроки[0].ИмяРеквизитаЗначение;
			
		Иначе
			
			ИмяЭлементаФормы = СтрокаТаблицыРеквизитов.ИмяРеквизита;
			
		КонецЕсли;
		
		Если Форма.Элементы.Найти(ИмяЭлементаФормы) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицыРеквизитов.ПутьКДанным = ИмяЭлементаФормы;
		
		Элемент = Форма.Элементы[ИмяЭлементаФормы];
		
		Если Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
			Форма.Элементы[ИмяЭлементаФормы].АвтоОтметкаНезаполненного = СтрокаТаблицыРеквизитов.ЗаполнятьОбязательно;
		КонецЕсли;
		
		Если СтрокаТаблицыРеквизитов.Уникален Тогда
			Элемент.ЦветФона = ЦветаСтиля.ЦветФонаВыделения;
		ИначеЕсли Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
			Элемент.ЦветФона = Новый Цвет;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьУникальностьЭлементаПоРеквизитам(Форма) Экспорт
	
	Форма.ТаблицаНайдено.Очистить();
	
	РеквизитыКонтроляУникальности = Форма.ТаблицаНастроекРеквизитов.НайтиСтроки(Новый Структура("Уникален", Истина));
	
	Если РеквизитыКонтроляУникальности.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНоменклатура = ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.Номенклатура");
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПроверяемыйСправочник.Ссылка КАК Ссылка,
	|	ИСТИНА КАК НайденоПоДопРеквизитам
	|ИЗ
	|	Справочник.ИмяПроверяемогоСправочника КАК ПроверяемыйСправочник
	|  	//ТекстЗапросаСоединенияСТЧДопРеквизитов
	|ГДЕ
	|  	&ТекстЗапросаУсловияПоРеквизитам";
	
	ШаблонУсловияПоРеквизиту = 
	"
	|	ПроверяемыйСправочник.ИмяРеквизита = &ИмяРеквизита";
	
	ШаблонУсловияПоДопРеквизиту =
	"
	|  (УсловиеПоДопРеквизиту_СчетчикУсловий.Значение ЕСТЬ NULL
	|  			И &ЗначениеПустое_СчетчикУсловий
	|  	ИЛИ УсловиеПоДопРеквизиту_СчетчикУсловий.Свойство = &Свойство_СчетчикУсловий
	|  			И УсловиеПоДопРеквизиту_СчетчикУсловий.Значение = &Значение_СчетчикУсловий)";

	ШаблонТекстаСоединения =
	"
	| ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИмяПроверяемогоСправочника.ДополнительныеРеквизиты КАК УсловиеПоДопРеквизиту_СчетчикУсловий
	| ПО ПроверяемыйСправочник.Ссылка = УсловиеПоДопРеквизиту_СчетчикУсловий.Ссылка
	| 		И УсловиеПоДопРеквизиту_СчетчикУсловий.Свойство = &Свойство_СчетчикУсловий";
	
	СчетчикУсловий   = 1;
	ТекстыУсловий    = Новый Массив;
	
	Если ЭтоНоменклатура Тогда
		ТекстУсловия =
		"
		|	НЕ ПроверяемыйСправочник.ЭтоГруппа
		|	И ПроверяемыйСправочник.ВидНоменклатуры В(&ВидыНоменклатуры)";
		ТекстыУсловий.Добавить(ТекстУсловия);
		
		Запрос.УстановитьПараметр("ВидыНоменклатуры", ВидыНоменклатурыИдентичныеПоНастройкамКонтроляУникальности(Форма.Объект));
	Иначе
		ТекстУсловия =
		"
		|	ПроверяемыйСправочник.Владелец = &Владелец";
		ТекстыУсловий.Добавить(ТекстУсловия);
		
		Запрос.УстановитьПараметр("Владелец", Форма.Объект.Владелец);
	КонецЕсли;	

	
	ТекстыСоединения = Новый Массив;
	
	Для Каждого СтрокаУсловия Из РеквизитыКонтроляУникальности Цикл
		
		Если Не СтрокаУсловия.ЭтоДопРеквизит Тогда
			
			ТекстУсловия = СтрЗаменить(ШаблонУсловияПоРеквизиту, "ИмяРеквизита", СтрокаУсловия.ИмяРеквизита);
			ТекстыУсловий.Добавить(ТекстУсловия);
			
			Запрос.УстановитьПараметр(СтрокаУсловия.ИмяРеквизита, Форма.Объект[СтрокаУсловия.ПутьКДанным]);
			
		Иначе
			ТекстУсловия = СтрЗаменить(ШаблонУсловияПоДопРеквизиту, "СчетчикУсловий", Формат(СчетчикУсловий,"ЧГ="));
			ТекстыУсловий.Добавить(ТекстУсловия);
			
			Запрос.УстановитьПараметр("Свойство_" + СчетчикУсловий, СтрокаУсловия.Свойство);
			Запрос.УстановитьПараметр("Значение_" + СчетчикУсловий, Форма[СтрокаУсловия.ПутьКДанным]);
			Запрос.УстановитьПараметр("ЗначениеПустое_" + СчетчикУсловий, ?(ТипЗнч(Форма[СтрокаУсловия.ПутьКДанным]) = Тип("Булево")
																				И Не Форма[СтрокаУсловия.ПутьКДанным],
																			Истина,
																			Не ЗначениеЗаполнено(Форма[СтрокаУсловия.ПутьКДанным])));
			
			ТекстСоединения = СтрЗаменить(ШаблонТекстаСоединения, "СчетчикУсловий", Формат(СчетчикУсловий,"ЧГ="));
			ТекстыСоединения.Добавить(ТекстСоединения);
			СчетчикУсловий = СчетчикУсловий + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаСоединенияСТЧДопРеквизитов", СтрСоединить(ТекстыСоединения));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаУсловияПоРеквизитам", СтрСоединить(ТекстыУсловий,
																								Символы.ПС + "И" + Символы.НПП));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПроверяемогоСправочника", ?(ЭтоНоменклатура,
																			"Номенклатура",
																			"ХарактеристикиНоменклатуры"));
	
	Запрос.Текст = ТекстЗапроса;
	
	Форма.ТаблицаНайдено.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Функция ВидыНоменклатурыИдентичныеПоНастройкамКонтроляУникальности(Объект)
	
	ИдентичныеВидыНоменклатуры = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеквизитыДляКонтроля.ИмяРеквизита,
	|	РеквизитыДляКонтроля.ЭтоДопРеквизит,
	|	РеквизитыДляКонтроля.Свойство
	|ИЗ
	|	Справочник.ВидыНоменклатуры.РеквизитыДляКонтроляНоменклатуры КАК РеквизитыДляКонтроля
	|ГДЕ
	|	РеквизитыДляКонтроля.Уникален
	|	И РеквизитыДляКонтроля.Ссылка = &ВидНоменклатуры
	|	И НЕ (НЕ РеквизитыДляКонтроля.ЭтоДопРеквизит
	|		И РеквизитыДляКонтроля.ИмяРеквизита = &ИмяВидаНоменклатуры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеквизитыДляКонтроля.Ссылка КАК ВидНоменклатуры,
	|	РеквизитыДляКонтроля.ИмяРеквизита КАК ИмяРеквизита,
	|	РеквизитыДляКонтроля.ЭтоДопРеквизит КАК ЭтоДопРеквизит,
	|	РеквизитыДляКонтроля.Свойство КАК Свойство
	|ИЗ
	|	Справочник.ВидыНоменклатуры.РеквизитыДляКонтроляНоменклатуры КАК РеквизитыДляКонтроля
	|ГДЕ
	|	РеквизитыДляКонтроля.Уникален
	|	И РеквизитыДляКонтроля.Ссылка.ТипНоменклатуры = &ТипНоменклатуры
	|	И НЕ (НЕ РеквизитыДляКонтроля.ЭтоДопРеквизит
	|		И РеквизитыДляКонтроля.ИмяРеквизита = &ИмяВидаНоменклатуры)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидНоменклатуры,
	|	ИмяРеквизита,
	|	ЭтоДопРеквизит,
	|	Свойство
	|
	|ИТОГИ ПО
	|	ВидНоменклатуры";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры",		Объект.ВидНоменклатуры);
	Запрос.УстановитьПараметр("ТипНоменклатуры",		Объект.ТипНоменклатуры);
	Запрос.УстановитьПараметр("ИмяВидаНоменклатуры",	"ВидНоменклатуры");
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитовТекВидаНоменклатуры = РезультатыЗапроса[0].Выгрузить();
	КолРеквизитовДляКонтроля = ТаблицаРеквизитовТекВидаНоменклатуры.Количество();
	
	РеквизитыВидовНоменклатуры   = РезультатыЗапроса[1];
	Отбор = Новый Структура("ИмяРеквизита, ЭтоДопРеквизит, Свойство");
	
	ВыборкаПоВиду = РеквизитыВидовНоменклатуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоВиду.Следующий() Цикл
		
		СоответствуетУсловиям = Истина;
		
		ВыборкаПоРеквизитам = ВыборкаПоВиду.Выбрать();
		КолРеквизитовВида = ВыборкаПоРеквизитам.Количество();
		
		Если КолРеквизитовВида = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если КолРеквизитовВида <> КолРеквизитовДляКонтроля Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ВыборкаПоРеквизитам.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(Отбор, ВыборкаПоРеквизитам);
			
			Если ТаблицаРеквизитовТекВидаНоменклатуры.НайтиСтроки(Отбор).Количество() = 0 Тогда
				СоответствуетУсловиям = Ложь;
			КонецЕсли;
			
			Если Не СоответствуетУсловиям Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не СоответствуетУсловиям Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентичныеВидыНоменклатуры.Добавить(ВыборкаПоВиду.ВидНоменклатуры);
		
	КонецЦикла;
	
	Возврат ИдентичныеВидыНоменклатуры;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Проверяет наличие прав у текущего пользователя на ввод информации по номенклатуре без контроля.
//
// Возвращаемое значение:
//	Булево - наличие права ввода
//
Функция ДоступенВводБезКонтроля() Экспорт
	                                     
	Возврат ПраваПользователяПовтИсп.ВводИнформацииПоНоменклатуреБезКонтроля();
	
КонецФункции

// Проверяет уникальность наименования номенклатуры.
//
// Параметры:
//	Объект - СправочникОбъект.Номенклатура - элемент справочника номенклатуры.
//
// Возвращаемое значение:
//	Булево - признак уникальности наименования данного элемента справочника.
//
Функция РабочееНаименованиеУникально(Объект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка <> &Ссылка
	|	И Номенклатура.Наименование = &Наименование
	|	И НЕ Номенклатура.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("Ссылка",       Объект.Ссылка);
	Запрос.УстановитьПараметр("Наименование", Объект.Наименование);

	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает имена реквизитов номенклатуры, используемых только для алкогольной продукции.
//
// Возвращаемое значение:
//	Массив, элементы - Строка - имена реквизитов.
//
Функция МассивРеквизитовАлкогольнойПродукции() Экспорт
	
	МассивАлкоРеквизитов = Новый Массив;
	
	МассивАлкоРеквизитов.Добавить("ВидАлкогольнойПродукции");
	МассивАлкоРеквизитов.Добавить("ИмпортнаяАлкогольнаяПродукция");
	МассивАлкоРеквизитов.Добавить("ОбъемДАЛ");
	МассивАлкоРеквизитов.Добавить("Крепость");
	МассивАлкоРеквизитов.Добавить("АлкогольнаяПродукцияВоВскрытойТаре");
	
	Возврат МассивАлкоРеквизитов;
	
КонецФункции

// Возвращает имена реквизитов номенклатуры, используемых только для агентских услуг.
//
// Возвращаемое значение:
//	Массив, элементы - Строка - имена реквизитов.
//
Функция МассивРеквизитовАгентскихУслуг() Экспорт
	
	МассивАгентскихРеквизитов = Новый Массив;
	
	МассивАгентскихРеквизитов.Добавить("Принципал");
	МассивАгентскихРеквизитов.Добавить("Контрагент");
	
	Возврат МассивАгентскихРеквизитов;
	
КонецФункции

Процедура ОбновитьДанныеКлассификации(РезультатКлассификации, ТипКлассификации, ТипПараметраКлассификации,
			ПериодКлассификации, НеКлассифицирован)
	
	Если РезультатКлассификации.Колонки.Найти("Период") = Неопределено Тогда
		РезультатКлассификации.Колонки.Добавить("Период");
	КонецЕсли;
	
	Если РезультатКлассификации.Колонки.Найти("ТипПараметраКлассификации") = Неопределено Тогда
		РезультатКлассификации.Колонки.Добавить("ТипПараметраКлассификации");
	КонецЕсли;
	
	Если РезультатКлассификации.Колонки.Найти("ТипКлассификации") = Неопределено Тогда
		РезультатКлассификации.Колонки.Добавить("ТипКлассификации");
	КонецЕсли;
	
	РезультатКлассификации.ЗаполнитьЗначения(ПериодКлассификации, 		"Период");
	РезультатКлассификации.ЗаполнитьЗначения(ТипПараметраКлассификации, "ТипПараметраКлассификации");
	РезультатКлассификации.ЗаполнитьЗначения(ТипКлассификации, 			"ТипКлассификации");

	НаборЗаписей = РегистрыСведений.ABCXYZКлассификацияНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ПериодКлассификации);
	НаборЗаписей.Отбор.ТипКлассификации.Установить(ТипКлассификации);
	НаборЗаписей.Отбор.ТипПараметраКлассификации.Установить(ТипПараметраКлассификации);

	НаборЗаписей.Загрузить(РезультатКлассификации);
	НаборЗаписей.Записать(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ABCXYZКлассификацияНоменклатуры.Номенклатура КАК Номенклатура,
	|	ABCXYZКлассификацияНоменклатуры.Характеристика КАК Характеристика,
	|	ABCXYZКлассификацияНоменклатуры.РазделКлассификации КАК РазделКлассификации
	|ПОМЕСТИТЬ РезультатКлассификации
	|ИЗ
	|	РегистрСведений.ABCXYZКлассификацияНоменклатуры КАК ABCXYZКлассификацияНоменклатуры
	|ГДЕ
	|	ABCXYZКлассификацияНоменклатуры.Период = НАЧАЛОПЕРИОДА(&ПериодКлассификации, ДЕНЬ)
	|	И ABCXYZКлассификацияНоменклатуры.ТипПараметраКлассификации = &ТипПараметраКлассификации
	|	И ABCXYZКлассификацияНоменклатуры.ТипКлассификации = &ТипКлассификации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	РазделКлассификации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(&ПериодКлассификации, ДЕНЬ) КАК Период,
	|	ABCXYZКлассификацияНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ABCXYZКлассификацияНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|	ABCXYZКлассификацияНоменклатурыСрезПоследних.РазделКлассификации КАК РазделКлассификации,
	|	ABCXYZКлассификацияНоменклатурыСрезПоследних.ТипПараметраКлассификации КАК ТипПараметраКлассификации,
	|	ABCXYZКлассификацияНоменклатурыСрезПоследних.ТипКлассификации КАК ТипКлассификации,
	|	&НеКлассифицирован КАК Класс,
	|	0 КАК ЗначениеПараметраКлассификации
	|ИЗ
	|	РегистрСведений.ABCXYZКлассификацияНоменклатуры.СрезПоследних(
	|			ДОБАВИТЬКДАТЕ(&ПериодКлассификации, СЕКУНДА, -1),
	|			(НЕ (Номенклатура, Характеристика, РазделКлассификации) В
	|						(ВЫБРАТЬ
	|							РезультатКлассификации.Номенклатура КАК Номенклатура,
	|							РезультатКлассификации.Характеристика КАК Характеристика,
	|							РезультатКлассификации.РазделКлассификации КАК РазделКлассификации
	|						ИЗ
	|							РезультатКлассификации КАК РезультатКлассификации))
	|				И ТипПараметраКлассификации = &ТипПараметраКлассификации
	|				И ТипКлассификации = &ТипКлассификации) КАК ABCXYZКлассификацияНоменклатурыСрезПоследних");
	
	Запрос.УстановитьПараметр("ПериодКлассификации", 		ПериодКлассификации);
	Запрос.УстановитьПараметр("ТипКлассификации", 			ТипКлассификации);
	Запрос.УстановитьПараметр("ТипПараметраКлассификации", 	ТипПараметраКлассификации);
	Запрос.УстановитьПараметр("НеКлассифицирован", 			НеКлассифицирован);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		НаборЗаписей.Загрузить(РезультатЗапроса.Выгрузить());
		НаборЗаписей.Записать(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПустыхСвойств(Приемник, Источник)
	
	Для каждого КлючЗначение Из Источник Цикл
		Если (ТипЗнч(Приемник[КлючЗначение.Ключ]) = Тип("Булево")
			И Не Приемник[КлючЗначение.Ключ])
			Или Не ЗначениеЗаполнено(Приемник[КлючЗначение.Ключ]) Тогда
			Приемник[КлючЗначение.Ключ] = КлючЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьЗначенияСвойств(Объект,Свойства)
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Свойства);
	
	Для Каждого Свойство Из МассивСтрок Цикл
		Объект[Свойство] = Неопределено;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтработатьЛогикуЗаполненияМеры(Номенклатура, МернаяЕдиницаХранения, ТипЕдиницы, Мера) Экспорт
	
	Если Мера <> "Вес"
		И Мера <> "Длина"
		И Мера <> "Площадь"
		И Мера <> "Объем" Тогда
		Возврат;
	КонецЕсли;
	
	Если МернаяЕдиницаХранения
		И ТипЕдиницы = Мера
		И (Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
			Или Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара) Тогда
		
		Номенклатура[Мера + "Использовать"] = Истина;
		Номенклатура[Мера + "Знаменатель"]  = 1;
		Номенклатура[Мера + "Числитель"]    = 1;
		Номенклатура[Мера + "МожноУказыватьВДокументах"] = Истина;
		Номенклатура[Мера + "ЕдиницаИзмерения"] = Номенклатура.ЕдиницаИзмерения;
		
	КонецЕсли;
	
	Если Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа
		Или Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
		Или Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор
		Или Номенклатура[Мера + "Знаменатель"] = 0
		Или Номенклатура[Мера + "Числитель"] = 0
		Или Не Номенклатура[Мера + "Использовать"] Тогда 
		
		Номенклатура[Мера + "ЕдиницаИзмерения"]          = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		Номенклатура[Мера + "Знаменатель"]               = 0;
		Номенклатура[Мера + "Числитель"]                 = 0;
		Номенклатура[Мера + "МожноУказыватьВДокументах"] = Ложь;
		Номенклатура[Мера + "Использовать"]              = Ложь;
	Иначе
	
		Если Не ЗначениеЗаполнено(Номенклатура[Мера + "ЕдиницаИзмерения"]) Тогда
			Номенклатура[Мера + "ЕдиницаИзмерения"] = НоменклатураСервер.ЕдиницаИзмеренияПоУмолчанию(Мера);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Возвращает таблицу обязательных реквизитов.
//
// Параметры:
//	ВидНоменклатуры - СправочникОбъект.ВидыНоменклатуры - элемент справочника виды номенклатуры.
//	ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры - тип номенклатуры.
//	ОсобенностьУчета - ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры - особенность учета номенклатуры.
//	ИспользованиеХарактеристик - ПеречислениеСсылка.ВариантыИспользованияХарактеристикНоменклатуры, Булево - вариант
//		использования номенклатуры или признак использования характеристик.
//	ИспользоватьСрокГодностиСерии - Булево - признак использования срока годности в сериях номенклатуры.
//	ВладелецРеквизитов - Строка - имя объекта владельца реквизитов.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица с обязательными для заполнения и выводимыми при создании реквизитами.
//
Функция ТаблицаНастроекРеквизитов(ВидНоменклатуры,
								ТипНоменклатуры,
								ОсобенностьУчета,
								ИспользованиеХарактеристик,
								ИспользоватьСрокГодностиСерии,
								ВладелецРеквизитов) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВсеРеквизитыНоменклатурыТаблица.Имя КАК Имя,
	|	ВсеРеквизитыНоменклатурыТаблица.Представление КАК Представление,
	|	ВсеРеквизитыНоменклатурыТаблица.ОбязательныйДляЗаполнения КАК ОбязательныйДляЗаполнения,
	|	ВсеРеквизитыНоменклатурыТаблица.ОбязательныйДляОтображенияПриСоздании КАК ОбязательныйДляОтображенияПриСоздании,
	|	ВсеРеквизитыНоменклатурыТаблица.Использование КАК Использование
	|ПОМЕСТИТЬ ВсеРеквизитыНоменклатурыТаблица
	|ИЗ
	|	&ВсеРеквизитыНоменклатурыТаблица КАК ВсеРеквизитыНоменклатурыТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Представление КАК Представление,
	|	ВложенныйЗапрос.ЭтоДопРеквизит КАК ЭтоДопРеквизит,
	|	ВложенныйЗапрос.ИмяРеквизита КАК ИмяРеквизита,
	|	ВложенныйЗапрос.Свойство КАК Свойство,
	|	МАКСИМУМ(ВложенныйЗапрос.ЗаполнятьОбязательно) КАК ЗаполнятьОбязательно,
	|	МАКСИМУМ(ВложенныйЗапрос.Уникален) КАК Уникален,
	|	МАКСИМУМ(ВложенныйЗапрос.ОтображатьПриСоздании) КАК ОтображатьПриСоздании,
	|	МАКСИМУМ(ВложенныйЗапрос.Использование) КАК Использование,
	|	МАКСИМУМ(ВложенныйЗапрос.ЕстьРеквизитВМетаданных) КАК ЕстьРеквизитВМетаданных
	|ПОМЕСТИТЬ ВТДляЗапроса
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА РеквизитыДляКонтроля.ЭтоДопРеквизит
	|				ТОГДА РеквизитыДляКонтроля.Свойство.Представление
	|			ИНАЧЕ РеквизитыДляКонтроля.ПредставлениеРеквизита
	|		КОНЕЦ КАК Представление,
	|		РеквизитыДляКонтроля.ЭтоДопРеквизит КАК ЭтоДопРеквизит,
	|		ВЫБОР
	|			КОГДА РеквизитыДляКонтроля.ЭтоДопРеквизит
	|				ТОГДА РеквизитыДляКонтроля.Свойство.Наименование
	|			ИНАЧЕ РеквизитыДляКонтроля.ИмяРеквизита
	|		КОНЕЦ КАК ИмяРеквизита,
	|		РеквизитыДляКонтроля.Свойство КАК Свойство,
	|		ВЫБОР
	|			КОГДА РеквизитыДляКонтроля.ЭтоДопРеквизит
	|				ТОГДА ЕСТЬNULL(ВТВсеДополнительныеРеквизиты.ЗаполнятьОбязательно, ЛОЖЬ)
	|			ИНАЧЕ РеквизитыДляКонтроля.ЗаполнятьОбязательно
	|		КОНЕЦ КАК ЗаполнятьОбязательно,
	|		РеквизитыДляКонтроля.Уникален КАК Уникален,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ВТВсеДополнительныеРеквизиты.ЗаполнятьОбязательно, ЛОЖЬ)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ РеквизитыДляКонтроля.ОтображатьПриСоздании
	|		КОНЕЦ КАК ОтображатьПриСоздании,
	|		РеквизитыДляКонтроля.ЭтоДопРеквизит КАК Использование,
	|		ЛОЖЬ КАК ЕстьРеквизитВМетаданных
	|	ИЗ
	|		#ИсточникРеквизитыДляКонтроля КАК РеквизитыДляКонтроля
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеДополнительныеРеквизиты КАК ВТВсеДополнительныеРеквизиты
	|			ПО РеквизитыДляКонтроля.Свойство = ВТВсеДополнительныеРеквизиты.Свойство
	|	ГДЕ
	|		РеквизитыДляКонтроля.Ссылка = &ВидНоменклатуры
	|		И (РеквизитыДляКонтроля.ЭтоДопРеквизит
	|					И НЕ ВТВсеДополнительныеРеквизиты.Свойство ЕСТЬ NULL
	|				ИЛИ НЕ РеквизитыДляКонтроля.ЭтоДопРеквизит)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВсеРеквизитыНоменклатурыТаблица.Представление,
	|		ЛОЖЬ,
	|		ВсеРеквизитыНоменклатурыТаблица.Имя,
	|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка),
	|		ВсеРеквизитыНоменклатурыТаблица.ОбязательныйДляЗаполнения,
	|		ЛОЖЬ,
	|		ВсеРеквизитыНоменклатурыТаблица.ОбязательныйДляОтображенияПриСоздании,
	|		ВсеРеквизитыНоменклатурыТаблица.Использование,
	|		ИСТИНА
	|	ИЗ
	|		ВсеРеквизитыНоменклатурыТаблица КАК ВсеРеквизитыНоменклатурыТаблица) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Представление,
	|	ВложенныйЗапрос.ЭтоДопРеквизит,
	|	ВложенныйЗапрос.ИмяРеквизита,
	|	ВложенныйЗапрос.Свойство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДляЗапроса.Представление КАК Представление,
	|	ВТДляЗапроса.ЭтоДопРеквизит КАК ЭтоДопРеквизит,
	|	ВТДляЗапроса.ИмяРеквизита КАК ИмяРеквизита,
	|	ВТДляЗапроса.Свойство КАК Свойство,
	|	ВТДляЗапроса.ЗаполнятьОбязательно КАК ЗаполнятьОбязательно,
	|	ВТДляЗапроса.Уникален КАК Уникален,
	|	ВТДляЗапроса.ОтображатьПриСоздании КАК ОтображатьПриСоздании,
	|	ВТДляЗапроса.Использование КАК Использование,
	|	ВТДляЗапроса.Свойство.ТипЗначения КАК Тип,
	|	ЕСТЬNULL(ВТВсеДополнительныеРеквизиты.Набор, ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка)) КАК Набор,
	|	ЕСТЬNULL(ВТВсеДополнительныеРеквизиты.ЭтоОбщийРеквизит, ЛОЖЬ) КАК ЭтоОбщийРеквизит,
	|	ЕСТЬNULL(ВТВсеДополнительныеРеквизиты.НаборСвойств, ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка)) КАК НаборСвойств
	|ИЗ
	|	ВТДляЗапроса КАК ВТДляЗапроса
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеДополнительныеРеквизиты КАК ВТВсеДополнительныеРеквизиты
	|		ПО ВТДляЗапроса.Свойство = ВТВсеДополнительныеРеквизиты.Свойство
	|ГДЕ
	|	(ВТДляЗапроса.ЭтоДопРеквизит
	|			ИЛИ ВТДляЗапроса.ЕстьРеквизитВМетаданных)";
 	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ВсеДополнительныеРеквизиты(ВидНоменклатуры, ВладелецРеквизитов, МенеджерВременныхТаблиц);
	
	Если ВладелецРеквизитов = "Номенклатура" Тогда
		ВсеРеквизитыНоменклатурыТаблица = ЗначениеНастроекПовтИсп.ВсеРеквизитыНоменклатурыТаблица(ТипНоменклатуры,
																								ОсобенностьУчета,
																								ИспользованиеХарактеристик,
																								ИспользоватьСрокГодностиСерии);
		//
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИсточникРеквизитыДляКонтроля", "Справочник.ВидыНоменклатуры.РеквизитыДляКонтроляНоменклатуры");
	Иначе
		ВсеРеквизитыНоменклатурыТаблица = ЗначениеНастроекПовтИсп.ВсеРеквизитыХарактеристикНоменклатурыТаблица(ТипНоменклатуры,
																												ОсобенностьУчета);
		//
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИсточникРеквизитыДляКонтроля", "Справочник.ВидыНоменклатуры.РеквизитыДляКонтроляХарактеристик");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	Запрос.УстановитьПараметр("ВсеРеквизитыНоменклатурыТаблица", ВсеРеквизитыНоменклатурыТаблица);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрТабл Из Таблица Цикл
		Если Не СтрТабл.ЭтоДопРеквизит Тогда
			Если ВладелецРеквизитов = "Номенклатура" Тогда
				ОписаниеРеквизита = РеквизитОписание(СтрТабл.ИмяРеквизита,
													ТипНоменклатуры,
													ОсобенностьУчета,
													ИспользованиеХарактеристик,
													ИспользоватьСрокГодностиСерии);
			Иначе
				ОписаниеРеквизита = Справочники.ХарактеристикиНоменклатуры.РеквизитОписание(СтрТабл.ИмяРеквизита,
																							ТипНоменклатуры,
																							ОсобенностьУчета);
			КонецЕсли;
			
			СтрТабл.Тип = ОписаниеРеквизита.Тип;
			СтрТабл.Представление = ОписаниеРеквизита.Представление;
			СтрТабл.Использование = ОписаниеРеквизита.Использование;
			
			СтрТабл.ЗаполнятьОбязательно = СтрТабл.Использование
											И (ОписаниеРеквизита.ОбязательныйДляЗаполнения
											Или СтрТабл.ЗаполнятьОбязательно);
											
			СтрТабл.ОтображатьПриСоздании = СтрТабл.Использование
											И (СтрТабл.ОтображатьПриСоздании
												Или ОписаниеРеквизита.ОбязательныйДляОтображенияПриСоздании
												Или СтрТабл.ЗаполнятьОбязательно
												Или СтрТабл.Уникален);
		Иначе
			СтрТабл.ОтображатьПриСоздании = СтрТабл.ОтображатьПриСоздании
												Или СтрТабл.ЗаполнятьОбязательно
												Или СтрТабл.Уникален;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

// Рассчитывает GTIN, записываемый эмитентом в КиЗ ГИСМ
//
// Параметры:
//  Номенклатура	 - СправочникСсылка.Номенклатура 
//  Характеристика	 - СправочникСсылка.ХарактеристикиНоменклатуры.
// 
// Возвращаемое значение:
// 		Строка 
//
Функция GTINКиЗ(Номенклатура, Характеристика) Экспорт
	
	Если ЗначениеЗаполнено(Характеристика) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Характеристика ,"КиЗГИСМGTIN");
	Иначе
		
		РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "КиЗГИСМGTIN,ИспользованиеХарактеристик");
		
		Если РеквизитыНоменклатуры.ИспользованиеХарактеристик <> Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать Тогда
			ТекстИсключения = НСтр("ru = 'Невозможно определить GTIN КиЗ, т.к. не передана характеристика.'");
			ВызватьИсключение ТекстИсключения;
		Иначе
			Возврат РеквизитыНоменклатуры.КиЗГИСМGTIN;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Возвращает таблицу дополнительные реквизиты номенклатуры
//
// Параметры:
//  ВидНоменклатуры	 - СправочникСсылка.ВидыНоменклатуры.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - колонки:
//		* ИмяРеквизита - Строка - наименование свойства
//		* ПредставлениеРеквизита - Строка - заголовок свойства
//		* ЭтоДопРеквизит - Булево - всегда ИСТИНА
//		* ЭтоОбщийРеквизит - Булево - признак, что доп. реквизит входит в набор Справочник_Номенклатура_Общие
//		* ЗаполнятьОбязательно - Булево
//		* НаборСвойств - СправочникСсылка.НаборыДополнительныхРеквизитовИСведений - набор свойств, для которого был создан доп. реквизит
//		* Тип - ОписаниеТипов
//
Функция ВсеДополнительныеРеквизиты(ВидНоменклатуры, НазначениеДопРеквизитов, МенеджерВременныхТаблиц = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка) КАК Набор,
		|	"""" КАК ИмяРеквизита,
		|	"""" КАК ПредставлениеРеквизита,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка) КАК Свойство,
		|	ИСТИНА КАК ЭтоДопРеквизит,
		|	ЛОЖЬ КАК ЭтоОбщийРеквизит,
		|	ЛОЖЬ КАК ЗаполнятьОбязательно,
		|	ЛОЖЬ КАК ЗаполнятьОбязательноСУсловием,
		|	ЛОЖЬ КАК ВиденСУсловием,
		|	ЛОЖЬ КАК ДоступенСУсловием,
		|	ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка) КАК НаборСвойств,
		|	ТИПЗНАЧЕНИЯ("""") КАК Тип
		|//ПОМЕСТИТЬ ВТВсеДополнительныеРеквизиты
		|ГДЕ
		|	ЛОЖЬ";
		
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.Ссылка КАК Свойство
		|ПОМЕСТИТЬ ЗаполнятьОбязательно
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЗависимостиДополнительныхРеквизитов КАК ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов
		|ГДЕ
		|	ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.Реквизит = ""ВидНоменклатуры""
		|	И ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.ЗависимоеСвойство ПОДОБНО ""ЗаполнятьОбязательно""
		|	И ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.Значение = &ВидНоменклатуры
		|	И ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.НаборСвойств = &НаборВида
		|	И ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.Условие = ""Равно""
		|	И ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.Ссылка.ЗаполнятьОбязательно
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЗависимостиДополнительныхРеквизитов КАК ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов
		|ГДЕ
		|	ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.Реквизит = ""ВидНоменклатуры""
		|	И ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.ЗависимоеСвойство ПОДОБНО ""ЗаполнятьОбязательно""
		|	И ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.Значение = &ВидНоменклатуры
		|	И ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.НаборСвойств = &ОбщийНабор
		|	И ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.Условие = ""ВСписке""
		|	И ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.Ссылка.ЗаполнятьОбязательно
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.Ссылка КАК Свойство
		|ПОМЕСТИТЬ ЗаполнятьОбязательноСУсловием
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЗависимостиДополнительныхРеквизитов КАК ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов
		|ГДЕ
		|	ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.Реквизит <> ""ВидНоменклатуры""
		|	И ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.ЗависимоеСвойство ПОДОБНО ""ЗаполнятьОбязательно""
		|	И ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.НаборСвойств В (&НаборВида, &ОбщийНабор)
		|	И ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.Ссылка.ЗаполнятьОбязательно
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.Ссылка КАК Свойство
		|ПОМЕСТИТЬ Виден
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЗависимостиДополнительныхРеквизитов КАК ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов
		|ГДЕ
		|	ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.ЗависимоеСвойство ПОДОБНО ""Виден""
		|	И ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.НаборСвойств В (&НаборВида, &ОбщийНабор)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.Ссылка КАК Свойство
		|ПОМЕСТИТЬ Доступен
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЗависимостиДополнительныхРеквизитов КАК ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов
		|ГДЕ
		|	ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.ЗависимоеСвойство ПОДОБНО ""Доступен""
		|	И ДополнительныеРеквизитыИСведенияЗависимостиДополнительныхРеквизитов.НаборСвойств В (&НаборВида, &ОбщийНабор)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДополнительныеРеквизиты.Ссылка КАК Набор,
		|	ДополнительныеРеквизиты.Свойство.Наименование КАК ИмяРеквизита,
		|	ДополнительныеРеквизиты.Свойство.Заголовок КАК ПредставлениеРеквизита,
		|	ДополнительныеРеквизиты.Свойство КАК Свойство,
		|	ИСТИНА КАК ЭтоДопРеквизит,
		|	ВЫБОР
		|		КОГДА ДополнительныеРеквизиты.Ссылка = &ОбщийНабор
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоОбщийРеквизит,
		|	НЕ ЗаполнятьОбязательно.Свойство ЕСТЬ NULL КАК ЗаполнятьОбязательно,
		|	НЕ ЗаполнятьОбязательноСУсловием.Свойство ЕСТЬ NULL КАК ЗаполнятьОбязательноСУсловием,
		|	НЕ Виден.Свойство ЕСТЬ NULL КАК ВиденСУсловием,
		|	НЕ Доступен.Свойство ЕСТЬ NULL КАК ДоступенСУсловием,
		|	ДополнительныеРеквизиты.Свойство.НаборСвойств КАК НаборСвойств,
		|	ДополнительныеРеквизиты.Свойство.ТипЗначения КАК Тип
		|//ПОМЕСТИТЬ ВТВсеДополнительныеРеквизиты
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаполнятьОбязательно КАК ЗаполнятьОбязательно
		|		ПО ДополнительныеРеквизиты.Свойство = ЗаполнятьОбязательно.Свойство
		|		ЛЕВОЕ СОЕДИНЕНИЕ Доступен КАК Доступен
		|		ПО ДополнительныеРеквизиты.Свойство = Доступен.Свойство
		|		ЛЕВОЕ СОЕДИНЕНИЕ Виден КАК Виден
		|		ПО ДополнительныеРеквизиты.Свойство = Виден.Свойство
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаполнятьОбязательноСУсловием КАК ЗаполнятьОбязательноСУсловием
		|		ПО ДополнительныеРеквизиты.Свойство = ЗаполнятьОбязательноСУсловием.Свойство
		|ГДЕ
		|	(ДополнительныеРеквизиты.Ссылка = &ОбщийНабор
		|			ИЛИ ДополнительныеРеквизиты.Ссылка = &НаборВида)
		|	И НЕ ДополнительныеРеквизиты.ПометкаУдаления";
		
		Если НазначениеДопРеквизитов = "Номенклатура" Тогда
			ОбщийНабор = "ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие)";
			НаборВида  = "ВЫРАЗИТЬ(&ВидНоменклатуры КАК Справочник.ВидыНоменклатуры).НаборСвойств";
		ИначеЕсли НазначениеДопРеквизитов = "ХарактеристикиНоменклатуры" Тогда
			ОбщийНабор = "ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие)";
			НаборВида  = "ВЫРАЗИТЬ(&ВидНоменклатуры КАК Справочник.ВидыНоменклатуры).НаборСвойствХарактеристик";
		ИначеЕсли НазначениеДопРеквизитов = "СерииНоменклатуры" Тогда
			ОбщийНабор = "ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_СерииНоменклатуры_Общие)";
			НаборВида  = "ВЫРАЗИТЬ(&ВидНоменклатуры КАК Справочник.ВидыНоменклатуры).НаборСвойствСерий";
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбщийНабор", ОбщийНабор);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НаборВида", НаборВида);
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		Запрос.Текст = ТекстЗапроса;
		Возврат Запрос.Выполнить().Выгрузить();
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ПОМЕСТИТЬ", "ПОМЕСТИТЬ");
		Запрос.Текст = ТекстЗапроса;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает описание настроек реквизита номенклатуры.
//
// Параметры:
//	Реквизит - ОбъектМетаданных:Реквизит - реквизит справочника Номенклатура.
//	ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры - тип номенклатуры.
//	ОсобенностьУчета - ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры - особенность учета номенклатуры.
//	ИспользованиеХарактеристик - ПеречислениеСсылка.ВариантыИспользованияХарактеристикНоменклатуры, Булево - вариант
//		использования номенклатуры или признак использования характеристик.
//	ИспользоватьСрокГодностиСерии - Булево - признак использования срока годности в сериях номенклатуры.
//	ЭтоРеквизитыХарактеристик - Булево - признак принадлежности реквизитов справочнику ХарактеристикиНоменклатуры.
//
// Возвращаемое значение:
//	Структура - описание настроек реквизит (см. Справочник.Номенклатура.ЗначениеСвойствРеквизита).
//
Функция РеквизитОписание(Реквизит,
							ТипНоменклатуры,
							ОсобенностьУчета,
							ИспользованиеХарактеристик,
							ИспользоватьСрокГодностиСерии) Экспорт
	
	Если ТипЗнч(Реквизит) = Тип("Строка")
		Или ТипЗнч(Реквизит) = Тип("ОбъектМетаданных") Тогда
		
		ВсеРеквизитыНоменклатуры = ЗначениеНастроекПовтИсп.ВсеРеквизитыНоменклатуры(ТипНоменклатуры,
																					ОсобенностьУчета,
																					ИспользованиеХарактеристик,
																					ИспользоватьСрокГодностиСерии);
		
		Если ТипЗнч(Реквизит) = Тип("Строка") Тогда
			ИмяРеквизита = Реквизит;
		Иначе
			ИмяРеквизита = Реквизит.Имя;
		КонецЕсли;
		
		Возврат ВсеРеквизитыНоменклатуры[ИмяРеквизита];
	ИначеЕсли ТипЗнч(Реквизит) = Тип("ФиксированнаяСтруктура") Тогда
		Возврат Реквизит;
	Иначе
		ТекстИсключения = НСтр("ru = 'Неожиданный тип параметра Реквизит.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецФункции

Функция РекомендуемыеДляКонтроляУникальностиРеквизиты(ОсобенностьУчета)
	
	РеквизитыКиЗГИСМ = Новый Массив;
	
	Если ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.КиЗГИСМ Тогда
		РеквизитыКиЗГИСМ.Добавить("КиЗГИСМВид");
		РеквизитыКиЗГИСМ.Добавить("КиЗГИСМСпособВыпускаВОборот");
		РеквизитыКиЗГИСМ.Добавить("КиЗГИСМGTIN");
		РеквизитыКиЗГИСМ.Добавить("КиЗГИСМРазмер");
	КонецЕсли;
	
	Возврат РеквизитыКиЗГИСМ;
	
КонецФункции

Функция ПравоДоступаНаОбъектМетаданныхПоРеквизиту(Право, РеквизитОбъектМетаданных)

	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	МассивтиповДляПроверки = РеквизитОбъектМетаданных.Тип.Типы();
	Для Каждого Тип Из МассивтиповДляПроверки Цикл
		
		Если ОбщегоНазначенияУТ.ЭтоПримитивныйТип(Тип) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных <> Неопределено
			И Не ПравоДоступа(Право, ОбъектМетаданных) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

// Возвращает значение видимости реквизита объекта.
//
// Параметры:
//	Реквизит - Произвольный, Строка - реквизит объекта.
//	ИмяРеквизита - Строка - имя реквизита объекта.
//	РежимВидимостиПоказатьТолькоВажные - Булево - Истина, если необходимо показывать важные реквизиты формы объекта.
//	СтрокаНастройки - СтрокаТаблицыЗначений - строка настройки видимости реквизитов объекта см. Справочники.Номенклатура.ТаблицаНастроекРеквизитов.
//
// Возвращаемое значение:
//	Булево - Истина, если необходимо отобразить реквизит на форме.
//
Функция ВидимостьРеквизита(Реквизит, ИмяРеквизита, РежимВидимостиПоказатьТолькоВажные, СтрокаНастройки) Экспорт
	
	Если Не ТипЗнч(Реквизит) = Тип("Строка") Тогда
		Возврат ПравоДоступаНаОбъектМетаданныхПоРеквизиту("Просмотр", Реквизит)
				И (Не РежимВидимостиПоказатьТолькоВажные
					Или СтрокаНастройки.ОтображатьПриСоздании)
	Иначе
		Возврат ПравоДоступа("Просмотр", Метаданные.Справочники.Номенклатура.Реквизиты[ИмяРеквизита])
				И ПравоДоступаНаОбъектМетаданныхПоРеквизиту("Просмотр", Метаданные.Справочники.Номенклатура.Реквизиты[ИмяРеквизита])
				И (Не РежимВидимостиПоказатьТолькоВажные
					Или СтрокаНастройки.ОтображатьПриСоздании)
	КонецЕсли;
	
КонецФункции

// Возвращает структуру с видимостью элементов.
// Параметры:
//	Объект - СправочникОбъект.Номенклатура - элемент справочника номенклатуры
//	РежимВидимостиПоказатьТолькоВажные - Булево - признак отображения основных реквизитов.
//
// Возвращаемое значение:
//	Структура - структура видимости элементов. Ключ - имя элемента, значения - видимость.
//
Функция СтруктураВидимостиЭлементовФормы(Объект, РежимВидимостиПоказатьТолькоВажные)
	
	СтруктураВидимости = Новый Структура;
	
	АвторизованВнешнийПользователь = ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь();
	
	#Область ФункциональныеОпции
	
	ИспользоватьМногооборотнуюТару 			= ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару");
	ИспользоватьХарактеристикиНоменклатуры 	= ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьНесколькоВидовНоменклатуры 	= ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовНоменклатуры");
	ИспользоватьСерииНоменклатуры 			= ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры"); 
	ИспользоватьСборкуРазборку 				= ПолучитьФункциональнуюОпцию("ИспользоватьСборкуРазборку");
	ИспользоватьСертификатыНоменклатуры 	= ПолучитьФункциональнуюОпцию("ИспользоватьСертификатыНоменклатуры");
	ИспользоватьСегментыНоменклатуры 		= ПолучитьФункциональнуюОпцию("ИспользоватьСегментыНоменклатуры");
	ИспользоватьПроизводство 				= ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство");
	ИспользоватьАдресноеХранение			= ПолучитьФункциональнуюОпцию("ИспользоватьАдресноеХранение");
	ИспользоватьДополнительныеРеквизитыИСведения = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	ИспользоватьАдресноеХранениеСправочно	= ПолучитьФункциональнуюОпцию("ИспользоватьАдресноеХранениеСправочно");
	ИспользоватьРаздельныйУчетПоНалогообложению = ПолучитьФункциональнуюОпцию("ИспользоватьРаздельныйУчетПоНалогообложению");
	ИспользоватьКомиссиюПриЗакупках			= ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриЗакупках");
	ИспользоватьНесколькоОрганизаций		= ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	ИспользоватьНоменклатуруПродаваемуюСовместно = ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПродаваемуюСовместно");
	ИспользоватьПрогнозРасходаУпаковок		= ПолучитьФункциональнуюОпцию("ИспользоватьПрогнозРасходаУпаковок");
	ФормироватьФинансовыйРезультат			= ПолучитьФункциональнуюОпцию("ФормироватьФинансовыйРезультат");
	ИспользоватьРасширенноеОбеспечениеПотребностей = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенноеОбеспечениеПотребностей");
	ИспользоватьЗаполнениеРаздела7ДекларацииПоНДС = ПолучитьФункциональнуюОпцию("ИспользоватьЗаполнениеРаздела7ДекларацииПоНДС");
	ИспользоватьСоглашенияСПоставщиками 	= ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками");
	#КонецОбласти
	
	#Область ПризнакиТипаНоменклатуры
	ЭтоТовар				= (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	ЭтоМногооборотнаяТара	= (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ЭтоРабота 				= (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа);
	ЭтоУслуга 				= (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
	ЭтоНабор 				= (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор);
	#КонецОбласти
	
	#Область НастройкаПоВидуНоменклатуры
	
	ИменаРеквизитовВидаНоменклатуры = "ИспользоватьСерии, НастройкаИспользованияСерий, ИспользоватьСрокГодностиСерии,"
										+ "ШаблонЭтикетки, ШаблонЦенника";
	
	Если ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
		РеквизитыВидаНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидНоменклатуры, ИменаРеквизитовВидаНоменклатуры);
	Иначе
		РеквизитыВидаНоменклатуры = Новый Структура(ИменаРеквизитовВидаНоменклатуры);
		РеквизитыВидаНоменклатуры.ИспользоватьСерии = Ложь;
		РеквизитыВидаНоменклатуры.НастройкаИспользованияСерий = Ложь;
		РеквизитыВидаНоменклатуры.ИспользоватьСрокГодностиСерии = Ложь;
		РеквизитыВидаНоменклатуры.ШаблонЭтикетки = Неопределено;
		РеквизитыВидаНоменклатуры.ШаблонЦенника = Неопределено;
	КонецЕсли;
	
	НастройкиРеквизитовПоВидуНоменклатуры = ТаблицаНастроекРеквизитов(Объект.ВидНоменклатуры,
																	Объект.ТипНоменклатуры,
																	Объект.ОсобенностьУчета,
																	Объект.ИспользованиеХарактеристик,
																	РеквизитыВидаНоменклатуры.ИспользоватьСрокГодностиСерии,
																	"Номенклатура");
	
	Для Каждого СтрТабл Из НастройкиРеквизитовПоВидуНоменклатуры Цикл
		ИмяРеквизита     = СтрТабл.ИмяРеквизита;
		Если СтрТабл.ЭтоДопРеквизит Тогда
			ИмяЭлементаФормы = "ДополнительныйРеквизитЗначение_"
				+ СтрЗаменить(?(СтрТабл.ЭтоОбщийРеквизит,
						ВРег(Строка(СтрТабл.Набор.УникальныйИдентификатор())),
						ВРег(Строка(СтрТабл.НаборСвойств.УникальныйИдентификатор()))),
					"-",
					"x")
				+ "_"
				+ СтрЗаменить(ВРег(Строка(СтрТабл.Свойство.УникальныйИдентификатор())), "-", "x");
			
			СтруктураВидимости.Вставить(ИмяЭлементаФормы, СтрТабл.Использование И ВидимостьРеквизита(СтрТабл,
																				ИмяРеквизита,
																				РежимВидимостиПоказатьТолькоВажные,
																				СтрТабл));
		Иначе
			СтруктураВидимости.Вставить(ИмяРеквизита, СтрТабл.Использование
													И ВидимостьРеквизита(ИмяРеквизита,
																		ИмяРеквизита,
																		РежимВидимостиПоказатьТолькоВажные,
																		СтрТабл));
		КонецЕсли;
	КонецЦикла;
	
	#КонецОбласти
	
	#Область ШапкаФормы
	
	СтруктураВидимости.Вставить("ЗаполнитьРабочееНаименованиеПоШаблону", 	ЗначениеЗаполнено(Объект.ВидНоменклатуры));
	СтруктураВидимости.Вставить("ЗаполнитьНаименованиеДляПечатиПоШаблону", 	ЗначениеЗаполнено(Объект.ВидНоменклатуры));
	
	ГиперссылкаПерейтиШтрихкодыНоменклатурыВидимость = ПравоДоступа("Просмотр",
		Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры)
		И Не РежимВидимостиПоказатьТолькоВажные
		И ЗначениеЗаполнено(Объект.Ссылка);
	
	ГиперссылкаПерейтиНоменклатураСАналогичнымиСвойствамиВидимость = ПравоДоступа("Просмотр", 
		Метаданные.РегистрыСведений.НоменклатураСегмента)
		И Не ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь()
		И Не РежимВидимостиПоказатьТолькоВажные;
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиШтрихкодыНоменклатуры", 
		ГиперссылкаПерейтиШтрихкодыНоменклатурыВидимость);
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиНоменклатураСАналогичнымиСвойствами",
		ГиперссылкаПерейтиНоменклатураСАналогичнымиСвойствамиВидимость);
	
	#КонецОбласти
	
	#Область Описание
	
	ГиперссылкаПерейтиФайлыВидимость = ПравоДоступа("Просмотр", Метаданные.Справочники.НоменклатураПрисоединенныеФайлы)
		И Не РежимВидимостиПоказатьТолькоВажные;
	
	ВидимостьКомандФайлаКартинки = СтруктураВидимости.ФайлКартинки;
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиФайлы", ГиперссылкаПерейтиФайлыВидимость);
	
	СтруктураВидимости.Вставить("ДобавитьИзображение", ВидимостьКомандФайлаКартинки);
	СтруктураВидимости.Вставить("ОчиститьИзображение", ВидимостьКомандФайлаКартинки);
	СтруктураВидимости.Вставить("ИзменитьИзображение", ЗначениеЗаполнено(Объект.Ссылка));
	СтруктураВидимости.Вставить("ПросмотретьИзображение", ЗначениеЗаполнено(Объект.Ссылка));
	СтруктураВидимости.Вставить("ВыбратьКартинкуИзПрисоединенныхФайлов", ЗначениеЗаполнено(Объект.Ссылка));
	
	#КонецОбласти
	
	#Область СведенияОПроизводителе
	
	ГиперссылкаПерейтиСоглашенияВидимость = 
		Не РежимВидимостиПоказатьТолькоВажные
		И Объект.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Партнером
		И ПравоДоступа("Просмотр", Метаданные.Справочники.СоглашенияСПоставщиками)
		И ИспользоватьСоглашенияСПоставщиками;
		
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиСоглашения", ГиперссылкаПерейтиСоглашенияВидимость);
	
	#КонецОбласти
	
	#Область ПланированиеИМаркетинг
	
	ГиперссылкаПерейтиСовместныеПродажиВидимость = ИспользоватьНоменклатуруПродаваемуюСовместно
		И Не ЭтоНабор
		И Не ЭтоМногооборотнаяТара
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.НоменклатураПродаваемаяСовместно)
		И Не РежимВидимостиПоказатьТолькоВажные;
	
	ГиперссылкаПерейтиСегментыВидимость = ИспользоватьСегментыНоменклатуры
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.НоменклатураСегмента)
		И Не РежимВидимостиПоказатьТолькоВажные
		И Не АвторизованВнешнийПользователь;
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиСовместныеПродажи", ГиперссылкаПерейтиСовместныеПродажиВидимость);
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиСегменты", ГиперссылкаПерейтиСегментыВидимость);
	
	#КонецОбласти
	
	#Область ОбеспечениеИПроизводство
	
	ГиперссылкаПерейтиВариантыКомплектацииВидимость = ИспользоватьСборкуРазборку
		И (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор
			Или Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар)
		И ПравоДоступа("Просмотр", Метаданные.Справочники.ВариантыКомплектацииНоменклатуры)
		И Не РежимВидимостиПоказатьТолькоВажные;
	
	ГиперссылкаПерейтиНастройкаСпособовОбеспеченияПотребностейВидимость = 
		 ИспользоватьРасширенноеОбеспечениеПотребностей
		И (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
			Или Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара)
		И Не РежимВидимостиПоказатьТолькоВажные
		И ПравоДоступа("Просмотр", Метаданные.Обработки.НастройкаСпособовОбеспеченияПотребностей);
	
	ГиперссылкаПерейтиНастройкаПоддержанияЗапасовВидимость = ИспользоватьРасширенноеОбеспечениеПотребностей
		И (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
			Или Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара)
		И Не РежимВидимостиПоказатьТолькоВажные
		И ПравоДоступа("Просмотр", Метаданные.Обработки.НастройкаПоддержанияЗапасов);
	
	ГиперссылкаПерейтиНастройкаПередачиМатериаловВПроизводствоВидимость = Ложь;
	
	ГиперссылкаПерейтиПроизводствоВидимость = Ложь;
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиВариантыКомплектации", ГиперссылкаПерейтиВариантыКомплектацииВидимость);
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиНастройкаПоддержанияЗапасов",
		ГиперссылкаПерейтиНастройкаПоддержанияЗапасовВидимость);
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиНастройкаСпособовОбеспеченияПотребностей",
		ГиперссылкаПерейтиНастройкаСпособовОбеспеченияПотребностейВидимость);
		
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиНастройкаПередачиМатериаловВПроизводство",
		ГиперссылкаПерейтиНастройкаПередачиМатериаловВПроизводствоВидимость);
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиПроизводство", ГиперссылкаПерейтиПроизводствоВидимость);
	
	#КонецОбласти
	
	#Область Цены
	
	ГиперссылкаПерейтиПрайсЛистКомпанииВидимость = Не РежимВидимостиПоказатьТолькоВажные
		И ПравоДоступа("Просмотр", Метаданные.Обработки.ПрайсЛист);
	
	ГиперссылкаПерейтиПрайсЛистыПоставщиковВидимость = Не ЭтоНабор
		И Не РежимВидимостиПоказатьТолькоВажные
		И ПравоДоступа("Просмотр", Метаданные.Обработки.ПрайсЛистПоставщика);
	
	ГиперссылкаПерейтиИсторияИзмененияЦенКомпанииВидимость = Не РежимВидимостиПоказатьТолькоВажные
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ЦеныНоменклатуры)
		И Не АвторизованВнешнийПользователь;
	
	ГиперссылкаПерейтиИсторияИзмененияЦенПоставщиковВидимость = Не ЭтоНабор
		И Не РежимВидимостиПоказатьТолькоВажные
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ЦеныНоменклатурыПоставщиков);
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиПрайсЛистКомпании", ГиперссылкаПерейтиПрайсЛистКомпанииВидимость);
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиПрайсЛистыПоставщиков",
		ГиперссылкаПерейтиПрайсЛистыПоставщиковВидимость);
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиИсторияИзмененияЦенКомпании",
		ГиперссылкаПерейтиИсторияИзмененияЦенКомпанииВидимость);
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиИсторияИзмененияЦенПоставщиков",
		ГиперссылкаПерейтиИсторияИзмененияЦенПоставщиковВидимость);
	
	#КонецОбласти
	
	#Область ПечатьЭтикетокИЦенников
	
	ВидимостьШаблонЭтикетки = СтруктураВидимости.ШаблонЭтикетки;
	
	ВидимостьШаблонЦенника = СтруктураВидимости.ШаблонЦенника;
	
	СтруктураВидимости.Вставить("ИспользоватьОбщийШаблонЭтикетки", ВидимостьШаблонЭтикетки);
	СтруктураВидимости.Вставить("ИспользоватьИндивидуальныйШаблонЭтикетки", ВидимостьШаблонЭтикетки);
	СтруктураВидимости.Вставить("ШаблонЭтикетки",							ВидимостьШаблонЭтикетки);
	СтруктураВидимости.Вставить("ВидНоменклатурыШаблонЭтикетки",			ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.ШаблонЭтикетки)
																			И ВидимостьШаблонЭтикетки
																			И Не Объект.ИспользоватьИндивидуальныйШаблонЭтикетки);
	СтруктураВидимости.Вставить("ВидНоменклатурыШаблонЭтикеткиНеУказан",	Не ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.ШаблонЭтикетки)
																			И ВидимостьШаблонЭтикетки
																			И Не Объект.ИспользоватьИндивидуальныйШаблонЭтикетки);
	
	СтруктураВидимости.Вставить("ИспользоватьОбщийШаблонЦенника",	ВидимостьШаблонЦенника);
	СтруктураВидимости.Вставить("ИспользоватьИндивидуальныйШаблонЦенника",	ВидимостьШаблонЦенника);
	СтруктураВидимости.Вставить("ШаблонЦенника",							ВидимостьШаблонЦенника);
	СтруктураВидимости.Вставить("ВидНоменклатурыШаблонЦенника",				ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.ШаблонЦенника)
																			И ВидимостьШаблонЦенника
																			И Не Объект.ИспользоватьИндивидуальныйШаблонЦенника);
	СтруктураВидимости.Вставить("ВидНоменклатурыШаблонЦенникаНеУказан",		Не ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.ШаблонЦенника)
																			И ВидимостьШаблонЦенника
																			И Не Объект.ИспользоватьИндивидуальныйШаблонЦенника);
	
	#КонецОбласти
	
	#Область ОсновныеПараметрыУчета
	
	ВидНоменклатурыВидимость = ИспользоватьНесколькоВидовНоменклатуры И Не РежимВидимостиПоказатьТолькоВажные;
	ВидНоменклатурыПереключательВидимость = Не ИспользоватьНесколькоВидовНоменклатуры И Не РежимВидимостиПоказатьТолькоВажные;
	ВидНоменклатурыОбязательныеПоляВидимость = ИспользоватьНесколькоВидовНоменклатуры И РежимВидимостиПоказатьТолькоВажные;
	ВидНоменклатурыПереключательОбязательныеПоляВидимость = Не ИспользоватьНесколькоВидовНоменклатуры И РежимВидимостиПоказатьТолькоВажные;
	ТипНоменклатурыВидимость = ИспользоватьНесколькоВидовНоменклатуры И Не РежимВидимостиПоказатьТолькоВажные;
	
	СтруктураВидимости.Вставить("ВидНоменклатуры", 								ВидНоменклатурыВидимость);
	СтруктураВидимости.Вставить("ВидНоменклатурыПереключатель", 				ВидНоменклатурыПереключательВидимость);
	СтруктураВидимости.Вставить("ВидНоменклатурыОбязательныеПоля", 				ВидНоменклатурыОбязательныеПоляВидимость);
	СтруктураВидимости.Вставить("ВидНоменклатурыПереключательОбязательныеПоля", ВидНоменклатурыПереключательОбязательныеПоляВидимость);
	СтруктураВидимости.Вставить("ТипНоменклатуры", 								ТипНоменклатурыВидимость);
	
	ИспользованиеХарактеристикВидимость  = СтруктураВидимости.ИспользованиеХарактеристик
		И Не РежимВидимостиПоказатьТолькоВажные;
	
	СтруктураВидимости.Вставить("ИспользованиеХарактеристик", ИспользованиеХарактеристикВидимость);
	
	ГиперссылкаПерейтиХарактеристикиНоменклатурыВидимость = ИспользованиеХарактеристикВидимость
		И ПравоДоступа("Просмотр", Метаданные.Справочники.ХарактеристикиНоменклатуры)
		И Объект.ИспользованиеХарактеристик <> Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать;
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиХарактеристикиНоменклатуры", 
		ГиперссылкаПерейтиХарактеристикиНоменклатурыВидимость);
		
	НастройкаИспользованияСерийВидимость = ИспользоватьСерииНоменклатуры
		И (ЭтоТовар
			Или ЭтоМногооборотнаяТара)
		И Не РежимВидимостиПоказатьТолькоВажные;
	
	ГиперссылкаПерейтиТоварыДругогоКачестваВидимость = СтруктураВидимости.Качество
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ТоварыДругогоКачества)
		И Не РежимВидимостиПоказатьТолькоВажные;
	
	СтруктураВидимости.Вставить("НастройкаИспользованияСерий", НастройкаИспользованияСерийВидимость);
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиСоставНабора", 
									ПравоДоступа("Просмотр", Метаданные.Справочники.ВариантыКомплектацииНоменклатуры)
									И Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор
									И Не РежимВидимостиПоказатьТолькоВажные);
										
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиТоварыДругогоКачества",
		ГиперссылкаПерейтиТоварыДругогоКачестваВидимость);
	
	#КонецОбласти
	
	#Область ЕдиницыИзмеренияИУсловияХранения
	
	ВидимостьНастроекУпаковок = СтруктураВидимости.ИспользоватьУпаковки
								И Объект.ИспользоватьУпаковки
								И Не РежимВидимостиПоказатьТолькоВажные;
	
	ВидимостьЕдиницыИзмеренияСрокаГодности = СтруктураВидимости.СрокГодности;
	
	НастройкиОбщегоНабораУпаковокВидимость = ВидимостьНастроекУпаковок
											И Объект.НаборУпаковок <> Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры;
							
	ГиперссылкаПерейтиУпаковкиНоменклатурыВидимость = ВидимостьНастроекУпаковок
		И Объект.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры
		И ПравоДоступа("Просмотр", Метаданные.Справочники.УпаковкиЕдиницыИзмерения);
	
	ГиперссылкаПерейтиПрогнозыРасходаУпаковокВидимость = ВидимостьНастроекУпаковок
		И ИспользоватьПрогнозРасходаУпаковок
		И ПравоДоступа("Просмотр", Метаданные.Справочники.УпаковкиЕдиницыИзмерения)
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ПрогнозыРасходаУпаковок)
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.НастройкиАдресныхСкладов);
	
	ГиперссылкаПерейтиРазмещениеНоменклатурыВидимость =
		(ЭтоТовар
		Или ЭтоМногооборотнаяТара)
		И Не РежимВидимостиПоказатьТолькоВажные
		И ИспользоватьАдресноеХранениеСправочно
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам);
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиУпаковкиНабора", 		НастройкиОбщегоНабораУпаковокВидимость
																			И ПравоДоступа("Просмотр", Метаданные.Справочники.УпаковкиЕдиницыИзмерения));
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиУпаковкиНоменклатуры",	ГиперссылкаПерейтиУпаковкиНоменклатурыВидимость);
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиПрогнозыРасходаУпаковок",
		ГиперссылкаПерейтиПрогнозыРасходаУпаковокВидимость);
	
	СтруктураВидимости.Вставить("НаборУпаковокОтступ", 						ВидимостьНастроекУпаковок);
	СтруктураВидимости.Вставить("ИспользованиеУпаковокИндивидуальныйНабор", ВидимостьНастроекУпаковок);
	СтруктураВидимости.Вставить("ИспользованиеУпаковокОбщийНабор", 			ВидимостьНастроекУпаковок);
	
	ЕдиницаДляОтчетовВидимость = СтруктураВидимости.ЕдиницаДляОтчетов
								И Не РежимВидимостиПоказатьТолькоВажные
								И ПравоДоступа("Просмотр", Метаданные.Справочники.Номенклатура.Реквизиты.ЕдиницаДляОтчетов)
								И ПравоДоступаНаОбъектМетаданныхПоРеквизиту("Просмотр", Метаданные.Справочники.Номенклатура.Реквизиты.ЕдиницаДляОтчетов);
	
	КоэффициентЕдиницыДляОтчетовВидимость = ЕдиницаДляОтчетовВидимость
											  И ЗначениеЗаполнено(Объект.ЕдиницаДляОтчетов)
											  И Объект.ЕдиницаДляОтчетов <> Объект.ЕдиницаИзмерения
											  И Не РежимВидимостиПоказатьТолькоВажные;
											  
	ЕдиницаДляОтчетовЕдиницаИзмеренияНадписьВидимость = КоэффициентЕдиницыДляОтчетовВидимость
														И Объект.ЕдиницаДляОтчетов <> Объект.ЕдиницаИзмерения
														И Не РежимВидимостиПоказатьТолькоВажные;
											  
	СтруктураВидимости.Вставить("ЕдиницаДляОтчетов", 							ЕдиницаДляОтчетовВидимость);
	СтруктураВидимости.Вставить("ЕдиницаДляОтчетовЕдиницаИзмеренияНадпись", 	ЕдиницаДляОтчетовЕдиницаИзмеренияНадписьВидимость);
	СтруктураВидимости.Вставить("КоэффициентЕдиницыДляОтчетов", 				КоэффициентЕдиницыДляОтчетовВидимость);
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиРазмещениеНоменклатуры",
		ГиперссылкаПерейтиРазмещениеНоменклатурыВидимость);
	
	СтруктураВидимости.Вставить("ЕдиницаИзмеренияСрокаГодности", ВидимостьЕдиницыИзмеренияСрокаГодности);
	
	#КонецОбласти

	#Область РегламентированныйИФинансовыйУчет
		
	ГиперссылкаПерейтиСертификатыНоменклатурыВидимость = ИспользоватьСертификатыНоменклатуры
		И Объект.ВестиУчетСертификатовНоменклатуры
		И Не РежимВидимостиПоказатьТолькоВажные
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ОбластиДействияСертификатовНоменклатуры);
	
	ГиперссылкаПерейтиРаспределениеПродажПоНаправлениямДеятельности = 
		(ЭтоТовар
			Или ЭтоМногооборотнаяТара
			Или ЭтоУслуга
			Или ЭтоРабота)
		И ФормироватьФинансовыйРезультат
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.НастройкаРаспределенияПоНаправлениямДеятельности)
		И Не РежимВидимостиПоказатьТолькоВажные;
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиСертификатыНоменклатуры",
		ГиперссылкаПерейтиСертификатыНоменклатурыВидимость);
	
	ДрагоценныеМатериалы = Ложь;
	Если ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
		ДрагоценныеМатериалы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидНоменклатуры, "СодержитДрагоценныеМатериалы");
	КонецЕсли;

	СтруктураВидимости.Вставить("ГиперссылкаПерейтиДрагоценныеМатериалы", ДрагоценныеМатериалы
																			И Не РежимВидимостиПоказатьТолькоВажные
																			И ПравоДоступа("Просмотр", Метаданные.Справочники.Номенклатура.ТабличныеЧасти.ДрагоценныеМатериалы));
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиРаспределениеПродажПоНаправлениямДеятельности",
		ГиперссылкаПерейтиРаспределениеПродажПоНаправлениямДеятельности);
	
	ВидимостьКодаРаздела7ДекларацииНДС = СтруктураВидимости.КодРаздел7ДекларацииНДС
		И ИспользоватьЗаполнениеРаздела7ДекларацииПоНДС
		И Не Объект.ОблагаетсяНДСУПокупателя
		И (Объект.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС);
	СтруктураВидимости.Вставить("КодРаздел7ДекларацииНДС", ВидимостьКодаРаздела7ДекларацииНДС);
	
	#КонецОбласти
	
	#Область СведенияПоАлкогольнойПродукции
	
	СтруктураВидимости.ОбъемДАЛ = СтруктураВидимости.ОбъемДАЛ
									И Не Объект.АлкогольнаяПродукцияВоВскрытойТаре;
	СтруктураВидимости.Вставить("ДекорацияДекалитры", 			СтруктураВидимости.ОбъемДАЛ);
	СтруктураВидимости.Вставить("РассчитатьОбъемВДекалитрах", 	СтруктураВидимости.ОбъемДАЛ);
	СтруктураВидимости.Вставить("ДекорацияПроцентыКрепости", 	СтруктураВидимости.ВидАлкогольнойПродукции);
	
	#КонецОбласти
	
	// Реквизиты с настройкой видимости по интерфейсу и зависящие от связанных полей.
	СтруктураВидимости.Вставить("НаборУпаковок", НастройкиОбщегоНабораУпаковокВидимость
		И ПравоДоступа("Просмотр", Метаданные.Справочники.Номенклатура.Реквизиты.НаборУпаковок)
		И ПравоДоступаНаОбъектМетаданныхПоРеквизиту("Просмотр", Метаданные.Справочники.Номенклатура.Реквизиты.НаборУпаковок));
	
	ДоступностьТары = ЗначениеЗаполнено(Объект.ЕдиницаИзмерения)
		И Не Объект.ИспользоватьУпаковки
		И Не Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(Объект.ЕдиницаИзмерения);
	
	ПоставляетсяВМногооборотнойТареВидимость = ИспользоватьМногооборотнуюТару
		И ЭтоТовар
		И Не РежимВидимостиПоказатьТолькоВажные
		И ПравоДоступа("Просмотр", Метаданные.Справочники.Номенклатура.Реквизиты.ПоставляетсяВМногооборотнойТаре);
	
	НоменклатураМногооборотнаяТараВидимость = ПоставляетсяВМногооборотнойТареВидимость 
		И ДоступностьТары
		И Объект.ПоставляетсяВМногооборотнойТаре;
	
	ХарактеристикаМногооборотнаяТараВидимость = НоменклатураМногооборотнаяТараВидимость
		И ЗначениеЗаполнено(Объект.НоменклатураМногооборотнаяТара) 
		И ХарактеристикиИспользуются(Объект.НоменклатураМногооборотнаяТара);
	
	ТараОтступВидимость = ПоставляетсяВМногооборотнойТареВидимость
		И Объект.ПоставляетсяВМногооборотнойТаре;
	
	СтруктураВидимости.Вставить("ПоставляетсяВМногооборотнойТаре", 	ПоставляетсяВМногооборотнойТареВидимость);
	СтруктураВидимости.Вставить("НоменклатураМногооборотнаяТара", 	НоменклатураМногооборотнаяТараВидимость);
	СтруктураВидимости.Вставить("ХарактеристикаМногооборотнаяТара", ХарактеристикаМногооборотнаяТараВидимость);
	СтруктураВидимости.Вставить("ТараОтступ", 						ТараОтступВидимость);
	
	СтруктураВидимости.Вставить("НаименованиеОКВЭД",	СтруктураВидимости.КодОКВЭД);
	СтруктураВидимости.Вставить("НаименованиеОКВЭД2",	СтруктураВидимости.КодОКВЭД2);
	СтруктураВидимости.Вставить("НаименованиеОКП",		СтруктураВидимости.КодОКП);
	СтруктураВидимости.Вставить("НаименованиеОКПД2",	СтруктураВидимости.КодОКПД2);
	СтруктураВидимости.Вставить("НаименованиеТНВЭД",	СтруктураВидимости.КодТНВЭД);
	СтруктураВидимости.Вставить("НаименованиеВидаНоменклатурнойКлассификации",
								СтруктураВидимости.КодВидаНоменклатурнойКлассификации);

	// Прочие элементы
	СтруктураВидимости.Вставить("ПроверитьУникальность", 
								РежимВидимостиПоказатьТолькоВажные
								И Константы.КонтролироватьУникальностьНоменклатурыПоСочетаниюЗначенийРеквизитов.Получить()
								И Не ЗначениеЗаполнено(Объект.Ссылка));
	
	#Область Отчеты
	
	СтруктураВидимости.Вставить("ВедомостьПоТоварамОрганизаций", (ЭтоТовар
			Или ЭтоМногооборотнаяТара
			Или ЭтоРабота)
		И (ИспользоватьНесколькоОрганизаций
			Или ИспользоватьКомиссиюПриЗакупках
			Или ИспользоватьРаздельныйУчетПоНалогообложению)
		И ПравоДоступа("Просмотр", Метаданные.Отчеты.ВедомостьПоТоварамОрганизаций));
	
	СтруктураВидимости.Вставить("ВедомостьПоСериямНоменклатуры", (ЭтоТовар
			Или ЭтоМногооборотнаяТара)
		И РеквизитыВидаНоменклатуры.ИспользоватьСерии
		И ПравоДоступа("Просмотр", Метаданные.Отчеты.ВедомостьПоСериямНоменклатуры));
	
	СтруктураВидимости.Вставить("ВедомостьПоТоварамНаСкладах", (ЭтоТовар
			Или ЭтоМногооборотнаяТара)
		И ПравоДоступа("Просмотр", Метаданные.Отчеты.ВедомостьПоТоварамНаСкладах));
	
	СтруктураВидимости.Вставить("ТоварыВЯчейках", (ЭтоТовар
			Или ЭтоМногооборотнаяТара)
		И ИспользоватьАдресноеХранение
		И ПравоДоступа("Просмотр", Метаданные.Отчеты.ВедомостьПоТоварамНаСкладах));
	
	СтруктураВидимости.Вставить("ОстаткиИДоступностьТоваров", (ЭтоТовар
			Или ЭтоМногооборотнаяТара)
		И ПравоДоступа("Просмотр", Метаданные.Отчеты.ОстаткиИДоступностьТоваров));
	
	СтруктураВидимости.Вставить("ТоварыНаСкладахПоСрокамГодности", (ЭтоТовар
			Или ЭтоМногооборотнаяТара)
		И РеквизитыВидаНоменклатуры.ИспользоватьСерии
		И РеквизитыВидаНоменклатуры.ИспользоватьСрокГодностиСерии
		И ПравоДоступа("Просмотр", Метаданные.Отчеты.ТоварыНаСкладахПоСрокамГодности));
	
	СтруктураВидимости.Вставить("ВыручкаИСебестоимостьПродаж",
		ПравоДоступа("Просмотр", Метаданные.Отчеты.ВыручкаИСебестоимостьПродаж));
	
	СтруктураВидимости.Вставить("СостояниеАссортимента",
		ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеАссортимента));
	
	#КонецОбласти
	
	Возврат СтруктураВидимости;
	
КонецФункции

// Возвращает структуру с заголовками элементов.
// Параметры:
//	Объект - СправочникОбъект.Номенклатура - элемент справочника номенклатуры
//	СтруктураВидимостиЭлементов - Структура - структура видимости элементов.
//
// Возвращаемое значение:
//	Структура - структура заголовков элементов. Ключ - имя элемента, значения - заголовок.
//
Функция СтруктураЗаголовковЭлементовФормы(Объект, СтруктураВидимостиЭлементов)
	
	СтруктураЗаголовков = Новый Структура;
	
	#Область ПризнакиТипаНоменклатуры
	
	ЭтоТовар				= (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	ЭтоМногооборотнаяТара 	= (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ЭтоРабота 				= (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа);
	ЭтоУслуга 				= (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
	ЭтоНабор 				= (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор);
	
	#КонецОбласти
	
	ИспользуютсяХарактеристики = Объект.ИспользованиеХарактеристик <> Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать;
	
	СтруктураЗаголовков.Вставить("ЕдиницаИзмерения", ?(ЭтоТовар Или ЭтоМногооборотнаяТара,
															НСтр("ru = 'Единица хранения'"),
															НСтр("ru = 'Единица измерения'")));
															
	Если ЭтоРабота Тогда
		СтруктураЗаголовков.Вставить("ГруппаАгентскиеУслуги", НСтр("ru='Работа выполняется по агентскому договору'"));
	Иначе
		СтруктураЗаголовков.Вставить("ГруппаАгентскиеУслуги", НСтр("ru='Услуга реализуется по агентскому договору'"));
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство") Тогда
		СтруктураЗаголовков.Вставить("ДекорацияЗаголовокОбеспечение", НСтр("ru='Обеспечение'"));
	Иначе
		СтруктураЗаголовков.Вставить("ДекорацияЗаголовокОбеспечение", НСтр("ru='Обеспечение и производство'"));
	КонецЕсли;
	
	#Область ЗаголовкиГиперссылок
	
	КартинкаПредупреждение = БиблиотекаКартинок.ПредупреждениеСНачалаСтроки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыДругогоКачества.Номенклатура КАК Номенклатура,
	|	ТоварыДругогоКачества.НоменклатураБрак КАК НоменклатураБрак,
	|	ТоварыДругогоКачества.ГрадацияКачества КАК ГрадацияКачества
	|ИЗ
	|	РегистрСведений.ТоварыДругогоКачества КАК ТоварыДругогоКачества
	|ГДЕ
	|	&ГиперссылкаПерейтиТоварыДругогоКачества
	|	И ТоварыДругогоКачества.Номенклатура = &Номенклатура
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 1
	|ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	&ГиперссылкаПерейтиШтрихкодыНоменклатуры
	|	И ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 2
	|ВЫБРАТЬ
	|	ВариантыКомплектацииНоменклатурыТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
	|ГДЕ
	|	&ГиперссылкаПерейтиСоставНабора
	|	И ВариантыКомплектацииНоменклатурыТовары.Ссылка = &ВариантКомплектацииНоменклатуры
	|	И НЕ ВариантыКомплектацииНоменклатурыТовары.Ссылка.ПометкаУдаления
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 3
	|ВЫБРАТЬ
	|	ВариантыКомплектацииНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	|ГДЕ
	|	(&ГиперссылкаПерейтиСоставНабора
	|			ИЛИ &ГиперссылкаПерейтиВариантыКомплектации)
	|	И ВариантыКомплектацииНоменклатуры.Владелец = &Номенклатура
	|	И НЕ ВариантыКомплектацииНоменклатуры.ПометкаУдаления
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 4
	|ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	&ГиперссылкаПерейтиХарактеристикиНоменклатуры
	|	И ХарактеристикиНоменклатуры.Владелец = &ВладелецХарактеристики
	|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 5
	|ВЫБРАТЬ
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	(&ГиперссылкаПерейтиУпаковкиНоменклатуры
	|			ИЛИ &ГиперссылкаПерейтиУпаковкиНабора)
	|	И УпаковкиЕдиницыИзмерения.Владелец = &ВладелецУпаковки
	|	И НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 6
	|ВЫБРАТЬ
	|	ОбластиДействияСертификатовНоменклатуры.СертификатНоменклатуры КАК СертификатНоменклатуры
	|ИЗ
	|	РегистрСведений.ОбластиДействияСертификатовНоменклатуры КАК ОбластиДействияСертификатовНоменклатуры
	|ГДЕ
	|	&ГиперссылкаПерейтиСертификатыНоменклатуры
	|	И ОбластиДействияСертификатовНоменклатуры.ВидНоменклатуры = &ВидНоменклатуры
	|	И (ОбластиДействияСертификатовНоменклатуры.Номенклатура = &Номенклатура
	|			ИЛИ ОбластиДействияСертификатовНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|	И НЕ ОбластиДействияСертификатовНоменклатуры.СертификатНоменклатуры.ПометкаУдаления
	|	И ОбластиДействияСертификатовНоменклатуры.СертификатНоменклатуры.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСертификатовНоменклатуры.Действующий)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 7
	|ВЫБРАТЬ
	|	НоменклатураПрисоединенныеФайлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
	|ГДЕ
	|	&ГиперссылкаПерейтиФайлы
	|	И НоменклатураПрисоединенныеФайлы.ВладелецФайла = &Номенклатура
	|	И НЕ НоменклатураПрисоединенныеФайлы.ПометкаУдаления
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 8
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураСегмента.Сегмент КАК Сегмент
	|ИЗ
	|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|ГДЕ
	|	&ГиперссылкаПерейтиСегменты
	|	И НоменклатураСегмента.Номенклатура = &Номенклатура
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 9
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СегментыНоменклатуры.Ссылка КАК Сегмент,
	|	СегментыНоменклатуры.Ответственный КАК Ответственный,
	|	СегментыНоменклатуры.СпособФормирования КАК СпособФормирования
	|ИЗ
	|	Справочник.СегментыНоменклатуры КАК СегментыНоменклатуры
	|ГДЕ
	|	&ГиперссылкаПерейтиСегменты
	|	И НЕ СегментыНоменклатуры.ЭтоГруппа
	|	И НЕ СегментыНоменклатуры.ПометкаУдаления
	|	И СегментыНоменклатуры.СпособФормирования = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСегментов.ФормироватьДинамически)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 10
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоглашенияСПоставщиками.Ссылка) КАК КоличествоСоглашений
	|ПОМЕСТИТЬ КоличествоСоглашенийУслуги
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
	|ГДЕ
	|	НЕ &ИспользуютсяХарактеристики
	|	И СоглашенияСПоставщиками.Партнер = &Партнер
	|	И (НЕ &ИспользуютсяКонтрагенты
	|		ИЛИ СоглашенияСПоставщиками.Контрагент = &Контрагент)
	|	И СоглашенияСПоставщиками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.Действует)
	|	И СоглашенияСПоставщиками.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОказаниеАгентскихУслуг)
	|	И (СоглашенияСПоставщиками.ДатаНачалаДействия = ДАТАВРЕМЯ(1, 1, 1)
	|		ИЛИ СоглашенияСПоставщиками.ДатаНачалаДействия <= &ТекущаяДата)
	|	И (СоглашенияСПоставщиками.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
	|		ИЛИ СоглашенияСПоставщиками.ДатаОкончанияДействия >= &ТекущаяДата)
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоглашенияСПоставщиками.Ссылка) > 0
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 11
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоглашенияСПоставщиками.Ссылка) КАК КоличествоСоглашений,
	|	МАКСИМУМ(НЕ ТЧАгентскиеУслуги.Ссылка ЕСТЬ NULL
	|		ИЛИ НЕ СоглашенияСПоставщиками.ИспользоватьУказанныеАгентскиеУслуги) КАК ЕстьСоглашенияПоНоменклатуре
	|ПОМЕСТИТЬ СоглашенияУслуги
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками.АгентскиеУслуги КАК ТЧАгентскиеУслуги
	|		ПО СоглашенияСПоставщиками.Ссылка = ТЧАгентскиеУслуги.Ссылка
	|			И ТЧАгентскиеУслуги.Номенклатура = &Номенклатура
	|ГДЕ
	|	НЕ &ИспользуютсяХарактеристики
	|	И СоглашенияСПоставщиками.Партнер = &Партнер
	|	И (НЕ &ИспользуютсяКонтрагенты
	|		ИЛИ СоглашенияСПоставщиками.Контрагент = &Контрагент)
	|	И СоглашенияСПоставщиками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.Действует)
	|	И СоглашенияСПоставщиками.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОказаниеАгентскихУслуг)
	|	И (СоглашенияСПоставщиками.ДатаНачалаДействия = ДАТАВРЕМЯ(1, 1, 1)
	|		ИЛИ СоглашенияСПоставщиками.ДатаНачалаДействия <= &ТекущаяДата)
	|	И (СоглашенияСПоставщиками.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
	|		ИЛИ СоглашенияСПоставщиками.ДатаОкончанияДействия >= &ТекущаяДата)
	|	И (НЕ ТЧАгентскиеУслуги.Ссылка ЕСТЬ NULL
	|		ИЛИ НЕ СоглашенияСПоставщиками.ИспользоватьУказанныеАгентскиеУслуги)
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоглашенияСПоставщиками.Ссылка) > 0
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 12
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СоглашенияУслуги.КоличествоСоглашений, КоличествоСоглашенийУслуги.КоличествоСоглашений) КАК КоличествоСоглашений,
	|	ЕСТЬNULL(СоглашенияУслуги.ЕстьСоглашенияПоНоменклатуре, ЛОЖЬ) КАК ЕстьСоглашенияПоНоменклатуре
	|ИЗ
	|	КоличествоСоглашенийУслуги КАК КоличествоСоглашенийУслуги
	|		ПОЛНОЕ СОЕДИНЕНИЕ СоглашенияУслуги КАК СоглашенияУслуги
	|		ПО ИСТИНА
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 13
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоглашенияСПоставщиками.Ссылка) КАК КоличествоСоглашений,
	|	ЕСТЬNULL(МАКСИМУМ(НЕ ТЧАгентскиеУслуги.Ссылка ЕСТЬ NULL
	|			ИЛИ НЕ СоглашенияСПоставщиками.ИспользоватьУказанныеАгентскиеУслуги),
	|		ЛОЖЬ) КАК ЕстьСоглашенияПоНоменклатуре
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
	|		ПО ХарактеристикиНоменклатуры.Принципал = СоглашенияСПоставщиками.Партнер
	|			И (ХарактеристикиНоменклатуры.Контрагент = СоглашенияСПоставщиками.Контрагент
	|				ИЛИ СоглашенияСПоставщиками.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками.АгентскиеУслуги КАК ТЧАгентскиеУслуги
	|		ПО СоглашенияСПоставщиками.Ссылка = ТЧАгентскиеУслуги.Ссылка
	|			И ТЧАгентскиеУслуги.Номенклатура = &Номенклатура
	|			И ТЧАгентскиеУслуги.Характеристика = ХарактеристикиНоменклатуры.Ссылка
	|ГДЕ
	|	&ИспользуютсяХарактеристики
	|	И ЕСТЬNULL(ХарактеристикиНоменклатуры.Владелец, НЕОПРЕДЕЛЕНО) = &ВладелецХарактеристики
	|	И НЕ ЕСТЬNULL(ХарактеристикиНоменклатуры.ПометкаУдаления, ЛОЖЬ)
	|	И СоглашенияСПоставщиками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.Действует)
	|	И СоглашенияСПоставщиками.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОказаниеАгентскихУслуг)
	|	И (СоглашенияСПоставщиками.ДатаНачалаДействия = ДАТАВРЕМЯ(1, 1, 1)
	|		ИЛИ СоглашенияСПоставщиками.ДатаНачалаДействия <= &ТекущаяДата)
	|	И (СоглашенияСПоставщиками.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
	|		ИЛИ СоглашенияСПоставщиками.ДатаОкончанияДействия >= &ТекущаяДата)
	|	И (НЕ ТЧАгентскиеУслуги.Ссылка ЕСТЬ NULL
	|		ИЛИ НЕ СоглашенияСПоставщиками.ИспользоватьУказанныеАгентскиеУслуги)";
	
	Запрос.УстановитьПараметр("Номенклатура",				Объект.Ссылка);
	Запрос.УстановитьПараметр("Партнер",					Объект.Принципал);
	Запрос.УстановитьПараметр("Контрагент",					Объект.Контрагент);
	Запрос.УстановитьПараметр("ИспользуютсяКонтрагенты",	ЗначениеЗаполнено(Объект.Контрагент));
	Запрос.УстановитьПараметр("ВидНоменклатуры",			Объект.ВидНоменклатуры);
	Запрос.УстановитьПараметр("ТекущаяДата",				НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ИспользуютсяХарактеристики",	ИспользуютсяХарактеристики);
	
	Если РазделВиден("ГиперссылкаПерейтиСоставНабора", СтруктураВидимостиЭлементов) Тогда 
		ВариантКомплектацииНоменклатуры = НаборыВызовСервера.ВариантКомплектацииНоменклатурыПоУмолчанию(
											Объект.Ссылка,
											Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		Запрос.УстановитьПараметр("ВариантКомплектацииНоменклатуры", ВариантКомплектацииНоменклатуры);
	Иначе
		Запрос.УстановитьПараметр("ВариантКомплектацииНоменклатуры", Справочники.ВариантыКомплектацииНоменклатуры.ПустаяСсылка());
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ВариантКомплектацииНоменклатуры", ВариантКомплектацииНоменклатуры);
	
	Если Объект.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры Тогда
		ВладелецХарактеристики = Объект.Ссылка;
	ИначеЕсли Объект.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры Тогда
		ВладелецХарактеристики = Объект.ВидНоменклатуры;
	ИначеЕсли Объект.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры Тогда
		ВладелецХарактеристики = Объект.ВладелецХарактеристик;
	КонецЕсли;
	Запрос.УстановитьПараметр("ВладелецХарактеристики", ВладелецХарактеристики);
	
	Если Объект.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда
		ВладелецУпаковки = Объект.Ссылка;
	Иначе 
		ВладелецУпаковки = Объект.НаборУпаковок;
	КонецЕсли;
	Запрос.УстановитьПараметр("ВладелецУпаковки", ВладелецУпаковки);
	
	ПараметрыЗапроса = Запрос.НайтиПараметры();
	
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Если СтрНайти(ПараметрЗапроса.Имя, "ГиперссылкаПерейти") <> 0 Тогда
			Запрос.УстановитьПараметр(ПараметрЗапроса.Имя, РазделВиден(ПараметрЗапроса.Имя, СтруктураВидимостиЭлементов));
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	Выборки = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РазделВиден("ГиперссылкаПерейтиТоварыДругогоКачества", СтруктураВидимостиЭлементов) Тогда
		Количество = Выборки[0].Выбрать().Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Товары другого качества'") 
																+ " (" + Количество + ")",,,,"ТоварыДругогоКачестваКоличество");
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиТоварыДругогоКачества", ЗаголовокГиперссылки);
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиШтрихкодыНоменклатуры", СтруктураВидимостиЭлементов) Тогда
		Количество = Выборки[1].Выбрать().Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Штрихкоды'") + " (" + Количество + ")",,,,"ШтрихкодыНоменклатурыКоличество");
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиШтрихкодыНоменклатуры", ЗаголовокГиперссылки);
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиСоставНабора", СтруктураВидимостиЭлементов) Тогда 
		Количество = Выборки[2].Выбрать().Количество();
		Если Количество <> 0 Тогда
			ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Состав набора'") + " (" + Количество + ")",,,,"СоставНабора");
			СтруктураВидимостиЭлементов.Вставить("ГиперссылкаПерейтиСоставНабораВнимание", Ложь);
		Иначе
			ВидимостьПредупреждения = Выборки[3].Выбрать().Количество() = 0;
			ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(Новый ФорматированнаяСтрока(НСтр("ru = 'Настроить набор'"),,,,"НастроитьНабор"),
				?(ВидимостьПредупреждения,Новый ФорматированнаяСтрока(КартинкаПредупреждение),""));
			СтруктураВидимостиЭлементов.Вставить("ГиперссылкаПерейтиСоставНабораВнимание", ВидимостьПредупреждения);
		КонецЕсли;
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиВариантыКомплектации", ЗаголовокГиперссылки);
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиСоставНабора", ЗаголовокГиперссылки);
	ИначеЕсли РазделВиден("ГиперссылкаПерейтиВариантыКомплектации", СтруктураВидимостиЭлементов) Тогда	
		Количество = Выборки[3].Выбрать().Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Варианты комплектации'") + " (" + Количество + ")",,,,"ВариантыКомплектации");
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиВариантыКомплектации", ЗаголовокГиперссылки);
		СтруктураВидимостиЭлементов.Вставить("ГиперссылкаПерейтиСоставНабораВнимание", Ложь);
	Иначе
		СтруктураВидимостиЭлементов.Вставить("ГиперссылкаПерейтиСоставНабораВнимание", Ложь);
	КонецЕсли;
		
	Если РазделВиден("ГиперссылкаПерейтиХарактеристикиНоменклатуры", СтруктураВидимостиЭлементов) Тогда
		КоличествоХарактеристик = Выборки[4].Выбрать().Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Список'") + " (" + КоличествоХарактеристик + ")",,,,"ХарактеристикиНоменклатуры");
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиХарактеристикиНоменклатуры", ЗаголовокГиперссылки);
	Иначе
		КоличествоХарактеристик = 0;
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиУпаковкиНоменклатуры", СтруктураВидимостиЭлементов) 
			Или РазделВиден("ГиперссылкаПерейтиУпаковкиНабора", СтруктураВидимостиЭлементов) Тогда 
		Количество = Выборки[5].Выбрать().Количество();
		Если Количество <> 0 Тогда 
			ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Список'") + " (" + Количество + ")",,,,"УпаковкиНоменклатуры");
			СтруктураВидимостиЭлементов.Вставить("ГиперссылкаПерейтиУпаковкиНоменклатурыВнимание", Ложь);
		Иначе
			ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Список'") + " (" + Количество + ")",,,,"УпаковкиНоменклатуры"));
			СтруктураВидимостиЭлементов.Вставить("ГиперссылкаПерейтиУпаковкиНоменклатурыВнимание", 
				Объект.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры);
		КонецЕсли;
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиУпаковкиНоменклатуры", ЗаголовокГиперссылки);
		Если Количество <> 0 Тогда 
			ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Список'") + " (" + Количество + ")",,,,"УпаковкиНабора");
			СтруктураВидимостиЭлементов.Вставить("ГиперссылкаПерейтиУпаковкиНабораВнимание", Ложь);
		Иначе
			ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Список'") + " (" + Количество + ")",,,,"УпаковкиНабора"));
			СтруктураВидимостиЭлементов.Вставить("ГиперссылкаПерейтиУпаковкиНабораВнимание", 
				Объект.НаборУпаковок <> Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры);
		КонецЕсли;
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиУпаковкиНабора", ЗаголовокГиперссылки);
	Иначе
		СтруктураВидимостиЭлементов.Вставить("ГиперссылкаПерейтиУпаковкиНоменклатурыВнимание", Ложь);
		СтруктураВидимостиЭлементов.Вставить("ГиперссылкаПерейтиУпаковкиНабораВнимание", Ложь);
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиСертификатыНоменклатуры", СтруктураВидимостиЭлементов) Тогда
		Количество = Выборки[6].Выбрать().Количество();
		Если Количество <> 0 Тогда 
			ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Список'") + " (" + Количество + ")",,,,"СертификатыНоменклатуры");
			СтруктураВидимостиЭлементов.Вставить("ГиперссылкаПерейтиСертификатыНоменклатурыВнимание", Ложь);
		Иначе
			ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Список'") + " (" + Количество + ")",,,,"СертификатыНоменклатуры"));
			СтруктураВидимостиЭлементов.Вставить("ГиперссылкаПерейтиСертификатыНоменклатурыВнимание", Истина);
		КонецЕсли;
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиСертификатыНоменклатуры", ЗаголовокГиперссылки);
	Иначе 
		СтруктураВидимостиЭлементов.Вставить("ГиперссылкаПерейтиСертификатыНоменклатурыВнимание", Ложь);
	КонецЕсли;
		
	Если РазделВиден("ГиперссылкаПерейтиДрагоценныеМатериалы", СтруктураВидимостиЭлементов) Тогда
		Количество = Объект.ДрагоценныеМатериалы.Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Содержание драгоценных материалов'") 
																+ " (" + Количество + ")",,,,"ДрагоценныеМатериалы");
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиДрагоценныеМатериалы", ЗаголовокГиперссылки);
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиФайлы", СтруктураВидимостиЭлементов) Тогда
		Количество = Выборки[7].Выбрать().Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Файлы'") + " (" + Количество + ")",,,,"Файлы");
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиФайлы", ЗаголовокГиперссылки);		
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиСегменты", СтруктураВидимостиЭлементов) Тогда
		Сегменты = Выборки[8].Выгрузить().ВыгрузитьКолонку("Сегмент");
	
		ЕстьДинамическиеСегменты = Выборки[9].Выбрать().Следующий();
		ТекстДинамическиеСегменты = ?(ЕстьДинамическиеСегменты, НСтр("ru = ', без учета формируемых динамически'"), "");
			
		Количество = Сегменты.Количество();
		Если Количество = 1 Тогда
			ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Сегмент'") + " " + Сегменты[0] + ТекстДинамическиеСегменты,,,,"Сегменты");
		Иначе
			ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Сегменты'") + " (" + Количество + ТекстДинамическиеСегменты + ")",,,,"Сегменты");
		КонецЕсли;
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиСегменты", ЗаголовокГиперссылки);
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиСоглашения", СтруктураВидимостиЭлементов) Тогда
		
		ТаблицаПоСоглашениям			= ?(ИспользуютсяХарактеристики,
											Выборки[13].Выгрузить(),
											Выборки[12].Выгрузить());
		КоличествоСоглашений			= ?(ТаблицаПоСоглашениям.Количество() > 0,
											ТаблицаПоСоглашениям[0].КоличествоСоглашений,
											0);
		ЕстьСоглашенияПоНоменклатуре	= ?(ТаблицаПоСоглашениям.Количество() > 0,
											ТаблицаПоСоглашениям[0].ЕстьСоглашенияПоНоменклатуре,
											Ложь);
		
		Если ПравоДоступа("Добавление", Метаданные.Справочники.СоглашенияСПоставщиками) Тогда
			
			Если КоличествоСоглашений = 0
				И Не ЕстьСоглашенияПоНоменклатуре Тогда
				
				Если ИспользуютсяХарактеристики Тогда
					СтрокаЗаголовкаГиперссылки	= НСтр("ru = 'Характеристики не выбраны в соглашениях'");
					ГиперссылкаСоглашения		= "СписокСоглашенийПоХарактеристикам";
				Иначе
					СтрокаЗаголовкаГиперссылки	= НСтр("ru = 'Создать соглашение'");
					ГиперссылкаСоглашения		= "СоглашенияСоздать";
				КонецЕсли;
				
			Иначе
				
				Если ЕстьСоглашенияПоНоменклатуре Тогда
					
					СтрокаСоглашений = СтрокаСЧислом(";%1 соглашении;;%1 соглашениях;%1 соглашениях;%1 соглашениях",
													КоличествоСоглашений,
													ВидЧисловогоЗначения.Количественное,
													"L=ru");
					
					СтрокаЗаголовкаГиперссылки = НСтр("ru = 'Выбрана в %КоличествоСоглашений%'");
					СтрокаЗаголовкаГиперссылки = СтрЗаменить(СтрокаЗаголовкаГиперссылки, "%КоличествоСоглашений%", СтрокаСоглашений);
				Иначе
					СтрокаЗаголовкаГиперссылки = НСтр("ru = 'Выбрать в существующем соглашении'");
				КонецЕсли;
				
				Если ИспользуютсяХарактеристики Тогда
					ГиперссылкаСоглашения = "СписокСоглашенийПоХарактеристикам";
				Иначе
					ГиперссылкаСоглашения = ?(ЕстьСоглашенияПоНоменклатуре, "СписокСоглашенийПоНоменклатуре", "СоглашенияВыбрать");
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если КоличествоСоглашений = 0 Тогда
				Если ИспользуютсяХарактеристики Тогда
					СтрокаЗаголовкаГиперссылки	= НСтр("ru = 'Характеристики не выбраны в соглашениях'");
				Иначе
					СтрокаЗаголовкаГиперссылки	= НСтр("ru = 'Не выбрана в соглашениях'");
				КонецЕсли;
			Иначе
				СтрокаСоглашений = СтрокаСЧислом(";%1 соглашении;;%1 соглашениях;%1 соглашениях;%1 соглашениях",
												КоличествоСоглашений,
												ВидЧисловогоЗначения.Количественное,
												"L=ru");
				
				СтрокаЗаголовкаГиперссылки = НСтр("ru = 'Выбрана в %КоличествоСоглашений%'");
				СтрокаЗаголовкаГиперссылки = СтрЗаменить(СтрокаЗаголовкаГиперссылки, "%КоличествоСоглашений%", СтрокаСоглашений);
			КонецЕсли;
			
			Если ИспользуютсяХарактеристики Тогда
				ГиперссылкаСоглашения = "СписокСоглашенийПоХарактеристикам";
			Иначе
				ГиперссылкаСоглашения = "СписокСоглашенийПоНоменклатуре";
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(СтрокаЗаголовкаГиперссылки, , , , ГиперссылкаСоглашения);
		
		ЗаголовокСоглашения = Новый Структура;
		ЗаголовокСоглашения.Вставить("Заголовок",	ЗаголовокГиперссылки);
		ЗаголовокСоглашения.Вставить("Гиперссылка",	ГиперссылкаСоглашения);
		
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиСоглашения", ЗаголовокСоглашения);
		
	КонецЕсли;
	
	#КонецОбласти
	
	Возврат СтруктураЗаголовков;

КонецФункции

Функция СтруктураОписанияРеквизитовВТаблицу(СтруктураОписаний) Экспорт
	Таблица = Новый ТаблицаЗначений;
	ПерваяСтрока = Истина;
	
	Для Каждого ОписаниеРеквизита Из СтруктураОписаний Цикл
		
		Если ПерваяСтрока Тогда
			Для Каждого Свойство Из ОписаниеРеквизита.Значение Цикл
				Если ТипЗнч(Свойство.Значение) = Тип("Строка") Тогда
					Таблица.Колонки.Добавить(Свойство.Ключ,
						Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(255, ДопустимаяДлина.Переменная)));
				Иначе
					МассивТипов = Новый Массив;
					МассивТипов.Добавить(ТипЗнч(Свойство.Значение));
					Таблица.Колонки.Добавить(Свойство.Ключ,Новый ОписаниеТипов(МассивТипов));
				КонецЕсли;
			КонецЦикла;
			ПерваяСтрока = Ложь;
		КонецЕсли;
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Имя = ОписаниеРеквизита.Ключ;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеРеквизита.Значение);
	КонецЦикла;
	
	Возврат Таблица;
КонецФункции

Функция НепроверяемыеРеквизиты(Объект, РеквизитыВидаНоменклатуры = Неопределено) Экспорт
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если РеквизитыВидаНоменклатуры = Неопределено Тогда
		РеквизитыВидаНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидНоменклатуры,
										"ШаблонРабочегоНаименованияНоменклатуры");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
		Если ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.ШаблонРабочегоНаименованияНоменклатуры) Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Наименование");
		КонецЕсли;
	КонецЕсли;
	
	Если Не Объект.ИспользоватьИндивидуальныйШаблонЦенника Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ШаблонЦенника");
	КонецЕсли;
	
	Если Не Объект.ИспользоватьИндивидуальныйШаблонЭтикетки Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ШаблонЭтикетки");
	КонецЕсли;
	
	Если Не Объект.ИспользоватьУпаковки Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НаборУпаковок");
	КонецЕсли;
	
	Если Не Справочники.ГруппыДоступаНоменклатуры.ИспользуютсяГруппыДоступа() Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ГруппаДоступа");
	КонецЕсли;
	
	Если Не Объект.ПродукцияМаркируемаяДляГИСМ Тогда
		МассивНепроверяемыхРеквизитов.Добавить("КодТНВЭД");
	КонецЕсли;
	
	Если Не Объект.КиЗГИСМ Тогда
		МассивНепроверяемыхРеквизитов.Добавить("КиЗГИСМВид");
		МассивНепроверяемыхРеквизитов.Добавить("КиЗГИСМСпособВыпускаВОборот");
		МассивНепроверяемыхРеквизитов.Добавить("КиЗГИСМGTIN");
		МассивНепроверяемыхРеквизитов.Добавить("КиЗГИСМРазмер");
	КонецЕсли;
	
	Если Не Объект.ПоставляетсяВМногооборотнойТаре Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НоменклатураМногооборотнаяТара");
		МассивНепроверяемыхРеквизитов.Добавить("ХарактеристикаМногооборотнаяТара");
	ИначеЕсли Не Справочники.Номенклатура.ХарактеристикиИспользуются(Объект.НоменклатураМногооборотнаяТара) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ХарактеристикаМногооборотнаяТара");
	КонецЕсли;
	
	Если Объект.ОсобенностьУчета <> Перечисления.ОсобенностиУчетаНоменклатуры.Партнером
		И Объект.ОсобенностьУчета <> Перечисления.ОсобенностиУчетаНоменклатуры.ОрганизациейПоАгентскойСхеме Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Принципал");
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидНоменклатуры)
		И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидНоменклатуры, "ИспользоватьСрокГодностиСерии") Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ЕдиницаИзмеренияСрокаГодности");
		
	КонецЕсли;
	
	ДобавитьВНепроверяемыеРеквизитыМеры(Объект, МассивНепроверяемыхРеквизитов, "Вес");
	ДобавитьВНепроверяемыеРеквизитыМеры(Объект, МассивНепроверяемыхРеквизитов, "Объем");
	ДобавитьВНепроверяемыеРеквизитыМеры(Объект, МассивНепроверяемыхРеквизитов, "Площадь");
	ДобавитьВНепроверяемыеРеквизитыМеры(Объект, МассивНепроверяемыхРеквизитов, "Длина");
	
	
	Возврат МассивНепроверяемыхРеквизитов;
	
КонецФункции

Процедура ДобавитьВНепроверяемыеРеквизитыМеры(Объект, МассивНепроверяемыхРеквизитов, Мера)
	
	Если Не Объект[Мера + "Использовать"] Тогда
		МассивНепроверяемыхРеквизитов.Добавить(Мера + "Числитель");	
		МассивНепроверяемыхРеквизитов.Добавить(Мера + "Знаменатель");	
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.Номенклатура.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.4.12.48";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f27d529b-c0a0-4960-a056-8e61c97e4bd5");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.Номенклатура.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Единица измерения ТН ВЭД"" в соответствии с классификатором ТН ВЭД'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.КлассификаторТНВЭД.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.Номенклатура.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.Номенклатура.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.Номенклатура.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.КлассификаторТНВЭД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.УдалитьСоответствиеЗначенийРеквизитовБизнесСеть.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.УдалитьСоответствиеРеквизитовБизнесСеть.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеОбъекта.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК ДанныеОбъекта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторТНВЭД КАК ДанныеКлассификатора
	|		ПО ДанныеОбъекта.КодТНВЭД = ДанныеКлассификатора.Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта		= "Справочник.Номенклатура";
	МенеджерВременныхТаблиц	= Новый МенеджерВременныхТаблиц;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметры.ДополнительныеИсточникиДанных.Вставить("КодТНВЭД");
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь,
																						ПолноеИмяОбъекта,
																						МенеджерВременныхТаблиц,
																						ДополнительныеПараметры);
	
	Если Не Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		
		Возврат;
	КонецЕсли;
	
	Если Не Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеОбъекта.Ссылка					КАК Ссылка,
	|	ДанныеНоменклатуры.ВерсияДанных			КАК ВерсияДанных,
	|	ДанныеНоменклатуры.КодТНВЭД				КАК КодТНВЭД,
	|	ДанныеКлассификатора.ЕдиницаИзмерения	КАК ЕдиницаИзмерения
	|ИЗ
	|	&ВТДанныеДляОбработки КАК ДанныеОбъекта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ДанныеНоменклатуры
	|		ПО ДанныеОбъекта.Ссылка = ДанныеНоменклатуры.Ссылка
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторТНВЭД КАК ДанныеКлассификатора
	|		ПО ДанныеНоменклатуры.КодТНВЭД = ДанныеКлассификатора.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВТДанныеДляОбработки", Результат.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	РезультатЗапроса	= Запрос.Выполнить();
	Выборка				= РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			ЭлементБлокировки = Блокировка.Добавить("Справочник.КлассификаторТНВЭД");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.КодТНВЭД);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			
			Блокировка.Заблокировать();
			
			ДанныеОбъекта = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(Выборка.Ссылка,
																					Выборка.ВерсияДанных,
																					Параметры.Очередь);
			
			Если ДанныеОбъекта = Неопределено Тогда
				ЗафиксироватьТранзакцию();
				
				Продолжить;
			КонецЕсли;
			
			ОбъектИзменен = Ложь;
			
			Если Не ЗначениеЗаполнено(ДанныеОбъекта.ЕдиницаИзмеренияТНВЭД)
				Или ДанныеОбъекта.ЕдиницаИзмеренияТНВЭД <> Выборка.ЕдиницаИзмерения Тогда
				ОбъектИзменен = Истина;
				
				ДанныеОбъекта.ЕдиницаИзмеренияТНВЭД = Выборка.ЕдиницаИзмерения;
			КонецЕсли;
			
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДанныеОбъекта);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь,
																						ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
