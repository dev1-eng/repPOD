
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	НоменклатураСервер.НастроитьОтборВПараметрахПолитикУчетаСерий(Параметры);
	
	ГруппаИли = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Список.Отбор.Элементы,
		"ГруппаИли",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИли,
			"Предопределенный",
			Истина,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	ГруппаИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаИли,
		"ГруппаИ",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	Для Каждого КлючЗначение из Параметры.Отбор Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИ,
			КлючЗначение.Ключ,
			КлючЗначение.Значение,
			?(ТипЗнч(КлючЗначение.Значение) = Тип("Массив")
				или ТипЗнч(КлючЗначение.Значение) = Тип("ФиксированныйМассив"), 
					ВидСравненияКомпоновкиДанных.ВСписке, 
					ВидСравненияКомпоновкиДанных.Равно),
				,
				Истина,
				РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	КонецЦикла;
	
	Параметры.Отбор.Очистить();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	ЭтоВыборОбщейДляВидаНоменклатурыПолитики = Параметры.Свойство("ВидНоменклатуры");
	
	ИспользоватьНеотфактурованныеПоставки = ПолучитьФункциональнуюОпцию("ИспользоватьНеотфактурованныеПоставки");
	ИспользоватьТоварыВПутиОтПоставщиков  = ПолучитьФункциональнуюОпцию("ИспользоватьТоварыВПутиОтПоставщиков");
	ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи = Ложь;
	
	Если ИспользоватьНеотфактурованныеПоставки
		Или ИспользоватьТоварыВПутиОтПоставщиков
		Или ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи Тогда
		
		СформироватьНадписьРасшифровкаОтбора();
		
	КонецЕсли;
	
	Элементы.ДекорацияРасшифровкаОтбора.Видимость = (ИспользоватьНеотфактурованныеПоставки
														Или ИспользоватьТоварыВПутиОтПоставщиков
														Или ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи)
													И ЭтоВыборОбщейДляВидаНоменклатурыПолитики
													И ЗначениеЗаполнено(Параметры.ВидНоменклатуры);
	
	Элементы.ДекорацияОграниченияВыбораОбщейПолитикиВЕТИС.Видимость = ЭтоВыборОбщейДляВидаНоменклатурыПолитики
		И (Параметры.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС
			Или Параметры.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС)
		И (СкладыСервер.ЕстьОрдерныйНаОтгрузкуСклад()
			Или СкладыСервер.ЕстьОрдерныйНаПоступлениеСклад());
	Если Элементы.ДекорацияОграниченияВыбораОбщейПолитикиВЕТИС.Видимость Тогда
		Если СкладыСервер.ЕстьСкладыБезОрдернойСхемыПриОтраженииИзлишковНедостач() Тогда	
			Элементы.ДекорацияОграниченияВыбораОбщейПолитикиВЕТИС.Заголовок =
				НСтр("ru = 'Есть склады, для которых используется ордерная схема при отгрузке или поступлении, поэтому подконтрольной продукции ВетИС единой политикой учета серий может быть только политика, предусматривающая учет себестоимости по сериям. Но в базе не все склады ордерные на отражение излишков, недостач и порчи, что не дает сделать такую политику единой для всех складов. Выберите политику ""Серии не используются"" и проводите настройку для каждого склада.'");	
		Иначе
			Элементы.ДекорацияОграниченияВыбораОбщейПолитикиВЕТИС.Заголовок =
				НСтр("ru = 'Есть склады, для которых используется ордерная схема при отгрузке или поступлении, поэтому подконтрольной продукции ВетИС единой политикой учета серий может быть только политика, предусматривающая учет себестоимости по сериям.'");
		КонецЕсли;
	КонецЕсли;		
			
	Элементы.ДекорацияОграниченияВыбораОбщейПолитикиНеВсеСкладыОрдерныеНаИзлишкиНедостачи.Видимость 
		= Не Элементы.ДекорацияОграниченияВыбораОбщейПолитикиВЕТИС.Видимость
		И ЭтоВыборОбщейДляВидаНоменклатурыПолитики
		И Не Параметры.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияМаркируемаяДляГИСМ
		И СкладыСервер.ЕстьСкладыБезОрдернойСхемыПриОтраженииИзлишковНедостач();
		

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияРасшифровкаОтбораОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылка = "ОтключитьОтбор" Тогда 
		МассивЭлементов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Список.Отбор,,"ГруппаИ");
		
		ГруппаИ = МассивЭлементов[0];
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИ,
			"УчетСерийВНеотфактурованныхПоставкахТоваров",
			,
			,
			,
			Ложь,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИ,
			"УчетТоваровВПутиОтПоставщикаПоСериям",
			,
			,
			,
			Ложь,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИ,
			"УчетСерийВПереданныхНаХранениеТоварах",
			,
			,
			,
			Ложь,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		Элементы.ДекорацияРасшифровкаОтбора.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СформироватьНадписьРасшифровкаОтбора()
	
	МассивТекстов = Новый Массив;
	МассивТекстов.Добавить(НСтр("ru = 'Выбираемая политика учета серий должна иметь те же настройки учета серий при'"));
	
	МассивПолитикУчетаСерий = Новый Массив;
	
	Если ИспользоватьТоварыВПутиОтПоставщиков Тогда
		МассивПолитикУчетаСерий.Добавить(НСтр("ru = 'учете товаров в пути от поставщика'"));
	КонецЕсли;
	
	Если ИспользоватьНеотфактурованныеПоставки Тогда
		МассивПолитикУчетаСерий.Добавить(НСтр("ru = 'неотфактурованных поставках'"));
	КонецЕсли;
	
	
	ТекстПолитикУчетаСерий = Символы.НПП + МассивПолитикУчетаСерий[0];
	
	Если МассивПолитикУчетаСерий.Количество() > 2 Тогда
		Для НомерЭлемента = 1 По МассивПолитикУчетаСерий.ВГраница() Цикл
			Если НомерЭлемента < МассивПолитикУчетаСерий.ВГраница() Тогда
				ТекстПолитикУчетаСерий = "," + Символы.НПП + МассивПолитикУчетаСерий[НомерЭлемента];
			Иначе
				ТекстПолитикУчетаСерий = Символы.НПП + НСтр("ru = 'и'") + Символы.НПП + МассивПолитикУчетаСерий[НомерЭлемента]
											+ ".";
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли МассивПолитикУчетаСерий.Количество() = 2 Тогда
		ТекстПолитикУчетаСерий = ТекстПолитикУчетаСерий + Символы.НПП + НСтр("ru = 'и'") + Символы.НПП
									+ МассивПолитикУчетаСерий[1];
		
	КонецЕсли;
	
	МассивТекстов.Добавить(ТекстПолитикУчетаСерий);
	МассивТекстов.Добавить(НСтр("ru = 'Есть возможность'"));
	МассивТекстов.Добавить(Символы.НПП);
	МассивТекстов.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'отключить отбор'"), , , , "ОтключитьОтбор"));
	МассивТекстов.Добавить(Символы.НПП);
	МассивТекстов.Добавить(НСтр("ru = 'и выбрать политику с отличными настройками, но это может привести к проблемам в учете.'"));
	
КонецПроцедуры

#КонецОбласти
