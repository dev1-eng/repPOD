#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция определяет группу финансового учета по умолчанию.
//
// Возвращает группу финансового учета, если найден один элемент справочника.
// Возвращает ПустуюСсылку в противном случае.
//
// Параметры:
//	ПорядокОплаты - ПеречислениеСсылка.ПорядокОплатыПоСоглашениям - порядок оплаты, для которого определяется группа финансового учета.
//
// Возвращаемое значение:
//	ГруппаФинансовогоУчета - СправочникСсылка.ГруппыФинансовогоУчетаРасчетов - группа фин. учета по умолчанию.
//
Функция ПолучитьГруппуФинансовогоУчетаПоУмолчанию(ПорядокОплаты, ХозяйственнаяОперация = Неопределено, ГФУПолучателя = Ложь) Экспорт
	
	СтруктураОтбора = Новый Структура("ПорядокОплаты", ПорядокОплаты);
	Если ЗначениеЗаполнено(ХозяйственнаяОперация) Тогда
		СтруктураОтбора.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
	КонецЕсли;
	Если ГФУПолучателя Тогда
		СтруктураОтбора.Вставить("ГФУПолучателя", Истина);
	КонецЕсли;
	
	ПреобразоватьОтборПараметровВыбора(СтруктураОтбора);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДанныеСправочника.Ссылка КАК ГруппаФинансовогоУчета
	|ИЗ
	|	Справочник.ГруппыФинансовогоУчетаРасчетов КАК ДанныеСправочника
	|ГДЕ
	|	НЕ ДанныеСправочника.ПометкаУдаления
	|	И НЕ ДанныеСправочника.ЭтоГруппа
	|	И &ДопУсловияОтбора
	|");
	
	ДопУсловияОтбора = "ИСТИНА";
	ШаблонЭлементаОтбора = "И ДанныеСправочника.%1 = &%1";
	Для каждого ЭлементОтбора Из СтруктураОтбора Цикл
		ДопУсловияОтбора = ДопУсловияОтбора + Символы.ПС + Символы.Таб + СтрШаблон(ШаблонЭлементаОтбора, ЭлементОтбора.Ключ);
		Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
	КонецЦикла;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопУсловияОтбора", ДопУсловияОтбора);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
		ГруппаФинансовогоУчета = Выборка.ГруппаФинансовогоУчета;
	Иначе
		ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаРасчетов.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ГруппаФинансовогоУчета;

КонецФункции

// Функция определяет реквизиты выбранной группы финансового учета.
//
// Параметры:
//  ГруппаФинансовогоУчета - СправочникСсылка.ГруппыФинансовогоУчетаРасчетов - Ссылка на группу финансового учета.
//
// Возвращаемое значение:
//	Структура - реквизиты группы финансового учета.
//
Функция ПолучитьРеквизитыГруппыФинансовогоУчета(ГруппаФинансовогоУчета) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеСправочника.ПорядокОплаты КАК ПорядокОплаты
	|ИЗ
	|	Справочник.ГруппыФинансовогоУчетаРасчетов КАК ДанныеСправочника
	|ГДЕ
	|	ДанныеСправочника.Ссылка = &ГруппаФинансовогоУчета
	|");
	
	Запрос.УстановитьПараметр("ГруппаФинансовогоУчета", ГруппаФинансовогоУчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПорядокОплаты = Выборка.ПорядокОплаты;
	Иначе
		ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.ПустаяСсылка();
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("ПорядокОплаты", ПорядокОплаты);
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

// Процедура преобразует отбор переданный в параметрах выбора в корректный отбор в рамках текущей ГФУ^
//		Если ПорядокОплаты не заполнен - отбор по данному порядку оплаты очищается;
//		Если передано соглашение или договор, то порядок оплаты берется из данных соответствующего значения;
//		Если передана хозяйственная операция, то по соответствию подбирается правильный тип расчетов для отбора.
//
//	Входные параметры:
//		Отбор - структура (см. Параметры.Отбор в обработке получения данных выбора).
//
Процедура ПреобразоватьОтборПараметровВыбора(Отбор) Экспорт
	
	#Область ПорядокОплаты
	Если Отбор.Свойство("ПорядокОплаты") И Не ЗначениеЗаполнено(Отбор.ПорядокОплаты) Тогда
		Отбор.Удалить("ПорядокОплаты");
	КонецЕсли;
	
	ПорядокОплаты = Неопределено;
	Если Отбор.Свойство("Договор") И ЗначениеЗаполнено(Отбор.Договор) Тогда
		ПорядокОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Отбор.Договор, "ПорядокОплаты");		
	ИначеЕсли Отбор.Свойство("Соглашение") И ЗначениеЗаполнено(Отбор.Соглашение) Тогда
		ПорядокОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Отбор.Соглашение, "ПорядокОплаты");		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПорядокОплаты) Тогда
		Отбор.Вставить("ПорядокОплаты", ПорядокОплаты);
	КонецЕсли;
	#КонецОбласти
	
	#Область Расчеты
	
	Если Отбор.Свойство("ХозяйственнаяОперация") И ЗначениеЗаполнено(Отбор.ХозяйственнаяОперация) Тогда
		
		Операции = Перечисления.ХозяйственныеОперации;
		СоответствиеХОиРасчетов = Новый Соответствие;
		
		// Для интеркомпани вид расчетов выбирается еще и в зависимости от того, это ГФУ получателя или поставщика.
		ГФУПолучателя = Отбор.Свойство("ГФУПолучателя") И Отбор.ГФУПолучателя;
		
		#Область ХозяйственныеОперацииПоставщиков
		СоответствиеХОиРасчетов.Вставить(Операции.ЗакупкаУПоставщика, "РасчетыСПоставщиками");
		СоответствиеХОиРасчетов.Вставить(Операции.ЗакупкаУПоставщикаНеотфактурованнаяПоставка, "РасчетыСПоставщиками");
		СоответствиеХОиРасчетов.Вставить(Операции.ЗакупкаУПоставщикаПоступлениеИзТоваровВПути, "РасчетыСПоставщиками");
		СоответствиеХОиРасчетов.Вставить(Операции.ЗакупкаУПоставщикаРеглУчет, "РасчетыСПоставщиками");
		СоответствиеХОиРасчетов.Вставить(Операции.ЗакупкаУПоставщикаТоварыВПути, "РасчетыСПоставщиками");
		СоответствиеХОиРасчетов.Вставить(Операции.ЗакупкаУПоставщикаФактуровкаПоставки, "РасчетыСПоставщиками");
		
		СоответствиеХОиРасчетов.Вставить(Операции.ЗакупкаПоИмпорту, "РасчетыСПоставщиками");
		СоответствиеХОиРасчетов.Вставить(Операции.ЗакупкаПоИмпортуПоступлениеИзТоваровВПути, "РасчетыСПоставщиками");
		СоответствиеХОиРасчетов.Вставить(Операции.ЗакупкаПоИмпортуТоварыВПути, "РасчетыСПоставщиками");
		
		СоответствиеХОиРасчетов.Вставить(Операции.ЗакупкаВСтранахЕАЭС, "РасчетыСПоставщиками");
		СоответствиеХОиРасчетов.Вставить(Операции.ЗакупкаВСтранахЕАЭСНеотфактурованнаяПоставка, "РасчетыСПоставщиками");
		СоответствиеХОиРасчетов.Вставить(Операции.ЗакупкаВСтранахЕАЭСПоступлениеИзТоваровВПути, "РасчетыСПоставщиками");
		СоответствиеХОиРасчетов.Вставить(Операции.ЗакупкаВСтранахЕАЭСТоварыВПути, "РасчетыСПоставщиками");
		СоответствиеХОиРасчетов.Вставить(Операции.ЗакупкаВСтранахЕАЭСФактуровкаПоставки, "РасчетыСПоставщиками");
		
		СоответствиеХОиРасчетов.Вставить(Операции.ПроизводствоУПереработчика, "РасчетыСПоставщиками");
		СоответствиеХОиРасчетов.Вставить(Операции.ПриемНаХранениеСПравомПродажи, "РасчетыСПоставщиками");
		СоответствиеХОиРасчетов.Вставить(Операции.ВозвратТоваровПоставщику, "РасчетыСПоставщиками");
		#КонецОбласти
		
		#Область ХозяйственныеОперацииКлиентов
		СоответствиеХОиРасчетов.Вставить(Операции.РеализацияКлиенту, "РасчетыСКлиентами");
		СоответствиеХОиРасчетов.Вставить(Операции.ПроизводствоИзДавальческогоСырья, "РасчетыСКлиентами");
		СоответствиеХОиРасчетов.Вставить(Операции.ВозвратТоваровОтКлиента, "РасчетыСКлиентами");
		СоответствиеХОиРасчетов.Вставить(Операции.ВозвратОтРозничногоПокупателя, "РасчетыСКлиентами");
		СоответствиеХОиРасчетов.Вставить(Операции.РеализацияБезПереходаПраваСобственности, "РасчетыСКлиентами");
		СоответствиеХОиРасчетов.Вставить(Операции.ПередачаНаХранениеСПравомПродажи, "РасчетыСКлиентами");
		#КонецОбласти
		
		#Область ХозяйственныеОперацииПлатежей
		СоответствиеХОиРасчетов.Вставить(Операции.ПоступлениеОплатыОтКлиента, "РасчетыСКлиентами,РасчетыСКомиссионерами");
		СоответствиеХОиРасчетов.Вставить(Операции.ПоступлениеДенежныхСредствИзДругойОрганизации, "РасчетыСКлиентами,РасчетыСКомиссионерами");
		СоответствиеХОиРасчетов.Вставить(Операции.ВозвратДенежныхСредствОтПоставщика, "РасчетыСПоставщиками,РасчетыСКомитентами");
		СоответствиеХОиРасчетов.Вставить(Операции.ВозвратДенежныхСредствОтДругойОрганизации, "РасчетыСПоставщиками,РасчетыСКомитентами");
		СоответствиеХОиРасчетов.Вставить(Операции.ОплатаПоставщику, "РасчетыСПоставщиками,РасчетыСКомитентами");
		СоответствиеХОиРасчетов.Вставить(Операции.ОплатаДенежныхСредствВДругуюОрганизацию, "РасчетыСПоставщиками,РасчетыСКомитентами");
		СоответствиеХОиРасчетов.Вставить(Операции.ВозвратОплатыКлиенту, "РасчетыСКлиентами,РасчетыСКомиссионерами");
		СоответствиеХОиРасчетов.Вставить(Операции.ВозвратДенежныхСредствВДругуюОрганизацию, "РасчетыСКлиентами,РасчетыСКомиссионерами");
		СоответствиеХОиРасчетов.Вставить(Операции.ПеречислениеВБюджет, "РасчетыСПоставщиками");
		СоответствиеХОиРасчетов.Вставить(Операции.ПеречислениеТаможне, "РасчетыСПоставщиками");
		СоответствиеХОиРасчетов.Вставить(Операции.ПеречислениеНаДепозиты, "РасчетыСДебиторами");
		СоответствиеХОиРасчетов.Вставить(Операции.ОплатаПоКредитам, "РасчетыСКредиторами");
		СоответствиеХОиРасчетов.Вставить(Операции.ОплатаЛизингодателю, "РасчетыСЛизингодателями");
		СоответствиеХОиРасчетов.Вставить(Операции.ВыдачаЗаймов, "РасчетыСКредиторами");
		#КонецОбласти
		
		#Область ХозяйственныеОперацииОстальные
		СоответствиеХОиРасчетов.Вставить(Операции.ПередачаНаКомиссию, "РасчетыСКомиссионерами");
		СоответствиеХОиРасчетов.Вставить(Операции.ПриемНаКомиссию, "РасчетыСКомитентами");
		СоответствиеХОиРасчетов.Вставить(Операции.ОказаниеАгентскихУслуг, "РасчетыСКомитентами");
		СоответствиеХОиРасчетов.Вставить(Операции.ВозвратТоваровМеждуОрганизациями, ?(ГФУПолучателя, "РасчетыСПоставщиками", "РасчетыСКлиентами"));
		СоответствиеХОиРасчетов.Вставить(Операции.РеализацияТоваровВДругуюОрганизацию, ?(ГФУПолучателя, "РасчетыСПоставщиками", "РасчетыСКлиентами"));
		СоответствиеХОиРасчетов.Вставить(Операции.ПередачаНаКомиссиюВДругуюОрганизацию, ?(ГФУПолучателя, "РасчетыСКомитентами", "РасчетыСКомиссионерами"));
		СоответствиеХОиРасчетов.Вставить(Операции.ЗакупкаУДругойОрганизации, ?(ГФУПолучателя, "РасчетыСПоставщиками", "РасчетыСКлиентами"));
		#КонецОбласти
		
		// Для договоров кредитов/депозитов и между организациями вместо ХО передаем характер или тип договора соответственно:
		СоответствиеХОиРасчетов.Вставить(Перечисления.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм, "РасчетыСКредиторами");
		СоответствиеХОиРасчетов.Вставить(Перечисления.ХарактерыДоговоровФинансовыхИнструментов.ЗаймВыданный, "РасчетыСДебиторами");
		СоответствиеХОиРасчетов.Вставить(Перечисления.ХарактерыДоговоровФинансовыхИнструментов.Депозит, "РасчетыСДебиторами");
		СоответствиеХОиРасчетов.Вставить(Перечисления.ТипыДоговоровМеждуОрганизациями.КупляПродажа, ?(ГФУПолучателя, "РасчетыСПоставщиками", "РасчетыСКлиентами"));
		СоответствиеХОиРасчетов.Вставить(Перечисления.ТипыДоговоровМеждуОрганизациями.Комиссионный, ?(ГФУПолучателя, "РасчетыСКомитентами", "РасчетыСКомиссионерами"));
	
		ЗначениеРасчетов = СоответствиеХОиРасчетов.Получить(Отбор.ХозяйственнаяОперация);
		Если ЗначениеРасчетов <> Неопределено Тогда
			МассивВозможныхРасчетов = СтрРазделить(ЗначениеРасчетов, ",");
			Если МассивВозможныхРасчетов.Количество() = 1 Тогда
				Отбор.Вставить(МассивВозможныхРасчетов.Получить(0), Истина);
			Иначе
				Для каждого ВидРасчетов Из ВидыРасчетов() Цикл
					Если МассивВозможныхРасчетов.Найти(ВидРасчетов) = Неопределено Тогда
						Отбор.Вставить(ВидРасчетов, Ложь);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Отбор.Удалить("ХозяйственнаяОперация");
		
	КонецЕсли;
	
	Если Отбор.Свойство("ГФУПолучателя") Тогда
		Отбор.Удалить("ГФУПолучателя");
	КонецЕсли;
	
	#КонецОбласти
		
КонецПроцедуры

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ОбщегоНазначенияУТВызовСервера.ОбработкаПолученияДанныхВыбораГруппыФинансовогоУчетаРасчетов(ДанныеВыбора, Параметры, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

#КонецОбласти

Функция ВидыРасчетов() Экспорт
	
	ВидыРасчетов = Новый Массив;
	ВидыРасчетов.Добавить("РасчетыСКлиентами");
	ВидыРасчетов.Добавить("РасчетыСПоставщиками");
	ВидыРасчетов.Добавить("РасчетыСКомиссионерами");
	ВидыРасчетов.Добавить("РасчетыСКомитентами");
	ВидыРасчетов.Добавить("РасчетыСКредиторами");
	ВидыРасчетов.Добавить("РасчетыСДебиторами");
	ВидыРасчетов.Добавить("РасчетыСЛизингодателями");
		
	Возврат ВидыРасчетов;
		
КонецФункции

#КонецОбласти

#КонецЕсли