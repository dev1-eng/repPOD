#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Возвращает параметры таможенной декларации - регистрационный номер и признак того, декларировался ли товар в РФ.
// Порядок получения регистрационного номера таможенной декларации см. в описании функции РегистрационныйНомер(). 
// Если РегистрационныйНомер() вернет пустую строку, будет установлен признак, что товар декларировался не в РФ.
//
// Параметры:
//    НомерТаможеннойДекларации - Строка - номер таможенной декларации или регистрационный номер таможенной декларации.
//
// Возвращаемое значение:
//    Структура 
//      * РегистрационныйНомер - Строка -  регистрационный номер таможенной декларации либо пустая строка, 
//                                         если его не удалось определить.
//      * СтранаВвозаНеРФ      - Булево - признак, что товар декларировался не в РФ.
Функция РегистрационныйНомерИСтранаВвоза(НомерТаможеннойДекларации) Экспорт
	
	СтруктураНомера = РегистрационныйНомер(НомерТаможеннойДекларации);
	
	СтруктураНомера.Вставить("СтранаВвозаНеРФ", НЕ ЗначениеЗаполнено(СтруктураНомера.РегистрационныйНомер));
	
	Возврат СтруктураНомера;
	
КонецФункции

// Возвращает дату принятия декларации на товары.
// Если номер таможенной декларации указан некорректно или декларация была выдана 
// не российским таможенным органом - будет возвращена пустая дата.
//
// Параметры:
//    НомерТаможеннойДекларации - Строка - номер таможенной декларации или регистрационный номер таможенной декларации.
//
// Возвращаемое значение:
//    Дата - дата принятия декларации на товары, зашифрованная во втором разряде
//                                            номера таможенной декларации.
Функция ДатаПринятияДекларацииНаТовары(НомерТаможеннойДекларации) Экспорт
	
	ДатаПринятияДекларацииНаТовары = '00010101';
	
	Если НЕ ЗначениеЗаполнено(НомерТаможеннойДекларации) Тогда
		Возврат ДатаПринятияДекларацииНаТовары;
	КонецЕсли;
	
	СтруктураНомера = РегистрационныйНомер(НомерТаможеннойДекларации);
	
	Если НЕ ЗначениеЗаполнено(СтруктураНомера.РегистрационныйНомер) Тогда
		Возврат ДатаПринятияДекларацииНаТовары;
	КонецЕсли;
	
	МассивТД = СтрРазделить(СтруктураНомера.РегистрационныйНомер, "/");
	РазрядДатаПринятияДекларацииНаТовары = МассивТД[1];
	
	Возврат СтроковыеФункцииКлиентСервер.СтрокаВДату(РазрядДатаПринятияДекларацииНаТовары)
	
КонецФункции

// Инициализирует структуру параметров для передачи данных в обработчик заполнения элемента справочника НомераГТД.
//
// Параметры:
//    НомерТаможеннойДекларации - Строка - номер таможенной декларации или регистрационный номер таможенной декларации.
//    СтранаПроисхождения - Неопределено, СправочникСсылка.СтраныМира - Необязательный, страна происхождения товара по таможенной декларации.
//
// Возвращаемое значение:
//    Структура
//      * Код - Строка - Полный номер грузовой таможенной декларации.
//      * СтранаПроисхождения - СправочникСсылка.СтраныМира - Страна происхождения товара по таможенной декларации.
//      * РегистрационныйНомер - Строка - Номер таможенной декларации.
//      * ЗаполнитьПорядковыйНомерТовараАвтоматически - Булево - Признак, что ПорядковыйНомерТовара будет вычисляться непосредственно из свойства Код.
//      * ПорядковыйНомерТовара - Строка - Порядковый номер товара (значение поля №32 таможенной декларации).
//      * СтранаВвозаНеРФ - Булево - Признак, что товар декларировался не в РФ.
//
Функция ПараметрыДляЗаполненияЭлемента(НомерТаможеннойДекларации, СтранаПроисхождения = Неопределено) Экспорт
	
	СтруктураДанныхДляЗаполнения = Новый Структура("Код", НомерТаможеннойДекларации);
	СтруктураДанныхДляЗаполнения.Вставить("СтранаПроисхождения", ?(ЗначениеЗаполнено(СтранаПроисхождения), СтранаПроисхождения, Справочники.СтраныМира.ПустаяСсылка()));
	СтруктураДанныхДляЗаполнения.Вставить("РегистрационныйНомер", "");
	СтруктураДанныхДляЗаполнения.Вставить("ЗаполнитьПорядковыйНомерТовараАвтоматически", Ложь);
	СтруктураДанныхДляЗаполнения.Вставить("ПорядковыйНомерТовара", "");
	СтруктураДанныхДляЗаполнения.Вставить("СтранаВвозаНеРФ", Ложь);
	
	Возврат СтруктураДанныхДляЗаполнения; 
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

// Возвращает структуру регистрационного номера таможенной декларции по переданному полному номеру
// декларации на товары.
// Регистрационный номер не будет определен если "полный" номер таможенной декларации не соответствует 
// структуре номера декларации, выдаваемой российскими таможенными органами.
// 
// Регистрационный номер таможенной декларации может быть получен из "полного" номера таможенной декларации
// или регистрационного номера при условиях:
// 1. Длина номера таможенной декларации от 17 до 28 символов.
// 2. Количество элементов, разделенных знаком дробь ("/") 3 или 4.
// 3. Длина первого элемента 2, 5 или 8 символов, второго 6, третьего 7 или 8 (в этом случае первые два символа 
//    "ОБ" или "ЗВ"), четвертого (при наличии) от 1 до 3 символов.
// 4. Второй элемент можно преобразовать в дату.
// Регистрационный номер таможенной декларации будет получен из "полного" номера таможенной декларации
// путем отсечения последнего (4-го) элемента номера.
//
// Параметры:
//    НомерТаможеннойДекларации - Строка- номер таможенной декларации или регистрационный номер таможенной декларации.
//
// Возвращаемое значение:
//    Структура:
//      * РегистрационныйНомер - Строка - регистрационный номер таможенной декларации либо пустая строка, 
//                                     если его не удалось определить.
//      * ПорядковыйНомерТовара - Строка - порядковый номер товара из графы 32 ДТ
Функция РегистрационныйНомер(НомерТаможеннойДекларации)
	
	НомерДекларацииНаТовары = СокрЛП(НомерТаможеннойДекларации);
	СтруктураНомера = Новый Структура("РегистрационныйНомер,ПорядковыйНомерТовара","","");
	
	Если СтрДлина(НомерДекларацииНаТовары) < 17
	 ИЛИ СтрДлина(НомерДекларацииНаТовары) > 28 Тогда
		Возврат СтруктураНомера;
	КонецЕсли;
	
	МассивТД = СтрРазделить(НомерДекларацииНаТовары, "/");
	
	Если МассивТД.Количество() > 4
	 ИЛИ МассивТД.Количество() < 3 Тогда
		// Номер декларации на товары указан с ошибками.
		Возврат СтруктураНомера;
	КонецЕсли;
	
	КодТаможенногоОргана = СокрЛП(МассивТД[0]);
	
	Если СтрДлина(КодТаможенногоОргана) <> 2
		И СтрДлина(КодТаможенногоОргана) <> 5
		И СтрДлина(КодТаможенногоОргана) <> 8 Тогда
		Возврат СтруктураНомера;
	КонецЕсли;
	
	ДатаПринятияДекларацииНаТовары = СокрЛП(МассивТД[1]);
	
	Если СтрДлина(ДатаПринятияДекларацииНаТовары) <> 6 Тогда
		Возврат СтруктураНомера;
	Иначе
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ДатаПринятияДекларацииНаТовары) Тогда
			Возврат СтруктураНомера;
		КонецЕсли;
		СтрокаВДату = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаПринятияДекларацииНаТовары);
		Если НЕ ЗначениеЗаполнено(СтрокаВДату) Тогда
			Возврат СтруктураНомера;
		КонецЕсли;
	КонецЕсли;

	ПорядковыйНомерДекларацииНаТовары = СокрЛП(МассивТД[2]);
	
	Если СтрДлина(ПорядковыйНомерДекларацииНаТовары) > 8
	 ИЛИ СтрДлина(ПорядковыйНомерДекларацииНаТовары) < 7 Тогда
		Возврат СтруктураНомера;
	КонецЕсли;
	
	Если СтрДлина(ПорядковыйНомерДекларацииНаТовары) = 7 Тогда
		ПервыйСимвол = ВРег(Лев(ПорядковыйНомерДекларацииНаТовары, 1));
		Если (ПервыйСимвол = "В" ИЛИ ПервыйСимвол = "B") Тогда
			Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Прав(ПорядковыйНомерДекларацииНаТовары,6)) Тогда
				// Ошибочный формат поля порядковый номер.
				Возврат СтруктураНомера;
			КонецЕсли;
		Иначе
			Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПорядковыйНомерДекларацииНаТовары) Тогда
				// Ошибочный формат поля порядковый номер.
				Возврат СтруктураНомера;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// В случае выпуска товаров до подачи таможенной декларации импортер представляет в налоговый орган
	// обязательство о подаче таможенной декларации (до 2018 года) 
	// или заявление о выпуске товаров (с 1 января 2018 года).
	// При этом порядковый номер декларации на товары состоит из 8 символов.
	// Порядковый принимает вид "ОБ123456" или "ЗВ123456".
	Если СтрДлина(ПорядковыйНомерДекларацииНаТовары) = 8 Тогда
		ПервыеДваСимвола = ВРег(Лев(ПорядковыйНомерДекларацииНаТовары, 2));
		Если ПервыеДваСимвола = "0Б" Тогда 
			// Вместо буквы "О" указана цифра ноль.
			Возврат СтруктураНомера;
		ИначеЕсли ПервыеДваСимвола = "3В"
				ИЛИ ПервыеДваСимвола = "3B" Тогда
			// Вместо буквы "З" указана цифра три.
			Возврат СтруктураНомера;
		ИначеЕсли ПервыеДваСимвола <> "ОБ"
				И ПервыеДваСимвола <> "OБ"
				И ПервыеДваСимвола <> "ЗВ"
				И ПервыеДваСимвола <> "ЗB" Тогда 
			// Ошибочный формат поля порядковый номер.
			Возврат СтруктураНомера;
		КонецЕсли;
		ПоследниеШестьСимволов = ВРег(Прав(ПорядковыйНомерДекларацииНаТовары, 6));
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПоследниеШестьСимволов) Тогда
			// Ошибочный формат поля порядковый номер.
			Возврат СтруктураНомера;
		КонецЕсли;
	КонецЕсли;
	
	Если МассивТД.Количество() = 4 Тогда
		ПорядковыйНомерТовара = СокрЛП(МассивТД[3]);
		Если СтрДлина(ПорядковыйНомерТовара) > 3
		 ИЛИ СтрДлина(ПорядковыйНомерТовара) < 1 Тогда
			Возврат СтруктураНомера;
		КонецЕсли;
		СтруктураНомера.ПорядковыйНомерТовара = ПорядковыйНомерТовара;
		МассивТД.Удалить(3);
	КонецЕсли;
	
	СтруктураНомера.РегистрационныйНомер = СтрСоединить(МассивТД, "/");
	
	Возврат СтруктураНомера;
	
КонецФункции

// Функция возвращает порядковый номер товара из полного номера таможенной декларации, 
// для России это 4 группа символов, найденных по разделителю "\".
//
// Параметры:
//	НомерТаможеннойДекларации - Строка - Полный номер таможенной декларации.
//
// Возвращаемое значение:
//	Строка - Порядковый номер товара (значение поля №32 таможенной декларации).
//
Функция ПорядковыйНомерТовараИзНомераТаможеннойДекларации(НомерТаможеннойДекларации) Экспорт
	
	ПорядковыйНомерТовара = ""; 
	ДанныеНомераГТД = СтрРазделить(НомерТаможеннойДекларации, "/");
	Если ДанныеНомераГТД.Количество() = 4 Тогда
		ПорядковыйНомерТовара = ДанныеНомераГТД[3];
	КонецЕсли;
	Возврат ПорядковыйНомерТовара;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтранаПроисхождения = Неопределено;
	Параметры.Отбор.Свойство("СтранаПроисхождения", СтранаПроисхождения);
	
	ТекстЗапроса = "";
	
	Если Параметры.СтрокаПоиска = Неопределено Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеСправочника.Ссылка КАК Ссылка,
		|	ДанныеСправочника.Представление КАК Представление,
		|	ДанныеСправочника.ПометкаУдаления КАК ПометкаУдаления,
		|	ДанныеСправочника.СтранаПроисхождения.Представление КАК СтранаПредставление
		|ИЗ
		|	Справочник.НомераГТД КАК ДанныеСправочника
		|ГДЕ
		|	НЕ ДанныеСправочника.Предопределенный
		|";
		
	Иначе
		ТекстВложенногоЗапросаСочетанияНоменклатураГТД = "";
		
		ПравоДоступаПриобретениеТоваровУслуг = ПравоДоступа("Чтение", Метаданные.Документы.ПриобретениеТоваровУслуг);
		ПравоДоступаКорректировкаПриобретения = ПравоДоступа("Чтение", Метаданные.Документы.КорректировкаПриобретения);
		ПравоДоступаПересортицаТоваров  = ПравоДоступа("Чтение", Метаданные.Документы.ПересортицаТоваров);
		ПравоДоступаОприходованиеИзлишковТоваров = ПравоДоступа("Чтение", Метаданные.Документы.ОприходованиеИзлишковТоваров);
		ПравоДоступаТаможеннаяДекларацияИмпорт = ПравоДоступа("Чтение", Метаданные.Документы.ТаможеннаяДекларацияИмпорт);
		
		//при добавлении выборок к вложенному запросу необходимо, чтобы текст начинался с |ОБЪЕДИНИТЬ ВСЕ
		Если ПравоДоступаПриобретениеТоваровУслуг Тогда
			ТекстВложенногоЗапросаСочетанияНоменклатураГТД = ТекстВложенногоЗапросаСочетанияНоменклатураГТД + "
					  |ОБЪЕДИНИТЬ ВСЕ
					  |
					  |ВЫБРАТЬ ПЕРВЫЕ 100
                      |	ПриобретениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
                      |	ПриобретениеТоваровУслугТовары.Характеристика КАК Характеристика,
                      |	ПриобретениеТоваровУслугТовары.НомерГТД КАК НомерГТД,
                      |	ПриобретениеТоваровУслугТовары.Ссылка КАК Ссылка,
                      |	ПриобретениеТоваровУслугТовары.Ссылка.Дата КАК Дата
                      |ИЗ
                      |	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
                      |ГДЕ
                      |	ПриобретениеТоваровУслугТовары.Номенклатура = &Номенклатура
                      |	И ПриобретениеТоваровУслугТовары.Характеристика = &Характеристика
                      |	И ПриобретениеТоваровУслугТовары.Ссылка.Проведен
					  |";
		КонецЕсли;	
		Если ПравоДоступаКорректировкаПриобретения Тогда
			ТекстВложенногоЗапросаСочетанияНоменклатураГТД = ТекстВложенногоЗапросаСочетанияНоменклатураГТД + "
                      |ОБЪЕДИНИТЬ ВСЕ
                      |
                      |ВЫБРАТЬ ПЕРВЫЕ 100
                      |	КорректировкаПриобретенияТовары.Номенклатура КАК Номенклатура,
                      |	КорректировкаПриобретенияТовары.Характеристика КАК Характеристика,
                      |	КорректировкаПриобретенияТовары.НомерГТД КАК НомерГТД,
                      |	КорректировкаПриобретенияТовары.Ссылка КАК Ссылка,
                      |	КорректировкаПриобретенияТовары.Ссылка.Дата КАК Дата
                      |ИЗ
                      |	Документ.КорректировкаПриобретения.Товары КАК КорректировкаПриобретенияТовары
                      |ГДЕ
                      |	КорректировкаПриобретенияТовары.Номенклатура = &Номенклатура
                      |	И КорректировкаПриобретенияТовары.Характеристика = &Характеристика
                      |	И КорректировкаПриобретенияТовары.Ссылка.Проведен
					  |";
		КонецЕсли;	
		Если ПравоДоступаТаможеннаяДекларацияИмпорт Тогда
			ТекстВложенногоЗапросаСочетанияНоменклатураГТД = ТекстВложенногоЗапросаСочетанияНоменклатураГТД + "
                      |ОБЪЕДИНИТЬ ВСЕ
					  |
                      |ВЫБРАТЬ ПЕРВЫЕ 100
                      |	ТаможеннаяДекларацияИмпортТовары.Номенклатура КАК Номенклатура,
                      |	ТаможеннаяДекларацияИмпортТовары.Характеристика КАК Характеристика,
                      |	ТаможеннаяДекларацияИмпортТовары.НомерГТД КАК НомерГТД,
                      |	ТаможеннаяДекларацияИмпортТовары.Ссылка КАК Ссылка,
                      |	ТаможеннаяДекларацияИмпортТовары.Ссылка.Дата КАК Дата
                      |ИЗ
                      |	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТаможеннаяДекларацияИмпортТовары
                      |ГДЕ
                      |	ТаможеннаяДекларацияИмпортТовары.Номенклатура = &Номенклатура
                      |	И ТаможеннаяДекларацияИмпортТовары.Характеристика = &Характеристика
                      |	И ТаможеннаяДекларацияИмпортТовары.Ссылка.Проведен
					  |";
		КонецЕсли;	
		Если ПравоДоступаОприходованиеИзлишковТоваров Тогда
			ТекстВложенногоЗапросаСочетанияНоменклатураГТД = ТекстВложенногоЗапросаСочетанияНоменклатураГТД + "
					  |ОБЪЕДИНИТЬ ВСЕ
                      |
                      |ВЫБРАТЬ ПЕРВЫЕ 100
                      |	ОприходованиеИзлишковТоваровТовары.Номенклатура КАК Номенклатура,
                      |	ОприходованиеИзлишковТоваровТовары.Характеристика КАК Характеристика,
                      |	ОприходованиеИзлишковТоваровТовары.НомерГТД КАК НомерГТД,
                      |	ОприходованиеИзлишковТоваровТовары.Ссылка КАК Ссылка,
                      |	ОприходованиеИзлишковТоваровТовары.Ссылка.Дата КАК Дата
                      |ИЗ
                      |	Документ.ОприходованиеИзлишковТоваров.Товары КАК ОприходованиеИзлишковТоваровТовары
                      |ГДЕ
                      |	ОприходованиеИзлишковТоваровТовары.Номенклатура = &Номенклатура
                      |	И ОприходованиеИзлишковТоваровТовары.Характеристика = &Характеристика
                      |	И ОприходованиеИзлишковТоваровТовары.Ссылка.Проведен
                      |";
		КонецЕсли;	
		Если ПравоДоступаПересортицаТоваров Тогда
			ТекстВложенногоЗапросаСочетанияНоменклатураГТД = ТекстВложенногоЗапросаСочетанияНоменклатураГТД + "
                      |ОБЪЕДИНИТЬ ВСЕ
                      |
                      |ВЫБРАТЬ ПЕРВЫЕ 100
                      |	ПересортицаТоваровТовары.Номенклатура КАК Номенклатура,
                      |	ПересортицаТоваровТовары.Характеристика КАК Характеристика,
                      |	ПересортицаТоваровТовары.НомерГТД КАК НомерГТД,
                      |	ПересортицаТоваровТовары.Ссылка КАК Ссылка,
                      |	ПересортицаТоваровТовары.Ссылка.Дата КАК Дата
                      |ИЗ
                      |	Документ.ПересортицаТоваров.Товары КАК ПересортицаТоваровТовары
                      |ГДЕ
                      |	ПересортицаТоваровТовары.Номенклатура = &Номенклатура
                      |	И ПересортицаТоваровТовары.Характеристика = &Характеристика
                      |	И ПересортицаТоваровТовары.Ссылка.Проведен
                      |";
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТекстВложенногоЗапросаСочетанияНоменклатураГТД) Тогда
			
			ПозицияИнструкцииОбъединитьВсе = СтрНайти(ТекстВложенногоЗапросаСочетанияНоменклатураГТД, "ОБЪЕДИНИТЬ ВСЕ");
			ПозицияНачалаПервойВыборки = ?(ПозицияИнструкцииОбъединитьВсе>0, ПозицияИнструкцииОбъединитьВсе+14, 1);
			
			ТекстЗапросаСочетанияНоменклатураГТД = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 10000
                      |	СочетанияНоменклатураГТД.Номенклатура КАК Номенклатура,
                      |	СочетанияНоменклатураГТД.Характеристика КАК Характеристика,
                      |	СочетанияНоменклатураГТД.НомерГТД КАК НомерГТД,
                      |	СочетанияНоменклатураГТД.Ссылка КАК Ссылка,
                      |	СочетанияНоменклатураГТД.Дата КАК Дата
					  |ПОМЕСТИТЬ СочетанияНоменклатураГТД
                      |ИЗ
                      |	(" + Сред(ТекстВложенногоЗапросаСочетанияНоменклатураГТД, ПозицияНачалаПервойВыборки) + ") КАК СочетанияНоменклатураГТД
                      |УПОРЯДОЧИТЬ ПО
                      |	Дата УБЫВ";
			
			ТекстЗапроса = ТекстЗапросаСочетанияНоменклатураГТД + "
                      |;
                      |
                      |////////////////////////////////////////////////////////////////////////////////
                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
                      |	ДанныеСправочника.Ссылка КАК Ссылка,
                      |	ДанныеСправочника.Представление КАК Представление,
                      |	ДанныеСправочника.ПометкаУдаления КАК ПометкаУдаления,
                      |	ДанныеСправочника.СтранаПроисхождения.Представление КАК СтранаПредставление,
                      |	МАКСИМУМ(СочетанияНоменклатураГТД.Дата) КАК Порядок
                      |ИЗ
                      |	Справочник.НомераГТД КАК ДанныеСправочника
                      |		ЛЕВОЕ СОЕДИНЕНИЕ СочетанияНоменклатураГТД КАК СочетанияНоменклатураГТД
                      |		ПО (СочетанияНоменклатураГТД.НомерГТД = ДанныеСправочника.Ссылка)
                      |ГДЕ
                      |	ДанныеСправочника.Код ПОДОБНО &СтрокаПоиска
                      |	И (НЕ &ОтборПоСтране
                      |			ИЛИ ДанныеСправочника.СтранаПроисхождения = &Страна)
                      |
                      |СГРУППИРОВАТЬ ПО
                      |	ДанныеСправочника.Ссылка,
                      |	ДанныеСправочника.Представление,
                      |	ДанныеСправочника.ПометкаУдаления,
                      |	ДанныеСправочника.СтранаПроисхождения.Представление
                      |
                      |УПОРЯДОЧИТЬ ПО
                      |	Порядок УБЫВ";
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Если Не ПустаяСтрока(ТекстЗапроса) Тогда
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Номенклатура", ?(Параметры.Свойство("Номенклатура"),Параметры.Номенклатура,Неопределено));
		Запрос.УстановитьПараметр("Характеристика", ?(Параметры.Свойство("Характеристика"),Параметры.Характеристика,Неопределено));
		Запрос.УстановитьПараметр("СтрокаПоиска", Параметры.СтрокаПоиска + "%");
		Запрос.УстановитьПараметр("ОтборПоСтране", ЗначениеЗаполнено(СтранаПроисхождения));
		Запрос.УстановитьПараметр("Страна", СтранаПроисхождения);

		ВыборкаГТД = Запрос.Выполнить().Выбрать();
		Пока ВыборкаГТД.Следующий() Цикл
			ЭлементВыбора = Новый Структура("Значение, ПометкаУдаления", ВыборкаГТД.Ссылка, ВыборкаГТД.ПометкаУдаления);
			Представление = СокрЛП(ВыборкаГТД.Представление)
				+ ?(ЗначениеЗаполнено(ВыборкаГТД.СтранаПредставление), " (" + ВыборкаГТД.СтранаПредставление + ")", "");
			ДанныеВыбора.Добавить(ЭлементВыбора, Представление);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

