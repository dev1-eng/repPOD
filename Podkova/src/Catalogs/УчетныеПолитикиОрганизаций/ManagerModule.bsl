#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП.
//
// Возвращаемое значение:
//	Массив - имена блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("МетодОценкиСтоимостиТоваров");
	Результат.Добавить("СистемаНалогообложения");
	Результат.Добавить("ПрименяетсяЕНВД");
	Результат.Добавить("ПрименяетсяУчетНДСПоФактическомуИспользованию");
	Результат.Добавить("МетодНачисленияАмортизацииНУ");
	Результат.Добавить("ВариантУчетаОтложенногоНалога");
	Результат.Добавить("УчетГотовойПродукцииПоПлановойСтоимости; ВариантУчетаСтоимостиПродукции");
	Результат.Добавить("ИспользоватьСчет40");
	Результат.Добавить("Учитывать5ПроцентныйПорог");
	Результат.Добавить("ФормироватьРезервыПоСомнительнымДолгамБУ; НастроитьПорядокОценкиЗадолженности");
	Результат.Добавить("ФормироватьРезервыПоСомнительнымДолгамНУ");
	Результат.Добавить("ПроводкиПоРаботникам");
	Результат.Добавить("ЗабалансовыйУчетТМЦВЭксплуатации");
	Результат.Добавить("ВзаимозачетЧерезСчет76");
	Результат.Добавить("ФормироватьРезервОтпусковБУ");
	Результат.Добавить("ФормироватьРезервОтпусковНУ");
	Результат.Добавить("ОпределятьИзлишкиРезервовОтпусковЕжемесячно");
	Результат.Добавить("МетодНачисленияРезерваОтпусков");
	Результат.Добавить("НормативОтчисленийВРезервОтпусков");
	Результат.Добавить("ПредельнаяВеличинаОтчисленийВРезервОтпусков");
	Результат.Добавить("ОбъектНалогообложенияУСН");
	Результат.Добавить("ДатаПереходаНаУСН");
	Результат.Добавить("УведомлениеНомерУСН");
	Результат.Добавить("УведомлениеДатаУСН");
	Результат.Добавить("СтавкаНалогаУСН");
	Результат.Добавить("БазаРаспределенияКосвенныхРасходовПоВидамДеятельности");
	Результат.Добавить("ВключатьВСоставНалоговыхРасходовЛизинговыеПлатежи");
	Результат.Добавить("ВариантУчетаНДСПриИзмененииВидаДеятельности");
	Результат.Добавить("СтатьяРасходовСписаниеНДС");
	Результат.Добавить("АналитикаРасходовСписаниеНДС");
	Результат.Добавить("СтатьяРасходовНеНДС");
	Результат.Добавить("АналитикаРасходовНеНДС");
	Результат.Добавить("СтатьяРасходовЕНВД");
	Результат.Добавить("АналитикаРасходовЕНВД");
	Результат.Добавить("ПрименяетсяОсвобождениеОтУплатыНДС");
	Результат.Добавить("ВариантУчетаСтоимостиТоваров");
	Результат.Добавить("СборкаТоваровЧерезСчет20");
	Результат.Добавить("РаздельныйУчетТоваров");
	Результат.Добавить("РаздельныйУчетПостатейныхПроизводственныхЗатратПоНалогообложениюНДС");
	Результат.Добавить("УчетНДСДлительногоЦиклаПроизводства");
	Результат.Добавить("ПравилоОтбораАвансовДляРегистрацииСчетовФактур");
	Результат.Добавить("ВидРазницПБУ18РезервовПоСомнительнымДолгам");
	Результат.Добавить("ПериодичностьРезервовПоСомнительнымДолгамБУ");
	Результат.Добавить("ПериодичностьРезервовПоСомнительнымДолгамНУ");
	Результат.Добавить("ПериодичностьОформленияСводныхСправок");
	Результат.Добавить("ЕстьРеализацияРаботУслугНеНаТерриторииРФ");
	Результат.Добавить("СписатьСтоимостьТМЦВЭксплуатации");
	
	Возврат Результат;
	
КонецФункции

// Возвращает реквизиты объекта, которые не рекомендуется редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	Результат = Новый Массив;
	
	НастройкиУчетаНДС = УчетНДСУП.НастройкиУчета();
	Если НЕ РасчетСебестоимостиПовтИсп.ПартионныйУчетВключен()
		ИЛИ Не НастройкиУчетаНДС.ФормироватьОтчетностьПоНДС
		ИЛИ Не НастройкиУчетаНДС.РаздельныйУчетНДС Тогда
		Результат.Добавить("ПрименяетсяУчетНДСПоФактическомуИспользованию");
		Результат.Добавить("Учитывать5ПроцентныйПорог");
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		Результат.Добавить("МетодОценкиСтоимостиТоваров");
	КонецЕсли;
	
	Если НЕ РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22() Тогда
		Результат.Добавить("РаздельныйУчетПостатейныхПроизводственныхЗатратПоНалогообложениюНДС");
		Результат.Добавить("УчетНДСДлительногоЦиклаПроизводства");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		Результат.Добавить("ВедетсяУчетПостоянныхИВременныхРазниц");
		Результат.Добавить("ВариантУчетаОтложенногоНалога");
		Результат.Добавить("ФормироватьРезервыПоСомнительнымДолгамБУ");
		Результат.Добавить("ФормироватьРезервыПоСомнительнымДолгамНУ");
		Результат.Добавить("ФормироватьРезервОтпусковБУ");
		Результат.Добавить("МетодНачисленияРезерваОтпусков");
		Результат.Добавить("ФормироватьРезервОтпусковНУ");
		Результат.Добавить("ОпределятьИзлишкиРезервовОтпусковЕжемесячно");
		Результат.Добавить("НормативОтчисленийВРезервОтпусков");
		Результат.Добавить("ПредельнаяВеличинаОтчисленийВРезервОтпусков");
		Результат.Добавить("УчетГотовойПродукцииПоПлановойСтоимости");
		Результат.Добавить("ИспользоватьСчет40");
		Результат.Добавить("ПроводкиПоРаботникам");
		Результат.Добавить("ЗабалансовыйУчетТМЦВЭксплуатации");
		Результат.Добавить("ВзаимозачетЧерезСчет76");
		Результат.Добавить("ДатаПереходаНаУСН");
		Результат.Добавить("УведомлениеНомерУСН");
		Результат.Добавить("УведомлениеДатаУСН");
		Результат.Добавить("ОбъектНалогообложенияУСН");
		Результат.Добавить("СтавкаНалогаУСН");
		Результат.Добавить("СборкаТоваровЧерезСчет20");
		Результат.Добавить("ВидРазницПБУ18РезервовПоСомнительнымДолгам");
		Результат.Добавить("ПериодичностьРезервовПоСомнительнымДолгамБУ");
		Результат.Добавить("ПериодичностьРезервовПоСомнительнымДолгамНУ");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Кэширует значения некоторых реквизитов учетных политик организаций в константах.
//
Процедура УстановитьЗначенияЗависимыхКонстант() Экспорт
	
	// Константа ИспользоватьРаздельныйУчетПоНалогообложению:
	// устанавливается в Истина если хоть в одной учетной политике реквизит РаздельныйУчетТоваров = Истина
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Политики.Значение КАК Значение
	|ИЗ
	|	Константы КАК Константы
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЕСТЬNULL(МАКСИМУМ(Т.РаздельныйУчетТоваров), ЛОЖЬ) КАК Значение
	|		ИЗ
	|			Справочник.УчетныеПолитикиОрганизаций КАК Т) КАК Политики
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Константы.ИспользоватьРаздельныйУчетПоНалогообложению <> Политики.Значение";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Константы.ИспользоватьРаздельныйУчетПоНалогообложению.Установить(Выборка.Значение);
	КонецЕсли;
	
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.УчетныеПолитикиОрганизаций.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.4.11.22";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0f732ea4-01be-4dff-a6b8-9aa55ac3e442");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.УчетныеПолитикиОрганизаций.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет справочник ""Учетные политики организаций"":
	|- заполняет реквизит ""Периодичность оформления сводных справок"" значением по умолчанию
	|- заполняет реквизит ""Вариант учета отложенного налога""
	|- заполняет реквизит ""РаздельныйУчетТоваров"" для организаций на УСН ""ДоходыМинусРасходы"" значением по умолчанию ""Истина""
	|- заполняет реквизит ""ИспользуетсяТрудНаемныхРаботников"" для организаций на УСН значением по умолчанию ""Истина""'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.УчетныеПолитикиОрганизаций.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.УчетныеПолитикиОрганизаций.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.УчетныеПолитикиОрганизаций.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

// Обработчик обновления УП 2.4.8.
// Заполняет реквизит "ПериодичностьОформленияСводныхСправок" значением по умолчанию "Месяц"
// Обработчик обновления УП 2.4.11.
// Заполняет реквизит "РаздельныйУчетТоваров" для организаций на УСН "ДоходыМинусРасходы" значением по умолчанию "Истина";
// Заполняет реквизит "ИспользуетсяТрудНаемныхРаботников" для организаций на УСН значением по умолчанию "Истина"
// Заполняет реквизит "ВариантУчетаОтложенногоНалога" в зависимости значения реквизита
// "ВедетсяУчетПостоянныхИВременныхРазниц" (название до версии 2.4.11 - "ПрименяетсяПБУ18")
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитика.Ссылка
	|ИЗ
	|	Справочник.УчетныеПолитикиОрганизаций КАК УчетнаяПолитика
	|ГДЕ
	|	УчетнаяПолитика.ПериодичностьОформленияСводныхСправок = ЗНАЧЕНИЕ(Перечисление.Периодичность.ПустаяСсылка)
	|
	|";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.УчетныеПолитикиОрганизаций";
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			
			Блокировка.Заблокировать();
			
			ДанныеОбъекта = Выборка.Ссылка.ПолучитьОбъект();
			Если ДанныеОбъекта = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Если ДанныеОбъекта.ПериодичностьОформленияСводныхСправок.Пустая() Тогда
				ДанныеОбъекта.ПериодичностьОформленияСводныхСправок = Перечисления.Периодичность.Месяц;
			КонецЕсли;
			
			
			Если ДанныеОбъекта.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДанныеОбъекта);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать объект: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									Выборка.Ссылка.Метаданные(),
									Выборка.Ссылка,
									ТекстСообщения);
									
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли