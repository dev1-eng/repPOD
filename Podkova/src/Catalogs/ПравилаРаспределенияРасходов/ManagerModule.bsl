#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП
//
// Возвращаемое значение:
//	Массив - имена блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	Результат = Новый Массив;
	Результат.Добавить("НазначениеПравила");
	Результат.Добавить("НаправлениеРаспределения");
	Возврат Результат;
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если Не ВидФормы = "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Ключ") Тогда
		
		РеквизитыКПолучению = Новый Массив;
		РеквизитыКПолучению.Добавить("НазначениеПравила");
		ЗначенияРеквизитов = ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(Параметры.Ключ, РеквизитыКПолучению);
		
		
	ИначеЕсли Параметры.Свойство("ЗначениеКопирования") Тогда
		ЗначенияРеквизитов = Параметры.ЗначениеКопирования;
	ИначеЕсли Параметры.Свойство("ЗначенияЗаполнения")
		И Параметры.ЗначенияЗаполнения.Свойство("НазначениеПравила") Тогда
		ЗначенияРеквизитов = Параметры.ЗначенияЗаполнения;
	Иначе
		Возврат;
	КонецЕсли;
	
	НаФР = ПредопределенноеЗначение("Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаФинансовыйРезультат");
	НаРБП = ПредопределенноеЗначение("Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаРБП");
	
	ФормыПоНазначению = Новый Соответствие;
	ФормыПоНазначению.Вставить(НаФР, "ФормаНастроекФР");
	ФормыПоНазначению.Вставить(НаРБП, "ФормаНастроекРБП");
		
	ВыбраннаяФорма = ФормыПоНазначению.Получить(ЗначенияРеквизитов.НазначениеПравила);
	
	Если ЗначениеЗаполнено(ВыбраннаяФорма) Тогда
		
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область Прочее

Функция ПредставлениеОтобранныхПозиций(ОтобранныеПозиции, ПараметрыПредметаИсчисления = Неопределено) Экспорт

	Если ОтобранныеПозиции.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Если ОтобранныеПозиции.Количество() = 1 Тогда
		Возврат СокрЛП(ОтобранныеПозиции[0]);
	КонецЕсли;
	
	Если ПараметрыПредметаИсчисления = Неопределено Тогда
		ПредметИсчисления = "позиция, позиции, позиций";
	Иначе
		ПредметИсчисления = ПараметрыПредметаИсчисления;
	КонецЕсли;
	
	КоличествоПозиций = ОтобранныеПозиции.Количество() - 1;
	ДляСклонения = ЧислоПрописью(КоличествоПозиций, "Л = ru_RU;", ПредметИсчисления);
	
	НачалоПредмета = СтрНайти(ДляСклонения, Лев(ПредметИсчисления, 3));
	СклоненныйПредмет = Сред(ДляСклонения, НачалоПредмета, СтрНайти(ДляСклонения, " ",, НачалоПредмета) - НачалоПредмета);
	
	Представление = НСтр("ru = '%1 и еще %2 %3'");
	
	Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Представление, 
		СокрЛП(ОтобранныеПозиции[0]), КоличествоПозиций, 
		СклоненныйПредмет);
		
	Возврат Представление;
	
КонецФункции


#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ПравилаРаспределенияРасходов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.4.10.45";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d924c134-bcd6-4cf2-b0a4-8013e967c039");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ПравилаРаспределенияРасходов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЗапускатьТолькоВГлавномУзле = Истина;
	Обработчик.Комментарий = НСтр("ru = 'Создаются новые элементы по элементам справочника СпособыРаспределенияПоНаправлениямДеятельности
	|Создаются новые элементы по данным ПВХ Статьи расходов у которых вариант распределения на РБП и заполнена статья расходов получатель РБП'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.ПланыВидовХарактеристик.СтатьиРасходов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ПравилаРаспределенияРасходов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.СпособыРаспределенияПоНаправлениямДеятельности.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ПравилаРаспределенияРасходов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.ПравилаРаспределенияРасходов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ПланыВидовХарактеристик.СтатьиРасходов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

КонецПроцедуры

// Регистрирует данные для обработчика обновления.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Статьи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СпособыРаспределенияПоНаправлениямДеятельности КАК СпособыРаспределения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК Статьи
		|		ПО СпособыРаспределения.Ссылка = Статьи.УдалитьСпособРаспределенияПоНаправлениямДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаРаспределенияРасходов КАК ПравилаРаспределенияРасходов
		|		ПО (ПравилаРаспределенияРасходов.УдалитьСпособРаспределения = СпособыРаспределения.Ссылка)
		|ГДЕ
		|	ПравилаРаспределенияРасходов.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтатьиРасходов.Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаРаспределенияРасходов КАК ПравилаРаспределенияРасходов
		|		ПО СтатьиРасходов.УдалитьСтатьяРасходов = ПравилаРаспределенияРасходов.СтатьяСписанияРБП
		|ГДЕ
		|	НЕ СтатьиРасходов.УдалитьСтатьяРасходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
		|	И ПравилаРаспределенияРасходов.Ссылка ЕСТЬ NULL";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

// Обработка данных для перехода на новую версию.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "ПланВидовХарактеристик.СтатьиРасходов";
	
	НовыеПравила = Новый Соответствие;
	
	ДопПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ОбновлениеИнформационнойБазы.УстановитьИсточникДанных(ДопПараметры, "УдалитьСпособРаспределенияПоНаправлениямДеятельности");
	ОбновлениеИнформационнойБазы.УстановитьИсточникДанных(ДопПараметры, "УдалитьСтатьяРасходов");
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта, ДопПараметры);
		
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.Ссылка, 
				"УдалитьСпособРаспределенияПоНаправлениямДеятельности, УдалитьСтатьяРасходов, УдалитьСтатьяРасходов.Наименование, 
				|ВариантРаспределенияРасходовРегл, ВариантРаспределенияРасходовУпр");
			
			Если Не НовыеПравила.Получить(ЗначенияРеквизитов.УдалитьСпособРаспределенияПоНаправлениямДеятельности) = Неопределено
				Или Не НовыеПравила.Получить(ЗначенияРеквизитов.УдалитьСтатьяРасходов) = Неопределено Тогда
				
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЗначенияРеквизитов.УдалитьСпособРаспределенияПоНаправлениямДеятельности)
				И (ЗначенияРеквизитов.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности
					Или ЗначенияРеквизитов.ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности) Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ПравилаРаспределенияРасходов.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.ПравилаРаспределенияРасходов КАК ПравилаРаспределенияРасходов
					|ГДЕ
					|	ПравилаРаспределенияРасходов.УдалитьСпособРаспределения = &УдалитьСпособРаспределения";
				
				Запрос.УстановитьПараметр("УдалитьСпособРаспределения", 
					ЗначенияРеквизитов.УдалитьСпособРаспределенияПоНаправлениямДеятельности);
				
				Если Запрос.Выполнить().Пустой() Тогда
				
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	СпособыРаспределенияПоНаправлениямДеятельности.НаправленияДеятельности.(
						|		НаправлениеДеятельности КАК НаправлениеДеятельности,
						|		Коэффициент КАК Коэффициент
						|	) КАК НаправленияДеятельности,
						|	СпособыРаспределенияПоНаправлениямДеятельности.ПравилоРаспределения КАК ПравилоРаспределения,
						|	СпособыРаспределенияПоНаправлениямДеятельности.Наименование КАК Наименование
						|ИЗ
						|	Справочник.СпособыРаспределенияПоНаправлениямДеятельности КАК СпособыРаспределенияПоНаправлениямДеятельности
						|ГДЕ
						|	СпособыРаспределенияПоНаправлениямДеятельности.Ссылка = &Ссылка";
					
					Запрос.УстановитьПараметр("Ссылка", ЗначенияРеквизитов.УдалитьСпособРаспределенияПоНаправлениямДеятельности);
					
					Результат = Запрос.Выполнить();
					РеквизитыСпособаРаспределения = Результат.Выбрать();
					РеквизитыСпособаРаспределения.Следующий();
					
					НовоеПравило = Справочники.ПравилаРаспределенияРасходов.СоздатьЭлемент();
					НовоеПравило.Наименование = РеквизитыСпособаРаспределения.Наименование;
					НовоеПравило.НазначениеПравила = Перечисления.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаФинансовыйРезультат;
					НовоеПравило.УдалитьСпособРаспределения = ЗначенияРеквизитов.УдалитьСпособРаспределенияПоНаправлениямДеятельности;
					
					Если РеквизитыСпособаРаспределения.ПравилоРаспределения = Перечисления.ПравилаРаспределенияПоНаправлениямДеятельности.ПропорциональноВаловойПрибыли Тогда
						НовоеПравило.БазаРаспределенияПоПартиям = Перечисления.ТипыБазыРаспределенияРасходов.ВаловаяПрибыль;
					ИначеЕсли РеквизитыСпособаРаспределения.ПравилоРаспределения = Перечисления.ПравилаРаспределенияПоНаправлениямДеятельности.ПропорциональноДоходам Тогда
						НовоеПравило.БазаРаспределенияПоПартиям = Перечисления.ТипыБазыРаспределенияРасходов.ВыручкаОтПродаж;
					ИначеЕсли РеквизитыСпособаРаспределения.ПравилоРаспределения = Перечисления.ПравилаРаспределенияПоНаправлениямДеятельности.ПропорциональноРасходам Тогда
						НовоеПравило.БазаРаспределенияПоПартиям = Перечисления.ТипыБазыРаспределенияРасходов.СебестоимостьПродаж;
					ИначеЕсли РеквизитыСпособаРаспределения.ПравилоРаспределения = Перечисления.ПравилаРаспределенияПоНаправлениямДеятельности.ПропорциональноКоэффициентам Тогда
						
						НовоеПравило.БазаРаспределенияПоПартиям = Неопределено;
						НовоеПравило.НаправлениеРаспределения = Перечисления.НаправлениеРаспределенияПоПодразделениям.ПоКоэффициентам;
						НаправленияДеятельности = РеквизитыСпособаРаспределения.НаправленияДеятельности.Выгрузить();
						Для Каждого ДанныеНД Из НаправленияДеятельности Цикл
							
							НоваяСтрока = НовоеПравило.НаправленияДеятельности.Добавить();
							НоваяСтрока.НаправлениеДеятельности = ДанныеНД.НаправлениеДеятельности;
							НоваяСтрока.ДоляСтоимости = ДанныеНД.Коэффициент;
							
						КонецЦикла;
						
					КонецЕсли;
				
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовоеПравило);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЗначенияРеквизитов.УдалитьСтатьяРасходов)
				И (ЗначенияРеквизитов.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов
					Или ЗначенияРеквизитов.ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов) Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ПравилаРаспределенияРасходов.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.ПравилаРаспределенияРасходов КАК ПравилаРаспределенияРасходов
					|ГДЕ
					|	ПравилаРаспределенияРасходов.СтатьяСписанияРБП = &СтатьяСписанияРБП";
				
				Запрос.УстановитьПараметр("СтатьяСписанияРБП", 
					ЗначенияРеквизитов.УдалитьСтатьяРасходов);
				
				Если Запрос.Выполнить().Пустой() Тогда
				
					НовоеПравило = Справочники.ПравилаРаспределенияРасходов.СоздатьЭлемент();
					НовоеПравило.Наименование = ЗначенияРеквизитов.УдалитьСтатьяРасходовНаименование;
					НовоеПравило.НазначениеПравила = Перечисления.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаРБП;
					НовоеПравило.КоличествоМесяцев = 3;
					НовоеПравило.БазаРаспределенияРБП = Перечисления.ПравилаРаспределенияРБП.ПоМесяцам;
					НовоеПравило.НачалоПериода = "СДатыВозникновения";
					НовоеПравило.СтатьяСписанияРБП = ЗначенияРеквизитов.УдалитьСтатьяРасходов;
					
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовоеПравило);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли