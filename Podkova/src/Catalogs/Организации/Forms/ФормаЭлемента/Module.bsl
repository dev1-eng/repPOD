#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если Параметры.Свойство("ЗначенияЗаполнения") И Параметры.ЗначенияЗаполнения.Свойство("ВидОрганизации") Тогда
		ВидОрганизации = Параметры.ЗначенияЗаполнения.ВидОрганизации;
	ИначеЕсли Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо
		И НЕ Объект.ОбособленноеПодразделение Тогда
		ВидОрганизации = "ЮридическоеЛицо";
	ИначеЕсли Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо
		И Объект.ОбособленноеПодразделение Тогда
		ВидОрганизации = "ОбособленноеПодразделение";
	ИначеЕсли Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда 
		ВидОрганизации = "ИндивидуальныйПредприниматель";
	Иначе ВызватьИсключение НСтр("ru = 'Невозможно определить вид организации. Обратитесь к администратору.'");
	КонецЕсли;
	
	ЗаполнитьРеквизитГоловнаяОрганизация();
	ОткрытаФормаВыбораДаты = Ложь;

	УправлениеФормойНаСервере();
	
	// Установка списка выбора головных организаций
	Элементы.ГоловнаяОрганизация.СписокВыбора.ЗагрузитьЗначения(ГоловныеОрганизацииОбособленногоПодразделения());
	
	// Исключим редактируемую организацию из списка головных
	Если Параметры.Ключ.Пустая() Тогда
		ЭлементТекущаяОрганизация	= Элементы.ГоловнаяОрганизация.СписокВыбора.НайтиПоЗначению(Объект.Ссылка);
		Если ЭлементТекущаяОрганизация <> Неопределено Тогда
			Элементы.ГоловнаяОрганизация.СписокВыбора.Удалить(ЭлементТекущаяОрганизация);
		КонецЕсли;
	КонецЕсли;
	
	АдресныйКлассификаторПуст = АдресныйКлассификатор.КоличествоЗагруженныхРегионов() = 0;
		
	ИспользоватьРазделениеПоОбластямДанных = ПолучитьФункциональнуюОпцию("РаботаВМоделиСервиса");
		
	АдресЛоготипа 			= ?(Объект.ФайлЛоготип.Пустая(), 			"", НавигационнаяСсылкаКартинки(Объект.ФайлЛоготип, УникальныйИдентификатор));
	АдресФаксимильнойПечати = ?(Объект.ФайлФаксимильнаяПечать.Пустая(), "", НавигационнаяСсылкаКартинки(Объект.ФайлФаксимильнаяПечать, УникальныйИдентификатор));
	
	БазоваяВерсия = ПолучитьФункциональнуюОпцию("БазоваяВерсия");
	
	Элементы.ГруппаПраваяСторонаЮрЛицаКоды.Видимость = Не БазоваяВерсия;
	Элементы.ПраваяСторонаИндивидуальногоПредпринимателяЗаголовкиЗначения.Видимость = Не БазоваяВерсия;
	
	НеУправленческаяОрганизация = Объект.Ссылка <> Справочники.Организации.УправленческаяОрганизация;
	Элементы.ВидОрганизации.Видимость                          = НеУправленческаяОрганизация;
	Элементы.ГиперссылкаРегистрацияВНалоговыхОрганах.Видимость = НеУправленческаяОрганизация;
	Элементы.ИНН.Видимость                                     = НеУправленческаяОрганизация;
	Элементы.ЗаполнитьПоИНН.Видимость                          = НеУправленческаяОрганизация;
	Элементы.КПП.Видимость                                     = НеУправленческаяОрганизация;
	Элементы.КодОКВЭД.Видимость                                = НеУправленческаяОрганизация;
	Элементы.КодОКВЭД2.Видимость                               = НеУправленческаяОрганизация;
	Элементы.КодПоОКПО.Видимость                               = НеУправленческаяОрганизация;
	Элементы.ОГРН.Видимость                                    = НеУправленческаяОрганизация;
	Элементы.ДатаРегистрации.Видимость                         = НеУправленческаяОрганизация;
	Элементы.ОтступКрупнейшийНалогоплательщик.Видимость        = НеУправленческаяОрганизация;
	Элементы.КрупнейшийНалогоплательщик.Видимость              = НеУправленческаяОрганизация;
	Элементы.КодНалоговогоОрганаПолучателя.Видимость           = НеУправленческаяОрганизация;
	
	Если ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Справочники.Организации) Тогда
		Элементы.ФормаСкопировать.Видимость = Не БазоваяВерсия;
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Изменение", Метаданные.Справочники.Организации) Тогда
		Элементы.ФормаЗаписатьОбъект.Доступность = Ложь;
	КонецЕсли;
	
	РегистрацияВНалоговомОргане = Объект.РегистрацияВНалоговомОргане;
	
	КодОрганаПФР                          = Объект.КодОрганаПФР;
	НаименованиеТерриториальногоОрганаПФР = Объект.НаименованиеТерриториальногоОрганаПФР;
	РегистрационныйНомерПФР               = Объект.РегистрационныйНомерПФР;
	ИПРегистрационныйНомерПФР             = Объект.ИПРегистрационныйНомерПФР;
	
	ЗаполнитьОписанияПараметров();
	
	ФИОФизическогоЛица = ПолучитьФИОФизическогоЛица(Объект.ИндивидуальныйПредприниматель);
	
	ФИОИндивидуальногоПредпринимателя	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2 %3",
		ФИОФизическогоЛица.Фамилия, ФИОФизическогоЛица.Имя, ФИОФизическогоЛица.Отчество);
	
	НаименованиеСокращенное	= Объект.НаименованиеСокращенное;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// СтандартныеПодсистемы.КонтактнаяИнформация
	ДополнительныеПараметрыКИ = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	ДополнительныеПараметрыКИ.Вставить("ИмяЭлементаДляРазмещения", "ГруппаКонтактнаяИнформация");
	ДополнительныеПараметрыКИ.Вставить("ОтложеннаяИнициализация", Истина);
	
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтаФорма, Объект, ДополнительныеПараметрыКИ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация	
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСправочника();
	ПараметрыПриСозданииНаСервере.Форма                 = ЭтотОбъект;
	ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд = Элементы.КомандыЭДО;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСправочника(ПараметрыПриСозданииНаСервере);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// Заполнение Организации по ИНН данными из ЕГРЮЛ/ЕГРИП
	ПриСозданииЧтенииНаСервере();
	// Конец Заполнение Организации по ИНН данными из ЕГРЮЛ/ЕГРИП
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПриОткрытии = ОбменСКонтрагентамиКлиент.ПараметрыПриОткрытии();
	ПараметрыПриОткрытии.Форма                            = ЭтотОбъект;
	ПараметрыПриОткрытии.МестоРазмещенияКоманд            = Элементы.КомандыЭДО;
	ПараметрыПриОткрытии.ЕстьОбработчикОбновитьКомандыЭДО = Истина;
	
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ПараметрыПриОткрытии);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОчиститьСообщения();
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.Организации.Форма.ФормаНастройкиДокументооборота" И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
	КонецЕсли;
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы"
		И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		Если РаботаСЛоготипом Тогда
			
			Объект.ФайлЛоготип = ВыбранноеЗначение;
			АдресЛоготипа = НавигационнаяСсылкаКартинки(Объект.ФайлЛоготип, УникальныйИдентификатор)
			
		ИначеЕсли РаботаСФаксимиле Тогда
			
			Объект.ФайлФаксимильнаяПечать = ВыбранноеЗначение;
			АдресФаксимильнойПечати = НавигационнаяСсылкаКартинки(Объект.ФайлФаксимильнаяПечать, УникальныйИдентификатор)
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВыборДаты" Тогда
		ОбработкаВыбораДатыНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	УправлениеПредприятием = НЕ ПолучитьФункциональнуюОпцию("УправлениеТорговлей");

	Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаОрганизаций.УчетнаяПолитика) И Не Объект.ОбособленноеПодразделение Тогда
		
		Отказ = Истина;
		Элементы.ГруппаУчетнаяПолитика.Видимость = Истина;
		Элементы.ГруппаУчетнаяПолитикаНоваяБаза.Видимость = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Учетная политика"" не заполнено.'"), ,
			"УчетнаяПолитикаОрганизаций.УчетнаяПолитика");
		
		КонецЕсли;
		
	Если НЕ УправлениеПредприятием 
		Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("СтавкаНалогаНаИмуществоКодНалоговойЛьготыОсвобождениеОтНалогообложения"));
	КонецЕсли;
	
	Если НЕ УправлениеПредприятием 
		Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("СтавкаНалогаНаИмуществоПроцентУменьшения"));
	КонецЕсли;
	
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОчиститьСообщения();
	
	Если ОткрытаФормаВыбораДаты Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если ДанныеРегистрацийПФРИзменены Тогда
		ЗаполнитьЗначенияСвойств(Объект, ЭтаФорма, "КодОрганаПФР, НаименованиеТерриториальногоОрганаПФР, РегистрационныйНомерПФР, ИПРегистрационныйНомерПФР");
	КонецЕсли;
	
	Если Не ПараметрыЗаписи.Свойство("РежимИзмененияУчетнойПолитикиУточнен") Тогда
		ЗапроситьРежимИзмененияУчетнойПолитики(УчетнаяПолитикаОрганизаций.Период, Отказ, ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ДанныеРегистрацийВНалоговыхОрганахИзменены Тогда
		ТекущийОбъект.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане;
		ТекущийОбъект.КПП = РегистрацияВНалоговомОргане.КПП;
	КонецЕсли;
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УправлениеФормойНаСервере();
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Файл"
		И Параметр.Свойство("ВладелецФайла") Тогда
		
		Если Параметр.ВладелецФайла = Объект.Ссылка Тогда
			Модифицированность = Истина;
			СсылкаНаФайл = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
			
			Если РаботаСЛоготипом Тогда
				
				Объект.ФайлЛоготип = СсылкаНаФайл;
				АдресЛоготипа = НавигационнаяСсылкаКартинки(Объект.ФайлЛоготип, УникальныйИдентификатор);
				
			ИначеЕсли РаботаСФаксимиле Тогда
				
				Объект.ФайлФаксимильнаяПечать = СсылкаНаФайл;
				АдресФаксимильнойПечати = НавигационнаяСсылкаКартинки(Объект.ФайлФаксимильнаяПечать, УникальныйИдентификатор);
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_УчетныеПолитикиОрганизаций" И ЗначениеЗаполнено(Источник) Тогда
		
		ДействияПослеЗаписиУчетнойПолитики(Источник);
	
	ИначеЕсли ИмяСобытия = "ОтредактированаИстория" И ГоловнаяОрганизация = Источник
		И Параметр.ИмяРегистра = "УчетнаяПолитикаОрганизаций" Тогда
		
		Если УчетнаяПолитикаОрганизацийНаборЗаписейПрочитан Тогда
			
			РедактированиеПериодическихСведенийКлиент.ОбработкаОповещения(
				ЭтаФорма,
				ГоловнаяОрганизация,
				ИмяСобытия,
				Параметр,
				Источник);
			
			ОбновитьПолеУчетнаяПолитикаОрганизацийПериод(ЭтаФорма);
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ЗавершеноРедактированиеРегистраций" Тогда
		
		Если Параметр.ОткатитьИзменения Тогда
			ВосстановитьДанныеРегистрацийВНалоговыхОрганах();
			ДанныеРегистрацийВНалоговыхОрганахИзменены = Ложь;
		Иначе
			Модифицированность = Истина;
			ДанныеРегистрацийВНалоговыхОрганахИзменены = Истина;
			РегистрацияВНалоговомОргане = Параметр.ОсновнаяРегистрация;
		КонецЕсли;
		
		ЗаполнитьОписаниеРегистрацииВНалоговомОргане();
		
	Иначе 
		// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
		ПараметрыОповещенияЭДО = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаСправочника();
		ПараметрыОповещенияЭДО.Форма                            = ЭтотОбъект;
		ПараметрыОповещенияЭДО.МестоРазмещенияКоманд            = Элементы.КомандыЭДО;
		ПараметрыОповещенияЭДО.ЕстьОбработчикОбновитьКомандыЭДО = Истина;

		ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаСправочника(ИмяСобытия, Параметр, Источник, ПараметрыОповещенияЭДО);
		// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_Организации", , Объект.Ссылка);
	
	
	ДанныеРегистрацийВНалоговыхОрганахИзменены = Ложь;
	ДанныеРегистрацийПФРИзменены = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьДанныеУчетнойПолитикиИНалогов(ТекущийОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОткрытаФормаВыбораДаты Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если ЗавершениеРаботы И (ДанныеРегистрацийВНалоговыхОрганахИзменены ИЛИ ДанныеРегистрацийПФРИзменены) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы И ДанныеРегистрацийВНалоговыхОрганахИзменены Тогда
		ВосстановитьДанныеРегистрацийВНалоговыхОрганах();
	КонецЕсли;
	
	Если НЕ ЗавершениеРаботы И ДанныеРегистрацийПФРИзменены Тогда
		ВосстановитьДанныеРегистрацийВПФР();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОбменаСКонтролирующимиОрганамиПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	Возврат;
					
КонецПроцедуры

&НаКлиенте
Процедура ОбменФССНажатие(Элемент, СтандартнаяОбработка)
		
    Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ОбменСЭДОФССНажатие(Элемент, СтандартнаяОбработка)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбменРАРНажатие(Элемент, СтандартнаяОбработка)
		
    Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ИндивидуальныйПредпринимательПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ИндивидуальныйПредприниматель) Тогда
		Объект.ИНН = "";
		УправлениеФормойПереходНаСервер();
	Иначе
		ИзменитьИНН(Объект.ИндивидуальныйПредприниматель);
	КонецЕсли;
	
	ФИОФизическогоЛица = ПолучитьФИОФизическогоЛица(Объект.ИндивидуальныйПредприниматель);
	
	ФИОИндивидуальногоПредпринимателя	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2 %3",
		ФИОФизическогоЛица.Фамилия, ФИОФизическогоЛица.Имя, ФИОФизическогоЛица.Отчество);
		
	Объект.НаименованиеСокращенное	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='ИП %1 %2 %3'"),
		ФИОФизическогоЛица.Фамилия,
		?(ПустаяСтрока(ФИОФизическогоЛица.Имя), "", Лев(ФИОФизическогоЛица.Имя, 1) + "."),
		?(ПустаяСтрока(ФИОФизическогоЛица.Отчество), "", Лев(ФИОФизическогоЛица.Отчество, 1) + "."));
		
	Объект.НаименованиеПолное	= "";
	НаименованиеСокращенноеПриИзменении(Элементы.НаименованиеСокращенное);
	
КонецПроцедуры

&НаКлиенте
Процедура ГоловнаяОрганизацияПриИзменении(Элемент)
	ИзменитьИНН(Объект.ГоловнаяОрганизация);
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	Если СтрДлина(Объект.ИНН) >= 4 
		И ПустаяСтрока(Объект.КПП) Тогда
		
		Объект.КПП = Лев(Объект.ИНН, 4) + "01001";
		
	КонецЕсли;
	
	// Заполнение Организации по ИНН данными из ЕГРЮЛ/ЕГРИП
	УстановитьДоступностьКнопкиЗаполнитьПоИНН(ЭтотОбъект);
	// Конец Заполнение Организации по ИНН данными из ЕГРЮЛ/ЕГРИП
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОрганизацииПриИзменении(Элемент)
	ИзменитьВидОрганизацииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура АдресЛоготипаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	
	УправлениеФлагамиРаботыСКартинками(Истина, Ложь);
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры 

&НаКлиенте
Процедура АдресФаксимильнойПечатиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	
	УправлениеФлагамиРаботыСКартинками(Ложь, Истина);
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ИННОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ПриОкончанииВводаИНН(Текст);
КонецПроцедуры

&НаКлиенте
Процедура ИННОбособленногоПодразделенияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ПриОкончанииВводаИНН(Текст);
КонецПроцедуры

&НаКлиенте
Процедура ИННИПОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ПриОкончанииВводаИНН(Текст);
КонецПроцедуры

&НаКлиенте
Процедура КППОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ПриОкончанииВводаКПП(Текст);
КонецПроцедуры

&НаКлиенте
Процедура КППОбособленногоПодразделенияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ПриОкончанииВводаКПП(Текст);
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКПООкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ПриОкончанииВводаКодПоОКПО(Текст);
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКПОИндивидуальногоПредпринимателяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ПриОкончанииВводаКодПоОКПО(Текст);
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКПООбособленногоПодразделенияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ПриОкончанииВводаКодПоОКПО(Текст);
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяПолитикаПриИзменении(Элемент)
	УчетнаяПолитикаПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяПолитикаОрганизацийПериодСтрокойПриИзменении(Элемент)
	
	ВводМесяцаПриИзменении(ЭтаФорма,
								   "УчетнаяПолитикаОрганизаций.Период",
								   "УчетнаяПолитикаОрганизацийПериодСтрокой",
								   Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяПолитикаОрганизацийПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВводМесяцаНачалоВыбора(
		ЭтаФорма,
		ЭтаФорма,
		"УчетнаяПолитикаОрганизаций.Период",
		"УчетнаяПолитикаОрганизацийПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяПолитикаОрганизацийПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ВводМесяцаРегулирование(ЭтаФорма,
								"УчетнаяПолитикаОрганизаций.Период",
								"УчетнаяПолитикаОрганизацийПериодСтрокой",
								Направление,
								Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНалогаНаИмуществоКодНалоговойЛьготыОсвобождениеОтНалогообложенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
    Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборКодаНалоговойЛьготыЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Возврат;

КонецПроцедуры

&НаКлиенте
Процедура СтавкаНалогаНаИмуществоНалоговаяСтавкаПриИзменении(Элемент)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяСтавкаДвижимоеИмуществоПриИзменении(Элемент)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСтавкаНалогаНаИмуществоОсновныеСредстваНажатие(Элемент)
	
    Возврат;

КонецПроцедуры

&НаКлиенте
Процедура СтавкаНалогаНаИмуществоОсвобождениеОтНалогообложенияПриИзменении(Элемент)
	
	Возврат; // В УТ обработчик пустой
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНалогаНаИмуществоОсвобождениеОтНалогообложенияДвижимогоИмуществаПриИзменении(Элемент)
	
	Возврат; // В УТ обработчик пустой
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНалогаНаИмуществоСнижениеНалоговойСтавкиПриИзменении(Элемент)
	
	Возврат; // В УТ обработчик пустой
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНалогаНаИмуществоСнижениеНалоговойСтавкиДвижимоеИмуществоПриИзменении(Элемент)
	
	Возврат; // В УТ обработчик пустой
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНалогаНаИмуществоУменьшениеСуммыНалогаВПроцентахПриИзменении(Элемент)
	
	Возврат; // В УТ обработчик пустой
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНалогаНаИмуществоПроцентУменьшенияПриИзменении(Элемент)
	
	Возврат; // В УТ обработчик пустой
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНалогаНаИмуществоПриНаличии1ЛьготыЗаполнять1ЛистРаздела2ПриИзменении(Элемент)
	
	Возврат;
	
КонецПроцедуры

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыОткрытия = Новый Структура;
	
	Отбор = Новый Структура("ИмяРеквизита", Элемент.Имя);
	Строки = ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	Если ДанныеСтроки <> Неопределено
		И ДанныеСтроки.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.МеждународныйАдресОрганизации") Тогда
		
		ПараметрыОткрытия.Вставить("РазрешитьВводАдресаВСвободнойФорме", Ложь);
		ПараметрыОткрытия.Вставить("Страна", Объект.СтранаРегистрации);
	КонецЕсли;
	
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат) Экспорт
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

&НаСервере
Процедура КонтактнаяИнформацияПриСменеСтраницы()
	
	УправлениеКонтактнойИнформацией.ВыполнитьОтложеннуюИнициализацию(ЭтотОбъект, Объект);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВалютныеПлатежи") Тогда
		
		// Отключение отображения какого-то вида КИ пока в БСП не поддерживается, поэтому пока реализуем это самостоятельно.
		НаименованиеВида = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Справочники.ВидыКонтактнойИнформации.МеждународныйАдресОрганизации,
			"Наименование");
		
		Для Каждого ГруппаЭлементаКонтактнойИнформации Из ЭтотОбъект.Элементы.ГруппаКонтактнаяИнформация.ПодчиненныеЭлементы Цикл
			Если СтрСравнить(ГруппаЭлементаКонтактнойИнформации.Заголовок, НаименованиеВида) = 0 Тогда
				ГруппаЭлементаКонтактнойИнформации.Видимость = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура ПрефиксПриИзменении(Элемент)
	
	Если Найти(Объект.Префикс, "-") > 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нельзя в префиксе организации использовать символ ""-"".'"));
		Объект.Префикс = СтрЗаменить(Объект.Префикс, "-", "");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеСокращенноеПриИзменении(Элемент)
	
	СтруктураНаименования	= РазложитьСтрокуНаименования(Объект.НаименованиеСокращенное);
	
	Если ПустаяСтрока(Объект.НаименованиеПолное) Тогда
		Объект.НаименованиеПолное	= СформироватьНаименованиеПолное(СтруктураНаименования);
	Иначе
		
		АвтоНаименованиеПрежнее	= СформироватьНаименованиеПолное(РазложитьСтрокуНаименования(НаименованиеСокращенное));
		
		Если СокрЛП(Объект.НаименованиеПолное) = СокрЛП(АвтоНаименованиеПрежнее) Тогда
			Объект.НаименованиеПолное	= СформироватьНаименованиеПолное(СтруктураНаименования);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.Наименование) Тогда
		Объект.Наименование	= СформироватьНаименование(СтруктураНаименования);
	Иначе
		
		АвтоНаименованиеПрежнее	= СформироватьНаименование(РазложитьСтрокуНаименования(НаименованиеСокращенное));
		
		Если СокрЛП(Объект.Наименование) = СокрЛП(АвтоНаименованиеПрежнее) Тогда
			Объект.Наименование	= СформироватьНаименование(СтруктураНаименования);
		КонецЕсли;
		
	КонецЕсли;
	
	НаименованиеСокращенное	= Объект.НаименованиеСокращенное;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяПолитикаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = УчетнаяПолитикаОрганизаций.УчетнаяПолитика Тогда 
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПараметрыОрганизацииПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	Если ТекущаяСтраница.Имя = ПараметрыКонтактнойИнформации.ГруппаКонтактнаяИнформация.ГруппаДляРазмещения
		И Не ПараметрыКонтактнойИнформации.ГруппаКонтактнаяИнформация.ВыполненаОтложеннаяИнициализация Тогда
		
		КонтактнаяИнформацияПриСменеСтраницы();
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОрганизацииОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#Область Классификаторы

&НаКлиенте
Процедура КодОКВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьКодИзКлассификатора("ОКВЭД");
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКВЭДПриИзменении(Элемент)
	
	КодКлассификатораПриИзменении("ОКВЭД");
	
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКВЭДИндивидуальногоПредпринимателяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьКодИзКлассификатора("ОКВЭД");
	
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКВЭДИндивидуальногоПредпринимателяПриИзменении(Элемент)
	
	КодКлассификатораПриИзменении("ОКВЭД");
	
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКВЭДОбособленногоПодразделенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьКодИзКлассификатора("ОКВЭД");
	
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКВЭДОбособленногоПодразделенияПриИзменении(Элемент)
	
	КодКлассификатораПриИзменении("ОКВЭД");
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКВЭД2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьКодИзКлассификатора("ОКВЭД2");
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКВЭД2ПриИзменении(Элемент)
	
	КодКлассификатораПриИзменении("ОКВЭД2");
	
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКВЭД2ИндивидуальногоПредпринимателяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьКодИзКлассификатора("ОКВЭД2");
	
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКВЭД2ИндивидуальногоПредпринимателяПриИзменении(Элемент)
	
	КодКлассификатораПриИзменении("ОКВЭД2");
	
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКВЭД2ОбособленногоПодразделенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьКодИзКлассификатора("ОКВЭД2");
	
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКВЭД2ОбособленногоПодразделенияПриИзменении(Элемент)
	
	КодКлассификатораПриИзменении("ОКВЭД2");
	
КонецПроцедуры

&НаКлиенте
Процедура КрупнейшийНалогоплательщикПриИзменении(Элемент)
	
	Элементы.КодНалоговогоОрганаПолучателя.Доступность = Объект.КрупнейшийНалогоплательщик;
	
	Если НЕ Объект.КрупнейшийНалогоплательщик Тогда
		Объект.КодНалоговогоОрганаПолучателя = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СтавкаНалогаНаИмуществоПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Возврат; // В УТ обработчик пустой

КонецПроцедуры

&НаКлиенте
Процедура СтавкаНалогаНаИмуществоПериодПриИзменении(Элемент)
	Возврат; // В УТ обработчик пустой
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПСННажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//++ Локализация
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для продолжения необходимо записать объект. Записать?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("НастройкаПСНВыборЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
		
	ЗакрытиеФормыПрименениеПСН =  Новый ОписаниеОповещения("ЗакрытиеФормыПрименениеПСН", ЭтотОбъект, Новый Структура("Форма", ЭтаФорма));
	ЗначениеОтбора = Новый Структура("Владелец", Объект.Ссылка);
	ОткрытьФорму("Справочник.Патенты.ФормаСписка",
		Новый Структура("Отбор", ЗначениеОтбора),
		ЭтаФорма,,,,
		ЗакрытиеФормыПрименениеПСН,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыПрименениеЕНВД

&НаКлиенте
Процедура ПрименениеЕНВДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для продолжения необходимо записать объект. Записать?'");
		Ответ = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПрименениеЕНВДВыборЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФормуСпискаПрименениеЕНВД();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименениеЕНВДРозничнаяТорговляОблагаетсяЕНВДПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ТекстСообщения = НСтр("ru = 'Дата, с которой должны вступить в силу изменения по применению ЕНВД на складе ""%Склад%"".'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%", ТекущиеДанные.Склад);
	ПараметрыФормы.Вставить("ПоясняющийТекст", ТекстСообщения);
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Выберите дату'"));
	
	Если НЕ ОткрытаФормаВыбораДаты Тогда
		ОткрытаФормаВыбораДаты = Истина;
		ОткрытьФорму("ОбщаяФорма.ВыборДаты", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименениеЕНВДПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПрименениеЕНВДПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьОбъект(Команда)
	ПараметрыЗаписи = Новый Структура("НеЗакрыватьФорму", Истина);
	ЭтотОбъект.Записать(ПараметрыЗаписи);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыПФР(Команда)
	
	
	Возврат; // в УТ пустой
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыПФРОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	
	Возврат; // в УТ пустой
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыПФРЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	
	Возврат; // в УТ пустой
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыФСС(Команда)
		
    Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыТФОМС(Команда)
	
    Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыКлассификаторов(Команда)
	
    Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыРасчетаЗарплаты(Команда)
	
    Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыМестаРегистрации(Команда)
	
    Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКадровыйУчетИРасчетЗарплаты(Команда)
	
    Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБухучетИВыплатуЗарплаты(Команда)
    Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВоинскийУчет(Команда)
    Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРегистрациюВНалоговыхОрганах(Команда)
	
	ПроверитьЧтоЭтоНеНовыйЭлемент(НСтр("ru = 'Налоговые органы'"), Новый ОписаниеОповещения("ОткрытьРегистрациюВНалоговыхОрганахОбъектЗаписан", ЭтотОбъект));
			
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРегистрациюВНалоговыхОрганахОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Не ЗначениеЗаполнено(РегистрацииСохраненныеЗначения) Тогда
		РегистрацииВНалоговыхОрганахВХранилище();
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Объект.Ссылка);
	СтруктураПараметров.Вставить("ОсновнаяРегистрация", РегистрацияВНалоговомОргане);
	СтруктураПараметров.Вставить("ОткрытиеИзОрганизации", Истина);
	
	ОткрытьФорму("Справочник.РегистрацииВНалоговомОргане.Форма.ФормаНастройкиРегистраций", СтруктураПараметров, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЗаявлениеНаПодключениеОткрытьМастер(Команда)
	Возврат;
КонецПроцедуры

&НаКлиенте
Процедура ЗаявлениеНаПодключениеОткрытьСписок(Команда)
	
	Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЛоготипа(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеЛоготипаЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеЛоготипаФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЛоготипаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Записать();
    Иначе
        Возврат
    КонецЕсли;
    
    
    ДобавитьИзображениеЛоготипаФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЛоготипаФрагмент()
    
    УправлениеФлагамиРаботыСКартинками(Истина, Ложь);
    
    ИдентификаторФайла = Новый УникальныйИдентификатор;
    РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображениеЛоготипа(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.ФайлЛоготип) Тогда
		
		РаботаСФайламиКлиент.ОткрытьФормуФайла(Объект.ФайлЛоготип);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Отсутствует изображение для редактирования'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресЛоготипа");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображениеЛоготипа(Команда)
	
	Объект.ФайлЛоготип = Неопределено;
	АдресЛоготипа = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображениеЛоготипа(Команда)
	
	УправлениеФлагамиРаботыСКартинками(Истина, Ложь);
	ПросмотретьПрисоединенныйФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура ЛоготипИзПрисоединенныхФайлов(Команда)
	
	УправлениеФлагамиРаботыСКартинками(Истина, Ложь);
	ВыбратьКартинкуИзПрисоединенныхФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФаксимиле(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеФаксимилеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеФаксимилеФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФаксимилеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Записать();
    Иначе
        Возврат
    КонецЕсли;
    
    
    ДобавитьИзображениеФаксимилеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФаксимилеФрагмент()
    
    Перем ИдентификаторФайла;
    
    УправлениеФлагамиРаботыСКартинками(Ложь, Истина);
    
    ИдентификаторФайла = Новый УникальныйИдентификатор;
    РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображениеФаксимиле(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.ФайлФаксимильнаяПечать) Тогда
		
		РаботаСФайламиКлиент.ОткрытьФормуФайла(Объект.ФайлФаксимильнаяПечать);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Отсутствует изображение для редактирования'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресЛоготипа");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображениеФаксимиле(Команда)
	
	Объект.ФайлФаксимильнаяПечать = Неопределено;
	АдресФаксимильнойПечати = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображениеФаксимиле(Команда)
	
	УправлениеФлагамиРаботыСКартинками(Ложь, Истина);
	ПросмотретьПрисоединенныйФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура ФаксимилеИзПрисоединенныхФайлов(Команда)
	
	УправлениеФлагамиРаботыСКартинками(Ложь, Истина);
	ВыбратьКартинкуИзПрисоединенныхФайлов();
	
КонецПроцедуры // ФаксимилеИзПрисоединенныхФайлов()

&НаКлиенте
Процедура ПомощникРаботыФаксимильнойПечати(Команда)
	
	ПараметрКоманды = Новый Массив;
	ПараметрКоманды.Добавить(Объект.Ссылка);
	
	СтруктураДополнительныхПараметров = Новый Структура("ЗаголовокФормы", НСтр("ru = 'Как создать факсимильную подпись и печать?'"));
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Справочник.Организации", "НапечататьПомощникРаботыФаксимильнойПечати", ПараметрКоманды, Неопределено, СтруктураДополнительныхПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрСчетаНаОплату(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		
		ТекстВопроса = Нстр("ru = 'Данные еще не записаны.
		|Переход к предварительному просмотру счета на оплату доступен только после записи данных.
		|Данные будут записаны.'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПредварительныйПросмотрСчетаНаОплатуЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
        Возврат;
		
	КонецЕсли;
	
	ПредварительныйПросмотрСчетаНаОплатуФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрСчетаНаОплатуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
        Возврат;
    КонецЕсли;
    
    ЭлементЗаписан = Записать();
    
    Если Не ЭлементЗаписан Тогда
        Возврат;
    КонецЕсли;
    
    
    ПредварительныйПросмотрСчетаНаОплатуФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрСчетаНаОплатуФрагмент()
    
    Перем ПараметрКоманды, СтруктураДополнительныхПараметров;
    
    ПараметрКоманды = Новый Массив;
    ПараметрКоманды.Добавить(Объект.Ссылка);
    
    СтруктураДополнительныхПараметров = Новый Структура("ЗаголовокФормы", НСтр("ru='Предварительный просмотр печатной формы ""Счет на оплату"".'"));
    УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Обработка.ПечатьСчетовНаОплату", "ПредварительныйПросмотрПечатнойФормыСчетНаОплату", ПараметрКоманды, Неопределено, СтруктураДополнительныхПараметров);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовуюУчетнуюПолитику(Команда)
	
	ИзменятьУчетнуюПолитикуПриЗаписиНовой = Истина;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ПериодУчетнойПолитики", УчетнаяПолитикаОрганизаций.Период);
	ПараметрыФормы.Вставить("ВидОрганизации", ВидОрганизации);
	
	ОткрытьФорму("Справочник.УчетныеПолитикиОрганизаций.ФормаОбъекта",
		ПараметрыФормы,
		ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИсториюИзмененийУчетнойПолитики(Команда)
	
	ТолькоПросмотрИстории = Ложь;
	РедактированиеПериодическихСведенийКлиент.ОткрытьИсторию("УчетнаяПолитикаОрганизаций",
		ГоловнаяОрганизация,
		ЭтаФорма,
		ТолькоПросмотрИстории);

КонецПроцедуры

&НаКлиенте
Процедура УчетнаяПолитикаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ключ", УчетнаяПолитикаОрганизаций.УчетнаяПолитика);
	ПараметрыФормы.Вставить("ВидОрганизации", ВидОрганизации);
	
	ОткрытьФорму("Справочник.УчетныеПолитикиОрганизаций.ФормаОбъекта",
		ПараметрыФормы,
		ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьИсториюИзмененияСтавкиНалогаНаИмущество(Команда)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядокУплатыНалоговНаМестах(Команда)
	
	ПроверитьЧтоЭтоНеНовыйЭлемент(НСтр("ru = 'Порядку уплаты авансов по налогам'"), Новый ОписаниеОповещения("ОткрытьПорядокУплатыАвансовПоНалогам", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПорядокУплатыАвансовПоНалогам(Результат, ДополнительныеПараметры) Экспорт 
	
	Возврат;
	
КонецПроцедуры

// Конец ИнтеграцияГИСМ

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыЭДО()
	
	ОбменСКонтрагентамиКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

// Обработчик команды, создаваемой механизмом запрета редактирования ключевых реквизитов.
//
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Если Не Объект.Ссылка.Пустая() Тогда
		
		ПараметрыФормыРазблокировки = Новый Структура;
		ПараметрыФормыРазблокировки.Вставить("ОбособленноеПодразделение", Объект.ОбособленноеПодразделение);

		ОткрытьФорму("Справочник.Организации.Форма.РазблокированиеРеквизитов", ПараметрыФормыРазблокировки,,,,, 
			Новый ОписаниеОповещения("Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение", ЭтотОбъект), 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда
        
        ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтаФорма, Результат);
        
    КонецЕсли;

КонецПроцедуры

// Заполнение Организации по ИНН данными из ЕГРЮЛ/ЕГРИП
&НаКлиенте
Процедура ЗаполнитьПоИНН(Команда)
	
	ИННЗаполненКорректно = Истина;
	
	ТекстСообщения = "";
	Если ПустаяСтрока(Объект.ИНН) Тогда
		ИННЗаполненКорректно = Ложь;
	ИначеЕсли НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(Объект.ИНН, 
		                                                                          ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(Объект.ЮрФизЛицо),
		                                                                          ТекстСообщения) Тогда
		
		ОчиститьСообщения();
		ИННЗаполненКорректно = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,"Объект.ИНН",,);
			
	КонецЕсли;
	
	Если ЗаполнениеРеквизитовПоДаннымИННВозможно(ИННЗаполненКорректно) Тогда
		ОтключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте");
		РеквизитыКонтрагента = ПартнерыИКонтрагентыВызовСервера.ДанныеКонтрагентаПоИНН(
		                       ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(Объект.ЮрФизЛицо),
		                       Объект.ИНН,
		                       ФоновоеЗаданиеИдентификатор);
		
		ВыполнитьЗаполнениеРеквизитовПоИНН(РеквизитыКонтрагента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеРеквизитовПоИННЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьРеквизитыКонтрагентаПоПолученнымДанным(ДополнительныеПараметры.РеквизитыКонтрагента);
		
	КонецЕсли;

КонецПроцедуры
// Конец Заполнение Организации по ИНН данными из ЕГРЮЛ/ЕГРИП

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГоловнаяОрганизация);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ГоловнаяОрганизация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОбособленноеПодразделение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьФИОФизическогоЛица(ИндивидуальныйПредприниматель)
	
	Возврат ФизическиеЛицаУТ.ФамилияИмяОтчество(ИндивидуальныйПредприниматель);
	
КонецФункции

&НаКлиенте
Функция СформироватьНаименование(СтруктураНаименования)
	
	Возврат	СтруктураНаименования.Наименование
			+ ?(ПустаяСтрока(СтруктураНаименования.ОрганизационноПравоваяФормаСокращенно), "", " ")
			+ СтруктураНаименования.ОрганизационноПравоваяФормаСокращенно;

КонецФункции

&НаКлиенте
Функция СформироватьНаименованиеПолное(СтруктураНаименования)
	Перем НаименованиеПолное;
	
	Если Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо") Тогда
		НаименованиеПолное	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2",
			СтруктураНаименования.ОрганизационноПравоваяФорма, ?(ЗначениеЗаполнено(ФИОИндивидуальногоПредпринимателя),ФИОИндивидуальногоПредпринимателя,СтруктураНаименования.Наименование));
	Иначе
		
		Если НЕ ЗначениеЗаполнено(СтруктураНаименования.ОрганизационноПравоваяФорма) Тогда
			НаименованиеПолное = СтруктураНаименования.Наименование;
		Иначе
			НаименованиеПолное	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 ""%2""",
				СтруктураНаименования.ОрганизационноПравоваяФорма, СтруктураНаименования.Наименование);
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат	НаименованиеПолное;
	
КонецФункции

&НаКлиенте
Функция РазложитьСтрокуНаименования(Знач Наименование)
	
	Результат	= Новый Структура("Наименование,ОрганизационноПравоваяФорма,ОрганизационноПравоваяФормаСокращенно");
	
	Наименование	= СокрЛП(Наименование);
	
	Если УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ООО'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Общество с ограниченной ответственностью'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ООО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ОАО'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Открытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ОАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ЗАО'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Закрытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ЗАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ИП'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Индивидуальный предприниматель'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ИП'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Общество с ограниченной ответственностью'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Общество с ограниченной ответственностью'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ООО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Открытое акционерное общество'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Открытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ОАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Закрытое акционерное общество'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Закрытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ЗАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Индивидуальный предприниматель'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Индивидуальный предприниматель'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ИП'");
	Иначе
		ОрганизационноПравоваяФорма				= "";
		ОрганизационноПравоваяФормаСокращенно	= "";
	КонецЕсли;
	
	Если Объект.ЮридическоеФизическоеЛицо <> ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо")
	   И НЕ ПустаяСтрока(ОрганизационноПравоваяФорма) Тогда
		КоличествоКавычек	= СтрЧислоВхождений(Наименование, """");
		Если КоличествоКавычек > 1 Тогда
			// Наименование организации внутри внешних кавычек
			ПозицияПервойКавычки	= Найти(Наименование, """");
			ПозицияПоследнейКавычки	= 0;
			
			ВремНаименование	= Наименование;
			
			ПозицияКавычки		= ПозицияПервойКавычки;
			Пока ПозицияКавычки > 0 Цикл
				ПозицияПоследнейКавычки	= ПозицияПоследнейКавычки + ПозицияКавычки;
				ВремНаименование	= Сред(ВремНаименование, ПозицияКавычки + 1);
				ПозицияКавычки		= Найти(ВремНаименование, """");
			КонецЦикла;
			
			Наименование	= Сред(Наименование, ПозицияПервойКавычки + 1, ПозицияПоследнейКавычки - ПозицияПервойКавычки - 1);
			Если НЕ КоличествоКавычек%2 = 0 Тогда
				Наименование	= Наименование + """";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Результат.Наименование							= СокрЛП(Наименование);
	Результат.ОрганизационноПравоваяФорма			= ОрганизационноПравоваяФорма;
	Результат.ОрганизационноПравоваяФормаСокращенно	= ОрганизационноПравоваяФормаСокращенно;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция УбратьИзНаименованияОрганизационнуюФорму(Наименование, ИмяОрганизационнойФормы)

	Результат	= Ложь;
	
	Наименование	= СокрЛП(Наименование);
	
	ДлинаНаименования			= СтрДлина(Наименование);
	ДлинаОрганизационнойФормы	= СтрДлина(ИмяОрганизационнойФормы);
	
	Если Лев(Наименование, ДлинаОрганизационнойФормы) = ИмяОрганизационнойФормы Тогда
		Наименование	= СокрЛ(Сред(Наименование, ДлинаОрганизационнойФормы + 1));
		Результат		= Истина;
	КонецЕсли;	
	
	Если Прав(Наименование, ДлинаОрганизационнойФормы) = ИмяОрганизационнойФормы Тогда
		Наименование	= СокрП(Лев(Наименование, ДлинаНаименования - ДлинаОрганизационнойФормы - 1));
		Результат		= Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура УправлениеФормойНаСервере()
	
	УправлениеПредприятием = НЕ ПолучитьФункциональнуюОпцию("УправлениеТорговлей");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, 
			"ГруппаВидОрганизации",
			"Доступность", 
			ПравоДоступа("Изменение", Метаданные.Справочники.Организации));
	Если ВидОрганизации = "ЮридическоеЛицо" Тогда
		
		Элементы.Наименование.ПодсказкаВвода = НСтр("ru = 'например, Стройснаб ООО'");
		Элементы.НаименованиеСокращенное.ПодсказкаВвода = НСтр("ru = 'например, ООО ""Стройснаб""'");
		Элементы.НаименованиеПолное.ПодсказкаВвода = НСтр("ru = 'например, Общество с ограниченной ответственностью Стройснаб'");
		
	ИначеЕсли ВидОрганизации = "ОбособленноеПодразделение" Тогда
		
		Элементы.Наименование.ПодсказкаВвода = НСтр("ru = 'например, Филиал ТД (Тамбов)'");
		Элементы.НаименованиеСокращенное.ПодсказкаВвода = НСтр("ru = 'например, ТД Филиал (Тамбов)'");
		Элементы.НаименованиеПолное.ПодсказкаВвода = НСтр("ru = 'например, Торговый дом ""Комплексный"" - обособленное подразделение'");
		
	ИначеЕсли ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда
		
		Элементы.Наименование.ПодсказкаВвода = НСтр("ru = 'например, Иванова Наталья Игнатьевна'");
		Элементы.НаименованиеСокращенное.ПодсказкаВвода = НСтр("ru = 'например, ИП Иванова Наталья Игнатьевна'");
		Элементы.НаименованиеПолное.ПодсказкаВвода = НСтр("ru = 'например, Индивидуальный предприниматель Иванова Наталья Игнатьевна'");
		
	КонецЕсли;
		
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГоловнаяОрганизация",
																	"Видимость", (ВидОрганизации = "ОбособленноеПодразделение" И
																					ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс")));
	
	ВидимостьГруппаИндивидуальныйПредприниматель = 
		УправлениеПредприятием И ВидОрганизации = "ИндивидуальныйПредприниматель";
		
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
				Элементы, 
				"ГруппаИндивидуальныйПредприниматель",
				"Видимость", 
				ВидимостьГруппаИндивидуальныйПредприниматель);
		
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
				Элементы, 
				"ГруппаОтступКрупнейшийНалогоплательщик",
				"Видимость", 
				УправлениеПредприятием И ВидОрганизации = "ЮридическоеЛицо");
		
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
				Элементы, 
				"КодНалоговогоОрганаПолучателя",
				"Доступность", 
				Объект.КрупнейшийНалогоплательщик);
		
	Если ВидОрганизации = "ОбособленноеПодразделение" Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСтраницОсновныхКодов",
																		"ТекущаяСтраница", Элементы.ОсновныеКодыОбособленногоПодразделения);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГоловнаяОрганизация",
																		"ТолькоПросмотр", ЗначениеЗаполнено(Объект.ГоловнаяОрганизация));
	ИначеЕсли ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСтраницОсновныхКодов",
																		"ТекущаяСтраница", Элементы.ОсновныеКодыИндивидуальногоПредпринимателя);
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСтраницОсновныхКодов",
																		"ТекущаяСтраница", Элементы.ОсновныеКодыЮрЛица);
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ГруппаСвидетельствоИП, СвидетельствоСерияНомер, СвидетельствоДатаВыдачи, ДекорацияРегНомерИП, ДекорацияДействуетСИП",
																	"Видимость", (ВидОрганизации = "ИндивидуальныйПредприниматель"));
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию",
																	"Видимость", (ВидОрганизации = "ОбособленноеПодразделение"));
	
	Если ВидОрганизации = "ЮридическоеЛицо" Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИНН",
																		"Маска", "9999999999");
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОГРН",
																		"Маска", "9999999999999");
	КонецЕсли;
	
	Если НЕ УправлениеПредприятием Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
				Элементы, 
				"ПоказатьИсториюИзмененийРегистрацииВНалоговомОргане, ГруппаРегистрационныеДанные, ГруппаТерриториальныеУсловияГрафикРаботыОтступ, ГруппаКадровыйУчетИРасчетЗарплатыОтступ, ГруппаБухучетИВыплатаЗарплатыОтступ, ГруппаВоинскийУчетОтступ",
				"Видимость", 
				Ложь);
	КонецЕсли;
		
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс")
		И НЕ ВидОрганизации = "ОбособленноеПодразделение" Тогда
		ЭлементСписка = Элементы.ВидОрганизации.СписокВыбора.НайтиПоЗначению("ОбособленноеПодразделение");
		
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.ВидОрганизации.СписокВыбора.Удалить(ЭлементСписка);	
		КонецЕсли;
		
	КонецЕсли;
	
	ДоступностьКнопкиРегистрацииВНалоговомОргане = ПравоДоступа("Изменение", Метаданные.Справочники.РегистрацииВНалоговомОргане);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ГиперссылкаРегистрацияВНалоговыхОрганах",
																	"Доступность", ДоступностьКнопкиРегистрацииВНалоговомОргане);
	ДоступностьИзмененияУчетнойПолитикиИНалогов = 
								ПравоДоступа("Изменение", Метаданные.РегистрыСведений.УчетнаяПолитикаОрганизаций)
								ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПримененияЕНВД);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ГруппаУчетнаяПолитикаИДругиеНастройки",
																	"Доступность", ДоступностьИзмененияУчетнойПолитикиИНалогов, Истина);
																	
	Если НЕ УправлениеПредприятием Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ГруппаУчетнаяПолитикаИДругиеНастройки",
																	"Заголовок", НСтр("ru='Учетная политика'"));
	КонецЕсли;
	
	СуществуютУчетныеПолитики = СуществуютУчетныеПолитикиОрганизаций();
	РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(ЭтаФорма, "УчетнаяПолитикаОрганизаций", Объект.Ссылка);
	РедактированиеПериодическихСведенийКлиентСервер.ОбновитьНаборЗаписейИстории(ЭтаФорма, "УчетнаяПолитикаОрганизаций", Объект.Ссылка);
	Если Не ЗначениеЗаполнено(УчетнаяПолитикаОрганизаций.Период) Тогда
		УчетнаяПолитикаОрганизаций.Период = НачалоГода(ТекущаяДатаСеанса());
	КонецЕсли;
	ОбновитьПолеУчетнаяПолитикаОрганизацийПериод(ЭтаФорма);
	
	НастроитьТаблицуПримененияЕНВД();
	
	
	УстановитьСвойстваУчетнойПолитикиИНалогов();
	
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, 
			"ГруппаПроверки",
			"Доступность", 
			ПравоДоступа("Изменение", Метаданные.Справочники.Организации));
			
	Элементы.УчетнаяПолитикаИстория.Доступность = ЗначениеЗаполнено(Объект.Ссылка);
	Элементы.ПолучитьИсториюИзмененияСтавкиНалогаНаИмущество.Доступность = ЗначениеЗаполнено(Объект.Ссылка);
	
КонецПроцедуры


&НаСервере
Процедура ИзменитьВидОрганизацииНаСервере()
	
	Если ВидОрганизации = "ЮридическоеЛицо" Тогда
			Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");
			Объект.ОбособленноеПодразделение = Ложь;
			
			Объект.ГоловнаяОрганизация = Объект.Ссылка;
			Объект.ИндивидуальныйПредприниматель = Справочники.ФизическиеЛица.ПустаяСсылка();
			Объект.СвидетельствоДатаВыдачи = Неопределено;
			Объект.СвидетельствоСерияНомер = "";
			Объект.ЦифровойИндексОбособленногоПодразделения = "";
			Объект.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию = Ложь;
			
		ИначеЕсли ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда 
			Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель");
			Объект.ОбособленноеПодразделение = Ложь;
			
			Объект.ГоловнаяОрганизация = Объект.Ссылка;
			Объект.ИНН = "";
			Объект.КПП = "";
			Объект.ЦифровойИндексОбособленногоПодразделения = "";
			Объект.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию = Ложь;
			
		ИначеЕсли ВидОрганизации = "ОбособленноеПодразделение" Тогда
			 Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");
			 Объект.ОбособленноеПодразделение = Истина;
			 Объект.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка();
			 Объект.ИндивидуальныйПредприниматель = Справочники.ФизическиеЛица.ПустаяСсылка();
			 Объект.СвидетельствоДатаВыдачи = Неопределено;
			 Объект.СвидетельствоСерияНомер = "";
		Иначе ВызватьИсключение Нстр("ru = 'Произошла ошибка при изменении типа организации. Обратитесь к администратору.'");
		КонецЕсли;
	
	Модифицированность = Истина;
	
	УправлениеФормойНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФлагамиРаботыСКартинками(ЭтоРаботаСЛоготипом = Ложь, ЭтоРаботаСФаксимиле = Ложь)
	
	РаботаСЛоготипом = ЭтоРаботаСЛоготипом;
	РаботаСФаксимиле = ЭтоРаботаСФаксимиле;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайлов()
	
	ПараметрыВыбораКартинки = Новый Структура;
	ПараметрыВыбораКартинки.Вставить("ВладелецФайла", Объект.Ссылка);
	ПараметрыВыбораКартинки.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыВыбораКартинки.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы", ПараметрыВыбораКартинки, ЭтаФорма);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл()
	
	ОчиститьСообщения();
	
	ИмяРеквизитаОбъекта = "";
	
	Если РаботаСЛоготипом Тогда
		
		ИмяРеквизитаОбъекта = "ФайлЛоготип";
		
	ИначеЕсли РаботаСФаксимиле Тогда
		
		ИмяРеквизитаОбъекта = "ФайлФаксимильнаяПечать";
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИмяРеквизитаОбъекта)
		И ЗначениеЗаполнено(Объект[ИмяРеквизитаОбъекта]) Тогда
		
		ДанныеФайла = ПолучитьДанныеФайла(ЭтаФорма.Объект[ИмяРеквизитаОбъекта], УникальныйИдентификатор);
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Отсутствует изображение для просмотра'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресКартинки");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(ФайлКартинки, УникальныйИдентификатор)
	
	Возврат РаботаСФайлами.ДанныеФайла(ФайлКартинки, УникальныйИдентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		АдресКартинки = РаботаСФайлами.ДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		АдресКартинки = "";
	КонецПопытки;
	
	Возврат АдресКартинки;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеНаКлиентеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеНаКлиентеФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Если Не Записать() Тогда
            Возврат;
        КонецЕсли;
    Иначе
        Возврат;
    КонецЕсли;
    
    
    ДобавитьИзображениеНаКлиентеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеФрагмент()
    
    Перем ИдентификаторФайла, ИмяРеквизитаОбъекта;
    
    Если РаботаСЛоготипом Тогда
        
        ИмяРеквизитаОбъекта = "ФайлЛоготип";
        
    ИначеЕсли РаботаСФаксимиле Тогда
        
        ИмяРеквизитаОбъекта = "ФайлФаксимильнаяПечать";
        
    КонецЕсли;
    
    Если ЗначениеЗаполнено(Объект[ИмяРеквизитаОбъекта]) Тогда
        
        ПросмотретьПрисоединенныйФайл();
        
    ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
        
        ИдентификаторФайла = Новый УникальныйИдентификатор;
        
        РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, НоменклатураКлиент.ФильтрФайловИзображений());
        
    КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура ПриОкончанииВводаИНН(ТекстРедактирования) 
	
	Перем ТекстСообщения;
	ЭтоЮрЛицо = Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо")
		ИЛИ Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент");
	
	ОчиститьСообщения();
	
	Если НЕ ПустаяСтрока(ТекстРедактирования) 
		И НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ТекстРедактирования, 
			ЭтоЮрЛицо, 
			ТекстСообщения) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,"Объект.ИНН",,);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОкончанииВводаКодПоОКПО(ТекстРедактирования)
	
	Перем ТекстСообщения;
	ОчиститьСообщения();
	
	ЭтоЮрЛицо = Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо")
		ИЛИ Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент");
	
	Если НЕ ПустаяСтрока(ТекстРедактирования) 
		И НЕ РегламентированныеДанныеКлиентСервер.КодПоОКПОСоответствуетТребованиям(ТекстРедактирования, 
			ЭтоЮрЛицо,
			ТекстСообщения) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,"Объект.КодПоОКПО",,);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОкончанииВводаКПП(ТекстРедактирования)
	
	Перем ТекстСообщения;
	ОчиститьСообщения();
	
	Если НЕ ПустаяСтрока(ТекстРедактирования)
		И НЕ РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(ТекстРедактирования, ТекстСообщения) Тогда
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,"Объект.КПП",,);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНаборЗаписейПериодическихСведений(ИмяРегистра, ВедущийОбъект) Экспорт
	
	РедактированиеПериодическихСведений.ПрочитатьНаборЗаписей(ЭтаФорма, ИмяРегистра, ВедущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименениеЕНВДВыборЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Записать() Тогда
		ОткрытьФормуСпискаПрименениеЕНВД();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпискаПрименениеЕНВД()
	
	ТекущаяСтрока = Элементы.ПрименениеЕНВД.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Склад = ТекущаяСтрока.Склад;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Отбор", Новый Структура("Организация, Склад", Объект.Ссылка, Склад));
	
	ОткрытьФорму("РегистрСведений.ПримененияЕНВД.ФормаСписка",
		СтруктураПараметров, 
		ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

//++ Локализация
&НаКлиенте
Процедура НастройкаПСНВыборЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрытиеФормыПрименениеПСН =  Новый ОписаниеОповещения("ЗакрытиеФормыПрименениеПСН", ЭтотОбъект, Новый Структура("Форма", ЭтаФорма));
	ЗначениеОтбора = Новый Структура("Владелец", Объект.Ссылка);
	ОткрытьФорму("Справочник.Патенты.ФормаСписка",
		Новый Структура("Отбор", ЗначениеОтбора),
		ЭтаФорма,,,,
		ЗакрытиеФормыПрименениеПСН,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыПрименениеПСН(Параметры, ДополнительныеПараметры) Экспорт
	УстановитьСвойстваУчетнойПолитикиИНалогов();
КонецПроцедуры
//-- Локализация

////////////////////////////////////////////////////////////////////////////////
// Заполнение описания параметров организации

&НаСервере
Процедура ЗаполнитьОписанияПараметров()
	
	ЗаполнитьОписаниеРегистрацииВНалоговомОргане();
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьОписаниеРегистрацииВНалоговомОргане(ЗаполнятьДанныеРегистрацииНО = Ложь)
	
	ПравоЧтения = ПравоДоступа("Чтение", Метаданные.Справочники.РегистрацииВНалоговомОргане);
	
	КоличествоНалоговыхОрганов = 0;
	
	Если ПравоЧтения Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Регистрация.РегистрацияВНалоговомОргане) КАК КоличествоНалоговыхОрганов
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОбособленныеПодразделения.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
		|	ИЗ
		|		РегистрСведений.РегистрацииВНалоговомОргане КАК ОбособленныеПодразделения
		|	ГДЕ
		|		ОбособленныеПодразделения.Организация = &Организация
		|		И ОбособленныеПодразделения.РегистрацияВНалоговомОргане <> &РегистрацияВНалоговомОргане
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		Организации.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
		|	ИЗ
		|		Справочник.Организации КАК Организации
		|	ГДЕ
		|		Организации.ОбособленноеПодразделение
		|		И Организации.ГоловнаяОрганизация = &Организация
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
		|	ИЗ
		|		РегистрСведений.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
		|	ГДЕ
		|		РегистрацииВНалоговомОргане.Организация.ОбособленноеПодразделение
		|		И РегистрацииВНалоговомОргане.Организация.ГоловнаяОрганизация = &Организация
		|		И РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане <> &РегистрацияВНалоговомОргане
		|
		|	) КАК Регистрация");
		
		Запрос.УстановитьПараметр("Организация", Объект.Ссылка);
		Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			КоличествоНалоговыхОрганов = Выборка.КоличествоНалоговыхОрганов;
		Иначе
			КоличествоНалоговыхОрганов = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		
		ОписаниеРегистрацииВНалоговыхОрганах = НСтр("ru = 'Организация состоит на учете в налоговом органе:'")
			+ " %РегистрацияВНалоговомОргане%.";
		ОписаниеРегистрацииВНалоговыхОрганах = СтрЗаменить(
			ОписаниеРегистрацииВНалоговыхОрганах,
			"%РегистрацияВНалоговомОргане%",
			РегистрацияВНалоговомОргане);
		
		Если ЗаполнятьДанныеРегистрацииНО Тогда
			РеквизитыНО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РегистрацияВНалоговомОргане, "Код, НаименованиеИФНС");
			Объект.КодНалоговогоОргана 			= РеквизитыНО.Код;
			Объект.НаименованиеНалоговогоОргана = РеквизитыНО.НаименованиеИФНС;
		КонецЕсли;
		
	Иначе
		
		ОписаниеРегистрацииВНалоговыхОрганах = НСтр("ru = 'Организация не состоит на учете в налоговом органе.'");
		
		Если ЗаполнятьДанныеРегистрацииНО Тогда
			Объект.КодНалоговогоОргана 			= "";
			Объект.НаименованиеНалоговогоОргана = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Если КоличествоНалоговыхОрганов > 0 Тогда
		ОписаниеРегистрацииВНалоговыхОрганах = ОписаниеРегистрацииВНалоговыхОрганах
			+ " " + НСтр("ru = 'Обособленные подразделения состоят на учете в'") + " %КоличествоНалоговыхОрганов% ";
		ОписаниеРегистрацииВНалоговыхОрганах = СтрЗаменить(
			ОписаниеРегистрацииВНалоговыхОрганах,
			"%КоличествоНалоговыхОрганов%",
			Формат(КоличествоНалоговыхОрганов,"ЧГ=0"));
		Если КоличествоНалоговыхОрганов <> 11 И Прав(Строка(КоличествоНалоговыхОрганов), 1) = "1" Тогда
			ОписаниеРегистрацииВНалоговыхОрганах = ОписаниеРегистрацииВНалоговыхОрганах + НСтр("ru = 'налоговом органе.'");
		Иначе
			ОписаниеРегистрацииВНалоговыхОрганах = ОписаниеРегистрацииВНалоговыхОрганах + НСтр("ru = 'налоговых органах.'");
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ГиперссылкаРегистрацияВНалоговыхОрганах.РасширеннаяПодсказка.Заголовок = ОписаниеРегистрацииВНалоговыхОрганах;
	
КонецПроцедуры

&НаСервере
Функция ИзменитьИНН(СсылкаНаОбъект)
	Объект.ИНН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ИНН");
	УправлениеФормойНаСервере();
КонецФункции

&НаСервере
Функция ГоловныеОрганизацииОбособленногоПодразделения()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = Организации.Ссылка
	|	И Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|	И Организации.Ссылка <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьЧтоЭтоНеНовыйЭлемент(ИмяФормы, ОповещениеПослеЗаписи, ТекстВопроса = Неопределено)
	
	// Проверим, что это не новый элемент справочника.
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если ТекстВопроса = Неопределено Тогда
			ТекстВопроса = Нстр("ru = 'Данные еще не записаны.
			|Переход к ""%ИмяФормы%"" возможен только после записи данных.
			|Данные будут записаны.'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ИмяФормы%", ИмяФормы);
		КонецЕсли;
				
		ПоказатьВопрос(Новый ОписаниеОповещения("ПроверитьЧтоЭтоНеНовыйЭлементОбработкаОтвета", ЭтотОбъект, ОповещениеПослеЗаписи), ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеПослеЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЧтоЭтоНеНовыйЭлементОбработкаОтвета(КодОтвета, ДополнительныеПараметры) Экспорт
	
	Если КодОтвета = КодВозвратаДиалога.ОК Тогда 
		
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("НеЗакрыватьФорму", Истина);
		
		ЭлементЗаписан = Записать(ПараметрыЗаписи);
		
		Если Не ЭлементЗаписан Тогда
			Возврат;
		КонецЕсли;
		
	    Оповещение = ДополнительныеПараметры;
		
		ВыполнитьОбработкуОповещения(Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойПереходНаСервер()
	УправлениеФормойНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДействияПослеЗаписиУчетнойПолитики(Знач УчетнаяПолитика)
	
	Если ИзменятьУчетнуюПолитикуПриЗаписиНовой Тогда
		УчетнаяПолитикаОрганизаций.УчетнаяПолитика = УчетнаяПолитика;
		Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаОрганизаций.Период) Тогда
			УчетнаяПолитикаОрганизаций.Период = НачалоГода(ТекущаяДатаСеанса());
		КонецЕсли;
		ИзменятьУчетнуюПолитикуПриЗаписиНовой = Ложь;
		Модифицированность = Истина;
		СуществуютУчетныеПолитики = СуществуютУчетныеПолитикиОрганизаций();

	КонецЕсли;
	
	НастроитьТаблицуПримененияЕНВД();
	УстановитьСвойстваУчетнойПолитикиИНалогов();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьТаблицуПримененияЕНВД()

	Если ПолучитьФункциональнуюОпцию("ИспользоватьРозничныеПродажи") Тогда
		Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПримененияЕНВД) Тогда
			Элементы.ГруппаОтступПрименениеЕНВД.Видимость = Ложь;
		ИначеЕсли НЕ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПримененияЕНВД) Тогда
			Элементы.ГруппаОтступПрименениеЕНВД.Доступность = Ложь;
			ОбновитьТаблицуПримененияЕНВД();
		Иначе
			ОбновитьТаблицуПримененияЕНВД();
		КонецЕсли;
	Иначе
		Элементы.ГруппаОтступПрименениеЕНВД.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуПримененияЕНВД()
	
	ПрименениеЕНВД.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ПримененияЕНВД.РозничнаяТорговляОблагаетсяЕНВД, ЛОЖЬ) КАК РозничнаяТорговляОблагаетсяЕНВД,
	|	ЕСТЬNULL(ПримененияЕНВД.Период, &ТекущаяДата) КАК Период,
	|	""История"" КАК История,
	|	Склады.Ссылка КАК Склад
	|ИЗ
	|	Справочник.Склады КАК Склады
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПримененияЕНВД КАК ПримененияЕНВД
	|		ПО Склады.Ссылка = ПримененияЕНВД.Склад
	|			И (ПримененияЕНВД.Организация = &ГоловнаяОрганизация)
	|			И (ЕСТЬNULL(ПримененияЕНВД.Период, &ТекущаяДата) <= &ТекущаяДата)
	|ГДЕ
	|	Склады.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ,
	|	Склад
	|ИТОГИ ПО
	|	Склад";
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПараметрыСравнения = Новый Массив;
	ПараметрыСравнения.Добавить("РозничнаяТорговляОблагаетсяЕНВД");
	Для Каждого СтрокаРезультатаПоСкладу Из РезультатЗапроса.Строки Цикл
		СтрокаТаблицы = ПрименениеЕНВД.Добавить();
		ЗагрузитьНаиболееРанниеДанныеВРеквизитыФормы(СтрокаРезультатаПоСкладу.Строки, СтрокаТаблицы, ПараметрыСравнения);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитГоловнаяОрганизация()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|				И Организации.ОбособленноеПодразделение
	|			ТОГДА Организации.ГоловнаяОрганизация
	|		ИНАЧЕ Организации.Ссылка
	|	КОНЕЦ КАК ГоловнаяОрганизация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Объект.Ссылка);
	
	ДанныеГоловнаяОрганизация = Запрос.Выполнить().Выбрать();
	Пока ДанныеГоловнаяОрганизация.Следующий() Цикл
		ГоловнаяОрганизация = ДанныеГоловнаяОрганизация.ГоловнаяОрганизация;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораДатыНаСервере(ВыбраннаяДата)
	
	ОткрытаФормаВыбораДаты = Ложь;

КонецПроцедуры

// Процедура из таблицы значений выбирает наиболее раннюю актуальную информацию.
// Например, имеем:
// 	1.01.2013 - Общая система налогообложения
//  1.02.2013 - Упрощенная система налогообложения
//  1.03.2013 - Общая система налогообложения  <--
//  1.04.2013 - Общая система налогообложения
//  1.05.2013 - Общая система налогообложения
// В данном случае будет выбрана третья строка, поскольку информация в ней актуальна по сравнению с последней записью,
// и между выбранной и последней строками информация одинакова.
//
// Параметры
//	ТаблицаЗначений - ТаблицаЗначений - таблица значений с данными, из которых будет производиться выбор
//	ПриемникДанных - Произвольный - содержит в себе объект-приемник выбранных данных (например, форма, строка таблицы значений и т.д.)
//	ПараметрСравнения - Строка - параметр, по которому будет идти сравнение на актуальность.
&НаСервере
Процедура ЗагрузитьНаиболееРанниеДанныеВРеквизитыФормы(ТаблицаЗначений, ПриемникДанных, ПараметрыСравнения)
	
	СтрокаНайдена = Ложь;

	ПредыдущаяСтрока = Неопределено;
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		Для Каждого ПараметрСравнения Из ПараметрыСравнения Цикл
			Если ПредыдущаяСтрока <> Неопределено 
				И СтрокаТаблицы[ПараметрСравнения] <> ПредыдущаяСтрока[ПараметрСравнения] Тогда
				СтрокаНайдена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаНайдена Тогда
			Прервать;
		КонецЕсли;
		ПредыдущаяСтрока = СтрокаТаблицы;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПредыдущаяСтрока) Тогда
		ЗаполнитьЗначенияСвойств(ПриемникДанных, ПредыдущаяСтрока);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура УчетнаяПолитикаПриИзмененииСервер()
	
	УчетнаяПолитикаОрганизаций.ПлательщикЕНВД =
		ЗначениеЗаполнено(УчетнаяПолитикаОрганизаций.УчетнаяПолитика)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяПолитикаОрганизаций.УчетнаяПолитика, "ПрименяетсяЕНВД");
	
	НастроитьТаблицуПримененияЕНВД();
	УстановитьСвойстваУчетнойПолитикиИНалогов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваУчетнойПолитикиИНалогов()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		Элементы.ГруппаИмущественныеНалогиОтступ.Видимость = Ложь;
		Элементы.ДекорацияСтавкаНалогаНаИмуществоОсновныеСредства.Видимость = Ложь;
		Элементы.УстановитьПорядокУплатыНалоговНаМестах.Видимость = Ложь;
	КонецЕсли;
	
	ПрименяетсяЕНВД =
		ЗначениеЗаполнено(УчетнаяПолитикаОрганизаций.УчетнаяПолитика)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяПолитикаОрганизаций.УчетнаяПолитика, "ПрименяетсяЕНВД");
		
	Элементы.ГруппаПеременнойДоступности.Доступность  		  = (ВидОрганизации <> "ОбособленноеПодразделение");
	Элементы.ДекорацияПредупреждениеЕНВД.Видимость 	  		  = (ВидОрганизации = "ОбособленноеПодразделение") И ПрименяетсяЕНВД;
	Элементы.ДекорацияПредупреждениеУчетнаяПолитика.Видимость = (ВидОрганизации = "ОбособленноеПодразделение");
	Элементы.ГруппаОтступПрименениеЕНВД.Видимость 	  		  = ПрименяетсяЕНВД;
	Элементы.ГруппаУчетнаяПолитика.Видимость 		  		  = СуществуютУчетныеПолитики;
	Элементы.ГруппаУчетнаяПолитикаНоваяБаза.Видимость 		  = Не СуществуютУчетныеПолитики;
	
//++ Локализация
	ОрганизацииЛокализация.НастроитьДанныеПримененияПСН(ЭтаФорма);
//-- Локализация
	
	УстановитьПараметрыВыбораУчетнойПолитики(ВидОрганизации);
	

КонецПроцедуры

&НаСервере
Функция СуществуютУчетныеПолитикиОрганизаций()

	Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Справочник.УчетныеПолитикиОрганизаций КАК Т");

	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПолеУчетнаяПолитикаОрганизацийПериод(Форма)
	
	РедактированиеПериодическихСведенийКлиентСервер.ОбновитьОтображениеПолейВвода(Форма,
																				"УчетнаяПолитикаОрганизаций",
																				Форма.ГоловнаяОрганизация);
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "УчетнаяПолитикаОрганизаций.Период");
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма,
																				"УчетнаяПолитикаОрганизацийПериодСтрокой",
																				ПолучитьПредставлениеМесяца(Значение));
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеУчетнойПолитикиИНалогов(ТекущийОбъект, Отказ)
	
	
	Если НЕ НастройкиУчетнойПолитикиИНалоговВведены Тогда
		Возврат;
	КонецЕсли;
	
	Если ПравоДоступа("Изменение", Метаданные.РегистрыСведений.УчетнаяПолитикаОрганизаций)
	 И ЗначениеЗаполнено(УчетнаяПолитикаОрганизаций.УчетнаяПолитика) Тогда
		
		ПараметрыУчетнойПолитики = РегистрыСведений.УчетнаяПолитикаОрганизаций.СформироватьКэшируемыеПараметрыУчетнойПолитики(
		    УчетнаяПолитикаОрганизаций.УчетнаяПолитика,
			ТекущийОбъект);
		
		ЗаполнитьЗначенияСвойств(УчетнаяПолитикаОрганизаций, ПараметрыУчетнойПолитики);
		
		Если Не ЗначениеЗаполнено(УчетнаяПолитикаОрганизаций.Организация) Тогда
			УчетнаяПолитикаОрганизаций.Организация = ТекущийОбъект.Ссылка;
			ГоловнаяОрганизация = ТекущийОбъект.Ссылка;
		КонецЕсли;
		
		Если НЕ Объект.ОбособленноеПодразделение Тогда
			РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(ЭтаФорма,
				"УчетнаяПолитикаОрганизаций",
				ТекущийОбъект.Ссылка);
		КонецЕсли;
																					
		РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(ЭтаФорма,
			"УчетнаяПолитикаОрганизаций",
			ТекущийОбъект.Ссылка);
		
		Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаОрганизаций.Период) Тогда
			УчетнаяПолитикаОрганизаций.Период = Дата(0001,1,1);
		КонецЕсли;
		
		ОбновитьПолеУчетнаяПолитикаОрганизацийПериод(ЭтаФорма);
		
	КонецЕсли;
	
	Если ВидОрганизации <> "ОбособленноеПодразделение" Тогда
		
		Если ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПримененияЕНВД) Тогда
			
			Для Каждого СтрокаТаблицы Из ПрименениеЕНВД Цикл
				
				Набор = РегистрыСведений.ПримененияЕНВД.СоздатьНаборЗаписей();
				Набор.Отбор.Организация.Установить(ТекущийОбъект.Ссылка);
				Набор.Отбор.Склад.Установить(СтрокаТаблицы.Склад);
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Период) Тогда
					Период = НачалоМесяца(ТекущаяДатаСеанса());
				Иначе
					Период = НачалоМесяца(СтрокаТаблицы.Период);
				КонецЕсли;
				Набор.Отбор.Период.Установить(Период);
				
				СтрокаНабора = Набор.Добавить();
				СтрокаНабора.Организация = ТекущийОбъект.Ссылка;
				СтрокаНабора.Склад = СтрокаТаблицы.Склад;
				СтрокаНабора.Период = Период;
				СтрокаНабора.РозничнаяТорговляОблагаетсяЕНВД = СтрокаТаблицы.РозничнаяТорговляОблагаетсяЕНВД;
				
				Набор.Записать(Истина);
				
			КонецЦикла;
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Функция СписокМесяцевПоСтроке(Текст)
	
	СписокМесяцев  = Новый СписокЗначений;
	Месяцы         = Новый Соответствие;
	МесяцыВозврата = Новый Массив;
	
	Для Счетчик = 1 По 12 Цикл
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='ММММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='МММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из СписокМесяцев Цикл
		Если ВРег(Текст) = ВРег(Лев(ЭлементСписка.Представление, СтрДлина(Текст))) Тогда
			Месяцы[ЭлементСписка.Значение] = 0;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из Месяцы Цикл
		МесяцыВозврата.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Возврат МесяцыВозврата;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеМесяца(Знач ДатаНачалаМесяца)
	
	Возврат Формат(ДатаНачалаМесяца, "ДФ='ММММ гггг'");
	
КонецФункции

&НаКлиенте
Процедура ВводМесяцаПриИзменении(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, Модифицированность = Ложь)
	
	ЗначениеПредставления = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления);
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	
	ДатаКакМесяцПодобратьДатуПоТексту(ЗначениеПредставления, Значение);
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект,
																				ПутьРеквизитаПредставления,
																				ПолучитьПредставлениеМесяца(Значение));
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
	
	Модифицированность = Истина;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВводМесяцаНачалоВыбора(	Форма,
											РедактируемыйОбъект,
											ПутьРеквизита,
											ПутьРеквизитаПредставления,
											ИзменитьМодифицированность = Истина,
											ОповещениеЗавершения = Неопределено)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("РедактируемыйОбъект", РедактируемыйОбъект);
	ДополнительныеПараметры.Вставить("ПутьРеквизита", ПутьРеквизита);
	ДополнительныеПараметры.Вставить("ПутьРеквизитаПредставления", ПутьРеквизитаПредставления);
	ДополнительныеПараметры.Вставить("ИзменитьМодифицированность", ИзменитьМодифицированность);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	
	Оповещение = Новый ОписаниеОповещения("ВводМесяцаНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ВыборПериода", 
		Новый Структура("Значение,РежимВыбораПериода,ЗапрашиватьРежимВыбораПериодаУВладельца", Значение, "Месяц", Ложь),
		Форма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводМесяцаРегулирование(	РедактируемыйОбъект,
											ПутьРеквизита,
											ПутьРеквизитаПредставления,
											Направление,
											Модифицированность = Ложь)
	
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	Значение = ДобавитьМесяц(Значение, Направление);
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект,
																				ПутьРеквизита,
																				Значение);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект,
																				ПутьРеквизитаПредставления,
																				ПолучитьПредставлениеМесяца(Значение));
	
	Модифицированность = Истина;
 	
КонецПроцедуры 

&НаКлиенте
Функция ДатаКакМесяцПодобратьДатуПоТексту(Текст, ДатаПоТексту = НеОпределено)
	
	СписокВозврата = Новый СписокЗначений;
	ТекущийГод = Год(ОбщегоНазначенияКлиент.ДатаСеанса());
	
	Если ПустаяСтрока(Текст) Тогда
		ДатаПоТексту = Дата(1, 1, 1);
		Возврат СписокВозврата;
	КонецЕсли;
	
	Если Найти(Текст, ".") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ".");
	ИначеЕсли Найти(Текст, ",") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ",");
	ИначеЕсли Найти(Текст, "-") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "-");
	ИначеЕсли Найти(Текст, "/") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "/");
	ИначеЕсли Найти(Текст, "\") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "\");
	Иначе
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, " ");
	КонецЕсли;
	
	Если Подстроки.Количество() = 1 Тогда
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Текст) Тогда
			МесяцЧислом = Число(Текст);
			Если МесяцЧислом >= 1 И МесяцЧислом <= 12 Тогда
				ДатаПоТексту = Дата(ТекущийГод, МесяцЧислом, 1);
				Если СтрДлина(Текст) = 1 Тогда
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='М/гг'"));
				Иначе
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММ/гг'"));
				КонецЕсли;
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
		Иначе
			СписокМесяцев = СписокМесяцевПоСтроке(Текст);
			Для Каждого Месяц Из СписокМесяцев Цикл
				ДатаПоТексту = Дата(ТекущийГод, Месяц, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Подстроки.Количество() = 2 Тогда
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
			
			Если ПустаяСтрока(Подстроки[1]) Тогда
				ГодЧислом = 0;
				Подстроки[1] = "0";
				ТекстВозврата = Текст + "0";
			Иначе
				ГодЧислом = Число(Подстроки[1]);
				ТекстВозврата = "";
			КонецЕсли;
			
			Если ГодЧислом > 3000 Тогда
				Возврат СписокВозврата;
			КонецЕсли;
			
			Если СтрДлина(Подстроки[1]) <= 1 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 3) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 2 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 2) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 3 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 1) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 4 Тогда
				ГодЧислом = Число(Подстроки[1]);
			КонецЕсли;                    
			
		Иначе
			
			Возврат СписокВозврата;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Подстроки[0]) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
			
			МесяцЧислом = Число(Подстроки[0]);
			Если МесяцЧислом >= 1 И МесяцЧислом <= 12 Тогда
				ДатаПоТексту = Дата(ГодЧислом, МесяцЧислом, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
			
		Иначе
			
			СписокМесяцев = СписокМесяцевПоСтроке(Подстроки[0]);
			
			Если СписокМесяцев.Количество() = 1 Тогда
				ДатаПоТексту = Дата(ГодЧислом, СписокМесяцев[0], 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			Иначе
				Для Каждого Месяц Из СписокМесяцев Цикл
					ДатаПоТексту = Дата(ГодЧислом, Месяц, 1);
					СписокВозврата.Добавить(Формат(Дата(ГодЧислом, Месяц, 1), "ДФ='ММММ гггг'"));
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокВозврата;
	
КонецФункции

&НаКлиенте
Процедура ВводМесяцаНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт

	Форма = ДополнительныеПараметры.Форма;
	РедактируемыйОбъект = ДополнительныеПараметры.РедактируемыйОбъект;
	ПутьРеквизита = ДополнительныеПараметры.ПутьРеквизита;
	ПутьРеквизитаПредставления = ДополнительныеПараметры.ПутьРеквизитаПредставления;
	ИзменитьМодифицированность = ДополнительныеПараметры.ИзменитьМодифицированность;
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Если ОповещениеЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
		
	Значение = ВыбранноеЗначение;
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
	Представление = ПолучитьПредставлениеМесяца(Значение);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, Представление);
	
	Если ИзменитьМодифицированность Тогда 
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
	Если ОповещениеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Истина);
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура РегистрацииВНалоговыхОрганахВХранилище()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрацииВНалоговомОргане.Подразделение,
	|	РегистрацииВНалоговомОргане.Организация,
	|	РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	РегистрСведений.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|ГДЕ
	|	РегистрацииВНалоговомОргане.Организация = &Организация
	|;
	|";
	
	Запрос.УстановитьПараметр("Организация", Объект.Ссылка);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Регистрации = Новый Структура();
	
	Регистрации.Вставить("РегистрацииВНалоговомОргане",                     Результат[0].Выгрузить());
	
	
	РегистрацииСохраненныеЗначения = ПоместитьВоВременноеХранилище(Регистрации, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьДанныеРегистрацийВПФР()
	
	
	Возврат; // в УТ11 не используется
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьДанныеРегистрацийВНалоговыхОрганах()
	
	Регистрации = ПолучитьИзВременногоХранилища(РегистрацииСохраненныеЗначения);
	
	НаборЗаписей = РегистрыСведений.РегистрацииВНалоговомОргане.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Объект.Ссылка);
	
	Для Каждого Строка Из Регистрации.РегистрацииВНалоговомОргане Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Строка);
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	Объект.РегистрацияВНалоговомОргане = Справочники.Организации.РегистрацияВНалоговомОргане(Объект.Ссылка);
	РегистрацияВНалоговомОргане = Объект.РегистрацияВНалоговомОргане;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗапроситьРежимИзмененияУчетнойПолитики(ДатаИзменения, Отказ, ДополнительныеПараметры = Неопределено)
	
	Оповещение = Новый ОписаниеОповещения("ЗапроситьРежимИзмененияУчетнойПолитикиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ТекстКнопкиДа = НСтр("ru = 'Изменилась учетная политика'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru =  'При редактировании изменилась учетная политика для организации.
					|Если просто исправлены прежние данные (они были ошибочны), нажмите ""Исправлена ошибка"".
					|Если учетная политика организации изменилась с %1, нажмите ""Изменилась учетная политика""'"), 
		Формат(ДатаИзменения, "ДФ='д ММММ гггг ""г""'"));
	
	ЗапроситьРежимИзмененияРегистра(ЭтаФорма, "УчетнаяПолитикаОрганизаций", ТекстВопроса, ТекстКнопкиДа, Отказ, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьРежимИзмененияРегистра(Форма, ИмяРегистра, ТекстЗапроса, ТекстКнопкиДа, Отказ, ОповещениеЗавершения = Неопределено)
	// Требуется запрашивать пользователя об изменении только если еще не принято решение, что запись - новая.
	Если Форма[ИмяРегистра + "НоваяЗапись"] = Истина Тогда
		Если ОповещениеЗавершения <> Неопределено Тогда 
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Отказ);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	// Требуется запрашивать пользователя об изменении только если задана дата записи
	Если Не ЗначениеЗаполнено(Форма[ИмяРегистра].Период) Тогда
		Если ОповещениеЗавершения <> Неопределено Тогда 
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Отказ);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	// Требуется запрашивать пользователя об изменении только если была считана прежняя запись.
	Если Не ЗначениеЗаполнено(Форма[ИмяРегистра + "Прежняя"].Период) Тогда
		Если ОповещениеЗавершения <> Неопределено Тогда 
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Отказ);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ИзменилсяПериод = (Форма[ИмяРегистра].Период <> Форма[ИмяРегистра + "Прежняя"].Период);
	ИзменилисьДанные = Ложь;
	Для Каждого Поле Из Форма[ИмяРегистра + "Прежняя"] Цикл
		Если Поле.Ключ = "Период" Тогда
			Продолжить;
		КонецЕсли;
		ИзменилисьДанные = Форма[ИмяРегистра][Поле.Ключ] <> Поле.Значение;
		Если ИзменилисьДанные Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Требуется запрашивать пользователя об изменении - изменили и текущие данные, и дату записи.
	Если ИзменилисьДанные И ИзменилсяПериод Тогда
		
		Кнопки = Новый СписокЗначений();
		Кнопки.Добавить(КодВозвратаДиалога.Нет,  	НСтр("ru = 'Исправлена ошибка'"));
		Кнопки.Добавить(КодВозвратаДиалога.Да, 		ТекстКнопкиДа);
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, 	НСтр("ru = 'Отмена'"));
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма",                Форма);
		ДополнительныеПараметры.Вставить("Отказ",                Отказ);
		ДополнительныеПараметры.Вставить("ИмяРегистра",          ИмяРегистра);
		ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
		
		Отказ = Истина; // Не записываем элемент, так как в зависимости от дальнейшего ответа на вопрос будет производиться запись объекта...
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЗапроситьРежимИзмененияРегистраОбработкаОтвета", ЭтотОбъект, ДополнительныеПараметры), 
			ТекстЗапроса, 
			Кнопки, ,
			КодВозвратаДиалога.Отмена);
		
		Возврат;
					
	ИначеЕсли ИзменилисьДанные Или ИзменилсяПериод Тогда
		
		Если ОповещениеЗавершения <> Неопределено Тогда 
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИзменилисьДанные Тогда
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьРежимИзмененияРегистраОбработкаОтвета(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Форма                = ДополнительныеПараметры.Форма;
	Отказ                = ДополнительныеПараметры.Отказ;
	ИмяРегистра          = ДополнительныеПараметры.ИмяРегистра;
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;	
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
		Отказ = Истина;
	ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		Форма[ИмяРегистра + "НоваяЗапись"] = Истина;
	КонецЕсли;
	
	Если ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьРежимИзмененияУчетнойПолитикиЗавершение(Отказ, ДополнительныеПараметры) Экспорт 
	
	Если НЕ Отказ Тогда
		
		НастройкиУчетнойПолитикиИНалоговВведены = Истина;
		ПараметрыЗаписи = Новый Структура("РежимИзмененияУчетнойПолитикиУточнен", Истина);
		
		Если НЕ Записать(ПараметрыЗаписи) Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ Отказ И ДополнительныеПараметры <> Неопределено
		 И НЕ ДополнительныеПараметры.Свойство("НеЗакрыватьФорму") Тогда
			Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораУчетнойПолитики(ВидОрганизации)
	
	Если ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда
		Элементы.УчетнаяПолитика.РежимВыбораИзСписка = Истина;
		Элементы.УчетнаяПолитика.СписокВыбора.ЗагрузитьЗначения(УчетныеПолитикиДляИП());
	Иначе
		Элементы.УчетнаяПолитика.РежимВыбораИзСписка = Истина;
		Элементы.УчетнаяПолитика.СписокВыбора.ЗагрузитьЗначения(УчетныеПолитикиДляВсех());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УчетныеПолитикиДляИП()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетныеПолитикиОрганизаций.Ссылка
	|ИЗ
	|	Справочник.УчетныеПолитикиОрганизаций КАК УчетныеПолитикиОрганизаций
	|ГДЕ
	|	НЕ УчетныеПолитикиОрганизаций.ПометкаУдаления
	|";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере
Функция УчетныеПолитикиДляВсех()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетныеПолитикиОрганизаций.Ссылка
	|ИЗ
	|	Справочник.УчетныеПолитикиОрганизаций КАК УчетныеПолитикиОрганизаций
	|ГДЕ
	|	НЕ УчетныеПолитикиОрганизаций.ПометкаУдаления
	|	И НЕ УчетныеПолитикиОрганизаций.ПрименяетсяПСН";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции


#Область РаботаСКлассификаторами

&НаКлиенте
Процедура ВыбратьКодИзКлассификатора(ИмяКлассификатора, Комментарий = "", Знач ИмяРеквизитаКод = "")
 
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипОбъекта",      "Справочник");
	ПараметрыФормы.Вставить("НазваниеОбъекта", "Организации");
	ПараметрыФормы.Вставить("НазваниеМакета",  ИмяКлассификатора);
	ПараметрыФормы.Вставить("ТекущийПериод",   Дата(2000, 1, 1)); // дата - любая заполненная, для целей получения кодов классификаторов не играет роли.
	ИмяРеквизитаКод = ?(НЕ ЗначениеЗаполнено(ИмяРеквизитаКод), "Код" + ИмяКлассификатора, ИмяРеквизитаКод);
	ПараметрыФормы.Вставить("ТекущийКод",      Объект[ИмяРеквизитаКод]);
	ПараметрыФормы.Вставить("Комментарий",     Комментарий);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяКлассификатора", ИмяКлассификатора);
	ДополнительныеПараметры.Вставить("ИмяРеквизитаКод",   ИмяРеквизитаКод);
	ДополнительныеПараметры.Вставить("ИмяРеквизитаНаименование", "Наименование" + Сред(ИмяРеквизитаКод, 4));
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьКодИзКлассификатораЗавершение", 
		ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораКода", ПараметрыФормы,,,,, ОповещениеОЗакрытии);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКодИзКлассификатораЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект[ДопПараметры.ИмяРеквизитаКод] = РезультатВыбора.Код;
	Объект[ДопПараметры.ИмяРеквизитаНаименование] = РезультатВыбора.Наименование;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НаименованиеКодаКлассификатора(ИмяКлассификатора, Знач Код)

	СоответствиеКодаНаименованию = Справочники.Организации.СоответствиеКодовКНаименованиюИзМакета(ИмяКлассификатора);
	
	Возврат СоответствиеКодаНаименованию.Получить(Код);

КонецФункции

&НаКлиенте
Процедура КодКлассификатораПриИзменении(ИмяКлассификатора, Знач ИмяРеквизитаКод = "")
	
	ИмяРеквизитаКод = ?(НЕ ЗначениеЗаполнено(ИмяРеквизитаКод), "Код" + ИмяКлассификатора, ИмяРеквизитаКод);
	ИмяРеквизитаНаименование = "Наименование" + Сред(ИмяРеквизитаКод, 4);
	
	// Исправление возможной опечатки в разделителе
	Объект[ИмяРеквизитаКод] = СтрЗаменить(Объект[ИмяРеквизитаКод], ",", ".");
	
	Объект[ИмяРеквизитаНаименование] = НаименованиеКодаКлассификатора(ИмяКлассификатора, Объект[ИмяРеквизитаКод]);
	
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбменРПННажатие(Элемент, СтандартнаяОбработка)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбменФТСНажатие(Элемент, СтандартнаяОбработка)
	
	Возврат;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства


// Заполнение Организации по ИНН данными из ЕГРЮЛ/ЕГРИП

&НаКлиенте
Функция ЗаполнениеРеквизитовПоДаннымИННВозможно(ИННЗаполненКорректно)

	Возврат СамообслуживаниеКлиентСервер.ЗаполнениеРеквизитовПоДаннымИННВозможно(
	               ИННЗаполненКорректно,
	               НастройкиПодключенияКСервисуИППЗаданы,
	               Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо"),
	               Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель"),
	               Объект.ОбособленноеПодразделение); 

КонецФункции

&НаКлиенте
Процедура ВыполнитьЗаполнениеРеквизитовПоИНН(РеквизитыКонтрагента, ЗаполнятьИНН = Ложь)
	
	Если РеквизитыКонтрагента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
		
		ПартнерыИКонтрагентыКлиент.ПоказатьПользователюОшибкуПолученияРеквизитовКонтрагентаПоИНН(РеквизитыКонтрагента.ОписаниеОшибки);
		
	Иначе
		
		РезультатСравнения = ПартнерыИКонтрагентыКлиент.РезультатСравненияПолученныхДанныхКонтрагентаСИмеющимися(РеквизитыКонтрагента,
		                                                                                                         ДанныеОбъектаДляСравнения(),
		                                                                                                         ЗаполнятьИНН);
																												 
		Если НЕ РезультатСравнения.ЕстьИзменения ИЛИ НЕ РезультатСравнения.ЕстьИзмененияВЗаполненныхРеквизитах Тогда
			
			РезультатПоДопРеквизитам = РезультатСравненияПолученныхДанныхОрганизацииСИмеющимися(РеквизитыКонтрагента);
			
			РезультатСравнения.ЕстьИзменения = РезультатСравнения.ЕстьИзменения ИЛИ РезультатПоДопРеквизитам.ЕстьИзменения;
			РезультатСравнения.ЕстьИзмененияВЗаполненныхРеквизитах = РезультатСравнения.ЕстьИзмененияВЗаполненныхРеквизитах ИЛИ РезультатПоДопРеквизитам.ЕстьИзмененияВЗаполненныхРеквизитах;
			
		КонецЕсли;
		
		Если РезультатСравнения.ЕстьИзменения Тогда
			
			Если РезультатСравнения.ЕстьИзмененияВЗаполненныхРеквизитах Тогда 
				
				ОписаниеОповещенияПерезаполнить = Новый ОписаниеОповещения("ЗаполнениеРеквизитовПоИННЗавершение",
				                                                           ЭтотОбъект,
				                                                           Новый Структура("РеквизитыКонтрагента", РеквизитыКонтрагента));
				ТекстВопроса = НСтр("ru = 'Перезаполнить реквизиты контрагента на основании данных ЕГРЮЛ\ЕГРИП?'");
				ПоказатьВопрос(ОписаниеОповещенияПерезаполнить, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
			Иначе
				
				ЗаполнитьРеквизитыКонтрагентаПоПолученнымДанным(РеквизитыКонтрагента);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция РезультатСравненияПолученныхДанныхОрганизацииСИмеющимися(РеквизитыКонтрагента)
	Перем ЗначениеОбъекта;
	
	РезультатСравнения = Новый Структура("ЕстьИзменения,ЕстьИзмененияВЗаполненныхРеквизитах",Ложь,Ложь);
	
	ДанныеОбъектаДляСравнения = Новый Структура;
	
	СопоставлениеРеквизитовСравнения = СопоставлениеРеквизитовСравнения();
	
	Для каждого ЭлементИмя Из СопоставлениеРеквизитовСравнения Цикл
		ДанныеОбъектаДляСравнения.Вставить(ЭлементИмя.Ключ,Объект[ЭлементИмя.Ключ]);
	КонецЦикла; 
	
	Для каждого ЭлементСопоставления Из СопоставлениеРеквизитовСравнения Цикл
		
		Если НРег(ЭлементСопоставления.Ключ) = НРег("СвидетельствоСерияНомер") Тогда
			Объект.Свойство("СвидетельствоСерияНомер",ЗначениеОбъекта);
			ДанныеКонтрагента = СокрЛП(""  + ПолучитьРеквизитКонтрагента(РеквизитыКонтрагента,"СвидетельствоОРегистрации.Серия") +" "
											+ ПолучитьРеквизитКонтрагента(РеквизитыКонтрагента,"СвидетельствоОРегистрации.Номер")
										);
			Если ЗначениеОбъекта <> ДанныеКонтрагента Тогда 
				РезультатСравнения.ЕстьИзменения = Истина;
				Если ЗначениеЗаполнено(ЗначениеОбъекта) Тогда
					РезультатСравнения.ЕстьИзмененияВЗаполненныхРеквизитах = Истина;
					
					Возврат РезультатСравнения;
					
				КонецЕсли;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		
		ЗначениеРеквизитаКонтрагента = ПолучитьРеквизитКонтрагента(РеквизитыКонтрагента,ЭлементСопоставления.Значение);
		
		Если Объект.Свойство(ЭлементСопоставления.Ключ,ЗначениеОбъекта) И ЗначениеОбъекта <> ЗначениеРеквизитаКонтрагента Тогда
			
			//пустые значения локальное и внешнее могут казаться разнотипными - это не может быть признаком изменения значения
			Если НЕ ЗначениеЗаполнено(ЗначениеОбъекта) И НЕ ЗначениеЗаполнено(ЗначениеРеквизитаКонтрагента) Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатСравнения.ЕстьИзменения = Истина;
			
			Если ЗначениеЗаполнено(ЗначениеОбъекта) Тогда
				
				РезультатСравнения.ЕстьИзмененияВЗаполненныхРеквизитах = Истина;
				
				Возврат РезультатСравнения;
				
			КонецЕсли;
		
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если ДанныеОбъектаДляСравнения.Свойство("СвидетельствоСерияНомер",ЗначениеОбъекта) Тогда
		
		ДанныеКонтрагента = "" + ПолучитьРеквизитКонтрагента(РеквизитыКонтрагента,"СвидетельствоОРегистрации.Серия") +" "
								+ ПолучитьРеквизитКонтрагента(РеквизитыКонтрагента,"СвидетельствоОРегистрации.Номер");
		Если ЗначениеОбъекта <> ДанныеКонтрагента Тогда 
			РезультатСравнения.ЕстьИзменения = Истина;
			Если ЗначениеЗаполнено(ЗначениеОбъекта) Тогда
				РезультатСравнения.ЕстьИзмененияВЗаполненныхРеквизитах = Истина;
				
				Возврат РезультатСравнения;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатСравнения;

КонецФункции // РезультатСравненияПолученныхДанныхОрганизацииСИмеющимися()

&НаКлиенте
Функция ДанныеОбъектаДляСравнения()

	ДанныеДляСравнения = ПартнерыИКонтрагентыКлиент.ИнициироватьСтруктураДанныхДляСравнения();
	ЗаполнитьЗначенияСвойств(ДанныеДляСравнения, Объект, "КПП, ИНН, Наименование");
	ДанныеДляСравнения.НаименованиеСокращенное = Объект.НаименованиеПолное;
	
	ДанныеКонтактнойИнформации = ПартнерыИКонтрагентыКлиент.ДанныеСтрокиКонтактнойИнформацииПоВиду(
	                                      ЭтотОбъект,
	                                      ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации"));
	Если ДанныеКонтактнойИнформации <> Неопределено Тогда
		ДанныеДляСравнения.Телефон = ДанныеКонтактнойИнформации.Представление;
	КонецЕсли;
	
	ДанныеКонтактнойИнформации = ПартнерыИКонтрагентыКлиент.ДанныеСтрокиКонтактнойИнформацииПоВиду(
	                                      ЭтотОбъект,
	                                      ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации"));
	Если ДанныеКонтактнойИнформации <> Неопределено Тогда
		ДанныеДляСравнения.ЮридическийАдрес = ДанныеКонтактнойИнформации.Представление;
	КонецЕсли;
	
	Возврат ДанныеДляСравнения;

КонецФункции 

// Возвращает сопоставление локальных реквизитов объекта и данных полученных из ЕГРН
// заполнению подлежат только реквизиты специфичные для справочника Организации, и размещаемые непосредственно в нем
//
// Возвращаемое значение:
// Структура - 	Ключ - локальное имя реквизита
//				Значение - путь к реквизиту данных ЕГРН (возможно через ".")
&НаКлиенте
Функция СопоставлениеРеквизитовСравнения()
	
	Результат = Новый Структура;
	
	ПрефиксРеквизита = "";
	Если ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда
		ПрефиксРеквизита = "ИП";
		
		Результат.Вставить("СвидетельствоДатаВыдачи","РегистрацияВНалоговомОргане.ДатаРегистрации");
		Результат.Вставить(ПрефиксРеквизита+"РегистрационныйНомерПФР","РегистрацияВПенсионномФонде.РегистрационныйНомерПФР");
		Результат.Вставить("СвидетельствоСерияНомер");	//значение этого реквизита конкатенируется из двух:  РегистрацияВНалоговомОргане.Серия и РегистрацияВНалоговомОргане.Номер
		
	КонецЕсли;
	
	Результат.Вставить("ДатаРегистрации","ДатаРегистрации");
	Результат.Вставить("КодОКВЭД","КодОКВЭД");
	
	Результат.Вставить("КодПоОКАТО","РегистрацияВНалоговомОргане.ОКАТО");
	Результат.Вставить("КодНалоговогоОргана","РегистрацияВНалоговомОргане.Код");
	Результат.Вставить("НаименованиеНалоговогоОргана","РегистрацияВНалоговомОргане.Наименование");
	
	
	Результат.Вставить("КодОрганаПФР","РегистрацияВПенсионномФонде.КодОрганаПФР");
	Результат.Вставить("НаименованиеТерриториальногоОрганаПФР","РегистрацияВПенсионномФонде.НаименованиеОрганаПФР");
	
	Результат.Вставить(ПрефиксРеквизита+"КодПодчиненностиФСС","РегистрацияВФСС.КодПодчиненности");
	Результат.Вставить("НаименованиеТерриториальногоОрганаФСС","РегистрацияВФСС.НаименованиеОрганаФСС");
	Результат.Вставить(ПрефиксРеквизита+"РегистрационныйНомерФСС","РегистрацияВФСС.РегистрационныйНомерФСС");
	
	Возврат Результат;
	
КонецФункции // СопоставлениеРеквизитовСравнения()

&НаКлиенте
Процедура ЗаполнитьРеквизитыКонтрагентаПоПолученнымДанным(РеквизитыКонтрагента)

	ЗаполнитьЗначенияСвойств(Объект, РеквизитыКонтрагента, "ИНН, Наименование");
	Если РеквизитыКонтрагента.Свойство("КПП") Тогда
		Если РеквизитыКонтрагента.КПП <> Объект.КПП Тогда
			Объект.КПП = РеквизитыКонтрагента.КПП;
		КонецЕсли;
	КонецЕсли;

	Если РеквизитыКонтрагента.Свойство("РегистрационныйНомер") Тогда
		Объект.ОГРН = РеквизитыКонтрагента.РегистрационныйНомер;
	КонецЕсли;
	
	Если Объект.НаименованиеПолное <> РеквизитыКонтрагента.НаименованиеСокращенное Тогда
		Объект.НаименованиеПолное = РеквизитыКонтрагента.НаименованиеСокращенное;
	КонецЕсли;
	
	Если НЕ ПараметрыКонтактнойИнформации.ГруппаКонтактнаяИнформация.ВыполненаОтложеннаяИнициализация Тогда
		КонтактнаяИнформацияПриСменеСтраницы();
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("Телефон") Тогда
		ПартнерыИКонтрагентыКлиент.ЗаполнитьЭлементКонтактнойИнформации(ЭтотОбъект,
		                                                                ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации"),
		                                                                РеквизитыКонтрагента.Телефон);
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("ЮридическийАдрес") Тогда
		
		
		ПартнерыИКонтрагентыКлиент.ЗаполнитьЭлементКонтактнойИнформации(ЭтотОбъект,
		                                                                ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации"),
		                                                                РеквизитыКонтрагента.ЮридическийАдрес);
		
		ПартнерыИКонтрагентыКлиент.ЗаполнитьИсториюАдресов(ЭтотОбъект, РеквизитыКонтрагента);
	КонецЕсли;
	
	// Заполнение Организации по ИНН данными из ЕГРЮЛ/ЕГРИП
	
	СтруктураРеквизитовФормыПФР = Новый Структура("КодОрганаПФР,НаименованиеТерриториальногоОрганаПФР,РегистрационныйНомерПФР,ИПРегистрационныйНомерПФР");
	
	СопоставлениеРеквизитовСравнения = СопоставлениеРеквизитовСравнения();
	Для каждого ЭлементСопоставления Из СопоставлениеРеквизитовСравнения Цикл
		РеквизитКонтрагента = ПолучитьРеквизитКонтрагента(РеквизитыКонтрагента,ЭлементСопоставления.Значение);
		Если ЗначениеЗаполнено(РеквизитКонтрагента) И Объект[ЭлементСопоставления.Ключ] <> РеквизитКонтрагента Тогда
			Объект[ЭлементСопоставления.Ключ] = РеквизитКонтрагента;

			Если СтруктураРеквизитовФормыПФР.Свойство(ЭлементСопоставления.Ключ) Тогда
				ЭтаФорма[ЭлементСопоставления.Ключ] = РеквизитКонтрагента;
			КонецЕсли;

		КонецЕсли; 
		
	КонецЦикла; 
	
	
	Если СопоставлениеРеквизитовСравнения.Свойство("СвидетельствоСерияНомер") Тогда
		Объект["СвидетельствоСерияНомер"] = "" 	+ ПолучитьРеквизитКонтрагента(РеквизитыКонтрагента,"СвидетельствоОРегистрации.Серия") +" "
												+ ПолучитьРеквизитКонтрагента(РеквизитыКонтрагента,"СвидетельствоОРегистрации.Номер");
	КонецЕсли;
	ЗаполнитьОписанияПараметров();
	// Конец Заполнение Организации по ИНН данными из ЕГРЮЛ/ЕГРИП
	
	УправлениеДоступностью();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьРеквизитКонтрагента(Знач РеквизитыКонтрагента, Знач ПутьРеквизита)
	Перем ЗначениеШага;
	
	ШагиПути = СтрРазделить(ПутьРеквизита,".",Ложь);
	КоличествоШагов = ШагиПути.Количество();
	
	Если КоличествоШагов = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ РеквизитыКонтрагента.Свойство(ШагиПути[0],ЗначениеШага) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если КоличествоШагов > 1 И ЗначениеЗаполнено(ЗначениеШага) Тогда
		ШагиПути.Удалить(0);
		
		Возврат ПолучитьРеквизитКонтрагента(ЗначениеШага,СтрСоединить(ШагиПути,"."));
		
	КонецЕсли; 
	
	Возврат ЗначениеШага;
	
КонецФункции // ПолучитьРеквизитКонтрагента()

&НаСервере
Процедура УправлениеДоступностью()
	
	УстановитьДоступностьКнопкиЗаполнитьПоИНН(ЭтотОбъект);
	
	Если Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент
		И Объект.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
		
		Объект.СтранаРегистрации = Справочники.СтраныМира.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКнопкиЗаполнитьПоИНН(Форма, КнопкаНедоступнаБезусловно = Ложь)

	СамообслуживаниеКлиентСервер.УстановитьДоступностьКнопкиЗаполнитьПоИНН(Форма,
	                                                                       Форма.Объект.ЮрФизЛицо,
	                                                                       Форма.Объект.ИНН,
	                                                                       Форма.Объект.ОбособленноеПодразделение,
	                                                                       Форма.НастройкиПодключенияКСервисуИППЗаданы,
	                                                                       КнопкаНедоступнаБезусловно);

КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	НастройкиПодключенияКСервисуИППЗаданы = ПартнерыИКонтрагенты.НастройкиПодключенияКСервисуИППЗаданы();
	ПравоИзмененияОбъекта = ПравоДоступа("Изменение", Метаданные.Справочники.Организации);
	
	УправлениеДоступностью();
	//НастроитьПанельНавигации();

КонецПроцедуры

// Конец  Заполнение Организации по ИНН данными из ЕГРЮЛ/ЕГРИП

#КонецОбласти
