#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает реквизиты объекта ДО указанного типа, возможно, с уточнением до вида документа.
//
// Параметры:
//   ТипОбъектаДО - Строка - имя типа объекта XDTO Документооборота.
//   Параметры - Структура - уточняющие параметры со свойством:
//     documentType - Структура - вид объекта Документооборота, со свойствами:
//       type - Строка - тип XDTO вида документа.
//       id - Строка - идентификатор вида документа.
//
Функция ПолучитьРеквизитыОбъектаДО(ТипОбъектаДО, Параметры = Неопределено) Экспорт 
	
	Реквизиты = Новый ТаблицаЗначений;
	Реквизиты.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	Реквизиты.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Реквизиты.Колонки.Добавить("Тип", Новый ОписаниеТипов("СписокЗначений"));
	Реквизиты.Колонки.Добавить("ДопРеквизит", Новый ОписаниеТипов("Булево"));
	Реквизиты.Колонки.Добавить("ДопРеквизитID", Новый ОписаниеТипов("Строка"));
	Реквизиты.Колонки.Добавить("ДопРеквизитТип", Новый ОписаниеТипов("Строка"));
	Реквизиты.Колонки.Добавить("ОбязательноеЗаполнение", Новый ОписаниеТипов("Булево"));
	Реквизиты.Колонки.Добавить("ЭтоТаблица", Новый ОписаниеТипов("Булево"));
	Реквизиты.Колонки.Добавить("Таблица", Новый ОписаниеТипов("Строка"));
	
	// Общие настройки.
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetNewObjectRequest");
	Запрос.type = ТипОбъектаДО;
	Запрос.columnSet.Добавить("additionalProperties");
	Запрос.columnSet.Добавить("documentTypeEnabled");
	Запрос.columnSet.Добавить("accessLevelEnabled");
	Запрос.columnSet.Добавить("activityMatterEnabled");
	Запрос.columnSet.Добавить("organizationEnabled");
	Запрос.columnSet.Добавить("statusEnabled");
	Запрос.columnSet.Добавить("statusChangeEnabled");
	
	// Проекты.
	Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3.CORP") Тогда
		Запрос.columnSet.Добавить("projectsEnabled");
	КонецЕсли;
	
	ДоступенПакетныйЗапрос = ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3");
	Если ДоступенПакетныйЗапрос Тогда
		Пакет = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMBatchRequest");
		Пакет.requests.Добавить(Запрос);
	Иначе // только последовательные вызовы
		РезультатДокумент = Прокси.execute(Запрос);
	КонецЕсли;
	
	Если Параметры <> Неопределено 
		И Параметры.Свойство("documentType") 
		И Параметры.documentType <> Неопределено Тогда 
		
		// Настройки по виду документа.
		ОбъектID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси,
			Параметры.documentType.id, Параметры.documentType.type);
		
		Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси,"DMRetrieveRequest");
		Запрос.objectIds.Добавить(ОбъектID);
		
		Если ДоступенПакетныйЗапрос Тогда
			
			Пакет.requests.Добавить(Запрос);
			ПакетРезультатов = Прокси.execute(Пакет);
			ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, ПакетРезультатов);
			
			РезультатДокумент = ПакетРезультатов.responses[0];
			ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, РезультатДокумент);
			НастройкиТипа = РезультатДокумент;
			ДопРеквизиты = РезультатДокумент.additionalProperties;
			
			РезультатПоНастройкам = ПакетРезультатов.responses[1];
			Попытка
				ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, РезультатПоНастройкам);
				НужноПолучитьНастройкиТипа = Ложь;
			Исключение // Возможно, этого вида документа уже нет в ДО.
				НужноПолучитьНастройкиТипа = Истина;
				ИнтеграцияС1СДокументооборотВызовСервера.ЗаписатьПредупреждение(
					СтрШаблон(НСтр("ru = 'Не найден в 1С:Документообороте ранее существовавший вид документа %1'"),
					Параметры.documentType.id));
			КонецПопытки;
			
		Иначе
			РезультатПоНастройкам = Прокси.execute(Запрос);
			НужноПолучитьНастройкиТипа = Ложь;
			
		КонецЕсли;
		
		Если Не НужноПолучитьНастройкиТипа Тогда
			
			НастройкиВида = РезультатПоНастройкам.objects[0];
			
			РезультатДокумент.documentType = ИнтеграцияС1СДокументооборот.СоздатьОбъект(
				Прокси, ТипОбъектаДО + "Type");
			РезультатДокумент.documentType.name = Параметры.documentType.name;
			РезультатДокумент.documentType.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(
				Прокси, Параметры.documentType.id, Параметры.documentType.type);
			
			Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetObjectAdditionalPropertiesRequest");
			Запрос.object = РезультатДокумент;
			НастройкиТипа = РезультатДокумент;
		
			Результат = Прокси.execute(Запрос);
		
			ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
			ДопРеквизиты = Результат.additionalProperties;
			
		КонецЕсли;
		
	Иначе // вид документа неизвестен
		
		НужноПолучитьНастройкиТипа = Истина;
		
	КонецЕсли;
	
	Если НужноПолучитьНастройкиТипа Тогда
		
		Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetNewObjectRequest");
		Запрос.type = ТипОбъектаДО;
		Запрос.columnSet.Добавить("additionalProperties");
		Запрос.columnSet.Добавить("documentTypeEnabled");
		Запрос.columnSet.Добавить("accessLevelEnabled");
		Запрос.columnSet.Добавить("activityMatterEnabled");
		Запрос.columnSet.Добавить("organizationEnabled");
		Запрос.columnSet.Добавить("statusEnabled");
		Запрос.columnSet.Добавить("statusChangeEnabled");
		
		РезультатДокумент = Прокси.execute(Запрос);
		
	КонецЕсли;
	
	Если Не ДоступенПакетныйЗапрос Или НужноПолучитьНастройкиТипа Тогда
		
		ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, РезультатДокумент);
		НастройкиТипа = РезультатДокумент;
		Если ИнтеграцияС1СДокументооборот.СвойствоСуществует(РезультатДокумент, "additionalProperties") Тогда
			ДопРеквизиты = РезультатДокумент.additionalProperties;
		Иначе
			ДопРеквизиты = Новый Массив;
		КонецЕсли;
		
		НастройкиВида = Неопределено;
		
	КонецЕсли;
	
	// Входящий документ.
	Если ТипОбъектаДО = "DMIncomingDocument" Тогда
		
		Если НастройкиТипа.documentTypeEnabled = Истина Тогда 
			ДобавитьРеквизит(Реквизиты, "documentType", НСтр("ru = 'Вид документа'"), "DMIncomingDocumentType", Истина);
		КонецЕсли;
			
		ДобавитьРеквизит(Реквизиты, "correspondent", НСтр("ru = 'Отправитель'"), "DMCorrespondent", Истина);
		ДобавитьРеквизит(Реквизиты, "externalNumber", НСтр("ru = '№ отправителя'"), "Строка");
		ДобавитьРеквизит(Реквизиты, "externalDate", НСтр("ru = 'Дата отправителя'"), "Дата");
		
		Если НастройкиТипа.organizationEnabled = Истина Тогда 
			ДобавитьРеквизит(Реквизиты, "organization", НСтр("ru = 'Организация'"), "DMOrganization", Истина);
		КонецЕсли;
		
		Если НастройкиВида = Неопределено Или НастройкиВида.sumEnabled = Истина Тогда
			ДобавитьРеквизит(Реквизиты, "sum", НСтр("ru = 'Сумма'"), "Число");
			ДобавитьРеквизит(Реквизиты, "currency", НСтр("ru = 'Валюта'"), "DMCurrency");
		КонецЕсли;
		
		ДобавитьРеквизит(Реквизиты, "title", НСтр("ru = 'Наименование'"), "Строка", Истина);
		ДобавитьРеквизит(Реквизиты, "summary", НСтр("ru = 'Содержание'"), "Строка");
		ДобавитьРеквизит(Реквизиты, "regNumber", НСтр("ru = 'Регистрационный номер'"), "Строка");
		ДобавитьРеквизит(Реквизиты, "regDate", НСтр("ru = 'Дата регистрации'"), "Дата");
		
		ДобавитьРеквизит(Реквизиты, "signer", НСтр("ru = 'Подписал'"), "DMContactPerson");
		ДобавитьРеквизит(Реквизиты, "addressee", НСтр("ru = 'Адресат'"), "DMUser");
		ДобавитьРеквизит(Реквизиты, "subdivision", НСтр("ru = 'Подразделение'"), "DMSubdivision");
		
		Если НастройкиВида = Неопределено Или НастройкиВида.performanceDateEnabled = Истина Тогда
			ДобавитьРеквизит(Реквизиты, "performanceDate", НСтр("ru = 'Срок исполнения'"), "Дата");
		КонецЕсли;
		
		Если НастройкиТипа.accessLevelEnabled  = Истина Тогда
			ДобавитьРеквизит(Реквизиты, "accessLevel", НСтр("ru = 'Гриф доступа'"), "DMAccessLevel", Истина);
		КонецЕсли;
		
		Если НастройкиТипа.activityMatterEnabled = Истина Тогда
			ДобавитьРеквизит(Реквизиты, "activityMatter", НСтр("ru = 'Вопрос деятельности'"), "DMActivityMatter", Истина);
		КонецЕсли;
		
		// Проекты.
		Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3.CORP") Тогда
			Если НастройкиТипа.projectsEnabled = Истина Тогда
				ДобавитьРеквизит(Реквизиты, "project", НСтр("ru = 'Проект'"), "DMProject");
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьРеквизит(Реквизиты, "deliveryMethod",  НСтр("ru = 'Способ получения'"), "DMDeliveryMethod");
		
		ДобавитьРеквизит(Реквизиты, "comment", НСтр("ru = 'Комментарий'"), "Строка");
		ДобавитьРеквизит(Реквизиты, "responsible", НСтр("ru = 'Ответственный'"), "DMUser");
		
	// Исходящий документ.
	ИначеЕсли ТипОбъектаДО = "DMOutgoingDocument" Тогда
		
		Если НастройкиТипа.documentTypeEnabled = Истина Тогда
			ДобавитьРеквизит(Реквизиты, "documentType", НСтр("ru = 'Вид документа'"), "DMOutgoingDocumentType", Истина);
		КонецЕсли;
			
		ДобавитьРеквизит(Реквизиты, "correspondent", НСтр("ru = 'Получатель'"), "DMCorrespondent", Истина);
		
		Если НастройкиВида = Неопределено Или НастройкиВида.externalNumberEnabled = Истина Тогда
			ДобавитьРеквизит(Реквизиты, "externalNumber", НСтр("ru = '№ получателя'"), "Строка");
			ДобавитьРеквизит(Реквизиты, "externalDate", НСтр("ru = 'Дата получателя'"), "Дата");
		КонецЕсли;
		
		Если НастройкиТипа.OrganizationEnabled = Истина Тогда
			ДобавитьРеквизит(Реквизиты, "organization", НСтр("ru = 'Организация'"), "DMOrganization", Истина);
		КонецЕсли;
		
		Если НастройкиВида = Неопределено Или НастройкиВида.sumEnabled = Истина Тогда
			ДобавитьРеквизит(Реквизиты, "sum", НСтр("ru = 'Сумма'"), "Число");
			ДобавитьРеквизит(Реквизиты, "currency", НСтр("ru = 'Валюта'"), "DMCurrency");
		КонецЕсли;
		
		ДобавитьРеквизит(Реквизиты, "title", НСтр("ru = 'Заголовок'"), "Строка", Истина);
		ДобавитьРеквизит(Реквизиты, "summary", НСтр("ru = 'Содержание'"), "Строка");
		ДобавитьРеквизит(Реквизиты, "regNumber", НСтр("ru = 'Регистрационный номер'"), "Строка");
		ДобавитьРеквизит(Реквизиты, "regDate", НСтр("ru = 'Дата регистрации'"), "Дата");
		
		ДобавитьРеквизит(Реквизиты, "addressee", НСтр("ru = 'Адресат'"), "DMContactPerson");
		ДобавитьРеквизит(Реквизиты, "sent", НСтр("ru = 'Отправлен'"), "Булево");
		ДобавитьРеквизит(Реквизиты, "sendDate", НСтр("ru = 'Дата отправки'"), "Дата");
		
		ДобавитьРеквизит(Реквизиты, "signer", НСтр("ru = 'Подписал'"), "DMUser");
		ДобавитьРеквизит(Реквизиты, "author", НСтр("ru = 'Подготовил'"), "DMUser");
		ДобавитьРеквизит(Реквизиты, "subdivision", НСтр("ru = 'Подразделение'"), "DMSubdivision");
		
		Если НастройкиВида = Неопределено Или НастройкиВида.performanceDateEnabled = Истина Тогда
			ДобавитьРеквизит(Реквизиты, "performanceDate", НСтр("ru = 'Срок исполнения'"), "Дата");
		КонецЕсли;
		
		Если НастройкиТипа.accessLevelEnabled  = Истина Тогда
			ДобавитьРеквизит(Реквизиты, "accessLevel", НСтр("ru = 'Гриф доступа'"), "DMAccessLevel", Истина);
		КонецЕсли;
		
		Если НастройкиТипа.activityMatterEnabled = Истина Тогда
			ДобавитьРеквизит(Реквизиты, "activityMatter", НСтр("ru = 'Вопрос деятельности'"), "DMActivityMatter", Истина);
		КонецЕсли;
		
		// Проекты.
		Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3.CORP") Тогда
			Если НастройкиТипа.projectsEnabled = Истина Тогда
				ДобавитьРеквизит(Реквизиты, "project", НСтр("ru = 'Проект'"), "DMProject");
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьРеквизит(Реквизиты, "deliveryMethod", НСтр("ru = 'Способ отправки'"), "DMDeliveryMethod");
		ДобавитьРеквизит(Реквизиты, "comment", НСтр("ru = 'Комментарий'"), "Строка");
		ДобавитьРеквизит(Реквизиты, "responsible", НСтр("ru = 'Ответственный'"), "DMUser");
		
	// Внутренний документ.
	ИначеЕсли ТипОбъектаДО = "DMInternalDocument" Тогда
		
		Если НастройкиТипа.documentTypeEnabled = Истина Тогда
			ДобавитьРеквизит(Реквизиты, "documentType", НСтр("ru = 'Вид документа'"), "DMInternalDocumentType", Истина);
		КонецЕсли;
		
		ДобавитьРеквизит(Реквизиты, "folder", НСтр("ru = 'Папка'"), "DMInternalDocumentFolder", Истина);
		
		Если (НастройкиВида = Неопределено
				Или (НастройкиВида.Свойства().Получить("addresseeEnabled") <> Неопределено
					И НастройкиВида.addresseeEnabled = Истина)) Тогда
			ДобавитьРеквизит(Реквизиты, "addressee", НСтр("ru = 'Адресат'"), "DMUser", Истина);
		КонецЕсли;
		
		Если НастройкиТипа.organizationEnabled = Истина
			И (НастройкиВида = Неопределено
				Или НастройкиВида.Свойства().Получить("organizationEnabled") = Неопределено
				Или НастройкиВида.organizationEnabled = Истина) Тогда
			ДобавитьРеквизит(Реквизиты, "organization", НСтр("ru = 'Организация'"), "DMOrganization", Истина);
		КонецЕсли;
		
		Если НастройкиВида = Неопределено Или НастройкиВида.sumEnabled = Истина Тогда 
			ДобавитьРеквизит(Реквизиты, "sum", НСтр("ru = 'Сумма'"), "Число");
			Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("2.1.8.1.CORP") Тогда
				ДобавитьРеквизит(Реквизиты, "VAT", НСтр("ru = 'В т.ч. НДС'"), "Число");
			КонецЕсли;
			ДобавитьРеквизит(Реквизиты, "currency", НСтр("ru = 'Валюта'"), "DMCurrency");
		КонецЕсли;
		
		ДобавитьРеквизит(Реквизиты, "title", НСтр("ru = 'Заголовок'"), "Строка", Истина);
		ДобавитьРеквизит(Реквизиты, "summary", НСтр("ru = 'Содержание'"), "Строка");
		ДобавитьРеквизит(Реквизиты, "regNumber", НСтр("ru = 'Регистрационный номер'"), "Строка");
		ДобавитьРеквизит(Реквизиты, "regDate", НСтр("ru = 'Дата регистрации'"), "Дата");
		
		ДобавитьРеквизит(Реквизиты, "signer", НСтр("ru = 'Утвердил'"), "DMUser");
		ДобавитьРеквизит(Реквизиты, "author", НСтр("ru = 'Подготовил'"), "DMUser");
		ДобавитьРеквизит(Реквизиты, "subdivision", НСтр("ru = 'Подразделение'"), "DMSubdivision");
		
		Если НастройкиВида = Неопределено Или НастройкиВида.correspondentEnabled = Истина Тогда 
			Если ИнтеграцияС1СДокументооборотПовтИсп.ИспользоватьТерминКорреспонденты() Тогда
				ДобавитьРеквизит(Реквизиты, "correspondent", НСтр("ru = 'Корреспондент'"), "DMCorrespondent", Истина);
			Иначе
				ДобавитьРеквизит(Реквизиты, "correspondent", НСтр("ru = 'Контрагент'"), "DMCorrespondent", Истина);
			КонецЕсли;
			ДобавитьРеквизит(Реквизиты, "contactPerson", НСтр("ru = 'Контактное лицо'"), "DMContactPerson");
		КонецЕсли;
		
		Если НастройкиВида = Неопределено Или НастройкиВида.durationEnabled = Истина Тогда
			ДобавитьРеквизит(Реквизиты,
				"beginDate", НСтр("ru = 'Дата начала действия'"), "Дата");
			ДобавитьРеквизит(Реквизиты,
				"endDate", НСтр("ru = 'Дата окончания действия'"), "Дата");
			ДобавитьРеквизит(Реквизиты,
				"openEnded", НСтр("ru = 'Бессрочный'"), "Булево");
			ДобавитьРеквизит(Реквизиты,
				"prolongationProcedure", НСтр("ru = 'Порядок продления'"), "DMProlongationProcedure");
		КонецЕсли;
		
		Если НастройкиТипа.accessLevelEnabled  = Истина Тогда
			ДобавитьРеквизит(Реквизиты, "accessLevel", НСтр("ru = 'Гриф доступа'"), "DMAccessLevel", Истина);
		КонецЕсли;
		
		Если НастройкиТипа.activityMatterEnabled = Истина Тогда
			ДобавитьРеквизит(Реквизиты, "activityMatter", НСтр("ru = 'Вопрос деятельности'"), "DMActivityMatter", Истина);
		КонецЕсли;
		
		// Проекты.
		Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3.CORP") Тогда
			Если НастройкиТипа.projectsEnabled = Истина Тогда
				ДобавитьРеквизит(Реквизиты, "project", НСтр("ru = 'Проект'"), "DMProject");
			КонецЕсли;
		КонецЕсли;
		
		Если НастройкиВида = Неопределено Или НастройкиВида.performanceDateEnabled = Истина Тогда
			ДобавитьРеквизит(Реквизиты, "performanceDate", НСтр("ru = 'Срок исполнения'"), "Дата");
		КонецЕсли;
		
		ДобавитьРеквизит(Реквизиты, "comment", НСтр("ru = 'Комментарий'"), "Строка");
		ДобавитьРеквизит(Реквизиты, "responsible", НСтр("ru = 'Ответственный'"), "DMUser");
		
		// Суммы по статьям ДДС.
		Если НастройкиВида <> Неопределено
				И НастройкиВида.Свойства().Получить("cashFlowDetailsEnabled") <> Неопределено
				И НастройкиВида.cashFlowDetailsEnabled = Истина Тогда
			
			ДобавитьТаблицу(Реквизиты, "cashFlowRows.rows", НСтр("ru = 'Статьи движения денежных средств'"));
			ДобавитьРеквизитТаблицы(Реквизиты, "cashFlowRows.rows", "item", НСтр("ru = 'Статья'"), "DMCashFlowItem");
			ДобавитьРеквизитТаблицы(Реквизиты, "cashFlowRows.rows", "total", НСтр("ru = 'Сумма'"), "Число");
			ДобавитьРеквизитТаблицы(Реквизиты, "cashFlowRows.rows", "VAT", НСтр("ru = 'Сумма НДС'"), "Число");
			
		КонецЕсли;
		
		// Товары.
		Если НастройкиВида <> Неопределено
				И НастройкиВида.Свойства().Получить("productRowsEnabled") <> Неопределено
				И НастройкиВида.productRowsEnabled = Истина Тогда
			
			ДобавитьТаблицу(Реквизиты, "productRows.rows", НСтр("ru = 'Товары и услуги'"));
			ДобавитьРеквизитТаблицы(Реквизиты,
				"productRows.rows", "product", НСтр("ru = 'Товар, услуга'"), "DMProduct");
			ДобавитьРеквизитТаблицы(Реквизиты,
				"productRows.rows", "price", НСтр("ru = 'Цена'"), "Число");
			ДобавитьРеквизитТаблицы(Реквизиты,
				"productRows.rows", "quantity", НСтр("ru = 'Количество'"), "Число");
			ДобавитьРеквизитТаблицы(Реквизиты,
				"productRows.rows", "measurementUnit", НСтр("ru = 'Единица измерения'"), "DMMeasurementUnit");
			ДобавитьРеквизитТаблицы(Реквизиты,
				"productRows.rows", "VATRate", НСтр("ru = 'Ставка НДС'"), "DMVATRate");
			ДобавитьРеквизитТаблицы(Реквизиты,
				"productRows.rows", "VAT", НСтр("ru = 'Сумма НДС'"), "Число");
			ДобавитьРеквизитТаблицы(Реквизиты,
				"productRows.rows", "total", НСтр("ru = 'Сумма'"), "Число");
			
		КонецЕсли;
		
	// Контрагент.
	ИначеЕсли ТипОбъектаДО = "DMCorrespondent" Тогда
		
		ДобавитьРеквизит(Реквизиты, "name", НСтр("ru = 'Наименование'"), "Строка", Истина);
		Если ИнтеграцияС1СДокументооборотПовтИсп.ИспользоватьТерминКорреспонденты() Тогда
			ДобавитьРеквизит(Реквизиты,
				"legalPrivatePerson",
				НСтр("ru = 'Вид корреспондента'"),
				"DMLegalPrivatePerson",
				Истина);
		Иначе
			ДобавитьРеквизит(Реквизиты,
				"legalPrivatePerson",
				НСтр("ru = 'Вид контрагента'"),
				"DMLegalPrivatePerson",
				Истина);
		КонецЕсли;
		ДобавитьРеквизит(Реквизиты, "inn", НСтр("ru = 'ИНН'"), "Строка");
		ДобавитьРеквизит(Реквизиты, "kpp", НСтр("ru = 'КПП'"), "Строка");
		ДобавитьРеквизит(Реквизиты, "okpo", НСтр("ru = 'Код по ОКПО'"), "Строка");
		ДобавитьРеквизит(Реквизиты, "comment", НСтр("ru = 'Комментарий'"), "Строка");
		ДобавитьРеквизит(Реквизиты, "fullName", НСтр("ru = 'Полное наименование'"), "Строка");
		ДобавитьРеквизит(Реквизиты, "privatePerson", НСтр("ru = 'Физическое лицо'"), "DMPrivatePerson");
		ДобавитьРеквизит(Реквизиты, "responsible", НСтр("ru = 'Ответственный'"), "DMUser");
		
	КонецЕсли;
	
	// Состояния.
	Если ТипОбъектаДО = "DMIncomingDocument"
			Или ТипОбъектаДО = "DMOutgoingDocument" Или ТипОбъектаДО = "DMInternalDocument" Тогда
		Если НастройкиТипа.statusEnabled = Истина И НастройкиТипа.statusChangeEnabled = Истина Тогда
			ДобавитьРеквизит(Реквизиты, "statusApproval", НСтр("ru = 'Состояние согласования'"), "DMDocumentStatus");
			ДобавитьРеквизит(Реквизиты, "statusConfirmation", НСтр("ru = 'Состояние утверждения'"), "DMDocumentStatus");
			ДобавитьРеквизит(Реквизиты, "statusConsideration", НСтр("ru = 'Состояние рассмотрения'"), "DMDocumentStatus");
			ДобавитьРеквизит(Реквизиты, "statusPerformance", НСтр("ru = 'Состояние исполнения'"), "DMDocumentStatus");
			ДобавитьРеквизит(Реквизиты, "statusRegistration", НСтр("ru = 'Состояние регистрации'"), "DMDocumentStatus");
		КонецЕсли;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("2.1.16.2.CORP")
			И ТипОбъектаДО = "DMInternalDocument"
				И НастройкиТипа.statusEnabled = Истина И НастройкиТипа.statusChangeEnabled = Истина Тогда
		ДобавитьРеквизит(Реквизиты, "statusSigning", НСтр("ru = 'Состояние подписания'"), "DMDocumentStatus");
	КонецЕсли;
	
	// Дополнительные свойства.
	Для Каждого ДопСвойство Из ДопРеквизиты Цикл
		
		Типы = Новый СписокЗначений;
		Для Каждого ОписаниеТипа Из ДопСвойство.propertyValueTypes Цикл
			Если ОписаниеТипа.xdtoClassName = "integer" Тогда
				ТипЗначения = "Число";
			ИначеЕсли ОписаниеТипа.xdtoClassName = "boolean" Тогда
				ТипЗначения = "Булево";
			ИначеЕсли ОписаниеТипа.xdtoClassName = "string" Тогда
				ТипЗначения = "Строка";
			ИначеЕсли ОписаниеТипа.xdtoClassName = "date" Тогда
				ТипЗначения = "Дата";
			Иначе	
				ТипЗначения = ОписаниеТипа.xdtoClassName;
			КонецЕсли;
			Типы.Добавить(ТипЗначения, ОписаниеТипа.presentation);
		КонецЦикла;
		
		ДобавитьДополнительныйРеквизит(Реквизиты,
			ДопСвойство.name,
			Типы,
			ДопСвойство.objectId.id,
			ДопСвойство.objectID.type);
		
	КонецЦикла;
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает таблицу возможных состояний документа Документооборота.
//
Функция ВозможныеСостоянияОбъектаДокументооборота() Экспорт
	
	Реквизиты = Новый ТаблицаЗначений;
	Реквизиты.Колонки.Добавить("Имя");
	Реквизиты.Колонки.Добавить("Представление");
	Реквизиты.Колонки.Добавить("Тип");
	Реквизиты.Колонки.Добавить("ДопРеквизит");
	Реквизиты.Колонки.Добавить("ДопРеквизитID");
	Реквизиты.Колонки.Добавить("ДопРеквизитТип");
	Реквизиты.Колонки.Добавить("ОбязательноеЗаполнение");
	
	ДобавитьРеквизит(Реквизиты, "statusRegistration", НСтр("ru = 'Состояние регистрации'"), "DMDocumentStatus");
	ДобавитьРеквизит(Реквизиты, "statusConsideration", НСтр("ru = 'Состояние рассмотрения'"), "DMDocumentStatus");
	ДобавитьРеквизит(Реквизиты, "statusApproval", НСтр("ru = 'Состояние согласования'"), "DMDocumentStatus");
	ДобавитьРеквизит(Реквизиты, "statusConfirmation", НСтр("ru = 'Состояние утверждения'"), "DMDocumentStatus");
	Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("2.1.16.2.CORP") Тогда
		ДобавитьРеквизит(Реквизиты, "statusSigning", НСтр("ru = 'Состояние подписания'"), "DMDocumentStatus");
	КонецЕсли;
	ДобавитьРеквизит(Реквизиты, "statusPerformance", НСтр("ru = 'Состояние исполнения'"), "DMDocumentStatus");
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает реквизиты шаблона документа.
//
// Параметры:
//   ШаблонТип - Строка - имя типа объекта XDTO Документооборота (DM<..>DocumentType).
//   ШаблонID - Строка - имя типа объекта XDTO Документооборота (DM<..>DocumentType).
//   ШаблонЗапрещаетИзменение - Булево - неявно возвращаемое значение, Истина, если изменение
//     созданных по шаблону документов запрещено.
//
// Возвращаемое значение:
//   ТаблицаЗначений - описание реквизитов шаблона, с колонками:
//     ИмяРеквизитаОбъектаДО - Строка - имя реквизита в ДО.
//     ШаблонЗначение - Произвольный - значение реквизита шаблона.
//     ШаблонID - Строка - идентификатор ссылочного значения реквизита шаблона.
//     ШаблонТип - Строка - тип значения реквизита шаблона.
//     ШаблонТип - Строка - тип значения реквизита шаблона.
//     ЭтоДополнительныйРеквизитДО - Булево - Истина, если это дополнительный реквизит.
//     ДополнительныйРеквизитДОID - Строка - идентификатор доп. свойства ДО.
//     ДополнительныйРеквизитДОТип - Строка - тип доп. свойства ДО.
//
Функция ПолучитьРеквизитыШаблонаДокумента(ШаблонТип, ШаблонID, ШаблонЗапрещаетИзменение) Экспорт
	
	Реквизиты = Новый ТаблицаЗначений;
	Реквизиты.Колонки.Добавить("ИмяРеквизитаОбъектаДО", Новый ОписаниеТипов("Строка"));
	Реквизиты.Колонки.Добавить("ШаблонЗначение", Новый ОписаниеТипов("Строка"));
	Реквизиты.Колонки.Добавить("ШаблонID", Новый ОписаниеТипов("Строка"));
	Реквизиты.Колонки.Добавить("ШаблонТип", Новый ОписаниеТипов("Строка"));
	Реквизиты.Колонки.Добавить("ЭтоДополнительныйРеквизитДО", Новый ОписаниеТипов("Булево"));
	Реквизиты.Колонки.Добавить("ДополнительныйРеквизитДОID", Новый ОписаниеТипов("Строка"));
	Реквизиты.Колонки.Добавить("ДополнительныйРеквизитДОТип", Новый ОписаниеТипов("Строка"));
	Реквизиты.Колонки.Добавить("Таблица", Новый ОписаниеТипов("Строка"));
	Реквизиты.Колонки.Добавить("ЭтоТаблица", Новый ОписаниеТипов("Булево"));
	
	Если Не ЗначениеЗаполнено(ШаблонID) Тогда
		ШаблонЗапрещаетИзменение = Ложь;
		Возврат Реквизиты;
	КонецЕсли;
	
	// Общие настройки.
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	ОбъектID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ШаблонID, ШаблонТип); 
		
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMRetrieveRequest");
	Запрос.objectIds.Добавить(ОбъектID);
		
	Результат = Прокси.execute(Запрос);
	Попытка
		ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
			
	ШаблонXDTO = Результат.objects[0];
		
	Если ШаблонXDTO.Установлено("additionalProperties") Тогда
		ДопРеквизиты = ШаблонXDTO.additionalProperties;
	Иначе
		ДопРеквизиты = Новый Массив;
	КонецЕсли;
	
	Если ШаблонXDTO.Установлено("blockDerivedDocuments") Тогда
		ШаблонЗапрещаетИзменение = ШаблонXDTO.blockDerivedDocuments;
	Иначе
		ШаблонЗапрещаетИзменение = Ложь;
	КонецЕсли;
	
	// Общие реквизиты шаблонов.
	Если ШаблонТип = "DMIncomingDocumentTemplate"
		Или ШаблонТип = "DMOutgoingDocumentTemplate"
		Или ШаблонТип = "DMInternalDocumentTemplate" Тогда
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "accessLevel", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "comment", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "performanceDate", ШаблонXDTO, "performanceTerm");
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "activityMatter", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "responsible", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "organization", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "subdivision", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "summary", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "title", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "project", ШаблонXDTO);
	КонецЕсли;
	
	// Шаблон входящего документа.
	Если ШаблонТип = "DMIncomingDocumentTemplate" Тогда 
		
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "documentType", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "addressee", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "signer", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "correspondent", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "deliveryMethod", ШаблонXDTO);
		
	// Шаблон исходящего документа.
	ИначеЕсли ШаблонТип = "DMOutgoingDocumentTemplate" Тогда 
		
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "documentType", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "addressee", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "signer", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "correspondent", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "deliveryMethod", ШаблонXDTO);
		
	// Шаблон внутреннего документа.
	ИначеЕсли ШаблонТип = "DMInternalDocumentTemplate" Тогда 
		
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "documentType", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "folder", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "correspondent", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "contactPerson", ШаблонXDTO);
		ДобавитьРеквизитШаблона(Прокси, Реквизиты, "cashFlowItem", ШаблонXDTO);
		
	КонецЕсли;
	
	// Дополнительные реквизиты.
	Для Каждого ДопРеквизит Из ДопРеквизиты Цикл
		
		НоваяСтрока = Реквизиты.Добавить();
		НоваяСтрока.ИмяРеквизитаОбъектаДО = "";
		НоваяСтрока.ЭтоДополнительныйРеквизитДО = Истина;
		НоваяСтрока.ДополнительныйРеквизитДОID = ДопРеквизит.objectId.id;
		НоваяСтрока.ДополнительныйРеквизитДОТип = ДопРеквизит.objectId.type;
		
		Если ДопРеквизит.Установлено("propertySimpleValue") Тогда
			НоваяСтрока.ШаблонЗначение = ДопРеквизит.propertySimpleValue;
		ИначеЕсли ДопРеквизит.Установлено("propertyObjectValue") Тогда
			НоваяСтрока.ШаблонЗначение = ДопРеквизит.propertyObjectValue.name;
			НоваяСтрока.ШаблонID = ДопРеквизит.propertyObjectValue.objectId.id;
			НоваяСтрока.ШаблонТип = ДопРеквизит.propertyObjectValue.objectId.type;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает реквизиты объекта потребителя указанного типа.
//
// Параметры:
//   ТипОбъектаИС - Строка - полное имя метаданных объекта.
//
Функция ПолучитьРеквизитыОбъектаИС(ТипОбъектаИС) Экспорт
	
	Реквизиты = Новый ТаблицаЗначений;
	Реквизиты.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	Реквизиты.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Реквизиты.Колонки.Добавить("Тип", Новый ОписаниеТипов("ОписаниеТипов"));
	Реквизиты.Колонки.Добавить("ЭтоТаблица", Новый ОписаниеТипов("Булево"));
	Реквизиты.Колонки.Добавить("Таблица", Новый ОписаниеТипов("Строка"));
	Реквизиты.Колонки.Добавить("ЭтоДополнительныйРеквизитИС", Новый ОписаниеТипов("Булево"));
	Реквизиты.Колонки.Добавить("ДополнительныйРеквизитИС",
		Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	Реквизиты.Колонки.Добавить("СвязиПараметровВыбора", Новый ОписаниеТипов("Массив"));
	Реквизиты.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	Реквизиты.Индексы.Добавить("Имя");
	Реквизиты.Индексы.Добавить("Таблица, Имя");
	
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ТипОбъектаИС);
	Если МетаданныеОбъекта = Неопределено Тогда
		Возврат Реквизиты;
	КонецЕсли;
	
	Порядок = 0;
	
	Для Каждого МетаданныеРеквизита Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		
		Если МетаданныеРеквизита.Имя = "Код" 
			Или МетаданныеРеквизита.Имя = "Наименование" 
			Или МетаданныеРеквизита.Имя = "Владелец" 
			Или МетаданныеРеквизита.Имя = "Номер"
			Или МетаданныеРеквизита.Имя = "Дата" Тогда
			
			Реквизит = Реквизиты.Добавить();
			Порядок = Порядок + 1;
			Реквизит.Порядок = Порядок;
			Реквизит.Имя = МетаданныеРеквизита.Имя;
			Реквизит.Тип = МетаданныеРеквизита.Тип;
			Реквизит.Представление = ?(ЗначениеЗаполнено(МетаданныеРеквизита.Синоним), 
				МетаданныеРеквизита.Синоним,
				МетаданныеРеквизита.Имя);
				
		КонецЕсли; 
		
	КонецЦикла; 

	Для каждого МетаданныеРеквизита Из МетаданныеОбъекта.Реквизиты Цикл
		
		Если СтрНачинаетсяС(МетаданныеРеквизита.Имя, "Удалить") Тогда
			Продолжить;
		КонецЕсли;
		
		Реквизит = Реквизиты.Добавить();
		Порядок = Порядок + 1;
		Реквизит.Порядок = Порядок;
		Реквизит.Имя = МетаданныеРеквизита.Имя;
		Реквизит.Тип = МетаданныеРеквизита.Тип;
		Реквизит.Представление = ?(ЗначениеЗаполнено(МетаданныеРеквизита.Синоним), 
			МетаданныеРеквизита.Синоним,
			МетаданныеРеквизита.Имя);
		Для Каждого СвязьПараметровВыбора Из МетаданныеРеквизита.СвязиПараметровВыбора Цикл
			СтруктураСвязи = Новый Структура("Имя, ПутьКДанным",
				СвязьПараметровВыбора.Имя,
				СвязьПараметровВыбора.ПутьКДанным);
			Реквизит.СвязиПараметровВыбора.Добавить(СтруктураСвязи);
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого МетаданныеТаблицы Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		
		Если СтрНачинаетсяС(МетаданныеТаблицы.Имя, "Удалить")
			Или МетаданныеТаблицы.Имя = "ДополнительныеРеквизиты"
			Или МетаданныеТаблицы.Имя = "КонтактнаяИнформация" Тогда
			Продолжить;
		КонецЕсли;
	
		Таблица = Реквизиты.Добавить();
		Порядок = Порядок + 1;
		Таблица.Порядок = Порядок;
		Таблица.Имя = МетаданныеТаблицы.Имя;
		Таблица.ЭтоТаблица = Истина;
		Таблица.Представление = ?(ЗначениеЗаполнено(МетаданныеТаблицы.Синоним), 
			МетаданныеТаблицы.Синоним,
			МетаданныеТаблицы.Имя);
			
		Для каждого МетаданныеРеквизита Из МетаданныеТаблицы.Реквизиты Цикл
			
			Если СтрНачинаетсяС(МетаданныеРеквизита.Имя, "Удалить") Тогда
				Продолжить;
			КонецЕсли;
			
			Реквизит = Реквизиты.Добавить();
			Порядок = Порядок + 1;
			Реквизит.Порядок = Порядок;
			Реквизит.Имя = МетаданныеРеквизита.Имя;
			Реквизит.Тип = МетаданныеРеквизита.Тип;
			Реквизит.Представление = ?(ЗначениеЗаполнено(МетаданныеРеквизита.Синоним), 
				МетаданныеРеквизита.Синоним,
				МетаданныеРеквизита.Имя);
				
			Для Каждого СвязьПараметровВыбора Из МетаданныеРеквизита.СвязиПараметровВыбора Цикл
				СтруктураСвязи = Новый Структура("Имя, ПутьКДанным",
					СвязьПараметровВыбора.Имя,
					СвязьПараметровВыбора.ПутьКДанным);
				Реквизит.СвязиПараметровВыбора.Добавить(СтруктураСвязи);
			КонецЦикла;
			
			Реквизит.Таблица = Таблица.Имя;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Метаданные.ФункциональныеОпции.Найти("ИспользоватьДополнительныеРеквизитыИСведения") <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		
		ИмяПредопределенногоНабора = СтрЗаменить(ТипОбъектаИС,".","_");
		МенеджерСправочника = Справочники["НаборыДополнительныхРеквизитовИСведений"];
		Попытка
			НаборСвойств = МенеджерСправочника[ИмяПредопределенногоНабора];
		Исключение
			Возврат Реквизиты;
		КонецПопытки;
		
		Если НаборСвойств <> Неопределено Тогда
		
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка,
				|	ДополнительныеРеквизитыИСведения.Заголовок КАК Наименование,
				|	ДополнительныеРеквизитыИСведения.ТипЗначения КАК ТипЗначения
				|ИЗ
				|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
				|		ПО ДополнительныеРеквизитыИСведения.Ссылка = ДополнительныеРеквизиты.Свойство
				|ГДЕ
				|	ДополнительныеРеквизитыИСведения.НаборСвойств = &НаборСвойств
				|	И НЕ ДополнительныеРеквизитыИСведения.ПометкаУдаления
				|	И НЕ ДополнительныеРеквизиты.Ссылка.ЭтоГруппа");
			
			Запрос.УстановитьПараметр("НаборСвойств", НаборСвойств);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Реквизит = Реквизиты.Добавить();
				Порядок = Порядок + 1;
				Реквизит.Порядок = Порядок;
				Реквизит.Имя = Строка(Выборка.Ссылка.УникальныйИдентификатор());
				Реквизит.Представление = Выборка.Наименование;
				Реквизит.Тип = Выборка.ТипЗначения;
				Реквизит.ЭтоДополнительныйРеквизитИС = Истина;
				Реквизит.ДополнительныйРеквизитИС = Выборка.Ссылка;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотПереопределяемый.
		ПолучитьРеквизитыОбъектаИС(ТипОбъектаИС, Реквизиты);
		
	// Определим порядок с учетом зависимостей по параметрам выбора.
	Повторять = Истина;
	Пока Повторять Цикл
		Повторять = Ложь;
		Для Каждого Реквизит Из Реквизиты Цикл
			ПутьКДанным = ПутьКДаннымРеквизита(Реквизит);
			МаксимальныйПорядок = 0;
			Для Каждого СвязьПараметровВыбора Из Реквизит.СвязиПараметровВыбора Цикл
				Зависимости = Реквизиты.НайтиСтроки(СтруктураПоискаРеквизита(СвязьПараметровВыбора.ПутьКДанным));
				Для Каждого Зависимость Из Зависимости Цикл
					ЕстьЗацикливание = Ложь;
					Для Каждого ЗависимостьСвязьПараметровВыбора Из Зависимость.СвязиПараметровВыбора Цикл
						Если ЗависимостьСвязьПараметровВыбора.ПутьКДанным = ПутьКДанным Тогда
							ЕстьЗацикливание = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если Не ЕстьЗацикливание Тогда
						МаксимальныйПорядок = Макс(МаксимальныйПорядок, Зависимость.Порядок);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Если МаксимальныйПорядок >= Реквизит.Порядок Тогда
				Реквизит.Порядок = МаксимальныйПорядок + 1;
				Повторять = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Реквизиты.Сортировать("Порядок");
	
	Возврат Реквизиты;
	
КонецФункции // ПолучитьРеквизитыОбъектаИС()

// Возвращает соответствие свойств XDTO и реквизитов формы объекта.
//
// Параметры:
//   ТипОбъекта - Строка - тип объекта XDTO.
//
// Возвращаемое значение:
//   Структура, где ключ - имя свойства XDTO, а значение - имя реквизита формы документа.
//
Функция СоответствиеСвойствXDTOиРеквизитовФормыОбъектаДО(ТипОбъекта) Экспорт
	
	Результат = Новый Структура;
	
	// Общие реквизиты документов.
	Если Найти(ТипОбъекта, "Document") <> 0 Тогда
		
		Результат.Вставить("title", "Наименование");
		Результат.Вставить("summary", "Описание");
		Результат.Вставить("comment", "Комментарий");
		Результат.Вставить("regNumber", "РегистрационныйНомер");
		Результат.Вставить("regDate", "ДатаРегистрации");
		Результат.Вставить("performanceDate", "СрокИсполнения");
		Результат.Вставить("sum", "Сумма");
		Результат.Вставить("currency", "Валюта");
		Результат.Вставить("status", "Состояние");
		Результат.Вставить("organization", "Организация");
		Результат.Вставить("subdivision", "Подразделение");
		Результат.Вставить("activityMatter", "ВопросДеятельности");
		Результат.Вставить("responsible", "Ответственный");
		Результат.Вставить("accessLevel", "ГрифДоступа");
		Результат.Вставить("documentType", "ВидДокумента");
		
		Результат.Вставить("statusRegistration", "СостояниеРегистрация");
		Результат.Вставить("statusConfirmation", "СостояниеУтверждение");
		Если ТипОбъекта = "DMInternalDocument"
				И ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("2.1.16.2.CORP") Тогда
			Результат.Вставить("statusSigning", "СостояниеПодписание");
		КонецЕсли;
		Результат.Вставить("statusApproval", "СостояниеСогласование");
		Результат.Вставить("statusConsideration", "СостояниеРассмотрение");
		Результат.Вставить("statusPerformance", "СостояниеИсполнение");
		
		// Шаблоны.
		Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("2.0.8.1") Тогда
			Результат.Вставить("template", "Шаблон");
		КонецЕсли;
		
		// Проекты.
		Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3.CORP") Тогда
			Результат.Вставить("project", "Проект");
		КонецЕсли;
		
	КонецЕсли;
	
	// Входящий документ.
	Если ТипОбъекта = "DMIncomingDocument" Тогда
		
		Результат.Вставить("externalNumber", "НомерОтправителя");
		Результат.Вставить("externalDate", "ДатаОтправителя");
		Результат.Вставить("correspondent", "Отправитель");
		Результат.Вставить("signer", "Подписал");
		Результат.Вставить("addressee", "Адресат");
		Результат.Вставить("deliveryMethod", "СпособПолучения");
		
	// Исходящий документ.
	ИначеЕсли ТипОбъекта = "DMOutgoingDocument" Тогда
		
		Результат.Вставить("externalNumber", "НомерПолучателя");
		Результат.Вставить("externalDate", "ДатаПолучателя");
		Результат.Вставить("sent", "Отправлен");
		Результат.Вставить("sendDate", "ДатаОтправки");
		
		Результат.Вставить("correspondent", "Получатель");
		Результат.Вставить("addressee", "Адресат");
		Результат.Вставить("signer", "Подписал");
		Результат.Вставить("author", "Подготовил");
		Результат.Вставить("deliveryMethod", "СпособОтправки");
		
	// Внутренний документ.
	ИначеЕсли ТипОбъекта = "DMInternalDocument" Тогда
		
		Результат.Вставить("beginDate", "ДатаНачалаДействия");
		Результат.Вставить("endDate", "ДатаОкончанияДействия");
		Результат.Вставить("openEnded", "Бессрочный");
		
		Результат.Вставить("folder", "Папка");
		Результат.Вставить("author", "Подготовил");
		Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("2.1.13.1") Тогда
			Результат.Вставить("addressee", "Адресат");
		КонецЕсли;
		Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("2.1.0.0") Тогда
			Результат.Вставить("VAT", "СуммаНДС");
			
			СтрокаТовары = Новый Структура;
			СтрокаТовары.Вставить("product", "Номенклатура");
			СтрокаТовары.Вставить("quantity", "Количество");
			СтрокаТовары.Вставить("measurementUnit", "ЕдиницаИзмерения");
			СтрокаТовары.Вставить("price", "Цена");
			СтрокаТовары.Вставить("VATRate", "СтавкаНДС");
			СтрокаТовары.Вставить("VAT", "СуммаНДС");
			СтрокаТовары.Вставить("total", "Сумма");
			
			СтрокиТовары = Новый Структура;
			СтрокиТовары.Вставить("rows", Новый Массив);
			СтрокиТовары.rows.Добавить("Товары");
			СтрокиТовары.rows.Добавить(СтрокаТовары);
			
			Результат.Вставить("productRows", СтрокиТовары);
		КонецЕсли;
		Результат.Вставить("signer", "Подписал");
		Результат.Вставить("correspondent", "Контрагент");
		Результат.Вставить("contactPerson", "КонтактноеЛицо");
		Результат.Вставить("prolongationProcedure", "ПорядокПродления");
		
		СтрокаСтатейДДС = Новый Структура;
		СтрокаСтатейДДС.Вставить("item", "СтатьяДДС");
		СтрокаСтатейДДС.Вставить("total", "Сумма");
		СтрокаСтатейДДС.Вставить("VAT", "СуммаНДС");
		
		СтрокиСтатейДДС = Новый Структура;
		СтрокиСтатейДДС.Вставить("rows", Новый Массив);
		СтрокиСтатейДДС.rows.Добавить("СтатьиДДС");
		СтрокиСтатейДДС.rows.Добавить(СтрокаСтатейДДС);
		
		Результат.Вставить("cashFlowRows", СтрокиСтатейДДС);
		
	// Контрагент (корреспондент).
	ИначеЕсли ТипОбъекта = "DMCorrespondent" Тогда
		
		Результат.Вставить("name", "Наименование");
		Результат.Вставить("inn", "ИНН");
		Результат.Вставить("kpp", "КПП");
		Результат.Вставить("okpo", "КодПоОКПО");
		Результат.Вставить("fullName", "ПолноеНаименование");
		Результат.Вставить("comment", "Комментарий");
		Результат.Вставить("legalPrivatePerson", "ЮрФизЛицо");
		Результат.Вставить("privatePerson", "ФизЛицо");
		Результат.Вставить("responsible", "Ответственный");
		
	КонецЕсли;
	
	// Пометка удаления.
	Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("2.1.0.1") Тогда
		Результат.Вставить("deletionMark", "ПометкаУдаления");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает соответствие свойств XDTO реквизитам формы документа, отвечающих за состояния.
//
// Параметры:
//   ТипДокумента - Строка - тип объекта XDTO.
//
// Возвращаемое значение:
//   Структура, где ключ - имя свойства XDTO, а значение - имя реквизита формы документа.
//
Функция СоответствиеСвойствXDTOиСостоянийДокумента(ТипДокумента) Экспорт
	
	СоответствиеРеквизитов = Новый Структура;
	
	СоответствиеРеквизитов.Вставить("statusRegistration",	"СостояниеРегистрация");
	СоответствиеРеквизитов.Вставить("statusConsideration",	"СостояниеРассмотрение");
	СоответствиеРеквизитов.Вставить("statusApproval",		"СостояниеСогласование");
	СоответствиеРеквизитов.Вставить("statusConfirmation",	"СостояниеУтверждение");
	Если ТипДокумента = "DMInternalDocument"
			И ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("2.1.16.2.CORP") Тогда
		СоответствиеРеквизитов.Вставить("statusSigning",	"СостояниеПодписание");
	КонецЕсли;
	СоответствиеРеквизитов.Вставить("statusPerformance",	"СостояниеИсполнение");
	
	Возврат СоответствиеРеквизитов;
	
КонецФункции

// Устарела. Рекомендуется использовать функцию ИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила.
// Возвращает первое правило интеграции по типу объекта ДО и объекта ИС.
//
// Параметры:
//   Объект - Произвольный - объект ИС.
//   ТипОбъектаДО - Строка - тип XDTO объекта Документооборота.
//
// Возвращаемое значение:
//   СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом или
//   Неопределено.
//
Функция ПравилоИнтеграцииОбъекта(Объект, ТипОбъектаДО) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Ссылка
		|ИЗ
		|	Справочник.ПравилаИнтеграцииС1СДокументооборотом
		|ГДЕ
		|	ТипОбъектаИС = &ТипОбъектаИС
		|	И ТипОбъектаДО = &ТипОбъектаДО
		|	И Не ПометкаУдаления
		|");
	
	Запрос.УстановитьПараметр("ТипОбъектаИС", Объект.Метаданные().ПолноеИмя());
	Запрос.УстановитьПараметр("ТипОбъектаДО", ТипОбъектаДО);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции 

// Устарела. Рекомендуется использовать функцию ИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила.
// Возвращает таблицу правил интеграции по заданным условиям.
//
// Параметры:
//   ТипОбъектаДО - Строка - тип объекта XDTO Документооборота.
//   ВидДокументаID - Строка - идентификатор вида документа Документооборота.
//   ВидДокументаТип - Строка - тип XDTO вида документа Документооборота.
//
Функция ПравилаИнтеграцииОбъектов(ТипОбъектаДО, ВидДокументаID,
	ВидДокументаТип = Неопределено) Экспорт
	
	ДанныеКоманд = Новый ТаблицаЗначений;
	ДанныеКоманд.Колонки.Добавить("Наименование");
	ДанныеКоманд.Колонки.Добавить("ТипОбъектаИС");
	ДанныеКоманд.Колонки.Добавить("Правило");
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПравилаИнтеграции.Ссылка Как Правило,
		|	ПравилаИнтеграции.ТипОбъектаИС,
		|	ПравилаИнтеграции.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ПравилаИнтеграцииС1СДокументооборотом КАК ПравилаИнтеграции
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	Справочник.ПравилаИнтеграцииС1СДокументооборотом.ПравилаЗаполненияРеквизитовДО КАК ПравилаВыгрузки
		|ПО
		|	ПравилаИнтеграции.Ссылка = ПравилаВыгрузки.Ссылка
		|	И (ПравилаИнтеграции.ТипОбъектаДО = ""DMCorrespondent""
		|		ИЛИ (
		|		ПравилаВыгрузки.ИмяРеквизитаОбъектаДО = ""documentType""
		|		И (
		|			(ПравилаВыгрузки.Вариант = ЗНАЧЕНИЕ(Перечисление.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение)
		|				И ПравилаВыгрузки.ЗначениеРеквизитаДОID = &ВидДокументаID
		|				И ПравилаВыгрузки.ЗначениеРеквизитаДОТип = &ВидДокументаТип)
		|			ИЛИ 
		|			(ПравилаВыгрузки.Вариант = ЗНАЧЕНИЕ(Перечисление.ВариантыПравилЗаполненияРеквизитов.ИзШаблона)
		|				И ПравилаВыгрузки.ШаблонID = &ВидДокументаID
		|				И ПравилаВыгрузки.ШаблонТип = &ВидДокументаТип)
		|			)
		|		)
		|	)
		|ГДЕ
		|	ПравилаИнтеграции.ТипОбъектаДО = &ТипОбъектаДО
		|	И НЕ ПравилаИнтеграции.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ПравилаИнтеграции.ТипОбъектаИС,
		|	ПравилаИнтеграции.Наименование,
		|	ПравилаИнтеграции.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование
		|");
	
	Запрос.УстановитьПараметр("ТипОбъектаДО", ТипОбъектаДО);
	Запрос.УстановитьПараметр("ВидДокументаID", ВидДокументаID);
	Запрос.УстановитьПараметр("ВидДокументаТип", ВидДокументаТип);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ДанныеКоманд = Результат.Выгрузить();
	КонецЕсли;
	
	Возврат ДанныеКоманд;
	
КонецФункции

// Заполняет объект ИС по объекту XDTO.
//
// Параметры:
//   Прокси - WSПрокси - прокси веб-сервиса Документооборота.
//   Объект - Произвольный - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект ДО, источник данных заполнения.
//   Правило - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом - правила заполнения.
//   Обновление - Булево - заполнять только реквизиты с Обновлять = Истина.
//   ТребуетсяПерепроведение - Булево - Истина, если изменение требует перепроведения.
//
// Возвращаемое значение:
//   Булево - Истина, если объект был изменен, и Ложь в противном случае.
//
Функция ЗаполнитьОбъектПоОбъектуXDTO(Прокси, Объект, ОбъектXDTO, Правило,
	Обновление = Ложь, ТребуетсяПерепроведение = Ложь) Экспорт
	
	ОбъектИзменен = Ложь;
	
	ТипОбъекта = ТипЗнч(Объект);
	МетаданныеОбъекта = Объект.Метаданные();
	Реквизиты = ПолучитьРеквизитыОбъектаИС(МетаданныеОбъекта.ПолноеИмя());
	
	ПроверятьПерепроведение = Обновление
		И ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта)
		И МетаданныеОбъекта.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить
		И Объект.Проведен;
	Запрещено = 
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.Запрещено;
	РазрешеноБезПерепроведения = 
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноБезПерепроведения;
	РазрешеноСПерепроведением = 
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением;
		
	// Переопределяемый модуль может перекрыть настройки правил, разрешив изменение без перепроведения.
	ОбновляемыеРеквизиты = Новый Массив;
	ИнтеграцияС1СДокументооборотПереопределяемый.ПриОпределенииОбновляемыхРеквизитовПроведенногоДокумента(
		МетаданныеОбъекта.ПолноеИмя(),
		ОбновляемыеРеквизиты);
	
	Для Каждого Реквизит Из Реквизиты Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ИмяРеквизитаОбъектаИС", Реквизит.Имя);
		ПараметрыОтбора.Вставить("ЭтоТаблица", Реквизит.ЭтоТаблица);
		ПараметрыОтбора.Вставить("Таблица", Реквизит.Таблица);
		Если Обновление Тогда
			ПараметрыОтбора.Вставить("Обновлять", Истина);
		КонецЕсли;
		
		НайденныеПравилаРеквизитов = Правило.ПравилаЗаполненияРеквизитовИС.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеПравилаРеквизитов.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		ПравилоРеквизита = НайденныеПравилаРеквизитов[0];
		
		Если ПроверятьПерепроведение Тогда
			Если ПравилоРеквизита.РежимИзмененияДанныхПроведенногоДокумента = РазрешеноСПерепроведением Тогда
				РежимИзменения = РазрешеноСПерепроведением;
			ИначеЕсли ПравилоРеквизита.РежимИзмененияДанныхПроведенногоДокумента = РазрешеноБезПерепроведения
				Или ОбновляемыеРеквизиты.Найти(Реквизит.Имя) <> Неопределено Тогда
				РежимИзменения = РазрешеноБезПерепроведения;
			Иначе
				РежимИзменения = Запрещено;
			КонецЕсли;
		Иначе
			РежимИзменения = РазрешеноБезПерепроведения;
		КонецЕсли;
		
		Если Реквизит.ЭтоТаблица Тогда
			
			ОбъектИзменен = Истина; // табличные части всегда перезаполняются полностью
			Объект[Реквизит.Имя].Очистить();
			
			Если ПравилоРеквизита.Вариант = ВариантРеквизит() Тогда // наполним пустыми строками
				
				РазделеннаяСтрока = СтрРазделить(ПравилоРеквизита.ИмяРеквизитаОбъектаДО, ".", Ложь);
				Если РазделеннаяСтрока.Количество() = 1 Тогда
					СписокXDTO = ОбъектXDTO[РазделеннаяСтрока[0]];
				Иначе
					СписокXDTO = ОбъектXDTO[РазделеннаяСтрока[0]][РазделеннаяСтрока[1]];
				КонецЕсли;
				Для Каждого ЭлементСпискаXDTO Из СписокXDTO Цикл
					Объект[Реквизит.Имя].Добавить();
				КонецЦикла;
				
			ИначеЕсли ПравилоРеквизита.Вариант = ВариантВыражение() Тогда // загрузим из результата-таблицы
				
				Источник = ОбъектXDTO;
				Приемник = Объект;
				
				Результат = Неопределено;
				РезультатID = Неопределено;
				РезультатТип = Неопределено;
				
				// Метод не будет выполнен при работе в модели сервиса.
				УстановитьБезопасныйРежим(Истина);
				Выполнить(ПравилоРеквизита.ВычисляемоеВыражение);
				УстановитьБезопасныйРежим(Ложь);
				
				Если ТипЗнч(Результат) = Тип("ТаблицаЗначений") Тогда
					Объект[Реквизит.Имя].Загрузить(Результат);
				КонецЕсли;
				
			Иначе // значениями, указанными для реквизитов: добавим единственную строку
				
				Объект[Реквизит.Имя].Добавить();
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если Не Реквизит.ЭтоДополнительныйРеквизитИС Тогда
			
			// Из реквизита объекта ДО.
			Если ПравилоРеквизита.Вариант = ВариантРеквизит() Тогда 
				
				ЗначенияСвойства = Новый Массив;
				
				Если Не ПравилоРеквизита.ЭтоДополнительныйРеквизитДО Тогда
					
					РазделеннаяСтрока = СтрРазделить(ПравилоРеквизита.ИмяРеквизитаОбъектаДО, ".", Ложь);
					Если РазделеннаяСтрока.Количество() = 1 Тогда // "свойство"
						ИмяСвойства = ПравилоРеквизита.ИмяРеквизитаОбъектаДО;
						Если ТипЗнч(ОбъектXDTO[ИмяСвойства]) = Тип("СписокXDTO") Тогда
							Для Каждого ЭлементСпискаXDTO Из ОбъектXDTO[ИмяСвойства] Цикл
								ЗначенияСвойства.Добавить(ЭлементСпискаXDTO);
							КонецЦикла;
						Иначе
							ЗначенияСвойства.Добавить(ОбъектXDTO[ИмяСвойства]);
						КонецЕсли;
					ИначеЕсли РазделеннаяСтрока.Количество() = 2 Тогда // "список.свойство"
						СписокXDTO = ОбъектXDTO[РазделеннаяСтрока[0]];
						ИмяСвойства = РазделеннаяСтрока[1];
						Для Каждого ЭлементСпискаXDTO Из СписокXDTO Цикл
							ЗначенияСвойства.Добавить(ЭлементСпискаXDTO[ИмяСвойства]);
						КонецЦикла;
					ИначеЕсли РазделеннаяСтрока.Количество() = 3 Тогда // "список.список.свойство"
						СписокXDTO = ОбъектXDTO[РазделеннаяСтрока[0]][РазделеннаяСтрока[1]];
						ИмяСвойства = РазделеннаяСтрока[2];
						Для Каждого ЭлементСпискаXDTO Из СписокXDTO Цикл
							ЗначенияСвойства.Добавить(ЭлементСпискаXDTO[ИмяСвойства]);
						КонецЦикла;
					Иначе
						ВызватьИсключение СтрШаблон(
							НСтр("ru = 'В правилах интеграции указано недопустимое имя реквизита-источника данных заполнения: %1'"), 
							ПравилоРеквизита.ИмяРеквизитаОбъектаДО);
					КонецЕсли;
						
				Иначе // дополнительный реквизит ДО
					
					Для каждого Строка Из ОбъектXDTO.additionalProperties Цикл
						Если Строка.objectId.id = ПравилоРеквизита.ДополнительныйРеквизитДОID 
							И Строка.objectId.type = ПравилоРеквизита.ДополнительныйРеквизитДОТип Тогда
						 	Если Строка.propertySimpleValue <> Неопределено Тогда
								ЗначенияСвойства.Добавить(Строка.propertySimpleValue);
							ИначеЕсли Строка.propertyObjectValue <> Неопределено Тогда
								ЗначенияСвойства.Добавить(Строка.propertyObjectValue);
							Иначе
								ЗначениеСвойства = Неопределено;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла; 
					
				КонецЕсли;
				
				Для НомерЗначения = 0 По ЗначенияСвойства.Количество() - 1 Цикл
					
					ЗначениеСвойства = ЗначенияСвойства[НомерЗначения];
					ЗначениеРеквизита = Неопределено;
					
					Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
						ТипРеквизита = ИнтеграцияС1СДокументооборотПереопределяемый.ПодходящийТип(
							ЗначениеСвойства.objectId.type,
							Реквизит.Тип.Типы());
					Иначе
						ТипРеквизита = Реквизит.Тип.Типы()[0];
					КонецЕсли;
				
					ЭтоПримитивныйТип = ТипРеквизита = Тип("Строка")
						Или ТипРеквизита = Тип("Дата") 
						Или ТипРеквизита = Тип("Число") 
						Или ТипРеквизита = Тип("Булево");
					ЭтоОбъектноеЗначение = 
						ИнтеграцияС1СДокументооборот.ЭтоОбъектноеЗначение(Прокси, ЗначениеСвойства);
				
					Если ЭтоПримитивныйТип
						И Не ЭтоОбъектноеЗначение Тогда 
						
						ЗначениеРеквизита = ЗначениеСвойства;
						
					ИначеЕсли ЗначениеСвойства <> Неопределено
						И ЭтоОбъектноеЗначение Тогда
						
						ПараметрыВыбора = Новый Соответствие;
						Для Каждого СвязьПараметровВыбора Из Реквизит.СвязиПараметровВыбора Цикл
							РазделенныйПуть = СтрРазделить(СвязьПараметровВыбора.ПутьКДанным, ".");
							Если РазделенныйПуть.Количество() = 2
								И РазделенныйПуть[0] = Реквизит.Таблица Тогда
								Пока Объект[Реквизит.Таблица].Количество() - 1 < НомерЗначения Цикл
									Объект[Реквизит.Таблица].Добавить();
								КонецЦикла;
								Строка = Объект[Реквизит.Таблица][НомерЗначения];
								ПараметрыВыбора[СвязьПараметровВыбора.Имя] = Строка[РазделенныйПуть[1]];
							ИначеЕсли РазделенныйПуть.Количество() = 1 Тогда
								ПараметрыВыбора[СвязьПараметровВыбора.Имя] = Объект[РазделенныйПуть[0]];
							Иначе
								Продолжить; // прочие варианты пути к данным не поддерживаются
							КонецЕсли;
						КонецЦикла;
						
						ЗначениеРеквизита = ИнтеграцияС1СДокументооборот.ЗначениеРеквизитаПоОбъектуXDTO(
							ЗначениеСвойства,
							ТипРеквизита,
							Реквизит.Имя,
							ТипЗнч(Объект),
							Объект,,,
							ПараметрыВыбора);
							
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Реквизит.Таблица) Тогда // реквизит табличной части
						
						Пока Объект[Реквизит.Таблица].Количество() - 1 < НомерЗначения Цикл
							Объект[Реквизит.Таблица].Добавить();
						КонецЦикла;
						Строка = Объект[Реквизит.Таблица][НомерЗначения];
						ПредыдущееЗначение = Строка[Реквизит.Имя];
						Строка[Реквизит.Имя] = ЗначениеРеквизита;
						Если Строка[Реквизит.Имя] <> ПредыдущееЗначение Тогда
							Если РежимИзменения = Запрещено Тогда
								Строка[Реквизит.Имя] = ПредыдущееЗначение;
							ИначеЕсли РежимИзменения = РазрешеноБезПерепроведения Тогда
								ОбъектИзменен = Истина;
							ИначеЕсли РежимИзменения = РазрешеноСПерепроведением Тогда
								ОбъектИзменен = Истина;
								ТребуетсяПерепроведение = Истина;
							КонецЕсли;
						КонецЕсли;
						
					Иначе // реквизит шапки
						
						Если ЗначениеРеквизита <> Неопределено Тогда
							
							ПредыдущееЗначение = Объект[Реквизит.Имя];
							Объект[Реквизит.Имя] = ЗначениеРеквизита;
							Если Объект[Реквизит.Имя] <> ПредыдущееЗначение Тогда
								Если РежимИзменения = Запрещено Тогда
									Объект[Реквизит.Имя] = ПредыдущееЗначение;
								ИначеЕсли РежимИзменения = РазрешеноБезПерепроведения Тогда
									ОбъектИзменен = Истина;
								ИначеЕсли РежимИзменения = РазрешеноСПерепроведением Тогда
									ОбъектИзменен = Истина;
									ТребуетсяПерепроведение = Истина;
								КонецЕсли;
							КонецЕсли;
							
						КонецЕсли; 
						
						Прервать; // при заполнении реквизита по таблице используется первая строка
						
					КонецЕсли;
					
				КонецЦикла;
				
			// Из указанного значения.
			ИначеЕсли ПравилоРеквизита.Вариант = ВариантЗначение() Тогда
				
				ЗначениеРеквизита = ПравилоРеквизита.ЗначениеРеквизитаИС;
				
				Если ЗначениеЗаполнено(Реквизит.Таблица) Тогда // реквизит табличной части
					
					Для Каждого Строка Из Объект[Реквизит.Таблица] Цикл
						ПредыдущееЗначение = Строка[Реквизит.Имя];
						Строка[Реквизит.Имя] = ЗначениеРеквизита;
						Если Строка[Реквизит.Имя] <> ПредыдущееЗначение Тогда
							Если РежимИзменения = Запрещено Тогда
								Строка[Реквизит.Имя] = ПредыдущееЗначение;
							ИначеЕсли РежимИзменения = РазрешеноБезПерепроведения Тогда
								ОбъектИзменен = Истина;
							ИначеЕсли РежимИзменения = РазрешеноСПерепроведением Тогда
								ОбъектИзменен = Истина;
								ТребуетсяПерепроведение = Истина;
							КонецЕсли;
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе // реквизит шапки
					
					ПредыдущееЗначение = Объект[Реквизит.Имя];
					Объект[Реквизит.Имя] = ЗначениеРеквизита;
					Если Объект[Реквизит.Имя] <> ПредыдущееЗначение Тогда
						Если РежимИзменения = Запрещено Тогда
							Объект[Реквизит.Имя] = ПредыдущееЗначение;
						ИначеЕсли РежимИзменения = РазрешеноБезПерепроведения Тогда
							ОбъектИзменен = Истина;
						ИначеЕсли РежимИзменения = РазрешеноСПерепроведением Тогда
							ОбъектИзменен = Истина;
							ТребуетсяПерепроведение = Истина;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			// Из выражения на встроенном языке.
			ИначеЕсли ПравилоРеквизита.Вариант = ВариантВыражение() Тогда
				
				Параметры = Новый Структура;
				Параметры.Вставить("Источник", ОбъектXDTO);
				Параметры.Вставить("Приемник", Объект);
				Параметры.Вставить("Результат", Неопределено);
				
				ОбщегоНазначения.ВыполнитьВБезопасномРежиме(ПравилоРеквизита.ВычисляемоеВыражение, Параметры);
				
				Если Параметры.Результат <> Неопределено Тогда
					
					Если ЗначениеЗаполнено(Реквизит.Таблица) Тогда // реквизит табличной части
						
						Для Каждого Строка Из Объект[Реквизит.Таблица] Цикл
							ПредыдущееЗначение = Строка[Реквизит.Имя];
							ЗаполнитьПоРезультатуВыраженияНаВстроенномЯзыке(
								Строка,
								Реквизит.Имя,
								Параметры.Результат);
							Если Строка[Реквизит.Имя] <> ПредыдущееЗначение Тогда
								Если РежимИзменения = Запрещено Тогда
									Строка[Реквизит.Имя] = ПредыдущееЗначение;
								ИначеЕсли РежимИзменения = РазрешеноБезПерепроведения Тогда
									ОбъектИзменен = Истина;
								ИначеЕсли РежимИзменения = РазрешеноСПерепроведением Тогда
									ОбъектИзменен = Истина;
									ТребуетсяПерепроведение = Истина;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
					Иначе // реквизит шапки
						
						ПредыдущееЗначение = Объект[Реквизит.Имя];
						ЗаполнитьПоРезультатуВыраженияНаВстроенномЯзыке(
								Объект,
								Реквизит.Имя,
								Параметры.Результат);
						Если Объект[Реквизит.Имя] <> ПредыдущееЗначение Тогда
							Если РежимИзменения = Запрещено Тогда
								Объект[Реквизит.Имя] = ПредыдущееЗначение;
							ИначеЕсли РежимИзменения = РазрешеноБезПерепроведения Тогда
								ОбъектИзменен = Истина;
							ИначеЕсли РежимИзменения = РазрешеноСПерепроведением Тогда
								ОбъектИзменен = Истина;
								ТребуетсяПерепроведение = Истина;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе // дополнительный реквизит объекта ИС
			
			СтруктураПоиска = Новый Структура("Свойство", Реквизит.ДополнительныйРеквизитИС);
			СтрокиРеквизита = Объект.ДополнительныеРеквизиты.НайтиСтроки(СтруктураПоиска); 
			Если СтрокиРеквизита.Количество() = 0 Тогда
				ОбъектИзменен = Истина;
				СтрокаРеквизита = Объект.ДополнительныеРеквизиты.Добавить();
				СтрокаРеквизита.Свойство = Реквизит.ДополнительныйРеквизитИС;
			Иначе
				СтрокаРеквизита = СтрокиРеквизита[0];
			КонецЕсли; 
			
			Если ПравилоРеквизита.Вариант = ВариантРеквизит() Тогда 
				
				Если Не ПравилоРеквизита.ЭтоДополнительныйРеквизитДО Тогда
					
					РазделеннаяСтрока = СтрРазделить(ПравилоРеквизита.ИмяРеквизитаОбъектаДО, ".", Ложь);
					Если РазделеннаяСтрока.Количество() = 1 Тогда
						ИмяСвойства = ПравилоРеквизита.ИмяРеквизитаОбъектаДО;
						Если ТипЗнч(ОбъектXDTO[ИмяСвойства]) = Тип("СписокXDTO") Тогда
							Для Каждого ЭлементСпискаXDTO Из ОбъектXDTO[ИмяСвойства] Цикл
								ЗначениеСвойства = ЭлементСпискаXDTO;
								Прервать;
							КонецЦикла;
						Иначе
							ЗначениеСвойства = ОбъектXDTO[ИмяСвойства];
						КонецЕсли;
					ИначеЕсли РазделеннаяСтрока.Количество() = 2 Тогда // "список.свойство"
						СписокXDTO = ОбъектXDTO[РазделеннаяСтрока[0]];
						ИмяСвойства = РазделеннаяСтрока[1];
						Для Каждого ЭлементСпискаXDTO Из СписокXDTO Цикл
							ЗначениеСвойства = ЭлементСпискаXDTO[ИмяСвойства];
							Прервать;
						КонецЦикла;
					ИначеЕсли РазделеннаяСтрока.Количество() = 3 Тогда // "список.список.свойство"
						СписокXDTO = ОбъектXDTO[РазделеннаяСтрока[0]][РазделеннаяСтрока[1]];
						ИмяСвойства = РазделеннаяСтрока[2];
						Для Каждого ЭлементСпискаXDTO Из СписокXDTO Цикл
							ЗначениеСвойства = ЭлементСпискаXDTO[ИмяСвойства];
							Прервать;
						КонецЦикла;
					Иначе
						ВызватьИсключение СтрШаблон(
							НСтр("ru = 'В правилах интеграции указано недопустимое имя реквизита-источника данных заполнения: %1'"), 
							ПравилоРеквизита.ИмяРеквизитаОбъектаДО);
					КонецЕсли;
					
				Иначе // доп. реквизит ДО
					
					Для каждого Строка Из ОбъектXDTO.additionalProperties Цикл
						Если Строка.objectId.id = ПравилоРеквизита.ДополнительныйРеквизитДОID 
							И Строка.objectId.type = ПравилоРеквизита.ДополнительныйРеквизитДОТип Тогда
						 	Если Строка.propertySimpleValue <> Неопределено Тогда
								ЗначениеСвойства = Строка.propertySimpleValue;
							ИначеЕсли  Строка.propertyObjectValue <> Неопределено Тогда
								ЗначениеСвойства = Строка.propertyObjectValue;
							Иначе
								ЗначениеСвойства = Неопределено;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла; 
					
				КонецЕсли;
				
				Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
					ТипРеквизита = ИнтеграцияС1СДокументооборотПереопределяемый.ПодходящийТип(
						ЗначениеСвойства.objectId.type,
						Реквизит.Тип.Типы());
				Иначе
					ТипРеквизита = Реквизит.Тип.Типы()[0];
				КонецЕсли;
				
				ЭтоПримитивныйТип = ТипРеквизита = Тип("Строка")
					Или ТипРеквизита = Тип("Дата") 
					Или ТипРеквизита = Тип("Число") 
					Или ТипРеквизита = Тип("Булево");
					
				ЭтоОбъектноеЗначение = ИнтеграцияС1СДокументооборот.ЭтоОбъектноеЗначение(Прокси, ЗначениеСвойства);
				
				Если ЭтоПримитивныйТип
					И Не ЭтоОбъектноеЗначение Тогда 
					
					ПредыдущееЗначение = СтрокаРеквизита.Значение;
					СтрокаРеквизита.Значение = ЗначениеСвойства;
					ОбъектИзменен = ОбъектИзменен 
						Или СтрокаРеквизита.Значение <> ПредыдущееЗначение;
					
				ИначеЕсли ЗначениеСвойства <> Неопределено
					И ЭтоОбъектноеЗначение Тогда
					
					ЗначениеРеквизита = ИнтеграцияС1СДокументооборот.ЗначениеРеквизитаПоОбъектуXDTO(
						ЗначениеСвойства,
						ТипРеквизита,
						Реквизит.Имя,
						ТипЗнч(Объект),
						Объект,
						Истина,
						СтрокаРеквизита.Свойство);
						
					Если ЗначениеРеквизита <> Неопределено Тогда
						ПредыдущееЗначение = СтрокаРеквизита.Значение;
						СтрокаРеквизита.Значение = ЗначениеРеквизита;
						ОбъектИзменен = ОбъектИзменен 
							Или СтрокаРеквизита.Значение <> ПредыдущееЗначение;
					КонецЕсли; 
					
				КонецЕсли;
					
			ИначеЕсли ПравилоРеквизита.Вариант = ВариантЗначение() Тогда
				
				Если СтрокаРеквизита.Значение <> ПравилоРеквизита.ЗначениеРеквизитаИС Тогда
					ОбъектИзменен = Истина;
					СтрокаРеквизита.Значение = ПравилоРеквизита.ЗначениеРеквизитаИС;
				КонецЕсли;
				
			ИначеЕсли ПравилоРеквизита.Вариант = ВариантВыражение() Тогда
				
				Параметры = Новый Структура;
				Параметры.Вставить("Источник", ОбъектXDTO);
				Параметры.Вставить("Приемник", Объект);
				Параметры.Вставить("Результат", Неопределено);
				
				ОбщегоНазначения.ВыполнитьВБезопасномРежиме(ПравилоРеквизита.ВычисляемоеВыражение, Параметры);
				
				Если Параметры.Результат <> Неопределено Тогда
					ПредыдущееЗначение = СтрокаРеквизита.Значение;
					СтрокаРеквизита.Значение = Параметры.Результат;
					ОбъектИзменен = ОбъектИзменен 
						Или СтрокаРеквизита.Значение <> ПредыдущееЗначение;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Если ОбъектXDTO.Свойства().Получить("deletionMark") <> Неопределено
		И ОбъектXDTO.Установлено("deletionMark") Тогда
		
		ОбъектИзменен = ОбъектИзменен 
			Или (ОбъектXDTO.deletionMark <> Объект.ПометкаУдаления);
		Объект.ПометкаУдаления = ОбъектXDTO.deletionMark;
		
	КонецЕсли;
	
	Возврат ОбъектИзменен;
	
КонецФункции

// Заполняет реквизиты формы из данных объекта-потребителя.
//
// Параметры:
//   Источник - ЛюбаяСсылка - ссылка на объект ИС.
//   Форма - УправляемаяФорма - форма объекта 1С:Документооборота.
//   Правило - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом, Структура - применяемое правило.
//
Процедура ЗаполнитьФормуОбъектаДОПоПравилу(Источник, Форма, Правило) Экспорт
	
	// Правило, переданное в виде ссылки, нуждается в выборке запросом.
	Если ТипЗнч(Правило) = Тип("СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом") Тогда
		ДанныеПравила = ДанныеПравилаДляВыгрузки(Правило);
	Иначе // передана сразу структура данных
		ДанныеПравила = Правило;
	КонецЕсли;
	
	// Определим вид заполняемого документа и получим описание его реквизитов.
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ИмяРеквизитаОбъектаДО", "documentType");
	ПараметрыОтбора.Вставить("ЭтоДополнительныйРеквизитДО", Ложь);
	ПараметрыОтбора.Вставить("Вариант", ВариантЗначение());
		
	// Вид документа может быть задан явно и перекрывать шаблон.
	СтрокиВидДокумента = ДанныеПравила.ПравилаЗаполненияРеквизитовДО.НайтиСтроки(ПараметрыОтбора);
	Если СтрокиВидДокумента.Количество() > 0 Тогда 
		
		СтрокаВидДокумента = СтрокиВидДокумента[0];
		ПараметрыЗаполнения = Новый Структура("documentType",
			Новый Структура("id, type, name", 
				СтрокаВидДокумента.ЗначениеРеквизитаДОID,
				СтрокаВидДокумента.ЗначениеРеквизитаДОТип,
				СтрокаВидДокумента.ЗначениеРеквизитаДО));
				
	Иначе // Вид документа может быть задан только в шаблоне.
			
		ПараметрыОтбора.Вариант = ВариантШаблон();
		СтрокиВидДокумента = ДанныеПравила.ПравилаЗаполненияРеквизитовДО.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиВидДокумента.Количество() > 0 Тогда 
			
			СтрокаВидДокумента = СтрокиВидДокумента[0];
			ПараметрыЗаполнения = Новый Структура("documentType",
				Новый Структура("id, type, name", 
					СтрокаВидДокумента.ШаблонID,
					СтрокаВидДокумента.ШаблонТип,
					СтрокаВидДокумента.ШаблонЗначение));
		КонецЕсли;
		
	КонецЕсли;
		
	СоответствиеСвойствXDTOиРеквизитов = СоответствиеСвойствXDTOиРеквизитовФормыОбъектаДО(Форма.Тип);
	ИсточникОбъект = Источник.ПолучитьОбъект();
	МетаданныеИсточника = Источник.Метаданные();
	
	РеквизитыОбъектаДО = ПолучитьРеквизитыОбъектаДО(ДанныеПравила.ТипОбъектаДО, ПараметрыЗаполнения);
	Для Каждого РеквизитОбъектаДО Из РеквизитыОбъектаДО Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ЭтоДополнительныйРеквизитДО", РеквизитОбъектаДО.ДопРеквизит);
		Если РеквизитОбъектаДО.ДопРеквизит Тогда
			ПараметрыОтбора.Вставить("ДополнительныйРеквизитДОID", РеквизитОбъектаДО.ДопРеквизитID);
			ПараметрыОтбора.Вставить("ДополнительныйРеквизитДОТип", РеквизитОбъектаДО.ДопРеквизитТип);
			ПараметрыОтбора.Вставить("ЭтоТаблица", Ложь);
			ПараметрыОтбора.Вставить("Таблица", "");
		Иначе
			ПараметрыОтбора.Вставить("ИмяРеквизитаОбъектаДО", РеквизитОбъектаДО.Имя);
			ПараметрыОтбора.Вставить("ЭтоТаблица", РеквизитОбъектаДО.ЭтоТаблица);
			ПараметрыОтбора.Вставить("Таблица", РеквизитОбъектаДО.Таблица);
		КонецЕсли;
		
		НайденныеПравилаРеквизитов = ДанныеПравила.ПравилаЗаполненияРеквизитовДО.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеПравилаРеквизитов.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		ПравилоРеквизита = НайденныеПравилаРеквизитов[0];
		
		Если Не РеквизитОбъектаДО.ДопРеквизит Тогда 
			
			Если ЗначениеЗаполнено(РеквизитОбъектаДО.Таблица) Тогда
				
				РазделеннаяСтрока = СтрРазделить(РеквизитОбъектаДО.Таблица, ".", Ложь);
				СвойствоВладелец = СоответствиеСвойствXDTOиРеквизитов[РазделеннаяСтрока[0]];
				ОписаниеТаблицы = СвойствоВладелец[РазделеннаяСтрока[1]];
				ИмяТаблицы = ОписаниеТаблицы[0];
				ИмяРеквизита = ОписаниеТаблицы[1][РеквизитОбъектаДО.Имя];
				
			ИначеЕсли РеквизитОбъектаДО.ЭтоТаблица Тогда
				
				РазделеннаяСтрока = СтрРазделить(РеквизитОбъектаДО.Имя, ".", Ложь);
				СвойствоВладелец = СоответствиеСвойствXDTOиРеквизитов[РазделеннаяСтрока[0]];
				ОписаниеТаблицы = СвойствоВладелец[РазделеннаяСтрока[1]];
				ИмяТаблицы = ОписаниеТаблицы[0];
				ИмяРеквизита = "";
				
			Иначе
				
				ИмяТаблицы = "";
				ИмяРеквизита = СоответствиеСвойствXDTOиРеквизитов[РеквизитОбъектаДО.Имя];
				
			КонецЕсли;
			
			Если РеквизитОбъектаДО.ЭтоТаблица Тогда
				
				Форма[ИмяТаблицы].Очистить();
				
				Если ПравилоРеквизита.Вариант = ВариантРеквизит() Тогда // наполним пустыми строками
					
					ТабличнаяЧасть = ИсточникОбъект[ПравилоРеквизита.ИмяРеквизитаОбъектаИС];
					Для Каждого Строка Из ТабличнаяЧасть Цикл
						Форма[ИмяТаблицы].Добавить();
					КонецЦикла;
				
				ИначеЕсли ПравилоРеквизита.Вариант = ВариантВыражение() Тогда // загрузим из результата-таблицы
					
					Параметры = Новый Структура;
					Параметры.Вставить("Источник", ИсточникОбъект);
					Параметры.Вставить("Результат", Неопределено);
					
					ОбщегоНазначения.ВыполнитьВБезопасномРежиме(ПравилоРеквизита.ВычисляемоеВыражение, Параметры);
				
					СтандартнаяОбработка = Истина;
					ИнтеграцияС1СДокументооборотПереопределяемый.ПриЗаполненииСвойстваОбъектаXDTOПоЗначению(
						Параметры.Результат,
						Форма,
						ДанныеПравила.ТипОбъектаДО,
						ИмяТаблицы,
						Неопределено,
						СтандартнаяОбработка);
					Если Не СтандартнаяОбработка Тогда
						Продолжить;
					КонецЕсли;
					
					Если ТипЗнч(Параметры.Результат) = Тип("ТаблицаЗначений") Тогда
						Для Каждого СтрокаРезультата Из Параметры.Результат Цикл
							СтрокаФормы = Форма[ИмяТаблицы].Добавить();
							Для Каждого Колонка Из Параметры.Результат.Колонки Цикл
								Если Не СтрокаФормы.Свойство(Колонка.Имя) Тогда
									Продолжить;
								КонецЕсли;
								Значение = СтрокаРезультата[Колонка.Имя];
								СтрокаФормы[Колонка.Имя] = Значение;
								Если Не СтрокаФормы.Свойство(Колонка.Имя + "ID") Тогда
									Продолжить;
								КонецЕсли;
								Если ИнтеграцияС1СДокументооборот.ЕстьУникальныйИдентификатор(Значение) Тогда 
									СтрокаФормы[Колонка.Имя + "ID"] = Строка(Значение.УникальныйИдентификатор());
									СтрокаФормы[Колонка.Имя + "Тип"] = Значение.Метаданные().ПолноеИмя();
								ИначеЕсли ЭтоПеречисление(Значение) Тогда
									СтрокаФормы[Колонка.Имя + "ID"] = ИнтеграцияС1СДокументооборот.ИмяЗначенияПеречисления(Значение);
									СтрокаФормы[Колонка.Имя + "Тип"] = Значение.Метаданные().ПолноеИмя();
								Иначе
									СтрокаФормы[Колонка.Имя + "ID"] = Строка(Значение);
									СтрокаФормы[Колонка.Имя + "Тип"] = "Строка";
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					КонецЕсли;
					
				Иначе // значениями, указанными для реквизитов: добавим единственную строку
					
					Форма[ИмяТаблицы].Добавить();
					
				КонецЕсли;
					
				Продолжить;
				
			КонецЕсли; // это таблица
			
			ТипРеквизитаДО = РеквизитОбъектаДО.Тип[0].Значение;
			
			Если ПравилоРеквизита.Вариант = ВариантРеквизит() Тогда 
					
				ИмяРеквизитаОбъектаИС = ПравилоРеквизита.ИмяРеквизитаОбъектаИС;
					
				Если ЗначениеЗаполнено(ПравилоРеквизита.Таблица) Тогда // реквизит табличной части
					
					РазделеннаяСтрока = СтрРазделить(ИмяРеквизитаОбъектаИС, ".");
					Если РазделеннаяСтрока.Количество() = 2 Тогда
						ТабличнаяЧасть = ИсточникОбъект[РазделеннаяСтрока[0]];
						Значения = ТабличнаяЧасть.ВыгрузитьКолонку(РазделеннаяСтрока[1]);
					Иначе
						Значения = Новый Массив;
						Значения.Добавить(ИсточникОбъект[РазделеннаяСтрока[1]]);
					КонецЕсли;
					
				Иначе // обычный или дополнительный реквизит
					
					Значения = Новый Массив;
					
					Если ИмяРеквизитаОбъектаИС = "Представление" Тогда 
						
						Значения.Добавить(Строка(ИсточникОбъект));
						
					ИначеЕсли Найти(ИмяРеквизитаОбъектаИС, ".") > 0 Тогда 
						
						ЗначениеРеквизита = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, ИмяРеквизитаОбъектаИС);
						Значения.Добавить(ЗначениеРеквизита);
						
					Иначе 
						
						Если ПравилоРеквизита.ЭтоДополнительныйРеквизитИС Тогда
							
							Запрос = Новый Запрос(СтрШаблон(
								"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
								|	ДополнительныеРеквизиты.Значение КАК ЗначениеРеквизита
								|ИЗ
								|	%1.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
								|ГДЕ
								|	ДополнительныеРеквизиты.Ссылка = &Источник
								|	И ДополнительныеРеквизиты.Свойство = &Свойство",
								МетаданныеИсточника.ПолноеИмя()));
							Запрос.УстановитьПараметр("Источник", Источник);
							Запрос.УстановитьПараметр("Свойство", ПравилоРеквизита.ДополнительныйРеквизитИС);
							Значения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЗначениеРеквизита");
							
						Иначе // обычный реквизит
							
							Попытка
								
								Значения.Добавить(ИсточникОбъект[ИмяРеквизитаОбъектаИС]);
								
							Исключение // в случае отсутствия реквизита выдадим понятное сообщение об ошибке
								
								Инфо = ИнформацияОбОшибке();
								Если МетаданныеИсточника.Реквизиты.Найти(ИмяРеквизитаОбъектаИС) = Неопределено
									И ПравилоРеквизита.ИмяРеквизитаОбъектаИС <> "Представление" Тогда
									Найден = Ложь;
									Для Каждого СтандартныйРеквизит Из МетаданныеИсточника.СтандартныеРеквизиты Цикл
										Если СтандартныйРеквизит.Имя = ПравилоРеквизита.ИмяРеквизитаОбъектаИС Тогда
											Найден = Истина;
											Прервать;
										КонецЕсли;
									КонецЦикла;
									Если Не Найден Тогда
										ТекстСообщения = СтрШаблон(
											НСтр("ru = 'Не найден реквизит %1, указанный в правиле интеграциии с 1С:Документооборотом.
												|Проверьте правило интеграции или обратитесь к администратору.'",
												ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
											ПравилоРеквизита.ИмяРеквизитаОбъектаИС);
										ЗаписьЖурналаРегистрации(
											ИнтеграцияС1СДокументооборот.ИмяСобытияЖурналаРегистрации(), 
											УровеньЖурналаРегистрации.Ошибка,,
											ДанныеПравила.Ссылка, 
											ТекстСообщения);
										ВызватьИсключение ТекстСообщения;
									КонецЕсли;
								КонецЕсли;
								
								// Иная ошибка.
								ВызватьИсключение ПодробноеПредставлениеОшибки(Инфо);
								
							КонецПопытки;
							
						КонецЕсли; 
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
					Таблица = Форма[ИмяТаблицы];
				Иначе
					Таблица = Новый Массив;
					Таблица.Добавить(Форма);
				КонецЕсли;
				
				Для НомерЗначения = 0 По Значения.Количество() - 1 Цикл
					
					Значение = Значения[НомерЗначения];
					
					СтандартнаяОбработка = Истина;
					ИнтеграцияС1СДокументооборотПереопределяемый.ПриЗаполненииСвойстваОбъектаXDTOПоЗначению(Значение,
						Форма,
						ДанныеПравила.ТипОбъектаДО,
						ИмяРеквизита,
						ТипРеквизитаДО,
						СтандартнаяОбработка);
						
					Если Не СтандартнаяОбработка Тогда
						Продолжить;
					КонецЕсли;
					
					Для НомерЭлемента = 0 По Таблица.Количество() - 1 Цикл
						
						Если Значения.Количество() > 1
							И НомерЗначения <> НомерЭлемента Тогда
							Продолжить;
						КонецЕсли;
						
						Элемент = Таблица[НомерЭлемента];
						
						Если ЭтоПримитивныйТип(ТипРеквизитаДО) Тогда 
							Элемент[ИмяРеквизита] = Значение;
						ИначеЕсли ЗначениеЗаполнено(Значение) Тогда 
							Элемент[ИмяРеквизита] = Строка(Значение);
							Если ИнтеграцияС1СДокументооборот.ЕстьУникальныйИдентификатор(Значение) Тогда 
								Элемент[ИмяРеквизита + "ID"] = Строка(Значение.УникальныйИдентификатор());
								Элемент[ИмяРеквизита + "Тип"] = Значение.Метаданные().ПолноеИмя();
							ИначеЕсли ЭтоПеречисление(Значение) Тогда
								Элемент[ИмяРеквизита + "ID"] = 
									ИнтеграцияС1СДокументооборот.ИмяЗначенияПеречисления(Значение);
								Элемент[ИмяРеквизита + "Тип"] = Значение.Метаданные().ПолноеИмя();
							Иначе // примитивный тип на стороне ИС
								Элемент[ИмяРеквизита + "ID"] = Строка(Значение);
								Элемент[ИмяРеквизита + "Тип"] = "Строка";
							КонецЕсли;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			ИначеЕсли ПравилоРеквизита.Вариант = ВариантЗначение() Тогда
				
				Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
					Таблица = Форма[ИмяТаблицы];
				Иначе
					Таблица = Новый Массив;
					Таблица.Добавить(Форма);
				КонецЕсли;
				
				ВидДокументаИзменен = Ложь;
				
				Для Каждого Элемент Из Таблица Цикл
					
					Если ЭтоПримитивныйТип(ТипРеквизитаДО) Тогда 
						Элемент[ИмяРеквизита] = 
							ПравилоРеквизита.ЗначениеРеквизитаДО;
					Иначе
						Если РеквизитОбъектаДО.Имя = "documentType"
							И Элемент[ИмяРеквизита + "ID"] <> ПравилоРеквизита.ЗначениеРеквизитаДОID Тогда
							ВидДокументаИзменен = Истина;
						КонецЕсли;
						Элемент[ИмяРеквизита] = ПравилоРеквизита.ЗначениеРеквизитаДО;
						Элемент[ИмяРеквизита + "ID"] = ПравилоРеквизита.ЗначениеРеквизитаДОID;
						Элемент[ИмяРеквизита + "Тип"] = ПравилоРеквизита.ЗначениеРеквизитаДОТип;
					КонецЕсли;
					
				КонецЦикла;
				
				Если ВидДокументаИзменен Тогда 
					Обработки.ИнтеграцияС1СДокументооборот.ПриИзмененииВидаНаФормеДокумента(Форма);
				КонецЕсли;
				
			ИначеЕсли ПравилоРеквизита.Вариант = ВариантВыражение() Тогда
				
				Параметры = Новый Структура;
				Параметры.Вставить("Источник", ИсточникОбъект);
				Параметры.Вставить("Результат", Неопределено);
				Параметры.Вставить("РезультатID", Неопределено);
				Параметры.Вставить("РезультатТип", Неопределено);
				
				ОбщегоНазначения.ВыполнитьВБезопасномРежиме(ПравилоРеквизита.ВычисляемоеВыражение, Параметры);
				
				Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
					Таблица = Форма[ИмяТаблицы];
				Иначе
					Таблица = Новый Массив;
					Таблица.Добавить(Форма);
				КонецЕсли;
				
				Для Каждого Элемент Из Таблица Цикл
					Если ЭтоПримитивныйТип(ТипРеквизитаДО) Тогда 
						Элемент[ИмяРеквизита] = Параметры.Результат;
					ИначеЕсли ЗначениеЗаполнено(Параметры.Результат) Тогда // ссылочный тип на стороне ДО 
						Элемент[ИмяРеквизита] = Строка(Параметры.Результат);
						Если ИнтеграцияС1СДокументооборот.ЕстьУникальныйИдентификатор(Параметры.Результат) Тогда 
							Элемент[ИмяРеквизита + "ID"] = Строка(Параметры.Результат.УникальныйИдентификатор());
							Элемент[ИмяРеквизита + "Тип"] = Параметры.Результат.Метаданные().ПолноеИмя();
						ИначеЕсли ЭтоПеречисление(Параметры.Результат) Тогда
							Элемент[ИмяРеквизита + "ID"] = 
								ИнтеграцияС1СДокументооборот.ИмяЗначенияПеречисления(Параметры.Результат);
							Элемент[ИмяРеквизита + "Тип"] = Параметры.Результат.Метаданные().ПолноеИмя();
						ИначеЕсли ЗначениеЗаполнено(Параметры.РезультатID) 
							И ЗначениеЗаполнено(Параметры.РезультатТип) Тогда
							Элемент[ИмяРеквизита + "ID"] = Параметры.РезультатID;
							Элемент[ИмяРеквизита + "Тип"] = Параметры.РезультатТип;
						Иначе // примитивный тип на стороне ИС
							Элемент[ИмяРеквизита + "Тип"] = "Строка";
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе // дополнительный реквизит на стороне ДО
			
			ТипРеквизитаДО = РеквизитОбъектаДО.Тип[0].Значение;
			
			ПараметрыОтбора = Новый Структура("СвойствоТип, СвойствоID",
				РеквизитОбъектаДО.ДопРеквизитТип,
				РеквизитОбъектаДО.ДопРеквизитID);
			Таблица = Форма.Свойства.НайтиСтроки(ПараметрыОтбора);
			Если Таблица.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			Элемент = Таблица[0];
			
			Если ПравилоРеквизита.Вариант = ВариантРеквизит() Тогда 
				
				ИмяРеквизитаОбъектаИС = ПравилоРеквизита.ИмяРеквизитаОбъектаИС;
				Значение = Неопределено;
				
				Если ИмяРеквизитаОбъектаИС = "Представление" Тогда 
					
					Значение = Строка(ИсточникОбъект);
					
				ИначеЕсли Найти(ИмяРеквизитаОбъектаИС, ".") > 0 Тогда 
					
					Значение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, ИмяРеквизитаОбъектаИС);
					
				ИначеЕсли ПравилоРеквизита.ЭтоДополнительныйРеквизитИС Тогда	
					
					Запрос = Новый Запрос(СтрШаблон(
						"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
						|	ДополнительныеРеквизиты.Значение КАК Значение
						|ИЗ
						|	%1.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
						|ГДЕ
						|	ДополнительныеРеквизиты.Ссылка = &Источник
						|	И ДополнительныеРеквизиты.Свойство = &Свойство
						|",
						МетаданныеИсточника.ПолноеИмя()));
					Запрос.УстановитьПараметр("Источник", Источник);
					Запрос.УстановитьПараметр("Свойство", ПравилоРеквизита.ДополнительныйРеквизитИС);
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						Значение = Выборка.Значение;
					КонецЕсли;
					
				Иначе // обычный реквизит объекта
						
					Попытка
						
						Значение = ИсточникОбъект[ИмяРеквизитаОбъектаИС];
						
					Исключение // в случае отсутствия реквизита выдадим понятное сообщение об ошибке
						
						Инфо = ИнформацияОбОшибке();
						Если МетаданныеИсточника.Реквизиты.Найти(ИмяРеквизитаОбъектаИС) = Неопределено
							И ИмяРеквизитаОбъектаИС <> "Представление" Тогда
							Найден = Ложь;
							Для Каждого СтандартныйРеквизит Из МетаданныеИсточника.СтандартныеРеквизиты Цикл
								Если СтандартныйРеквизит.Имя = ИмяРеквизитаОбъектаИС Тогда
									Найден = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если Не Найден Тогда
								ТекстСообщения = СтрШаблон(
									НСтр("ru = 'Не найден реквизит %1, указанный в правиле интеграциии с 1С:Документооборотом.
										|Проверьте правило интеграции или обратитесь к администратору.'",
										ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
									ИмяРеквизитаОбъектаИС);
								ЗаписьЖурналаРегистрации(
									ИнтеграцияС1СДокументооборот.ИмяСобытияЖурналаРегистрации(), 
									УровеньЖурналаРегистрации.Ошибка,,
									ДанныеПравила.Ссылка, 
									ТекстСообщения);
								ВызватьИсключение ТекстСообщения;
							КонецЕсли;
						КонецЕсли;
						
						// Иная ошибка.
						ВызватьИсключение ПодробноеПредставлениеОшибки(Инфо);
						
					КонецПопытки;
					
				КонецЕсли;
				
				Если ЭтоПримитивныйТип(ТипРеквизитаДО) Тогда 
					Элемент["Значение"] = Значение;
				ИначеЕсли ЗначениеЗаполнено(Значение) Тогда 
					Элемент["Значение"] = Строка(Значение);
					Если ИнтеграцияС1СДокументооборот.ЕстьУникальныйИдентификатор(Значение) Тогда 
						Элемент["ЗначениеID"] = Строка(Значение.УникальныйИдентификатор());
						Элемент["ЗначениеТип"] = Значение.Метаданные().ПолноеИмя();
					ИначеЕсли ЭтоПеречисление(Значение) Тогда
						Элемент["ЗначениеID"] = ИнтеграцияС1СДокументооборот.ИмяЗначенияПеречисления(Значение);
						Элемент["ЗначениеТип"] = Значение.Метаданные().ПолноеИмя();
					Иначе
						Элемент["ЗначениеID"] = Строка(Значение);
						Элемент["ЗначениеТип"] = ТипРеквизитаДО;
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ПравилоРеквизита.Вариант = ВариантЗначение() Тогда
				
				Элемент["Значение"] = ПравилоРеквизита.ЗначениеРеквизитаДО;
				Элемент["ЗначениеID"]  = ПравилоРеквизита.ЗначениеРеквизитаДОID;
				Элемент["ЗначениеТип"] = ПравилоРеквизита.ЗначениеРеквизитаДОТип;
				
			ИначеЕсли ПравилоРеквизита.Вариант = ВариантВыражение() Тогда
				
				Параметры = Новый Структура;
				Параметры.Вставить("Источник", ИсточникОбъект);
				Параметры.Вставить("Результат", Неопределено);
				Параметры.Вставить("РезультатID", Неопределено);
				Параметры.Вставить("РезультатТип", Неопределено);
				
				ОбщегоНазначения.ВыполнитьВБезопасномРежиме(ПравилоРеквизита.ВычисляемоеВыражение, Параметры);
				
				Если ЭтоПримитивныйТип(ТипРеквизитаДО) Тогда 
					Элемент["Значение"] = Параметры.Результат;
				ИначеЕсли ЗначениеЗаполнено(Параметры.Результат) Тогда 
					Элемент["Значение"] = Строка(Параметры.Результат);
					Если ИнтеграцияС1СДокументооборот.ЕстьУникальныйИдентификатор(Параметры.Результат) Тогда 
						Элемент["ЗначениеID"] = Строка(Параметры.Результат.УникальныйИдентификатор());
						Элемент["ЗначениеТип"] = Параметры.Результат.Метаданные().ПолноеИмя();
					ИначеЕсли ЭтоПеречисление(Параметры.Результат) Тогда
						Элемент["ЗначениеID"] = 
							ИнтеграцияС1СДокументооборот.ИмяЗначенияПеречисления(Параметры.Результат);
						Элемент["ЗначениеТип"] = Параметры.Результат.Метаданные().ПолноеИмя();
					ИначеЕсли ЗначениеЗаполнено(Параметры.РезультатID) И ЗначениеЗаполнено(Параметры.РезультатТип) Тогда
						Элемент["ЗначениеID"] = Параметры.РезультатID;
						Элемент["ЗначениеТип"] = Параметры.РезультатТип;
					Иначе // примитивный тип на стороне ИС
						Элемент["ЗначениеТип"] = "Строка";
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.ПометкаУдаления = ИсточникОбъект.ПометкаУдаления;
	
	Если ДанныеПравила.ТипОбъектаДО <> "DMCorrespondent" Тогда
		ЗаполнитьПечатныеФормы(
			Источник,
			Форма.Файлы,
			ДанныеПравила,
			Ложь, // не только обновление
			Истина, // помещать во временное хранилище формы
			Форма.УникальныйИдентификатор);
	КонецЕсли;
		
	ИнтеграцияС1СДокументооборотПереопределяемый.ПриЗаполненииФормыОбъектаДОПоОбъектуИС(Источник,
		Форма,
		Правило.Ссылка);
		
КонецПроцедуры

// Заполняет структуру реквизитов объекта ДО по объекту ИС и указанному правилу.
//
// Параметры:
//   Источник - ЛюбаяСсылка - ссылка на исходный объект ИС.
//   СтруктураРеквизитов - Структура - предварительно подготовленная структура реквизитов,
//     заполняемая по данным объекта ИС.
//   Правило - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом, Структура - применяемое правило.
//   ТолькоОбновление - Булево - Истина, если нужно заполнять только автоматически обновляемое.
//
Процедура ЗаполнитьСтруктуруРеквизитовОбъектаДОПоПравилу(Источник, СтруктураРеквизитов, Правило,
	ТолькоОбновление = Ложь) Экспорт
	
	Если ТипЗнч(Правило) = Тип("СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом") Тогда
		ДанныеПравила = ДанныеПравилаДляВыгрузки(Правило);
	Иначе
		ДанныеПравила = Правило;
	КонецЕсли;
	
	// Определим вид заполняемого документа и получим описание его реквизитов.
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ИмяРеквизитаОбъектаДО", "documentType");
	ПараметрыОтбора.Вставить("ЭтоДополнительныйРеквизитДО", Ложь);
	ПараметрыОтбора.Вставить("Вариант", ВариантЗначение());
		
	// Вид документа может быть задан явно и перекрывать шаблон.
	СтрокиВидДокумента = ДанныеПравила.ПравилаЗаполненияРеквизитовДО.НайтиСтроки(ПараметрыОтбора);
	Если СтрокиВидДокумента.Количество() > 0 Тогда 
		
		СтрокаВидДокумента = СтрокиВидДокумента[0];
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("documentType",
			Новый Структура("id, type, name", 
			СтрокаВидДокумента.ЗначениеРеквизитаДОID,
			СтрокаВидДокумента.ЗначениеРеквизитаДОТип,
			СтрокаВидДокумента.ЗначениеРеквизитаДО));
			
	Иначе // Вид документа может быть задан в шаблоне.
			
		ПараметрыОтбора.Вариант = ВариантШаблон();
		СтрокиВидДокумента = ДанныеПравила.ПравилаЗаполненияРеквизитовДО.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиВидДокумента.Количество() > 0 Тогда 
			
			СтрокаВидДокумента = СтрокиВидДокумента[0];
			
			ПараметрыЗаполнения = Новый Структура;
			ПараметрыЗаполнения.Вставить("documentType",
				Новый Структура("id, type, name", 
				СтрокаВидДокумента.ШаблонID,
				СтрокаВидДокумента.ШаблонТип,
				СтрокаВидДокумента.ШаблонЗначение));
			
		КонецЕсли;
		
	КонецЕсли;
	
	РеквизитыОбъектаДО = ПолучитьРеквизитыОбъектаДО(
		ДанныеПравила.ТипОбъектаДО,
		ПараметрыЗаполнения);
		
	СоответствиеСвойствXDTOиРеквизитов = 
		СоответствиеСвойствXDTOиРеквизитовФормыОбъектаДО(ДанныеПравила.ТипОбъектаДО);
	ИсточникОбъект = Источник.ПолучитьОбъект();
	МетаданныеИсточника = Источник.Метаданные();
	
	Для Каждого РеквизитОбъектаДО Из РеквизитыОбъектаДО Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ЭтоДополнительныйРеквизитДО", РеквизитОбъектаДО.ДопРеквизит);
		Если РеквизитОбъектаДО.ДопРеквизит Тогда
			ПараметрыОтбора.Вставить("ДополнительныйРеквизитДОID", РеквизитОбъектаДО.ДопРеквизитID);
			ПараметрыОтбора.Вставить("ДополнительныйРеквизитДОТип", РеквизитОбъектаДО.ДопРеквизитТип);
			ПараметрыОтбора.Вставить("ЭтоТаблица", Ложь);
			ПараметрыОтбора.Вставить("Таблица", "");
		Иначе
			ПараметрыОтбора.Вставить("ИмяРеквизитаОбъектаДО", РеквизитОбъектаДО.Имя);
			ПараметрыОтбора.Вставить("ЭтоТаблица", РеквизитОбъектаДО.ЭтоТаблица);
			ПараметрыОтбора.Вставить("Таблица", РеквизитОбъектаДО.Таблица);
		КонецЕсли;
		Если ТолькоОбновление Тогда
			ПараметрыОтбора.Вставить("Обновлять", Истина);
		КонецЕсли;
		
		НайденныеПравилаРеквизитов = ДанныеПравила.ПравилаЗаполненияРеквизитовДО.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеПравилаРеквизитов.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		ПравилоРеквизита = НайденныеПравилаРеквизитов[0];
		
		Если Не РеквизитОбъектаДО.ДопРеквизит Тогда 
			
			Если ЗначениеЗаполнено(РеквизитОбъектаДО.Таблица) Тогда
				РазделеннаяСтрока = СтрРазделить(РеквизитОбъектаДО.Таблица, ".", Ложь);
				СвойствоВладелец = СоответствиеСвойствXDTOиРеквизитов[РазделеннаяСтрока[0]];
				ОписаниеТаблицы = СвойствоВладелец[РазделеннаяСтрока[1]];
				ИмяТаблицы = ОписаниеТаблицы[0];
				ИмяРеквизита = ОписаниеТаблицы[1][РеквизитОбъектаДО.Имя];
			ИначеЕсли РеквизитОбъектаДО.ЭтоТаблица Тогда
				РазделеннаяСтрока = СтрРазделить(РеквизитОбъектаДО.Имя, ".", Ложь);
				СвойствоВладелец = СоответствиеСвойствXDTOиРеквизитов[РазделеннаяСтрока[0]];
				ОписаниеТаблицы = СвойствоВладелец[РазделеннаяСтрока[1]];
				ИмяТаблицы = ОписаниеТаблицы[0];
				ИмяРеквизита = "";
			Иначе
				ИмяТаблицы = "";
				ИмяРеквизита = СоответствиеСвойствXDTOиРеквизитов[РеквизитОбъектаДО.Имя];
			КонецЕсли;
			
			Если РеквизитОбъектаДО.ЭтоТаблица Тогда
				
				СтруктураРеквизитов[ИмяТаблицы].Очистить();
				
				Если ПравилоРеквизита.Вариант = ВариантРеквизит() Тогда // наполним пустыми строками
					
					ТабличнаяЧасть = ИсточникОбъект[ПравилоРеквизита.ИмяРеквизитаОбъектаИС];
					Для Каждого Строка Из ТабличнаяЧасть Цикл
						СтруктураРеквизитов[ИмяТаблицы].Добавить();
					КонецЦикла;
				
				ИначеЕсли ПравилоРеквизита.Вариант = ВариантВыражение() Тогда // загрузим из результата-таблицы
					
					Параметры = Новый Структура;
					Параметры.Вставить("Источник", ИсточникОбъект);
					Параметры.Вставить("Результат", Неопределено);
					
					ОбщегоНазначения.ВыполнитьВБезопасномРежиме(ПравилоРеквизита.ВычисляемоеВыражение, Параметры);
					
					Если ТипЗнч(Параметры.Результат) = Тип("ТаблицаЗначений") Тогда
						Для Каждого СтрокаРезультата Из Параметры.Результат Цикл
							Таблица = СтруктураРеквизитов[ИмяТаблицы]; // ТаблицаЗначений
							Элемент = Таблица.Добавить();
							Для Каждого КолонкаРезультата Из Параметры.Результат Цикл
								Если Таблица.Колонки.Найти(КолонкаРезультата.Имя) = Неопределено Тогда
									Продолжить;
								КонецЕсли;
								ЗначениеСвойства = СтрокаРезультата[КолонкаРезультата.Имя];
								Элемент[КолонкаРезультата.Имя] = ЗначениеСвойства;
								ЭтоСсылочныйТип = 
									Таблица.Колонки.Найти(КолонкаРезультата.Имя + "ID") <> Неопределено
									И Таблица.Колонки.Найти(КолонкаРезультата.Имя + "Тип") <> Неопределено;
								Если ЭтоСсылочныйТип Тогда
									Если ИнтеграцияС1СДокументооборот.ЕстьУникальныйИдентификатор(ЗначениеСвойства) Тогда 
										Элемент[КолонкаРезультата.Имя + "ID"] = Строка(ЗначениеСвойства.УникальныйИдентификатор());
										Элемент[КолонкаРезультата.Имя + "Тип"] = ЗначениеСвойства.Метаданные().ПолноеИмя();
									ИначеЕсли ЭтоПеречисление(ЗначениеСвойства) Тогда
										Элемент[КолонкаРезультата.Имя + "ID"] = 
											ИнтеграцияС1СДокументооборот.ИмяЗначенияПеречисления(ЗначениеСвойства);
										Элемент[КолонкаРезультата.Имя + "Тип"] = ЗначениеСвойства.Метаданные().ПолноеИмя();
									Иначе
										Элемент[КолонкаРезультата.Имя + "ID"] = Строка(ЗначениеСвойства);
										Элемент[КолонкаРезультата.Имя + "Тип"] = "Строка";
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					КонецЕсли;
					
				Иначе // значениями, указанными для реквизитов: добавим единственную строку
					
					СтруктураРеквизитов[ИмяТаблицы].Добавить();
					
				КонецЕсли;
					
				Продолжить;
				
			КонецЕсли; // это таблица
			
			ТипРеквизитаДО = РеквизитОбъектаДО.Тип[0].Значение;
			
			Если ПравилоРеквизита.Вариант = ВариантРеквизит() Тогда 
					
				ИмяРеквизитаОбъектаИС = ПравилоРеквизита.ИмяРеквизитаОбъектаИС;
					
				Если ЗначениеЗаполнено(ПравилоРеквизита.Таблица) Тогда // реквизит табличной части
					
					РазделеннаяСтрока = СтрРазделить(ИмяРеквизитаОбъектаИС, ".");
					Если РазделеннаяСтрока.Количество() = 2 Тогда
						ТабличнаяЧасть = ИсточникОбъект[РазделеннаяСтрока[0]];
						Значения = ТабличнаяЧасть.ВыгрузитьКолонку(РазделеннаяСтрока[1]);
					Иначе
						Значения = Новый Массив;
						Значения.Добавить(ИсточникОбъект[РазделеннаяСтрока[1]]);
					КонецЕсли;
					
				Иначе // обычный или дополнительный реквизит
					
					Значения = Новый Массив;
					
					Если ИмяРеквизитаОбъектаИС = "Представление" Тогда 
							
						Значения.Добавить(Строка(ИсточникОбъект));
						
					ИначеЕсли Найти(ИмяРеквизитаОбъектаИС, ".") > 0 Тогда 
						
						ЗначениеРеквизита = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, ИмяРеквизитаОбъектаИС);
						Значения.Добавить(ЗначениеРеквизита);
						
					ИначеЕсли ПравилоРеквизита.ЭтоДополнительныйРеквизитИС Тогда
						
						Запрос = Новый Запрос(СтрШаблон(
							"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
							|	ДополнительныеРеквизиты.Значение КАК ЗначениеРеквизита
							|ИЗ
							|	%1.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
							|ГДЕ
							|	ДополнительныеРеквизиты.Ссылка = &Источник
							|	И ДополнительныеРеквизиты.Свойство = &Свойство",
							МетаданныеИсточника.ПолноеИмя()));
						Запрос.УстановитьПараметр("Источник", Источник);
						Запрос.УстановитьПараметр("Свойство", ПравилоРеквизита.ДополнительныйРеквизитИС);
						Значения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЗначениеРеквизита");
							
					Иначе // обычный реквизит объекта
							
						Попытка
							
							Значения.Добавить(ИсточникОбъект[ИмяРеквизитаОбъектаИС]);
							
						Исключение // в случае отсутствия реквизита выдадим понятное сообщение об ошибке
							
							Инфо = ИнформацияОбОшибке();
							Если МетаданныеИсточника.Реквизиты.Найти(ИмяРеквизитаОбъектаИС) = Неопределено
								И ИмяРеквизитаОбъектаИС <> "Представление" Тогда
								Найден = Ложь;
								Для Каждого СтандартныйРеквизит Из МетаданныеИсточника.СтандартныеРеквизиты Цикл
									Если СтандартныйРеквизит.Имя = ИмяРеквизитаОбъектаИС Тогда
										Найден = Истина;
										Прервать;
									КонецЕсли;
								КонецЦикла;
								Если Не Найден Тогда
									ТекстСообщения = СтрШаблон(
										НСтр("ru = 'Не найден реквизит %1, указанный в правиле интеграции с 1С:Документооборотом.
											|Проверьте правило интеграции или обратитесь к администратору.'",
											ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
										ПравилоРеквизита.ИмяРеквизитаОбъектаИС);
									ЗаписьЖурналаРегистрации(
										ИнтеграцияС1СДокументооборот.ИмяСобытияЖурналаРегистрации(), 
										УровеньЖурналаРегистрации.Ошибка,,
										ДанныеПравила.Ссылка, 
										ТекстСообщения);
									ВызватьИсключение ТекстСообщения;
								КонецЕсли;
							КонецЕсли;
							
							// Иная ошибка.
							ВызватьИсключение ПодробноеПредставлениеОшибки(Инфо);
							
						КонецПопытки;
						
					КонецЕсли;
					
				КонецЕсли;
					
				Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
					Таблица = СтруктураРеквизитов[ИмяТаблицы];
				Иначе
					Таблица = Новый Массив;
					Таблица.Добавить(СтруктураРеквизитов);
				КонецЕсли;
				
				Для НомерЗначения = 0 По Значения.Количество() - 1 Цикл
					
					Значение = Значения[НомерЗначения];
					
					СтандартнаяОбработка = Истина;
					ИнтеграцияС1СДокументооборотПереопределяемый.ПриЗаполненииСвойстваОбъектаXDTOПоЗначению(Значение,
						СтруктураРеквизитов,
						ДанныеПравила.ТипОбъектаДО,
						ИмяТаблицы,
						ТипРеквизитаДО,
						СтандартнаяОбработка);
						
					Если Не СтандартнаяОбработка Тогда
						Продолжить;
					КонецЕсли;
					
					Для НомерЭлемента = 0 По Таблица.Количество() - 1 Цикл
						
						Если Значения.Количество() > 1
							И НомерЗначения <> НомерЭлемента Тогда
							Продолжить;
						КонецЕсли;
						
						Элемент = Таблица[НомерЭлемента];
						
						Если ЭтоПримитивныйТип(ТипРеквизитаДО) Тогда
							Элемент[ИмяРеквизита] = Значение;
						ИначеЕсли ЗначениеЗаполнено(Значение) Тогда // ссылочный тип на стороне ДО
							Элемент[ИмяРеквизита] = Строка(Значение);
							Если ИнтеграцияС1СДокументооборот.ЕстьУникальныйИдентификатор(Значение) Тогда 
								Элемент[ИмяРеквизита + "ID"] = Строка(Значение.УникальныйИдентификатор());
								Элемент[ИмяРеквизита + "Тип"] = Значение.Метаданные().ПолноеИмя();
							ИначеЕсли ЭтоПеречисление(Значение) Тогда
								Элемент[ИмяРеквизита + "ID"] = ИнтеграцияС1СДокументооборот.ИмяЗначенияПеречисления(Значение);
								Элемент[ИмяРеквизита + "Тип"] = Значение.Метаданные().ПолноеИмя();
							Иначе // примитивный тип на стороне ИС
								Элемент[ИмяРеквизита + "ID"] = Строка(Значение);
								Элемент[ИмяРеквизита + "Тип"] = "Строка";
							КонецЕсли;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			ИначеЕсли ПравилоРеквизита.Вариант = ВариантЗначение() Тогда
				
				Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
					Таблица = СтруктураРеквизитов[ИмяТаблицы];
				Иначе
					Таблица = Новый Массив;
					Таблица.Добавить(СтруктураРеквизитов);
				КонецЕсли;
				
				Для Каждого Элемент Из Таблица Цикл
					
					Если ЭтоПримитивныйТип(ТипРеквизитаДО) Тогда
						Элемент[ИмяРеквизита] = ПравилоРеквизита.ЗначениеРеквизитаДО;
					Иначе // ссылочный тип на стороне ДО
						Элемент[ИмяРеквизита] = ПравилоРеквизита.ЗначениеРеквизитаДО;
						Элемент[ИмяРеквизита + "ID"] = ПравилоРеквизита.ЗначениеРеквизитаДОID;
						Элемент[ИмяРеквизита + "Тип"] = ПравилоРеквизита.ЗначениеРеквизитаДОТип;
					КонецЕсли;
						
				КонецЦикла;
				
			ИначеЕсли ПравилоРеквизита.Вариант = ВариантВыражение() Тогда
				
				Параметры = Новый Структура;
				Параметры.Вставить("Источник", ИсточникОбъект);
				Параметры.Вставить("Результат", Неопределено);
				Параметры.Вставить("РезультатID", Неопределено);
				Параметры.Вставить("РезультатТип", Неопределено);
				
				ОбщегоНазначения.ВыполнитьВБезопасномРежиме(ПравилоРеквизита.ВычисляемоеВыражение, Параметры);

				СтандартнаяОбработка = Истина;
				ИнтеграцияС1СДокументооборотПереопределяемый.ПриЗаполненииСвойстваОбъектаXDTOПоЗначению(
					Параметры.Результат,
					СтруктураРеквизитов,
					ДанныеПравила.ТипОбъектаДО,
					ИмяРеквизита,
					ТипРеквизитаДО,
					СтандартнаяОбработка);
					
				Если СтандартнаяОбработка Тогда
					
					Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
						Таблица = СтруктураРеквизитов[ИмяТаблицы];
					Иначе
						Таблица = Новый Массив;
						Таблица.Добавить(СтруктураРеквизитов);
					КонецЕсли;
					
					Для Каждого Элемент Из Таблица Цикл
						
						Если ЭтоПримитивныйТип(ТипРеквизитаДО) Тогда 
							Элемент[ИмяРеквизита] = Параметры.Результат;
						ИначеЕсли ЗначениеЗаполнено(Параметры.Результат) Тогда // ссылочный тип на стороне ДО
							Элемент[ИмяРеквизита] = Строка(Параметры.Результат);
							Если ИнтеграцияС1СДокументооборот.ЕстьУникальныйИдентификатор(Параметры.Результат) Тогда 
								Элемент[ИмяРеквизита + "ID"] = Строка(Параметры.Результат.УникальныйИдентификатор());
								Элемент[ИмяРеквизита + "Тип"] = Параметры.Результат.Метаданные().ПолноеИмя();
							ИначеЕсли ЭтоПеречисление(Параметры.Результат) Тогда
								Элемент[ИмяРеквизита + "ID"] = 
									ИнтеграцияС1СДокументооборот.ИмяЗначенияПеречисления(Параметры.Результат);
								Элемент[ИмяРеквизита + "Тип"] = Параметры.Результат.Метаданные().ПолноеИмя();
							ИначеЕсли ЗначениеЗаполнено(Параметры.РезультатID) 
								И ЗначениеЗаполнено(Параметры.РезультатТип) Тогда
								Элемент[ИмяРеквизита + "ID"] = Параметры.РезультатID;
								Элемент[ИмяРеквизита + "Тип"] = Параметры.РезультатТип;
							Иначе // примитивный тип на стороне ИС
								Элемент[ИмяРеквизита + "Тип"] = "Строка";
							КонецЕсли;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе // дополнительный реквизит на стороне ДО
			
			ТипРеквизитаДО = РеквизитОбъектаДО.Тип[0].Значение;
			
			Таблица = СтруктураРеквизитов.Свойства;
			Элемент = Таблица.Добавить();
			Элемент.СвойствоТип = РеквизитОбъектаДО.ДопРеквизитТип;
			Элемент.СвойствоID = РеквизитОбъектаДО.ДопРеквизитID;
			Элемент.Свойство = "";
			
			Для Каждого Тип Из РеквизитОбъектаДО.Тип Цикл
				ДанныеОТипе = Новый Структура("xdtoClassName, presentation");
				ДанныеОТипе.xdtoClassName = Тип.Значение;
				ДанныеОТипе.presentation = Тип.Представление;
				Элемент.СписокДоступныхТипов.Добавить(ДанныеОТипе);
			КонецЦикла;
			
			Если ПравилоРеквизита.Вариант = ВариантРеквизит() Тогда 
				
				ИмяРеквизитаОбъектаИС = ПравилоРеквизита.ИмяРеквизитаОбъектаИС;
				Значение = Неопределено;
				
				// Получим значение реквизита объекта ИС.
				Если ИмяРеквизитаОбъектаИС = "Представление" Тогда 
					
					Значение = Строка(ИсточникОбъект);
					
				ИначеЕсли Найти(ИмяРеквизитаОбъектаИС, ".") > 0 Тогда 
					
					Значение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, ИмяРеквизитаОбъектаИС);
					
				ИначеЕсли ПравилоРеквизита.ЭтоДополнительныйРеквизитИС Тогда
					
					Запрос = Новый Запрос(СтрШаблон(
						"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
						|	ДополнительныеРеквизиты.Значение КАК Значение
						|ИЗ
						|	%1.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
						|ГДЕ
						|	ДополнительныеРеквизиты.Ссылка = &Источник
						|	И ДополнительныеРеквизиты.Свойство = &Свойство
						|",
						МетаданныеИсточника.ПолноеИмя()));
					Запрос.УстановитьПараметр("Источник", Источник);
					Запрос.УстановитьПараметр("Свойство", ПравилоРеквизита.ДополнительныйРеквизитИС);
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						Значение = Выборка.Значение;
					КонецЕсли;
					
				Иначе // обычный реквизит объекта
						
					Попытка
						
						Значение = ИсточникОбъект[ИмяРеквизитаОбъектаИС];
						
					Исключение // в случае отсутствия реквизита выдадим понятное сообщение об ошибке
						
						Инфо = ИнформацияОбОшибке();
						Если МетаданныеИсточника.Реквизиты.Найти(ИмяРеквизитаОбъектаИС) = Неопределено
							И ИмяРеквизитаОбъектаИС <> "Представление" Тогда
							Найден = Ложь;
							Для Каждого СтандартныйРеквизит Из МетаданныеИсточника.СтандартныеРеквизиты Цикл
								Если СтандартныйРеквизит.Имя = ИмяРеквизитаОбъектаИС Тогда
									Найден = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если Не Найден Тогда
								ТекстСообщения = СтрШаблон(
									НСтр("ru = 'Не найден реквизит %1, указанный в правиле интеграции с 1С:Документооборотом.
										|Проверьте правило интеграции или обратитесь к администратору.'",
										ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
									ИмяРеквизитаОбъектаИС);
								ЗаписьЖурналаРегистрации(
									ИнтеграцияС1СДокументооборот.ИмяСобытияЖурналаРегистрации(), 
									УровеньЖурналаРегистрации.Ошибка,,
									ДанныеПравила.Ссылка, 
									ТекстСообщения);
								ВызватьИсключение ТекстСообщения;
							КонецЕсли;
						КонецЕсли;
						
						// Иная ошибка.
						ВызватьИсключение ПодробноеПредставлениеОшибки(Инфо);
						
					КонецПопытки;
					
				КонецЕсли;
				
				Если ЭтоПримитивныйТип(ТипРеквизитаДО) Тогда 
					Элемент["Значение"] = Значение;
				ИначеЕсли ЗначениеЗаполнено(Значение) Тогда // ссылочный тип на стороне ДО
					Элемент["Значение"] = Строка(Значение);
					Если ИнтеграцияС1СДокументооборот.ЕстьУникальныйИдентификатор(Значение) Тогда 
						Элемент["ЗначениеID"] = Строка(Значение.УникальныйИдентификатор());
						Элемент["ЗначениеТип"] = Значение.Метаданные().ПолноеИмя();
					ИначеЕсли ЭтоПеречисление(Значение) Тогда
						Элемент["ЗначениеID"] = 
							ИнтеграцияС1СДокументооборот.ИмяЗначенияПеречисления(Значение);
						Элемент["ЗначениеТип"] = Значение.Метаданные().ПолноеИмя();
					Иначе // примитивный тип на стороне ИС
						Элемент["ЗначениеID"] = Строка(Значение);
						Элемент["ЗначениеТип"] = ТипРеквизитаДО;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ПравилоРеквизита.Вариант = ВариантЗначение() Тогда
				
				Элемент["Значение"] = ПравилоРеквизита.ЗначениеРеквизитаДО;
				Элемент["ЗначениеID"] = ПравилоРеквизита.ЗначениеРеквизитаДОID;
				Элемент["ЗначениеТип"] = ПравилоРеквизита.ЗначениеРеквизитаДОТип;
				
			ИначеЕсли ПравилоРеквизита.Вариант = ВариантВыражение() Тогда
				
				Параметры = Новый Структура;
				Параметры.Вставить("Источник", ИсточникОбъект);
				Параметры.Вставить("Результат", Неопределено);
				Параметры.Вставить("РезультатID", Неопределено);
				Параметры.Вставить("РезультатТип", Неопределено);
				
				ОбщегоНазначения.ВыполнитьВБезопасномРежиме(ПравилоРеквизита.ВычисляемоеВыражение, Параметры);

				СтандартнаяОбработка = Истина;
				ИнтеграцияС1СДокументооборотПереопределяемый.ПриЗаполненииСвойстваОбъектаXDTOПоЗначению(
					Параметры.Результат,
					СтруктураРеквизитов,
					ДанныеПравила.ТипОбъектаДО,
					ИмяРеквизита,
					ТипРеквизитаДО,
					СтандартнаяОбработка);
					
				Если СтандартнаяОбработка Тогда
				
					Если ЭтоПримитивныйТип(ТипРеквизитаДО) Тогда 
						Элемент["Значение"] = Параметры.Результат;
					ИначеЕсли ЗначениеЗаполнено(Параметры.Результат) Тогда // ссылочный тип на стороне ДО
						Элемент["Значение"] = Строка(Параметры.Результат);
						Если ИнтеграцияС1СДокументооборот.ЕстьУникальныйИдентификатор(Параметры.Результат) Тогда 
							Элемент["ЗначениеID"] = Строка(Параметры.Результат.УникальныйИдентификатор());
							Элемент["ЗначениеТип"] = Параметры.Результат.Метаданные().ПолноеИмя();
						ИначеЕсли ЭтоПеречисление(Параметры.Результат) Тогда
							Элемент["ЗначениеID"] = 
								ИнтеграцияС1СДокументооборот.ИмяЗначенияПеречисления(Параметры.Результат);
							Элемент["ЗначениеТип"] = Параметры.Результат.Метаданные().ПолноеИмя();
						ИначеЕсли ЗначениеЗаполнено(Параметры.РезультатID)
							И ЗначениеЗаполнено(Параметры.РезультатТип) Тогда
							Элемент["ЗначениеID"] = Параметры.РезультатID;
							Элемент["ЗначениеТип"] = Параметры.РезультатТип;
						Иначе // примитивный тип на стороне ИС
							Элемент["ЗначениеТип"] = "Строка";
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураРеквизитов.Свойство("ПометкаУдаления") Тогда
		СтруктураРеквизитов.ПометкаУдаления = Источник.ПометкаУдаления;
	КонецЕсли;
	
	Если ДанныеПравила.ТипОбъектаДО <> "DMCorrespondent" Тогда
		ЗаполнитьПечатныеФормы(
			Источник,
			СтруктураРеквизитов.Файлы,
			ДанныеПравила,
			ТолькоОбновление);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет файлы объекта ДО печатными формами объекта ИС.
//
// Параметры:
//   Источник - ЛюбаяСсылка - ссылка на исходный объект ИС.
//   Файлы - Массив, ДанныеФормыТаблица - заполняемый список файлов.
//   Правило - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом, Структура - выбранное правило.
//   ТолькоОбновление - Булево - Истина, если выполняется только обновление существующих форм.
//   ПомещатьВоВременноеХранилище - Булево - Истина, если файлы следует поместить во временное хранилище
//     с заполнением поля Адрес, и Ложь, если требуется заполнить непосредственно поле ДвоичныеДанные.
//   ИдентификаторФормы - УникальныйИдентификатор - идентификатор форма-владельца хранилища.
//
Процедура ЗаполнитьПечатныеФормы(Источник, Файлы, Правило,
	ТолькоОбновление = Ложь, ПомещатьВоВременноеХранилище = Ложь, ИдентификаторФормы = Неопределено) Экспорт
	
	Если ТипЗнч(Правило) = Тип("СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом") Тогда
		ДанныеПравила = ДанныеПравилаДляВыгрузки(Правило);
	Иначе
		ДанныеПравила = Правило;
	КонецЕсли;
	
	МенеджерыПечати = ДанныеПравила.ПрисоединяемыеПечатныеФормы;
	
	КомандыПечати = ИнтеграцияС1СДокументооборот.КомандыПечатиФормы(
		ДанныеПравила.ТипОбъектаИС + ".Форма.ФормаСписка");
	
	СтрокиКУдалению = Новый Массив;
	Для Каждого МенеджерПечати Из МенеджерыПечати Цикл
		Отбор = Новый Структура("Идентификатор, МенеджерПечати", МенеджерПечати.ИмяКоманды, МенеджерПечати.МенеджерПечати);
		СтрокиКомандыПечати = КомандыПечати.НайтиСтроки(Отбор);
		Если СтрокиКомандыПечати.Количество() > 0 Тогда
			МенеджерПечати.ИмяКоманды = "КомандаПечати"+Формат(КомандыПечати.Индекс(СтрокиКомандыПечати[0]),"ЧН=0; ЧГ=0");
		Иначе
			СтрокиКУдалению.Добавить(МенеджерПечати);
		КонецЕсли;
		Если ТолькоОбновление И (Не МенеджерПечати.Обновлять) Тогда
			СтрокиКУдалению.Добавить(МенеджерПечати);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Строка Из СтрокиКУдалению Цикл
		МенеджерыПечати.Удалить(Строка);
	КонецЦикла;
	
	ПечатныеФормы = МенеджерыПечати.Скопировать();
	МенеджерыПечати.Свернуть("МенеджерПечати");
	МенеджерыПечати = МенеджерыПечати.ВыгрузитьКолонку("МенеджерПечати");
	
	Для Каждого МенеджерПечати из МенеджерыПечати Цикл
		
		МакетыМенеджера = ПечатныеФормы.НайтиСтроки(новый Структура("МенеджерПечати",МенеджерПечати));
		ИменаМакетов = "";
		
		Для Каждого КомандаМенеджера из МакетыМенеджера Цикл
			
			ТаблицаПечатныхФорм = неопределено;
			
			ИнтеграцияС1СДокументооборотПереопределяемый.ЗаполнитьПечатныеФормы(
				Источник, КомандаМенеджера.ИмяКоманды, ТаблицаПечатныхФорм);
			
			ФорматФайлов = ОбщегоНазначения.ИмяЗначенияПеречисления(ДанныеПравила.ТипФайловСохраненияПечатныхФорм);
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
			
			Для каждого ПечатнаяФорма из ТаблицаПечатныхФорм Цикл
				Если ПечатнаяФорма.ТабличныйДокумент <> Неопределено
					И ПечатнаяФорма.ТабличныйДокумент.КоличествоСтраниц() > 0 Тогда
					
					ПечатнаяФорма.ТабличныйДокумент.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента[ФорматФайлов]);
					Файл = Новый Файл(ИмяВременногоФайла);
					
					СтрокаФайлов = Файлы.Добавить();
					СтрокаФайлов.Расширение = ИнтеграцияС1СДокументооборот.
						РасширениеСохраняемойПечатнойФормы(ДанныеПравила.ТипФайловСохраненияПечатныхФорм);
					СтрокаФайлов.ДатаСоздания = Файл.ПолучитьВремяИзменения();
					СтрокаФайлов.ДатаМодификацииУниверсальная = Файл.ПолучитьУниверсальноеВремяИзменения();
					СтрокаФайлов.Размер = Файл.Размер();
					Файл = Неопределено;
					
					Если ПомещатьВоВременноеХранилище Тогда
						СтрокаФайлов.АдресВременногоХранилищаФайла =
							ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), ИдентификаторФормы);
						СтрокаФайлов.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.
							ПолучитьИндексПиктограммыФайла(СтрокаФайлов.Расширение);
					Иначе
						СтрокаФайлов.ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
					КонецЕсли;
					
					Если ОбщегоНазначения.ЭтоДокумент(Источник.Метаданные()) Тогда
						ИмяФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = '%1 №%2 от %3'"),
							Строка(?(ЗначениеЗаполнено(ПечатнаяФорма.СинонимМакета),
								ПечатнаяФорма.СинонимМакета,
								ПечатнаяФорма.ИмяМакета)),
							Строка(Источник.Номер),
							Формат(Источник.Дата, "ДЛФ=D"));
					Иначе
						ИмяФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = '%1 %2'"),
							Строка(?(ЗначениеЗаполнено(ПечатнаяФорма.СинонимМакета),
								ПечатнаяФорма.СинонимМакета,
								ПечатнаяФорма.ИмяМакета)),
							Строка(Источник));
					КонецЕсли;
					ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла, " ");
					СтрокаФайлов.Наименование = ИмяФайла;
					
				КонецЕсли;
			КонецЦикла;
			
			УдалитьФайлы(ИмяВременногоФайла);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляет правила интеграции, использующие шаблон, при его изменении на стороне ДО.
//
// Параметры:
//   ШаблонXDTO - ОбъектXDTO - измененный шаблон.
//
Процедура ОбновитьПравилаПоШаблону(ШаблонXDTO) Экспорт
	
	Если ШаблонXDTO.Свойства().Получить("blockDerivedDocuments") <> Неопределено
		И ШаблонXDTO.Установлено("blockDerivedDocuments") Тогда
		ШаблонЗапрещаетИзменение = ШаблонXDTO.blockDerivedDocuments;
	Иначе
		ШаблонЗапрещаетИзменение = Ложь;
	КонецЕсли;
	
	ЗапросПравила = Новый Запрос(
		"ВЫБРАТЬ
		|	Правила.Ссылка КАК Правило,
		|	Правила.ТипОбъектаДО КАК ТипОбъектаДО
		|ИЗ
		|	Справочник.ПравилаИнтеграцииС1СДокументооборотом КАК Правила
		|ГДЕ
		|	Правила.ШаблонТип = &ШаблонТип
		|	И Правила.ШаблонID = &ШаблонID
		|	И НЕ Правила.ПометкаУдаления");
	ЗапросПравила.УстановитьПараметр("ШаблонТип", ШаблонXDTO.objectId.type);
	ЗапросПравила.УстановитьПараметр("ШаблонID", ШаблонXDTO.objectId.id);
	
	ВыборкаПравила = ЗапросПравила.Выполнить().Выбрать();
	Пока ВыборкаПравила.Следующий() Цикл
		
		Если ШаблонXDTO.Свойства().Получить("documentType") = Неопределено
			Или Не ШаблонXDTO.Установлено("documentType")
			Или Не ЗначениеЗаполнено(ШаблонXDTO.documentType.objectId.id) 
			Или Не ЗначениеЗаполнено(ШаблонXDTO.documentType.objectId.type) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("documentType",
			Новый Структура("id, type, name", 
				ШаблонXDTO.documentType.objectId.id,
				ШаблонXDTO.documentType.objectId.type,
				ШаблонXDTO.documentType.name));
		
		РеквизитыОбъектаДО = ПолучитьРеквизитыОбъектаДО(
			ВыборкаПравила.ТипОбъектаДО,
			ПараметрыЗаполнения);
			
		Правило = ВыборкаПравила.Правило.ПолучитьОбъект();
		Правило.Заблокировать();
		НужнаЗапись = Ложь;
		
		НомерРеквизита = 0;
		Пока НомерРеквизита <= Правило.ПравилаЗаполненияРеквизитовДО.Количество() - 1 Цикл
			
			ПравилоРеквизита = Правило.ПравилаЗаполненияРеквизитовДО[НомерРеквизита];
			ИмяРеквизита = ПравилоРеквизита.ИмяРеквизитаОбъектаДО;
			Если ИмяРеквизита = "performanceDate" Тогда
				ИмяРеквизитаШаблона = "performanceTerm";
			Иначе
				ИмяРеквизитаШаблона = ИмяРеквизита;
			КонецЕсли;
			
			// Проверим, существует ли определенный в правиле реквизит.
			СтруктураОтбора = Новый Структура("ДопРеквизит",
				ПравилоРеквизита.ЭтоДополнительныйРеквизитДО);
			Если ПравилоРеквизита.ЭтоДополнительныйРеквизитДО Тогда 
				СтруктураОтбора.Вставить("ДопРеквизитID",
					ПравилоРеквизита.ДополнительныйРеквизитДОID);
				СтруктураОтбора.Вставить("ЭтоТаблица", Ложь);
				СтруктураОтбора.Вставить("Таблица", "");
			Иначе
				СтруктураОтбора.Вставить("Имя", ИмяРеквизита);
				СтруктураОтбора.Вставить("ЭтоТаблица", ПравилоРеквизита.ЭтоТаблица);
				СтруктураОтбора.Вставить("Таблица", ПравилоРеквизита.Таблица);
			КонецЕсли;
			
			НайденныеРеквизиты = РеквизитыОбъектаДО.НайтиСтроки(СтруктураОтбора);
			Если НайденныеРеквизиты.Количество() = 0 Тогда
				
				Если Не ПравилоРеквизита.ЭтоДополнительныйРеквизитДО Тогда
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'Очищено правило заполнения реквизита %1, отсутствующего в документе'",
							ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
						ИмяРеквизита);
				Иначе
					ТекстСообщения = НСтр("ru = 'Очищено правило заполнения дополнительного реквизита, отсутствующего в документе'",
						ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				КонецЕсли;
				ЗаписьЖурналаРегистрации(
					ИнтеграцияС1СДокументооборот.ИмяСобытияЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение,,
					Правило.Ссылка,
					ТекстСообщения);
					
				НужнаЗапись = Истина;
				Правило.ПравилаЗаполненияРеквизитовДО.Удалить(ПравилоРеквизита);
				
				Продолжить;
				
			КонецЕсли;
			
			Если Не ПравилоРеквизита.ЭтоДополнительныйРеквизитДО Тогда
				Если ШаблонXDTO.Свойства().Получить(ИмяРеквизитаШаблона) <> Неопределено Тогда
					РеквизитШаблона = ШаблонXDTO[ИмяРеквизитаШаблона];
				Иначе
					РеквизитШаблона = Неопределено;
				КонецЕсли;
			Иначе
				Если ШаблонXDTO.Установлено("additionalProperties") Тогда
					РеквизитШаблона = Неопределено;
					Для Каждого ДопРеквизит Из ШаблонXDTO.additionalProperties Цикл
						Если ДопРеквизит.objectId.id = ПравилоРеквизита.ДополнительныйРеквизитДОID
							И ДопРеквизит.objectId.type = ПравилоРеквизита.ДополнительныйРеквизитДОТип Тогда
								
							Если ДопРеквизит.Установлено("propertySimpleValue") Тогда
								РеквизитШаблона = ДопРеквизит.propertySimpleValue;
							ИначеЕсли ДопРеквизит.Установлено("propertyObjectValue") Тогда
								РеквизитШаблона = ДопРеквизит.propertyObjectValue;
							КонецЕсли;
							Прервать;
							
						КонецЕсли;
					КонецЦикла;
				Иначе
					РеквизитШаблона = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			// Проверим, не изменилось ли значение, заданное шаблоном.
			Если ПравилоРеквизита.Вариант = ВариантШаблон()
				И РеквизитШаблона = Неопределено Тогда
				
				Если Не ПравилоРеквизита.ЭтоДополнительныйРеквизитДО Тогда
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'Очищено правило заполнения реквизита %1, отсутствующего в шаблоне'",
							ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
						ИмяРеквизита);
				Иначе
					ТекстСообщения = НСтр("ru = 'Очищено правило заполнения дополнительного реквизита, отсутствующего в шаблоне'",
						ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				КонецЕсли;
				ЗаписьЖурналаРегистрации(
					ИнтеграцияС1СДокументооборот.ИмяСобытияЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение,,
					Правило.Ссылка,
					ТекстСообщения);
					
				НужнаЗапись = Истина;
				Правило.ПравилаЗаполненияРеквизитовДО.Удалить(ПравилоРеквизита);
				Продолжить;
				
			КонецЕсли;
			
			Если ТипЗнч(РеквизитШаблона) = Тип("ОбъектXDTO") Тогда
				РеквизитШаблонаID = РеквизитШаблона.objectId.id;
				РеквизитШаблонаТип = РеквизитШаблона.objectId.type;
				РеквизитШаблонаЗначение = РеквизитШаблона.name;
				ЗаполненВШаблоне = ЗначениеЗаполнено(РеквизитШаблонаID);
			Иначе // примитивный тип или Неопределено
				РеквизитШаблонаID = "";
				РеквизитШаблонаТип = "";
				РеквизитШаблонаЗначение = РеквизитШаблона;
				ЗаполненВШаблоне = ЗначениеЗаполнено(РеквизитШаблона);
			КонецЕсли;
			
			// Изменилось ли значение?
			Если (ЗначениеЗаполнено(ПравилоРеквизита.ШаблонID)
					И ПравилоРеквизита.ШаблонID <> РеквизитШаблонаID)
				Или (Не ЗначениеЗаполнено(ПравилоРеквизита.ШаблонID)
					И ПравилоРеквизита.ШаблонЗначение <> РеквизитШаблонаЗначение)
				Или (ПравилоРеквизита.ЗаполненВШаблоне <> ЗаполненВШаблоне) Тогда
					
				НужнаЗапись = Истина;
					
				ПравилоРеквизита.ШаблонЗначение = РеквизитШаблонаЗначение;
				ПравилоРеквизита.ШаблонID = РеквизитШаблонаID;
				ПравилоРеквизита.ШаблонТип = РеквизитШаблонаТип;
				ПравилоРеквизита.ЗаполненВШаблоне = ЗаполненВШаблоне;
				
			КонецЕсли;
			
			// Ключевой реквизит должен быть заполнен.
			Если ПравилоРеквизита.Вариант = ВариантШаблон()
				И ПравилоРеквизита.Ключевой
				И Не ЗаполненВШаблоне Тогда
				
				Если Не ПравилоРеквизита.ЭтоДополнительныйРеквизитДО Тогда
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'Очищен признак ""Ключевой"" у реквизита %1, отсутствующего в шаблоне'",
							ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
						ИмяРеквизита);
				Иначе
					ТекстСообщения = НСтр("ru = 'Очищен признак ""Ключевой"" у дополнительного реквизита, отсутствующего в шаблоне'",
						ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				КонецЕсли;
				ЗаписьЖурналаРегистрации(
					ИнтеграцияС1СДокументооборот.ИмяСобытияЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение,,
					Правило.Ссылка,
					ТекстСообщения);
					
				НужнаЗапись = Истина;
				
				ПравилоРеквизита.Ключевой = Ложь;
				
			КонецЕсли;
			
			// Шаблон, запрещающий изменение реквизитов, не должен перекрываться правилом с другими вариантами заполнения.
			Если ШаблонЗапрещаетИзменение
				И ЗаполненВШаблоне
				И ПравилоРеквизита.Вариант <> ВариантШаблон() Тогда
				
				Если Не ПравилоРеквизита.ЭтоДополнительныйРеквизитДО Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Установлен вариант заполнения ""Из шаблона"" для реквизита %1, поскольку шаблон запрещает изменение'"),
						ИмяРеквизита);
				Иначе
					ТекстСообщения = НСтр("ru = 'Установлен вариант заполнения ""Из шаблона"" для дополнительного реквизита, поскольку шаблон запрещает изменение'");
				КонецЕсли;
				ЗаписьЖурналаРегистрации(
					ИнтеграцияС1СДокументооборот.ИмяСобытияЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение,,
					Правило.Ссылка,
					ТекстСообщения);
					
				НужнаЗапись = Истина;
				
				ПравилоРеквизита.Вариант = ВариантШаблон();
				ПравилоРеквизита.ЗначениеРеквизитаДО = Неопределено;
				ПравилоРеквизита.ИмяРеквизитаОбъектаИС = "";
				
			КонецЕсли;
			
			НомерРеквизита = НомерРеквизита + 1;
			
		КонецЦикла;
		
		Если НужнаЗапись Тогда
			Правило.Записать();
		КонецЕсли;
		Правило.Разблокировать();
		
	КонецЦикла;
	
КонецПроцедуры

#Область АвтоматическоеСоздание

// Добавляет правило передачи реквизита в 1С:Документооборот из интегрируемой системы.
//
// Параметры:
//   Правило - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом - ссылка на правило интеграции.
//   Вариант - ПеречислениеСсылка.ВариантыПравилЗаполненияРеквизитов - вариант заполнения реквизита.
//   ИмяРеквизитаОбъектаДО - Строка - имя реквизита объекта документооборота.
//   ЗначениеЗаполнения - Строка, ОбъектXDTO - значение правила.
//   Обновлять - Булево - обновлять значение.
//   Ключевой - Булево - ключевой реквизит.
//
Процедура ДобавитьПравилоЗаполненияРеквизитаДО(Правило, Вариант, ИмяРеквизитаОбъектаДО, ЗначениеЗаполнения,
	Обновлять = Истина, Ключевой = Ложь) Экспорт
	
	Реквизит = Правило.ПравилаЗаполненияРеквизитовДО.Добавить();
	Реквизит.ИмяРеквизитаОбъектаДО = ИмяРеквизитаОбъектаДО;
	Реквизит.Вариант = Вариант;
	Реквизит.Ключевой = Ключевой;
	Реквизит.Обновлять = Обновлять;
	
	Если Вариант = Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке Тогда
		Реквизит.ВычисляемоеВыражение = ЗначениеЗаполнения;
	ИначеЕсли Вариант = Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта Тогда
		Реквизит.ИмяРеквизитаОбъектаИС = ЗначениеЗаполнения;
	ИначеЕсли Вариант = Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение Тогда
		Реквизит.ЗначениеРеквизитаДО = ЗначениеЗаполнения.name;
		Реквизит.ЗначениеРеквизитаДОID = ЗначениеЗаполнения.objectId.id;
		Реквизит.ЗначениеРеквизитаДОТип = ЗначениеЗаполнения.objectId.type;
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Добавление правила заполнения реквизита с вариантом %1 в автоматическом режиме не поддерживается'"),
			Вариант);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет правило получения реквизита из 1С:Документооборота в интегрируемую систему.
//
// Параметры:
//   Правило - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом - ссылка на правило интеграции.
//   Вариант - ПеречислениеСсылка.ВариантыПравилЗаполненияРеквизитов - вариант заполнения реквизита.
//   ИмяРеквизитаОбъектаИС - Строка - имя реквизита объекта потребителя.
//   ЗначениеЗаполнения - Строка, ОбъектXDTO - значение правила.
//   Обновлять - Булево - обновлять значение.
//   Ключевой - Булево - ключевой реквизит.
//   РежимИзмененияДанныхПроведенногоДокумента -
//     ПеречислениеСсылка.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота - режим изменения
//       данных проведенного документа.
//
Процедура ДобавитьПравилоЗаполненияРеквизитаИС(Правило, Вариант, ИмяРеквизитаОбъектаИС, ЗначениеЗаполнения,
	Обновлять = Истина, Ключевой = Ложь, РежимИзмененияДанныхПроведенногоДокумента = Неопределено) Экспорт
	
	Реквизит = Правило.ПравилаЗаполненияРеквизитовИС.Добавить();
	Реквизит.ИмяРеквизитаОбъектаИС = ИмяРеквизитаОбъектаИС;
	Реквизит.Вариант = Вариант;
	Реквизит.Ключевой = Ключевой;
	Реквизит.Обновлять = Обновлять;
	Реквизит.РежимИзмененияДанныхПроведенногоДокумента = РежимИзмененияДанныхПроведенногоДокумента;
	
	Если Вариант = Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке Тогда
		Реквизит.ВычисляемоеВыражение = ЗначениеЗаполнения;
	ИначеЕсли Вариант = Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта Тогда
		Реквизит.ИмяРеквизитаОбъектаДО = ЗначениеЗаполнения;
	ИначеЕсли Вариант = Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение Тогда
		Реквизит.ЗначениеРеквизитаИС = ЗначениеЗаполнения;
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Добавление правила заполнения реквизита с вариантом %1 в автоматическом режиме не поддерживается'"),
			Вариант);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет и правило передачи и правило получения указанного реквизита с вариантом заполнения "Из реквизита объекта потребителя".
//
// Параметры:
//   Правило - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом - ссылка на правило интеграции.
//   ИмяРеквизитаОбъектаИС - Строка - имя реквизита объекта интегрируемой системы.
//   ИмяРеквизитаОбъектаДО - Строка - имя реквизита объекта документооборота.
//   Обновлять - Булево - обновлять значение.
//
Процедура ДобавитьПарноеПравило(Правило, ИмяРеквизитаОбъектаИС, ИмяРеквизитаОбъектаДО, Обновлять = Истина) Экспорт
	
	ДобавитьПравилоЗаполненияРеквизитаДО(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		ИмяРеквизитаОбъектаДО,
		ИмяРеквизитаОбъектаИС,
		Обновлять);
		
	ДобавитьПравилоЗаполненияРеквизитаИС(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		ИмяРеквизитаОбъектаИС,
		ИмяРеквизитаОбъектаДО,
		Обновлять);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет реквизит в строку таблицы с заполнением колонок, указанных в качестве параметров.
//
Процедура ДобавитьРеквизит(Реквизиты, Имя, Представление, Тип, ОбязательноеЗаполнение = Ложь)
	
	НоваяСтрока = Реквизиты.Добавить();
	НоваяСтрока.Имя = Имя;
	НоваяСтрока.Представление = Представление;
	
	Если ТипЗнч(Тип) <> Тип("СписокЗначений") Тогда 
		Типы = Новый СписокЗначений;
		Типы.Добавить(Тип);
		НоваяСтрока.Тип = Типы;
	Иначе
		НоваяСтрока.Тип = Тип;
	КонецЕсли;
	
	НоваяСтрока.ОбязательноеЗаполнение = ОбязательноеЗаполнение;
	
КонецПроцедуры

// Добавляет дополнительный реквизит в строку таблицы с заполнением колонок, указанных в качестве параметров.
//
Процедура ДобавитьДополнительныйРеквизит(Реквизиты, Представление, Тип, ДопРеквизитID, ДопРеквизитТип)
	
	НоваяСтрока = Реквизиты.Добавить();
	НоваяСтрока.Представление = Представление;
	
	Если ТипЗнч(Тип) <> Тип("СписокЗначений") Тогда 
		Типы = Новый СписокЗначений;
		Типы.Добавить(Тип);
		НоваяСтрока.Тип = Типы;
	Иначе
		НоваяСтрока.Тип = Тип;
	КонецЕсли;
	
	НоваяСтрока.ДопРеквизит = Истина;
	НоваяСтрока.ДопРеквизитID = ДопРеквизитID;
	НоваяСтрока.ДопРеквизитТип = ДопРеквизитТип;
	
КонецПроцедуры

// Добавляет реквизит шаблона в строку таблицы.
//
Процедура ДобавитьРеквизитШаблона(Прокси, Реквизиты, ИмяСвойстваДокумента, ШаблонXDTO,
	Знач ИмяСвойстваШаблона = Неопределено)
	
	Если ИмяСвойстваШаблона = Неопределено Тогда // по умолчанию совпадают
		ИмяСвойстваШаблона = ИмяСвойстваДокумента;
	КонецЕсли;
	
	Если Не ШаблонXDTO.Установлено(ИмяСвойстваШаблона) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Реквизиты.Добавить();
	НоваяСтрока.ИмяРеквизитаОбъектаДО = ИмяСвойстваДокумента;
	НоваяСтрока.ЭтоДополнительныйРеквизитДО = Ложь;
	Если ИнтеграцияС1СДокументооборот.ЭтоОбъектноеСвойство(Прокси, ШаблонXDTO, ИмяСвойстваШаблона) Тогда
		НоваяСтрока.ШаблонЗначение = ШаблонXDTO[ИмяСвойстваШаблона].name;
		НоваяСтрока.ШаблонID = ШаблонXDTO[ИмяСвойстваШаблона].objectId.id;
		НоваяСтрока.ШаблонТип = ШаблонXDTO[ИмяСвойстваШаблона].objectId.type;
	Иначе // примитивный тип
		НоваяСтрока.ШаблонЗначение = ШаблонXDTO[ИмяСвойстваШаблона];
	КонецЕсли;
	
КонецПроцедуры

// Добавляет таблицу в строку таблицы с заполнением колонок, указанных в качестве параметров.
//
Процедура ДобавитьТаблицу(Реквизиты, Имя, Представление)
	
	НоваяСтрока = Реквизиты.Добавить();
	НоваяСтрока.ЭтоТаблица = Истина;
	НоваяСтрока.Имя = Имя;
	НоваяСтрока.Представление = Представление;
	
КонецПроцедуры

// Добавляет реквизит в подчиненную строку таблицы, с заполнением колонок, указанных в качестве параметров.
//
Процедура ДобавитьРеквизитТаблицы(Реквизиты, ИмяТаблицы, Имя, Представление, Тип, ОбязательноеЗаполнение = Ложь)
	
	НоваяСтрока = Реквизиты.Добавить();
	НоваяСтрока.Таблица = ИмяТаблицы;
	НоваяСтрока.Имя = Имя;
	НоваяСтрока.Представление = Представление;
	
	Если ТипЗнч(Тип) <> Тип("СписокЗначений") Тогда 
		Типы = Новый СписокЗначений;
		Типы.Добавить(Тип);
		НоваяСтрока.Тип = Типы;
	Иначе
		НоваяСтрока.Тип = Тип;
	КонецЕсли;
	
	НоваяСтрока.ОбязательноеЗаполнение = ОбязательноеЗаполнение;
	
КонецПроцедуры

// Возвращает Истина, если имя описывает один из примитивных типов, и Ложь в противном случае.
//
Функция ЭтоПримитивныйТип(ИмяТипа)
	
	Возврат ИмяТипа = "Строка"
			Или ИмяТипа = "Дата"
			Или ИмяТипа = "Число"
			Или ИмяТипа = "ДатаВремя"
			Или ИмяТипа = "Булево";
	
КонецФункции

// Возвращает Истина, если переданное значение является перечислением.
//
Функция ЭтоПеречисление(Значение)
	Возврат Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение));
КонецФункции

// Получает данные правила для выгрузки.
//
// Параметры:
//   Правило - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом - правило, данные которого нужно получить.
//
// Возвращаемое значение:
//   Структура - данные правила, необходимые для выгрузки, ключи - имена реквизитов и табличных частей.
//
Функция ДанныеПравилаДляВыгрузки(Правило) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Правило.Ссылка КАК Ссылка,
		|	Правило.ТипОбъектаИС КАК ТипОбъектаИС,
		|	Правило.ТипОбъектаДО КАК ТипОбъектаДО,
		|	Правило.ТипФайловСохраненияПечатныхФорм КАК ТипФайловСохраненияПечатныхФорм,
		|	Правило.Шаблон КАК Шаблон,
		|	Правило.ШаблонТип КАК ШаблонТип,
		|	Правило.ШаблонID КАК ШаблонID,
		|	Правило.ШаблонЗапрещаетИзменение КАК ШаблонЗапрещаетИзменение,
		|	Правило.НеСоздаватьСвязиПоСсылкам КАК НеСоздаватьСвязиПоСсылкам,
		|	Правило.ПравилаЗаполненияРеквизитовДО.(
		|		НомерСтроки КАК НомерСтроки,
		|		Вариант,
		|		ВычисляемоеВыражение,
		|		ЭтоДополнительныйРеквизитДО,
		|		ДополнительныйРеквизитДОID,
		|		ДополнительныйРеквизитДОТип,
		|		ЭтоДополнительныйРеквизитИС,
		|		ДополнительныйРеквизитИС,
		|		ЗаполненВШаблоне,
		|		ЗначениеРеквизитаДО,
		|		ЗначениеРеквизитаДОID,
		|		ИмяРеквизитаОбъектаДО,
		|		ИмяРеквизитаОбъектаИС,
		|		Ключевой,
		|		Таблица,
		|		Обновлять,
		|		ЗначениеРеквизитаДОТип,
		|		ШаблонЗначение,
		|		ШаблонID,
		|		ШаблонТип,
		|		ЭтоТаблица
		|	) КАК ПравилаЗаполненияРеквизитовДО,
		|	Правило.ПрисоединяемыеПечатныеФормы.(
		|		ИмяКоманды,
		|		МенеджерПечати,
		|		Обновлять,
		|		ПредставлениеКоманды
		|	) КАК ПрисоединяемыеПечатныеФормы
		|ИЗ
		|	Справочник.ПравилаИнтеграцииС1СДокументооборотом КАК Правило
		|ГДЕ
		|	Правило.Ссылка = &Правило
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
		
	Запрос.УстановитьПараметр("Правило", Правило);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ДанныеПравила = Новый Структура;
	Для Каждого Колонка Из Результат.Колонки Цикл
		ДанныеПравила.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
	КонецЦикла;
	ДанныеПравила.ПравилаЗаполненияРеквизитовДО = ДанныеПравила.ПравилаЗаполненияРеквизитовДО.Выгрузить();
	ДанныеПравила.ПрисоединяемыеПечатныеФормы = ДанныеПравила.ПрисоединяемыеПечатныеФормы.Выгрузить();
	
	Возврат ДанныеПравила;
	
КонецФункции

// Возвращает значение Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта.
//
Функция ВариантРеквизит()
	Возврат Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта;
КонецФункции

// Возвращает значение Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение.
//
Функция ВариантЗначение()
	Возврат Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение;
КонецФункции

// Возвращает значение Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке.
//
Функция ВариантВыражение()
	Возврат Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке;
КонецФункции

// Возвращает значение Перечисления.ВариантыПравилЗаполненияРеквизитов.ИзШаблона.
//
Функция ВариантШаблон()
	Возврат Перечисления.ВариантыПравилЗаполненияРеквизитов.ИзШаблона;
КонецФункции

// В случае, когда выражение на встроенном языке возвращает имя или синоним значения
// перечисления – процедура заполняет реквизит объекта соответствующим значением.
// Если тип реквизита не является перечислением – реквизит будет заполнен переданным результатом.
//
// Параметры:
//   Объект - произвольный объект, реквизит которого нужно заполнить.
//   ИмяРеквизита - Строка - реквизит, который требуется заполнить.
//   Результат - результат выполнения выражения на встроенном языке.
//
Процедура ЗаполнитьПоРезультатуВыраженияНаВстроенномЯзыке(Объект, ИмяРеквизита, Результат)
	
	Если ТипЗнч(Результат) = Тип("Строка") И Результат <> "" И ЭтоПеречисление(Объект[ИмяРеквизита]) Тогда
		ИмяЗначения = СокрЛП(Результат);
		МенеджерПеречисления = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект[ИмяРеквизита]);
		МетаданныеРеквизита = Объект[ИмяРеквизита].Метаданные();
		Если МетаданныеРеквизита.ЗначенияПеречисления.Найти(ИмяЗначения) = Неопределено Тогда
			// Заполним перечисление по переданному синониму
			Объект[ИмяРеквизита] = МенеджерПеречисления.ПустаяСсылка();
			Для Каждого ЗначениеПеречисления Из МетаданныеРеквизита.ЗначенияПеречисления Цикл
				Если ВРег(СокрЛП(ЗначениеПеречисления.Синоним)) = ВРег(ИмяЗначения) Тогда
					Объект[ИмяРеквизита] = МенеджерПеречисления[ЗначениеПеречисления.Имя];
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			// Заполним перечисление по переданному имени
			Объект[ИмяРеквизита] = МенеджерПеречисления[ИмяЗначения];
		КонецЕсли;
	Иначе
		Объект[ИмяРеквизита] = Результат;
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураПоискаРеквизита(ПутьКДанным)
	
	РазделеннаяСтрока = СтрРазделить(ПутьКДанным, ".");
	Если РазделеннаяСтрока.Количество() = 1 Тогда
		СтруктураПоиска = Новый Структура("Имя", РазделеннаяСтрока[0]);
	Иначе
		СтруктураПоиска = Новый Структура("Таблица, Имя", РазделеннаяСтрока[0], РазделеннаяСтрока[1]);
	КонецЕсли;
	
	Возврат СтруктураПоиска;
	
КонецФункции

Функция ПутьКДаннымРеквизита(Реквизит)
	
	Если Реквизит.Таблица <> "" Тогда
		Возврат Реквизит.Таблица + "." + Реквизит.Имя;
	Иначе
		Возврат Реквизит.Имя;
	КонецЕсли;
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ОписаниеОбработчиковОбновления(Обработчики) Экспорт
	
	ИнтеграцияС1СДокументооборотПереопределяемый.ОписаниеОбработчиковОбновленияПравилИнтеграции(Обработчики);
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ИнтеграцияС1СДокументооборотПереопределяемый.ЗарегистрироватьПравилаИнтеграцииКОбработкеДляПереходаНаНовуюВерсию(Параметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ИнтеграцияС1СДокументооборотПереопределяемый.ОбработатьПравилаИнтеграцииДляПереходаНаНовуюВерсию(Параметры);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли