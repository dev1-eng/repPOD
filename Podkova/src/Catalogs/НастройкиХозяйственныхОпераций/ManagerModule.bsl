#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область ПрограммныйИнтерфейс

// Выполняет установку параметров сеанса. Вызывается из модуля сеанса.
//
// Параметры:
//  ИмяПараметра			 - Строка - имя параметра сеанса.
//  УстановленныеПараметры	 - Массив - все установленные параметры сеанса.
//
Процедура УстановитьПараметрыСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	ПараметрыСеанса.ХозяйственныеОперацииСНастройкамиОграниченийДоступа = Новый ФиксированныйМассив(Новый Массив);
	
	Если ИмяПараметра = "ХозяйственныеОперацииСНастройкамиОграниченийДоступа" Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозяйственныеОперацииДоступныеДляОграниченийДоступа.ХозяйственнаяОперация КАК Ссылка
		|ИЗ
		|	Справочник.НастройкиХозяйственныхОпераций КАК ХозяйственныеОперацииДоступныеДляОграниченийДоступа
		|ГДЕ
		|	ХозяйственныеОперацииДоступныеДляОграниченийДоступа.ПометкаУдаления = ЛОЖЬ
		|	И ХозяйственныеОперацииДоступныеДляОграниченийДоступа.ИспользоватьДляОграниченийДоступа = ИСТИНА";
		
		ОперацииДляПроверкиОграниченийДоступа = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		ПараметрыСеанса.ХозяйственныеОперацииСНастройкамиОграниченийДоступа = Новый ФиксированныйМассив(ОперацииДляПроверкиОграниченийДоступа);
		УстановленныеПараметры.Добавить(ИмяПараметра);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.НастройкиХозяйственныхОпераций.ЗаполнитьПредопределенныеНастройкиХозяйственныхОпераций";
	Обработчик.Версия = "11.4.13.39";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("cd45225d-f1f6-4a31-a02a-c00bf89351c1");
	Обработчик.Комментарий = НСтр("ru = 'Обновляет реквизиты предопределенных элементов справочника  ""Настройки хозяйственных операций"" согласно заданным настройкам в текстовых макетах.'");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.НастройкиХозяйственныхОпераций.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

КонецПроцедуры

// Обработчик первого запуска.
// Заполняет предопределенные элементы справочника "НастройкиХозяйственныхОпераций".
//
Процедура ЗаполнитьПредопределенныеНастройкиХозяйственныхОпераций(Параметры = Неопределено) Экспорт
	
	РеквизитыXML = Справочники.НастройкиХозяйственныхОпераций.ПолучитьМакет("НастройкиПредопределенныхЭлементов").ПолучитьТекст();
	РеквизитыТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(РеквизитыXML).Данные;
	
	СвязанныеДокументыXML = Справочники.НастройкиХозяйственныхОпераций.ПолучитьМакет("СвязанныеДокументы").ПолучитьТекст();
	СвязанныеДокументыТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(СвязанныеДокументыXML).Данные;
	ДобавитьИдентификаторыМетаданныхДокументов(СвязанныеДокументыТаблица);
	
	ФункциональныеОпцииXML = Справочники.НастройкиХозяйственныхОпераций.ПолучитьМакет("ФункциональныеОпции").ПолучитьТекст();
	ФункциональныеОпцииТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(ФункциональныеОпцииXML).Данные;
	
	Для каждого Реквизиты Из РеквизитыТаблица Цикл
		ID = Реквизиты.ID;
		Объект = Справочники.НастройкиХозяйственныхОпераций[ID].ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(Объект, Реквизиты);
		
		// На случай если региональные настройки представления логических значений отличаются от типовых.
		Объект.ИспользоватьВБюджетировании = Реквизиты.ИспользоватьВБюджетировании = "Да";
		Объект.ИспользоватьВМеждународномУчете = Реквизиты.ИспользоватьВМеждународномУчете = "Да";
		Объект.ИспользоватьДляВыбора = Реквизиты.ИспользоватьДляВыбора = "Да";
		Объект.ИспользоватьВРеестреДокументов = Реквизиты.ИспользоватьВРеестреДокументов = "Да";
		Объект.ИспользоватьДляОграниченийДоступа = Реквизиты.ИспользоватьДляОграниченийДоступа = "Да";
		
		Приход = Реквизиты.Приход;
		Если ЗначениеЗаполнено(Приход) Тогда
			Объект.Приход = Перечисления.ТипыДанныхУчета[Приход];
		КонецЕсли;
		
		Расход = Реквизиты.Расход;
		Если ЗначениеЗаполнено(Расход) Тогда
			Объект.Расход = Перечисления.ТипыДанныхУчета[Расход];
		КонецЕсли;
		
		Хозоперация = Реквизиты.ID;
		Если ЗначениеЗаполнено(Хозоперация) Тогда
			Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации[Хозоперация];
		КонецЕсли;
		
		Объект.Документы.Очистить();
		НайденныеСтроки = СвязанныеДокументыТаблица.Скопировать(Новый Структура("OwnerID", ID));
		НайденныеСтроки.Свернуть("ПредставлениеДокумента,ИдентификаторОбъектаМетаданных");
		НайденныеСтроки.Сортировать("ПредставлениеДокумента");
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если ЗначениеЗаполнено(НайденнаяСтрока.ИдентификаторОбъектаМетаданных) Тогда
				ЗаполнитьЗначенияСвойств(Объект.Документы.Добавить(), НайденнаяСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Объект.ФункциональныеОпции.Очистить();
		НайденныеСтроки = ФункциональныеОпцииТаблица.Скопировать(Новый Структура("OwnerID", ID));
		НайденныеСтроки.Сортировать("ИмяФункциональнойОпции");
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НоваяСтрока = Объект.ФункциональныеОпции.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
			Если Метаданные.ФункциональныеОпции.Найти(НайденнаяСтрока.ИмяФункциональнойОпции) = Неопределено Тогда
				НоваяСтрока.ИмяФункциональнойОпции = "УправлениеПредприятием";
			КонецЕсли;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьИдентификаторыМетаданныхДокументов(СвязанныеДокументы)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.OwnerID КАК OwnerID,
	|	Т.ИмяДокумента КАК ИмяДокумента,
	|	Т.ПредставлениеДокумента КАК ПредставлениеДокумента
	|ПОМЕСТИТЬ втСвязанныеДокументы
	|ИЗ
	|	&СвязанныеДокументы КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСвязанныеДокументы.OwnerID,
	|	втСвязанныеДокументы.ИмяДокумента,
	|	втСвязанныеДокументы.ПредставлениеДокумента,
	|	ИдентификаторыМетаданных.Ссылка КАК ИдентификаторОбъектаМетаданных
	|ИЗ
	|	втСвязанныеДокументы КАК втСвязанныеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыМетаданных
	|		ПО ВЫРАЗИТЬ(втСвязанныеДокументы.ИмяДокумента КАК СТРОКА(255)) = ИдентификаторыМетаданных.Имя
	|			И ИдентификаторыМетаданных.Родитель.Наименование = &Документы
	|");
	
	Запрос.УстановитьПараметр("СвязанныеДокументы", СвязанныеДокументы);
	Запрос.УстановитьПараметр("Документы", НСтр("ru = 'Документы'"));
	СвязанныеДокументы = Запрос.Выполнить().Выгрузить();

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли