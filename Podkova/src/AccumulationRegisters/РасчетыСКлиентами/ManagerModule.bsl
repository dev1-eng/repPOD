#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Т
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Т1 
	|	ПО Т.АналитикаУчетаПоПартнерам = Т1.КлючАналитики
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Т1.Организация)
	|	И ЗначениеРазрешено(Т1.Партнер)";
	
	Ограничение.ТекстДляВнешнихПользователей =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК ЭтотСписок
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|	ПО АналитикаУчетаПоПартнерам.КлючАналитики = ЭтотСписок.АналитикаУчетаПоПартнерам
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВнешниеПользователи КАК ВнешниеПользователиПартнеры
	|	ПО ВнешниеПользователиПартнеры.ОбъектАвторизации = АналитикаУчетаПоПартнерам.Партнер
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ВнешниеПользователиПартнеры.Ссылка)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.РасчетыСКлиентами.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.4.13.106";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b8aa5985-d95b-4ffc-857e-5bab91cd956b");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.РасчетыСКлиентами.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Исправляет даты платежа в движениях корректировок реализаций.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентами.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентами.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

КонецПроцедуры

// Обработчик обновления
// 
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры = Неопределено) Экспорт
	
	ПолноеИмяРегистра = СоздатьНаборЗаписей().Метаданные().ПолноеИмя();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|		И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И ДанныеРегистра.КОплате <> 0
	|		И ДанныеРегистра.ДатаПлатежа <> ДАТАВРЕМЯ(1,1,1)
	|	ИЛИ ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) В (ТИП(Документ.ОтчетКомиссионера),ТИП(Документ.ОтчетКомиссионераОСписании)) 
	|		И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И ДанныеРегистра.Сумма < 0
	|		И ДанныеРегистра.ДатаПлатежа <> ДАТАВРЕМЯ(1,1,1)
	|	ИЛИ ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) В (ТИП(Документ.ОтчетКомиссионера),ТИП(Документ.ОтчетКомиссионераОСписании)) 
	|		И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И ДанныеРегистра.Сумма < 0
	|		И ДанныеРегистра.ДатаПлатежа = ДАТАВРЕМЯ(1,1,1)
	|	ИЛИ ДанныеРегистра.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|		И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И ДанныеРегистра.Сумма < 0
	|		И (ДанныеРегистра.ДатаПлатежа = ДАТАВРЕМЯ(1,1,1) ИЛИ ДанныеРегистра.ДатаПлатежа <> НАЧАЛОПЕРИОДА(ДанныеРегистра.ДатаПлатежа, ДЕНЬ))
	|	ИЛИ ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) В (ТИП(Документ.СписаниеБезналичныхДенежныхСредств), ТИП(Документ.РасходныйКассовыйОрдер))
	|		И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И ДанныеРегистра.Сумма > 0
	|		И (ДанныеРегистра.ДатаПлатежа = ДАТАВРЕМЯ(1,1,1) ИЛИ ДанныеРегистра.ДатаПлатежа <> НАЧАЛОПЕРИОДА(ДанныеРегистра.ДатаПлатежа, ДЕНЬ))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Регистраторы,
		ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.РасчетыСКлиентами";
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.РасчетыСКлиентами;
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(Параметры.Очередь, Неопределено, ПолноеИмяРегистра);
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСКлиентами.НаборЗаписей");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Регистратор);
			
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыНакопления.РасчетыСКлиентами.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Прочитать();
			Для Каждого Стр Из НаборЗаписей Цикл
				Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") 
					И ЗначениеЗаполнено(Стр.КорОбъектРасчетов) Тогда
					Стр.КорОбъектРасчетов = Неопределено;
				КонецЕсли;
					
				Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.КорректировкаРеализации") 
					И Стр.ВидДвижения = ВидДвиженияНакопления.Расход
					И Стр.КОплате <> 0
					И Стр.ДатаПлатежа <> Дата(1,1,1) Тогда
					Стр.ДатаПлатежа = Дата(1,1,1);
					Стр.ПорядокЗачетаПоДатеПлатежа = Стр.ПорядокОперации;
				КонецЕсли;
					
				Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ОтчетКомиссионера")
						ИЛИ ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ОтчетКомиссионераОСписании")
					И Стр.Сумма < 0 ИЛИ Стр.КОплате < 0 Тогда
					Если Стр.ВидДвижения = ВидДвиженияНакопления.Приход
						И Стр.ДатаПлатежа <> Дата(1,1,1) Тогда
						Стр.ДатаПлатежа = Дата(1,1,1);
						Стр.ПорядокЗачетаПоДатеПлатежа = Стр.ПорядокОперации;
					ИначеЕсли Стр.ВидДвижения = ВидДвиженияНакопления.Расход
						И Стр.ДатаПлатежа = Дата(1,1,1) Тогда
						Стр.ДатаПлатежа = НачалоДня(Стр.ДатаРегистратора);
						Стр.ПорядокЗачетаПоДатеПлатежа = Стр.ПорядокОперации;
					КонецЕсли;
				КонецЕсли;
				
				Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ВзаимозачетЗадолженности") 
					И Стр.ВидДвижения = ВидДвиженияНакопления.Расход
					И Стр.Сумма < 0
					И (Стр.ДатаПлатежа = Дата(1,1,1) ИЛИ Стр.ДатаПлатежа <> НачалоДня(Стр.ДатаРегистратора)) Тогда
					Стр.ДатаПлатежа = НачалоДня(Стр.ДатаРегистратора);
					Стр.ПорядокЗачетаПоДатеПлатежа = ОперативныеВзаиморасчетыСервер.Порядок(Стр.ДатаПлатежа,
						Прав(Стр.ПорядокЗачетаПоДатеПлатежа,11),,
						Тип("ДокументСсылка.ВзаимозачетЗадолженности"),
						Стр.ВидДвижения);
				КонецЕсли;
				
				Если (ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.РасходныйКассовыйОрдер")
						ИЛИ ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств"))
					И Стр.Сумма > 0 И Стр.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
						Стр.ДатаПлатежа = НачалоДня(Стр.ДатаРегистратора);
						Стр.ПорядокЗачетаПоДатеПлатежа = Стр.ПорядокОперации;
				КонецЕсли;
			КонецЦикла;
			
			Если НаборЗаписей.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать движения по регистру ""Расчеты с клиентами"" документа ""%1"" по причине: %2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Регистратор, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				МетаданныеРегистра,
				Выборка.Регистратор,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = НЕ ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
