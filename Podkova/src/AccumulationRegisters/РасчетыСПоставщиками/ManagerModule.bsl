#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Т
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Т1 
	|	ПО Т.АналитикаУчетаПоПартнерам = Т1.КлючАналитики
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Т1.Организация)
	|	И ЗначениеРазрешено(Т1.Партнер)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.РасчетыСПоставщиками.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.4.13.106";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1eec5809-f67f-49dd-961a-facfaf5bb9ff");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.РасчетыСПоставщиками.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Исправляет пустые значения реквизита ЗакупкаПоЗаказу.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщиками.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщиками.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.РасчетыСПоставщиками";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Расчеты.ЗакупкаПоЗаказу) В (&СписокТипов)
	|	ИЛИ Расчеты.Регистратор ССЫЛКА Документ.КорректировкаПриобретения
	|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И Расчеты.КОплате <> 0
	|		И Расчеты.ДатаПлатежа <> ДАТАВРЕМЯ(1,1,1)
	|	ИЛИ ТИПЗНАЧЕНИЯ(Расчеты.Регистратор) В (ТИП(Документ.ОтчетКомиссионера),ТИП(Документ.ОтчетКомиссионераОСписании)) 
	|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Расчеты.Сумма < 0
	|		И Расчеты.ДатаПлатежа <> ДАТАВРЕМЯ(1,1,1)
	|	ИЛИ ТИПЗНАЧЕНИЯ(Расчеты.Регистратор) В (ТИП(Документ.ОтчетКомиссионера),ТИП(Документ.ОтчетКомиссионераОСписании)) 
	|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И Расчеты.Сумма < 0
	|		И Расчеты.ДатаПлатежа = ДАТАВРЕМЯ(1,1,1)
	|	ИЛИ ТИПЗНАЧЕНИЯ(Расчеты.Регистратор) В (ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств), ТИП(Документ.ПриходныйКассовыйОрдер))
	|		И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Расчеты.Сумма > 0
	|		И (Расчеты.ДатаПлатежа = ДАТАВРЕМЯ(1,1,1) ИЛИ Расчеты.ДатаПлатежа <> НАЧАЛОПЕРИОДА(Расчеты.ДатаПлатежа, ДЕНЬ))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
	Запрос.УстановитьПараметр("СписокТипов",СписокТипов);
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.РасчетыСПоставщиками";
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.РасчетыСПоставщиками;
	
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(Параметры.Очередь, Неопределено, ПолноеИмяРегистра);
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСПоставщиками.НаборЗаписей");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Регистратор);
			
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыНакопления.РасчетыСПоставщиками.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Прочитать();
			Для Каждого Стр Из НаборЗаписей Цикл
				Если НЕ ЗначениеЗаполнено(Стр.ЗакупкаПоЗаказу) И Стр.ЗакупкаПоЗаказу <> Неопределено И СписокТипов.НайтиПоЗначению(ТипЗнч(Выборка.Регистратор)) <> Неопределено Тогда
					Стр.ЗакупкаПоЗаказу = Неопределено;
				КонецЕсли;
				
				Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") 
					И ЗначениеЗаполнено(Стр.КорОбъектРасчетов) Тогда
					Стр.КорОбъектРасчетов = Неопределено;
				КонецЕсли;
				
				Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.КорректировкаПриобретения") 
					И Стр.ВидДвижения = ВидДвиженияНакопления.Приход
					И Стр.КОплате <> 0
					И Стр.ДатаПлатежа <> Дата(1,1,1) Тогда
					Стр.ДатаПлатежа = Дата(1,1,1);
					Стр.ПорядокЗачетаПоДатеПлатежа = Стр.ПорядокОперации;
				КонецЕсли;
				
				Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ОтчетКомиссионера")
						ИЛИ ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ОтчетКомиссионераОСписании")
					И Стр.Сумма < 0 ИЛИ Стр.КОплате < 0 Тогда
					Если Стр.ВидДвижения = ВидДвиженияНакопления.Расход
						И Стр.ДатаПлатежа <> Дата(1,1,1) Тогда
						Стр.ДатаПлатежа = Дата(1,1,1);
						Стр.ПорядокЗачетаПоДатеПлатежа = Стр.ПорядокОперации;
					ИначеЕсли Стр.ВидДвижения = ВидДвиженияНакопления.Приход
						И Стр.ДатаПлатежа = Дата(1,1,1) Тогда
						Стр.ДатаПлатежа = НачалоДня(Стр.ДатаРегистратора);
						Стр.ПорядокЗачетаПоДатеПлатежа = Стр.ПорядокОперации;
					КонецЕсли;
				КонецЕсли;
				
				Если (ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
						ИЛИ ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств"))
					И Стр.Сумма > 0 И Стр.ВидДвижения = ВидДвиженияНакопления.Расход Тогда
					Стр.ДатаПлатежа = НачалоДня(Стр.ДатаРегистратора);
					Стр.ПорядокЗачетаПоДатеПлатежа = Стр.ПорядокОперации;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НаборЗаписей.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать движения по регистру ""Расчеты с поставщиками"" документа ""%1"" по причине: %2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Регистратор, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				МетаданныеРегистра,
				Выборка.Регистратор,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = НЕ ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
